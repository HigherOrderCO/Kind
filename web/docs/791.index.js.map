{"version":3,"sources":["webpack://kind-web/./src/apps/Web.Playground.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"791.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c0;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c1($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function Web$Playground$State$new$(_device$1, _window$2, _mouse_over$3, _code$4, _output$5) {\n        var $33 = ({\n            _: 'Web.Playground.State.new',\n            'device': _device$1,\n            'window': _window$2,\n            'mouse_over': _mouse_over$3,\n            'code': _code$4,\n            'output': _output$5\n        });\n        return $33;\n    };\n    const Web$Playground$State$new = x0 => x1 => x2 => x3 => x4 => Web$Playground$State$new$(x0, x1, x2, x3, x4);\n    const Device$big_desktop = ({\n        _: 'Device.big_desktop'\n    });\n    const Web$Playground$Window$input = ({\n        _: 'Web.Playground.Window.input'\n    });\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $34 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $34;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function BitsMap$(_A$1) {\n        var $35 = null;\n        return $35;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $36 = null;\n        return $36;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $37 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $37;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $38 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $38;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $40 = self.pred;\n                var $41 = (Word$to_bits$($40) + '0');\n                var $39 = $41;\n                break;\n            case 'Word.i':\n                var $42 = self.pred;\n                var $43 = (Word$to_bits$($42) + '1');\n                var $39 = $43;\n                break;\n            case 'Word.e':\n                var $44 = Bits$e;\n                var $39 = $44;\n                break;\n        };\n        return $39;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $45 = 1n + _pred$1;\n        return $45;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $47 = Bits$e;\n            var $46 = $47;\n        } else {\n            var $48 = self.charCodeAt(0);\n            var $49 = self.slice(1);\n            var $50 = (String$to_bits$($49) + (u16_to_bits($48)));\n            var $46 = $50;\n        };\n        return $46;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $52 = self.head;\n                var $53 = self.tail;\n                var self = $52;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $55 = self.fst;\n                        var $56 = self.snd;\n                        var $57 = (bitsmap_set(String$to_bits$($55), $56, Map$from_list$($53), 'set'));\n                        var $54 = $57;\n                        break;\n                };\n                var $51 = $54;\n                break;\n            case 'List.nil':\n                var $58 = BitsMap$new;\n                var $51 = $58;\n                break;\n        };\n        return $51;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $59 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $59;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Pair$(_A$1, _B$2) {\n        var $60 = null;\n        return $60;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $61 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $61;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n    const Web$Playground$constant$light_gray_color = \"#E0E0E0\";\n    const Web$Playground$constant$white_smoke = \"#F5F5F5\";\n\n    function DOM$text$(_value$1) {\n        var $62 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $62;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n    const Bool$true = true;\n    const Bool$false = false;\n    const Bool$and = a0 => a1 => (a0 && a1);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $64 = Bool$false;\n                var $63 = $64;\n                break;\n            case 'Cmp.eql':\n                var $65 = Bool$true;\n                var $63 = $65;\n                break;\n        };\n        return $63;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $67 = self.pred;\n                var $68 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $70 = self.pred;\n                            var $71 = (_a$pred$10 => {\n                                var $72 = Word$cmp$go$(_a$pred$10, $70, _c$4);\n                                return $72;\n                            });\n                            var $69 = $71;\n                            break;\n                        case 'Word.i':\n                            var $73 = self.pred;\n                            var $74 = (_a$pred$10 => {\n                                var $75 = Word$cmp$go$(_a$pred$10, $73, Cmp$ltn);\n                                return $75;\n                            });\n                            var $69 = $74;\n                            break;\n                        case 'Word.e':\n                            var $76 = (_a$pred$8 => {\n                                var $77 = _c$4;\n                                return $77;\n                            });\n                            var $69 = $76;\n                            break;\n                    };\n                    var $69 = $69($67);\n                    return $69;\n                });\n                var $66 = $68;\n                break;\n            case 'Word.i':\n                var $78 = self.pred;\n                var $79 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $81 = self.pred;\n                            var $82 = (_a$pred$10 => {\n                                var $83 = Word$cmp$go$(_a$pred$10, $81, Cmp$gtn);\n                                return $83;\n                            });\n                            var $80 = $82;\n                            break;\n                        case 'Word.i':\n                            var $84 = self.pred;\n                            var $85 = (_a$pred$10 => {\n                                var $86 = Word$cmp$go$(_a$pred$10, $84, _c$4);\n                                return $86;\n                            });\n                            var $80 = $85;\n                            break;\n                        case 'Word.e':\n                            var $87 = (_a$pred$8 => {\n                                var $88 = _c$4;\n                                return $88;\n                            });\n                            var $80 = $87;\n                            break;\n                    };\n                    var $80 = $80($78);\n                    return $80;\n                });\n                var $66 = $79;\n                break;\n            case 'Word.e':\n                var $89 = (_b$5 => {\n                    var $90 = _c$4;\n                    return $90;\n                });\n                var $66 = $89;\n                break;\n        };\n        var $66 = $66(_b$3);\n        return $66;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $91 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $91;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $92 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $92;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n    const String$eql = a0 => a1 => (a0 === a1);\n\n    function BitsMap$union$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $94 = self.val;\n                var $95 = self.lft;\n                var $96 = self.rgt;\n                var self = _b$3;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $98 = self.val;\n                        var $99 = self.lft;\n                        var $100 = self.rgt;\n                        var self = $94;\n                        switch (self._) {\n                            case 'Maybe.none':\n                                var $102 = BitsMap$tie$($98, BitsMap$union$($95, $99), BitsMap$union$($96, $100));\n                                var $101 = $102;\n                                break;\n                            case 'Maybe.some':\n                                var $103 = BitsMap$tie$($94, BitsMap$union$($95, $99), BitsMap$union$($96, $100));\n                                var $101 = $103;\n                                break;\n                        };\n                        var $97 = $101;\n                        break;\n                    case 'BitsMap.new':\n                        var $104 = _a$2;\n                        var $97 = $104;\n                        break;\n                };\n                var $93 = $97;\n                break;\n            case 'BitsMap.new':\n                var $105 = _b$3;\n                var $93 = $105;\n                break;\n        };\n        return $93;\n    };\n    const BitsMap$union = x0 => x1 => BitsMap$union$(x0, x1);\n\n    function Map$union$(_a$2, _b$3) {\n        var $106 = BitsMap$union$(_a$2, _b$3);\n        return $106;\n    };\n    const Map$union = x0 => x1 => Map$union$(x0, x1);\n    const Web$Kind$constant$secondary_color = \"#3891A6\";\n\n    function Web$Playground$comp$btn_run_code$(_mouse_over$1) {\n        var _is_hover$2 = (\"btn_run_code\" === _mouse_over$1);\n        var _normal$3 = Map$from_list$(List$cons$(Pair$new$(\"width\", \"50px\"), List$cons$(Pair$new$(\"height\", \"25px\"), List$cons$(Pair$new$(\"margin\", \"5px 0px\"), List$cons$(Pair$new$(\"color\", \"white\"), List$cons$(Pair$new$(\"cursor\", \"pointer\"), List$cons$(Pair$new$(\"border\", \"none\"), List$cons$(Pair$new$(\"border-radius\", \"4px\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"justify-content\", \"center\"), List$cons$(Pair$new$(\"align-content\", \"center\"), List$cons$(Pair$new$(\"align-items\", \"center\"), List$nil))))))))))));\n        var $107 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"btn_run_code\"), List$nil)), (() => {\n            var self = _is_hover$2;\n            if (self) {\n                var $108 = Map$union$(_normal$3, Map$from_list$(List$cons$(Pair$new$(\"background-color\", \"#44B8D3\"), List$nil)));\n                return $108;\n            } else {\n                var $109 = Map$union$(_normal$3, Map$from_list$(List$cons$(Pair$new$(\"background-color\", Web$Kind$constant$secondary_color), List$nil)));\n                return $109;\n            };\n        })(), List$cons$(DOM$text$(\"check\"), List$nil));\n        return $107;\n    };\n    const Web$Playground$comp$btn_run_code = x0 => Web$Playground$comp$btn_run_code$(x0);\n\n    function Web$Playground$comp$header$(_device$1, _mouse_over$2, _window$3) {\n        var _playground$4 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"input_view\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"14px\"), List$cons$(Pair$new$(\"height\", \"35px\"), List$cons$(Pair$new$(\"padding\", \"8px 15px 0px 15px\"), List$cons$(Pair$new$(\"background-color\", (() => {\n            var self = _window$3;\n            switch (self._) {\n                case 'Web.Playground.Window.input':\n                    var $111 = Web$Playground$constant$light_gray_color;\n                    return $111;\n                case 'Web.Playground.Window.terminal':\n                    var $112 = Web$Playground$constant$white_smoke;\n                    return $112;\n            };\n        })()), List$cons$(Pair$new$(\"display\", \"flex\"), List$nil)))))), List$cons$(DOM$text$(\"playground.kind\"), List$nil));\n        var _btn_run$5 = Web$Playground$comp$btn_run_code$(_mouse_over$2);\n        var _style_header$6 = Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$cons$(Pair$new$(\"justify-content\", \"space-between\"), List$cons$(Pair$new$(\"align-content\", \"center\"), List$cons$(Pair$new$(\"justify-content\", \"center\"), List$nil))))));\n        var self = _device$1;\n        switch (self._) {\n            case 'Device.phone':\n                var _terminal$7 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"terminal_view\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"14px\"), List$cons$(Pair$new$(\"height\", \"35px\"), List$cons$(Pair$new$(\"padding\", \"8px 15px 0px 15px\"), List$cons$(Pair$new$(\"background-color\", (() => {\n                    var self = _window$3;\n                    switch (self._) {\n                        case 'Web.Playground.Window.input':\n                            var $114 = Web$Playground$constant$white_smoke;\n                            return $114;\n                        case 'Web.Playground.Window.terminal':\n                            var $115 = Web$Playground$constant$light_gray_color;\n                            return $115;\n                    };\n                })()), List$cons$(Pair$new$(\"display\", \"flex\"), List$nil)))))), List$cons$(DOM$text$(\"output\"), List$nil));\n                var $113 = DOM$node$(\"div\", Map$from_list$(List$nil), _style_header$6, List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"justify-content\", \"flex-start\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$nil)))), List$cons$(_playground$4, List$cons$(_terminal$7, List$nil))), List$cons$(_btn_run$5, List$nil)));\n                var $110 = $113;\n                break;\n            case 'Device.tablet':\n            case 'Device.desktop':\n            case 'Device.big_desktop':\n                var $116 = DOM$node$(\"div\", Map$from_list$(List$nil), _style_header$6, List$cons$(_playground$4, List$cons$(_btn_run$5, List$nil)));\n                var $110 = $116;\n                break;\n        };\n        return $110;\n    };\n    const Web$Playground$comp$header = x0 => x1 => x2 => Web$Playground$comp$header$(x0, x1, x2);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $117 = (String.fromCharCode(_head$1) + _tail$2);\n        return $117;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function Web$Playground$comp$input$(_code$1) {\n        var $118 = DOM$node$(\"textarea\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"input_code\"), List$cons$(Pair$new$(\"placeholder\", \"Write Kind code in this online editor and run it <3\"), List$nil))), Map$from_list$(List$cons$(Pair$new$(\"cols\", \"100\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"border\", (\"solid 5px \" + Web$Playground$constant$light_gray_color)), List$cons$(Pair$new$(\"resize\", \"none\"), List$cons$(Pair$new$(\"padding\", \"10px\"), List$nil)))))), List$cons$(DOM$text$(_code$1), List$nil));\n        return $118;\n    };\n    const Web$Playground$comp$input = x0 => Web$Playground$comp$input$(x0);\n\n    function Web$Playground$comp$output_area$(_output$1, _device$2) {\n        var _style$3 = Map$from_list$(List$cons$(Pair$new$(\"width\", \"400px\"), List$cons$(Pair$new$(\"max-width\", \"500px\"), List$cons$(Pair$new$(\"overflow\", \"auto\"), List$cons$(Pair$new$(\"padding\", \"10px\"), List$cons$(Pair$new$(\"background-color\", Web$Playground$constant$light_gray_color), List$nil))))));\n        var $119 = DOM$node$(\"div\", Map$from_list$(List$nil), (() => {\n            var self = _device$2;\n            switch (self._) {\n                case 'Device.phone':\n                    var $120 = Map$union$(_style$3, Map$from_list$(List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"margin-top\", \"0px\"), List$nil))));\n                    return $120;\n                case 'Device.tablet':\n                case 'Device.desktop':\n                case 'Device.big_desktop':\n                    var $121 = Map$union$(_style$3, Map$from_list$(List$cons$(Pair$new$(\"height\", \"100% - 35px\"), List$cons$(Pair$new$(\"margin-top\", \"35px\"), List$nil))));\n                    return $121;\n            };\n        })(), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"kind-lang@1.0.44\"), List$nil)), List$cons$(DOM$node$(\"pre\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"margin-top\", \"10px\"), List$nil)), List$cons$(DOM$text$(_output$1), List$nil)), List$nil)));\n        return $119;\n    };\n    const Web$Playground$comp$output_area = x0 => x1 => Web$Playground$comp$output_area$(x0, x1);\n\n    function Web$Playground$comp$main_area$(_stt$1) {\n        var self = _stt$1;\n        switch (self._) {\n            case 'Web.Playground.State.new':\n                var $123 = self.device;\n                var $124 = self.window;\n                var $125 = self.mouse_over;\n                var $126 = self.code;\n                var $127 = self.output;\n                var _header$7 = Web$Playground$comp$header$($123, $125, $124);\n                var _input_view$8 = Web$Playground$comp$input$($126);\n                var _output_view$9 = Web$Playground$comp$output_area$($127, $123);\n                var self = $123;\n                switch (self._) {\n                    case 'Device.phone':\n                        var $129 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100%\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"column\"), List$nil))))), List$cons$(_header$7, List$cons$((() => {\n                            var self = $124;\n                            switch (self._) {\n                                case 'Web.Playground.Window.input':\n                                    var $130 = _input_view$8;\n                                    return $130;\n                                case 'Web.Playground.Window.terminal':\n                                    var $131 = _output_view$9;\n                                    return $131;\n                            };\n                        })(), List$nil)));\n                        var $128 = $129;\n                        break;\n                    case 'Device.tablet':\n                    case 'Device.desktop':\n                    case 'Device.big_desktop':\n                        var $132 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100%\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$nil))))), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"column\"), List$cons$(Pair$new$(\"width\", \"60%\"), List$nil)))), List$cons$(_header$7, List$cons$(_input_view$8, List$nil))), List$cons$(_output_view$9, List$nil)));\n                        var $128 = $132;\n                        break;\n                };\n                var $122 = $128;\n                break;\n        };\n        return $122;\n    };\n    const Web$Playground$comp$main_area = x0 => Web$Playground$comp$main_area$(x0);\n\n    function Web$Playground$draw$(_stt$1) {\n        var self = _stt$1;\n        switch (self._) {\n            case 'Web.Playground.State.new':\n                var $134 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100%\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"margin\", \"20px 0x\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$nil))))), List$cons$(Web$Playground$comp$main_area$(_stt$1), List$nil));\n                var $133 = $134;\n                break;\n        };\n        return $133;\n    };\n    const Web$Playground$draw = x0 => Web$Playground$draw$(x0);\n\n    function Web$playground$body$(_stt$1) {\n        var self = _stt$1;\n        switch (self._) {\n            case 'Web.Playground.State.new':\n                var $136 = self.device;\n                var self = $136;\n                switch (self._) {\n                    case 'Device.phone':\n                        var $138 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"page\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"margin\", \"10px\"), List$cons$(Pair$new$(\"height\", \"300px\"), List$nil))), List$cons$(Web$Playground$draw$(_stt$1), List$nil));\n                        var $137 = $138;\n                        break;\n                    case 'Device.tablet':\n                    case 'Device.desktop':\n                    case 'Device.big_desktop':\n                        var $139 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"page\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"margin\", \"100px\"), List$cons$(Pair$new$(\"height\", \"500px\"), List$nil))), List$cons$(Web$Playground$draw$(_stt$1), List$nil));\n                        var $137 = $139;\n                        break;\n                };\n                var $135 = $137;\n                break;\n        };\n        return $135;\n    };\n    const Web$playground$body = x0 => Web$playground$body$(x0);\n\n    function IO$(_A$1) {\n        var $140 = null;\n        return $140;\n    };\n    const IO = x0 => IO$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $141 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $141;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $143 = self.value;\n                var $144 = _f$4($143);\n                var $142 = $144;\n                break;\n            case 'IO.ask':\n                var $145 = self.query;\n                var $146 = self.param;\n                var $147 = self.then;\n                var $148 = IO$ask$($145, $146, (_x$8 => {\n                    var $149 = IO$bind$($147(_x$8), _f$4);\n                    return $149;\n                }));\n                var $142 = $148;\n                break;\n        };\n        return $142;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $150 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $150;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $151 = _new$2(IO$bind)(IO$end);\n        return $151;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function Dynamic$new$(_value$2) {\n        var $152 = ({\n            _: 'Dynamic.new',\n            'value': _value$2\n        });\n        return $152;\n    };\n    const Dynamic$new = x0 => Dynamic$new$(x0);\n    const Unit$new = null;\n    const App$pass = IO$monad$((_m$bind$1 => _m$pure$2 => {\n        var $153 = _m$pure$2;\n        return $153;\n    }))(Dynamic$new$(Unit$new));\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $155 = Bool$true;\n                var $154 = $155;\n                break;\n            case 'Cmp.gtn':\n                var $156 = Bool$false;\n                var $154 = $156;\n                break;\n        };\n        return $154;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $157 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $157;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U32$lte = a0 => a1 => (a0 <= a1);\n\n    function U32$new$(_value$1) {\n        var $158 = word_to_u32(_value$1);\n        return $158;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $159 = _x$4;\n                    return $159;\n                } else {\n                    var $160 = (self - 1n);\n                    var $161 = Nat$apply$($160, _f$3, _f$3(_x$4));\n                    return $161;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$(_size$1) {\n        var $162 = null;\n        return $162;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$i$(_pred$2) {\n        var $163 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $163;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$o$(_pred$2) {\n        var $164 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $164;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $166 = self.pred;\n                var $167 = Word$i$($166);\n                var $165 = $167;\n                break;\n            case 'Word.i':\n                var $168 = self.pred;\n                var $169 = Word$o$(Word$inc$($168));\n                var $165 = $169;\n                break;\n            case 'Word.e':\n                var $170 = Word$e;\n                var $165 = $170;\n                break;\n        };\n        return $165;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $172 = Word$e;\n            var $171 = $172;\n        } else {\n            var $173 = (self - 1n);\n            var $174 = Word$o$(Word$zero$($173));\n            var $171 = $174;\n        };\n        return $171;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $175 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $175;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n    const Device$phone = ({\n        _: 'Device.phone'\n    });\n    const Device$tablet = ({\n        _: 'Device.tablet'\n    });\n    const Device$desktop = ({\n        _: 'Device.desktop'\n    });\n\n    function Device$classify$(_width$1) {\n        var self = (_width$1 <= 600);\n        if (self) {\n            var $177 = Device$phone;\n            var $176 = $177;\n        } else {\n            var self = (_width$1 <= 768);\n            if (self) {\n                var $179 = Device$tablet;\n                var $178 = $179;\n            } else {\n                var self = (_width$1 <= 992);\n                if (self) {\n                    var $181 = Device$desktop;\n                    var $180 = $181;\n                } else {\n                    var $182 = Device$big_desktop;\n                    var $180 = $182;\n                };\n                var $178 = $180;\n            };\n            var $176 = $178;\n        };\n        return $176;\n    };\n    const Device$classify = x0 => Device$classify$(x0);\n\n    function App$store$(_value$2) {\n        var $183 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $184 = _m$pure$4;\n            return $184;\n        }))(Dynamic$new$(_value$2));\n        return $183;\n    };\n    const App$store = x0 => App$store$(x0);\n\n    function Web$Playground$set_mouse_over$(_id$1, _stt$2) {\n        var self = _stt$2;\n        switch (self._) {\n            case 'Web.Playground.State.new':\n                var $186 = self.device;\n                var $187 = self.window;\n                var $188 = self.code;\n                var $189 = self.output;\n                var $190 = Web$Playground$State$new$($186, $187, _id$1, $188, $189);\n                var $185 = $190;\n                break;\n        };\n        return $185;\n    };\n    const Web$Playground$set_mouse_over = x0 => x1 => Web$Playground$set_mouse_over$(x0, x1);\n    const Web$Playground$Window$terminal = ({\n        _: 'Web.Playground.Window.terminal'\n    });\n\n    function String$is_empty$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $192 = Bool$true;\n            var $191 = $192;\n        } else {\n            var $193 = self.charCodeAt(0);\n            var $194 = self.slice(1);\n            var $195 = Bool$false;\n            var $191 = $195;\n        };\n        return $191;\n    };\n    const String$is_empty = x0 => String$is_empty$(x0);\n\n    function IO$request$(_url$1) {\n        var $196 = IO$ask$(\"request\", _url$1, (_text$2 => {\n            var $197 = IO$end$(_text$2);\n            return $197;\n        }));\n        return $196;\n    };\n    const IO$request = x0 => IO$request$(x0);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $198 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $198;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$Playground = (() => {\n        var _init$1 = Web$Playground$State$new$(Device$big_desktop, Web$Playground$Window$input, \"\", \"\", \"\");\n        var _draw$2 = (_state$2 => {\n            var $200 = Web$playground$body$(_state$2);\n            return $200;\n        });\n        var _when$3 = (_event$3 => _state$4 => {\n            var self = _state$4;\n            switch (self._) {\n                case 'Web.Playground.State.new':\n                    var $202 = self.device;\n                    var $203 = self.window;\n                    var $204 = self.mouse_over;\n                    var $205 = self.code;\n                    var $206 = self.output;\n                    var self = _event$3;\n                    switch (self._) {\n                        case 'App.Event.tick':\n                            var $208 = self.info;\n                            var self = $208;\n                            switch (self._) {\n                                case 'App.EnvInfo.new':\n                                    var $210 = self.screen_size;\n                                    var self = $210;\n                                    switch (self._) {\n                                        case 'Pair.new':\n                                            var $212 = self.fst;\n                                            var _device$16 = Device$classify$($212);\n                                            var $213 = App$store$(Web$Playground$State$new$(_device$16, $203, $204, $205, $206));\n                                            var $211 = $213;\n                                            break;\n                                    };\n                                    var $209 = $211;\n                                    break;\n                            };\n                            var $207 = $209;\n                            break;\n                        case 'App.Event.mouse_over':\n                            var $214 = self.id;\n                            var $215 = App$store$(Web$Playground$set_mouse_over$($214, _state$4));\n                            var $207 = $215;\n                            break;\n                        case 'App.Event.mouse_click':\n                            var $216 = self.id;\n                            var self = ($216 === \"btn_run_code\");\n                            if (self) {\n                                var self = $202;\n                                switch (self._) {\n                                    case 'Device.phone':\n                                        var $219 = Web$Playground$Window$terminal;\n                                        var _window$13 = $219;\n                                        break;\n                                    case 'Device.tablet':\n                                    case 'Device.desktop':\n                                    case 'Device.big_desktop':\n                                        var $220 = Web$Playground$Window$input;\n                                        var _window$13 = $220;\n                                        break;\n                                };\n                                var self = String$is_empty$($205);\n                                if (self) {\n                                    var $221 = App$store$(Web$Playground$State$new$($202, _window$13, $204, $205, \"How can I type check an empty code? haha\"));\n                                    var $218 = $221;\n                                } else {\n                                    var $222 = IO$monad$((_m$bind$14 => _m$pure$15 => {\n                                        var $223 = _m$bind$14;\n                                        return $223;\n                                    }))(IO$request$((\"http://localhost:3030/api/check_term?code=\" + $205)))((_checked$14 => {\n                                        var $224 = App$store$(Web$Playground$State$new$($202, _window$13, $204, $205, _checked$14));\n                                        return $224;\n                                    }));\n                                    var $218 = $222;\n                                };\n                                var $217 = $218;\n                            } else {\n                                var self = ($216 === \"terminal_view\");\n                                if (self) {\n                                    var $226 = App$store$(Web$Playground$State$new$($202, Web$Playground$Window$terminal, $204, $205, $206));\n                                    var $225 = $226;\n                                } else {\n                                    var self = ($216 === \"input_view\");\n                                    if (self) {\n                                        var $228 = App$store$(Web$Playground$State$new$($202, Web$Playground$Window$input, $204, $205, $206));\n                                        var $227 = $228;\n                                    } else {\n                                        var $229 = App$pass;\n                                        var $227 = $229;\n                                    };\n                                    var $225 = $227;\n                                };\n                                var $217 = $225;\n                            };\n                            var $207 = $217;\n                            break;\n                        case 'App.Event.input':\n                            var $230 = self.id;\n                            var $231 = self.text;\n                            var self = ($230 === \"input_code\");\n                            if (self) {\n                                var $233 = App$store$(Web$Playground$State$new$($202, $203, $204, $231, $206));\n                                var $232 = $233;\n                            } else {\n                                var $234 = App$pass;\n                                var $232 = $234;\n                            };\n                            var $207 = $232;\n                            break;\n                        case 'App.Event.init':\n                        case 'App.Event.mouse_down':\n                        case 'App.Event.mouse_up':\n                        case 'App.Event.key_down':\n                        case 'App.Event.key_up':\n                        case 'App.Event.post':\n                            var $235 = App$pass;\n                            var $207 = $235;\n                            break;\n                    };\n                    var $201 = $207;\n                    break;\n            };\n            return $201;\n        });\n        var $199 = App$new$(_init$1, _draw$2, _when$3);\n        return $199;\n    })();\n    return {\n        'Web.Playground.State.new': Web$Playground$State$new,\n        'Device.big_desktop': Device$big_desktop,\n        'Web.Playground.Window.input': Web$Playground$Window$input,\n        'DOM.node': DOM$node,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.cons': List$cons,\n        'Pair': Pair,\n        'Pair.new': Pair$new,\n        'List.nil': List$nil,\n        'Web.Playground.constant.light_gray_color': Web$Playground$constant$light_gray_color,\n        'Web.Playground.constant.white_smoke': Web$Playground$constant$white_smoke,\n        'DOM.text': DOM$text,\n        'Bool.true': Bool$true,\n        'Bool.false': Bool$false,\n        'Bool.and': Bool$and,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'U16.eql': U16$eql,\n        'String.eql': String$eql,\n        'BitsMap.union': BitsMap$union,\n        'Map.union': Map$union,\n        'Web.Kind.constant.secondary_color': Web$Kind$constant$secondary_color,\n        'Web.Playground.comp.btn_run_code': Web$Playground$comp$btn_run_code,\n        'Web.Playground.comp.header': Web$Playground$comp$header,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'Web.Playground.comp.input': Web$Playground$comp$input,\n        'Web.Playground.comp.output_area': Web$Playground$comp$output_area,\n        'Web.Playground.comp.main_area': Web$Playground$comp$main_area,\n        'Web.Playground.draw': Web$Playground$draw,\n        'Web.playground.body': Web$playground$body,\n        'IO': IO,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'Dynamic.new': Dynamic$new,\n        'Unit.new': Unit$new,\n        'App.pass': App$pass,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Word.lte': Word$lte,\n        'U32.lte': U32$lte,\n        'U32.new': U32$new,\n        'Nat.apply': Nat$apply,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.i': Word$i,\n        'Word.o': Word$o,\n        'Word.inc': Word$inc,\n        'Word.zero': Word$zero,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u32': Nat$to_u32,\n        'Device.phone': Device$phone,\n        'Device.tablet': Device$tablet,\n        'Device.desktop': Device$desktop,\n        'Device.classify': Device$classify,\n        'App.store': App$store,\n        'Web.Playground.set_mouse_over': Web$Playground$set_mouse_over,\n        'Web.Playground.Window.terminal': Web$Playground$Window$terminal,\n        'String.is_empty': String$is_empty,\n        'IO.request': IO$request,\n        'App.new': App$new,\n        'Web.Playground': Web$Playground,\n    };\n})();"],"sourceRoot":""}