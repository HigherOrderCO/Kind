{"version":3,"sources":["webpack://kind-web/./src/apps/Web.Senhas.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,mBAAmB,EAAE,MAAM,GAAG,+EAA+E,GAAG;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iCAAiC,GAAG;AACrD;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,0DAA0D,GAAG,UAAU,GAAG;AAC1E;AACA,yBAAyB;AACzB;AACA;AACA,0EAA0E,GAAG;AAC7E;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB,4BAA4B,GAAG,UAAU,GAAG;AAC7D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,6OAA6O,GAAG,GAAG,GAAG,gSAAgS,GAAG;AACzhB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrfile":"936.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c0;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c1($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $33 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $33;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function BitsMap$(_A$1) {\n        var $34 = null;\n        return $34;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $35 = null;\n        return $35;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $36 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $36;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $37 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $37;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $39 = self.pred;\n                var $40 = (Word$to_bits$($39) + '0');\n                var $38 = $40;\n                break;\n            case 'Word.i':\n                var $41 = self.pred;\n                var $42 = (Word$to_bits$($41) + '1');\n                var $38 = $42;\n                break;\n            case 'Word.e':\n                var $43 = Bits$e;\n                var $38 = $43;\n                break;\n        };\n        return $38;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $44 = 1n + _pred$1;\n        return $44;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $46 = Bits$e;\n            var $45 = $46;\n        } else {\n            var $47 = self.charCodeAt(0);\n            var $48 = self.slice(1);\n            var $49 = (String$to_bits$($48) + (u16_to_bits($47)));\n            var $45 = $49;\n        };\n        return $45;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $51 = self.head;\n                var $52 = self.tail;\n                var self = $51;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $54 = self.fst;\n                        var $55 = self.snd;\n                        var $56 = (bitsmap_set(String$to_bits$($54), $55, Map$from_list$($52), 'set'));\n                        var $53 = $56;\n                        break;\n                };\n                var $50 = $53;\n                break;\n            case 'List.nil':\n                var $57 = BitsMap$new;\n                var $50 = $57;\n                break;\n        };\n        return $50;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$(_A$1, _B$2) {\n        var $58 = null;\n        return $58;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $59 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $59;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function DOM$text$(_value$1) {\n        var $60 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $60;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n\n    function IO$(_A$1) {\n        var $61 = null;\n        return $61;\n    };\n    const IO = x0 => IO$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $62 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $62;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $64 = self.value;\n                var $65 = _f$4($64);\n                var $63 = $65;\n                break;\n            case 'IO.ask':\n                var $66 = self.query;\n                var $67 = self.param;\n                var $68 = self.then;\n                var $69 = IO$ask$($66, $67, (_x$8 => {\n                    var $70 = IO$bind$($68(_x$8), _f$4);\n                    return $70;\n                }));\n                var $63 = $69;\n                break;\n        };\n        return $63;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $71 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $71;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $72 = _new$2(IO$bind)(IO$end);\n        return $72;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function Dynamic$new$(_value$2) {\n        var $73 = ({\n            _: 'Dynamic.new',\n            'value': _value$2\n        });\n        return $73;\n    };\n    const Dynamic$new = x0 => Dynamic$new$(x0);\n    const Unit$new = null;\n    const App$pass = IO$monad$((_m$bind$1 => _m$pure$2 => {\n        var $74 = _m$pure$2;\n        return $74;\n    }))(Dynamic$new$(Unit$new));\n\n    function Parser$Reply$(_V$1) {\n        var $75 = null;\n        return $75;\n    };\n    const Parser$Reply = x0 => Parser$Reply$(x0);\n\n    function List$(_A$1) {\n        var $76 = null;\n        return $76;\n    };\n    const List = x0 => List$(x0);\n\n    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {\n        var $77 = ({\n            _: 'Parser.Reply.error',\n            'idx': _idx$2,\n            'code': _code$3,\n            'err': _err$4\n        });\n        return $77;\n    };\n    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);\n\n    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {\n        var $78 = ({\n            _: 'Parser.Reply.value',\n            'idx': _idx$2,\n            'code': _code$3,\n            'val': _val$4\n        });\n        return $78;\n    };\n    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);\n\n    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {\n        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({\n            ctr: 'TCO',\n            arg: [_parse$2, _values$3, _idx$4, _code$5]\n        });\n        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);\n        var arg = [_parse$2, _values$3, _idx$4, _code$5];\n        while (true) {\n            let [_parse$2, _values$3, _idx$4, _code$5] = arg;\n            var R = (() => {\n                var self = _parse$2(_idx$4)(_code$5);\n                switch (self._) {\n                    case 'Parser.Reply.value':\n                        var $79 = self.idx;\n                        var $80 = self.code;\n                        var $81 = self.val;\n                        var $82 = Parser$many$go$(_parse$2, (_xs$9 => {\n                            var $83 = _values$3(List$cons$($81, _xs$9));\n                            return $83;\n                        }), $79, $80);\n                        return $82;\n                    case 'Parser.Reply.error':\n                        var $84 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));\n                        return $84;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);\n\n    function Parser$many$(_parser$2) {\n        var $85 = Parser$many$go(_parser$2)((_x$3 => {\n            var $86 = _x$3;\n            return $86;\n        }));\n        return $85;\n    };\n    const Parser$many = x0 => Parser$many$(x0);\n\n    function Parser$many1$(_parser$2, _idx$3, _code$4) {\n        var self = _parser$2(_idx$3)(_code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $88 = self.idx;\n                var $89 = self.code;\n                var $90 = self.err;\n                var $91 = Parser$Reply$error$($88, $89, $90);\n                var $87 = $91;\n                break;\n            case 'Parser.Reply.value':\n                var $92 = self.idx;\n                var $93 = self.code;\n                var $94 = self.val;\n                var self = Parser$many$(_parser$2)($92)($93);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $96 = self.idx;\n                        var $97 = self.code;\n                        var $98 = self.err;\n                        var $99 = Parser$Reply$error$($96, $97, $98);\n                        var $95 = $99;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $100 = self.idx;\n                        var $101 = self.code;\n                        var $102 = self.val;\n                        var $103 = Parser$Reply$value$($100, $101, List$cons$($94, $102));\n                        var $95 = $103;\n                        break;\n                };\n                var $87 = $95;\n                break;\n        };\n        return $87;\n    };\n    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $105 = Bool$false;\n                var $104 = $105;\n                break;\n            case 'Cmp.eql':\n                var $106 = Bool$true;\n                var $104 = $106;\n                break;\n        };\n        return $104;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $108 = self.pred;\n                var $109 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $111 = self.pred;\n                            var $112 = (_a$pred$10 => {\n                                var $113 = Word$cmp$go$(_a$pred$10, $111, _c$4);\n                                return $113;\n                            });\n                            var $110 = $112;\n                            break;\n                        case 'Word.i':\n                            var $114 = self.pred;\n                            var $115 = (_a$pred$10 => {\n                                var $116 = Word$cmp$go$(_a$pred$10, $114, Cmp$ltn);\n                                return $116;\n                            });\n                            var $110 = $115;\n                            break;\n                        case 'Word.e':\n                            var $117 = (_a$pred$8 => {\n                                var $118 = _c$4;\n                                return $118;\n                            });\n                            var $110 = $117;\n                            break;\n                    };\n                    var $110 = $110($108);\n                    return $110;\n                });\n                var $107 = $109;\n                break;\n            case 'Word.i':\n                var $119 = self.pred;\n                var $120 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $122 = self.pred;\n                            var $123 = (_a$pred$10 => {\n                                var $124 = Word$cmp$go$(_a$pred$10, $122, Cmp$gtn);\n                                return $124;\n                            });\n                            var $121 = $123;\n                            break;\n                        case 'Word.i':\n                            var $125 = self.pred;\n                            var $126 = (_a$pred$10 => {\n                                var $127 = Word$cmp$go$(_a$pred$10, $125, _c$4);\n                                return $127;\n                            });\n                            var $121 = $126;\n                            break;\n                        case 'Word.e':\n                            var $128 = (_a$pred$8 => {\n                                var $129 = _c$4;\n                                return $129;\n                            });\n                            var $121 = $128;\n                            break;\n                    };\n                    var $121 = $121($119);\n                    return $121;\n                });\n                var $107 = $120;\n                break;\n            case 'Word.e':\n                var $130 = (_b$5 => {\n                    var $131 = _c$4;\n                    return $131;\n                });\n                var $107 = $130;\n                break;\n        };\n        var $107 = $107(_b$3);\n        return $107;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $132 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $132;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $133 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $133;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function Parser$digit$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $135 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n            var $134 = $135;\n        } else {\n            var $136 = self.charCodeAt(0);\n            var $137 = self.slice(1);\n            var _sidx$5 = Nat$succ$(_idx$1);\n            var self = ($136 === 48);\n            if (self) {\n                var $139 = Parser$Reply$value$(_sidx$5, $137, 0n);\n                var $138 = $139;\n            } else {\n                var self = ($136 === 49);\n                if (self) {\n                    var $141 = Parser$Reply$value$(_sidx$5, $137, 1n);\n                    var $140 = $141;\n                } else {\n                    var self = ($136 === 50);\n                    if (self) {\n                        var $143 = Parser$Reply$value$(_sidx$5, $137, 2n);\n                        var $142 = $143;\n                    } else {\n                        var self = ($136 === 51);\n                        if (self) {\n                            var $145 = Parser$Reply$value$(_sidx$5, $137, 3n);\n                            var $144 = $145;\n                        } else {\n                            var self = ($136 === 52);\n                            if (self) {\n                                var $147 = Parser$Reply$value$(_sidx$5, $137, 4n);\n                                var $146 = $147;\n                            } else {\n                                var self = ($136 === 53);\n                                if (self) {\n                                    var $149 = Parser$Reply$value$(_sidx$5, $137, 5n);\n                                    var $148 = $149;\n                                } else {\n                                    var self = ($136 === 54);\n                                    if (self) {\n                                        var $151 = Parser$Reply$value$(_sidx$5, $137, 6n);\n                                        var $150 = $151;\n                                    } else {\n                                        var self = ($136 === 55);\n                                        if (self) {\n                                            var $153 = Parser$Reply$value$(_sidx$5, $137, 7n);\n                                            var $152 = $153;\n                                        } else {\n                                            var self = ($136 === 56);\n                                            if (self) {\n                                                var $155 = Parser$Reply$value$(_sidx$5, $137, 8n);\n                                                var $154 = $155;\n                                            } else {\n                                                var self = ($136 === 57);\n                                                if (self) {\n                                                    var $157 = Parser$Reply$value$(_sidx$5, $137, 9n);\n                                                    var $156 = $157;\n                                                } else {\n                                                    var $158 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n                                                    var $156 = $158;\n                                                };\n                                                var $154 = $156;\n                                            };\n                                            var $152 = $154;\n                                        };\n                                        var $150 = $152;\n                                    };\n                                    var $148 = $150;\n                                };\n                                var $146 = $148;\n                            };\n                            var $144 = $146;\n                        };\n                        var $142 = $144;\n                    };\n                    var $140 = $142;\n                };\n                var $138 = $140;\n            };\n            var $134 = $138;\n        };\n        return $134;\n    };\n    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {\n        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({\n            ctr: 'TCO',\n            arg: [_b$1, _ds$2, _p$3, _res$4]\n        });\n        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);\n        var arg = [_b$1, _ds$2, _p$3, _res$4];\n        while (true) {\n            let [_b$1, _ds$2, _p$3, _res$4] = arg;\n            var R = (() => {\n                var self = _ds$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $159 = self.head;\n                        var $160 = self.tail;\n                        var $161 = Nat$from_base$go$(_b$1, $160, (_b$1 * _p$3), (($159 * _p$3) + _res$4));\n                        return $161;\n                    case 'List.nil':\n                        var $162 = _res$4;\n                        return $162;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);\n\n    function List$reverse$go$(_xs$2, _res$3) {\n        var List$reverse$go$ = (_xs$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _res$3]\n        });\n        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);\n        var arg = [_xs$2, _res$3];\n        while (true) {\n            let [_xs$2, _res$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $163 = self.head;\n                        var $164 = self.tail;\n                        var $165 = List$reverse$go$($164, List$cons$($163, _res$3));\n                        return $165;\n                    case 'List.nil':\n                        var $166 = _res$3;\n                        return $166;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);\n\n    function List$reverse$(_xs$2) {\n        var $167 = List$reverse$go$(_xs$2, List$nil);\n        return $167;\n    };\n    const List$reverse = x0 => List$reverse$(x0);\n\n    function Nat$from_base$(_base$1, _ds$2) {\n        var $168 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);\n        return $168;\n    };\n    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);\n\n    function Parser$nat$(_idx$1, _code$2) {\n        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $170 = self.idx;\n                var $171 = self.code;\n                var $172 = self.err;\n                var $173 = Parser$Reply$error$($170, $171, $172);\n                var $169 = $173;\n                break;\n            case 'Parser.Reply.value':\n                var $174 = self.idx;\n                var $175 = self.code;\n                var $176 = self.val;\n                var $177 = Parser$Reply$value$($174, $175, Nat$from_base$(10n, $176));\n                var $169 = $177;\n                break;\n        };\n        return $169;\n    };\n    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);\n\n    function Nat$read$(_str$1) {\n        var _p$2 = Parser$nat$(0n, _str$1);\n        var self = _p$2;\n        switch (self._) {\n            case 'Parser.Reply.value':\n                var $179 = self.val;\n                var $180 = $179;\n                var $178 = $180;\n                break;\n            case 'Parser.Reply.error':\n                var $181 = 0n;\n                var $178 = $181;\n                break;\n        };\n        return $178;\n    };\n    const Nat$read = x0 => Nat$read$(x0);\n    const IO$get_time = IO$ask$(\"get_time\", \"\", (_time$1 => {\n        var $182 = IO$end$(Nat$read$(_time$1));\n        return $182;\n    }));\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $183 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $183;\n                } else {\n                    var $184 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $186 = _r$3;\n                        var $185 = $186;\n                    } else {\n                        var $187 = (self - 1n);\n                        var $188 = Nat$mod$go$($187, $184, Nat$succ$(_r$3));\n                        var $185 = $188;\n                    };\n                    return $185;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n\n    function Nat$random$(_seed$1) {\n        var _m$2 = 1664525n;\n        var _i$3 = 1013904223n;\n        var _q$4 = 4294967296n;\n        var $189 = (((_seed$1 * _m$2) + _i$3) % _q$4);\n        return $189;\n    };\n    const Nat$random = x0 => Nat$random$(x0);\n\n    function IO$random$(_a$1) {\n        var $190 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $191 = _m$bind$2;\n            return $191;\n        }))(IO$get_time)((_seed$2 => {\n            var _seed$3 = Nat$random$(_seed$2);\n            var $192 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                var $193 = _m$pure$5;\n                return $193;\n            }))((_seed$3 % _a$1));\n            return $192;\n        }));\n        return $190;\n    };\n    const IO$random = x0 => IO$random$(x0);\n\n    function Nat$randoms$(_len$1, _seed$2, _max$3) {\n        var self = _len$1;\n        if (self === 0n) {\n            var $195 = List$nil;\n            var $194 = $195;\n        } else {\n            var $196 = (self - 1n);\n            var _new_seed$5 = Nat$random$(_seed$2);\n            var $197 = List$cons$((_new_seed$5 % _max$3), Nat$randoms$($196, _new_seed$5, _max$3));\n            var $194 = $197;\n        };\n        return $194;\n    };\n    const Nat$randoms = x0 => x1 => x2 => Nat$randoms$(x0, x1, x2);\n\n    function IO$randoms$(_len$1, _max$2) {\n        var $198 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $199 = _m$bind$3;\n            return $199;\n        }))(IO$get_time)((_seed$3 => {\n            var $200 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                var $201 = _m$pure$5;\n                return $201;\n            }))(Nat$randoms$(_len$1, _seed$3, _max$2));\n            return $200;\n        }));\n        return $198;\n    };\n    const IO$randoms = x0 => x1 => IO$randoms$(x0, x1);\n\n    function Maybe$(_A$1) {\n        var $202 = null;\n        return $202;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $203 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $203;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function List$concat$(_as$2, _bs$3) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $205 = self.head;\n                var $206 = self.tail;\n                var $207 = List$cons$($205, List$concat$($206, _bs$3));\n                var $204 = $207;\n                break;\n            case 'List.nil':\n                var $208 = _bs$3;\n                var $204 = $208;\n                break;\n        };\n        return $204;\n    };\n    const List$concat = x0 => x1 => List$concat$(x0, x1);\n\n    function List$pop_at$go$(_idx$2, _list$3, _searched_list$4) {\n        var List$pop_at$go$ = (_idx$2, _list$3, _searched_list$4) => ({\n            ctr: 'TCO',\n            arg: [_idx$2, _list$3, _searched_list$4]\n        });\n        var List$pop_at$go = _idx$2 => _list$3 => _searched_list$4 => List$pop_at$go$(_idx$2, _list$3, _searched_list$4);\n        var arg = [_idx$2, _list$3, _searched_list$4];\n        while (true) {\n            let [_idx$2, _list$3, _searched_list$4] = arg;\n            var R = (() => {\n                var self = _idx$2;\n                if (self === 0n) {\n                    var self = _list$3;\n                    switch (self._) {\n                        case 'List.cons':\n                            var $210 = self.head;\n                            var $211 = self.tail;\n                            var $212 = Pair$new$(Maybe$some$($210), List$concat$(_searched_list$4, $211));\n                            var $209 = $212;\n                            break;\n                        case 'List.nil':\n                            var $213 = Pair$new$(Maybe$none, _searched_list$4);\n                            var $209 = $213;\n                            break;\n                    };\n                    return $209;\n                } else {\n                    var $214 = (self - 1n);\n                    var self = _list$3;\n                    switch (self._) {\n                        case 'List.cons':\n                            var $216 = self.head;\n                            var $217 = self.tail;\n                            var $218 = List$pop_at$go$($214, $217, List$concat$(_searched_list$4, List$cons$($216, List$nil)));\n                            var $215 = $218;\n                            break;\n                        case 'List.nil':\n                            var $219 = Pair$new$(Maybe$none, _searched_list$4);\n                            var $215 = $219;\n                            break;\n                    };\n                    return $215;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$pop_at$go = x0 => x1 => x2 => List$pop_at$go$(x0, x1, x2);\n\n    function List$pop_at$(_idx$2, _list$3) {\n        var $220 = List$pop_at$go$(_idx$2, _list$3, List$nil);\n        return $220;\n    };\n    const List$pop_at = x0 => x1 => List$pop_at$(x0, x1);\n\n    function List$random$(_xs$1, _ys$2, _zs$3) {\n        var List$random$ = (_xs$1, _ys$2, _zs$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _ys$2, _zs$3]\n        });\n        var List$random = _xs$1 => _ys$2 => _zs$3 => List$random$(_xs$1, _ys$2, _zs$3);\n        var arg = [_xs$1, _ys$2, _zs$3];\n        while (true) {\n            let [_xs$1, _ys$2, _zs$3] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                switch (self._) {\n                    case 'List.cons':\n                        var $221 = self.head;\n                        var $222 = self.tail;\n                        var self = _ys$2;\n                        switch (self._) {\n                            case 'List.nil':\n                                var $224 = List$nil;\n                                var $223 = $224;\n                                break;\n                            case 'List.cons':\n                                var _a$8 = List$pop_at$($221, _ys$2);\n                                var self = _a$8;\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $226 = self.fst;\n                                        var $227 = self.snd;\n                                        var self = $226;\n                                        switch (self._) {\n                                            case 'Maybe.some':\n                                                var $229 = self.value;\n                                                var $230 = List$random$($222, $227, List$cons$($229, _zs$3));\n                                                var $228 = $230;\n                                                break;\n                                            case 'Maybe.none':\n                                                var $231 = List$random$(List$cons$((Nat$random$($221) % 10n), $222), _ys$2, _zs$3);\n                                                var $228 = $231;\n                                                break;\n                                        };\n                                        var $225 = $228;\n                                        break;\n                                };\n                                var $223 = $225;\n                                break;\n                        };\n                        return $223;\n                    case 'List.nil':\n                        var $232 = _zs$3;\n                        return $232;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$random = x0 => x1 => x2 => List$random$(x0, x1, x2);\n\n    function IO$prompt$(_text$1) {\n        var $233 = IO$ask$(\"get_line\", _text$1, (_line$2 => {\n            var $234 = IO$end$(_line$2);\n            return $234;\n        }));\n        return $233;\n    };\n    const IO$prompt = x0 => IO$prompt$(x0);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $235 = (String.fromCharCode(_head$1) + _tail$2);\n        return $235;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $237 = self.head;\n                var $238 = self.tail;\n                var $239 = _cons$5($237)(List$fold$($238, _nil$4, _cons$5));\n                var $236 = $239;\n                break;\n            case 'List.nil':\n                var $240 = _nil$4;\n                var $236 = $240;\n                break;\n        };\n        return $236;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $241 = null;\n        return $241;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $242 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $242;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $243 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $243;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $244 = Either$left$(_n$1);\n                    return $244;\n                } else {\n                    var $245 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $247 = Either$right$(Nat$succ$($245));\n                        var $246 = $247;\n                    } else {\n                        var $248 = (self - 1n);\n                        var $249 = Nat$sub_rem$($248, $245);\n                        var $246 = $249;\n                    };\n                    return $246;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $250 = self.value;\n                        var $251 = Nat$div_mod$go$($250, _m$2, Nat$succ$(_d$3));\n                        return $251;\n                    case 'Either.right':\n                        var $252 = Pair$new$(_d$3, _n$1);\n                        return $252;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $253 = self.fst;\n                        var $254 = self.snd;\n                        var self = $253;\n                        if (self === 0n) {\n                            var $256 = List$cons$($254, _res$3);\n                            var $255 = $256;\n                        } else {\n                            var $257 = (self - 1n);\n                            var $258 = Nat$to_base$go$(_base$1, $253, List$cons$($254, _res$3));\n                            var $255 = $258;\n                        };\n                        return $255;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $259 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $259;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $260 = self.head;\n                        var $261 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $263 = Maybe$some$($260);\n                            var $262 = $263;\n                        } else {\n                            var $264 = (self - 1n);\n                            var $265 = List$at$($264, $261);\n                            var $262 = $265;\n                        };\n                        return $262;\n                    case 'List.nil':\n                        var $266 = Maybe$none;\n                        return $266;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $269 = self.value;\n                    var $270 = $269;\n                    var $268 = $270;\n                    break;\n                case 'Maybe.none':\n                    var $271 = 35;\n                    var $268 = $271;\n                    break;\n            };\n            var $267 = $268;\n        } else {\n            var $272 = 35;\n            var $267 = $272;\n        };\n        return $267;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $273 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $274 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $274;\n        }));\n        return $273;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $275 = Nat$to_string_base$(10n, _n$1);\n        return $275;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n\n    function Char$eql$(_a$1, _b$2) {\n        var $276 = (_a$1 === _b$2);\n        return $276;\n    };\n    const Char$eql = x0 => x1 => Char$eql$(x0, x1);\n\n    function String$starts_with$(_xs$1, _match$2) {\n        var String$starts_with$ = (_xs$1, _match$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _match$2]\n        });\n        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);\n        var arg = [_xs$1, _match$2];\n        while (true) {\n            let [_xs$1, _match$2] = arg;\n            var R = (() => {\n                var self = _match$2;\n                if (self.length === 0) {\n                    var $277 = Bool$true;\n                    return $277;\n                } else {\n                    var $278 = self.charCodeAt(0);\n                    var $279 = self.slice(1);\n                    var self = _xs$1;\n                    if (self.length === 0) {\n                        var $281 = Bool$false;\n                        var $280 = $281;\n                    } else {\n                        var $282 = self.charCodeAt(0);\n                        var $283 = self.slice(1);\n                        var self = Char$eql$($278, $282);\n                        if (self) {\n                            var $285 = String$starts_with$($283, $279);\n                            var $284 = $285;\n                        } else {\n                            var $286 = Bool$false;\n                            var $284 = $286;\n                        };\n                        var $280 = $284;\n                    };\n                    return $280;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);\n\n    function String$drop$(_n$1, _xs$2) {\n        var String$drop$ = (_n$1, _xs$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _xs$2]\n        });\n        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);\n        var arg = [_n$1, _xs$2];\n        while (true) {\n            let [_n$1, _xs$2] = arg;\n            var R = (() => {\n                var self = _n$1;\n                if (self === 0n) {\n                    var $287 = _xs$2;\n                    return $287;\n                } else {\n                    var $288 = (self - 1n);\n                    var self = _xs$2;\n                    if (self.length === 0) {\n                        var $290 = String$nil;\n                        var $289 = $290;\n                    } else {\n                        var $291 = self.charCodeAt(0);\n                        var $292 = self.slice(1);\n                        var $293 = String$drop$($288, $292);\n                        var $289 = $293;\n                    };\n                    return $289;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$drop = x0 => x1 => String$drop$(x0, x1);\n\n    function String$length$go$(_xs$1, _n$2) {\n        var String$length$go$ = (_xs$1, _n$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _n$2]\n        });\n        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);\n        var arg = [_xs$1, _n$2];\n        while (true) {\n            let [_xs$1, _n$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                if (self.length === 0) {\n                    var $294 = _n$2;\n                    return $294;\n                } else {\n                    var $295 = self.charCodeAt(0);\n                    var $296 = self.slice(1);\n                    var $297 = String$length$go$($296, Nat$succ$(_n$2));\n                    return $297;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$length$go = x0 => x1 => String$length$go$(x0, x1);\n\n    function String$length$(_xs$1) {\n        var $298 = String$length$go$(_xs$1, 0n);\n        return $298;\n    };\n    const String$length = x0 => String$length$(x0);\n\n    function String$split$go$(_xs$1, _match$2, _last$3) {\n        var self = _xs$1;\n        if (self.length === 0) {\n            var $300 = List$cons$(_last$3, List$nil);\n            var $299 = $300;\n        } else {\n            var $301 = self.charCodeAt(0);\n            var $302 = self.slice(1);\n            var self = String$starts_with$(_xs$1, _match$2);\n            if (self) {\n                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);\n                var $304 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, \"\"));\n                var $303 = $304;\n            } else {\n                var _next$6 = String$cons$($301, String$nil);\n                var $305 = String$split$go$($302, _match$2, (_last$3 + _next$6));\n                var $303 = $305;\n            };\n            var $299 = $303;\n        };\n        return $299;\n    };\n    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);\n\n    function String$split$(_xs$1, _match$2) {\n        var $306 = String$split$go$(_xs$1, _match$2, \"\");\n        return $306;\n    };\n    const String$split = x0 => x1 => String$split$(x0, x1);\n\n    function List$map$(_f$3, _as$4) {\n        var self = _as$4;\n        switch (self._) {\n            case 'List.cons':\n                var $308 = self.head;\n                var $309 = self.tail;\n                var $310 = List$cons$(_f$3($308), List$map$(_f$3, $309));\n                var $307 = $310;\n                break;\n            case 'List.nil':\n                var $311 = List$nil;\n                var $307 = $311;\n                break;\n        };\n        return $307;\n    };\n    const List$map = x0 => x1 => List$map$(x0, x1);\n\n    function List$take$(_n$2, _xs$3) {\n        var self = _xs$3;\n        switch (self._) {\n            case 'List.cons':\n                var $313 = self.head;\n                var $314 = self.tail;\n                var self = _n$2;\n                if (self === 0n) {\n                    var $316 = List$nil;\n                    var $315 = $316;\n                } else {\n                    var $317 = (self - 1n);\n                    var $318 = List$cons$($313, List$take$($317, $314));\n                    var $315 = $318;\n                };\n                var $312 = $315;\n                break;\n            case 'List.nil':\n                var $319 = List$nil;\n                var $312 = $319;\n                break;\n        };\n        return $312;\n    };\n    const List$take = x0 => x1 => List$take$(x0, x1);\n\n    function Senhas$read_input$(_line$1) {\n        var _split$2 = String$split$(_line$1, \" \");\n        var _map$3 = List$map$(Nat$read, _split$2);\n        var _list$4 = List$take$(4n, _map$3);\n        var $320 = _list$4;\n        return $320;\n    };\n    const Senhas$read_input = x0 => Senhas$read_input$(x0);\n    const Nat$eql = a0 => a1 => (a0 === a1);\n    const Bool$or = a0 => a1 => (a0 || a1);\n\n    function Senha$tem_numero$(_num$1, _senha$2) {\n        var _tmp$3 = List$map$(a1 => (_num$1 === a1), _senha$2);\n        var _tmp$4 = List$fold$(_tmp$3, Bool$false, Bool$or);\n        var $321 = _tmp$4;\n        return $321;\n    };\n    const Senha$tem_numero = x0 => x1 => Senha$tem_numero$(x0, x1);\n\n    function Senha$verifica$(_senha$1, _a$2, _b$3) {\n        var self = _senha$1;\n        switch (self._) {\n            case 'List.nil':\n                var $323 = \"\";\n                var $322 = $323;\n                break;\n            case 'List.cons':\n                var self = (_a$2 === _b$3);\n                if (self) {\n                    var $325 = \"V \";\n                    var $324 = $325;\n                } else {\n                    var self = Senha$tem_numero$(_b$3, _senha$1);\n                    if (self) {\n                        var $327 = \"O \";\n                        var $326 = $327;\n                    } else {\n                        var $328 = \"X \";\n                        var $326 = $328;\n                    };\n                    var $324 = $326;\n                };\n                var $322 = $324;\n                break;\n        };\n        return $322;\n    };\n    const Senha$verifica = x0 => x1 => x2 => Senha$verifica$(x0, x1, x2);\n\n    function Senhas$resposta$(_suporte$1, _senha$2, _tentativa$3) {\n        var self = _tentativa$3;\n        switch (self._) {\n            case 'List.cons':\n                var $330 = self.head;\n                var $331 = self.tail;\n                var self = _senha$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $333 = self.head;\n                        var $334 = self.tail;\n                        var $335 = List$cons$(Senha$verifica$(_suporte$1, $330, $333), Senhas$resposta$(_suporte$1, $334, $331));\n                        var $332 = $335;\n                        break;\n                    case 'List.nil':\n                        var $336 = List$nil;\n                        var $332 = $336;\n                        break;\n                };\n                var $329 = $332;\n                break;\n            case 'List.nil':\n                var $337 = List$nil;\n                var $329 = $337;\n                break;\n        };\n        return $329;\n    };\n    const Senhas$resposta = x0 => x1 => x2 => Senhas$resposta$(x0, x1, x2);\n\n    function Senha$confirma$(_xs$1) {\n        var _chck$2 = List$map$(a1 => (10n > a1), _xs$1);\n        var _chck$3 = List$fold$(_chck$2, Bool$true, Bool$and);\n        var $338 = _chck$3;\n        return $338;\n    };\n    const Senha$confirma = x0 => Senha$confirma$(x0);\n\n    function IO$put_string$(_text$1) {\n        var $339 = IO$ask$(\"put_string\", _text$1, (_skip$2 => {\n            var $340 = IO$end$(Unit$new);\n            return $340;\n        }));\n        return $339;\n    };\n    const IO$put_string = x0 => IO$put_string$(x0);\n\n    function IO$print$(_text$1) {\n        var $341 = IO$put_string$((_text$1 + \"\\u{a}\"));\n        return $341;\n    };\n    const IO$print = x0 => IO$print$(x0);\n\n    function String$flatten$go$(_xs$1, _res$2) {\n        var String$flatten$go$ = (_xs$1, _res$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _res$2]\n        });\n        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);\n        var arg = [_xs$1, _res$2];\n        while (true) {\n            let [_xs$1, _res$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                switch (self._) {\n                    case 'List.cons':\n                        var $342 = self.head;\n                        var $343 = self.tail;\n                        var $344 = String$flatten$go$($343, (_res$2 + $342));\n                        return $344;\n                    case 'List.nil':\n                        var $345 = _res$2;\n                        return $345;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);\n\n    function String$flatten$(_xs$1) {\n        var $346 = String$flatten$go$(_xs$1, \"\");\n        return $346;\n    };\n    const String$flatten = x0 => String$flatten$(x0);\n\n    function String$join$go$(_sep$1, _list$2, _fst$3) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $348 = self.head;\n                var $349 = self.tail;\n                var $350 = String$flatten$(List$cons$((() => {\n                    var self = _fst$3;\n                    if (self) {\n                        var $351 = \"\";\n                        return $351;\n                    } else {\n                        var $352 = _sep$1;\n                        return $352;\n                    };\n                })(), List$cons$($348, List$cons$(String$join$go$(_sep$1, $349, Bool$false), List$nil))));\n                var $347 = $350;\n                break;\n            case 'List.nil':\n                var $353 = \"\";\n                var $347 = $353;\n                break;\n        };\n        return $347;\n    };\n    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);\n\n    function String$join$(_sep$1, _list$2) {\n        var $354 = String$join$go$(_sep$1, _list$2, Bool$true);\n        return $354;\n    };\n    const String$join = x0 => x1 => String$join$(x0, x1);\n\n    function List$eql$(_eql$2, _a$3, _b$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'List.cons':\n                var $356 = self.head;\n                var $357 = self.tail;\n                var self = _b$4;\n                switch (self._) {\n                    case 'List.cons':\n                        var $359 = self.head;\n                        var $360 = self.tail;\n                        var $361 = (_eql$2($356)($359) && List$eql$(_eql$2, $357, $360));\n                        var $358 = $361;\n                        break;\n                    case 'List.nil':\n                        var $362 = Bool$false;\n                        var $358 = $362;\n                        break;\n                };\n                var $355 = $358;\n                break;\n            case 'List.nil':\n                var self = _b$4;\n                switch (self._) {\n                    case 'List.nil':\n                        var $364 = Bool$true;\n                        var $363 = $364;\n                        break;\n                    case 'List.cons':\n                        var $365 = Bool$false;\n                        var $363 = $365;\n                        break;\n                };\n                var $355 = $363;\n                break;\n        };\n        return $355;\n    };\n    const List$eql = x0 => x1 => x2 => List$eql$(x0, x1, x2);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function Senhas$loope$(_senha$1, _tentativas$2) {\n        var $366 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $367 = _m$bind$3;\n            return $367;\n        }))(IO$prompt$((\"\\u{a}Voc\\u{ea} tem: \" + (Nat$show$((_tentativas$2 + 1n)) + (\" tentativas.\" + \" Escolha 4 n\\u{fa}meros:\")))))((_line$3 => {\n            var _user_nums$4 = Senhas$read_input$(_line$3);\n            var _user_try$5 = Senhas$resposta$(_senha$1, _user_nums$4, _senha$1);\n            var self = Senha$confirma$(_user_nums$4);\n            if (self) {\n                var $369 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                    var $370 = _m$bind$6;\n                    return $370;\n                }))(IO$print$(\"Sua resposta est\\u{e1}:\"))((_$6 => {\n                    var $371 = IO$monad$((_m$bind$7 => _m$pure$8 => {\n                        var $372 = _m$bind$7;\n                        return $372;\n                    }))(IO$print$(String$join$(\"\", _user_try$5)))((_$7 => {\n                        var self = List$eql$(Nat$eql, _user_nums$4, _senha$1);\n                        if (self) {\n                            var $374 = IO$print$(\"Parab\\u{e9}ns, voc\\u{ea} venceu!\");\n                            var $373 = $374;\n                        } else {\n                            var self = (_tentativas$2 === 0n);\n                            if (self) {\n                                var $376 = IO$print$(\"Infelizmente, voc\\u{ea} perdeu\");\n                                var $375 = $376;\n                            } else {\n                                var $377 = Senhas$loope$(_senha$1, (_tentativas$2 - 1n <= 0n ? 0n : _tentativas$2 - 1n));\n                                var $375 = $377;\n                            };\n                            var $373 = $375;\n                        };\n                        return $373;\n                    }));\n                    return $371;\n                }));\n                var $368 = $369;\n            } else {\n                var $378 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                    var $379 = _m$bind$6;\n                    return $379;\n                }))(IO$print$(\"Seu input n\\u{e3}o foi v\\u{e1}lido, tente novamente\"))((_$6 => {\n                    var $380 = Senhas$loope$(_senha$1, _tentativas$2);\n                    return $380;\n                }));\n                var $368 = $378;\n            };\n            return $368;\n        }));\n        return $366;\n    };\n    const Senhas$loope = x0 => x1 => Senhas$loope$(x0, x1);\n    const Senhas = IO$monad$((_m$bind$1 => _m$pure$2 => {\n        var $381 = _m$bind$1;\n        return $381;\n    }))(IO$random$(10n))((_num$1 => {\n        var $382 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $383 = _m$bind$2;\n            return $383;\n        }))(IO$randoms$(4n, 10n))((_num_1$2 => {\n            var _lista$3 = List$cons$(1n, List$cons$(2n, List$cons$(3n, List$cons$(4n, List$cons$(5n, List$cons$(6n, List$cons$(7n, List$cons$(8n, List$cons$(9n, List$cons$(0n, List$nil))))))))));\n            var $384 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                var $385 = _m$bind$4;\n                return $385;\n            }))(IO$randoms$(6n, 10n))((_lista1$4 => {\n                var _senha$5 = List$random$(_num_1$2, _lista$3, List$nil);\n                var $386 = Senhas$loope$(_senha$5, 4n);\n                return $386;\n            }));\n            return $384;\n        }));\n        return $382;\n    }));\n    const User$Sipher$Senhas = Senhas;\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $387 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $387;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$Senhas = (() => {\n        var _draw$1 = (_state$1 => {\n            var $389 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"Bem-vindo ao joguinho das senhas! Instru\\u{e7}\\u{f5}es:\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"... TODO :) ...\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"Aperte qualquer tecla para come\\u{e7}ar.\"), List$nil)), List$nil))));\n            return $389;\n        });\n        var _when$2 = (_event$2 => _state$3 => {\n            var self = _event$2;\n            switch (self._) {\n                case 'App.Event.init':\n                case 'App.Event.tick':\n                case 'App.Event.mouse_down':\n                case 'App.Event.mouse_up':\n                case 'App.Event.key_up':\n                case 'App.Event.post':\n                case 'App.Event.mouse_over':\n                case 'App.Event.mouse_out':\n                case 'App.Event.mouse_click':\n                case 'App.Event.resize':\n                    var $391 = App$pass;\n                    var $390 = $391;\n                    break;\n                case 'App.Event.key_down':\n                    var $392 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                        var $393 = _m$bind$6;\n                        return $393;\n                    }))(User$Sipher$Senhas)((_$6 => {\n                        var $394 = App$pass;\n                        return $394;\n                    }));\n                    var $390 = $392;\n                    break;\n            };\n            return $390;\n        });\n        var $388 = App$new$(Unit$new, _draw$1, _when$2);\n        return $388;\n    })();\n    return {\n        'DOM.node': DOM$node,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.nil': List$nil,\n        'Pair': Pair,\n        'List.cons': List$cons,\n        'DOM.text': DOM$text,\n        'IO': IO,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'Dynamic.new': Dynamic$new,\n        'Unit.new': Unit$new,\n        'App.pass': App$pass,\n        'Parser.Reply': Parser$Reply,\n        'List': List,\n        'Parser.Reply.error': Parser$Reply$error,\n        'Parser.Reply.value': Parser$Reply$value,\n        'Parser.many.go': Parser$many$go,\n        'Parser.many': Parser$many,\n        'Parser.many1': Parser$many1,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'U16.eql': U16$eql,\n        'Parser.digit': Parser$digit,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Nat.from_base.go': Nat$from_base$go,\n        'List.reverse.go': List$reverse$go,\n        'List.reverse': List$reverse,\n        'Nat.from_base': Nat$from_base,\n        'Parser.nat': Parser$nat,\n        'Nat.read': Nat$read,\n        'IO.get_time': IO$get_time,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Nat.random': Nat$random,\n        'IO.random': IO$random,\n        'Nat.randoms': Nat$randoms,\n        'IO.randoms': IO$randoms,\n        'Maybe': Maybe,\n        'Pair.new': Pair$new,\n        'List.concat': List$concat,\n        'List.pop_at.go': List$pop_at$go,\n        'List.pop_at': List$pop_at,\n        'List.random': List$random,\n        'IO.prompt': IO$prompt,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'Bool.and': Bool$and,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'Char.eql': Char$eql,\n        'String.starts_with': String$starts_with,\n        'String.drop': String$drop,\n        'String.length.go': String$length$go,\n        'String.length': String$length,\n        'String.split.go': String$split$go,\n        'String.split': String$split,\n        'List.map': List$map,\n        'List.take': List$take,\n        'Senhas.read_input': Senhas$read_input,\n        'Nat.eql': Nat$eql,\n        'Bool.or': Bool$or,\n        'Senha.tem_numero': Senha$tem_numero,\n        'Senha.verifica': Senha$verifica,\n        'Senhas.resposta': Senhas$resposta,\n        'Senha.confirma': Senha$confirma,\n        'IO.put_string': IO$put_string,\n        'IO.print': IO$print,\n        'String.flatten.go': String$flatten$go,\n        'String.flatten': String$flatten,\n        'String.join.go': String$join$go,\n        'String.join': String$join,\n        'List.eql': List$eql,\n        'Nat.sub': Nat$sub,\n        'Senhas.loope': Senhas$loope,\n        'Senhas': Senhas,\n        'User.Sipher.Senhas': User$Sipher$Senhas,\n        'App.new': App$new,\n        'Web.Senhas': Web$Senhas,\n    };\n})();"],"sourceRoot":""}