{"version":3,"sources":["webpack://kind-web/./src/apps/Web.Demo.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"987.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    const inst_unit = x => x(1);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c2;\n                return $2;\n            } else {\n                var $3 = c2;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c2;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c2($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $11 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $9 = u16_to_word(self);\n                    var $10 = c0($9);\n                    return $10;\n            };\n        })();\n        return $11;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $14 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $12 = u32_to_word(self);\n                    var $13 = c0($12);\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $15 = u64_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $22 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $18 = c2;\n                return $18;\n            } else {\n                var $19 = self.charCodeAt(0);\n                var $20 = self.slice(1);\n                var $21 = c2($19)($20);\n                return $21;\n            };\n        })();\n        return $22;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $26 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $23 = buffer32_to_depth(self);\n                    var $24 = buffer32_to_u32array(self);\n                    var $25 = c0($23)($24);\n                    return $25;\n            };\n        })();\n        return $26;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $27 = u32array_to_buffer32(_array$2);\n        return $27;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $28 = null;\n        return $28;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $29 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $29;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $30 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $30;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $32 = Array$tip$(_x$3);\n            var $31 = $32;\n        } else {\n            var $33 = (self - 1n);\n            var _half$5 = Array$alloc$($33, _x$3);\n            var $34 = Array$tie$(_half$5, _half$5);\n            var $31 = $34;\n        };\n        return $31;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $35 = word_to_u32(_value$1);\n        return $35;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $36 = null;\n        return $36;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $37 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $37;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $39 = Word$e;\n            var $38 = $39;\n        } else {\n            var $40 = (self - 1n);\n            var $41 = Word$o$(Word$zero$($40));\n            var $38 = $41;\n        };\n        return $38;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n    const U32$zero = U32$new$(Word$zero$(32n));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $43 = Bool$false;\n                var $42 = $43;\n                break;\n            case 'Cmp.eql':\n                var $44 = Bool$true;\n                var $42 = $44;\n                break;\n        };\n        return $42;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $46 = self.pred;\n                var $47 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $49 = self.pred;\n                            var $50 = (_a$pred$10 => {\n                                var $51 = Word$cmp$go$(_a$pred$10, $49, _c$4);\n                                return $51;\n                            });\n                            var $48 = $50;\n                            break;\n                        case 'Word.i':\n                            var $52 = self.pred;\n                            var $53 = (_a$pred$10 => {\n                                var $54 = Word$cmp$go$(_a$pred$10, $52, Cmp$ltn);\n                                return $54;\n                            });\n                            var $48 = $53;\n                            break;\n                        case 'Word.e':\n                            var $55 = (_a$pred$8 => {\n                                var $56 = _c$4;\n                                return $56;\n                            });\n                            var $48 = $55;\n                            break;\n                    };\n                    var $48 = $48($46);\n                    return $48;\n                });\n                var $45 = $47;\n                break;\n            case 'Word.i':\n                var $57 = self.pred;\n                var $58 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $60 = self.pred;\n                            var $61 = (_a$pred$10 => {\n                                var $62 = Word$cmp$go$(_a$pred$10, $60, Cmp$gtn);\n                                return $62;\n                            });\n                            var $59 = $61;\n                            break;\n                        case 'Word.i':\n                            var $63 = self.pred;\n                            var $64 = (_a$pred$10 => {\n                                var $65 = Word$cmp$go$(_a$pred$10, $63, _c$4);\n                                return $65;\n                            });\n                            var $59 = $64;\n                            break;\n                        case 'Word.e':\n                            var $66 = (_a$pred$8 => {\n                                var $67 = _c$4;\n                                return $67;\n                            });\n                            var $59 = $66;\n                            break;\n                    };\n                    var $59 = $59($57);\n                    return $59;\n                });\n                var $45 = $58;\n                break;\n            case 'Word.e':\n                var $68 = (_b$5 => {\n                    var $69 = _c$4;\n                    return $69;\n                });\n                var $45 = $68;\n                break;\n        };\n        var $45 = $45(_b$3);\n        return $45;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $70 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $70;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $71 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $71;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n\n    function Nat$succ$(_pred$1) {\n        var $72 = 1n + _pred$1;\n        return $72;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$eql = a0 => a1 => (a0 === a1);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $73 = _x$4;\n                    return $73;\n                } else {\n                    var $74 = (self - 1n);\n                    var $75 = Nat$apply$($74, _f$3, _f$3(_x$4));\n                    return $75;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$i$(_pred$2) {\n        var $76 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $76;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $78 = self.pred;\n                var $79 = Word$i$($78);\n                var $77 = $79;\n                break;\n            case 'Word.i':\n                var $80 = self.pred;\n                var $81 = Word$o$(Word$inc$($80));\n                var $77 = $81;\n                break;\n            case 'Word.e':\n                var $82 = Word$e;\n                var $77 = $82;\n                break;\n        };\n        return $77;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function U32$inc$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $84 = u32_to_word(self);\n                var $85 = U32$new$(Word$inc$($84));\n                var $83 = $85;\n                break;\n        };\n        return $83;\n    };\n    const U32$inc = x0 => U32$inc$(x0);\n    const Nat$to_u32 = a0 => (Number(a0));\n    const U32$shr = a0 => a1 => (a0 >>> a1);\n\n    function U32$needed_depth$go$(_n$1) {\n        var self = (_n$1 === 0);\n        if (self) {\n            var $87 = 0n;\n            var $86 = $87;\n        } else {\n            var $88 = Nat$succ$(U32$needed_depth$go$((_n$1 >>> 1)));\n            var $86 = $88;\n        };\n        return $86;\n    };\n    const U32$needed_depth$go = x0 => U32$needed_depth$go$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $90 = self.pred;\n                var $91 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $93 = self.pred;\n                            var $94 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $96 = Word$i$(Word$subber$(_a$pred$10, $93, Bool$true));\n                                    var $95 = $96;\n                                } else {\n                                    var $97 = Word$o$(Word$subber$(_a$pred$10, $93, Bool$false));\n                                    var $95 = $97;\n                                };\n                                return $95;\n                            });\n                            var $92 = $94;\n                            break;\n                        case 'Word.i':\n                            var $98 = self.pred;\n                            var $99 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $101 = Word$o$(Word$subber$(_a$pred$10, $98, Bool$true));\n                                    var $100 = $101;\n                                } else {\n                                    var $102 = Word$i$(Word$subber$(_a$pred$10, $98, Bool$true));\n                                    var $100 = $102;\n                                };\n                                return $100;\n                            });\n                            var $92 = $99;\n                            break;\n                        case 'Word.e':\n                            var $103 = (_a$pred$8 => {\n                                var $104 = Word$e;\n                                return $104;\n                            });\n                            var $92 = $103;\n                            break;\n                    };\n                    var $92 = $92($90);\n                    return $92;\n                });\n                var $89 = $91;\n                break;\n            case 'Word.i':\n                var $105 = self.pred;\n                var $106 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $108 = self.pred;\n                            var $109 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $111 = Word$o$(Word$subber$(_a$pred$10, $108, Bool$false));\n                                    var $110 = $111;\n                                } else {\n                                    var $112 = Word$i$(Word$subber$(_a$pred$10, $108, Bool$false));\n                                    var $110 = $112;\n                                };\n                                return $110;\n                            });\n                            var $107 = $109;\n                            break;\n                        case 'Word.i':\n                            var $113 = self.pred;\n                            var $114 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $116 = Word$i$(Word$subber$(_a$pred$10, $113, Bool$true));\n                                    var $115 = $116;\n                                } else {\n                                    var $117 = Word$o$(Word$subber$(_a$pred$10, $113, Bool$false));\n                                    var $115 = $117;\n                                };\n                                return $115;\n                            });\n                            var $107 = $114;\n                            break;\n                        case 'Word.e':\n                            var $118 = (_a$pred$8 => {\n                                var $119 = Word$e;\n                                return $119;\n                            });\n                            var $107 = $118;\n                            break;\n                    };\n                    var $107 = $107($105);\n                    return $107;\n                });\n                var $89 = $106;\n                break;\n            case 'Word.e':\n                var $120 = (_b$5 => {\n                    var $121 = Word$e;\n                    return $121;\n                });\n                var $89 = $120;\n                break;\n        };\n        var $89 = $89(_b$3);\n        return $89;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $122 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $122;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U32$sub = a0 => a1 => (Math.max(a0 - a1, 0));\n\n    function U32$needed_depth$(_size$1) {\n        var $123 = U32$needed_depth$go$((Math.max(_size$1 - 1, 0)));\n        return $123;\n    };\n    const U32$needed_depth = x0 => U32$needed_depth$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var Word$mul$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$mul = _a$2 => _b$3 => Word$mul$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$mul$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Image3D$new$(_length$1, _capacity$2, _buffer$3) {\n        var $124 = ({\n            _: 'Image3D.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $124;\n    };\n    const Image3D$new = x0 => x1 => x2 => Image3D$new$(x0, x1, x2);\n\n    function Image3D$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$needed_depth$(((2 * _capacity$1) >>> 0)))));\n        var $125 = Image3D$new$(0, _capacity$1, _buffer$2);\n        return $125;\n    };\n    const Image3D$alloc_capacity = x0 => Image3D$alloc_capacity$(x0);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $126 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $126;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $128 = self.pred;\n                var $129 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $131 = self.pred;\n                            var $132 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $134 = Word$i$(Word$adder$(_a$pred$10, $131, Bool$false));\n                                    var $133 = $134;\n                                } else {\n                                    var $135 = Word$o$(Word$adder$(_a$pred$10, $131, Bool$false));\n                                    var $133 = $135;\n                                };\n                                return $133;\n                            });\n                            var $130 = $132;\n                            break;\n                        case 'Word.i':\n                            var $136 = self.pred;\n                            var $137 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $139 = Word$o$(Word$adder$(_a$pred$10, $136, Bool$true));\n                                    var $138 = $139;\n                                } else {\n                                    var $140 = Word$i$(Word$adder$(_a$pred$10, $136, Bool$false));\n                                    var $138 = $140;\n                                };\n                                return $138;\n                            });\n                            var $130 = $137;\n                            break;\n                        case 'Word.e':\n                            var $141 = (_a$pred$8 => {\n                                var $142 = Word$e;\n                                return $142;\n                            });\n                            var $130 = $141;\n                            break;\n                    };\n                    var $130 = $130($128);\n                    return $130;\n                });\n                var $127 = $129;\n                break;\n            case 'Word.i':\n                var $143 = self.pred;\n                var $144 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $146 = self.pred;\n                            var $147 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $149 = Word$o$(Word$adder$(_a$pred$10, $146, Bool$true));\n                                    var $148 = $149;\n                                } else {\n                                    var $150 = Word$i$(Word$adder$(_a$pred$10, $146, Bool$false));\n                                    var $148 = $150;\n                                };\n                                return $148;\n                            });\n                            var $145 = $147;\n                            break;\n                        case 'Word.i':\n                            var $151 = self.pred;\n                            var $152 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $154 = Word$i$(Word$adder$(_a$pred$10, $151, Bool$true));\n                                    var $153 = $154;\n                                } else {\n                                    var $155 = Word$o$(Word$adder$(_a$pred$10, $151, Bool$true));\n                                    var $153 = $155;\n                                };\n                                return $153;\n                            });\n                            var $145 = $152;\n                            break;\n                        case 'Word.e':\n                            var $156 = (_a$pred$8 => {\n                                var $157 = Word$e;\n                                return $157;\n                            });\n                            var $145 = $156;\n                            break;\n                    };\n                    var $145 = $145($143);\n                    return $145;\n                });\n                var $127 = $144;\n                break;\n            case 'Word.e':\n                var $158 = (_b$5 => {\n                    var $159 = Word$e;\n                    return $159;\n                });\n                var $127 = $158;\n                break;\n        };\n        var $127 = $127(_b$3);\n        return $127;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $160 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $160;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n\n    function Word$or$(_a$2, _b$3) {\n        var Word$or$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$or = _a$2 => _b$3 => Word$or$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$or$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n    const U32$shl = a0 => a1 => (a0 << a1);\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function Image3D$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'Image3D.new':\n                var $162 = self.capacity;\n                var $163 = self.buffer;\n                var $164 = Image3D$new$(_length$1, $162, $163);\n                var $161 = $164;\n                break;\n        };\n        return $161;\n    };\n    const Image3D$set_length = x0 => x1 => Image3D$set_length$(x0, x1);\n\n    function Image3D$clear$(_img$1) {\n        var $165 = Image3D$set_length$(0, _img$1);\n        return $165;\n    };\n    const Image3D$clear = x0 => Image3D$clear$(x0);\n\n    function Word$div$(_a$2, _b$3) {\n        var Word$div$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$div = _a$2 => _b$3 => Word$div$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$div$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n\n    function Word$mod$(_a$2, _b$3) {\n        var Word$mod$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$mod = _a$2 => _b$3 => Word$mod$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$mod$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mod = x0 => x1 => Word$mod$(x0, x1);\n    const U32$mod = a0 => a1 => (a0 % a1);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $167 = Word$e;\n            var $166 = $167;\n        } else {\n            var $168 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $170 = self.pred;\n                    var $171 = Word$o$(Word$trim$($168, $170));\n                    var $169 = $171;\n                    break;\n                case 'Word.i':\n                    var $172 = self.pred;\n                    var $173 = Word$i$(Word$trim$($168, $172));\n                    var $169 = $173;\n                    break;\n                case 'Word.e':\n                    var $174 = Word$o$(Word$trim$($168, Word$e));\n                    var $169 = $174;\n                    break;\n            };\n            var $166 = $169;\n        };\n        return $166;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = 1;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $176 = self.value;\n                var $177 = $176;\n                var $175 = $177;\n                break;\n            case 'Array.tie':\n                var $178 = Unit$new;\n                var $175 = $178;\n                break;\n        };\n        return $175;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Pair$(_A$1, _B$2) {\n        var $179 = null;\n        return $179;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $181 = self.lft;\n                var $182 = self.rgt;\n                var $183 = Pair$new$($181, $182);\n                var $180 = $183;\n                break;\n            case 'Array.tip':\n                var $184 = Unit$new;\n                var $180 = $184;\n                break;\n        };\n        return $180;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $185 = self.pred;\n                        var $186 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $185);\n                        return $186;\n                    case 'Word.i':\n                        var $187 = self.pred;\n                        var $188 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $187);\n                        return $188;\n                    case 'Word.e':\n                        var $189 = _nil$3;\n                        return $189;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $190 = Word$foldl$((_arr$6 => {\n            var $191 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $191;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $193 = self.fst;\n                    var $194 = self.snd;\n                    var $195 = Array$tie$(_rec$7($193), $194);\n                    var $192 = $195;\n                    break;\n            };\n            return $192;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $197 = self.fst;\n                    var $198 = self.snd;\n                    var $199 = Array$tie$($197, _rec$7($198));\n                    var $196 = $199;\n                    break;\n            };\n            return $196;\n        }), _idx$3)(_arr$5);\n        return $190;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $200 = Array$mut$(_idx$3, (_x$6 => {\n            var $201 = _val$4;\n            return $201;\n        }), _arr$5);\n        return $200;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const Image3D$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const Image3D$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n    const Image3D$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function Image3D$Draw$square$(_x$1, _y$2, _z$3, _w$4, _h$5, _col$6, _img$7) {\n        var _siz$8 = ((_w$4 * _h$5) >>> 0);\n        var _w_2$9 = ((_w$4 / 2) >>> 0);\n        var _h_2$10 = ((_h$5 / 2) >>> 0);\n        var $202 = (() => {\n            var $203 = _img$7;\n            var $204 = 0;\n            var $205 = _siz$8;\n            let _pix$12 = $203;\n            for (let _idx$11 = $204; _idx$11 < $205; ++_idx$11) {\n                var _v_x$13 = (_idx$11 % _w$4);\n                var _v_y$14 = ((_idx$11 / _h$5) >>> 0);\n                var _p_x$15 = (Math.max(((_x$1 + _v_x$13) >>> 0) - _w_2$9, 0));\n                var _p_y$16 = (Math.max(((_y$2 + _v_y$14) >>> 0) - _h_2$10, 0));\n                var _pos$17 = ((0 | _p_x$15 | (_p_y$16 << 12) | (_z$3 << 24)));\n                var _col$18 = _col$6(_v_x$13)(_v_y$14);\n                var _pix$19 = ((_pix$12.buffer[_pix$12.length * 2] = _pos$17, _pix$12.buffer[_pix$12.length * 2 + 1] = _col$18, _pix$12.length++, _pix$12));\n                var $203 = _pix$19;\n                _pix$12 = $203;\n            };\n            return _pix$12;\n        })();\n        return $202;\n    };\n    const Image3D$Draw$square = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Image3D$Draw$square$(x0, x1, x2, x3, x4, x5, x6);\n\n    function App$Render$pix$(_pixs$1) {\n        var $206 = ({\n            _: 'App.Render.pix',\n            'pixs': _pixs$1\n        });\n        return $206;\n    };\n    const App$Render$pix = x0 => App$Render$pix$(x0);\n\n    function List$(_A$1) {\n        var $207 = null;\n        return $207;\n    };\n    const List = x0 => List$(x0);\n\n    function App$Action$(_S$1) {\n        var $208 = null;\n        return $208;\n    };\n    const App$Action = x0 => App$Action$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function List$cons$(_head$2, _tail$3) {\n        var $209 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $209;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function App$Action$state$(_value$2) {\n        var $210 = ({\n            _: 'App.Action.state',\n            'value': _value$2\n        });\n        return $210;\n    };\n    const App$Action$state = x0 => App$Action$state$(x0);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $211 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $211;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$Demo = (() => {\n        var _img$1 = Image3D$alloc_capacity$(256);\n        var _init$2 = Pair$new$(128, 128);\n        var _draw$3 = (_state$3 => {\n            var self = _state$3;\n            switch (self._) {\n                case 'Pair.new':\n                    var $214 = self.fst;\n                    var $215 = self.snd;\n                    var _col$6 = (_x$6 => _y$7 => {\n                        var _r$8 = ((96 + ((_x$6 * 4) >>> 0)) >>> 0);\n                        var _g$9 = ((96 + ((_x$6 * 4) >>> 0)) >>> 0);\n                        var _b$10 = 128;\n                        var _a$11 = 255;\n                        var $217 = ((0 | _r$8 | (_g$9 << 8) | (_b$10 << 16) | (_a$11 << 24)));\n                        return $217;\n                    });\n                    var _img$7 = Image3D$clear$(_img$1);\n                    var _img$8 = Image3D$Draw$square$($214, $215, 128, 16, 16, _col$6, _img$7);\n                    var $216 = App$Render$pix$(_img$8);\n                    var $213 = $216;\n                    break;\n            };\n            return $213;\n        });\n        var _when$4 = (_event$4 => _state$5 => {\n            var self = _event$4;\n            switch (self._) {\n                case 'App.Event.xkey':\n                    var $219 = self.down;\n                    var $220 = self.code;\n                    var self = $219;\n                    if (self) {\n                        var $222 = List$cons$(App$Action$state$((() => {\n                            var self = _state$5;\n                            switch (self._) {\n                                case 'Pair.new':\n                                    var $223 = self.fst;\n                                    var $224 = self.snd;\n                                    var self = ($220 === 65);\n                                    if (self) {\n                                        var $226 = Pair$new$((Math.max($223 - 4, 0)), $224);\n                                        var $225 = $226;\n                                    } else {\n                                        var self = ($220 === 68);\n                                        if (self) {\n                                            var $228 = Pair$new$((($223 + 4) >>> 0), $224);\n                                            var $227 = $228;\n                                        } else {\n                                            var self = ($220 === 87);\n                                            if (self) {\n                                                var $230 = Pair$new$($223, (Math.max($224 - 4, 0)));\n                                                var $229 = $230;\n                                            } else {\n                                                var self = ($220 === 83);\n                                                if (self) {\n                                                    var $232 = Pair$new$($223, (($224 + 4) >>> 0));\n                                                    var $231 = $232;\n                                                } else {\n                                                    var $233 = Pair$new$($223, $224);\n                                                    var $231 = $233;\n                                                };\n                                                var $229 = $231;\n                                            };\n                                            var $227 = $229;\n                                        };\n                                        var $225 = $227;\n                                    };\n                                    return $225;\n                            };\n                        })()), List$nil);\n                        var $221 = $222;\n                    } else {\n                        var $234 = List$nil;\n                        var $221 = $234;\n                    };\n                    var $218 = $221;\n                    break;\n                case 'App.Event.init':\n                case 'App.Event.tick':\n                case 'App.Event.post':\n                    var $235 = List$nil;\n                    var $218 = $235;\n                    break;\n            };\n            return $218;\n        });\n        var $212 = App$new$(_init$2, _draw$3, _when$4);\n        return $212;\n    })();\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.eql': U32$eql,\n        'Nat.apply': Nat$apply,\n        'Word.i': Word$i,\n        'Word.inc': Word$inc,\n        'U32.inc': U32$inc,\n        'Nat.to_u32': Nat$to_u32,\n        'U32.shr': U32$shr,\n        'U32.needed_depth.go': U32$needed_depth$go,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'U32.sub': U32$sub,\n        'U32.needed_depth': U32$needed_depth,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Image3D.new': Image3D$new,\n        'Image3D.alloc_capacity': Image3D$alloc_capacity,\n        'Pair.new': Pair$new,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'U32.add': U32$add,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'U32.shl': U32$shl,\n        'Col32.new': Col32$new,\n        'Image3D.set_length': Image3D$set_length,\n        'Image3D.clear': Image3D$clear,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'U32.for': U32$for,\n        'Word.mod': Word$mod,\n        'U32.mod': U32$mod,\n        'Pos32.new': Pos32$new,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Pair': Pair,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'Image3D.set_pos': Image3D$set_pos,\n        'Image3D.set_col': Image3D$set_col,\n        'Image3D.push': Image3D$push,\n        'Image3D.Draw.square': Image3D$Draw$square,\n        'App.Render.pix': App$Render$pix,\n        'List': List,\n        'App.Action': App$Action,\n        'List.nil': List$nil,\n        'List.cons': List$cons,\n        'App.Action.state': App$Action$state,\n        'U16.eql': U16$eql,\n        'App.new': App$new,\n        'Web.Demo': Web$Demo,\n    };\n})();"],"sourceRoot":""}