{"version":3,"sources":["webpack://kind-web/./src/apps/Web.Demo.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrfile":"987.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c0;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c1($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $33 = u32array_to_buffer32(_array$2);\n        return $33;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $34 = null;\n        return $34;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $35 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $35;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $36 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $36;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $38 = Array$tip$(_x$3);\n            var $37 = $38;\n        } else {\n            var $39 = (self - 1n);\n            var _half$5 = Array$alloc$($39, _x$3);\n            var $40 = Array$tie$(_half$5, _half$5);\n            var $37 = $40;\n        };\n        return $37;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $41 = word_to_u32(_value$1);\n        return $41;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $42 = null;\n        return $42;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $43 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $43;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $45 = Word$e;\n            var $44 = $45;\n        } else {\n            var $46 = (self - 1n);\n            var $47 = Word$o$(Word$zero$($46));\n            var $44 = $47;\n        };\n        return $44;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $48 = 1n + _pred$1;\n        return $48;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$zero = U32$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))))))))))))))))))));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n\n    function Word$bit_length$go$(_word$2, _c$3, _n$4) {\n        var Word$bit_length$go$ = (_word$2, _c$3, _n$4) => ({\n            ctr: 'TCO',\n            arg: [_word$2, _c$3, _n$4]\n        });\n        var Word$bit_length$go = _word$2 => _c$3 => _n$4 => Word$bit_length$go$(_word$2, _c$3, _n$4);\n        var arg = [_word$2, _c$3, _n$4];\n        while (true) {\n            let [_word$2, _c$3, _n$4] = arg;\n            var R = (() => {\n                var self = _word$2;\n                switch (self._) {\n                    case 'Word.o':\n                        var $49 = self.pred;\n                        var $50 = Word$bit_length$go$($49, Nat$succ$(_c$3), _n$4);\n                        return $50;\n                    case 'Word.i':\n                        var $51 = self.pred;\n                        var $52 = Word$bit_length$go$($51, Nat$succ$(_c$3), Nat$succ$(_c$3));\n                        return $52;\n                    case 'Word.e':\n                        var $53 = _n$4;\n                        return $53;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$bit_length$go = x0 => x1 => x2 => Word$bit_length$go$(x0, x1, x2);\n\n    function Word$bit_length$(_word$2) {\n        var $54 = Word$bit_length$go$(_word$2, 0n, 0n);\n        return $54;\n    };\n    const Word$bit_length = x0 => Word$bit_length$(x0);\n\n    function U32$bit_length$(_size$1) {\n        var self = _size$1;\n        switch ('u32') {\n            case 'u32':\n                var $56 = u32_to_word(self);\n                var $57 = Word$bit_length$($56);\n                var $55 = $57;\n                break;\n        };\n        return $55;\n    };\n    const U32$bit_length = x0 => U32$bit_length$(x0);\n\n    function Word$i$(_pred$2) {\n        var $58 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $58;\n    };\n    const Word$i = x0 => Word$i$(x0);\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Word$shift_left$one$go$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $60 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $62 = Word$i$(Word$shift_left$one$go$($60, Bool$false));\n                    var $61 = $62;\n                } else {\n                    var $63 = Word$o$(Word$shift_left$one$go$($60, Bool$false));\n                    var $61 = $63;\n                };\n                var $59 = $61;\n                break;\n            case 'Word.i':\n                var $64 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $66 = Word$i$(Word$shift_left$one$go$($64, Bool$true));\n                    var $65 = $66;\n                } else {\n                    var $67 = Word$o$(Word$shift_left$one$go$($64, Bool$true));\n                    var $65 = $67;\n                };\n                var $59 = $65;\n                break;\n            case 'Word.e':\n                var $68 = Word$e;\n                var $59 = $68;\n                break;\n        };\n        return $59;\n    };\n    const Word$shift_left$one$go = x0 => x1 => Word$shift_left$one$go$(x0, x1);\n\n    function Word$shift_left$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $70 = self.pred;\n                var $71 = Word$o$(Word$shift_left$one$go$($70, Bool$false));\n                var $69 = $71;\n                break;\n            case 'Word.i':\n                var $72 = self.pred;\n                var $73 = Word$o$(Word$shift_left$one$go$($72, Bool$true));\n                var $69 = $73;\n                break;\n            case 'Word.e':\n                var $74 = Word$e;\n                var $69 = $74;\n                break;\n        };\n        return $69;\n    };\n    const Word$shift_left$one = x0 => Word$shift_left$one$(x0);\n\n    function Word$shift_left$(_n$2, _value$3) {\n        var Word$shift_left$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_left = _n$2 => _value$3 => Word$shift_left$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $75 = _value$3;\n                    return $75;\n                } else {\n                    var $76 = (self - 1n);\n                    var $77 = Word$shift_left$($76, Word$shift_left$one$(_value$3));\n                    return $77;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_left = x0 => x1 => Word$shift_left$(x0, x1);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $79 = self.pred;\n                var $80 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $82 = self.pred;\n                            var $83 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $85 = Word$i$(Word$adder$(_a$pred$10, $82, Bool$false));\n                                    var $84 = $85;\n                                } else {\n                                    var $86 = Word$o$(Word$adder$(_a$pred$10, $82, Bool$false));\n                                    var $84 = $86;\n                                };\n                                return $84;\n                            });\n                            var $81 = $83;\n                            break;\n                        case 'Word.i':\n                            var $87 = self.pred;\n                            var $88 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $90 = Word$o$(Word$adder$(_a$pred$10, $87, Bool$true));\n                                    var $89 = $90;\n                                } else {\n                                    var $91 = Word$i$(Word$adder$(_a$pred$10, $87, Bool$false));\n                                    var $89 = $91;\n                                };\n                                return $89;\n                            });\n                            var $81 = $88;\n                            break;\n                        case 'Word.e':\n                            var $92 = (_a$pred$8 => {\n                                var $93 = Word$e;\n                                return $93;\n                            });\n                            var $81 = $92;\n                            break;\n                    };\n                    var $81 = $81($79);\n                    return $81;\n                });\n                var $78 = $80;\n                break;\n            case 'Word.i':\n                var $94 = self.pred;\n                var $95 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $97 = self.pred;\n                            var $98 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $100 = Word$o$(Word$adder$(_a$pred$10, $97, Bool$true));\n                                    var $99 = $100;\n                                } else {\n                                    var $101 = Word$i$(Word$adder$(_a$pred$10, $97, Bool$false));\n                                    var $99 = $101;\n                                };\n                                return $99;\n                            });\n                            var $96 = $98;\n                            break;\n                        case 'Word.i':\n                            var $102 = self.pred;\n                            var $103 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $105 = Word$i$(Word$adder$(_a$pred$10, $102, Bool$true));\n                                    var $104 = $105;\n                                } else {\n                                    var $106 = Word$o$(Word$adder$(_a$pred$10, $102, Bool$true));\n                                    var $104 = $106;\n                                };\n                                return $104;\n                            });\n                            var $96 = $103;\n                            break;\n                        case 'Word.e':\n                            var $107 = (_a$pred$8 => {\n                                var $108 = Word$e;\n                                return $108;\n                            });\n                            var $96 = $107;\n                            break;\n                    };\n                    var $96 = $96($94);\n                    return $96;\n                });\n                var $78 = $95;\n                break;\n            case 'Word.e':\n                var $109 = (_b$5 => {\n                    var $110 = Word$e;\n                    return $110;\n                });\n                var $78 = $109;\n                break;\n        };\n        var $78 = $78(_b$3);\n        return $78;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $111 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $111;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $112 = self.pred;\n                        var $113 = Word$mul$go$($112, Word$shift_left$(1n, _b$4), _acc$5);\n                        return $113;\n                    case 'Word.i':\n                        var $114 = self.pred;\n                        var $115 = Word$mul$go$($114, Word$shift_left$(1n, _b$4), Word$add$(_b$4, _acc$5));\n                        return $115;\n                    case 'Word.e':\n                        var $116 = _acc$5;\n                        return $116;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$to_zero$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $118 = self.pred;\n                var $119 = Word$o$(Word$to_zero$($118));\n                var $117 = $119;\n                break;\n            case 'Word.i':\n                var $120 = self.pred;\n                var $121 = Word$o$(Word$to_zero$($120));\n                var $117 = $121;\n                break;\n            case 'Word.e':\n                var $122 = Word$e;\n                var $117 = $122;\n                break;\n        };\n        return $117;\n    };\n    const Word$to_zero = x0 => Word$to_zero$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var $123 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));\n        return $123;\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $124 = _x$4;\n                    return $124;\n                } else {\n                    var $125 = (self - 1n);\n                    var $126 = Nat$apply$($125, _f$3, _f$3(_x$4));\n                    return $126;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $128 = self.pred;\n                var $129 = Word$i$($128);\n                var $127 = $129;\n                break;\n            case 'Word.i':\n                var $130 = self.pred;\n                var $131 = Word$o$(Word$inc$($130));\n                var $127 = $131;\n                break;\n            case 'Word.e':\n                var $132 = Word$e;\n                var $127 = $132;\n                break;\n        };\n        return $127;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $133 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $133;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n\n    function VoxBox$new$(_length$1, _capacity$2, _buffer$3) {\n        var $134 = ({\n            _: 'VoxBox.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $134;\n    };\n    const VoxBox$new = x0 => x1 => x2 => VoxBox$new$(x0, x1, x2);\n\n    function VoxBox$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$bit_length$(((2 * _capacity$1) >>> 0)))));\n        var $135 = VoxBox$new$(0, _capacity$1, _buffer$2);\n        return $135;\n    };\n    const VoxBox$alloc_capacity = x0 => VoxBox$alloc_capacity$(x0);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $136 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $136;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $138 = self.fst;\n                var $139 = $138;\n                var $137 = $139;\n                break;\n        };\n        return $137;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $141 = self.snd;\n                var $142 = $141;\n                var $140 = $142;\n                break;\n        };\n        return $140;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function Word$or$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $144 = self.pred;\n                var $145 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $147 = self.pred;\n                            var $148 = (_a$pred$9 => {\n                                var $149 = Word$o$(Word$or$(_a$pred$9, $147));\n                                return $149;\n                            });\n                            var $146 = $148;\n                            break;\n                        case 'Word.i':\n                            var $150 = self.pred;\n                            var $151 = (_a$pred$9 => {\n                                var $152 = Word$i$(Word$or$(_a$pred$9, $150));\n                                return $152;\n                            });\n                            var $146 = $151;\n                            break;\n                        case 'Word.e':\n                            var $153 = (_a$pred$7 => {\n                                var $154 = Word$e;\n                                return $154;\n                            });\n                            var $146 = $153;\n                            break;\n                    };\n                    var $146 = $146($144);\n                    return $146;\n                });\n                var $143 = $145;\n                break;\n            case 'Word.i':\n                var $155 = self.pred;\n                var $156 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $158 = self.pred;\n                            var $159 = (_a$pred$9 => {\n                                var $160 = Word$i$(Word$or$(_a$pred$9, $158));\n                                return $160;\n                            });\n                            var $157 = $159;\n                            break;\n                        case 'Word.i':\n                            var $161 = self.pred;\n                            var $162 = (_a$pred$9 => {\n                                var $163 = Word$i$(Word$or$(_a$pred$9, $161));\n                                return $163;\n                            });\n                            var $157 = $162;\n                            break;\n                        case 'Word.e':\n                            var $164 = (_a$pred$7 => {\n                                var $165 = Word$e;\n                                return $165;\n                            });\n                            var $157 = $164;\n                            break;\n                    };\n                    var $157 = $157($155);\n                    return $157;\n                });\n                var $143 = $156;\n                break;\n            case 'Word.e':\n                var $166 = (_b$4 => {\n                    var $167 = Word$e;\n                    return $167;\n                });\n                var $143 = $166;\n                break;\n        };\n        var $143 = $143(_b$3);\n        return $143;\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $169 = self.pred;\n                var $170 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $169));\n                var $168 = $170;\n                break;\n            case 'Word.i':\n                var $171 = self.pred;\n                var $172 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $171));\n                var $168 = $172;\n                break;\n            case 'Word.e':\n                var $173 = _nil$3;\n                var $168 = $173;\n                break;\n        };\n        return $168;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Word$to_nat$(_word$2) {\n        var $174 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $175 = Nat$succ$((2n * _x$4));\n            return $175;\n        }), _word$2);\n        return $174;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n\n    function Word$shl$(_n$2, _value$3) {\n        var _n_nat$4 = Word$to_nat$(_n$2);\n        var $176 = Word$shift_left$(_n_nat$4, _value$3);\n        return $176;\n    };\n    const Word$shl = x0 => x1 => Word$shl$(x0, x1);\n    const U32$shl = a0 => a1 => ((a0 << a1) >>> 0);\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $177 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $177;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function BitsMap$(_A$1) {\n        var $178 = null;\n        return $178;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $179 = null;\n        return $179;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $180 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $180;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $181 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $181;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $183 = self.pred;\n                var $184 = (Word$to_bits$($183) + '0');\n                var $182 = $184;\n                break;\n            case 'Word.i':\n                var $185 = self.pred;\n                var $186 = (Word$to_bits$($185) + '1');\n                var $182 = $186;\n                break;\n            case 'Word.e':\n                var $187 = Bits$e;\n                var $182 = $187;\n                break;\n        };\n        return $182;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $189 = Bits$e;\n            var $188 = $189;\n        } else {\n            var $190 = self.charCodeAt(0);\n            var $191 = self.slice(1);\n            var $192 = (String$to_bits$($191) + (u16_to_bits($190)));\n            var $188 = $192;\n        };\n        return $188;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $194 = self.head;\n                var $195 = self.tail;\n                var self = $194;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $197 = self.fst;\n                        var $198 = self.snd;\n                        var $199 = (bitsmap_set(String$to_bits$($197), $198, Map$from_list$($195), 'set'));\n                        var $196 = $199;\n                        break;\n                };\n                var $193 = $196;\n                break;\n            case 'List.nil':\n                var $200 = BitsMap$new;\n                var $193 = $200;\n                break;\n        };\n        return $193;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$(_A$1, _B$2) {\n        var $201 = null;\n        return $201;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $202 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $202;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function DOM$text$(_value$1) {\n        var $203 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $203;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n\n    function DOM$vbox$(_props$1, _style$2, _value$3) {\n        var $204 = ({\n            _: 'DOM.vbox',\n            'props': _props$1,\n            'style': _style$2,\n            'value': _value$3\n        });\n        return $204;\n    };\n    const DOM$vbox = x0 => x1 => x2 => DOM$vbox$(x0, x1, x2);\n    const Nat$ltn = a0 => a1 => (a0 < a1);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $206 = Bool$false;\n                var $205 = $206;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $207 = Bool$true;\n                var $205 = $207;\n                break;\n        };\n        return $205;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $209 = self.pred;\n                var $210 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $212 = self.pred;\n                            var $213 = (_a$pred$10 => {\n                                var $214 = Word$cmp$go$(_a$pred$10, $212, _c$4);\n                                return $214;\n                            });\n                            var $211 = $213;\n                            break;\n                        case 'Word.i':\n                            var $215 = self.pred;\n                            var $216 = (_a$pred$10 => {\n                                var $217 = Word$cmp$go$(_a$pred$10, $215, Cmp$ltn);\n                                return $217;\n                            });\n                            var $211 = $216;\n                            break;\n                        case 'Word.e':\n                            var $218 = (_a$pred$8 => {\n                                var $219 = _c$4;\n                                return $219;\n                            });\n                            var $211 = $218;\n                            break;\n                    };\n                    var $211 = $211($209);\n                    return $211;\n                });\n                var $208 = $210;\n                break;\n            case 'Word.i':\n                var $220 = self.pred;\n                var $221 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $223 = self.pred;\n                            var $224 = (_a$pred$10 => {\n                                var $225 = Word$cmp$go$(_a$pred$10, $223, Cmp$gtn);\n                                return $225;\n                            });\n                            var $222 = $224;\n                            break;\n                        case 'Word.i':\n                            var $226 = self.pred;\n                            var $227 = (_a$pred$10 => {\n                                var $228 = Word$cmp$go$(_a$pred$10, $226, _c$4);\n                                return $228;\n                            });\n                            var $222 = $227;\n                            break;\n                        case 'Word.e':\n                            var $229 = (_a$pred$8 => {\n                                var $230 = _c$4;\n                                return $230;\n                            });\n                            var $222 = $229;\n                            break;\n                    };\n                    var $222 = $222($220);\n                    return $222;\n                });\n                var $208 = $221;\n                break;\n            case 'Word.e':\n                var $231 = (_b$5 => {\n                    var $232 = _c$4;\n                    return $232;\n                });\n                var $208 = $231;\n                break;\n        };\n        var $208 = $208(_b$3);\n        return $208;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $233 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $233;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $234 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $234;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n\n    function Word$shift_right$one$go$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $236 = self.pred;\n                var $237 = Word$o$(Word$shift_right$one$go$($236));\n                var $235 = $237;\n                break;\n            case 'Word.i':\n                var $238 = self.pred;\n                var $239 = Word$i$(Word$shift_right$one$go$($238));\n                var $235 = $239;\n                break;\n            case 'Word.e':\n                var $240 = Word$o$(Word$e);\n                var $235 = $240;\n                break;\n        };\n        return $235;\n    };\n    const Word$shift_right$one$go = x0 => Word$shift_right$one$go$(x0);\n\n    function Word$shift_right$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $242 = self.pred;\n                var $243 = Word$shift_right$one$go$($242);\n                var $241 = $243;\n                break;\n            case 'Word.i':\n                var $244 = self.pred;\n                var $245 = Word$shift_right$one$go$($244);\n                var $241 = $245;\n                break;\n            case 'Word.e':\n                var $246 = Word$e;\n                var $241 = $246;\n                break;\n        };\n        return $241;\n    };\n    const Word$shift_right$one = x0 => Word$shift_right$one$(x0);\n\n    function Word$shift_right$(_n$2, _value$3) {\n        var Word$shift_right$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_right = _n$2 => _value$3 => Word$shift_right$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $247 = _value$3;\n                    return $247;\n                } else {\n                    var $248 = (self - 1n);\n                    var $249 = Word$shift_right$($248, Word$shift_right$one$(_value$3));\n                    return $249;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_right = x0 => x1 => Word$shift_right$(x0, x1);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $251 = self.pred;\n                var $252 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $254 = self.pred;\n                            var $255 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $257 = Word$i$(Word$subber$(_a$pred$10, $254, Bool$true));\n                                    var $256 = $257;\n                                } else {\n                                    var $258 = Word$o$(Word$subber$(_a$pred$10, $254, Bool$false));\n                                    var $256 = $258;\n                                };\n                                return $256;\n                            });\n                            var $253 = $255;\n                            break;\n                        case 'Word.i':\n                            var $259 = self.pred;\n                            var $260 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $262 = Word$o$(Word$subber$(_a$pred$10, $259, Bool$true));\n                                    var $261 = $262;\n                                } else {\n                                    var $263 = Word$i$(Word$subber$(_a$pred$10, $259, Bool$true));\n                                    var $261 = $263;\n                                };\n                                return $261;\n                            });\n                            var $253 = $260;\n                            break;\n                        case 'Word.e':\n                            var $264 = (_a$pred$8 => {\n                                var $265 = Word$e;\n                                return $265;\n                            });\n                            var $253 = $264;\n                            break;\n                    };\n                    var $253 = $253($251);\n                    return $253;\n                });\n                var $250 = $252;\n                break;\n            case 'Word.i':\n                var $266 = self.pred;\n                var $267 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $269 = self.pred;\n                            var $270 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $272 = Word$o$(Word$subber$(_a$pred$10, $269, Bool$false));\n                                    var $271 = $272;\n                                } else {\n                                    var $273 = Word$i$(Word$subber$(_a$pred$10, $269, Bool$false));\n                                    var $271 = $273;\n                                };\n                                return $271;\n                            });\n                            var $268 = $270;\n                            break;\n                        case 'Word.i':\n                            var $274 = self.pred;\n                            var $275 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $277 = Word$i$(Word$subber$(_a$pred$10, $274, Bool$true));\n                                    var $276 = $277;\n                                } else {\n                                    var $278 = Word$o$(Word$subber$(_a$pred$10, $274, Bool$false));\n                                    var $276 = $278;\n                                };\n                                return $276;\n                            });\n                            var $268 = $275;\n                            break;\n                        case 'Word.e':\n                            var $279 = (_a$pred$8 => {\n                                var $280 = Word$e;\n                                return $280;\n                            });\n                            var $268 = $279;\n                            break;\n                    };\n                    var $268 = $268($266);\n                    return $268;\n                });\n                var $250 = $267;\n                break;\n            case 'Word.e':\n                var $281 = (_b$5 => {\n                    var $282 = Word$e;\n                    return $282;\n                });\n                var $250 = $281;\n                break;\n        };\n        var $250 = $250(_b$3);\n        return $250;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $283 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $283;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n\n    function Word$div$go$(_shift$2, _sub_copy$3, _shift_copy$4, _value$5) {\n        var Word$div$go$ = (_shift$2, _sub_copy$3, _shift_copy$4, _value$5) => ({\n            ctr: 'TCO',\n            arg: [_shift$2, _sub_copy$3, _shift_copy$4, _value$5]\n        });\n        var Word$div$go = _shift$2 => _sub_copy$3 => _shift_copy$4 => _value$5 => Word$div$go$(_shift$2, _sub_copy$3, _shift_copy$4, _value$5);\n        var arg = [_shift$2, _sub_copy$3, _shift_copy$4, _value$5];\n        while (true) {\n            let [_shift$2, _sub_copy$3, _shift_copy$4, _value$5] = arg;\n            var R = (() => {\n                var self = Word$gte$(_sub_copy$3, _shift_copy$4);\n                if (self) {\n                    var _mask$6 = Word$shift_left$(_shift$2, Word$inc$(Word$to_zero$(_sub_copy$3)));\n                    var $284 = Pair$new$(Bool$true, Word$or$(_value$5, _mask$6));\n                    var self = $284;\n                } else {\n                    var $285 = Pair$new$(Bool$false, _value$5);\n                    var self = $285;\n                };\n                switch (self._) {\n                    case 'Pair.new':\n                        var $286 = self.fst;\n                        var $287 = self.snd;\n                        var self = _shift$2;\n                        if (self === 0n) {\n                            var $289 = $287;\n                            var $288 = $289;\n                        } else {\n                            var $290 = (self - 1n);\n                            var _new_shift_copy$9 = Word$shift_right$(1n, _shift_copy$4);\n                            var self = $286;\n                            if (self) {\n                                var $292 = Word$div$go$($290, Word$sub$(_sub_copy$3, _shift_copy$4), _new_shift_copy$9, $287);\n                                var $291 = $292;\n                            } else {\n                                var $293 = Word$div$go$($290, _sub_copy$3, _new_shift_copy$9, $287);\n                                var $291 = $293;\n                            };\n                            var $288 = $291;\n                        };\n                        return $288;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div$go = x0 => x1 => x2 => x3 => Word$div$go$(x0, x1, x2, x3);\n\n    function Word$div$(_a$2, _b$3) {\n        var _a_bits$4 = Word$bit_length$(_a$2);\n        var _b_bits$5 = Word$bit_length$(_b$3);\n        var self = (_a_bits$4 < _b_bits$5);\n        if (self) {\n            var $295 = Word$to_zero$(_a$2);\n            var $294 = $295;\n        } else {\n            var _shift$6 = (_a_bits$4 - _b_bits$5 <= 0n ? 0n : _a_bits$4 - _b_bits$5);\n            var _shift_copy$7 = Word$shift_left$(_shift$6, _b$3);\n            var $296 = Word$div$go$(_shift$6, _a$2, _shift_copy$7, Word$to_zero$(_a$2));\n            var $294 = $296;\n        };\n        return $294;\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $298 = Bool$false;\n                var $297 = $298;\n                break;\n            case 'Cmp.eql':\n                var $299 = Bool$true;\n                var $297 = $299;\n                break;\n        };\n        return $297;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $300 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $300;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U32$eql = a0 => a1 => (a0 === a1);\n    const U32$inc = a0 => ((a0 + 1) >>> 0);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n\n    function Word$mod$(_a$2, _b$3) {\n        var _q$4 = Word$div$(_a$2, _b$3);\n        var $301 = Word$sub$(_a$2, Word$mul$(_b$3, _q$4));\n        return $301;\n    };\n    const Word$mod = x0 => x1 => Word$mod$(x0, x1);\n    const U32$mod = a0 => a1 => (a0 % a1);\n    const U32$sub = a0 => a1 => ((a0 - a1) >>> 0);\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $303 = Word$e;\n            var $302 = $303;\n        } else {\n            var $304 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $306 = self.pred;\n                    var $307 = Word$o$(Word$trim$($304, $306));\n                    var $305 = $307;\n                    break;\n                case 'Word.i':\n                    var $308 = self.pred;\n                    var $309 = Word$i$(Word$trim$($304, $308));\n                    var $305 = $309;\n                    break;\n                case 'Word.e':\n                    var $310 = Word$o$(Word$trim$($304, Word$e));\n                    var $305 = $310;\n                    break;\n            };\n            var $302 = $305;\n        };\n        return $302;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = null;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $312 = self.value;\n                var $313 = $312;\n                var $311 = $313;\n                break;\n            case 'Array.tie':\n                var $314 = Unit$new;\n                var $311 = $314;\n                break;\n        };\n        return $311;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $316 = self.lft;\n                var $317 = self.rgt;\n                var $318 = Pair$new$($316, $317);\n                var $315 = $318;\n                break;\n            case 'Array.tip':\n                var $319 = Unit$new;\n                var $315 = $319;\n                break;\n        };\n        return $315;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $320 = self.pred;\n                        var $321 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $320);\n                        return $321;\n                    case 'Word.i':\n                        var $322 = self.pred;\n                        var $323 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $322);\n                        return $323;\n                    case 'Word.e':\n                        var $324 = _nil$3;\n                        return $324;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $325 = Word$foldl$((_arr$6 => {\n            var $326 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $326;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $328 = self.fst;\n                    var $329 = self.snd;\n                    var $330 = Array$tie$(_rec$7($328), $329);\n                    var $327 = $330;\n                    break;\n            };\n            return $327;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $332 = self.fst;\n                    var $333 = self.snd;\n                    var $334 = Array$tie$($332, _rec$7($333));\n                    var $331 = $334;\n                    break;\n            };\n            return $331;\n        }), _idx$3)(_arr$5);\n        return $325;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $335 = Array$mut$(_idx$3, (_x$6 => {\n            var $336 = _val$4;\n            return $336;\n        }), _arr$5);\n        return $335;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const VoxBox$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const VoxBox$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n\n    function VoxBox$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'VoxBox.new':\n                var $338 = self.capacity;\n                var $339 = self.buffer;\n                var $340 = VoxBox$new$(_length$1, $338, $339);\n                var $337 = $340;\n                break;\n        };\n        return $337;\n    };\n    const VoxBox$set_length = x0 => x1 => VoxBox$set_length$(x0, x1);\n    const VoxBox$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function VoxBox$Draw$square$(_x$1, _y$2, _z$3, _w$4, _h$5, _col$6, _img$7) {\n        var _siz$8 = ((_w$4 * _h$5) >>> 0);\n        var _w_2$9 = ((_w$4 / 2) >>> 0);\n        var _h_2$10 = ((_h$5 / 2) >>> 0);\n        var $341 = (() => {\n            var $342 = _img$7;\n            var $343 = 0;\n            var $344 = _siz$8;\n            let _pix$12 = $342;\n            for (let _idx$11 = $343; _idx$11 < $344; ++_idx$11) {\n                var _v_x$13 = (_idx$11 % _w$4);\n                var _v_y$14 = ((_idx$11 / _h$5) >>> 0);\n                var _p_x$15 = ((((_x$1 + _v_x$13) >>> 0) - _w_2$9) >>> 0);\n                var _p_y$16 = ((((_y$2 + _v_y$14) >>> 0) - _h_2$10) >>> 0);\n                var _pos$17 = ((0 | _p_x$15 | (_p_y$16 << 12) | (_z$3 << 24)));\n                var _col$18 = _col$6(_v_x$13)(_v_y$14);\n                var _pix$19 = ((_pix$12.buffer[_pix$12.length * 2] = _pos$17, _pix$12.buffer[_pix$12.length * 2 + 1] = _col$18, _pix$12.length++, _pix$12));\n                var $342 = _pix$19;\n                _pix$12 = $342;\n            };\n            return _pix$12;\n        })();\n        return $341;\n    };\n    const VoxBox$Draw$square = x0 => x1 => x2 => x3 => x4 => x5 => x6 => VoxBox$Draw$square$(x0, x1, x2, x3, x4, x5, x6);\n\n    function IO$(_A$1) {\n        var $345 = null;\n        return $345;\n    };\n    const IO = x0 => IO$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $346 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $346;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $348 = self.value;\n                var $349 = _f$4($348);\n                var $347 = $349;\n                break;\n            case 'IO.ask':\n                var $350 = self.query;\n                var $351 = self.param;\n                var $352 = self.then;\n                var $353 = IO$ask$($350, $351, (_x$8 => {\n                    var $354 = IO$bind$($352(_x$8), _f$4);\n                    return $354;\n                }));\n                var $347 = $353;\n                break;\n        };\n        return $347;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $355 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $355;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $356 = _new$2(IO$bind)(IO$end);\n        return $356;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function Dynamic$new$(_value$2) {\n        var $357 = ({\n            _: 'Dynamic.new',\n            'value': _value$2\n        });\n        return $357;\n    };\n    const Dynamic$new = x0 => Dynamic$new$(x0);\n    const App$pass = IO$monad$((_m$bind$1 => _m$pure$2 => {\n        var $358 = _m$pure$2;\n        return $358;\n    }))(Dynamic$new$(Unit$new));\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function App$store$(_value$2) {\n        var $359 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $360 = _m$pure$4;\n            return $360;\n        }))(Dynamic$new$(_value$2));\n        return $359;\n    };\n    const App$store = x0 => App$store$(x0);\n\n    function IO$prompt$(_text$1) {\n        var $361 = IO$ask$(\"get_line\", _text$1, (_line$2 => {\n            var $362 = IO$end$(_line$2);\n            return $362;\n        }));\n        return $361;\n    };\n    const IO$prompt = x0 => IO$prompt$(x0);\n\n    function IO$put_string$(_text$1) {\n        var $363 = IO$ask$(\"put_string\", _text$1, (_skip$2 => {\n            var $364 = IO$end$(Unit$new);\n            return $364;\n        }));\n        return $363;\n    };\n    const IO$put_string = x0 => IO$put_string$(x0);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $365 = (String.fromCharCode(_head$1) + _tail$2);\n        return $365;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function IO$print$(_text$1) {\n        var $366 = IO$put_string$((_text$1 + \"\\u{a}\"));\n        return $366;\n    };\n    const IO$print = x0 => IO$print$(x0);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $367 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $367;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$Demo = (() => {\n        var _vbox$1 = VoxBox$alloc_capacity$(65536);\n        var _init$2 = Pair$new$(128, 128);\n        var _draw$3 = (_state$3 => {\n            var _p_x$4 = Pair$fst$(_state$3);\n            var _p_y$5 = Pair$snd$(_state$3);\n            var _col$6 = (_x$6 => _y$7 => {\n                var $370 = ((0 | 200 | (200 << 8) | (255 << 16) | (255 << 24)));\n                return $370;\n            });\n            var $369 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"Kind Demo App\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"- Press W/A/S/D to move\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"play_game\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"color\", \"blue\"), List$cons$(Pair$new$(\"text-decoration\", \"underline\"), List$nil))), List$cons$(DOM$text$(\"- Click here to play a game\"), List$nil)), List$cons$(DOM$vbox$(Map$from_list$(List$nil), Map$from_list$(List$nil), VoxBox$Draw$square$(_p_x$4, _p_y$5, 128, 16, 16, _col$6, _vbox$1)), List$nil)))));\n            return $369;\n        });\n        var _when$4 = (_event$4 => _state$5 => {\n            var self = _event$4;\n            switch (self._) {\n                case 'App.Event.key_down':\n                    var $372 = self.code;\n                    var self = _state$5;\n                    switch (self._) {\n                        case 'Pair.new':\n                            var $374 = self.fst;\n                            var $375 = self.snd;\n                            var self = ($372 === 65);\n                            if (self) {\n                                var $377 = App$store$(Pair$new$((($374 - 16) >>> 0), $375));\n                                var $376 = $377;\n                            } else {\n                                var self = ($372 === 68);\n                                if (self) {\n                                    var $379 = App$store$(Pair$new$((($374 + 16) >>> 0), $375));\n                                    var $378 = $379;\n                                } else {\n                                    var self = ($372 === 87);\n                                    if (self) {\n                                        var $381 = App$store$(Pair$new$($374, (($375 - 16) >>> 0)));\n                                        var $380 = $381;\n                                    } else {\n                                        var self = ($372 === 83);\n                                        if (self) {\n                                            var $383 = App$store$(Pair$new$($374, (($375 + 16) >>> 0)));\n                                            var $382 = $383;\n                                        } else {\n                                            var $384 = App$pass;\n                                            var $382 = $384;\n                                        };\n                                        var $380 = $382;\n                                    };\n                                    var $378 = $380;\n                                };\n                                var $376 = $378;\n                            };\n                            var $373 = $376;\n                            break;\n                    };\n                    var $371 = $373;\n                    break;\n                case 'App.Event.init':\n                case 'App.Event.tick':\n                case 'App.Event.mouse_down':\n                case 'App.Event.mouse_up':\n                case 'App.Event.key_up':\n                case 'App.Event.post':\n                case 'App.Event.mouse_over':\n                case 'App.Event.mouse_out':\n                case 'App.Event.resize':\n                    var $385 = App$pass;\n                    var $371 = $385;\n                    break;\n                case 'App.Event.mouse_click':\n                    var $386 = IO$monad$((_m$bind$9 => _m$pure$10 => {\n                        var $387 = _m$bind$9;\n                        return $387;\n                    }))(IO$prompt$(\"What is your name?\"))((_line$9 => {\n                        var $388 = IO$monad$((_m$bind$10 => _m$pure$11 => {\n                            var $389 = _m$bind$10;\n                            return $389;\n                        }))(IO$print$((\"You\\'re breath-taking, \" + (_line$9 + \"!\"))))((_$10 => {\n                            var $390 = App$pass;\n                            return $390;\n                        }));\n                        return $388;\n                    }));\n                    var $371 = $386;\n                    break;\n            };\n            return $371;\n        });\n        var $368 = App$new$(_init$2, _draw$3, _when$4);\n        return $368;\n    })();\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Word.bit_length.go': Word$bit_length$go,\n        'Word.bit_length': Word$bit_length,\n        'U32.bit_length': U32$bit_length,\n        'Word.i': Word$i,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Word.shift_left.one.go': Word$shift_left$one$go,\n        'Word.shift_left.one': Word$shift_left$one,\n        'Word.shift_left': Word$shift_left,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'Word.mul.go': Word$mul$go,\n        'Word.to_zero': Word$to_zero,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Nat.apply': Nat$apply,\n        'Word.inc': Word$inc,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u32': Nat$to_u32,\n        'VoxBox.new': VoxBox$new,\n        'VoxBox.alloc_capacity': VoxBox$alloc_capacity,\n        'Pair.new': Pair$new,\n        'Pair.fst': Pair$fst,\n        'Pair.snd': Pair$snd,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'Word.fold': Word$fold,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Word.to_nat': Word$to_nat,\n        'Word.shl': Word$shl,\n        'U32.shl': U32$shl,\n        'Col32.new': Col32$new,\n        'DOM.node': DOM$node,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.nil': List$nil,\n        'Pair': Pair,\n        'List.cons': List$cons,\n        'DOM.text': DOM$text,\n        'DOM.vbox': DOM$vbox,\n        'Nat.ltn': Nat$ltn,\n        'Nat.sub': Nat$sub,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.gte': Word$gte,\n        'Word.shift_right.one.go': Word$shift_right$one$go,\n        'Word.shift_right.one': Word$shift_right$one,\n        'Word.shift_right': Word$shift_right,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'Word.div.go': Word$div$go,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Word.eql': Word$eql,\n        'U32.eql': U32$eql,\n        'U32.inc': U32$inc,\n        'U32.for': U32$for,\n        'Word.mod': Word$mod,\n        'U32.mod': U32$mod,\n        'U32.sub': U32$sub,\n        'U32.add': U32$add,\n        'Pos32.new': Pos32$new,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'VoxBox.set_pos': VoxBox$set_pos,\n        'VoxBox.set_col': VoxBox$set_col,\n        'VoxBox.set_length': VoxBox$set_length,\n        'VoxBox.push': VoxBox$push,\n        'VoxBox.Draw.square': VoxBox$Draw$square,\n        'IO': IO,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'Dynamic.new': Dynamic$new,\n        'App.pass': App$pass,\n        'U16.eql': U16$eql,\n        'App.store': App$store,\n        'IO.prompt': IO$prompt,\n        'IO.put_string': IO$put_string,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'IO.print': IO$print,\n        'App.new': App$new,\n        'Web.Demo': Web$Demo,\n    };\n})();"],"sourceRoot":""}