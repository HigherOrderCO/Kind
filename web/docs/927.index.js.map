{"version":3,"sources":["webpack://kind-web/./src/apps/Web.Kaelin.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA,0CAA0C,cAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,cAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjfile":"927.index.js","sourcesContent":["module.exports = (function() {\n    function int_pos(i) {\n        return i >= 0n ? i : 0n;\n    };\n\n    function int_neg(i) {\n        return i < 0n ? -i : 0n;\n    };\n\n    function word_to_u8(w) {\n        var u = 0;\n        for (var i = 0; i < 8; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u8_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 8; ++i) {\n            w = {\n                _: (u >>> (8 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_i32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function i32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function i32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n    var f64 = new Float64Array(1);\n    var u32 = new Uint32Array(f64.buffer);\n\n    function f64_get_bit(x, i) {\n        f64[0] = x;\n        if (i < 32) {\n            return (u32[0] >>> i) & 1;\n        } else {\n            return (u32[1] >>> (i - 32)) & 1;\n        }\n    };\n\n    function f64_set_bit(x, i) {\n        f64[0] = x;\n        if (i < 32) {\n            u32[0] = u32[0] | (1 << i);\n        } else {\n            u32[1] = u32[1] | (1 << (i - 32));\n        }\n        return f64[0];\n    };\n\n    function word_to_f64(w) {\n        var x = 0;\n        for (var i = 0; i < 64; ++i) {\n            x = w._ === 'Word.i' ? f64_set_bit(x, i) : x;\n            w = w.pred;\n        };\n        return x;\n    };\n\n    function f64_to_word(x) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 64; ++i) {\n            w = {\n                _: f64_get_bit(x, 64 - i - 1) ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function f64_make(s, a, b) {\n        return (s ? 1 : -1) * Number(a) / 10 ** Number(b);\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    var nat_to_bits = n => {\n        return n === 0n ? '' : n.toString(2);\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_int = x => x(x0 => x1 => x0 - x1);\n    const elim_int = (x => {\n        var $12 = (() => c0 => {\n            var self = x;\n            switch (\"new\") {\n                case 'new':\n                    var $9 = int_pos(self);\n                    var $10 = int_neg(self);\n                    var $11 = c0($9)($10);\n                    return $11;\n            };\n        })();\n        return $12;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $18 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $13 = self.slice(0, -1);\n                    var $14 = c1($13);\n                    return $14;\n                case 'i':\n                    var $15 = self.slice(0, -1);\n                    var $16 = c2($15);\n                    return $16;\n                case 'e':\n                    var $17 = c0;\n                    return $17;\n            };\n        })();\n        return $18;\n    });\n    const inst_u8 = x => x(x0 => word_to_u8(x0));\n    const elim_u8 = (x => {\n        var $21 = (() => c0 => {\n            var self = x;\n            switch ('u8') {\n                case 'u8':\n                    var $19 = u8_to_word(self);\n                    var $20 = c0($19);\n                    return $20;\n            };\n        })();\n        return $21;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $24 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $22 = u16_to_word(self);\n                    var $23 = c0($22);\n                    return $23;\n            };\n        })();\n        return $24;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $27 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $25 = u32_to_word(self);\n                    var $26 = c0($25);\n                    return $26;\n            };\n        })();\n        return $27;\n    });\n    const inst_i32 = x => x(x0 => word_to_i32(x0));\n    const elim_i32 = (x => {\n        var $30 = (() => c0 => {\n            var self = x;\n            switch ('i32') {\n                case 'i32':\n                    var $28 = i32_to_word(self);\n                    var $29 = c0($28);\n                    return $29;\n            };\n        })();\n        return $30;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $33 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $31 = u64_to_word(self);\n                    var $32 = c0($31);\n                    return $32;\n            };\n        })();\n        return $33;\n    });\n    const inst_f64 = x => x(x0 => word_to_f64(x0));\n    const elim_f64 = (x => {\n        var $36 = (() => c0 => {\n            var self = x;\n            switch ('f64') {\n                case 'f64':\n                    var $34 = f64_to_word(self);\n                    var $35 = c0($34);\n                    return $35;\n            };\n        })();\n        return $36;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $41 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $37 = c0;\n                return $37;\n            } else {\n                var $38 = self.charCodeAt(0);\n                var $39 = self.slice(1);\n                var $40 = c1($38)($39);\n                return $40;\n            };\n        })();\n        return $41;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $45 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $42 = buffer32_to_depth(self);\n                    var $43 = buffer32_to_u32array(self);\n                    var $44 = c0($42)($43);\n                    return $44;\n            };\n        })();\n        return $45;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $46 = u32array_to_buffer32(_array$2);\n        return $46;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $47 = null;\n        return $47;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $48 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $48;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $49 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $49;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $51 = Array$tip$(_x$3);\n            var $50 = $51;\n        } else {\n            var $52 = (self - 1n);\n            var _half$5 = Array$alloc$($52, _x$3);\n            var $53 = Array$tie$(_half$5, _half$5);\n            var $50 = $53;\n        };\n        return $50;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $54 = word_to_u32(_value$1);\n        return $54;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $55 = null;\n        return $55;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $56 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $56;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $58 = Word$e;\n            var $57 = $58;\n        } else {\n            var $59 = (self - 1n);\n            var $60 = Word$o$(Word$zero$($59));\n            var $57 = $60;\n        };\n        return $57;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $61 = 1n + _pred$1;\n        return $61;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$zero = U32$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))))))))))))))))))));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n\n    function Word$bit_length$go$(_word$2, _c$3, _n$4) {\n        var Word$bit_length$go$ = (_word$2, _c$3, _n$4) => ({\n            ctr: 'TCO',\n            arg: [_word$2, _c$3, _n$4]\n        });\n        var Word$bit_length$go = _word$2 => _c$3 => _n$4 => Word$bit_length$go$(_word$2, _c$3, _n$4);\n        var arg = [_word$2, _c$3, _n$4];\n        while (true) {\n            let [_word$2, _c$3, _n$4] = arg;\n            var R = (() => {\n                var self = _word$2;\n                switch (self._) {\n                    case 'Word.o':\n                        var $62 = self.pred;\n                        var $63 = Word$bit_length$go$($62, Nat$succ$(_c$3), _n$4);\n                        return $63;\n                    case 'Word.i':\n                        var $64 = self.pred;\n                        var $65 = Word$bit_length$go$($64, Nat$succ$(_c$3), Nat$succ$(_c$3));\n                        return $65;\n                    case 'Word.e':\n                        var $66 = _n$4;\n                        return $66;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$bit_length$go = x0 => x1 => x2 => Word$bit_length$go$(x0, x1, x2);\n\n    function Word$bit_length$(_word$2) {\n        var $67 = Word$bit_length$go$(_word$2, 0n, 0n);\n        return $67;\n    };\n    const Word$bit_length = x0 => Word$bit_length$(x0);\n\n    function U32$bit_length$(_size$1) {\n        var self = _size$1;\n        switch ('u32') {\n            case 'u32':\n                var $69 = u32_to_word(self);\n                var $70 = Word$bit_length$($69);\n                var $68 = $70;\n                break;\n        };\n        return $68;\n    };\n    const U32$bit_length = x0 => U32$bit_length$(x0);\n\n    function Word$i$(_pred$2) {\n        var $71 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $71;\n    };\n    const Word$i = x0 => Word$i$(x0);\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Word$shift_left1$aux$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $73 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $75 = Word$i$(Word$shift_left1$aux$($73, Bool$false));\n                    var $74 = $75;\n                } else {\n                    var $76 = Word$o$(Word$shift_left1$aux$($73, Bool$false));\n                    var $74 = $76;\n                };\n                var $72 = $74;\n                break;\n            case 'Word.i':\n                var $77 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $79 = Word$i$(Word$shift_left1$aux$($77, Bool$true));\n                    var $78 = $79;\n                } else {\n                    var $80 = Word$o$(Word$shift_left1$aux$($77, Bool$true));\n                    var $78 = $80;\n                };\n                var $72 = $78;\n                break;\n            case 'Word.e':\n                var $81 = Word$e;\n                var $72 = $81;\n                break;\n        };\n        return $72;\n    };\n    const Word$shift_left1$aux = x0 => x1 => Word$shift_left1$aux$(x0, x1);\n\n    function Word$shift_left1$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $83 = self.pred;\n                var $84 = Word$o$(Word$shift_left1$aux$($83, Bool$false));\n                var $82 = $84;\n                break;\n            case 'Word.i':\n                var $85 = self.pred;\n                var $86 = Word$o$(Word$shift_left1$aux$($85, Bool$true));\n                var $82 = $86;\n                break;\n            case 'Word.e':\n                var $87 = Word$e;\n                var $82 = $87;\n                break;\n        };\n        return $82;\n    };\n    const Word$shift_left1 = x0 => Word$shift_left1$(x0);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $89 = self.pred;\n                var $90 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $92 = self.pred;\n                            var $93 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $95 = Word$i$(Word$adder$(_a$pred$10, $92, Bool$false));\n                                    var $94 = $95;\n                                } else {\n                                    var $96 = Word$o$(Word$adder$(_a$pred$10, $92, Bool$false));\n                                    var $94 = $96;\n                                };\n                                return $94;\n                            });\n                            var $91 = $93;\n                            break;\n                        case 'Word.i':\n                            var $97 = self.pred;\n                            var $98 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $100 = Word$o$(Word$adder$(_a$pred$10, $97, Bool$true));\n                                    var $99 = $100;\n                                } else {\n                                    var $101 = Word$i$(Word$adder$(_a$pred$10, $97, Bool$false));\n                                    var $99 = $101;\n                                };\n                                return $99;\n                            });\n                            var $91 = $98;\n                            break;\n                        case 'Word.e':\n                            var $102 = (_a$pred$8 => {\n                                var $103 = Word$e;\n                                return $103;\n                            });\n                            var $91 = $102;\n                            break;\n                    };\n                    var $91 = $91($89);\n                    return $91;\n                });\n                var $88 = $90;\n                break;\n            case 'Word.i':\n                var $104 = self.pred;\n                var $105 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $107 = self.pred;\n                            var $108 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $110 = Word$o$(Word$adder$(_a$pred$10, $107, Bool$true));\n                                    var $109 = $110;\n                                } else {\n                                    var $111 = Word$i$(Word$adder$(_a$pred$10, $107, Bool$false));\n                                    var $109 = $111;\n                                };\n                                return $109;\n                            });\n                            var $106 = $108;\n                            break;\n                        case 'Word.i':\n                            var $112 = self.pred;\n                            var $113 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $115 = Word$i$(Word$adder$(_a$pred$10, $112, Bool$true));\n                                    var $114 = $115;\n                                } else {\n                                    var $116 = Word$o$(Word$adder$(_a$pred$10, $112, Bool$true));\n                                    var $114 = $116;\n                                };\n                                return $114;\n                            });\n                            var $106 = $113;\n                            break;\n                        case 'Word.e':\n                            var $117 = (_a$pred$8 => {\n                                var $118 = Word$e;\n                                return $118;\n                            });\n                            var $106 = $117;\n                            break;\n                    };\n                    var $106 = $106($104);\n                    return $106;\n                });\n                var $88 = $105;\n                break;\n            case 'Word.e':\n                var $119 = (_b$5 => {\n                    var $120 = Word$e;\n                    return $120;\n                });\n                var $88 = $119;\n                break;\n        };\n        var $88 = $88(_b$3);\n        return $88;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $121 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $121;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $122 = self.pred;\n                        var $123 = Word$mul$go$($122, Word$shift_left1$(_b$4), _acc$5);\n                        return $123;\n                    case 'Word.i':\n                        var $124 = self.pred;\n                        var $125 = Word$mul$go$($124, Word$shift_left1$(_b$4), Word$add$(_b$4, _acc$5));\n                        return $125;\n                    case 'Word.e':\n                        var $126 = _acc$5;\n                        return $126;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$to_zero$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $128 = self.pred;\n                var $129 = Word$o$(Word$to_zero$($128));\n                var $127 = $129;\n                break;\n            case 'Word.i':\n                var $130 = self.pred;\n                var $131 = Word$o$(Word$to_zero$($130));\n                var $127 = $131;\n                break;\n            case 'Word.e':\n                var $132 = Word$e;\n                var $127 = $132;\n                break;\n        };\n        return $127;\n    };\n    const Word$to_zero = x0 => Word$to_zero$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var $133 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));\n        return $133;\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $134 = _x$4;\n                    return $134;\n                } else {\n                    var $135 = (self - 1n);\n                    var $136 = Nat$apply$($135, _f$3, _f$3(_x$4));\n                    return $136;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $138 = self.pred;\n                var $139 = Word$i$($138);\n                var $137 = $139;\n                break;\n            case 'Word.i':\n                var $140 = self.pred;\n                var $141 = Word$o$(Word$inc$($140));\n                var $137 = $141;\n                break;\n            case 'Word.e':\n                var $142 = Word$e;\n                var $137 = $142;\n                break;\n        };\n        return $137;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $143 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $143;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n\n    function VoxBox$new$(_length$1, _capacity$2, _buffer$3) {\n        var $144 = ({\n            _: 'VoxBox.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $144;\n    };\n    const VoxBox$new = x0 => x1 => x2 => VoxBox$new$(x0, x1, x2);\n\n    function VoxBox$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$bit_length$(((2 * _capacity$1) >>> 0)))));\n        var $145 = VoxBox$new$(0, _capacity$1, _buffer$2);\n        return $145;\n    };\n    const VoxBox$alloc_capacity = x0 => VoxBox$alloc_capacity$(x0);\n    const Web$Kaelin$Constants$room = \"0x215512345291\";\n\n    function BitsMap$(_A$1) {\n        var $146 = null;\n        return $146;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $147 = null;\n        return $147;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $148 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $148;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $149 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $149;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $151 = self.pred;\n                var $152 = (Word$to_bits$($151) + '0');\n                var $150 = $152;\n                break;\n            case 'Word.i':\n                var $153 = self.pred;\n                var $154 = (Word$to_bits$($153) + '1');\n                var $150 = $154;\n                break;\n            case 'Word.e':\n                var $155 = Bits$e;\n                var $150 = $155;\n                break;\n        };\n        return $150;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $157 = Bits$e;\n            var $156 = $157;\n        } else {\n            var $158 = self.charCodeAt(0);\n            var $159 = self.slice(1);\n            var $160 = (String$to_bits$($159) + (u16_to_bits($158)));\n            var $156 = $160;\n        };\n        return $156;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $162 = self.head;\n                var $163 = self.tail;\n                var self = $162;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $165 = self.fst;\n                        var $166 = self.snd;\n                        var $167 = (bitsmap_set(String$to_bits$($165), $166, Map$from_list$($163), 'set'));\n                        var $164 = $167;\n                        break;\n                };\n                var $161 = $164;\n                break;\n            case 'List.nil':\n                var $168 = BitsMap$new;\n                var $161 = $168;\n                break;\n        };\n        return $161;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$(_A$1, _B$2) {\n        var $169 = null;\n        return $169;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Web$Kaelin$CastInfo$new$(_mouse_pos$1, _hero_pos$2, _range$3, _hex_effect$4) {\n        var $170 = ({\n            _: 'Web.Kaelin.CastInfo.new',\n            'mouse_pos': _mouse_pos$1,\n            'hero_pos': _hero_pos$2,\n            'range': _range$3,\n            'hex_effect': _hex_effect$4\n        });\n        return $170;\n    };\n    const Web$Kaelin$CastInfo$new = x0 => x1 => x2 => x3 => Web$Kaelin$CastInfo$new$(x0, x1, x2, x3);\n\n    function Web$Kaelin$Coord$new$(_i$1, _j$2) {\n        var $171 = ({\n            _: 'Web.Kaelin.Coord.new',\n            'i': _i$1,\n            'j': _j$2\n        });\n        return $171;\n    };\n    const Web$Kaelin$Coord$new = x0 => x1 => Web$Kaelin$Coord$new$(x0, x1);\n\n    function I32$new$(_value$1) {\n        var $172 = word_to_i32(_value$1);\n        return $172;\n    };\n    const I32$new = x0 => I32$new$(x0);\n\n    function Word$neg$aux$(_word$2, _inc$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $174 = self.pred;\n                var self = _inc$3;\n                if (self) {\n                    var $176 = Word$o$(Word$neg$aux$($174, Bool$true));\n                    var $175 = $176;\n                } else {\n                    var $177 = Word$i$(Word$neg$aux$($174, Bool$false));\n                    var $175 = $177;\n                };\n                var $173 = $175;\n                break;\n            case 'Word.i':\n                var $178 = self.pred;\n                var self = _inc$3;\n                if (self) {\n                    var $180 = Word$i$(Word$neg$aux$($178, Bool$false));\n                    var $179 = $180;\n                } else {\n                    var $181 = Word$o$(Word$neg$aux$($178, Bool$false));\n                    var $179 = $181;\n                };\n                var $173 = $179;\n                break;\n            case 'Word.e':\n                var $182 = Word$e;\n                var $173 = $182;\n                break;\n        };\n        return $173;\n    };\n    const Word$neg$aux = x0 => x1 => Word$neg$aux$(x0, x1);\n\n    function Word$neg$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $184 = self.pred;\n                var $185 = Word$o$(Word$neg$aux$($184, Bool$true));\n                var $183 = $185;\n                break;\n            case 'Word.i':\n                var $186 = self.pred;\n                var $187 = Word$i$(Word$neg$aux$($186, Bool$false));\n                var $183 = $187;\n                break;\n            case 'Word.e':\n                var $188 = Word$e;\n                var $183 = $188;\n                break;\n        };\n        return $183;\n    };\n    const Word$neg = x0 => Word$neg$(x0);\n    const I32$neg = a0 => ((-a0));\n\n    function Int$to_i32$(_a$1) {\n        var self = _a$1;\n        switch (\"new\") {\n            case 'new':\n                var $190 = int_pos(self);\n                var $191 = int_neg(self);\n                var self = $191;\n                if (self === 0n) {\n                    var $193 = I32$new$(Nat$to_word$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero)))))))))))))))))))))))))))))))), $190));\n                    var $192 = $193;\n                } else {\n                    var $194 = (self - 1n);\n                    var $195 = ((-I32$new$(Nat$to_word$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero)))))))))))))))))))))))))))))))), $191))));\n                    var $192 = $195;\n                };\n                var $189 = $192;\n                break;\n        };\n        return $189;\n    };\n    const Int$to_i32 = x0 => Int$to_i32$(x0);\n    const Int$new = a0 => a1 => (a0 - a1);\n\n    function Int$from_nat$(_n$1) {\n        var $196 = (_n$1 - 0n);\n        return $196;\n    };\n    const Int$from_nat = x0 => Int$from_nat$(x0);\n    const Web$Kaelin$HexEffect$normal = ({\n        _: 'Web.Kaelin.HexEffect.normal'\n    });\n\n    function Web$Kaelin$Entity$creature$(_player$1, _hero$2) {\n        var $197 = ({\n            _: 'Web.Kaelin.Entity.creature',\n            'player': _player$1,\n            'hero': _hero$2\n        });\n        return $197;\n    };\n    const Web$Kaelin$Entity$creature = x0 => x1 => Web$Kaelin$Entity$creature$(x0, x1);\n\n    function Web$Kaelin$Hero$new$(_id$1, _img$2) {\n        var $198 = ({\n            _: 'Web.Kaelin.Hero.new',\n            'id': _id$1,\n            'img': _img$2\n        });\n        return $198;\n    };\n    const Web$Kaelin$Hero$new = x0 => x1 => Web$Kaelin$Hero$new$(x0, x1);\n\n    function U8$new$(_value$1) {\n        var $199 = word_to_u8(_value$1);\n        return $199;\n    };\n    const U8$new = x0 => U8$new$(x0);\n    const Nat$to_u8 = a0 => (Number(a0) & 0xFF);\n    const Nat$ltn = a0 => a1 => (a0 < a1);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function Word$shift_left$(_n$2, _value$3) {\n        var Word$shift_left$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_left = _n$2 => _value$3 => Word$shift_left$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $200 = _value$3;\n                    return $200;\n                } else {\n                    var $201 = (self - 1n);\n                    var $202 = Word$shift_left$($201, Word$shift_left1$(_value$3));\n                    return $202;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_left = x0 => x1 => Word$shift_left$(x0, x1);\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $204 = Bool$false;\n                var $203 = $204;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $205 = Bool$true;\n                var $203 = $205;\n                break;\n        };\n        return $203;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $207 = self.pred;\n                var $208 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $210 = self.pred;\n                            var $211 = (_a$pred$10 => {\n                                var $212 = Word$cmp$go$(_a$pred$10, $210, _c$4);\n                                return $212;\n                            });\n                            var $209 = $211;\n                            break;\n                        case 'Word.i':\n                            var $213 = self.pred;\n                            var $214 = (_a$pred$10 => {\n                                var $215 = Word$cmp$go$(_a$pred$10, $213, Cmp$ltn);\n                                return $215;\n                            });\n                            var $209 = $214;\n                            break;\n                        case 'Word.e':\n                            var $216 = (_a$pred$8 => {\n                                var $217 = _c$4;\n                                return $217;\n                            });\n                            var $209 = $216;\n                            break;\n                    };\n                    var $209 = $209($207);\n                    return $209;\n                });\n                var $206 = $208;\n                break;\n            case 'Word.i':\n                var $218 = self.pred;\n                var $219 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $221 = self.pred;\n                            var $222 = (_a$pred$10 => {\n                                var $223 = Word$cmp$go$(_a$pred$10, $221, Cmp$gtn);\n                                return $223;\n                            });\n                            var $220 = $222;\n                            break;\n                        case 'Word.i':\n                            var $224 = self.pred;\n                            var $225 = (_a$pred$10 => {\n                                var $226 = Word$cmp$go$(_a$pred$10, $224, _c$4);\n                                return $226;\n                            });\n                            var $220 = $225;\n                            break;\n                        case 'Word.e':\n                            var $227 = (_a$pred$8 => {\n                                var $228 = _c$4;\n                                return $228;\n                            });\n                            var $220 = $227;\n                            break;\n                    };\n                    var $220 = $220($218);\n                    return $220;\n                });\n                var $206 = $219;\n                break;\n            case 'Word.e':\n                var $229 = (_b$5 => {\n                    var $230 = _c$4;\n                    return $230;\n                });\n                var $206 = $229;\n                break;\n        };\n        var $206 = $206(_b$3);\n        return $206;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $231 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $231;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $232 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $232;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $233 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $233;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Word$or$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $235 = self.pred;\n                var $236 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $238 = self.pred;\n                            var $239 = (_a$pred$9 => {\n                                var $240 = Word$o$(Word$or$(_a$pred$9, $238));\n                                return $240;\n                            });\n                            var $237 = $239;\n                            break;\n                        case 'Word.i':\n                            var $241 = self.pred;\n                            var $242 = (_a$pred$9 => {\n                                var $243 = Word$i$(Word$or$(_a$pred$9, $241));\n                                return $243;\n                            });\n                            var $237 = $242;\n                            break;\n                        case 'Word.e':\n                            var $244 = (_a$pred$7 => {\n                                var $245 = Word$e;\n                                return $245;\n                            });\n                            var $237 = $244;\n                            break;\n                    };\n                    var $237 = $237($235);\n                    return $237;\n                });\n                var $234 = $236;\n                break;\n            case 'Word.i':\n                var $246 = self.pred;\n                var $247 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $249 = self.pred;\n                            var $250 = (_a$pred$9 => {\n                                var $251 = Word$i$(Word$or$(_a$pred$9, $249));\n                                return $251;\n                            });\n                            var $248 = $250;\n                            break;\n                        case 'Word.i':\n                            var $252 = self.pred;\n                            var $253 = (_a$pred$9 => {\n                                var $254 = Word$i$(Word$or$(_a$pred$9, $252));\n                                return $254;\n                            });\n                            var $248 = $253;\n                            break;\n                        case 'Word.e':\n                            var $255 = (_a$pred$7 => {\n                                var $256 = Word$e;\n                                return $256;\n                            });\n                            var $248 = $255;\n                            break;\n                    };\n                    var $248 = $248($246);\n                    return $248;\n                });\n                var $234 = $247;\n                break;\n            case 'Word.e':\n                var $257 = (_b$4 => {\n                    var $258 = Word$e;\n                    return $258;\n                });\n                var $234 = $257;\n                break;\n        };\n        var $234 = $234(_b$3);\n        return $234;\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n\n    function Word$shift_right1$aux$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $260 = self.pred;\n                var $261 = Word$o$(Word$shift_right1$aux$($260));\n                var $259 = $261;\n                break;\n            case 'Word.i':\n                var $262 = self.pred;\n                var $263 = Word$i$(Word$shift_right1$aux$($262));\n                var $259 = $263;\n                break;\n            case 'Word.e':\n                var $264 = Word$o$(Word$e);\n                var $259 = $264;\n                break;\n        };\n        return $259;\n    };\n    const Word$shift_right1$aux = x0 => Word$shift_right1$aux$(x0);\n\n    function Word$shift_right1$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $266 = self.pred;\n                var $267 = Word$shift_right1$aux$($266);\n                var $265 = $267;\n                break;\n            case 'Word.i':\n                var $268 = self.pred;\n                var $269 = Word$shift_right1$aux$($268);\n                var $265 = $269;\n                break;\n            case 'Word.e':\n                var $270 = Word$e;\n                var $265 = $270;\n                break;\n        };\n        return $265;\n    };\n    const Word$shift_right1 = x0 => Word$shift_right1$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $272 = self.pred;\n                var $273 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $275 = self.pred;\n                            var $276 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $278 = Word$i$(Word$subber$(_a$pred$10, $275, Bool$true));\n                                    var $277 = $278;\n                                } else {\n                                    var $279 = Word$o$(Word$subber$(_a$pred$10, $275, Bool$false));\n                                    var $277 = $279;\n                                };\n                                return $277;\n                            });\n                            var $274 = $276;\n                            break;\n                        case 'Word.i':\n                            var $280 = self.pred;\n                            var $281 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $283 = Word$o$(Word$subber$(_a$pred$10, $280, Bool$true));\n                                    var $282 = $283;\n                                } else {\n                                    var $284 = Word$i$(Word$subber$(_a$pred$10, $280, Bool$true));\n                                    var $282 = $284;\n                                };\n                                return $282;\n                            });\n                            var $274 = $281;\n                            break;\n                        case 'Word.e':\n                            var $285 = (_a$pred$8 => {\n                                var $286 = Word$e;\n                                return $286;\n                            });\n                            var $274 = $285;\n                            break;\n                    };\n                    var $274 = $274($272);\n                    return $274;\n                });\n                var $271 = $273;\n                break;\n            case 'Word.i':\n                var $287 = self.pred;\n                var $288 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $290 = self.pred;\n                            var $291 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $293 = Word$o$(Word$subber$(_a$pred$10, $290, Bool$false));\n                                    var $292 = $293;\n                                } else {\n                                    var $294 = Word$i$(Word$subber$(_a$pred$10, $290, Bool$false));\n                                    var $292 = $294;\n                                };\n                                return $292;\n                            });\n                            var $289 = $291;\n                            break;\n                        case 'Word.i':\n                            var $295 = self.pred;\n                            var $296 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $298 = Word$i$(Word$subber$(_a$pred$10, $295, Bool$true));\n                                    var $297 = $298;\n                                } else {\n                                    var $299 = Word$o$(Word$subber$(_a$pred$10, $295, Bool$false));\n                                    var $297 = $299;\n                                };\n                                return $297;\n                            });\n                            var $289 = $296;\n                            break;\n                        case 'Word.e':\n                            var $300 = (_a$pred$8 => {\n                                var $301 = Word$e;\n                                return $301;\n                            });\n                            var $289 = $300;\n                            break;\n                    };\n                    var $289 = $289($287);\n                    return $289;\n                });\n                var $271 = $288;\n                break;\n            case 'Word.e':\n                var $302 = (_b$5 => {\n                    var $303 = Word$e;\n                    return $303;\n                });\n                var $271 = $302;\n                break;\n        };\n        var $271 = $271(_b$3);\n        return $271;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $304 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $304;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n\n    function Word$div$go$(_shift$2, _sub_copy$3, _shift_copy$4, _value$5) {\n        var Word$div$go$ = (_shift$2, _sub_copy$3, _shift_copy$4, _value$5) => ({\n            ctr: 'TCO',\n            arg: [_shift$2, _sub_copy$3, _shift_copy$4, _value$5]\n        });\n        var Word$div$go = _shift$2 => _sub_copy$3 => _shift_copy$4 => _value$5 => Word$div$go$(_shift$2, _sub_copy$3, _shift_copy$4, _value$5);\n        var arg = [_shift$2, _sub_copy$3, _shift_copy$4, _value$5];\n        while (true) {\n            let [_shift$2, _sub_copy$3, _shift_copy$4, _value$5] = arg;\n            var R = (() => {\n                var self = Word$gte$(_sub_copy$3, _shift_copy$4);\n                if (self) {\n                    var _mask$6 = Word$shift_left$(_shift$2, Word$inc$(Word$to_zero$(_sub_copy$3)));\n                    var $305 = Pair$new$(Bool$true, Word$or$(_value$5, _mask$6));\n                    var self = $305;\n                } else {\n                    var $306 = Pair$new$(Bool$false, _value$5);\n                    var self = $306;\n                };\n                switch (self._) {\n                    case 'Pair.new':\n                        var $307 = self.fst;\n                        var $308 = self.snd;\n                        var self = _shift$2;\n                        if (self === 0n) {\n                            var $310 = $308;\n                            var $309 = $310;\n                        } else {\n                            var $311 = (self - 1n);\n                            var _new_shift_copy$9 = Word$shift_right1$(_shift_copy$4);\n                            var self = $307;\n                            if (self) {\n                                var $313 = Word$div$go$($311, Word$sub$(_sub_copy$3, _shift_copy$4), _new_shift_copy$9, $308);\n                                var $312 = $313;\n                            } else {\n                                var $314 = Word$div$go$($311, _sub_copy$3, _new_shift_copy$9, $308);\n                                var $312 = $314;\n                            };\n                            var $309 = $312;\n                        };\n                        return $309;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div$go = x0 => x1 => x2 => x3 => Word$div$go$(x0, x1, x2, x3);\n\n    function Word$div$(_a$2, _b$3) {\n        var _a_bits$4 = Word$bit_length$(_a$2);\n        var _b_bits$5 = Word$bit_length$(_b$3);\n        var self = (_a_bits$4 < _b_bits$5);\n        if (self) {\n            var $316 = Word$to_zero$(_a$2);\n            var $315 = $316;\n        } else {\n            var _shift$6 = (_a_bits$4 - _b_bits$5 <= 0n ? 0n : _a_bits$4 - _b_bits$5);\n            var _shift_copy$7 = Word$shift_left$(_shift$6, _b$3);\n            var $317 = Word$div$go$(_shift$6, _a$2, _shift_copy$7, Word$to_zero$(_a$2));\n            var $315 = $317;\n        };\n        return $315;\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n    const U32$length = a0 => ((a0.length) >>> 0);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $319 = Bool$false;\n                var $318 = $319;\n                break;\n            case 'Cmp.eql':\n                var $320 = Bool$true;\n                var $318 = $320;\n                break;\n        };\n        return $318;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $321 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $321;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U32$eql = a0 => a1 => (a0 === a1);\n    const U32$inc = a0 => ((a0 + 1) >>> 0);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n\n    function Word$slice$(_a$2, _b$3, _str$4) {\n        var Word$slice$ = (_a$2, _b$3, _str$4) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3, _str$4]\n        });\n        var Word$slice = _a$2 => _b$3 => _str$4 => Word$slice$(_a$2, _b$3, _str$4);\n        var arg = [_a$2, _b$3, _str$4];\n        while (true) {\n            let [_a$2, _b$3, _str$4] = arg;\n            var R = Word$slice$(_a$2, _b$3, _str$4);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$slice = x0 => x1 => x2 => Word$slice$(x0, x1, x2);\n    const U32$slice = a0 => a1 => a2 => (a2.slice(a0, a1));\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n    const U32$read_base = a0 => a1 => (parseInt(a1, a0));\n\n    function VoxBox$parse_byte$(_idx$1, _voxdata$2) {\n        var _chr$3 = (_voxdata$2.slice(((_idx$1 * 2) >>> 0), ((((_idx$1 * 2) >>> 0) + 2) >>> 0)));\n        var $322 = (parseInt(_chr$3, 16));\n        return $322;\n    };\n    const VoxBox$parse_byte = x0 => x1 => VoxBox$parse_byte$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n    const U32$shl = a0 => a1 => ((a0 << a1) >>> 0);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $324 = Word$e;\n            var $323 = $324;\n        } else {\n            var $325 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $327 = self.pred;\n                    var $328 = Word$o$(Word$trim$($325, $327));\n                    var $326 = $328;\n                    break;\n                case 'Word.i':\n                    var $329 = self.pred;\n                    var $330 = Word$i$(Word$trim$($325, $329));\n                    var $326 = $330;\n                    break;\n                case 'Word.e':\n                    var $331 = Word$o$(Word$trim$($325, Word$e));\n                    var $326 = $331;\n                    break;\n            };\n            var $323 = $326;\n        };\n        return $323;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = null;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $333 = self.value;\n                var $334 = $333;\n                var $332 = $334;\n                break;\n            case 'Array.tie':\n                var $335 = Unit$new;\n                var $332 = $335;\n                break;\n        };\n        return $332;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $337 = self.lft;\n                var $338 = self.rgt;\n                var $339 = Pair$new$($337, $338);\n                var $336 = $339;\n                break;\n            case 'Array.tip':\n                var $340 = Unit$new;\n                var $336 = $340;\n                break;\n        };\n        return $336;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $341 = self.pred;\n                        var $342 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $341);\n                        return $342;\n                    case 'Word.i':\n                        var $343 = self.pred;\n                        var $344 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $343);\n                        return $344;\n                    case 'Word.e':\n                        var $345 = _nil$3;\n                        return $345;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $346 = Word$foldl$((_arr$6 => {\n            var $347 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $347;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $349 = self.fst;\n                    var $350 = self.snd;\n                    var $351 = Array$tie$(_rec$7($349), $350);\n                    var $348 = $351;\n                    break;\n            };\n            return $348;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $353 = self.fst;\n                    var $354 = self.snd;\n                    var $355 = Array$tie$($353, _rec$7($354));\n                    var $352 = $355;\n                    break;\n            };\n            return $352;\n        }), _idx$3)(_arr$5);\n        return $346;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $356 = Array$mut$(_idx$3, (_x$6 => {\n            var $357 = _val$4;\n            return $357;\n        }), _arr$5);\n        return $356;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const VoxBox$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const VoxBox$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n\n    function VoxBox$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'VoxBox.new':\n                var $359 = self.capacity;\n                var $360 = self.buffer;\n                var $361 = VoxBox$new$(_length$1, $359, $360);\n                var $358 = $361;\n                break;\n        };\n        return $358;\n    };\n    const VoxBox$set_length = x0 => x1 => VoxBox$set_length$(x0, x1);\n    const VoxBox$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function VoxBox$parse$(_voxdata$1) {\n        var _siz$2 = ((((_voxdata$1.length) >>> 0) / 12) >>> 0);\n        var _img$3 = VoxBox$alloc_capacity$(_siz$2);\n        var _img$4 = (() => {\n            var $363 = _img$3;\n            var $364 = 0;\n            var $365 = _siz$2;\n            let _img$5 = $363;\n            for (let _i$4 = $364; _i$4 < $365; ++_i$4) {\n                var _x$6 = VoxBox$parse_byte$(((((_i$4 * 6) >>> 0) + 0) >>> 0), _voxdata$1);\n                var _y$7 = VoxBox$parse_byte$(((((_i$4 * 6) >>> 0) + 1) >>> 0), _voxdata$1);\n                var _z$8 = VoxBox$parse_byte$(((((_i$4 * 6) >>> 0) + 2) >>> 0), _voxdata$1);\n                var _r$9 = VoxBox$parse_byte$(((((_i$4 * 6) >>> 0) + 3) >>> 0), _voxdata$1);\n                var _g$10 = VoxBox$parse_byte$(((((_i$4 * 6) >>> 0) + 4) >>> 0), _voxdata$1);\n                var _b$11 = VoxBox$parse_byte$(((((_i$4 * 6) >>> 0) + 5) >>> 0), _voxdata$1);\n                var _pos$12 = ((0 | _x$6 | (_y$7 << 12) | (_z$8 << 24)));\n                var _col$13 = ((0 | _r$9 | (_g$10 << 8) | (_b$11 << 16) | (255 << 24)));\n                var $363 = ((_img$5.buffer[_img$5.length * 2] = _pos$12, _img$5.buffer[_img$5.length * 2 + 1] = _col$13, _img$5.length++, _img$5));\n                _img$5 = $363;\n            };\n            return _img$5;\n        })();\n        var $362 = _img$4;\n        return $362;\n    };\n    const VoxBox$parse = x0 => VoxBox$parse$(x0);\n    const Web$Kaelin$Assets$hero$croni0_d_1 = VoxBox$parse$(\"0f0b16351d4d100b16351d4d0d0c15351d4d0e0c15351d4d0f0c156a3a86100c158e4a9d110c15351d4d120c15351d4d0c0d14351d4d0d0d146a3a860e0d146a3a860f0d148e4a9d100d146a3a86110d146a3a86120d146a3a86130d14351d4d0b0e13351d4d0c0e136a3a860d0e136a3a860e0e136a3a860f0e136a3a86100e136a3a86110e136a3a86120e136a3a86130e136a3a86140e13351d4d0a0f12351d4d0b0f126a3a860c0f126a3a860d0f126a3a860e0f126a3a860f0f126a3a86100f126a3a86110f126a3a86120f126a3a86130f126a3a86140f126a3a86150f12351d4d0a1011351d4d0b10116a3a860c10116a3a860d10116a3a860e10116a3a860f10116a3a861010116a3a861110116a3a861210116a3a861310116a3a861410116a3a86151011351d4d091110351d4d0a11106a3a860b11106a3a860c11106a3a860d11106a3a860e11106a3a860f11106a3a861011106a3a861111106a3a861211106a3a861311106a3a861411106a3a861511106a3a86161110351d4d09120f351d4d0a120f6a3a860b120f6a3a860c120f602d800d120f602d800e120f6a3a860f120f6a3a8610120f6a3a8611120f6a3a8612120f602d8013120f602d8014120f6a3a8615120f6a3a8616120f351d4d09130e351d4d0a130e602d800b130e602d800c130e351d4d0d130e351d4d0e130e6a3a860f130e6a3a8610130e6a3a8611130e6a3a8612130e351d4d13130e351d4d14130e602d8015130e602d8016130e351d4d09140d351d4d0a140d602d800b140d351d4d0c140d351d4d0d140d531e480e140d351d4d0f140d6a3a8610140d6a3a8611140d351d4d12140d531e4813140d351d4d14140d351d4d15140d4a358016140d351d4d09150c351d4d0a150c4a35800b150c351d4d0c150c531e480d150cdf3e460e150c531e480f150c351d4d10150c351d4d11150c531e4812150cdf3e4613150c531e4814150c351d4d15150c4a358016150c351d4d0a160b351d4d0b160b4a35800c160b351d4d0d160b531e480e160b351d4d0f160b351d4d10160b351d4d11160b351d4d12160b531e4813160b351d4d14160b4a358015160b351d4d0b170a351d4d0c170a4a35800d170a8e4a9d0e170a351d4d0f170a351d4d10170a351d4d11170a351d4d12170a8e4a9d13170a4a358014170a351d4d0d1809351d4d0e1809602d800f1809602d801018094a3580111809602d80121809351d4d0c1908351d4d0d19086a3a860e19086a3a860f19086a3a861019084a35801119086a3a861219086a3a86131908351d4d0c1a07351d4d0d1a076a3a860e1a076a3a860f1a076a3a86101a074a3580111a076a3a86121a076a3a86131a07351d4d0c1b06351d4d0d1b068e4a9d0e1b066a3a860f1b066a3a86101b064a3580111b066a3a86121b068e4a9d131b06351d4d0d1c05351d4d0e1c05351d4d0f1c05351d4d101c05351d4d111c05351d4d121c05351d4d111d04351d4d121d04351d4d\");\n    const Web$Kaelin$Hero$croni = Web$Kaelin$Hero$new$(1, Web$Kaelin$Assets$hero$croni0_d_1);\n    const Web$Kaelin$Assets$hero$cyclope_d_1 = VoxBox$parse$(\"0e0a212c333d0f0a212c333d100a212c333d110a212c333d0d0b202c333d0e0b20fff9e10f0b20fff9e1100b20fff9e1110b20fff9e1120b202c333d0d0c1f2c333d0e0c1ffff9e10f0c1ffff9e1100c1ffff9e1110c1ffff9e1120c1f2c333d0c0d1e2729600d0d1e2729600e0d1efff9e10f0d1eccc8b7100d1eccc8b7110d1eccc8b7120d1e272960130d1e272960140d1e2729600c0e1d2729600d0e1d2729600e0e1dfff9e10f0e1dccc8b7100e1dccc8b7110e1dccc8b7120e1d272960130e1d272960140e1d272960050f1c272960060f1c272960070f1c272960090f1c2729600a0f1c2729600b0f1c2729600c0f1c5176b80d0f1cfff9e10e0f1cdfdbc80f0f1cdfdbc8100f1cdfdbc8110f1cdfdbc8120f1cccc8b7130f1c5176b8140f1c5176b8150f1c27296005101b27296006101b799cd307101b799cd308101b27296009101b5176b80a101b5176b80b101b5176b80c101b799cd30d101b5176b80e101bdfdbc80f101bccc8b710101bccc8b711101bccc8b712101b5176b813101b799cd314101b799cd315101b5176b816101b27296017101b27296018101b27296005111a27296006111a799cd307111a799cd308111a27296009111a5176b80a111a5176b80b111a5176b80c111a799cd30d111a5176b80e111adfdbc80f111accc8b710111accc8b711111accc8b712111a5176b813111a799cd314111a799cd315111a5176b816111a27296017111a27296018111a2729600512192729600612195176b80712195176b8081219394c87091219799cd30a1219799cd30b1219799cd30c12195176b80d12194a2b710e12194a2b710f12194a2b711012194a2b711112194a2b711212194a2b711312195176b81412195176b8151219799cd31612192729601712192729601812192729600513182729600613185176b80713185176b8081318394c87091318799cd30a1318799cd30b1318799cd30c13185176b80d13184a2b710e13184a2b710f13184a2b711013184a2b711113184a2b711213184a2b711313185176b81413185176b8151318799cd3161318272960171318272960181318272960051417272960061417272960071417272960081417394c870914175176b80a14175176b80b14175176b80c14174a2b710d1417dab04d0e1417dab04d0f1417dab04d101417dab04d111417dab04d121417dab04d1314174a2b711414174a2b711514175176b8161417394c87171417394c87181417394c871914172729601a1417272960051516272960061516799cd3071516799cd3081516394c870915165176b80a15165176b80b15165176b80c15164a2b710d1516dab04d0e1516fff9e10f1516fff9e1101516fff9e1111516fff9e1121516dab04d1315164a2b711415164a2b711515165176b8161516394c87171516394c87181516394c87191516799cd31a1516272960051615272960061615799cd3071615799cd3081615394c870916155176b80a16155176b80b16155176b80c16154a2b710d1615dab04d0e1615fff9e10f1615fff9e1101615fff9e1111615fff9e1121615dab04d1316154a2b711416154a2b711516155176b8161615394c87171615394c87181615394c87191615799cd31a1615272960051714272960061714272960071714272960081714394c870917145176b80a17145176b80b17145176b80c17144a2b710d1714dab04d0e17142421260f1714242126101714242126111714242126121714dab04d1317144a2b711417144a2b711517145176b8161714394c87171714394c87181714394c871917142729601a17145176b81b17142729600518132729600618135176b80718135176b8081813394c870918135176b80a18135176b80b18135176b80c18135176b80d18134a2b710e18134a2b710f18134a2b711018134a2b711118134a2b711218134a2b711318135176b81418135176b81518135176b8161813394c87171813394c87181813394c87191813799cd31a1813799cd31b18132729600519122729600619125176b80719125176b8081912394c870919125176b80a19125176b80b19125176b80c19125176b80d19124a2b710e19124a2b710f19124a2b711019124a2b711119124a2b711219124a2b711319125176b81419125176b81519125176b8161912394c87171912394c87181912394c87191912799cd31a1912799cd31b1912272960051a11272960061a115176b8071a115176b8081a11394c87091a115176b80a1a115176b80b1a115176b80c1a115176b80d1a114a2b710e1a114a2b710f1a114a2b71101a114a2b71111a114a2b71121a114a2b71131a115176b8141a115176b8151a115176b8161a11394c87171a11394c87181a11394c87191a11799cd31a1a11799cd31b1a11272960051b10272960061b10799cd3071b10799cd3081b105176b8091b10394c870a1b10394c870b1b10394c870c1b10dfdbc80d1b105176b80e1b105176b80f1b105176b8101b105176b8111b105176b8121b105176b8131b10dfdbc8141b10dfdbc8151b10394c87161b105176b8171b105176b8181b105176b8191b105176b81a1b10799cd31b1b10272960061c0f272960071c0f272960081c0f272960091c0f394c870a1c0f394c870b1c0f394c870c1c0fdfdbc80d1c0f4662a10e1c0f4662a10f1c0f4662a1101c0f4662a1111c0f4662a1121c0f4662a1131c0fdfdbc8141c0fdfdbc8151c0f394c87161c0f394c87171c0f394c87181c0f394c87191c0f5176b81a1c0f5176b81b1c0f272960081d0e272960091d0e5176b80a1d0e5176b80b1d0e5176b80c1d0e394c870d1d0e394c870e1d0e394c870f1d0e394c87101d0e394c87111d0e394c87121d0e394c87131d0e394c87141d0e394c87151d0e5176b8161d0e394c87171d0e394c87181d0e394c87191d0e5176b81a1d0e5176b81b1d0e272960081e0d272960091e0d5176b80a1e0d5176b80b1e0d5176b80c1e0d394c870d1e0d394c870e1e0d394c870f1e0d394c87101e0d394c87111e0d394c87121e0d394c87131e0d394c87141e0d394c87151e0d5176b8161e0d394c87171e0d394c87181e0d394c87191e0d5176b81a1e0d5176b81b1e0d272960081f0c272960091f0c5176b80a1f0c5176b80b1f0c5176b80c1f0c394c870d1f0c394c870e1f0c394c870f1f0c394c87101f0c394c87111f0c394c87121f0c394c87131f0c394c87141f0c394c87151f0c5176b8161f0c394c87171f0c394c87181f0c394c87191f0c5176b81a1f0c5176b81b1f0c27296008200b27296009200b5176b80a200b5176b80b200b5176b80c200b5176b80d200b5176b80e200b5176b80f200b5176b810200b5176b811200b5176b812200b5176b813200b5176b814200b5176b815200b394c8716200b799cd317200b799cd318200b799cd319200b5176b81a200b5176b81b200b27296008210a27296009210a8e4a9d0a210a8e4a9d0b210a8e4a9d0c210a8e4a9d0d210a5176b80e210a5176b80f210a5176b810210a5176b811210a5176b812210a5176b813210a394c8714210a394c8715210a394c8716210a799cd317210a799cd318210a799cd319210a799cd31a210a5176b81b210a2729600922092729600a22092729600b22092729600c22094a2b710d22098e4a9d0e22098e4a9d0f22098e4a9d1022098e4a9d1122098e4a9d1222098e4a9d132209394c87142209394c871522095176b8162209394c87172209394c87182209394c87192209394c871a22092729600923082729600a23082729600b23082729600c23084a2b710d23088e4a9d0e23088e4a9d0f23088e4a9d1023088e4a9d1123088e4a9d1223088e4a9d132308394c87142308394c871523085176b8162308394c87172308394c87182308394c87192308394c871a23082729600924072729600a24072729600b24072729600c24074a2b710d24078e4a9d0e24078e4a9d0f24078e4a9d1024078e4a9d1124078e4a9d1224078e4a9d132407394c87142407394c871524075176b8162407394c87172407394c87182407394c87192407394c871a24072729600925062729600a25062729600b25062729600c25065176b80d25064a2b710e25068e4a9d0f25068e4a9d1025068e4a9d1125068e4a9d1225064a2b71132506394c87142506394c87152506799cd3162506799cd3172506799cd3182506799cd31925065176b81a25062729600926052729600a26052729600b26052729600c2605799cd30d2605799cd30e26054a2b710f26054a2b711026054a2b711126054a2b711226052729601326052729601426052729601526052729601626052729601726052729601826052729601926052729600927042729600a27042729600b27042729600c27042729600d27042729600e2704272960\");\n    const Web$Kaelin$Hero$cyclope = Web$Kaelin$Hero$new$(2, Web$Kaelin$Assets$hero$cyclope_d_1);\n    const Web$Kaelin$Assets$hero$lela_d_1 = VoxBox$parse$(\"091219fb4d4d0a1219fb4d4d0b1219fb4d4d0c1219fb4d4d131219fb4d4d141219fb4d4d151219fb4d4d161219fb4d4d081318fb4d4d0913182b496c0a13182b496c0b13182b496c0c13182b496c0d1318fb4d4d121318fb4d4d1313182b496c1413182b496c1513182b496c1613182b496c171318fb4d4d071417fb4d4d0814172b496c09141781aeff0a141781aeff0b141781aeff0c141781aeff0d14172b496c0e1417fb4d4d0f1417fb4d4d101417fb4d4d111417fb4d4d1214172b496c13141781aeff14141781aeff15141781aeff16141781aeff1714172b496c181417fb4d4d071516fb4d4d0815161f3b5b091516538ccf0a1516538ccf0b1516538ccf0c1516538ccf0d1516538ccf0e15162b496c0f15162b496c1015162b496c1115162b496c121516538ccf131516538ccf141516538ccf151516538ccf161516538ccf1715161f3b5b181516fb4d4d071615fb4d4d0816151f3b5b091615538ccf0a1615538ccf0b1615538ccf0c1615538ccf0d1615538ccf0e161581aeff0f161581aeff10161581aeff11161581aeff121615538ccf131615538ccf141615538ccf151615538ccf161615538ccf1716151f3b5b181615fb4d4d071714fb4d4d0817141f3b5b091714538ccf0a1714538ccf0b1714538ccf0c1714538ccf0d1714538ccf0e1714538ccf0f1714538ccf101714538ccf111714538ccf121714538ccf131714538ccf141714538ccf151714538ccf161714538ccf1717141f3b5b181714fb4d4d081813fb4d4d0918131f3b5b0a1813538ccf0b1813538ccf0c1813538ccf0d1813538ccf0e1813538ccf0f1813cb4646101813cb4646111813538ccf121813538ccf131813538ccf141813538ccf151813538ccf1618131f3b5b171813fb4d4d091912fb4d4d0a19121f3b5b0b1912538ccf0c1912538ccf0d1912538ccf0e1912538ccf0f1912ad1f1f101912ad1f1f111912538ccf121912538ccf131912538ccf141912538ccf1519121f3b5b161912fb4d4d091a11fb4d4d0a1a111f3b5b0b1a11538ccf0c1a11538ccf0d1a11cb46460e1a11538ccf0f1a11538ccf101a11538ccf111a11538ccf121a11cb4646131a11538ccf141a11538ccf151a111f3b5b161a11fb4d4d091b10fb4d4d0a1b101f3b5b0b1b10538ccf0c1b10538ccf0d1b10ad1f1f0e1b10538ccf0f1b103d5497101b103d5497111b10538ccf121b10ad1f1f131b10538ccf141b10538ccf151b101f3b5b161b10fb4d4d0a1c0ffb4d4d0b1c0f1f3b5b0c1c0f538ccf0d1c0f538ccf0e1c0f538ccf0f1c0f2d4382101c0f2d4382111c0f538ccf121c0f538ccf131c0f538ccf141c0f1f3b5b151c0ffb4d4d0b1d0efb4d4d0c1d0e1f3b5b0d1d0e3a67b70e1d0e538ccf0f1d0e203368101d0e203368111d0e538ccf121d0e3a67b7131d0e1f3b5b141d0efb4d4d0a1e0dfb4d4d0b1e0d1f3b5b0c1e0d538ccf0d1e0d538ccf0e1e0d3a67b70f1e0d3a67b7101e0d3a67b7111e0d3a67b7121e0d538ccf131e0d538ccf141e0d1f3b5b151e0dfb4d4d091f0cfb4d4d0a1f0c1f3b5b0b1f0c81aeff0c1f0c3a71b10d1f0c538ccf0e1f0c81aeff0f1f0c81aeff101f0c81aeff111f0c81aeff121f0c538ccf131f0c3a71b1141f0c81aeff151f0c1f3b5b161f0cfb4d4d08200bfb4d4d09200b1f3b5b0a200b538ccf0b200b538ccf0c200b3a71b10d200b538ccf0e200b538ccf0f200b538ccf10200b538ccf11200b538ccf12200b538ccf13200b3a71b114200b538ccf15200b538ccf16200b1f3b5b17200bfb4d4d08210afb4d4d09210a1f3b5b0a210a538ccf0b210a538ccf0c210a3a71b10d210a538ccf0e210a538ccf0f210a538ccf10210a538ccf11210a538ccf12210a538ccf13210a3a71b114210a538ccf15210a538ccf16210a1f3b5b17210afb4d4d082209fb4d4d0922091f3b5b0a2209538ccf0b2209538ccf0c22092753860d2209538ccf0e2209538ccf0f2209538ccf102209538ccf112209538ccf122209538ccf132209275386142209538ccf152209538ccf1622091f3b5b172209fb4d4d092308fb4d4d0a23081f3b5b0b23081f3b5b0c23081f3b5b0d23083a67b70e2308538ccf0f2308538ccf102308538ccf112308538ccf1223083a67b71323081f3b5b1423081f3b5b1523081f3b5b162308fb4d4d0a2407fb4d4d0b2407fb4d4d0c2407fb4d4d0d24071f3b5b0e24073a67b70f2407538ccf102407538ccf1124073a67b71224071f3b5b132407fb4d4d142407fb4d4d152407fb4d4d0d2506fb4d4d0e25061f3b5b0f25063a67b71025063a67b71125061f3b5b122506fb4d4d0e2605fb4d4d0f26051f3b5b1026051f3b5b112605fb4d4d0f2704fb4d4d102704fb4d4d\");\n    const Web$Kaelin$Hero$lela = Web$Kaelin$Hero$new$(3, Web$Kaelin$Assets$hero$lela_d_1);\n    const Web$Kaelin$Assets$hero$octoking_d_1 = VoxBox$parse$(\"\");\n    const Web$Kaelin$Hero$octoking = Web$Kaelin$Hero$new$(4, Web$Kaelin$Assets$hero$octoking_d_1);\n\n    function Maybe$default$(_m$2, _a$3) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $367 = self.value;\n                var $368 = $367;\n                var $366 = $368;\n                break;\n            case 'Maybe.none':\n                var $369 = _a$3;\n                var $366 = $369;\n                break;\n        };\n        return $366;\n    };\n    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);\n\n    function List$(_A$1) {\n        var $370 = null;\n        return $370;\n    };\n    const List = x0 => List$(x0);\n\n    function Cmp$as_gtn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $372 = Bool$false;\n                var $371 = $372;\n                break;\n            case 'Cmp.gtn':\n                var $373 = Bool$true;\n                var $371 = $373;\n                break;\n        };\n        return $371;\n    };\n    const Cmp$as_gtn = x0 => Cmp$as_gtn$(x0);\n\n    function Nat$cmp$(_a$1, _b$2) {\n        var Nat$cmp$ = (_a$1, _b$2) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _b$2]\n        });\n        var Nat$cmp = _a$1 => _b$2 => Nat$cmp$(_a$1, _b$2);\n        var arg = [_a$1, _b$2];\n        while (true) {\n            let [_a$1, _b$2] = arg;\n            var R = (() => {\n                var self = _a$1;\n                if (self === 0n) {\n                    var self = _b$2;\n                    if (self === 0n) {\n                        var $375 = Cmp$eql;\n                        var $374 = $375;\n                    } else {\n                        var $376 = (self - 1n);\n                        var $377 = Cmp$ltn;\n                        var $374 = $377;\n                    };\n                    return $374;\n                } else {\n                    var $378 = (self - 1n);\n                    var self = _b$2;\n                    if (self === 0n) {\n                        var $380 = Cmp$gtn;\n                        var $379 = $380;\n                    } else {\n                        var $381 = (self - 1n);\n                        var $382 = Nat$cmp$($378, $381);\n                        var $379 = $382;\n                    };\n                    return $379;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$cmp = x0 => x1 => Nat$cmp$(x0, x1);\n    const Nat$add = a0 => a1 => (a0 + a1);\n\n    function Int$cmp$(_a$1, _b$2) {\n        var self = _a$1;\n        switch (\"new\") {\n            case 'new':\n                var $384 = int_pos(self);\n                var $385 = int_neg(self);\n                var self = _b$2;\n                switch (\"new\") {\n                    case 'new':\n                        var $387 = int_pos(self);\n                        var $388 = int_neg(self);\n                        var $389 = Nat$cmp$(($384 + $388), ($387 + $385));\n                        var $386 = $389;\n                        break;\n                };\n                var $383 = $386;\n                break;\n        };\n        return $383;\n    };\n    const Int$cmp = x0 => x1 => Int$cmp$(x0, x1);\n\n    function Int$gtn$(_a$1, _b$2) {\n        var $390 = Cmp$as_gtn$(Int$cmp$(_a$1, _b$2));\n        return $390;\n    };\n    const Int$gtn = x0 => x1 => Int$gtn$(x0, x1);\n    const Int$add = a0 => a1 => (a0 + a1);\n\n    function Int$neg$(_a$1) {\n        var self = _a$1;\n        switch (\"new\") {\n            case 'new':\n                var $392 = int_pos(self);\n                var $393 = int_neg(self);\n                var $394 = ($393 - $392);\n                var $391 = $394;\n                break;\n        };\n        return $391;\n    };\n    const Int$neg = x0 => Int$neg$(x0);\n    const Int$sub = a0 => a1 => (a0 - a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n    const Int$mul = a0 => a1 => (a0 * a1);\n\n    function Int$to_nat$(_a$1) {\n        var self = _a$1;\n        switch (\"new\") {\n            case 'new':\n                var $396 = int_pos(self);\n                var $397 = $396;\n                var $395 = $397;\n                break;\n        };\n        return $395;\n    };\n    const Int$to_nat = x0 => Int$to_nat$(x0);\n\n    function Arith$Z_to_N$(_n$1) {\n        var self = Int$gtn$(_n$1, Int$from_nat$(0n));\n        if (self) {\n            var $399 = ((Int$from_nat$(2n) * _n$1) - Int$from_nat$(1n));\n            var _bij$2 = $399;\n        } else {\n            var $400 = (Int$neg$(Int$from_nat$(2n)) * _n$1);\n            var _bij$2 = $400;\n        };\n        var $398 = Int$to_nat$(_bij$2);\n        return $398;\n    };\n    const Arith$Z_to_N = x0 => Arith$Z_to_N$(x0);\n\n    function Word$is_neg$go$(_word$2, _n$3) {\n        var Word$is_neg$go$ = (_word$2, _n$3) => ({\n            ctr: 'TCO',\n            arg: [_word$2, _n$3]\n        });\n        var Word$is_neg$go = _word$2 => _n$3 => Word$is_neg$go$(_word$2, _n$3);\n        var arg = [_word$2, _n$3];\n        while (true) {\n            let [_word$2, _n$3] = arg;\n            var R = (() => {\n                var self = _word$2;\n                switch (self._) {\n                    case 'Word.o':\n                        var $401 = self.pred;\n                        var $402 = Word$is_neg$go$($401, Bool$false);\n                        return $402;\n                    case 'Word.i':\n                        var $403 = self.pred;\n                        var $404 = Word$is_neg$go$($403, Bool$true);\n                        return $404;\n                    case 'Word.e':\n                        var $405 = _n$3;\n                        return $405;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$is_neg$go = x0 => x1 => Word$is_neg$go$(x0, x1);\n\n    function Word$is_neg$(_word$2) {\n        var $406 = Word$is_neg$go$(_word$2, Bool$false);\n        return $406;\n    };\n    const Word$is_neg = x0 => Word$is_neg$(x0);\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $408 = self.pred;\n                var $409 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $408));\n                var $407 = $409;\n                break;\n            case 'Word.i':\n                var $410 = self.pred;\n                var $411 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $410));\n                var $407 = $411;\n                break;\n            case 'Word.e':\n                var $412 = _nil$3;\n                var $407 = $412;\n                break;\n        };\n        return $407;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n\n    function Word$to_nat$(_word$2) {\n        var $413 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $414 = Nat$succ$((2n * _x$4));\n            return $414;\n        }), _word$2);\n        return $413;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n\n    function Word$abs$(_a$2) {\n        var _neg$3 = Word$is_neg$(_a$2);\n        var self = _neg$3;\n        if (self) {\n            var $416 = Word$neg$(_a$2);\n            var $415 = $416;\n        } else {\n            var $417 = _a$2;\n            var $415 = $417;\n        };\n        return $415;\n    };\n    const Word$abs = x0 => Word$abs$(x0);\n\n    function Word$to_int$(_a$2) {\n        var _neg$3 = Word$is_neg$(_a$2);\n        var _i$4 = Int$from_nat$(Word$to_nat$(Word$abs$(_a$2)));\n        var self = _neg$3;\n        if (self) {\n            var $419 = Int$neg$(_i$4);\n            var $418 = $419;\n        } else {\n            var $420 = _i$4;\n            var $418 = $420;\n        };\n        return $418;\n    };\n    const Word$to_int = x0 => Word$to_int$(x0);\n\n    function I32$to_int$(_a$1) {\n        var self = _a$1;\n        switch ('i32') {\n            case 'i32':\n                var $422 = i32_to_word(self);\n                var $423 = Word$to_int$($422);\n                var $421 = $423;\n                break;\n        };\n        return $421;\n    };\n    const I32$to_int = x0 => I32$to_int$(x0);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $425 = self.fst;\n                var $426 = $425;\n                var $424 = $426;\n                break;\n        };\n        return $424;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n\n    function Either$(_A$1, _B$2) {\n        var $427 = null;\n        return $427;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $428 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $428;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $429 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $429;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $430 = Either$left$(_n$1);\n                    return $430;\n                } else {\n                    var $431 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $433 = Either$right$(Nat$succ$($431));\n                        var $432 = $433;\n                    } else {\n                        var $434 = (self - 1n);\n                        var $435 = Nat$sub_rem$($434, $431);\n                        var $432 = $435;\n                    };\n                    return $432;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $436 = self.value;\n                        var $437 = Nat$div_mod$go$($436, _m$2, Nat$succ$(_d$3));\n                        return $437;\n                    case 'Either.right':\n                        var $438 = Pair$new$(_d$3, _n$1);\n                        return $438;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n    const Nat$div = a0 => a1 => (a0 / a1);\n\n    function Arith$NxN_to_N$(_pair$1) {\n        var self = _pair$1;\n        switch (self._) {\n            case 'Pair.new':\n                var $440 = self.fst;\n                var $441 = self.snd;\n                var $442 = (((($440 + $441) * ($440 + ($441 + 1n))) / 2n) + $441);\n                var $439 = $442;\n                break;\n        };\n        return $439;\n    };\n    const Arith$NxN_to_N = x0 => Arith$NxN_to_N$(x0);\n\n    function Web$Kaelin$Coord$Convert$axial_to_nat$(_coord$1) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var $444 = self.i;\n                var $445 = self.j;\n                var _pair$4 = Pair$new$(Arith$Z_to_N$(I32$to_int$($444)), Arith$Z_to_N$(I32$to_int$($445)));\n                var $446 = Arith$NxN_to_N$(_pair$4);\n                var $443 = $446;\n                break;\n        };\n        return $443;\n    };\n    const Web$Kaelin$Coord$Convert$axial_to_nat = x0 => Web$Kaelin$Coord$Convert$axial_to_nat$(x0);\n\n    function Maybe$(_A$1) {\n        var $447 = null;\n        return $447;\n    };\n    const Maybe = x0 => Maybe$(x0);\n    const BitsMap$get = a0 => a1 => (bitsmap_get(a0, a1));\n\n    function Bits$inc$(_a$1) {\n        var self = _a$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $449 = self.slice(0, -1);\n                var $450 = ($449 + '1');\n                var $448 = $450;\n                break;\n            case 'i':\n                var $451 = self.slice(0, -1);\n                var $452 = (Bits$inc$($451) + '0');\n                var $448 = $452;\n                break;\n            case 'e':\n                var $453 = (Bits$e + '1');\n                var $448 = $453;\n                break;\n        };\n        return $448;\n    };\n    const Bits$inc = x0 => Bits$inc$(x0);\n    const Nat$to_bits = a0 => (nat_to_bits(a0));\n\n    function NatMap$get$(_key$2, _map$3) {\n        var $454 = (bitsmap_get((nat_to_bits(_key$2)), _map$3));\n        return $454;\n    };\n    const NatMap$get = x0 => x1 => NatMap$get$(x0, x1);\n\n    function Web$Kaelin$Map$get$(_coord$1, _map$2) {\n        var _key$3 = Web$Kaelin$Coord$Convert$axial_to_nat$(_coord$1);\n        var $455 = NatMap$get$(_key$3, _map$2);\n        return $455;\n    };\n    const Web$Kaelin$Map$get = x0 => x1 => Web$Kaelin$Map$get$(x0, x1);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $456 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $456;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function NatMap$set$(_key$2, _val$3, _map$4) {\n        var $457 = (bitsmap_set((nat_to_bits(_key$2)), _val$3, _map$4, 'set'));\n        return $457;\n    };\n    const NatMap$set = x0 => x1 => x2 => NatMap$set$(x0, x1, x2);\n\n    function Web$Kaelin$Map$set$(_coord$1, _tile$2, _map$3) {\n        var _key$4 = Web$Kaelin$Coord$Convert$axial_to_nat$(_coord$1);\n        var $458 = NatMap$set$(_key$4, _tile$2, _map$3);\n        return $458;\n    };\n    const Web$Kaelin$Map$set = x0 => x1 => x2 => Web$Kaelin$Map$set$(x0, x1, x2);\n\n    function Web$Kaelin$Map$push$(_coord$1, _entity$2, _map$3) {\n        var _tile$4 = Maybe$default$(Web$Kaelin$Map$get$(_coord$1, _map$3), List$nil);\n        var _tile$5 = List$cons$(_entity$2, _tile$4);\n        var $459 = Web$Kaelin$Map$set$(_coord$1, _tile$5, _map$3);\n        return $459;\n    };\n    const Web$Kaelin$Map$push = x0 => x1 => x2 => Web$Kaelin$Map$push$(x0, x1, x2);\n\n    function Web$Kaelin$Map$init$(_map$1) {\n        var _new_coord$2 = Web$Kaelin$Coord$new;\n        var _creature$3 = Web$Kaelin$Entity$creature;\n        var _croni$4 = Web$Kaelin$Hero$croni;\n        var _cyclope$5 = Web$Kaelin$Hero$cyclope;\n        var _lela$6 = Web$Kaelin$Hero$lela;\n        var _octoking$7 = Web$Kaelin$Hero$octoking;\n        var _map$8 = Web$Kaelin$Map$push$(_new_coord$2(Int$to_i32$(Int$neg$(Int$from_nat$(1n))))(Int$to_i32$(Int$neg$(Int$from_nat$(2n)))), _creature$3(Maybe$none)(_croni$4), _map$1);\n        var _map$9 = Web$Kaelin$Map$push$(_new_coord$2(Int$to_i32$(Int$from_nat$(0n)))(Int$to_i32$(Int$from_nat$(3n))), _creature$3(Maybe$none)(_cyclope$5), _map$8);\n        var _map$10 = Web$Kaelin$Map$push$(_new_coord$2(Int$to_i32$(Int$neg$(Int$from_nat$(2n))))(Int$to_i32$(Int$from_nat$(0n))), _creature$3(Maybe$none)(_lela$6), _map$9);\n        var _map$11 = Web$Kaelin$Map$push$(_new_coord$2(Int$to_i32$(Int$from_nat$(3n)))(Int$to_i32$(Int$neg$(Int$from_nat$(2n)))), _creature$3(Maybe$none)(_octoking$7), _map$10);\n        var $460 = _map$11;\n        return $460;\n    };\n    const Web$Kaelin$Map$init = x0 => Web$Kaelin$Map$init$(x0);\n    const NatMap$new = BitsMap$new;\n    const Web$Kaelin$Constants$map_size = 5;\n    const Web$Kaelin$Assets$tile$effect$blue_green2 = VoxBox$parse$(\"\");\n    const Web$Kaelin$Assets$tile$effect$dark_blue2 = VoxBox$parse$(\"\");\n    const Web$Kaelin$Assets$tile$effect$dark_red2 = VoxBox$parse$(\"\");\n    const Web$Kaelin$Assets$tile$green_2 = VoxBox$parse$(\"\");\n    const Web$Kaelin$Assets$tile$effect$light_blue2 = VoxBox$parse$(\"\");\n    const Web$Kaelin$Assets$tile$effect$light_red2 = VoxBox$parse$(\"\");\n\n    function Web$Kaelin$Terrain$grass$(_draw$1) {\n        var $461 = ({\n            _: 'Web.Kaelin.Terrain.grass',\n            'draw': _draw$1\n        });\n        return $461;\n    };\n    const Web$Kaelin$Terrain$grass = x0 => Web$Kaelin$Terrain$grass$(x0);\n\n    function Web$Kaelin$Entity$background$(_terrain$1) {\n        var $462 = ({\n            _: 'Web.Kaelin.Entity.background',\n            'terrain': _terrain$1\n        });\n        return $462;\n    };\n    const Web$Kaelin$Entity$background = x0 => Web$Kaelin$Entity$background$(x0);\n    const NatMap = null;\n    const I32$sub = a0 => a1 => ((a0 - a1) >> 0);\n    const F64$to_i32 = a0 => ((a0 >> 0));\n\n    function Word$to_f64$(_a$2) {\n        var Word$to_f64$ = (_a$2) => ({\n            ctr: 'TCO',\n            arg: [_a$2]\n        });\n        var Word$to_f64 = _a$2 => Word$to_f64$(_a$2);\n        var arg = [_a$2];\n        while (true) {\n            let [_a$2] = arg;\n            var R = Word$to_f64$(_a$2);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$to_f64 = x0 => Word$to_f64$(x0);\n    const U32$to_f64 = a0 => (a0);\n\n    function U32$to_i32$(_n$1) {\n        var $463 = (((_n$1) >> 0));\n        return $463;\n    };\n    const U32$to_i32 = x0 => U32$to_i32$(x0);\n\n    function Web$Kaelin$Coord$Cubic$new$(_x$1, _y$2, _z$3) {\n        var $464 = ({\n            _: 'Web.Kaelin.Coord.Cubic.new',\n            'x': _x$1,\n            'y': _y$2,\n            'z': _z$3\n        });\n        return $464;\n    };\n    const Web$Kaelin$Coord$Cubic$new = x0 => x1 => x2 => Web$Kaelin$Coord$Cubic$new$(x0, x1, x2);\n\n    function Web$Kaelin$Coord$Convert$axial_to_cubic$(_coord$1) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var $466 = self.i;\n                var $467 = self.j;\n                var _x$4 = $466;\n                var _z$5 = $467;\n                var _y$6 = ((((-_x$4)) - _z$5) >> 0);\n                var $468 = Web$Kaelin$Coord$Cubic$new$(_x$4, _y$6, _z$5);\n                var $465 = $468;\n                break;\n        };\n        return $465;\n    };\n    const Web$Kaelin$Coord$Convert$axial_to_cubic = x0 => Web$Kaelin$Coord$Convert$axial_to_cubic$(x0);\n\n    function I32$abs$(_a$1) {\n        var self = _a$1;\n        switch ('i32') {\n            case 'i32':\n                var $470 = i32_to_word(self);\n                var $471 = I32$new$(Word$abs$($470));\n                var $469 = $471;\n                break;\n        };\n        return $469;\n    };\n    const I32$abs = x0 => I32$abs$(x0);\n\n    function Cmp$inv$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $473 = Cmp$gtn;\n                var $472 = $473;\n                break;\n            case 'Cmp.eql':\n                var $474 = Cmp$eql;\n                var $472 = $474;\n                break;\n            case 'Cmp.gtn':\n                var $475 = Cmp$ltn;\n                var $472 = $475;\n                break;\n        };\n        return $472;\n    };\n    const Cmp$inv = x0 => Cmp$inv$(x0);\n\n    function Word$s_gtn$(_a$2, _b$3) {\n        var _neg_a$4 = Word$is_neg$(_a$2);\n        var _neg_b$5 = Word$is_neg$(_b$3);\n        var self = _neg_a$4;\n        if (self) {\n            var self = _neg_b$5;\n            if (self) {\n                var $478 = Cmp$as_gtn$(Cmp$inv$(Word$cmp$(_a$2, _b$3)));\n                var $477 = $478;\n            } else {\n                var $479 = Bool$false;\n                var $477 = $479;\n            };\n            var $476 = $477;\n        } else {\n            var self = _neg_b$5;\n            if (self) {\n                var $481 = Bool$true;\n                var $480 = $481;\n            } else {\n                var $482 = Cmp$as_gtn$(Word$cmp$(_a$2, _b$3));\n                var $480 = $482;\n            };\n            var $476 = $480;\n        };\n        return $476;\n    };\n    const Word$s_gtn = x0 => x1 => Word$s_gtn$(x0, x1);\n    const I32$gtn = a0 => a1 => (a0 > a1);\n\n    function I32$max$(_a$1, _b$2) {\n        var self = (_a$1 > _b$2);\n        if (self) {\n            var $484 = _a$1;\n            var $483 = $484;\n        } else {\n            var $485 = _b$2;\n            var $483 = $485;\n        };\n        return $483;\n    };\n    const I32$max = x0 => x1 => I32$max$(x0, x1);\n    const F64$to_u32 = a0 => ((a0 >>> 0));\n\n    function Word$s_to_f64$(_a$2) {\n        var Word$s_to_f64$ = (_a$2) => ({\n            ctr: 'TCO',\n            arg: [_a$2]\n        });\n        var Word$s_to_f64 = _a$2 => Word$s_to_f64$(_a$2);\n        var arg = [_a$2];\n        while (true) {\n            let [_a$2] = arg;\n            var R = Word$s_to_f64$(_a$2);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$s_to_f64 = x0 => Word$s_to_f64$(x0);\n    const I32$to_f64 = a0 => (a0);\n\n    function I32$to_u32$(_n$1) {\n        var $486 = (((_n$1) >>> 0));\n        return $486;\n    };\n    const I32$to_u32 = x0 => I32$to_u32$(x0);\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $488 = Bool$true;\n                var $487 = $488;\n                break;\n            case 'Cmp.gtn':\n                var $489 = Bool$false;\n                var $487 = $489;\n                break;\n        };\n        return $487;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $490 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $490;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U32$lte = a0 => a1 => (a0 <= a1);\n\n    function Web$Kaelin$Coord$fit$(_coord$1, _map_size$2) {\n        var _coord$3 = Web$Kaelin$Coord$Convert$axial_to_cubic$(_coord$1);\n        var self = _coord$3;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.Cubic.new':\n                var $492 = self.x;\n                var $493 = self.y;\n                var $494 = self.z;\n                var _x$7 = I32$abs$($492);\n                var _y$8 = I32$abs$($493);\n                var _z$9 = I32$abs$($494);\n                var _greater$10 = I32$max$(_x$7, I32$max$(_y$8, _z$9));\n                var _greater$11 = I32$to_u32$(_greater$10);\n                var $495 = (_greater$11 <= _map_size$2);\n                var $491 = $495;\n                break;\n        };\n        return $491;\n    };\n    const Web$Kaelin$Coord$fit = x0 => x1 => Web$Kaelin$Coord$fit$(x0, x1);\n    const Web$Kaelin$Map$arena = (() => {\n        var _map$1 = NatMap$new;\n        var _map_size$2 = Web$Kaelin$Constants$map_size;\n        var _width$3 = ((((_map_size$2 * 2) >>> 0) + 1) >>> 0);\n        var _height$4 = ((((_map_size$2 * 2) >>> 0) + 1) >>> 0);\n        var _terrain_img$5 = (_sprite$5 => {\n            var self = _sprite$5;\n            switch (self._) {\n                case 'Web.Kaelin.Terrain.Sprite.new':\n                    var $498 = self.effect;\n                    var $499 = self.mouse_over;\n                    var self = $499;\n                    if (self) {\n                        var self = $498;\n                        switch (self._) {\n                            case 'Web.Kaelin.HexEffect.normal':\n                                var $502 = Web$Kaelin$Assets$tile$effect$blue_green2;\n                                var $501 = $502;\n                                break;\n                            case 'Web.Kaelin.HexEffect.movement':\n                                var $503 = Web$Kaelin$Assets$tile$effect$dark_blue2;\n                                var $501 = $503;\n                                break;\n                            case 'Web.Kaelin.HexEffect.ability':\n                                var $504 = Web$Kaelin$Assets$tile$effect$dark_red2;\n                                var $501 = $504;\n                                break;\n                        };\n                        var $500 = $501;\n                    } else {\n                        var self = $498;\n                        switch (self._) {\n                            case 'Web.Kaelin.HexEffect.normal':\n                                var $506 = Web$Kaelin$Assets$tile$green_2;\n                                var $505 = $506;\n                                break;\n                            case 'Web.Kaelin.HexEffect.movement':\n                                var $507 = Web$Kaelin$Assets$tile$effect$light_blue2;\n                                var $505 = $507;\n                                break;\n                            case 'Web.Kaelin.HexEffect.ability':\n                                var $508 = Web$Kaelin$Assets$tile$effect$light_red2;\n                                var $505 = $508;\n                                break;\n                        };\n                        var $500 = $505;\n                    };\n                    var $497 = $500;\n                    break;\n            };\n            return $497;\n        });\n        var _new_terrain$6 = Web$Kaelin$Terrain$grass$(_terrain_img$5);\n        var _new_terrain$7 = Web$Kaelin$Entity$background$(_new_terrain$6);\n        var _map$8 = (() => {\n            var $509 = _map$1;\n            var $510 = 0;\n            var $511 = _height$4;\n            let _map$9 = $509;\n            for (let _j$8 = $510; _j$8 < $511; ++_j$8) {\n                var _map$10 = (() => {\n                    var $512 = _map$9;\n                    var $513 = 0;\n                    var $514 = _width$3;\n                    let _map$11 = $512;\n                    for (let _i$10 = $513; _i$10 < $514; ++_i$10) {\n                        var _coord_i$12 = ((U32$to_i32$(_i$10) - U32$to_i32$(_map_size$2)) >> 0);\n                        var _coord_j$13 = ((U32$to_i32$(_j$8) - U32$to_i32$(_map_size$2)) >> 0);\n                        var _coord$14 = Web$Kaelin$Coord$new$(_coord_i$12, _coord_j$13);\n                        var _fit$15 = Web$Kaelin$Coord$fit$(_coord$14, _map_size$2);\n                        var self = _fit$15;\n                        if (self) {\n                            var $515 = Web$Kaelin$Map$push$(_coord$14, _new_terrain$7, _map$11);\n                            var $512 = $515;\n                        } else {\n                            var $516 = _map$11;\n                            var $512 = $516;\n                        };\n                        _map$11 = $512;\n                    };\n                    return _map$11;\n                })();\n                var $509 = _map$10;\n                _map$9 = $509;\n            };\n            return _map$9;\n        })();\n        var $496 = _map$8;\n        return $496;\n    })();\n\n    function App$EnvInfo$new$(_screen_size$1, _mouse_pos$2) {\n        var $517 = ({\n            _: 'App.EnvInfo.new',\n            'screen_size': _screen_size$1,\n            'mouse_pos': _mouse_pos$2\n        });\n        return $517;\n    };\n    const App$EnvInfo$new = x0 => x1 => App$EnvInfo$new$(x0, x1);\n\n    function Web$Kaelin$State$game$(_room$1, _tick$2, _players$3, _cast_info$4, _map$5, _timer$6, _interface$7) {\n        var $518 = ({\n            _: 'Web.Kaelin.State.game',\n            'room': _room$1,\n            'tick': _tick$2,\n            'players': _players$3,\n            'cast_info': _cast_info$4,\n            'map': _map$5,\n            'timer': _timer$6,\n            'interface': _interface$7\n        });\n        return $518;\n    };\n    const Web$Kaelin$State$game = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Web$Kaelin$State$game$(x0, x1, x2, x3, x4, x5, x6);\n    const Web$Kaelin$App$init = (() => {\n        var _room$1 = Web$Kaelin$Constants$room;\n        var _tick$2 = 0n;\n        var _players$3 = Map$from_list$(List$nil);\n        var _cast_info$4 = Web$Kaelin$CastInfo$new$(Web$Kaelin$Coord$new$(Int$to_i32$(Int$from_nat$(0n)), Int$to_i32$(Int$from_nat$(0n))), Web$Kaelin$Coord$new$(Int$to_i32$(Int$from_nat$(0n)), Int$to_i32$(Int$from_nat$(0n))), 0n, Web$Kaelin$HexEffect$normal);\n        var _map$5 = Web$Kaelin$Map$init$(Web$Kaelin$Map$arena);\n        var _interface$6 = App$EnvInfo$new$(Pair$new$(256, 256), Pair$new$(0, 0));\n        var $519 = Web$Kaelin$State$game(_room$1)(_tick$2)(_players$3)(_cast_info$4)(_map$5)(_interface$6);\n        return $519;\n    })();\n\n    function DOM$text$(_value$1) {\n        var $520 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $520;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n\n    function DOM$vbox$(_props$1, _style$2, _value$3) {\n        var $521 = ({\n            _: 'DOM.vbox',\n            'props': _props$1,\n            'style': _style$2,\n            'value': _value$3\n        });\n        return $521;\n    };\n    const DOM$vbox = x0 => x1 => x2 => DOM$vbox$(x0, x1, x2);\n\n    function List$reverse$go$(_xs$2, _res$3) {\n        var List$reverse$go$ = (_xs$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _res$3]\n        });\n        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);\n        var arg = [_xs$2, _res$3];\n        while (true) {\n            let [_xs$2, _res$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $522 = self.head;\n                        var $523 = self.tail;\n                        var $524 = List$reverse$go$($523, List$cons$($522, _res$3));\n                        return $524;\n                    case 'List.nil':\n                        var $525 = _res$3;\n                        return $525;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);\n\n    function List$reverse$(_xs$2) {\n        var $526 = List$reverse$go$(_xs$2, List$nil);\n        return $526;\n    };\n    const List$reverse = x0 => List$reverse$(x0);\n\n    function Bits$reverse$tco$(_a$1, _r$2) {\n        var Bits$reverse$tco$ = (_a$1, _r$2) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _r$2]\n        });\n        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);\n        var arg = [_a$1, _r$2];\n        while (true) {\n            let [_a$1, _r$2] = arg;\n            var R = (() => {\n                var self = _a$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $527 = self.slice(0, -1);\n                        var $528 = Bits$reverse$tco$($527, (_r$2 + '0'));\n                        return $528;\n                    case 'i':\n                        var $529 = self.slice(0, -1);\n                        var $530 = Bits$reverse$tco$($529, (_r$2 + '1'));\n                        return $530;\n                    case 'e':\n                        var $531 = _r$2;\n                        return $531;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);\n\n    function Bits$reverse$(_a$1) {\n        var $532 = Bits$reverse$tco$(_a$1, Bits$e);\n        return $532;\n    };\n    const Bits$reverse = x0 => Bits$reverse$(x0);\n\n    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $534 = self.val;\n                var $535 = self.lft;\n                var $536 = self.rgt;\n                var self = $534;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $538 = self.value;\n                        var $539 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $538), _list$4);\n                        var _list0$8 = $539;\n                        break;\n                    case 'Maybe.none':\n                        var $540 = _list$4;\n                        var _list0$8 = $540;\n                        break;\n                };\n                var _list1$9 = BitsMap$to_list$go$($535, (_key$3 + '0'), _list0$8);\n                var _list2$10 = BitsMap$to_list$go$($536, (_key$3 + '1'), _list1$9);\n                var $537 = _list2$10;\n                var $533 = $537;\n                break;\n            case 'BitsMap.new':\n                var $541 = _list$4;\n                var $533 = $541;\n                break;\n        };\n        return $533;\n    };\n    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);\n\n    function List$mapped$(_as$2, _f$4) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $543 = self.head;\n                var $544 = self.tail;\n                var $545 = List$cons$(_f$4($543), List$mapped$($544, _f$4));\n                var $542 = $545;\n                break;\n            case 'List.nil':\n                var $546 = List$nil;\n                var $542 = $546;\n                break;\n        };\n        return $542;\n    };\n    const List$mapped = x0 => x1 => List$mapped$(x0, x1);\n\n    function Bits$to_nat$(_b$1) {\n        var self = _b$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $548 = self.slice(0, -1);\n                var $549 = (2n * Bits$to_nat$($548));\n                var $547 = $549;\n                break;\n            case 'i':\n                var $550 = self.slice(0, -1);\n                var $551 = Nat$succ$((2n * Bits$to_nat$($550)));\n                var $547 = $551;\n                break;\n            case 'e':\n                var $552 = 0n;\n                var $547 = $552;\n                break;\n        };\n        return $547;\n    };\n    const Bits$to_nat = x0 => Bits$to_nat$(x0);\n\n    function NatMap$to_list$(_xs$2) {\n        var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));\n        var $553 = List$mapped$(_kvs$3, (_kv$4 => {\n            var self = _kv$4;\n            switch (self._) {\n                case 'Pair.new':\n                    var $555 = self.fst;\n                    var $556 = self.snd;\n                    var $557 = Pair$new$(Bits$to_nat$($555), $556);\n                    var $554 = $557;\n                    break;\n            };\n            return $554;\n        }));\n        return $553;\n    };\n    const NatMap$to_list = x0 => NatMap$to_list$(x0);\n\n    function List$map$(_f$3, _as$4) {\n        var self = _as$4;\n        switch (self._) {\n            case 'List.cons':\n                var $559 = self.head;\n                var $560 = self.tail;\n                var $561 = List$cons$(_f$3($559), List$map$(_f$3, $560));\n                var $558 = $561;\n                break;\n            case 'List.nil':\n                var $562 = List$nil;\n                var $558 = $562;\n                break;\n        };\n        return $558;\n    };\n    const List$map = x0 => x1 => List$map$(x0, x1);\n\n    function Web$Kaelin$Coord$Convert$cubic_to_axial$(_coord$1) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.Cubic.new':\n                var $564 = self.x;\n                var $565 = self.z;\n                var _i$5 = $564;\n                var _j$6 = $565;\n                var $566 = Web$Kaelin$Coord$new$(_i$5, _j$6);\n                var $563 = $566;\n                break;\n        };\n        return $563;\n    };\n    const Web$Kaelin$Coord$Convert$cubic_to_axial = x0 => Web$Kaelin$Coord$Convert$cubic_to_axial$(x0);\n    const I32$add = a0 => a1 => ((a0 + a1) >> 0);\n\n    function Cmp$as_ltn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $568 = Bool$true;\n                var $567 = $568;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $569 = Bool$false;\n                var $567 = $569;\n                break;\n        };\n        return $567;\n    };\n    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);\n\n    function Word$s_ltn$(_a$2, _b$3) {\n        var _neg_a$4 = Word$is_neg$(_a$2);\n        var _neg_b$5 = Word$is_neg$(_b$3);\n        var self = _neg_a$4;\n        if (self) {\n            var self = _neg_b$5;\n            if (self) {\n                var $572 = Cmp$as_ltn$(Cmp$inv$(Word$cmp$(_a$2, _b$3)));\n                var $571 = $572;\n            } else {\n                var $573 = Bool$true;\n                var $571 = $573;\n            };\n            var $570 = $571;\n        } else {\n            var self = _neg_b$5;\n            if (self) {\n                var $575 = Bool$false;\n                var $574 = $575;\n            } else {\n                var $576 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));\n                var $574 = $576;\n            };\n            var $570 = $574;\n        };\n        return $570;\n    };\n    const Word$s_ltn = x0 => x1 => Word$s_ltn$(x0, x1);\n    const I32$ltn = a0 => a1 => (a0 < a1);\n\n    function I32$min$(_a$1, _b$2) {\n        var self = (_a$1 < _b$2);\n        if (self) {\n            var $578 = _a$1;\n            var $577 = $578;\n        } else {\n            var $579 = _b$2;\n            var $577 = $579;\n        };\n        return $577;\n    };\n    const I32$min = x0 => x1 => I32$min$(x0, x1);\n\n    function Web$Kaelin$Coord$Cubic$add$(_a$1, _b$2) {\n        var self = _a$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.Cubic.new':\n                var $581 = self.x;\n                var $582 = self.y;\n                var $583 = self.z;\n                var self = _b$2;\n                switch (self._) {\n                    case 'Web.Kaelin.Coord.Cubic.new':\n                        var $585 = self.x;\n                        var $586 = self.y;\n                        var $587 = self.z;\n                        var _x$9 = (($581 + $585) >> 0);\n                        var _y$10 = (($582 + $586) >> 0);\n                        var _z$11 = (($583 + $587) >> 0);\n                        var $588 = Web$Kaelin$Coord$Cubic$new$(_x$9, _y$10, _z$11);\n                        var $584 = $588;\n                        break;\n                };\n                var $580 = $584;\n                break;\n        };\n        return $580;\n    };\n    const Web$Kaelin$Coord$Cubic$add = x0 => x1 => Web$Kaelin$Coord$Cubic$add$(x0, x1);\n\n    function List$concat$(_as$2, _bs$3) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $590 = self.head;\n                var $591 = self.tail;\n                var $592 = List$cons$($590, List$concat$($591, _bs$3));\n                var $589 = $592;\n                break;\n            case 'List.nil':\n                var $593 = _bs$3;\n                var $589 = $593;\n                break;\n        };\n        return $589;\n    };\n    const List$concat = x0 => x1 => List$concat$(x0, x1);\n\n    function Web$Kaelin$Coord$Cubic$range$(_coord$1, _distance$2) {\n        var _distance_32$3 = (Number(_distance$2) >>> 0);\n        var _distance_i32$4 = U32$to_i32$(_distance_32$3);\n        var _double_distance$5 = ((((_distance_32$3 * 2) >>> 0) + 1) >>> 0);\n        var _result$6 = List$nil;\n        var _result$7 = (() => {\n            var $595 = _result$6;\n            var $596 = 0;\n            var $597 = _double_distance$5;\n            let _result$8 = $595;\n            for (let _j$7 = $596; _j$7 < $597; ++_j$7) {\n                var _negative_distance$9 = ((-_distance_i32$4));\n                var _positive_distance$10 = _distance_i32$4;\n                var _x$11 = ((U32$to_i32$(_j$7) - _positive_distance$10) >> 0);\n                var _max$12 = I32$max$(_negative_distance$9, ((((-_x$11)) + _negative_distance$9) >> 0));\n                var _min$13 = I32$min$(_positive_distance$10, ((((-_x$11)) + _positive_distance$10) >> 0));\n                var _distance_between_max_min$14 = ((1 + I32$to_u32$(I32$abs$(((_max$12 - _min$13) >> 0)))) >>> 0);\n                var _result$15 = (() => {\n                    var $598 = _result$8;\n                    var $599 = 0;\n                    var $600 = _distance_between_max_min$14;\n                    let _result$16 = $598;\n                    for (let _i$15 = $599; _i$15 < $600; ++_i$15) {\n                        var _y$17 = ((U32$to_i32$(_i$15) + _max$12) >> 0);\n                        var _z$18 = ((((-_x$11)) - _y$17) >> 0);\n                        var _new_coord$19 = Web$Kaelin$Coord$Cubic$add$(_coord$1, Web$Kaelin$Coord$Cubic$new$(_x$11, _y$17, _z$18));\n                        var _result$20 = List$concat$(_result$16, List$cons$(_new_coord$19, List$nil));\n                        var $598 = _result$20;\n                        _result$16 = $598;\n                    };\n                    return _result$16;\n                })();\n                var $595 = _result$15;\n                _result$8 = $595;\n            };\n            return _result$8;\n        })();\n        var $594 = _result$7;\n        return $594;\n    };\n    const Web$Kaelin$Coord$Cubic$range = x0 => x1 => Web$Kaelin$Coord$Cubic$range$(x0, x1);\n\n    function Web$Kaelin$Coord$Axial$range$(_a$1, _distance$2) {\n        var _ab$3 = Web$Kaelin$Coord$Convert$axial_to_cubic$(_a$1);\n        var _d$4 = _distance$2;\n        var $601 = List$map$(Web$Kaelin$Coord$Convert$cubic_to_axial, Web$Kaelin$Coord$Cubic$range$(_ab$3, _d$4));\n        return $601;\n    };\n    const Web$Kaelin$Coord$Axial$range = x0 => x1 => Web$Kaelin$Coord$Axial$range$(x0, x1);\n\n    function List$filter$(_f$2, _xs$3) {\n        var self = _xs$3;\n        switch (self._) {\n            case 'List.cons':\n                var $603 = self.head;\n                var $604 = self.tail;\n                var self = _f$2($603);\n                if (self) {\n                    var $606 = List$cons$($603, List$filter$(_f$2, $604));\n                    var $605 = $606;\n                } else {\n                    var $607 = List$filter$(_f$2, $604);\n                    var $605 = $607;\n                };\n                var $602 = $605;\n                break;\n            case 'List.nil':\n                var $608 = List$nil;\n                var $602 = $608;\n                break;\n        };\n        return $602;\n    };\n    const List$filter = x0 => x1 => List$filter$(x0, x1);\n\n    function Web$Kaelin$Coord$range$(_coord$1, _distance$2) {\n        var _list_coords$3 = Web$Kaelin$Coord$Axial$range$(_coord$1, _distance$2);\n        var _fit$4 = (_x$4 => {\n            var $610 = Web$Kaelin$Coord$fit$(_x$4, Web$Kaelin$Constants$map_size);\n            return $610;\n        });\n        var $609 = List$filter$(_fit$4, _list_coords$3);\n        return $609;\n    };\n    const Web$Kaelin$Coord$range = x0 => x1 => Web$Kaelin$Coord$range$(x0, x1);\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function Bits$tail$(_a$1) {\n        var self = _a$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $612 = self.slice(0, -1);\n                var $613 = $612;\n                var $611 = $613;\n                break;\n            case 'i':\n                var $614 = self.slice(0, -1);\n                var $615 = $614;\n                var $611 = $615;\n                break;\n            case 'e':\n                var $616 = Bits$e;\n                var $611 = $616;\n                break;\n        };\n        return $611;\n    };\n    const Bits$tail = x0 => Bits$tail$(x0);\n\n    function Bits$shift_right$(_n$1, _value$2) {\n        var Bits$shift_right$ = (_n$1, _value$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _value$2]\n        });\n        var Bits$shift_right = _n$1 => _value$2 => Bits$shift_right$(_n$1, _value$2);\n        var arg = [_n$1, _value$2];\n        while (true) {\n            let [_n$1, _value$2] = arg;\n            var R = (() => {\n                var self = _n$1;\n                if (self === 0n) {\n                    var $617 = _value$2;\n                    return $617;\n                } else {\n                    var $618 = (self - 1n);\n                    var $619 = Bits$shift_right$($618, Bits$tail$(_value$2));\n                    return $619;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$shift_right = x0 => x1 => Bits$shift_right$(x0, x1);\n\n    function Bits$add$(_a$1, _b$2) {\n        var self = _b$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $621 = self.slice(0, -1);\n                var self = _a$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $623 = self.slice(0, -1);\n                        var $624 = (Bits$add$($623, $621) + '0');\n                        var $622 = $624;\n                        break;\n                    case 'i':\n                        var $625 = self.slice(0, -1);\n                        var $626 = (Bits$add$($625, $621) + '1');\n                        var $622 = $626;\n                        break;\n                    case 'e':\n                        var $627 = _b$2;\n                        var $622 = $627;\n                        break;\n                };\n                var $620 = $622;\n                break;\n            case 'i':\n                var $628 = self.slice(0, -1);\n                var self = _a$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $630 = self.slice(0, -1);\n                        var $631 = (Bits$add$($630, $628) + '1');\n                        var $629 = $631;\n                        break;\n                    case 'i':\n                        var $632 = self.slice(0, -1);\n                        var $633 = (Bits$add$(Bits$inc$($632), $628) + '0');\n                        var $629 = $633;\n                        break;\n                    case 'e':\n                        var $634 = _b$2;\n                        var $629 = $634;\n                        break;\n                };\n                var $620 = $629;\n                break;\n            case 'e':\n                var $635 = _a$1;\n                var $620 = $635;\n                break;\n        };\n        return $620;\n    };\n    const Bits$add = x0 => x1 => Bits$add$(x0, x1);\n\n    function Bits$size$go$(_bits$1, _n$2, _s$3) {\n        var Bits$size$go$ = (_bits$1, _n$2, _s$3) => ({\n            ctr: 'TCO',\n            arg: [_bits$1, _n$2, _s$3]\n        });\n        var Bits$size$go = _bits$1 => _n$2 => _s$3 => Bits$size$go$(_bits$1, _n$2, _s$3);\n        var arg = [_bits$1, _n$2, _s$3];\n        while (true) {\n            let [_bits$1, _n$2, _s$3] = arg;\n            var R = (() => {\n                var self = _bits$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $636 = self.slice(0, -1);\n                        var $637 = Bits$size$go$($636, Nat$succ$(_n$2), _s$3);\n                        return $637;\n                    case 'i':\n                        var $638 = self.slice(0, -1);\n                        var $639 = Bits$size$go$($638, Nat$succ$(_n$2), Nat$succ$(_n$2));\n                        return $639;\n                    case 'e':\n                        var $640 = _s$3;\n                        return $640;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$size$go = x0 => x1 => x2 => Bits$size$go$(x0, x1, x2);\n\n    function Bits$size$(_bits$1) {\n        var $641 = Bits$size$go$(_bits$1, 0n, 0n);\n        return $641;\n    };\n    const Bits$size = x0 => Bits$size$(x0);\n\n    function Bits$shift_left$(_n$1, _value$2) {\n        var self = _n$1;\n        if (self === 0n) {\n            var $643 = _value$2;\n            var $642 = $643;\n        } else {\n            var $644 = (self - 1n);\n            var $645 = (Bits$shift_left$($644, _value$2) + '0');\n            var $642 = $645;\n        };\n        return $642;\n    };\n    const Bits$shift_left = x0 => x1 => Bits$shift_left$(x0, x1);\n\n    function Bits$cmp$go$(_a$1, _b$2, _c$3) {\n        var Bits$cmp$go$ = (_a$1, _b$2, _c$3) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _b$2, _c$3]\n        });\n        var Bits$cmp$go = _a$1 => _b$2 => _c$3 => Bits$cmp$go$(_a$1, _b$2, _c$3);\n        var arg = [_a$1, _b$2, _c$3];\n        while (true) {\n            let [_a$1, _b$2, _c$3] = arg;\n            var R = (() => {\n                var self = _a$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $646 = self.slice(0, -1);\n                        var self = _b$2;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $648 = self.slice(0, -1);\n                                var $649 = Bits$cmp$go$($646, $648, _c$3);\n                                var $647 = $649;\n                                break;\n                            case 'i':\n                                var $650 = self.slice(0, -1);\n                                var $651 = Bits$cmp$go$($646, $650, Cmp$ltn);\n                                var $647 = $651;\n                                break;\n                            case 'e':\n                                var $652 = Bits$cmp$go$($646, Bits$e, _c$3);\n                                var $647 = $652;\n                                break;\n                        };\n                        return $647;\n                    case 'i':\n                        var $653 = self.slice(0, -1);\n                        var self = _b$2;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $655 = self.slice(0, -1);\n                                var $656 = Bits$cmp$go$($653, $655, Cmp$gtn);\n                                var $654 = $656;\n                                break;\n                            case 'i':\n                                var $657 = self.slice(0, -1);\n                                var $658 = Bits$cmp$go$($653, $657, _c$3);\n                                var $654 = $658;\n                                break;\n                            case 'e':\n                                var $659 = Cmp$gtn;\n                                var $654 = $659;\n                                break;\n                        };\n                        return $654;\n                    case 'e':\n                        var self = _b$2;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $661 = self.slice(0, -1);\n                                var $662 = Bits$cmp$go$(Bits$e, $661, _c$3);\n                                var $660 = $662;\n                                break;\n                            case 'e':\n                                var $663 = _c$3;\n                                var $660 = $663;\n                                break;\n                            case 'i':\n                                var $664 = Cmp$ltn;\n                                var $660 = $664;\n                                break;\n                        };\n                        return $660;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$cmp$go = x0 => x1 => x2 => Bits$cmp$go$(x0, x1, x2);\n\n    function Bits$cmp$(_a$1, _b$2) {\n        var $665 = Bits$cmp$go$(_a$1, _b$2, Cmp$eql);\n        return $665;\n    };\n    const Bits$cmp = x0 => x1 => Bits$cmp$(x0, x1);\n\n    function Bits$gte$(_a$1, _b$2) {\n        var $666 = Cmp$as_gte$(Bits$cmp$(_a$1, _b$2));\n        return $666;\n    };\n    const Bits$gte = x0 => x1 => Bits$gte$(x0, x1);\n\n    function Bits$sub$go$(_a$1, _b$2, _bits$3) {\n        var Bits$sub$go$ = (_a$1, _b$2, _bits$3) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _b$2, _bits$3]\n        });\n        var Bits$sub$go = _a$1 => _b$2 => _bits$3 => Bits$sub$go$(_a$1, _b$2, _bits$3);\n        var arg = [_a$1, _b$2, _bits$3];\n        while (true) {\n            let [_a$1, _b$2, _bits$3] = arg;\n            var R = (() => {\n                var self = _b$2;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $667 = self.slice(0, -1);\n                        var self = _a$1;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $669 = self.slice(0, -1);\n                                var $670 = Bits$sub$go$($669, $667, (_bits$3 + '0'));\n                                var $668 = $670;\n                                break;\n                            case 'i':\n                                var $671 = self.slice(0, -1);\n                                var $672 = Bits$sub$go$($671, $667, (_bits$3 + '1'));\n                                var $668 = $672;\n                                break;\n                            case 'e':\n                                var $673 = Bits$sub$go$(_a$1, $667, (_bits$3 + '0'));\n                                var $668 = $673;\n                                break;\n                        };\n                        return $668;\n                    case 'i':\n                        var $674 = self.slice(0, -1);\n                        var self = _a$1;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $676 = self.slice(0, -1);\n                                var $677 = Bits$sub$go$($676, Bits$inc$($674), (_bits$3 + '1'));\n                                var $675 = $677;\n                                break;\n                            case 'i':\n                                var $678 = self.slice(0, -1);\n                                var $679 = Bits$sub$go$($678, $674, (_bits$3 + '0'));\n                                var $675 = $679;\n                                break;\n                            case 'e':\n                                var $680 = Bits$e;\n                                var $675 = $680;\n                                break;\n                        };\n                        return $675;\n                    case 'e':\n                        var self = _a$1;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $682 = self.slice(0, -1);\n                                var $683 = Bits$sub$go$($682, _b$2, (_bits$3 + '0'));\n                                var $681 = $683;\n                                break;\n                            case 'i':\n                                var $684 = self.slice(0, -1);\n                                var $685 = Bits$sub$go$($684, _b$2, (_bits$3 + '1'));\n                                var $681 = $685;\n                                break;\n                            case 'e':\n                                var $686 = _bits$3;\n                                var $681 = $686;\n                                break;\n                        };\n                        return $681;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$sub$go = x0 => x1 => x2 => Bits$sub$go$(x0, x1, x2);\n\n    function Bits$sub$(_a$1, _b$2) {\n        var $687 = Bits$reverse$(Bits$sub$go$(_a$1, _b$2, Bits$e));\n        return $687;\n    };\n    const Bits$sub = x0 => x1 => Bits$sub$(x0, x1);\n\n    function Bits$div$go$(_shift$1, _sub_copy$2, _shift_copy$3, _value$4) {\n        var Bits$div$go$ = (_shift$1, _sub_copy$2, _shift_copy$3, _value$4) => ({\n            ctr: 'TCO',\n            arg: [_shift$1, _sub_copy$2, _shift_copy$3, _value$4]\n        });\n        var Bits$div$go = _shift$1 => _sub_copy$2 => _shift_copy$3 => _value$4 => Bits$div$go$(_shift$1, _sub_copy$2, _shift_copy$3, _value$4);\n        var arg = [_shift$1, _sub_copy$2, _shift_copy$3, _value$4];\n        while (true) {\n            let [_shift$1, _sub_copy$2, _shift_copy$3, _value$4] = arg;\n            var R = (() => {\n                var self = Bits$gte$(_sub_copy$2, _shift_copy$3);\n                if (self) {\n                    var $688 = Pair$new$(Bool$true, (_value$4 + '1'));\n                    var self = $688;\n                } else {\n                    var $689 = Pair$new$(Bool$false, (_value$4 + '0'));\n                    var self = $689;\n                };\n                switch (self._) {\n                    case 'Pair.new':\n                        var $690 = self.fst;\n                        var $691 = self.snd;\n                        var self = _shift$1;\n                        if (self === 0n) {\n                            var $693 = $691;\n                            var $692 = $693;\n                        } else {\n                            var $694 = (self - 1n);\n                            var _new_shift_copy$8 = Bits$shift_right$(1n, _shift_copy$3);\n                            var self = $690;\n                            if (self) {\n                                var $696 = Bits$sub$(_sub_copy$2, _shift_copy$3);\n                                var _new_sub_copy$9 = $696;\n                            } else {\n                                var $697 = _sub_copy$2;\n                                var _new_sub_copy$9 = $697;\n                            };\n                            var $695 = Bits$div$go$($694, _new_sub_copy$9, _new_shift_copy$8, $691);\n                            var $692 = $695;\n                        };\n                        return $692;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$div$go = x0 => x1 => x2 => x3 => Bits$div$go$(x0, x1, x2, x3);\n\n    function Bits$div$(_a$1, _b$2) {\n        var _a_size$3 = Bits$size$(_a$1);\n        var _b_size$4 = Bits$size$(_b$2);\n        var self = (_a_size$3 < _b_size$4);\n        if (self) {\n            var $699 = (Bits$e + '0');\n            var $698 = $699;\n        } else {\n            var _shift$5 = (_a_size$3 - _b_size$4 <= 0n ? 0n : _a_size$3 - _b_size$4);\n            var _shift_copy$6 = Bits$shift_left$(_shift$5, _b$2);\n            var $700 = Bits$div$go$(_shift$5, _a$1, _shift_copy$6, Bits$e);\n            var $698 = $700;\n        };\n        return $698;\n    };\n    const Bits$div = x0 => x1 => Bits$div$(x0, x1);\n\n    function Bits$ltn$(_a$1, _b$2) {\n        var $701 = Cmp$as_ltn$(Bits$cmp$(_a$1, _b$2));\n        return $701;\n    };\n    const Bits$ltn = x0 => x1 => Bits$ltn$(x0, x1);\n\n    function Maybe$unfold$(_B$1, _f$2, _b$3) {\n        var Maybe$unfold$ = (_B$1, _f$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_B$1, _f$2, _b$3]\n        });\n        var Maybe$unfold = _B$1 => _f$2 => _b$3 => Maybe$unfold$(_B$1, _f$2, _b$3);\n        var arg = [_B$1, _f$2, _b$3];\n        while (true) {\n            let [_B$1, _f$2, _b$3] = arg;\n            var R = (() => {\n                var self = _f$2(_b$3);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $702 = self.value;\n                        var $703 = Maybe$unfold$(null, _f$2, $702);\n                        return $703;\n                    case 'Maybe.none':\n                        var $704 = _b$3;\n                        return $704;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Maybe$unfold = x0 => x1 => x2 => Maybe$unfold$(x0, x1, x2);\n\n    function Bits$sqrt$(_s$1) {\n        var _aproximation$2 = (_x$2 => {\n            var $706 = Bits$shift_right$(1n, Bits$add$(_x$2, Bits$div$(_s$1, _x$2)));\n            return $706;\n        });\n        var _accumulator$3 = (_x$3 => {\n            var _x1$4 = _aproximation$2(_x$3);\n            var self = Bits$ltn$(_x1$4, _x$3);\n            if (self) {\n                var $708 = Maybe$some$(_aproximation$2(_x1$4));\n                var $707 = $708;\n            } else {\n                var $709 = Maybe$none;\n                var $707 = $709;\n            };\n            return $707;\n        });\n        var $705 = Maybe$unfold$(null, _accumulator$3, Bits$shift_right$(1n, _s$1));\n        return $705;\n    };\n    const Bits$sqrt = x0 => Bits$sqrt$(x0);\n\n    function Nat$sqrt$(_x$1) {\n        var _n$2 = (nat_to_bits(_x$1));\n        var $710 = Bits$to_nat$(Bits$sqrt$(_n$2));\n        return $710;\n    };\n    const Nat$sqrt = x0 => Nat$sqrt$(x0);\n    const Nat$pow = a0 => a1 => (a0 ** a1);\n\n    function Arith$N_to_NxN$(_n$1) {\n        var _w$2 = ((Nat$sqrt$(((8n * _n$1) + 1n)) - 1n <= 0n ? 0n : Nat$sqrt$(((8n * _n$1) + 1n)) - 1n) / 2n);\n        var _t$3 = (((_w$2 ** 2n) + _w$2) / 2n);\n        var _y$4 = (_n$1 - _t$3 <= 0n ? 0n : _n$1 - _t$3);\n        var $711 = Pair$new$((_w$2 - _y$4 <= 0n ? 0n : _w$2 - _y$4), _y$4);\n        return $711;\n    };\n    const Arith$N_to_NxN = x0 => Arith$N_to_NxN$(x0);\n    const Nat$eql = a0 => a1 => (a0 === a1);\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $712 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $712;\n                } else {\n                    var $713 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $715 = _r$3;\n                        var $714 = $715;\n                    } else {\n                        var $716 = (self - 1n);\n                        var $717 = Nat$mod$go$($716, $713, Nat$succ$(_r$3));\n                        var $714 = $717;\n                    };\n                    return $714;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n\n    function Int$is_neg$(_a$1) {\n        var self = _a$1;\n        switch (\"new\") {\n            case 'new':\n                var $719 = int_pos(self);\n                var $720 = int_neg(self);\n                var $721 = ($720 > $719);\n                var $718 = $721;\n                break;\n        };\n        return $718;\n    };\n    const Int$is_neg = x0 => Int$is_neg$(x0);\n\n    function Int$abs$(_a$1) {\n        var _neg$2 = Int$is_neg$(_a$1);\n        var self = _neg$2;\n        if (self) {\n            var _a$3 = Int$neg$(_a$1);\n            var self = _a$3;\n            switch (\"new\") {\n                case 'new':\n                    var $724 = int_pos(self);\n                    var $725 = $724;\n                    var $723 = $725;\n                    break;\n            };\n            var $722 = $723;\n        } else {\n            var self = _a$1;\n            switch (\"new\") {\n                case 'new':\n                    var $727 = int_pos(self);\n                    var $728 = $727;\n                    var $726 = $728;\n                    break;\n            };\n            var $722 = $726;\n        };\n        return $722;\n    };\n    const Int$abs = x0 => Int$abs$(x0);\n\n    function Int$to_nat_signed$(_a$1) {\n        var $729 = Pair$new$(Int$is_neg$(_a$1), Int$abs$(_a$1));\n        return $729;\n    };\n    const Int$to_nat_signed = x0 => Int$to_nat_signed$(x0);\n\n    function Int$div_nat$(_a$1, _n$2) {\n        var self = _a$1;\n        switch (\"new\") {\n            case 'new':\n                var $731 = int_pos(self);\n                var $732 = int_neg(self);\n                var $733 = (($731 / _n$2) - ($732 / _n$2));\n                var $730 = $733;\n                break;\n        };\n        return $730;\n    };\n    const Int$div_nat = x0 => x1 => Int$div_nat$(x0, x1);\n    const Int$div = a0 => a1 => (a0 / a1);\n\n    function Arith$N_to_Z$(_n$1) {\n        var self = ((_n$1 % 2n) === 0n);\n        if (self) {\n            var $735 = (Int$from_nat$(_n$1) / Int$neg$(Int$from_nat$(2n)));\n            var $734 = $735;\n        } else {\n            var $736 = ((Int$from_nat$(_n$1) / Int$from_nat$(2n)) + Int$from_nat$(1n));\n            var $734 = $736;\n        };\n        return $734;\n    };\n    const Arith$N_to_Z = x0 => Arith$N_to_Z$(x0);\n\n    function Web$Kaelin$Coord$Convert$nat_to_axial$(_a$1) {\n        var self = Arith$N_to_NxN$(_a$1);\n        switch (self._) {\n            case 'Pair.new':\n                var $738 = self.fst;\n                var $739 = self.snd;\n                var $740 = Web$Kaelin$Coord$new$(Int$to_i32$(Arith$N_to_Z$($738)), Int$to_i32$(Arith$N_to_Z$($739)));\n                var $737 = $740;\n                break;\n        };\n        return $737;\n    };\n    const Web$Kaelin$Coord$Convert$nat_to_axial = x0 => Web$Kaelin$Coord$Convert$nat_to_axial$(x0);\n    const Web$Kaelin$Constants$hexagon_radius = 15;\n    const F64$div = a0 => a1 => (a0 / a1);\n    const F64$parse = a0 => (parseFloat(a0));\n    const Web$Kaelin$Constants$center_x = 128;\n    const Web$Kaelin$Constants$center_y = 128;\n    const F64$add = a0 => a1 => (a0 + a1);\n    const F64$mul = a0 => a1 => (a0 * a1);\n\n    function Web$Kaelin$Coord$to_screen_xy$(_coord$1) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var $742 = self.i;\n                var $743 = self.j;\n                var _i$4 = $742;\n                var _j$5 = $743;\n                var _i$6 = (_i$4);\n                var _j$7 = (_j$5);\n                var _int_rad$8 = (Web$Kaelin$Constants$hexagon_radius);\n                var _hlf$9 = (_int_rad$8 / (parseFloat(\"+2.0\")));\n                var _int_screen_center_x$10 = (Web$Kaelin$Constants$center_x);\n                var _int_screen_center_y$11 = (Web$Kaelin$Constants$center_y);\n                var _cx$12 = (_int_screen_center_x$10 + (_j$7 * _int_rad$8));\n                var _cx$13 = (_cx$12 + (_i$6 * (_int_rad$8 * (parseFloat(\"+2.0\")))));\n                var _cy$14 = (_int_screen_center_y$11 + (_j$7 * (_hlf$9 * (parseFloat(\"+3.0\")))));\n                var _cx$15 = ((_cx$13 >>> 0));\n                var _cy$16 = (_cy$14 + (parseFloat(\"+0.5\")));\n                var _cy$17 = ((_cy$16 >>> 0));\n                var $744 = Pair$new$(_cx$15, _cy$17);\n                var $741 = $744;\n                break;\n        };\n        return $741;\n    };\n    const Web$Kaelin$Coord$to_screen_xy = x0 => Web$Kaelin$Coord$to_screen_xy$(x0);\n    const U32$sub = a0 => a1 => ((a0 - a1) >>> 0);\n\n    function Web$Kaelin$Draw$support$centralize$(_coord$1) {\n        var self = Web$Kaelin$Coord$to_screen_xy$(_coord$1);\n        switch (self._) {\n            case 'Pair.new':\n                var $746 = self.fst;\n                var $747 = self.snd;\n                var _i$4 = (($746 - Web$Kaelin$Constants$hexagon_radius) >>> 0);\n                var _j$5 = (($747 - Web$Kaelin$Constants$hexagon_radius) >>> 0);\n                var $748 = Pair$new$(_i$4, _j$5);\n                var $745 = $748;\n                break;\n        };\n        return $745;\n    };\n    const Web$Kaelin$Draw$support$centralize = x0 => Web$Kaelin$Draw$support$centralize$(x0);\n\n    function List$any$(_cond$2, _list$3) {\n        var List$any$ = (_cond$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_cond$2, _list$3]\n        });\n        var List$any = _cond$2 => _list$3 => List$any$(_cond$2, _list$3);\n        var arg = [_cond$2, _list$3];\n        while (true) {\n            let [_cond$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $749 = self.head;\n                        var $750 = self.tail;\n                        var self = _cond$2($749);\n                        if (self) {\n                            var $752 = Bool$true;\n                            var $751 = $752;\n                        } else {\n                            var $753 = List$any$(_cond$2, $750);\n                            var $751 = $753;\n                        };\n                        return $751;\n                    case 'List.nil':\n                        var $754 = Bool$false;\n                        return $754;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$any = x0 => x1 => List$any$(x0, x1);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const I32$eql = a0 => a1 => (a0 === a1);\n\n    function Web$Kaelin$Coord$eql$(_a$1, _b$2) {\n        var self = _a$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var $756 = self.i;\n                var $757 = self.j;\n                var self = _b$2;\n                switch (self._) {\n                    case 'Web.Kaelin.Coord.new':\n                        var $759 = self.i;\n                        var $760 = self.j;\n                        var $761 = (($756 === $759) && ($757 === $760));\n                        var $758 = $761;\n                        break;\n                };\n                var $755 = $758;\n                break;\n        };\n        return $755;\n    };\n    const Web$Kaelin$Coord$eql = x0 => x1 => Web$Kaelin$Coord$eql$(x0, x1);\n\n    function Web$Kaelin$Draw$support$which_effect$(_coord$1, _cast_info$2, _range_list$3) {\n        var self = _cast_info$2;\n        switch (self._) {\n            case 'Web.Kaelin.CastInfo.new':\n                var $763 = self.hex_effect;\n                var _is_in_range$8 = List$any$(Web$Kaelin$Coord$eql(_coord$1), _range_list$3);\n                var self = _is_in_range$8;\n                if (self) {\n                    var $765 = $763;\n                    var $764 = $765;\n                } else {\n                    var $766 = Web$Kaelin$HexEffect$normal;\n                    var $764 = $766;\n                };\n                var $762 = $764;\n                break;\n        };\n        return $762;\n    };\n    const Web$Kaelin$Draw$support$which_effect = x0 => x1 => x2 => Web$Kaelin$Draw$support$which_effect$(x0, x1, x2);\n    const F64$sub = a0 => a1 => (a0 - a1);\n\n    function Web$Kaelin$Coord$round$floor$(_n$1) {\n        var $767 = (((_n$1 >> 0)));\n        return $767;\n    };\n    const Web$Kaelin$Coord$round$floor = x0 => Web$Kaelin$Coord$round$floor$(x0);\n\n    function Web$Kaelin$Coord$round$round_F64$(_n$1) {\n        var _half$2 = (parseFloat(\"+0.5\"));\n        var _big_number$3 = (parseFloat(\"+1000.0\"));\n        var _n$4 = (_n$1 + _big_number$3);\n        var _result$5 = Web$Kaelin$Coord$round$floor$((_n$4 + _half$2));\n        var $768 = (_result$5 - _big_number$3);\n        return $768;\n    };\n    const Web$Kaelin$Coord$round$round_F64 = x0 => Web$Kaelin$Coord$round$round_F64$(x0);\n\n    function Word$gtn$(_a$2, _b$3) {\n        var $769 = Cmp$as_gtn$(Word$cmp$(_a$2, _b$3));\n        return $769;\n    };\n    const Word$gtn = x0 => x1 => Word$gtn$(x0, x1);\n\n    function F64$gtn$(_a$1, _b$2) {\n        var self = _a$1;\n        switch ('f64') {\n            case 'f64':\n                var $771 = f64_to_word(self);\n                var self = _b$2;\n                switch ('f64') {\n                    case 'f64':\n                        var $773 = f64_to_word(self);\n                        var $774 = Word$gtn$($771, $773);\n                        var $772 = $774;\n                        break;\n                };\n                var $770 = $772;\n                break;\n        };\n        return $770;\n    };\n    const F64$gtn = x0 => x1 => F64$gtn$(x0, x1);\n\n    function Web$Kaelin$Coord$round$diff$(_x$1, _y$2) {\n        var _big_number$3 = (parseFloat(\"+1000.0\"));\n        var _x$4 = (_x$1 + _big_number$3);\n        var _y$5 = (_y$2 + _big_number$3);\n        var self = F64$gtn$(_x$4, _y$5);\n        if (self) {\n            var $776 = (_x$4 - _y$5);\n            var $775 = $776;\n        } else {\n            var $777 = (_y$5 - _x$4);\n            var $775 = $777;\n        };\n        return $775;\n    };\n    const Web$Kaelin$Coord$round$diff = x0 => x1 => Web$Kaelin$Coord$round$diff$(x0, x1);\n\n    function Web$Kaelin$Coord$round$(_axial_x$1, _axial_y$2) {\n        var _f$3 = U32$to_f64;\n        var _i$4 = F64$to_i32;\n        var _axial_z$5 = ((_f$3(0) - _axial_x$1) - _axial_y$2);\n        var _round_x$6 = Web$Kaelin$Coord$round$round_F64$(_axial_x$1);\n        var _round_y$7 = Web$Kaelin$Coord$round$round_F64$(_axial_y$2);\n        var _round_z$8 = Web$Kaelin$Coord$round$round_F64$(_axial_z$5);\n        var _diff_x$9 = Web$Kaelin$Coord$round$diff$(_axial_x$1, _round_x$6);\n        var _diff_y$10 = Web$Kaelin$Coord$round$diff$(_axial_y$2, _round_y$7);\n        var _diff_z$11 = Web$Kaelin$Coord$round$diff$(_axial_z$5, _round_z$8);\n        var self = F64$gtn$(_diff_x$9, _diff_z$11);\n        if (self) {\n            var self = F64$gtn$(_diff_y$10, _diff_x$9);\n            if (self) {\n                var _new_y$12 = ((_f$3(0) - _round_x$6) - _round_z$8);\n                var $780 = Pair$new$(_i$4(_round_x$6), _i$4(_new_y$12));\n                var $779 = $780;\n            } else {\n                var _new_x$12 = ((_f$3(0) - _round_y$7) - _round_z$8);\n                var $781 = Pair$new$(_i$4(_new_x$12), _i$4(_round_y$7));\n                var $779 = $781;\n            };\n            var _result$12 = $779;\n        } else {\n            var self = F64$gtn$(_diff_y$10, _diff_z$11);\n            if (self) {\n                var _new_y$12 = ((_f$3(0) - _round_x$6) - _round_z$8);\n                var $783 = Pair$new$(_i$4(_round_x$6), _i$4(_new_y$12));\n                var $782 = $783;\n            } else {\n                var $784 = Pair$new$(_i$4(_round_x$6), _i$4(_round_y$7));\n                var $782 = $784;\n            };\n            var _result$12 = $782;\n        };\n        var $778 = _result$12;\n        return $778;\n    };\n    const Web$Kaelin$Coord$round = x0 => x1 => Web$Kaelin$Coord$round$(x0, x1);\n\n    function Web$Kaelin$Coord$to_axial$(_coord$1) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Pair.new':\n                var $786 = self.fst;\n                var $787 = self.snd;\n                var _f$4 = U32$to_f64;\n                var _i$5 = F64$to_i32;\n                var _float_hex_rad$6 = (_f$4(Web$Kaelin$Constants$hexagon_radius) / (parseFloat(\"+2.0\")));\n                var _center_x$7 = Web$Kaelin$Constants$center_x;\n                var _center_y$8 = Web$Kaelin$Constants$center_y;\n                var _float_x$9 = ((_f$4($786) - _f$4(_center_x$7)) / _float_hex_rad$6);\n                var _float_y$10 = ((_f$4($787) - _f$4(_center_y$8)) / _float_hex_rad$6);\n                var _fourth$11 = (parseFloat(\"+0.25\"));\n                var _sixth$12 = ((parseFloat(\"+1.0\")) / (parseFloat(\"+6.0\")));\n                var _third$13 = ((parseFloat(\"+1.0\")) / (parseFloat(\"+3.0\")));\n                var _half$14 = (parseFloat(\"+0.5\"));\n                var _axial_x$15 = ((_float_x$9 * _fourth$11) - (_float_y$10 * _sixth$12));\n                var _axial_y$16 = (_float_y$10 * _third$13);\n                var self = Web$Kaelin$Coord$round$(_axial_x$15, _axial_y$16);\n                switch (self._) {\n                    case 'Pair.new':\n                        var $789 = self.fst;\n                        var $790 = self.snd;\n                        var $791 = Web$Kaelin$Coord$new$($789, $790);\n                        var $788 = $791;\n                        break;\n                };\n                var $785 = $788;\n                break;\n        };\n        return $785;\n    };\n    const Web$Kaelin$Coord$to_axial = x0 => Web$Kaelin$Coord$to_axial$(x0);\n\n    function Web$Kaelin$Draw$support$mouse_on_coord$(_coord$1, _env_info$2) {\n        var self = _env_info$2;\n        switch (self._) {\n            case 'App.EnvInfo.new':\n                var $793 = self.mouse_pos;\n                var _mouse_pos$5 = Web$Kaelin$Coord$to_axial$($793);\n                var $794 = Web$Kaelin$Coord$eql$(_coord$1, _mouse_pos$5);\n                var $792 = $794;\n                break;\n        };\n        return $792;\n    };\n    const Web$Kaelin$Draw$support$mouse_on_coord = x0 => x1 => Web$Kaelin$Draw$support$mouse_on_coord$(x0, x1);\n\n    function Web$Kaelin$Terrain$Sprite$new$(_effect$1, _mouse_over$2) {\n        var $795 = ({\n            _: 'Web.Kaelin.Terrain.Sprite.new',\n            'effect': _effect$1,\n            'mouse_over': _mouse_over$2\n        });\n        return $795;\n    };\n    const Web$Kaelin$Terrain$Sprite$new = x0 => x1 => Web$Kaelin$Terrain$Sprite$new$(x0, x1);\n\n    function VoxBox$get_len$(_img$1) {\n        var self = _img$1;\n        switch (self._) {\n            case 'VoxBox.new':\n                var $797 = self.length;\n                var $798 = $797;\n                var $796 = $798;\n                break;\n        };\n        return $796;\n    };\n    const VoxBox$get_len = x0 => VoxBox$get_len$(x0);\n\n    function Array$get$(_idx$3, _arr$4) {\n        var $799 = Word$foldl$(Array$extract_tip, (_rec$6 => _arr$7 => {\n            var _arr_l$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_l$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $801 = self.fst;\n                    var $802 = _rec$6($801);\n                    var $800 = $802;\n                    break;\n            };\n            return $800;\n        }), (_rec$6 => _arr$7 => {\n            var _arr_r$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_r$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $804 = self.snd;\n                    var $805 = _rec$6($804);\n                    var $803 = $805;\n                    break;\n            };\n            return $803;\n        }), _idx$3)(_arr$4);\n        return $799;\n    };\n    const Array$get = x0 => x1 => Array$get$(x0, x1);\n    const Buffer32$get = a0 => a1 => ((a1[a0]));\n    const VoxBox$get_pos = a0 => a1 => ((a1.buffer[a0 * 2]));\n    const VoxBox$get_col = a0 => a1 => ((a1.buffer[a0 * 2 + 1]));\n\n    function Word$and$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $807 = self.pred;\n                var $808 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $810 = self.pred;\n                            var $811 = (_a$pred$9 => {\n                                var $812 = Word$o$(Word$and$(_a$pred$9, $810));\n                                return $812;\n                            });\n                            var $809 = $811;\n                            break;\n                        case 'Word.i':\n                            var $813 = self.pred;\n                            var $814 = (_a$pred$9 => {\n                                var $815 = Word$o$(Word$and$(_a$pred$9, $813));\n                                return $815;\n                            });\n                            var $809 = $814;\n                            break;\n                        case 'Word.e':\n                            var $816 = (_a$pred$7 => {\n                                var $817 = Word$e;\n                                return $817;\n                            });\n                            var $809 = $816;\n                            break;\n                    };\n                    var $809 = $809($807);\n                    return $809;\n                });\n                var $806 = $808;\n                break;\n            case 'Word.i':\n                var $818 = self.pred;\n                var $819 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $821 = self.pred;\n                            var $822 = (_a$pred$9 => {\n                                var $823 = Word$o$(Word$and$(_a$pred$9, $821));\n                                return $823;\n                            });\n                            var $820 = $822;\n                            break;\n                        case 'Word.i':\n                            var $824 = self.pred;\n                            var $825 = (_a$pred$9 => {\n                                var $826 = Word$i$(Word$and$(_a$pred$9, $824));\n                                return $826;\n                            });\n                            var $820 = $825;\n                            break;\n                        case 'Word.e':\n                            var $827 = (_a$pred$7 => {\n                                var $828 = Word$e;\n                                return $828;\n                            });\n                            var $820 = $827;\n                            break;\n                    };\n                    var $820 = $820($818);\n                    return $820;\n                });\n                var $806 = $819;\n                break;\n            case 'Word.e':\n                var $829 = (_b$4 => {\n                    var $830 = Word$e;\n                    return $830;\n                });\n                var $806 = $829;\n                break;\n        };\n        var $806 = $806(_b$3);\n        return $806;\n    };\n    const Word$and = x0 => x1 => Word$and$(x0, x1);\n    const U32$and = a0 => a1 => (a0 & a1);\n    const U32$shr = a0 => a1 => (a0 >>> a1);\n\n    function VoxBox$Draw$image$(_x$1, _y$2, _z$3, _src$4, _img$5) {\n        var _len$6 = VoxBox$get_len$(_src$4);\n        var _img$7 = (() => {\n            var $832 = _img$5;\n            var $833 = 0;\n            var $834 = _len$6;\n            let _img$8 = $832;\n            for (let _i$7 = $833; _i$7 < $834; ++_i$7) {\n                var _pos$9 = ((_src$4.buffer[_i$7 * 2]));\n                var _col$10 = ((_src$4.buffer[_i$7 * 2 + 1]));\n                var _p_x$11 = (_pos$9 & 4095);\n                var _p_y$12 = ((_pos$9 & 16773120) >>> 12);\n                var _p_z$13 = ((_pos$9 & 4278190080) >>> 24);\n                var _p_x$14 = ((_p_x$11 + _x$1) >>> 0);\n                var _p_y$15 = ((_p_y$12 + _y$2) >>> 0);\n                var _p_z$16 = ((_p_z$13 + _z$3) >>> 0);\n                var _pos$17 = ((0 | _p_x$14 | (_p_y$15 << 12) | (_p_z$16 << 24)));\n                var $832 = ((_img$8.buffer[_img$8.length * 2] = _pos$17, _img$8.buffer[_img$8.length * 2 + 1] = _col$10, _img$8.length++, _img$8));\n                _img$8 = $832;\n            };\n            return _img$8;\n        })();\n        var $831 = _img$7;\n        return $831;\n    };\n    const VoxBox$Draw$image = x0 => x1 => x2 => x3 => x4 => VoxBox$Draw$image$(x0, x1, x2, x3, x4);\n\n    function Web$Kaelin$Draw$state$background$(_map$1, _cast_info$2, _env_info$3, _img$4) {\n        var self = _cast_info$2;\n        switch (self._) {\n            case 'Web.Kaelin.CastInfo.new':\n                var $836 = self.hero_pos;\n                var $837 = self.range;\n                var _list$9 = NatMap$to_list$(_map$1);\n                var _range$10 = Web$Kaelin$Coord$range$($836, $837);\n                var _img$11 = (() => {\n                    var $840 = _img$4;\n                    var $841 = _list$9;\n                    let _img$12 = $840;\n                    let _pair$11;\n                    while ($841._ === 'List.cons') {\n                        _pair$11 = $841.head;\n                        var self = _pair$11;\n                        switch (self._) {\n                            case 'Pair.new':\n                                var $842 = self.fst;\n                                var _coord$15 = Web$Kaelin$Coord$Convert$nat_to_axial$($842);\n                                var self = Web$Kaelin$Draw$support$centralize$(_coord$15);\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $844 = self.fst;\n                                        var $845 = self.snd;\n                                        var _hex_effect$18 = Web$Kaelin$Draw$support$which_effect$(_coord$15, _cast_info$2, _range$10);\n                                        var _mouse_over$19 = Web$Kaelin$Draw$support$mouse_on_coord$(_coord$15, _env_info$3);\n                                        var _sprite$20 = Web$Kaelin$Terrain$Sprite$new$(_hex_effect$18, _mouse_over$19);\n                                        var _tile$21 = Maybe$default$(Web$Kaelin$Map$get$(_coord$15, _map$1), List$nil);\n                                        var _img$22 = (() => {\n                                            var $848 = _img$12;\n                                            var $849 = _tile$21;\n                                            let _img$23 = $848;\n                                            let _entity$22;\n                                            while ($849._ === 'List.cons') {\n                                                _entity$22 = $849.head;\n                                                var self = _entity$22;\n                                                switch (self._) {\n                                                    case 'Web.Kaelin.Entity.background':\n                                                        var $850 = self.terrain;\n                                                        var self = $850;\n                                                        switch (self._) {\n                                                            case 'Web.Kaelin.Terrain.grass':\n                                                                var $852 = self.draw;\n                                                                var $853 = VoxBox$Draw$image$($844, $845, 0, $852(_sprite$20), _img$23);\n                                                                var $851 = $853;\n                                                                break;\n                                                        };\n                                                        var $848 = $851;\n                                                        break;\n                                                    case 'Web.Kaelin.Entity.creature':\n                                                        var $854 = _img$23;\n                                                        var $848 = $854;\n                                                        break;\n                                                };\n                                                _img$23 = $848;\n                                                $849 = $849.tail;\n                                            }\n                                            return _img$23;\n                                        })();\n                                        var $846 = _img$22;\n                                        var $843 = $846;\n                                        break;\n                                };\n                                var $840 = $843;\n                                break;\n                        };\n                        _img$12 = $840;\n                        $841 = $841.tail;\n                    }\n                    return _img$12;\n                })();\n                var $838 = _img$11;\n                var $835 = $838;\n                break;\n        };\n        return $835;\n    };\n    const Web$Kaelin$Draw$state$background = x0 => x1 => x2 => x3 => Web$Kaelin$Draw$state$background$(x0, x1, x2, x3);\n\n    function Web$Kaelin$Draw$hero$(_cx$1, _cy$2, _z$3, _hero$4, _img$5) {\n        var self = _hero$4;\n        switch (self._) {\n            case 'Web.Kaelin.Hero.new':\n                var $856 = self.img;\n                var _aux_y$8 = ((Web$Kaelin$Constants$hexagon_radius * 2) >>> 0);\n                var _cy$9 = ((_cy$2 - _aux_y$8) >>> 0);\n                var _cx$10 = ((_cx$1 - Web$Kaelin$Constants$hexagon_radius) >>> 0);\n                var $857 = VoxBox$Draw$image$(_cx$10, _cy$9, 0, $856, _img$5);\n                var $855 = $857;\n                break;\n        };\n        return $855;\n    };\n    const Web$Kaelin$Draw$hero = x0 => x1 => x2 => x3 => x4 => Web$Kaelin$Draw$hero$(x0, x1, x2, x3, x4);\n\n    function Web$Kaelin$Draw$state$players$(_map$1, _img$2) {\n        var _player_list$3 = NatMap$to_list$(_map$1);\n        var _img$4 = (() => {\n            var $860 = _img$2;\n            var $861 = _player_list$3;\n            let _img$5 = $860;\n            let _prs$4;\n            while ($861._ === 'List.cons') {\n                _prs$4 = $861.head;\n                var self = _prs$4;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $862 = self.fst;\n                        var $863 = self.snd;\n                        var _coord$8 = Web$Kaelin$Coord$Convert$nat_to_axial$($862);\n                        var self = Web$Kaelin$Coord$to_screen_xy$(_coord$8);\n                        switch (self._) {\n                            case 'Pair.new':\n                                var $865 = self.fst;\n                                var $866 = self.snd;\n                                var _img$11 = (() => {\n                                    var $869 = _img$5;\n                                    var $870 = $863;\n                                    let _img$12 = $869;\n                                    let _entity$11;\n                                    while ($870._ === 'List.cons') {\n                                        _entity$11 = $870.head;\n                                        var self = _entity$11;\n                                        switch (self._) {\n                                            case 'Web.Kaelin.Entity.creature':\n                                                var $871 = self.hero;\n                                                var $872 = Web$Kaelin$Draw$hero$($865, $866, 0, $871, _img$12);\n                                                var $869 = $872;\n                                                break;\n                                            case 'Web.Kaelin.Entity.background':\n                                                var $873 = _img$12;\n                                                var $869 = $873;\n                                                break;\n                                        };\n                                        _img$12 = $869;\n                                        $870 = $870.tail;\n                                    }\n                                    return _img$12;\n                                })();\n                                var $867 = _img$11;\n                                var $864 = $867;\n                                break;\n                        };\n                        var $860 = $864;\n                        break;\n                };\n                _img$5 = $860;\n                $861 = $861.tail;\n            }\n            return _img$5;\n        })();\n        var $858 = _img$4;\n        return $858;\n    };\n    const Web$Kaelin$Draw$state$players = x0 => x1 => Web$Kaelin$Draw$state$players$(x0, x1);\n\n    function Web$Kaelin$Draw$state$(_img$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'Web.Kaelin.State.game':\n                var $875 = self.room;\n                var $876 = self.tick;\n                var $877 = self.players;\n                var $878 = self.cast_info;\n                var $879 = self.map;\n                var $880 = self.timer;\n                var $881 = self.interface;\n                var $882 = (() => {\n                    var _img$9 = Web$Kaelin$Draw$state$background$($879, $878, $880, _img$1);\n                    var _img$10 = Web$Kaelin$Draw$state$players$($879, _img$9);\n                    var $883 = _img$10;\n                    return $883;\n                })()($881);\n                var $874 = $882;\n                break;\n            case 'Web.Kaelin.State.init':\n            case 'Web.Kaelin.State.void':\n                var $884 = _img$1;\n                var $874 = $884;\n                break;\n        };\n        return $874;\n    };\n    const Web$Kaelin$Draw$state = x0 => x1 => Web$Kaelin$Draw$state$(x0, x1);\n\n    function Web$Kaelin$App$draw$(_img$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'Web.Kaelin.State.game':\n                var $886 = self.room;\n                var $887 = self.tick;\n                var $888 = self.players;\n                var $889 = self.cast_info;\n                var $890 = self.map;\n                var $891 = self.timer;\n                var $892 = self.interface;\n                var $893 = DOM$vbox$(Map$from_list$(List$nil), Map$from_list$(List$nil), Web$Kaelin$Draw$state$(_img$1, _state$2))($892);\n                var $885 = $893;\n                break;\n            case 'Web.Kaelin.State.init':\n            case 'Web.Kaelin.State.void':\n                var $894 = DOM$text$(\"TODO: create the renderer for this game state mode\");\n                var $885 = $894;\n                break;\n        };\n        return $885;\n    };\n    const Web$Kaelin$App$draw = x0 => x1 => Web$Kaelin$App$draw$(x0, x1);\n    const U8$to_nat = a0 => (BigInt(a0));\n\n    function List$zip$(_as$3, _bs$4) {\n        var self = _as$3;\n        switch (self._) {\n            case 'List.cons':\n                var $896 = self.head;\n                var $897 = self.tail;\n                var self = _bs$4;\n                switch (self._) {\n                    case 'List.cons':\n                        var $899 = self.head;\n                        var $900 = self.tail;\n                        var $901 = List$cons$(Pair$new$($896, $899), List$zip$($897, $900));\n                        var $898 = $901;\n                        break;\n                    case 'List.nil':\n                        var $902 = List$nil;\n                        var $898 = $902;\n                        break;\n                };\n                var $895 = $898;\n                break;\n            case 'List.nil':\n                var $903 = List$nil;\n                var $895 = $903;\n                break;\n        };\n        return $895;\n    };\n    const List$zip = x0 => x1 => List$zip$(x0, x1);\n    const Web$Kaelin$Event$Code$action = List$cons$(2, List$nil);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $904 = (String.fromCharCode(_head$1) + _tail$2);\n        return $904;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function String$length$go$(_xs$1, _n$2) {\n        var String$length$go$ = (_xs$1, _n$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _n$2]\n        });\n        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);\n        var arg = [_xs$1, _n$2];\n        while (true) {\n            let [_xs$1, _n$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                if (self.length === 0) {\n                    var $905 = _n$2;\n                    return $905;\n                } else {\n                    var $906 = self.charCodeAt(0);\n                    var $907 = self.slice(1);\n                    var $908 = String$length$go$($907, Nat$succ$(_n$2));\n                    return $908;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$length$go = x0 => x1 => String$length$go$(x0, x1);\n\n    function String$length$(_xs$1) {\n        var $909 = String$length$go$(_xs$1, 0n);\n        return $909;\n    };\n    const String$length = x0 => String$length$(x0);\n    const String$nil = '';\n\n    function String$repeat$(_xs$1, _n$2) {\n        var self = _n$2;\n        if (self === 0n) {\n            var $911 = String$nil;\n            var $910 = $911;\n        } else {\n            var $912 = (self - 1n);\n            var $913 = (_xs$1 + String$repeat$(_xs$1, $912));\n            var $910 = $913;\n        };\n        return $910;\n    };\n    const String$repeat = x0 => x1 => String$repeat$(x0, x1);\n\n    function Hex$set_min_length$(_min$1, _hex$2) {\n        var _dif$3 = (_min$1 - String$length$(_hex$2) <= 0n ? 0n : _min$1 - String$length$(_hex$2));\n        var $914 = (_hex$2 + String$repeat$(\"0\", _dif$3));\n        return $914;\n    };\n    const Hex$set_min_length = x0 => x1 => Hex$set_min_length$(x0, x1);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $916 = self.head;\n                var $917 = self.tail;\n                var $918 = _cons$5($916)(List$fold$($917, _nil$4, _cons$5));\n                var $915 = $918;\n                break;\n            case 'List.nil':\n                var $919 = _nil$4;\n                var $915 = $919;\n                break;\n        };\n        return $915;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function List$foldr$(_b$3, _f$4, _xs$5) {\n        var $920 = List$fold$(_xs$5, _b$3, _f$4);\n        return $920;\n    };\n    const List$foldr = x0 => x1 => x2 => List$foldr$(x0, x1, x2);\n\n    function Hex$format_hex$(_min$1, _hex$2) {\n        var _dif$3 = (_min$1 - String$length$(_hex$2) <= 0n ? 0n : _min$1 - String$length$(_hex$2));\n        var self = (String$length$(_hex$2) < _min$1);\n        if (self) {\n            var $922 = (String$repeat$(\"0\", _dif$3) + _hex$2);\n            var $921 = $922;\n        } else {\n            var $923 = _hex$2;\n            var $921 = $923;\n        };\n        return $921;\n    };\n    const Hex$format_hex = x0 => x1 => Hex$format_hex$(x0, x1);\n\n    function Bits$gtn$(_a$1, _b$2) {\n        var $924 = Cmp$as_gtn$(Bits$cmp$(_a$1, _b$2));\n        return $924;\n    };\n    const Bits$gtn = x0 => x1 => Bits$gtn$(x0, x1);\n\n    function U32$to_bits$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $926 = u32_to_word(self);\n                var $927 = Word$to_bits$($926);\n                var $925 = $927;\n                break;\n        };\n        return $925;\n    };\n    const U32$to_bits = x0 => U32$to_bits$(x0);\n\n    function Bits$mul$go$(_a$1, _b$2, _bits$3) {\n        var Bits$mul$go$ = (_a$1, _b$2, _bits$3) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _b$2, _bits$3]\n        });\n        var Bits$mul$go = _a$1 => _b$2 => _bits$3 => Bits$mul$go$(_a$1, _b$2, _bits$3);\n        var arg = [_a$1, _b$2, _bits$3];\n        while (true) {\n            let [_a$1, _b$2, _bits$3] = arg;\n            var R = (() => {\n                var self = _b$2;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $928 = self.slice(0, -1);\n                        var $929 = Bits$mul$go$((_a$1 + '0'), $928, _bits$3);\n                        return $929;\n                    case 'i':\n                        var $930 = self.slice(0, -1);\n                        var $931 = Bits$mul$go$((_a$1 + '0'), $930, Bits$add$(_a$1, _bits$3));\n                        return $931;\n                    case 'e':\n                        var $932 = _bits$3;\n                        return $932;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$mul$go = x0 => x1 => x2 => Bits$mul$go$(x0, x1, x2);\n\n    function Bits$mul$(_a$1, _b$2) {\n        var $933 = Bits$mul$go$(_a$1, _b$2, Bits$e);\n        return $933;\n    };\n    const Bits$mul = x0 => x1 => Bits$mul$(x0, x1);\n\n    function Bits$mod$(_a$1, _b$2) {\n        var _q$3 = Bits$div$(_a$1, _b$2);\n        var $934 = Bits$sub$(_a$1, Bits$mul$(_b$2, _q$3));\n        return $934;\n    };\n    const Bits$mod = x0 => x1 => Bits$mod$(x0, x1);\n\n    function Nat$square$(_a$1) {\n        var $935 = (_a$1 * _a$1);\n        return $935;\n    };\n    const Nat$square = x0 => Nat$square$(x0);\n\n    function Bits$break$(_shift$1, _a$2) {\n        var self = Bits$gtn$(_a$2, U32$to_bits$(0));\n        if (self) {\n            var $937 = List$cons$(Bits$mod$(_a$2, (nat_to_bits(Nat$square$(_shift$1)))), Bits$break$(_shift$1, Bits$shift_right$(_shift$1, _a$2)));\n            var $936 = $937;\n        } else {\n            var $938 = List$nil;\n            var $936 = $938;\n        };\n        return $936;\n    };\n    const Bits$break = x0 => x1 => Bits$break$(x0, x1);\n\n    function Function$flip$(_f$4, _y$5, _x$6) {\n        var $939 = _f$4(_x$6)(_y$5);\n        return $939;\n    };\n    const Function$flip = x0 => x1 => x2 => Function$flip$(x0, x1, x2);\n\n    function Hex$to_hex_string$(_x$1) {\n        var self = (Bits$to_nat$(_x$1) === 0n);\n        if (self) {\n            var $941 = \"0\";\n            var $940 = $941;\n        } else {\n            var self = (Bits$to_nat$(_x$1) === 1n);\n            if (self) {\n                var $943 = \"1\";\n                var $942 = $943;\n            } else {\n                var self = (Bits$to_nat$(_x$1) === 2n);\n                if (self) {\n                    var $945 = \"2\";\n                    var $944 = $945;\n                } else {\n                    var self = (Bits$to_nat$(_x$1) === 3n);\n                    if (self) {\n                        var $947 = \"3\";\n                        var $946 = $947;\n                    } else {\n                        var self = (Bits$to_nat$(_x$1) === 4n);\n                        if (self) {\n                            var $949 = \"4\";\n                            var $948 = $949;\n                        } else {\n                            var self = (Bits$to_nat$(_x$1) === 5n);\n                            if (self) {\n                                var $951 = \"5\";\n                                var $950 = $951;\n                            } else {\n                                var self = (Bits$to_nat$(_x$1) === 6n);\n                                if (self) {\n                                    var $953 = \"6\";\n                                    var $952 = $953;\n                                } else {\n                                    var self = (Bits$to_nat$(_x$1) === 7n);\n                                    if (self) {\n                                        var $955 = \"7\";\n                                        var $954 = $955;\n                                    } else {\n                                        var self = (Bits$to_nat$(_x$1) === 8n);\n                                        if (self) {\n                                            var $957 = \"8\";\n                                            var $956 = $957;\n                                        } else {\n                                            var self = (Bits$to_nat$(_x$1) === 9n);\n                                            if (self) {\n                                                var $959 = \"9\";\n                                                var $958 = $959;\n                                            } else {\n                                                var self = (Bits$to_nat$(_x$1) === 10n);\n                                                if (self) {\n                                                    var $961 = \"A\";\n                                                    var $960 = $961;\n                                                } else {\n                                                    var self = (Bits$to_nat$(_x$1) === 11n);\n                                                    if (self) {\n                                                        var $963 = \"B\";\n                                                        var $962 = $963;\n                                                    } else {\n                                                        var self = (Bits$to_nat$(_x$1) === 12n);\n                                                        if (self) {\n                                                            var $965 = \"C\";\n                                                            var $964 = $965;\n                                                        } else {\n                                                            var self = (Bits$to_nat$(_x$1) === 13n);\n                                                            if (self) {\n                                                                var $967 = \"D\";\n                                                                var $966 = $967;\n                                                            } else {\n                                                                var self = (Bits$to_nat$(_x$1) === 14n);\n                                                                if (self) {\n                                                                    var $969 = \"E\";\n                                                                    var $968 = $969;\n                                                                } else {\n                                                                    var self = (Bits$to_nat$(_x$1) === 15n);\n                                                                    if (self) {\n                                                                        var $971 = \"F\";\n                                                                        var $970 = $971;\n                                                                    } else {\n                                                                        var $972 = \"?\";\n                                                                        var $970 = $972;\n                                                                    };\n                                                                    var $968 = $970;\n                                                                };\n                                                                var $966 = $968;\n                                                            };\n                                                            var $964 = $966;\n                                                        };\n                                                        var $962 = $964;\n                                                    };\n                                                    var $960 = $962;\n                                                };\n                                                var $958 = $960;\n                                            };\n                                            var $956 = $958;\n                                        };\n                                        var $954 = $956;\n                                    };\n                                    var $952 = $954;\n                                };\n                                var $950 = $952;\n                            };\n                            var $948 = $950;\n                        };\n                        var $946 = $948;\n                    };\n                    var $944 = $946;\n                };\n                var $942 = $944;\n            };\n            var $940 = $942;\n        };\n        return $940;\n    };\n    const Hex$to_hex_string = x0 => Hex$to_hex_string$(x0);\n\n    function Bits$to_hex_string$(_x$1) {\n        var _ls$2 = Bits$break$(4n, _x$1);\n        var $973 = List$foldr$(\"\", (_x$3 => {\n            var $974 = Function$flip(String$concat)(Hex$to_hex_string$(_x$3));\n            return $974;\n        }), _ls$2);\n        return $973;\n    };\n    const Bits$to_hex_string = x0 => Bits$to_hex_string$(x0);\n\n    function Hex$append$(_hex$1, _size$2, _x$3) {\n        var _hex2$4 = Hex$format_hex$(_size$2, Bits$to_hex_string$(_x$3));\n        var $975 = (_hex$1 + _hex2$4);\n        return $975;\n    };\n    const Hex$append = x0 => x1 => x2 => Hex$append$(x0, x1, x2);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $977 = self.snd;\n                var $978 = $977;\n                var $976 = $978;\n                break;\n        };\n        return $976;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function Web$Kaelin$Event$Code$generate_hex$(_xs$1) {\n        var $979 = List$foldr$(\"\", (_x$2 => _y$3 => {\n            var $980 = Hex$append$(_y$3, (BigInt(Pair$fst$(_x$2))), Pair$snd$(_x$2));\n            return $980;\n        }), List$reverse$(_xs$1));\n        return $979;\n    };\n    const Web$Kaelin$Event$Code$generate_hex = x0 => Web$Kaelin$Event$Code$generate_hex$(x0);\n\n    function generate_hex$(_xs$1, _ys$2) {\n        var _consumer$3 = List$zip$(List$concat$(Web$Kaelin$Event$Code$action, _xs$1), _ys$2);\n        var $981 = (\"0x\" + Hex$set_min_length$(64n, Web$Kaelin$Event$Code$generate_hex$(_consumer$3)));\n        return $981;\n    };\n    const generate_hex = x0 => x1 => generate_hex$(x0, x1);\n    const Web$Kaelin$Event$Code$create_hero = List$cons$(2, List$nil);\n\n    function Web$Kaelin$Resources$Action$to_bits$(_x$1) {\n        var self = _x$1;\n        switch (self._) {\n            case 'Web.Kaelin.Action.walk':\n                var $983 = 0n;\n                var _n$2 = $983;\n                break;\n            case 'Web.Kaelin.Action.ability_0':\n                var $984 = 1n;\n                var _n$2 = $984;\n                break;\n            case 'Web.Kaelin.Action.ability_1':\n                var $985 = 2n;\n                var _n$2 = $985;\n                break;\n        };\n        var $982 = (nat_to_bits(_n$2));\n        return $982;\n    };\n    const Web$Kaelin$Resources$Action$to_bits = x0 => Web$Kaelin$Resources$Action$to_bits$(x0);\n\n    function Web$Kaelin$Coord$Convert$axial_to_bits$(_x$1) {\n        var _unique_nat$2 = Web$Kaelin$Coord$Convert$axial_to_nat$(_x$1);\n        var $986 = (nat_to_bits(_unique_nat$2));\n        return $986;\n    };\n    const Web$Kaelin$Coord$Convert$axial_to_bits = x0 => Web$Kaelin$Coord$Convert$axial_to_bits$(x0);\n    const Web$Kaelin$Event$Code$user_input = List$cons$(2, List$cons$(8, List$nil));\n\n    function Web$Kaelin$Event$serialize$(_event$1) {\n        var self = _event$1;\n        switch (self._) {\n            case 'Web.Kaelin.Event.create_hero':\n                var $988 = self.hero_id;\n                var _cod$3 = List$cons$((nat_to_bits(1n)), List$cons$((nat_to_bits((BigInt($988)))), List$nil));\n                var $989 = generate_hex$(Web$Kaelin$Event$Code$create_hero, _cod$3);\n                var $987 = $989;\n                break;\n            case 'Web.Kaelin.Event.user_input':\n                var $990 = self.coord;\n                var $991 = self.action;\n                var _cod$4 = List$cons$((nat_to_bits(4n)), List$cons$(Web$Kaelin$Resources$Action$to_bits$($991), List$cons$(Web$Kaelin$Coord$Convert$axial_to_bits$($990), List$nil)));\n                var $992 = generate_hex$(Web$Kaelin$Event$Code$user_input, _cod$4);\n                var $987 = $992;\n                break;\n            case 'Web.Kaelin.Event.start_game':\n            case 'Web.Kaelin.Event.create_user':\n                var $993 = \"\";\n                var $987 = $993;\n                break;\n        };\n        return $987;\n    };\n    const Web$Kaelin$Event$serialize = x0 => Web$Kaelin$Event$serialize$(x0);\n\n    function String$drop$(_n$1, _xs$2) {\n        var String$drop$ = (_n$1, _xs$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _xs$2]\n        });\n        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);\n        var arg = [_n$1, _xs$2];\n        while (true) {\n            let [_n$1, _xs$2] = arg;\n            var R = (() => {\n                var self = _n$1;\n                if (self === 0n) {\n                    var $994 = _xs$2;\n                    return $994;\n                } else {\n                    var $995 = (self - 1n);\n                    var self = _xs$2;\n                    if (self.length === 0) {\n                        var $997 = String$nil;\n                        var $996 = $997;\n                    } else {\n                        var $998 = self.charCodeAt(0);\n                        var $999 = self.slice(1);\n                        var $1000 = String$drop$($995, $999);\n                        var $996 = $1000;\n                    };\n                    return $996;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$drop = x0 => x1 => String$drop$(x0, x1);\n\n    function Web$Kaelin$Event$Buffer$next$(_buffer$1) {\n        var self = _buffer$1;\n        switch (self._) {\n            case 'Pair.new':\n                var $1002 = self.fst;\n                var $1003 = self.snd;\n                var self = $1003;\n                switch (self._) {\n                    case 'List.cons':\n                        var $1005 = self.head;\n                        var $1006 = self.tail;\n                        var $1007 = Pair$new$(String$drop$((BigInt($1005)), $1002), $1006);\n                        var $1004 = $1007;\n                        break;\n                    case 'List.nil':\n                        var $1008 = _buffer$1;\n                        var $1004 = $1008;\n                        break;\n                };\n                var $1001 = $1004;\n                break;\n        };\n        return $1001;\n    };\n    const Web$Kaelin$Event$Buffer$next = x0 => Web$Kaelin$Event$Buffer$next$(x0);\n\n    function Parser$run$(_parser$2, _code$3) {\n        var self = _parser$2(0n)(_code$3);\n        switch (self._) {\n            case 'Parser.Reply.value':\n                var $1010 = self.val;\n                var $1011 = Maybe$some$($1010);\n                var $1009 = $1011;\n                break;\n            case 'Parser.Reply.error':\n                var $1012 = Maybe$none;\n                var $1009 = $1012;\n                break;\n        };\n        return $1009;\n    };\n    const Parser$run = x0 => x1 => Parser$run$(x0, x1);\n\n    function Parser$Reply$(_V$1) {\n        var $1013 = null;\n        return $1013;\n    };\n    const Parser$Reply = x0 => Parser$Reply$(x0);\n\n    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {\n        var $1014 = ({\n            _: 'Parser.Reply.error',\n            'idx': _idx$2,\n            'code': _code$3,\n            'err': _err$4\n        });\n        return $1014;\n    };\n    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);\n\n    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {\n        var $1015 = ({\n            _: 'Parser.Reply.value',\n            'idx': _idx$2,\n            'code': _code$3,\n            'val': _val$4\n        });\n        return $1015;\n    };\n    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);\n\n    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {\n        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({\n            ctr: 'TCO',\n            arg: [_parse$2, _values$3, _idx$4, _code$5]\n        });\n        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);\n        var arg = [_parse$2, _values$3, _idx$4, _code$5];\n        while (true) {\n            let [_parse$2, _values$3, _idx$4, _code$5] = arg;\n            var R = (() => {\n                var self = _parse$2(_idx$4)(_code$5);\n                switch (self._) {\n                    case 'Parser.Reply.value':\n                        var $1016 = self.idx;\n                        var $1017 = self.code;\n                        var $1018 = self.val;\n                        var $1019 = Parser$many$go$(_parse$2, (_xs$9 => {\n                            var $1020 = _values$3(List$cons$($1018, _xs$9));\n                            return $1020;\n                        }), $1016, $1017);\n                        return $1019;\n                    case 'Parser.Reply.error':\n                        var $1021 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));\n                        return $1021;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);\n\n    function Parser$many$(_parser$2) {\n        var $1022 = Parser$many$go(_parser$2)((_x$3 => {\n            var $1023 = _x$3;\n            return $1023;\n        }));\n        return $1022;\n    };\n    const Parser$many = x0 => Parser$many$(x0);\n\n    function Parser$many1$(_parser$2, _idx$3, _code$4) {\n        var self = _parser$2(_idx$3)(_code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1025 = self.idx;\n                var $1026 = self.code;\n                var $1027 = self.err;\n                var $1028 = Parser$Reply$error$($1025, $1026, $1027);\n                var $1024 = $1028;\n                break;\n            case 'Parser.Reply.value':\n                var $1029 = self.idx;\n                var $1030 = self.code;\n                var $1031 = self.val;\n                var self = Parser$many$(_parser$2)($1029)($1030);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1033 = self.idx;\n                        var $1034 = self.code;\n                        var $1035 = self.err;\n                        var $1036 = Parser$Reply$error$($1033, $1034, $1035);\n                        var $1032 = $1036;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1037 = self.idx;\n                        var $1038 = self.code;\n                        var $1039 = self.val;\n                        var $1040 = Parser$Reply$value$($1037, $1038, List$cons$($1031, $1039));\n                        var $1032 = $1040;\n                        break;\n                };\n                var $1024 = $1032;\n                break;\n        };\n        return $1024;\n    };\n    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);\n\n    function Parser$one$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $1042 = Parser$Reply$error$(_idx$1, _code$2, \"Unexpected end of file.\");\n            var $1041 = $1042;\n        } else {\n            var $1043 = self.charCodeAt(0);\n            var $1044 = self.slice(1);\n            var $1045 = Parser$Reply$value$(Nat$succ$(_idx$1), $1044, $1043);\n            var $1041 = $1045;\n        };\n        return $1041;\n    };\n    const Parser$one = x0 => x1 => Parser$one$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function Char$eql$(_a$1, _b$2) {\n        var $1046 = (_a$1 === _b$2);\n        return $1046;\n    };\n    const Char$eql = x0 => x1 => Char$eql$(x0, x1);\n\n    function Hex$char_hex_to_nat$(_x$1) {\n        var self = Char$eql$(_x$1, 48);\n        if (self) {\n            var $1048 = Maybe$some$(0n);\n            var $1047 = $1048;\n        } else {\n            var self = Char$eql$(_x$1, 49);\n            if (self) {\n                var $1050 = Maybe$some$(1n);\n                var $1049 = $1050;\n            } else {\n                var self = Char$eql$(_x$1, 50);\n                if (self) {\n                    var $1052 = Maybe$some$(2n);\n                    var $1051 = $1052;\n                } else {\n                    var self = Char$eql$(_x$1, 51);\n                    if (self) {\n                        var $1054 = Maybe$some$(3n);\n                        var $1053 = $1054;\n                    } else {\n                        var self = Char$eql$(_x$1, 52);\n                        if (self) {\n                            var $1056 = Maybe$some$(4n);\n                            var $1055 = $1056;\n                        } else {\n                            var self = Char$eql$(_x$1, 53);\n                            if (self) {\n                                var $1058 = Maybe$some$(5n);\n                                var $1057 = $1058;\n                            } else {\n                                var self = Char$eql$(_x$1, 54);\n                                if (self) {\n                                    var $1060 = Maybe$some$(6n);\n                                    var $1059 = $1060;\n                                } else {\n                                    var self = Char$eql$(_x$1, 55);\n                                    if (self) {\n                                        var $1062 = Maybe$some$(7n);\n                                        var $1061 = $1062;\n                                    } else {\n                                        var self = Char$eql$(_x$1, 56);\n                                        if (self) {\n                                            var $1064 = Maybe$some$(8n);\n                                            var $1063 = $1064;\n                                        } else {\n                                            var self = Char$eql$(_x$1, 57);\n                                            if (self) {\n                                                var $1066 = Maybe$some$(9n);\n                                                var $1065 = $1066;\n                                            } else {\n                                                var self = Char$eql$(_x$1, 65);\n                                                if (self) {\n                                                    var $1068 = Maybe$some$(10n);\n                                                    var $1067 = $1068;\n                                                } else {\n                                                    var self = Char$eql$(_x$1, 97);\n                                                    if (self) {\n                                                        var $1070 = Maybe$some$(10n);\n                                                        var $1069 = $1070;\n                                                    } else {\n                                                        var self = Char$eql$(_x$1, 66);\n                                                        if (self) {\n                                                            var $1072 = Maybe$some$(11n);\n                                                            var $1071 = $1072;\n                                                        } else {\n                                                            var self = Char$eql$(_x$1, 98);\n                                                            if (self) {\n                                                                var $1074 = Maybe$some$(11n);\n                                                                var $1073 = $1074;\n                                                            } else {\n                                                                var self = Char$eql$(_x$1, 67);\n                                                                if (self) {\n                                                                    var $1076 = Maybe$some$(12n);\n                                                                    var $1075 = $1076;\n                                                                } else {\n                                                                    var self = Char$eql$(_x$1, 99);\n                                                                    if (self) {\n                                                                        var $1078 = Maybe$some$(12n);\n                                                                        var $1077 = $1078;\n                                                                    } else {\n                                                                        var self = Char$eql$(_x$1, 68);\n                                                                        if (self) {\n                                                                            var $1080 = Maybe$some$(13n);\n                                                                            var $1079 = $1080;\n                                                                        } else {\n                                                                            var self = Char$eql$(_x$1, 100);\n                                                                            if (self) {\n                                                                                var $1082 = Maybe$some$(13n);\n                                                                                var $1081 = $1082;\n                                                                            } else {\n                                                                                var self = Char$eql$(_x$1, 69);\n                                                                                if (self) {\n                                                                                    var $1084 = Maybe$some$(14n);\n                                                                                    var $1083 = $1084;\n                                                                                } else {\n                                                                                    var self = Char$eql$(_x$1, 101);\n                                                                                    if (self) {\n                                                                                        var $1086 = Maybe$some$(14n);\n                                                                                        var $1085 = $1086;\n                                                                                    } else {\n                                                                                        var self = Char$eql$(_x$1, 70);\n                                                                                        if (self) {\n                                                                                            var $1088 = Maybe$some$(15n);\n                                                                                            var $1087 = $1088;\n                                                                                        } else {\n                                                                                            var self = Char$eql$(_x$1, 102);\n                                                                                            if (self) {\n                                                                                                var $1090 = Maybe$some$(15n);\n                                                                                                var $1089 = $1090;\n                                                                                            } else {\n                                                                                                var $1091 = Maybe$none;\n                                                                                                var $1089 = $1091;\n                                                                                            };\n                                                                                            var $1087 = $1089;\n                                                                                        };\n                                                                                        var $1085 = $1087;\n                                                                                    };\n                                                                                    var $1083 = $1085;\n                                                                                };\n                                                                                var $1081 = $1083;\n                                                                            };\n                                                                            var $1079 = $1081;\n                                                                        };\n                                                                        var $1077 = $1079;\n                                                                    };\n                                                                    var $1075 = $1077;\n                                                                };\n                                                                var $1073 = $1075;\n                                                            };\n                                                            var $1071 = $1073;\n                                                        };\n                                                        var $1069 = $1071;\n                                                    };\n                                                    var $1067 = $1069;\n                                                };\n                                                var $1065 = $1067;\n                                            };\n                                            var $1063 = $1065;\n                                        };\n                                        var $1061 = $1063;\n                                    };\n                                    var $1059 = $1061;\n                                };\n                                var $1057 = $1059;\n                            };\n                            var $1055 = $1057;\n                        };\n                        var $1053 = $1055;\n                    };\n                    var $1051 = $1053;\n                };\n                var $1049 = $1051;\n            };\n            var $1047 = $1049;\n        };\n        return $1047;\n    };\n    const Hex$char_hex_to_nat = x0 => Hex$char_hex_to_nat$(x0);\n\n    function Parser$(_V$1) {\n        var $1092 = null;\n        return $1092;\n    };\n    const Parser = x0 => Parser$(x0);\n\n    function Parser$fail$(_error$2, _idx$3, _code$4) {\n        var $1093 = Parser$Reply$error$(_idx$3, _code$4, _error$2);\n        return $1093;\n    };\n    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);\n    const Hex$parser$char_hex = (() => {\n        var _c$1 = Parser$one;\n        var $1094 = (_idx$2 => _code$3 => {\n            var self = _c$1(_idx$2)(_code$3);\n            switch (self._) {\n                case 'Parser.Reply.error':\n                    var $1096 = self.idx;\n                    var $1097 = self.code;\n                    var $1098 = self.err;\n                    var $1099 = Parser$Reply$error$($1096, $1097, $1098);\n                    var $1095 = $1099;\n                    break;\n                case 'Parser.Reply.value':\n                    var $1100 = self.idx;\n                    var $1101 = self.code;\n                    var $1102 = self.val;\n                    var _k$7 = Hex$char_hex_to_nat$($1102);\n                    var self = _k$7;\n                    switch (self._) {\n                        case 'Maybe.some':\n                            var $1104 = self.value;\n                            var $1105 = (_idx$9 => _code$10 => {\n                                var $1106 = Parser$Reply$value$(_idx$9, _code$10, $1104);\n                                return $1106;\n                            });\n                            var $1103 = $1105;\n                            break;\n                        case 'Maybe.none':\n                            var $1107 = Parser$fail(\"Hex lexical error\");\n                            var $1103 = $1107;\n                            break;\n                    };\n                    var $1103 = $1103($1100)($1101);\n                    var $1095 = $1103;\n                    break;\n            };\n            return $1095;\n        });\n        return $1094;\n    })();\n\n    function List$fold_right$(_A$1, _B$2, _b$3, _f$4, _xs$5) {\n        var List$fold_right$ = (_A$1, _B$2, _b$3, _f$4, _xs$5) => ({\n            ctr: 'TCO',\n            arg: [_A$1, _B$2, _b$3, _f$4, _xs$5]\n        });\n        var List$fold_right = _A$1 => _B$2 => _b$3 => _f$4 => _xs$5 => List$fold_right$(_A$1, _B$2, _b$3, _f$4, _xs$5);\n        var arg = [_A$1, _B$2, _b$3, _f$4, _xs$5];\n        while (true) {\n            let [_A$1, _B$2, _b$3, _f$4, _xs$5] = arg;\n            var R = (() => {\n                var self = _xs$5;\n                switch (self._) {\n                    case 'List.cons':\n                        var $1108 = self.head;\n                        var $1109 = self.tail;\n                        var $1110 = List$fold_right$(null, null, _f$4($1108)(_b$3), _f$4, $1109);\n                        return $1110;\n                    case 'List.nil':\n                        var $1111 = _b$3;\n                        return $1111;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$fold_right = x0 => x1 => x2 => x3 => x4 => List$fold_right$(x0, x1, x2, x3, x4);\n\n    function append_2_go$(_x$1, _y$2, _z$3) {\n        var append_2_go$ = (_x$1, _y$2, _z$3) => ({\n            ctr: 'TCO',\n            arg: [_x$1, _y$2, _z$3]\n        });\n        var append_2_go = _x$1 => _y$2 => _z$3 => append_2_go$(_x$1, _y$2, _z$3);\n        var arg = [_x$1, _y$2, _z$3];\n        while (true) {\n            let [_x$1, _y$2, _z$3] = arg;\n            var R = (() => {\n                var _shift1_Nat$4 = (_x$4 => {\n                    var $1113 = Bits$to_nat$(Bits$shift_right$(1n, (nat_to_bits(_x$4))));\n                    return $1113;\n                });\n                var _n$5 = (2n * (_x$1 % 2n));\n                var _z$6 = (_z$3 + 1n);\n                var self = (_x$1 > 0n);\n                if (self) {\n                    var $1114 = append_2_go$(_shift1_Nat$4(_x$1), (_y$2 + (_n$5 ** _z$6)), _z$6);\n                    var $1112 = $1114;\n                } else {\n                    var $1115 = _y$2;\n                    var $1112 = $1115;\n                };\n                return $1112;\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const append_2_go = x0 => x1 => x2 => append_2_go$(x0, x1, x2);\n\n    function Nat$append_2$(_b$1, _x$2, _y$3) {\n        var $1116 = append_2_go$(_x$2, _y$3, _b$1);\n        return $1116;\n    };\n    const Nat$append_2 = x0 => x1 => x2 => Nat$append_2$(x0, x1, x2);\n    const Hex$parser = (() => {\n        var _k$1 = Parser$many1(Hex$parser$char_hex);\n        var $1117 = (_idx$2 => _code$3 => {\n            var self = _k$1(_idx$2)(_code$3);\n            switch (self._) {\n                case 'Parser.Reply.error':\n                    var $1119 = self.idx;\n                    var $1120 = self.code;\n                    var $1121 = self.err;\n                    var $1122 = Parser$Reply$error$($1119, $1120, $1121);\n                    var $1118 = $1122;\n                    break;\n                case 'Parser.Reply.value':\n                    var $1123 = self.idx;\n                    var $1124 = self.code;\n                    var $1125 = self.val;\n                    var $1126 = Parser$Reply$value$($1123, $1124, (() => {\n                        var self = $1125;\n                        switch (self._) {\n                            case 'List.cons':\n                                var $1127 = self.head;\n                                var $1128 = self.tail;\n                                var $1129 = List$fold_right$(null, null, $1127, Function$flip(Nat$append_2(3n)), $1128);\n                                return $1129;\n                            case 'List.nil':\n                                var $1130 = 0n;\n                                return $1130;\n                        };\n                    })());\n                    var $1118 = $1126;\n                    break;\n            };\n            return $1118;\n        });\n        return $1117;\n    })();\n\n    function Hex$to_nat$(_x$1) {\n        var self = Parser$run$(Hex$parser, _x$1);\n        switch (self._) {\n            case 'Maybe.some':\n                var $1132 = self.value;\n                var $1133 = $1132;\n                var $1131 = $1133;\n                break;\n            case 'Maybe.none':\n                var $1134 = 0n;\n                var $1131 = $1134;\n                break;\n        };\n        return $1131;\n    };\n    const Hex$to_nat = x0 => Hex$to_nat$(x0);\n\n    function String$take$(_n$1, _xs$2) {\n        var self = _xs$2;\n        if (self.length === 0) {\n            var $1136 = String$nil;\n            var $1135 = $1136;\n        } else {\n            var $1137 = self.charCodeAt(0);\n            var $1138 = self.slice(1);\n            var self = _n$1;\n            if (self === 0n) {\n                var $1140 = String$nil;\n                var $1139 = $1140;\n            } else {\n                var $1141 = (self - 1n);\n                var $1142 = String$cons$($1137, String$take$($1141, $1138));\n                var $1139 = $1142;\n            };\n            var $1135 = $1139;\n        };\n        return $1135;\n    };\n    const String$take = x0 => x1 => String$take$(x0, x1);\n\n    function Web$Kaelin$Event$Buffer$get$(_buffer$1) {\n        var self = _buffer$1;\n        switch (self._) {\n            case 'Pair.new':\n                var $1144 = self.fst;\n                var $1145 = self.snd;\n                var self = $1145;\n                switch (self._) {\n                    case 'List.cons':\n                        var $1147 = self.head;\n                        var $1148 = Hex$to_nat$(String$take$((BigInt($1147)), $1144));\n                        var $1146 = $1148;\n                        break;\n                    case 'List.nil':\n                        var $1149 = 0n;\n                        var $1146 = $1149;\n                        break;\n                };\n                var $1143 = $1146;\n                break;\n        };\n        return $1143;\n    };\n    const Web$Kaelin$Event$Buffer$get = x0 => Web$Kaelin$Event$Buffer$get$(x0);\n\n    function Web$Kaelin$Event$Buffer$push$(_buffer$1, _list$2) {\n        var self = _buffer$1;\n        switch (self._) {\n            case 'Pair.new':\n                var $1151 = self.fst;\n                var $1152 = self.snd;\n                var $1153 = Pair$new$($1151, List$concat$(_list$2, $1152));\n                var $1150 = $1153;\n                break;\n        };\n        return $1150;\n    };\n    const Web$Kaelin$Event$Buffer$push = x0 => x1 => Web$Kaelin$Event$Buffer$push$(x0, x1);\n\n    function Web$Kaelin$Event$Buffer$new$(_fst$1, _snd$2) {\n        var $1154 = Pair$new$(_fst$1, _snd$2);\n        return $1154;\n    };\n    const Web$Kaelin$Event$Buffer$new = x0 => x1 => Web$Kaelin$Event$Buffer$new$(x0, x1);\n\n    function Web$Kaelin$Event$create_hero$(_hero_id$1) {\n        var $1155 = ({\n            _: 'Web.Kaelin.Event.create_hero',\n            'hero_id': _hero_id$1\n        });\n        return $1155;\n    };\n    const Web$Kaelin$Event$create_hero = x0 => Web$Kaelin$Event$create_hero$(x0);\n    const Web$Kaelin$Action$walk = ({\n        _: 'Web.Kaelin.Action.walk'\n    });\n    const Web$Kaelin$Action$ability_0 = ({\n        _: 'Web.Kaelin.Action.ability_0'\n    });\n    const Web$Kaelin$Action$ability_1 = ({\n        _: 'Web.Kaelin.Action.ability_1'\n    });\n\n    function Web$Kaelin$Resources$Action$to_action$(_x$1) {\n        var self = (_x$1 === 0n);\n        if (self) {\n            var $1157 = Maybe$some$(Web$Kaelin$Action$walk);\n            var $1156 = $1157;\n        } else {\n            var self = (_x$1 === 1n);\n            if (self) {\n                var $1159 = Maybe$some$(Web$Kaelin$Action$ability_0);\n                var $1158 = $1159;\n            } else {\n                var self = (_x$1 === 2n);\n                if (self) {\n                    var $1161 = Maybe$some$(Web$Kaelin$Action$ability_1);\n                    var $1160 = $1161;\n                } else {\n                    var $1162 = Maybe$none;\n                    var $1160 = $1162;\n                };\n                var $1158 = $1160;\n            };\n            var $1156 = $1158;\n        };\n        return $1156;\n    };\n    const Web$Kaelin$Resources$Action$to_action = x0 => Web$Kaelin$Resources$Action$to_action$(x0);\n\n    function Maybe$bind$(_m$3, _f$4) {\n        var self = _m$3;\n        switch (self._) {\n            case 'Maybe.some':\n                var $1164 = self.value;\n                var $1165 = _f$4($1164);\n                var $1163 = $1165;\n                break;\n            case 'Maybe.none':\n                var $1166 = Maybe$none;\n                var $1163 = $1166;\n                break;\n        };\n        return $1163;\n    };\n    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);\n\n    function Web$Kaelin$Event$user_input$(_coord$1, _action$2) {\n        var $1167 = ({\n            _: 'Web.Kaelin.Event.user_input',\n            'coord': _coord$1,\n            'action': _action$2\n        });\n        return $1167;\n    };\n    const Web$Kaelin$Event$user_input = x0 => x1 => Web$Kaelin$Event$user_input$(x0, x1);\n\n    function Web$Kaelin$Event$deserialize$(_code$1) {\n        var _stream$2 = Web$Kaelin$Event$Buffer$new$(_code$1, Web$Kaelin$Event$Code$action);\n        var self = ((_x$3 => {\n            var $1169 = Web$Kaelin$Event$Buffer$get$(_x$3);\n            return $1169;\n        })(_stream$2) === 1n);\n        if (self) {\n            var _stream$3 = (_x$3 => {\n                var $1171 = Web$Kaelin$Event$Buffer$next$(_x$3);\n                return $1171;\n            })(_stream$2);\n            var _stream$4 = (_x$4 => _y$5 => {\n                var $1172 = Web$Kaelin$Event$Buffer$push$(_x$4, _y$5);\n                return $1172;\n            })(_stream$3)(Web$Kaelin$Event$Code$create_hero);\n            var $1170 = Maybe$some$(Web$Kaelin$Event$create_hero$((Number((_x$5 => {\n                var $1173 = Web$Kaelin$Event$Buffer$get$(_x$5);\n                return $1173;\n            })(_stream$4)) & 0xFF)));\n            var $1168 = $1170;\n        } else {\n            var self = ((_x$3 => {\n                var $1175 = Web$Kaelin$Event$Buffer$get$(_x$3);\n                return $1175;\n            })(_stream$2) === 4n);\n            if (self) {\n                var _stream$3 = (_x$3 => {\n                    var $1177 = Web$Kaelin$Event$Buffer$next$(_x$3);\n                    return $1177;\n                })(_stream$2);\n                var _stream$4 = (_x$4 => _y$5 => {\n                    var $1178 = Web$Kaelin$Event$Buffer$push$(_x$4, _y$5);\n                    return $1178;\n                })(_stream$3)(Web$Kaelin$Event$Code$user_input);\n                var _action$5 = Web$Kaelin$Resources$Action$to_action$((_x$5 => {\n                    var $1179 = Web$Kaelin$Event$Buffer$get$(_x$5);\n                    return $1179;\n                })(_stream$4));\n                var _stream$6 = (_x$6 => {\n                    var $1180 = Web$Kaelin$Event$Buffer$next$(_x$6);\n                    return $1180;\n                })(_stream$4);\n                var _pos$7 = Web$Kaelin$Coord$Convert$nat_to_axial$((_x$7 => {\n                    var $1181 = Web$Kaelin$Event$Buffer$get$(_x$7);\n                    return $1181;\n                })(_stream$6));\n                var $1176 = Maybe$bind$(_action$5, (_action$8 => {\n                    var $1182 = Maybe$some$(Web$Kaelin$Event$user_input$(_pos$7, _action$8));\n                    return $1182;\n                }));\n                var $1174 = $1176;\n            } else {\n                var $1183 = Maybe$none;\n                var $1174 = $1183;\n            };\n            var $1168 = $1174;\n        };\n        return $1168;\n    };\n    const Web$Kaelin$Event$deserialize = x0 => Web$Kaelin$Event$deserialize$(x0);\n\n    function IO$(_A$1) {\n        var $1184 = null;\n        return $1184;\n    };\n    const IO = x0 => IO$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $1185 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $1185;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $1187 = self.value;\n                var $1188 = _f$4($1187);\n                var $1186 = $1188;\n                break;\n            case 'IO.ask':\n                var $1189 = self.query;\n                var $1190 = self.param;\n                var $1191 = self.then;\n                var $1192 = IO$ask$($1189, $1190, (_x$8 => {\n                    var $1193 = IO$bind$($1191(_x$8), _f$4);\n                    return $1193;\n                }));\n                var $1186 = $1192;\n                break;\n        };\n        return $1186;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $1194 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $1194;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $1195 = _new$2(IO$bind)(IO$end);\n        return $1195;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function Dynamic$new$(_value$2) {\n        var $1196 = ({\n            _: 'Dynamic.new',\n            'value': _value$2\n        });\n        return $1196;\n    };\n    const Dynamic$new = x0 => Dynamic$new$(x0);\n    const App$pass = IO$monad$((_m$bind$1 => _m$pure$2 => {\n        var $1197 = _m$pure$2;\n        return $1197;\n    }))(Dynamic$new$(Unit$new));\n\n    function IO$do$(_call$1, _param$2) {\n        var $1198 = IO$ask$(_call$1, _param$2, (_answer$3 => {\n            var $1199 = IO$end$(Unit$new);\n            return $1199;\n        }));\n        return $1198;\n    };\n    const IO$do = x0 => x1 => IO$do$(x0, x1);\n\n    function App$do$(_call$1, _param$2) {\n        var $1200 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $1201 = _m$bind$3;\n            return $1201;\n        }))(IO$do$(_call$1, _param$2))((_$3 => {\n            var $1202 = App$pass;\n            return $1202;\n        }));\n        return $1200;\n    };\n    const App$do = x0 => x1 => App$do$(x0, x1);\n\n    function App$watch$(_room$1) {\n        var $1203 = App$do$(\"watch\", _room$1);\n        return $1203;\n    };\n    const App$watch = x0 => App$watch$(x0);\n\n    function App$store$(_value$2) {\n        var $1204 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $1205 = _m$pure$4;\n            return $1205;\n        }))(Dynamic$new$(_value$2));\n        return $1204;\n    };\n    const App$store = x0 => App$store$(x0);\n\n    function Map$get$(_key$2, _map$3) {\n        var $1206 = (bitsmap_get(String$to_bits$(_key$2), _map$3));\n        return $1206;\n    };\n    const Map$get = x0 => x1 => Map$get$(x0, x1);\n\n    function Web$Kaelin$Player$new$(_addr$1, _team$2) {\n        var $1207 = ({\n            _: 'Web.Kaelin.Player.new',\n            'addr': _addr$1,\n            'team': _team$2\n        });\n        return $1207;\n    };\n    const Web$Kaelin$Player$new = x0 => x1 => Web$Kaelin$Player$new$(x0, x1);\n\n    function Map$set$(_key$2, _val$3, _map$4) {\n        var $1208 = (bitsmap_set(String$to_bits$(_key$2), _val$3, _map$4, 'set'));\n        return $1208;\n    };\n    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);\n\n    function Web$Kaelin$Action$create_player$(_user$1, _hero$2, _state$3) {\n        var _key$4 = _user$1;\n        var _init_pos$5 = Web$Kaelin$Coord$new$(Int$to_i32$(Int$from_nat$(0n)), Int$to_i32$(Int$from_nat$(0n)));\n        var self = _state$3;\n        switch (self._) {\n            case 'Web.Kaelin.State.game':\n                var $1210 = self.room;\n                var $1211 = self.tick;\n                var $1212 = self.players;\n                var $1213 = self.cast_info;\n                var $1214 = self.map;\n                var $1215 = self.timer;\n                var $1216 = self.interface;\n                var self = Map$get$(_key$4, $1212);\n                switch (self._) {\n                    case 'Maybe.none':\n                        var _creature$13 = Web$Kaelin$Entity$creature;\n                        var _new_player$14 = Web$Kaelin$Player$new$(_user$1, \"blue\");\n                        var _map$15 = Web$Kaelin$Map$push$(_init_pos$5, _creature$13(Maybe$some$(_user$1))(_hero$2), $1214);\n                        var _new_players$16 = Map$set$(_key$4, _new_player$14, $1212);\n                        var $1218 = Web$Kaelin$State$game$($1210, $1211, _new_players$16, $1213, _map$15, $1215, $1216);\n                        var $1217 = $1218;\n                        break;\n                    case 'Maybe.some':\n                        var $1219 = _state$3;\n                        var $1217 = $1219;\n                        break;\n                };\n                var $1209 = $1217;\n                break;\n            case 'Web.Kaelin.State.init':\n            case 'Web.Kaelin.State.void':\n                var $1220 = _state$3;\n                var $1209 = $1220;\n                break;\n        };\n        return $1209;\n    };\n    const Web$Kaelin$Action$create_player = x0 => x1 => x2 => Web$Kaelin$Action$create_player$(x0, x1, x2);\n\n    function Web$Kaelin$Action$update_interface$(_interface$1, _tick$2, _state$3) {\n        var self = _state$3;\n        switch (self._) {\n            case 'Web.Kaelin.State.game':\n                var $1222 = self.room;\n                var $1223 = self.players;\n                var $1224 = self.cast_info;\n                var $1225 = self.map;\n                var $1226 = self.timer;\n                var $1227 = Web$Kaelin$State$game$($1222, _tick$2, $1223, $1224, $1225, $1226, _interface$1);\n                var $1221 = $1227;\n                break;\n            case 'Web.Kaelin.State.init':\n            case 'Web.Kaelin.State.void':\n                var $1228 = _state$3;\n                var $1221 = $1228;\n                break;\n        };\n        return $1221;\n    };\n    const Web$Kaelin$Action$update_interface = x0 => x1 => x2 => Web$Kaelin$Action$update_interface$(x0, x1, x2);\n    const U64$to_nat = a0 => (a0);\n\n    function App$post$(_room$1, _data$2) {\n        var $1229 = App$do$(\"post\", (_room$1 + (\";\" + _data$2)));\n        return $1229;\n    };\n    const App$post = x0 => x1 => App$post$(x0, x1);\n\n    function Web$Kaelin$Map$find_players$(_map$1) {\n        var _lmap$2 = NatMap$to_list$(_map$1);\n        var _result$3 = List$nil;\n        var _players$4 = List$nil;\n        var _result$5 = (() => {\n            var $1232 = _result$3;\n            var $1233 = _lmap$2;\n            let _result$6 = $1232;\n            let _pair$5;\n            while ($1233._ === 'List.cons') {\n                _pair$5 = $1233.head;\n                var self = _pair$5;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $1234 = self.fst;\n                        var $1235 = self.snd;\n                        var _coord$9 = $1234;\n                        var _tile$10 = $1235;\n                        var _players$11 = (() => {\n                            var $1238 = _players$4;\n                            var $1239 = _tile$10;\n                            let _players$12 = $1238;\n                            let _entity$11;\n                            while ($1239._ === 'List.cons') {\n                                _entity$11 = $1239.head;\n                                var self = _entity$11;\n                                switch (self._) {\n                                    case 'Web.Kaelin.Entity.creature':\n                                        var $1240 = self.player;\n                                        var self = $1240;\n                                        switch (self._) {\n                                            case 'Maybe.some':\n                                                var $1242 = self.value;\n                                                var _axial_coord$16 = Web$Kaelin$Coord$Convert$nat_to_axial$(_coord$9);\n                                                var $1243 = List$cons$(Pair$new$($1242, _axial_coord$16), List$nil);\n                                                var $1241 = $1243;\n                                                break;\n                                            case 'Maybe.none':\n                                                var $1244 = _players$12;\n                                                var $1241 = $1244;\n                                                break;\n                                        };\n                                        var $1238 = $1241;\n                                        break;\n                                    case 'Web.Kaelin.Entity.background':\n                                        var $1245 = _players$12;\n                                        var $1238 = $1245;\n                                        break;\n                                };\n                                _players$12 = $1238;\n                                $1239 = $1239.tail;\n                            }\n                            return _players$12;\n                        })();\n                        var $1236 = List$concat$(_result$6, _players$11);\n                        var $1232 = $1236;\n                        break;\n                };\n                _result$6 = $1232;\n                $1233 = $1233.tail;\n            }\n            return _result$6;\n        })();\n        var $1230 = Map$from_list$(_result$5);\n        return $1230;\n    };\n    const Web$Kaelin$Map$find_players = x0 => Web$Kaelin$Map$find_players$(x0);\n\n    function Web$Kaelin$Map$addr_to_coord$(_addr$1, _map$2) {\n        var _list$3 = Web$Kaelin$Map$find_players$(_map$2);\n        var $1246 = Map$get$(_addr$1, _list$3);\n        return $1246;\n    };\n    const Web$Kaelin$Map$addr_to_coord = x0 => x1 => Web$Kaelin$Map$addr_to_coord$(x0, x1);\n    const Bool$or = a0 => a1 => (a0 || a1);\n\n    function Web$Kaelin$Map$is_occupied$(_coord$1, _map$2) {\n        var _tile$3 = Maybe$default$(Web$Kaelin$Map$get$(_coord$1, _map$2), List$nil);\n        var _is_occupied$4 = Bool$false;\n        var _is_occupied$5 = (() => {\n            var $1249 = _is_occupied$4;\n            var $1250 = _tile$3;\n            let _is_occupied$6 = $1249;\n            let _ent$5;\n            while ($1250._ === 'List.cons') {\n                _ent$5 = $1250.head;\n                var self = _ent$5;\n                switch (self._) {\n                    case 'Web.Kaelin.Entity.background':\n                        var $1251 = (_is_occupied$6 || Bool$false);\n                        var $1249 = $1251;\n                        break;\n                    case 'Web.Kaelin.Entity.creature':\n                        var $1252 = Bool$true;\n                        var $1249 = $1252;\n                        break;\n                };\n                _is_occupied$6 = $1249;\n                $1250 = $1250.tail;\n            }\n            return _is_occupied$6;\n        })();\n        var $1247 = _is_occupied$5;\n        return $1247;\n    };\n    const Web$Kaelin$Map$is_occupied = x0 => x1 => Web$Kaelin$Map$is_occupied$(x0, x1);\n\n    function List$pop_at$go$(_idx$2, _list$3, _searched_list$4) {\n        var List$pop_at$go$ = (_idx$2, _list$3, _searched_list$4) => ({\n            ctr: 'TCO',\n            arg: [_idx$2, _list$3, _searched_list$4]\n        });\n        var List$pop_at$go = _idx$2 => _list$3 => _searched_list$4 => List$pop_at$go$(_idx$2, _list$3, _searched_list$4);\n        var arg = [_idx$2, _list$3, _searched_list$4];\n        while (true) {\n            let [_idx$2, _list$3, _searched_list$4] = arg;\n            var R = (() => {\n                var self = _idx$2;\n                if (self === 0n) {\n                    var self = _list$3;\n                    switch (self._) {\n                        case 'List.cons':\n                            var $1254 = self.head;\n                            var $1255 = self.tail;\n                            var $1256 = Pair$new$(Maybe$some$($1254), List$concat$(_searched_list$4, $1255));\n                            var $1253 = $1256;\n                            break;\n                        case 'List.nil':\n                            var $1257 = Pair$new$(Maybe$none, _searched_list$4);\n                            var $1253 = $1257;\n                            break;\n                    };\n                    return $1253;\n                } else {\n                    var $1258 = (self - 1n);\n                    var self = _list$3;\n                    switch (self._) {\n                        case 'List.cons':\n                            var $1260 = self.head;\n                            var $1261 = self.tail;\n                            var $1262 = List$pop_at$go$($1258, $1261, List$concat$(_searched_list$4, List$cons$($1260, List$nil)));\n                            var $1259 = $1262;\n                            break;\n                        case 'List.nil':\n                            var $1263 = Pair$new$(Maybe$none, _searched_list$4);\n                            var $1259 = $1263;\n                            break;\n                    };\n                    return $1259;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$pop_at$go = x0 => x1 => x2 => List$pop_at$go$(x0, x1, x2);\n\n    function List$pop_at$(_idx$2, _list$3) {\n        var $1264 = List$pop_at$go$(_idx$2, _list$3, List$nil);\n        return $1264;\n    };\n    const List$pop_at = x0 => x1 => List$pop_at$(x0, x1);\n\n    function Web$Kaelin$Map$pop_at$(_idx$1, _coord$2, _map$3) {\n        var _tile$4 = Web$Kaelin$Map$get$(_coord$2, _map$3);\n        var self = _tile$4;\n        switch (self._) {\n            case 'Maybe.some':\n                var $1266 = self.value;\n                var self = List$pop_at$(_idx$1, $1266);\n                switch (self._) {\n                    case 'Pair.new':\n                        var $1268 = self.fst;\n                        var $1269 = self.snd;\n                        var _map$8 = Web$Kaelin$Map$set$(_coord$2, $1269, _map$3);\n                        var $1270 = Pair$new$(_map$8, $1268);\n                        var $1267 = $1270;\n                        break;\n                };\n                var $1265 = $1267;\n                break;\n            case 'Maybe.none':\n                var $1271 = Pair$new$(_map$3, Maybe$none);\n                var $1265 = $1271;\n                break;\n        };\n        return $1265;\n    };\n    const Web$Kaelin$Map$pop_at = x0 => x1 => x2 => Web$Kaelin$Map$pop_at$(x0, x1, x2);\n\n    function Web$Kaelin$Map$swap$(_idx$1, _ca$2, _cb$3, _map$4) {\n        var self = Web$Kaelin$Map$pop_at$(_idx$1, _ca$2, _map$4);\n        switch (self._) {\n            case 'Pair.new':\n                var $1273 = self.fst;\n                var $1274 = self.snd;\n                var self = $1274;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $1276 = self.value;\n                        var $1277 = Web$Kaelin$Map$push$(_cb$3, $1276, $1273);\n                        var $1275 = $1277;\n                        break;\n                    case 'Maybe.none':\n                        var $1278 = _map$4;\n                        var $1275 = $1278;\n                        break;\n                };\n                var $1272 = $1275;\n                break;\n        };\n        return $1272;\n    };\n    const Web$Kaelin$Map$swap = x0 => x1 => x2 => x3 => Web$Kaelin$Map$swap$(x0, x1, x2, x3);\n\n    function Web$Kaelin$Player$move$(_coord_b$1, _state$2, _address$3) {\n        var self = _state$2;\n        switch (self._) {\n            case 'Web.Kaelin.State.game':\n                var $1280 = self.room;\n                var $1281 = self.tick;\n                var $1282 = self.players;\n                var $1283 = self.cast_info;\n                var $1284 = self.map;\n                var $1285 = self.timer;\n                var $1286 = self.interface;\n                var _coord_a$11 = Web$Kaelin$Map$addr_to_coord$(_address$3, $1284);\n                var _is_occupied$12 = Web$Kaelin$Map$is_occupied$(_coord_b$1, $1284);\n                var _tile_b$13 = Web$Kaelin$Map$get$(_coord_b$1, $1284);\n                var self = _tile_b$13;\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $1288 = _state$2;\n                        var $1287 = $1288;\n                        break;\n                    case 'Maybe.some':\n                        var self = _is_occupied$12;\n                        if (self) {\n                            var $1290 = _state$2;\n                            var $1289 = $1290;\n                        } else {\n                            var _new_map$15 = Web$Kaelin$Map$swap$(0n, Maybe$default$(_coord_a$11, _coord_b$1), _coord_b$1, $1284);\n                            var $1291 = Web$Kaelin$State$game$($1280, $1281, $1282, $1283, _new_map$15, $1285, $1286);\n                            var $1289 = $1291;\n                        };\n                        var $1287 = $1289;\n                        break;\n                };\n                var $1279 = $1287;\n                break;\n            case 'Web.Kaelin.State.init':\n            case 'Web.Kaelin.State.void':\n                var $1292 = _state$2;\n                var $1279 = $1292;\n                break;\n        };\n        return $1279;\n    };\n    const Web$Kaelin$Player$move = x0 => x1 => x2 => Web$Kaelin$Player$move$(x0, x1, x2);\n\n    function Web$Kaelin$App$when$(_event$1, _state$2) {\n        var self = _event$1;\n        switch (self._) {\n            case 'App.Event.init':\n                var $1294 = self.user;\n                var self = _state$2;\n                switch (self._) {\n                    case 'Web.Kaelin.State.init':\n                    case 'Web.Kaelin.State.void':\n                        var $1296 = App$pass;\n                        var $1295 = $1296;\n                        break;\n                    case 'Web.Kaelin.State.game':\n                        var self = _event$1;\n                        switch (self._) {\n                            case 'App.Event.init':\n                                var $1298 = self.user;\n                                var $1299 = IO$monad$((_m$bind$16 => _m$pure$17 => {\n                                    var $1300 = _m$bind$16;\n                                    return $1300;\n                                }))(App$watch$(Web$Kaelin$Constants$room))((_$16 => {\n                                    var $1301 = App$store$(Web$Kaelin$Action$create_player$($1298, Web$Kaelin$Hero$croni, _state$2));\n                                    return $1301;\n                                }));\n                                var $1297 = $1299;\n                                break;\n                            case 'App.Event.tick':\n                            case 'App.Event.mouse_down':\n                            case 'App.Event.mouse_up':\n                            case 'App.Event.key_down':\n                            case 'App.Event.key_up':\n                            case 'App.Event.mouse_over':\n                            case 'App.Event.mouse_out':\n                            case 'App.Event.resize':\n                                var $1302 = IO$monad$((_m$bind$15 => _m$pure$16 => {\n                                    var $1303 = _m$bind$15;\n                                    return $1303;\n                                }))(App$watch$(Web$Kaelin$Constants$room))((_$15 => {\n                                    var $1304 = App$store$(Web$Kaelin$Action$create_player$($1294, Web$Kaelin$Hero$croni, _state$2));\n                                    return $1304;\n                                }));\n                                var $1297 = $1302;\n                                break;\n                            case 'App.Event.post':\n                                var $1305 = IO$monad$((_m$bind$17 => _m$pure$18 => {\n                                    var $1306 = _m$bind$17;\n                                    return $1306;\n                                }))(App$watch$(Web$Kaelin$Constants$room))((_$17 => {\n                                    var $1307 = App$store$(Web$Kaelin$Action$create_player$($1294, Web$Kaelin$Hero$croni, _state$2));\n                                    return $1307;\n                                }));\n                                var $1297 = $1305;\n                                break;\n                            case 'App.Event.mouse_click':\n                                var $1308 = IO$monad$((_m$bind$16 => _m$pure$17 => {\n                                    var $1309 = _m$bind$16;\n                                    return $1309;\n                                }))(App$watch$(Web$Kaelin$Constants$room))((_$16 => {\n                                    var $1310 = App$store$(Web$Kaelin$Action$create_player$($1294, Web$Kaelin$Hero$croni, _state$2));\n                                    return $1310;\n                                }));\n                                var $1297 = $1308;\n                                break;\n                        };\n                        var $1295 = $1297;\n                        break;\n                };\n                var $1293 = $1295;\n                break;\n            case 'App.Event.tick':\n                var $1311 = self.time;\n                var $1312 = self.info;\n                var self = _state$2;\n                switch (self._) {\n                    case 'Web.Kaelin.State.init':\n                    case 'Web.Kaelin.State.void':\n                        var $1314 = App$pass;\n                        var $1313 = $1314;\n                        break;\n                    case 'Web.Kaelin.State.game':\n                        var _app$12 = Web$Kaelin$Action$update_interface$($1312, ($1311), _state$2);\n                        var $1315 = App$store$(_app$12);\n                        var $1313 = $1315;\n                        break;\n                };\n                var $1293 = $1313;\n                break;\n            case 'App.Event.post':\n                var $1316 = self.addr;\n                var $1317 = self.data;\n                var self = _state$2;\n                switch (self._) {\n                    case 'Web.Kaelin.State.init':\n                    case 'Web.Kaelin.State.void':\n                        var $1319 = App$pass;\n                        var $1318 = $1319;\n                        break;\n                    case 'Web.Kaelin.State.game':\n                        var self = Web$Kaelin$Event$deserialize$(String$drop$(2n, $1317));\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $1321 = self.value;\n                                var self = $1321;\n                                switch (self._) {\n                                    case 'Web.Kaelin.Event.user_input':\n                                        var $1323 = self.coord;\n                                        var _pos$17 = $1323;\n                                        var self = _pos$17;\n                                        switch (self._) {\n                                            case 'Web.Kaelin.Coord.new':\n                                                var $1325 = App$store$(Web$Kaelin$Player$move$(_pos$17, _state$2, $1316));\n                                                var $1324 = $1325;\n                                                break;\n                                        };\n                                        var $1322 = $1324;\n                                        break;\n                                    case 'Web.Kaelin.Event.start_game':\n                                    case 'Web.Kaelin.Event.create_user':\n                                    case 'Web.Kaelin.Event.create_hero':\n                                        var $1326 = App$pass;\n                                        var $1322 = $1326;\n                                        break;\n                                };\n                                var $1320 = $1322;\n                                break;\n                            case 'Maybe.none':\n                                var $1327 = App$pass;\n                                var $1320 = $1327;\n                                break;\n                        };\n                        var $1318 = $1320;\n                        break;\n                };\n                var $1293 = $1318;\n                break;\n            case 'App.Event.mouse_down':\n            case 'App.Event.key_down':\n            case 'App.Event.key_up':\n            case 'App.Event.mouse_over':\n            case 'App.Event.mouse_out':\n            case 'App.Event.resize':\n                var self = _state$2;\n                switch (self._) {\n                    case 'Web.Kaelin.State.init':\n                    case 'Web.Kaelin.State.void':\n                    case 'Web.Kaelin.State.game':\n                        var $1329 = App$pass;\n                        var $1328 = $1329;\n                        break;\n                };\n                var $1293 = $1328;\n                break;\n            case 'App.Event.mouse_up':\n                var self = _state$2;\n                switch (self._) {\n                    case 'Web.Kaelin.State.game':\n                        var $1331 = self.room;\n                        var $1332 = self.interface;\n                        var _info$12 = $1332;\n                        var self = _info$12;\n                        switch (self._) {\n                            case 'App.EnvInfo.new':\n                                var $1334 = self.mouse_pos;\n                                var self = Web$Kaelin$Coord$to_axial$($1334);\n                                switch (self._) {\n                                    case 'Web.Kaelin.Coord.new':\n                                        var $1336 = self.i;\n                                        var $1337 = self.j;\n                                        var _hex$17 = Web$Kaelin$Event$serialize$(Web$Kaelin$Event$user_input$(Web$Kaelin$Coord$new$($1336, $1337), Web$Kaelin$Action$walk));\n                                        var $1338 = App$post$($1331, _hex$17);\n                                        var $1335 = $1338;\n                                        break;\n                                };\n                                var $1333 = $1335;\n                                break;\n                        };\n                        var $1330 = $1333;\n                        break;\n                    case 'Web.Kaelin.State.init':\n                    case 'Web.Kaelin.State.void':\n                        var $1339 = App$pass;\n                        var $1330 = $1339;\n                        break;\n                };\n                var $1293 = $1330;\n                break;\n            case 'App.Event.mouse_click':\n                var self = _state$2;\n                switch (self._) {\n                    case 'Web.Kaelin.State.init':\n                    case 'Web.Kaelin.State.void':\n                    case 'Web.Kaelin.State.game':\n                        var $1341 = App$pass;\n                        var $1340 = $1341;\n                        break;\n                };\n                var $1293 = $1340;\n                break;\n        };\n        return $1293;\n    };\n    const Web$Kaelin$App$when = x0 => x1 => Web$Kaelin$App$when$(x0, x1);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $1342 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $1342;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$Kaelin = (() => {\n        var _img$1 = VoxBox$alloc_capacity$(((65536 * 8) >>> 0));\n        var _init$2 = Web$Kaelin$App$init;\n        var _draw$3 = Web$Kaelin$App$draw(_img$1);\n        var _when$4 = Web$Kaelin$App$when;\n        var $1343 = App$new$(_init$2, _draw$3, _when$4);\n        return $1343;\n    })();\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Word.bit_length.go': Word$bit_length$go,\n        'Word.bit_length': Word$bit_length,\n        'U32.bit_length': U32$bit_length,\n        'Word.i': Word$i,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Word.shift_left1.aux': Word$shift_left1$aux,\n        'Word.shift_left1': Word$shift_left1,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'Word.mul.go': Word$mul$go,\n        'Word.to_zero': Word$to_zero,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Nat.apply': Nat$apply,\n        'Word.inc': Word$inc,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u32': Nat$to_u32,\n        'VoxBox.new': VoxBox$new,\n        'VoxBox.alloc_capacity': VoxBox$alloc_capacity,\n        'Web.Kaelin.Constants.room': Web$Kaelin$Constants$room,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.nil': List$nil,\n        'Pair': Pair,\n        'Web.Kaelin.CastInfo.new': Web$Kaelin$CastInfo$new,\n        'Web.Kaelin.Coord.new': Web$Kaelin$Coord$new,\n        'I32.new': I32$new,\n        'Word.neg.aux': Word$neg$aux,\n        'Word.neg': Word$neg,\n        'I32.neg': I32$neg,\n        'Int.to_i32': Int$to_i32,\n        'Int.new': Int$new,\n        'Int.from_nat': Int$from_nat,\n        'Web.Kaelin.HexEffect.normal': Web$Kaelin$HexEffect$normal,\n        'Web.Kaelin.Entity.creature': Web$Kaelin$Entity$creature,\n        'Web.Kaelin.Hero.new': Web$Kaelin$Hero$new,\n        'U8.new': U8$new,\n        'Nat.to_u8': Nat$to_u8,\n        'Nat.ltn': Nat$ltn,\n        'Nat.sub': Nat$sub,\n        'Word.shift_left': Word$shift_left,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.gte': Word$gte,\n        'Pair.new': Pair$new,\n        'Word.or': Word$or,\n        'Word.shift_right1.aux': Word$shift_right1$aux,\n        'Word.shift_right1': Word$shift_right1,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'Word.div.go': Word$div$go,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'U32.length': U32$length,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Word.eql': Word$eql,\n        'U32.eql': U32$eql,\n        'U32.inc': U32$inc,\n        'U32.for': U32$for,\n        'Word.slice': Word$slice,\n        'U32.slice': U32$slice,\n        'U32.add': U32$add,\n        'U32.read_base': U32$read_base,\n        'VoxBox.parse_byte': VoxBox$parse_byte,\n        'U32.or': U32$or,\n        'U32.shl': U32$shl,\n        'Pos32.new': Pos32$new,\n        'Col32.new': Col32$new,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'VoxBox.set_pos': VoxBox$set_pos,\n        'VoxBox.set_col': VoxBox$set_col,\n        'VoxBox.set_length': VoxBox$set_length,\n        'VoxBox.push': VoxBox$push,\n        'VoxBox.parse': VoxBox$parse,\n        'Web.Kaelin.Assets.hero.croni0_d_1': Web$Kaelin$Assets$hero$croni0_d_1,\n        'Web.Kaelin.Hero.croni': Web$Kaelin$Hero$croni,\n        'Web.Kaelin.Assets.hero.cyclope_d_1': Web$Kaelin$Assets$hero$cyclope_d_1,\n        'Web.Kaelin.Hero.cyclope': Web$Kaelin$Hero$cyclope,\n        'Web.Kaelin.Assets.hero.lela_d_1': Web$Kaelin$Assets$hero$lela_d_1,\n        'Web.Kaelin.Hero.lela': Web$Kaelin$Hero$lela,\n        'Web.Kaelin.Assets.hero.octoking_d_1': Web$Kaelin$Assets$hero$octoking_d_1,\n        'Web.Kaelin.Hero.octoking': Web$Kaelin$Hero$octoking,\n        'Maybe.default': Maybe$default,\n        'List': List,\n        'Cmp.as_gtn': Cmp$as_gtn,\n        'Nat.cmp': Nat$cmp,\n        'Nat.add': Nat$add,\n        'Int.cmp': Int$cmp,\n        'Int.gtn': Int$gtn,\n        'Int.add': Int$add,\n        'Int.neg': Int$neg,\n        'Int.sub': Int$sub,\n        'Nat.mul': Nat$mul,\n        'Int.mul': Int$mul,\n        'Int.to_nat': Int$to_nat,\n        'Arith.Z_to_N': Arith$Z_to_N,\n        'Word.is_neg.go': Word$is_neg$go,\n        'Word.is_neg': Word$is_neg,\n        'Word.fold': Word$fold,\n        'Word.to_nat': Word$to_nat,\n        'Word.abs': Word$abs,\n        'Word.to_int': Word$to_int,\n        'I32.to_int': I32$to_int,\n        'Pair.fst': Pair$fst,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'Nat.div': Nat$div,\n        'Arith.NxN_to_N': Arith$NxN_to_N,\n        'Web.Kaelin.Coord.Convert.axial_to_nat': Web$Kaelin$Coord$Convert$axial_to_nat,\n        'Maybe': Maybe,\n        'BitsMap.get': BitsMap$get,\n        'Bits.inc': Bits$inc,\n        'Nat.to_bits': Nat$to_bits,\n        'NatMap.get': NatMap$get,\n        'Web.Kaelin.Map.get': Web$Kaelin$Map$get,\n        'List.cons': List$cons,\n        'NatMap.set': NatMap$set,\n        'Web.Kaelin.Map.set': Web$Kaelin$Map$set,\n        'Web.Kaelin.Map.push': Web$Kaelin$Map$push,\n        'Web.Kaelin.Map.init': Web$Kaelin$Map$init,\n        'NatMap.new': NatMap$new,\n        'Web.Kaelin.Constants.map_size': Web$Kaelin$Constants$map_size,\n        'Web.Kaelin.Assets.tile.effect.blue_green2': Web$Kaelin$Assets$tile$effect$blue_green2,\n        'Web.Kaelin.Assets.tile.effect.dark_blue2': Web$Kaelin$Assets$tile$effect$dark_blue2,\n        'Web.Kaelin.Assets.tile.effect.dark_red2': Web$Kaelin$Assets$tile$effect$dark_red2,\n        'Web.Kaelin.Assets.tile.green_2': Web$Kaelin$Assets$tile$green_2,\n        'Web.Kaelin.Assets.tile.effect.light_blue2': Web$Kaelin$Assets$tile$effect$light_blue2,\n        'Web.Kaelin.Assets.tile.effect.light_red2': Web$Kaelin$Assets$tile$effect$light_red2,\n        'Web.Kaelin.Terrain.grass': Web$Kaelin$Terrain$grass,\n        'Web.Kaelin.Entity.background': Web$Kaelin$Entity$background,\n        'NatMap': NatMap,\n        'I32.sub': I32$sub,\n        'F64.to_i32': F64$to_i32,\n        'Word.to_f64': Word$to_f64,\n        'U32.to_f64': U32$to_f64,\n        'U32.to_i32': U32$to_i32,\n        'Web.Kaelin.Coord.Cubic.new': Web$Kaelin$Coord$Cubic$new,\n        'Web.Kaelin.Coord.Convert.axial_to_cubic': Web$Kaelin$Coord$Convert$axial_to_cubic,\n        'I32.abs': I32$abs,\n        'Cmp.inv': Cmp$inv,\n        'Word.s_gtn': Word$s_gtn,\n        'I32.gtn': I32$gtn,\n        'I32.max': I32$max,\n        'F64.to_u32': F64$to_u32,\n        'Word.s_to_f64': Word$s_to_f64,\n        'I32.to_f64': I32$to_f64,\n        'I32.to_u32': I32$to_u32,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Word.lte': Word$lte,\n        'U32.lte': U32$lte,\n        'Web.Kaelin.Coord.fit': Web$Kaelin$Coord$fit,\n        'Web.Kaelin.Map.arena': Web$Kaelin$Map$arena,\n        'App.EnvInfo.new': App$EnvInfo$new,\n        'Web.Kaelin.State.game': Web$Kaelin$State$game,\n        'Web.Kaelin.App.init': Web$Kaelin$App$init,\n        'DOM.text': DOM$text,\n        'DOM.vbox': DOM$vbox,\n        'List.reverse.go': List$reverse$go,\n        'List.reverse': List$reverse,\n        'Bits.reverse.tco': Bits$reverse$tco,\n        'Bits.reverse': Bits$reverse,\n        'BitsMap.to_list.go': BitsMap$to_list$go,\n        'List.mapped': List$mapped,\n        'Bits.to_nat': Bits$to_nat,\n        'NatMap.to_list': NatMap$to_list,\n        'List.map': List$map,\n        'Web.Kaelin.Coord.Convert.cubic_to_axial': Web$Kaelin$Coord$Convert$cubic_to_axial,\n        'I32.add': I32$add,\n        'Cmp.as_ltn': Cmp$as_ltn,\n        'Word.s_ltn': Word$s_ltn,\n        'I32.ltn': I32$ltn,\n        'I32.min': I32$min,\n        'Web.Kaelin.Coord.Cubic.add': Web$Kaelin$Coord$Cubic$add,\n        'List.concat': List$concat,\n        'Web.Kaelin.Coord.Cubic.range': Web$Kaelin$Coord$Cubic$range,\n        'Web.Kaelin.Coord.Axial.range': Web$Kaelin$Coord$Axial$range,\n        'List.filter': List$filter,\n        'Web.Kaelin.Coord.range': Web$Kaelin$Coord$range,\n        'List.for': List$for,\n        'Bits.tail': Bits$tail,\n        'Bits.shift_right': Bits$shift_right,\n        'Bits.add': Bits$add,\n        'Bits.size.go': Bits$size$go,\n        'Bits.size': Bits$size,\n        'Bits.shift_left': Bits$shift_left,\n        'Bits.cmp.go': Bits$cmp$go,\n        'Bits.cmp': Bits$cmp,\n        'Bits.gte': Bits$gte,\n        'Bits.sub.go': Bits$sub$go,\n        'Bits.sub': Bits$sub,\n        'Bits.div.go': Bits$div$go,\n        'Bits.div': Bits$div,\n        'Bits.ltn': Bits$ltn,\n        'Maybe.unfold': Maybe$unfold,\n        'Bits.sqrt': Bits$sqrt,\n        'Nat.sqrt': Nat$sqrt,\n        'Nat.pow': Nat$pow,\n        'Arith.N_to_NxN': Arith$N_to_NxN,\n        'Nat.eql': Nat$eql,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Nat.gtn': Nat$gtn,\n        'Int.is_neg': Int$is_neg,\n        'Int.abs': Int$abs,\n        'Int.to_nat_signed': Int$to_nat_signed,\n        'Int.div_nat': Int$div_nat,\n        'Int.div': Int$div,\n        'Arith.N_to_Z': Arith$N_to_Z,\n        'Web.Kaelin.Coord.Convert.nat_to_axial': Web$Kaelin$Coord$Convert$nat_to_axial,\n        'Web.Kaelin.Constants.hexagon_radius': Web$Kaelin$Constants$hexagon_radius,\n        'F64.div': F64$div,\n        'F64.parse': F64$parse,\n        'Web.Kaelin.Constants.center_x': Web$Kaelin$Constants$center_x,\n        'Web.Kaelin.Constants.center_y': Web$Kaelin$Constants$center_y,\n        'F64.add': F64$add,\n        'F64.mul': F64$mul,\n        'Web.Kaelin.Coord.to_screen_xy': Web$Kaelin$Coord$to_screen_xy,\n        'U32.sub': U32$sub,\n        'Web.Kaelin.Draw.support.centralize': Web$Kaelin$Draw$support$centralize,\n        'List.any': List$any,\n        'Bool.and': Bool$and,\n        'I32.eql': I32$eql,\n        'Web.Kaelin.Coord.eql': Web$Kaelin$Coord$eql,\n        'Web.Kaelin.Draw.support.which_effect': Web$Kaelin$Draw$support$which_effect,\n        'F64.sub': F64$sub,\n        'Web.Kaelin.Coord.round.floor': Web$Kaelin$Coord$round$floor,\n        'Web.Kaelin.Coord.round.round_F64': Web$Kaelin$Coord$round$round_F64,\n        'Word.gtn': Word$gtn,\n        'F64.gtn': F64$gtn,\n        'Web.Kaelin.Coord.round.diff': Web$Kaelin$Coord$round$diff,\n        'Web.Kaelin.Coord.round': Web$Kaelin$Coord$round,\n        'Web.Kaelin.Coord.to_axial': Web$Kaelin$Coord$to_axial,\n        'Web.Kaelin.Draw.support.mouse_on_coord': Web$Kaelin$Draw$support$mouse_on_coord,\n        'Web.Kaelin.Terrain.Sprite.new': Web$Kaelin$Terrain$Sprite$new,\n        'VoxBox.get_len': VoxBox$get_len,\n        'Array.get': Array$get,\n        'Buffer32.get': Buffer32$get,\n        'VoxBox.get_pos': VoxBox$get_pos,\n        'VoxBox.get_col': VoxBox$get_col,\n        'Word.and': Word$and,\n        'U32.and': U32$and,\n        'U32.shr': U32$shr,\n        'VoxBox.Draw.image': VoxBox$Draw$image,\n        'Web.Kaelin.Draw.state.background': Web$Kaelin$Draw$state$background,\n        'Web.Kaelin.Draw.hero': Web$Kaelin$Draw$hero,\n        'Web.Kaelin.Draw.state.players': Web$Kaelin$Draw$state$players,\n        'Web.Kaelin.Draw.state': Web$Kaelin$Draw$state,\n        'Web.Kaelin.App.draw': Web$Kaelin$App$draw,\n        'U8.to_nat': U8$to_nat,\n        'List.zip': List$zip,\n        'Web.Kaelin.Event.Code.action': Web$Kaelin$Event$Code$action,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'String.length.go': String$length$go,\n        'String.length': String$length,\n        'String.nil': String$nil,\n        'String.repeat': String$repeat,\n        'Hex.set_min_length': Hex$set_min_length,\n        'List.fold': List$fold,\n        'List.foldr': List$foldr,\n        'Hex.format_hex': Hex$format_hex,\n        'Bits.gtn': Bits$gtn,\n        'U32.to_bits': U32$to_bits,\n        'Bits.mul.go': Bits$mul$go,\n        'Bits.mul': Bits$mul,\n        'Bits.mod': Bits$mod,\n        'Nat.square': Nat$square,\n        'Bits.break': Bits$break,\n        'Function.flip': Function$flip,\n        'Hex.to_hex_string': Hex$to_hex_string,\n        'Bits.to_hex_string': Bits$to_hex_string,\n        'Hex.append': Hex$append,\n        'Pair.snd': Pair$snd,\n        'Web.Kaelin.Event.Code.generate_hex': Web$Kaelin$Event$Code$generate_hex,\n        'generate_hex': generate_hex,\n        'Web.Kaelin.Event.Code.create_hero': Web$Kaelin$Event$Code$create_hero,\n        'Web.Kaelin.Resources.Action.to_bits': Web$Kaelin$Resources$Action$to_bits,\n        'Web.Kaelin.Coord.Convert.axial_to_bits': Web$Kaelin$Coord$Convert$axial_to_bits,\n        'Web.Kaelin.Event.Code.user_input': Web$Kaelin$Event$Code$user_input,\n        'Web.Kaelin.Event.serialize': Web$Kaelin$Event$serialize,\n        'String.drop': String$drop,\n        'Web.Kaelin.Event.Buffer.next': Web$Kaelin$Event$Buffer$next,\n        'Parser.run': Parser$run,\n        'Parser.Reply': Parser$Reply,\n        'Parser.Reply.error': Parser$Reply$error,\n        'Parser.Reply.value': Parser$Reply$value,\n        'Parser.many.go': Parser$many$go,\n        'Parser.many': Parser$many,\n        'Parser.many1': Parser$many1,\n        'Parser.one': Parser$one,\n        'U16.eql': U16$eql,\n        'Char.eql': Char$eql,\n        'Hex.char_hex_to_nat': Hex$char_hex_to_nat,\n        'Parser': Parser,\n        'Parser.fail': Parser$fail,\n        'Hex.parser.char_hex': Hex$parser$char_hex,\n        'List.fold_right': List$fold_right,\n        'append_2_go': append_2_go,\n        'Nat.append_2': Nat$append_2,\n        'Hex.parser': Hex$parser,\n        'Hex.to_nat': Hex$to_nat,\n        'String.take': String$take,\n        'Web.Kaelin.Event.Buffer.get': Web$Kaelin$Event$Buffer$get,\n        'Web.Kaelin.Event.Buffer.push': Web$Kaelin$Event$Buffer$push,\n        'Web.Kaelin.Event.Buffer.new': Web$Kaelin$Event$Buffer$new,\n        'Web.Kaelin.Event.create_hero': Web$Kaelin$Event$create_hero,\n        'Web.Kaelin.Action.walk': Web$Kaelin$Action$walk,\n        'Web.Kaelin.Action.ability_0': Web$Kaelin$Action$ability_0,\n        'Web.Kaelin.Action.ability_1': Web$Kaelin$Action$ability_1,\n        'Web.Kaelin.Resources.Action.to_action': Web$Kaelin$Resources$Action$to_action,\n        'Maybe.bind': Maybe$bind,\n        'Web.Kaelin.Event.user_input': Web$Kaelin$Event$user_input,\n        'Web.Kaelin.Event.deserialize': Web$Kaelin$Event$deserialize,\n        'IO': IO,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'Dynamic.new': Dynamic$new,\n        'App.pass': App$pass,\n        'IO.do': IO$do,\n        'App.do': App$do,\n        'App.watch': App$watch,\n        'App.store': App$store,\n        'Map.get': Map$get,\n        'Web.Kaelin.Player.new': Web$Kaelin$Player$new,\n        'Map.set': Map$set,\n        'Web.Kaelin.Action.create_player': Web$Kaelin$Action$create_player,\n        'Web.Kaelin.Action.update_interface': Web$Kaelin$Action$update_interface,\n        'U64.to_nat': U64$to_nat,\n        'App.post': App$post,\n        'Web.Kaelin.Map.find_players': Web$Kaelin$Map$find_players,\n        'Web.Kaelin.Map.addr_to_coord': Web$Kaelin$Map$addr_to_coord,\n        'Bool.or': Bool$or,\n        'Web.Kaelin.Map.is_occupied': Web$Kaelin$Map$is_occupied,\n        'List.pop_at.go': List$pop_at$go,\n        'List.pop_at': List$pop_at,\n        'Web.Kaelin.Map.pop_at': Web$Kaelin$Map$pop_at,\n        'Web.Kaelin.Map.swap': Web$Kaelin$Map$swap,\n        'Web.Kaelin.Player.move': Web$Kaelin$Player$move,\n        'Web.Kaelin.App.when': Web$Kaelin$App$when,\n        'App.new': App$new,\n        'Web.Kaelin': Web$Kaelin,\n    };\n})();"],"sourceRoot":""}