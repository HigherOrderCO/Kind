{"version":3,"sources":["webpack://kind-web/./src/apps/Web.Kaelin.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA,0CAA0C,cAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"927.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    const inst_unit = x => x(1);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c2;\n                return $2;\n            } else {\n                var $3 = c2;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c2;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c2($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c2;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c2($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $33 = u32array_to_buffer32(_array$2);\n        return $33;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $34 = null;\n        return $34;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $35 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $35;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $36 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $36;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $38 = Array$tip$(_x$3);\n            var $37 = $38;\n        } else {\n            var $39 = (self - 1n);\n            var _half$5 = Array$alloc$($39, _x$3);\n            var $40 = Array$tie$(_half$5, _half$5);\n            var $37 = $40;\n        };\n        return $37;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $41 = word_to_u32(_value$1);\n        return $41;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $42 = null;\n        return $42;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $43 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $43;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $45 = Word$e;\n            var $44 = $45;\n        } else {\n            var $46 = (self - 1n);\n            var $47 = Word$o$(Word$zero$($46));\n            var $44 = $47;\n        };\n        return $44;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n    const U32$zero = U32$new$(Word$zero$(32n));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $49 = Bool$false;\n                var $48 = $49;\n                break;\n            case 'Cmp.eql':\n                var $50 = Bool$true;\n                var $48 = $50;\n                break;\n        };\n        return $48;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $52 = self.pred;\n                var $53 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $55 = self.pred;\n                            var $56 = (_a$pred$10 => {\n                                var $57 = Word$cmp$go$(_a$pred$10, $55, _c$4);\n                                return $57;\n                            });\n                            var $54 = $56;\n                            break;\n                        case 'Word.i':\n                            var $58 = self.pred;\n                            var $59 = (_a$pred$10 => {\n                                var $60 = Word$cmp$go$(_a$pred$10, $58, Cmp$ltn);\n                                return $60;\n                            });\n                            var $54 = $59;\n                            break;\n                        case 'Word.e':\n                            var $61 = (_a$pred$8 => {\n                                var $62 = _c$4;\n                                return $62;\n                            });\n                            var $54 = $61;\n                            break;\n                    };\n                    var $54 = $54($52);\n                    return $54;\n                });\n                var $51 = $53;\n                break;\n            case 'Word.i':\n                var $63 = self.pred;\n                var $64 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $66 = self.pred;\n                            var $67 = (_a$pred$10 => {\n                                var $68 = Word$cmp$go$(_a$pred$10, $66, Cmp$gtn);\n                                return $68;\n                            });\n                            var $65 = $67;\n                            break;\n                        case 'Word.i':\n                            var $69 = self.pred;\n                            var $70 = (_a$pred$10 => {\n                                var $71 = Word$cmp$go$(_a$pred$10, $69, _c$4);\n                                return $71;\n                            });\n                            var $65 = $70;\n                            break;\n                        case 'Word.e':\n                            var $72 = (_a$pred$8 => {\n                                var $73 = _c$4;\n                                return $73;\n                            });\n                            var $65 = $72;\n                            break;\n                    };\n                    var $65 = $65($63);\n                    return $65;\n                });\n                var $51 = $64;\n                break;\n            case 'Word.e':\n                var $74 = (_b$5 => {\n                    var $75 = _c$4;\n                    return $75;\n                });\n                var $51 = $74;\n                break;\n        };\n        var $51 = $51(_b$3);\n        return $51;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $76 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $76;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $77 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $77;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n\n    function Nat$succ$(_pred$1) {\n        var $78 = 1n + _pred$1;\n        return $78;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$eql = a0 => a1 => (a0 === a1);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $79 = _x$4;\n                    return $79;\n                } else {\n                    var $80 = (self - 1n);\n                    var $81 = Nat$apply$($80, _f$3, _f$3(_x$4));\n                    return $81;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$i$(_pred$2) {\n        var $82 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $82;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $84 = self.pred;\n                var $85 = Word$i$($84);\n                var $83 = $85;\n                break;\n            case 'Word.i':\n                var $86 = self.pred;\n                var $87 = Word$o$(Word$inc$($86));\n                var $83 = $87;\n                break;\n            case 'Word.e':\n                var $88 = Word$e;\n                var $83 = $88;\n                break;\n        };\n        return $83;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function U32$inc$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $90 = u32_to_word(self);\n                var $91 = U32$new$(Word$inc$($90));\n                var $89 = $91;\n                break;\n        };\n        return $89;\n    };\n    const U32$inc = x0 => U32$inc$(x0);\n    const Nat$to_u32 = a0 => (Number(a0));\n    const U32$shr = a0 => a1 => (a0 >>> a1);\n\n    function U32$needed_depth$go$(_n$1) {\n        var self = (_n$1 === 0);\n        if (self) {\n            var $93 = 0n;\n            var $92 = $93;\n        } else {\n            var $94 = Nat$succ$(U32$needed_depth$go$((_n$1 >>> 1)));\n            var $92 = $94;\n        };\n        return $92;\n    };\n    const U32$needed_depth$go = x0 => U32$needed_depth$go$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $96 = self.pred;\n                var $97 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $99 = self.pred;\n                            var $100 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $102 = Word$i$(Word$subber$(_a$pred$10, $99, Bool$true));\n                                    var $101 = $102;\n                                } else {\n                                    var $103 = Word$o$(Word$subber$(_a$pred$10, $99, Bool$false));\n                                    var $101 = $103;\n                                };\n                                return $101;\n                            });\n                            var $98 = $100;\n                            break;\n                        case 'Word.i':\n                            var $104 = self.pred;\n                            var $105 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $107 = Word$o$(Word$subber$(_a$pred$10, $104, Bool$true));\n                                    var $106 = $107;\n                                } else {\n                                    var $108 = Word$i$(Word$subber$(_a$pred$10, $104, Bool$true));\n                                    var $106 = $108;\n                                };\n                                return $106;\n                            });\n                            var $98 = $105;\n                            break;\n                        case 'Word.e':\n                            var $109 = (_a$pred$8 => {\n                                var $110 = Word$e;\n                                return $110;\n                            });\n                            var $98 = $109;\n                            break;\n                    };\n                    var $98 = $98($96);\n                    return $98;\n                });\n                var $95 = $97;\n                break;\n            case 'Word.i':\n                var $111 = self.pred;\n                var $112 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $114 = self.pred;\n                            var $115 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $117 = Word$o$(Word$subber$(_a$pred$10, $114, Bool$false));\n                                    var $116 = $117;\n                                } else {\n                                    var $118 = Word$i$(Word$subber$(_a$pred$10, $114, Bool$false));\n                                    var $116 = $118;\n                                };\n                                return $116;\n                            });\n                            var $113 = $115;\n                            break;\n                        case 'Word.i':\n                            var $119 = self.pred;\n                            var $120 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $122 = Word$i$(Word$subber$(_a$pred$10, $119, Bool$true));\n                                    var $121 = $122;\n                                } else {\n                                    var $123 = Word$o$(Word$subber$(_a$pred$10, $119, Bool$false));\n                                    var $121 = $123;\n                                };\n                                return $121;\n                            });\n                            var $113 = $120;\n                            break;\n                        case 'Word.e':\n                            var $124 = (_a$pred$8 => {\n                                var $125 = Word$e;\n                                return $125;\n                            });\n                            var $113 = $124;\n                            break;\n                    };\n                    var $113 = $113($111);\n                    return $113;\n                });\n                var $95 = $112;\n                break;\n            case 'Word.e':\n                var $126 = (_b$5 => {\n                    var $127 = Word$e;\n                    return $127;\n                });\n                var $95 = $126;\n                break;\n        };\n        var $95 = $95(_b$3);\n        return $95;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $128 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $128;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U32$sub = a0 => a1 => (Math.max(a0 - a1, 0));\n\n    function U32$needed_depth$(_size$1) {\n        var $129 = U32$needed_depth$go$((Math.max(_size$1 - 1, 0)));\n        return $129;\n    };\n    const U32$needed_depth = x0 => U32$needed_depth$(x0);\n\n    function Word$shift_left1$aux$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $131 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $133 = Word$i$(Word$shift_left1$aux$($131, Bool$false));\n                    var $132 = $133;\n                } else {\n                    var $134 = Word$o$(Word$shift_left1$aux$($131, Bool$false));\n                    var $132 = $134;\n                };\n                var $130 = $132;\n                break;\n            case 'Word.i':\n                var $135 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $137 = Word$i$(Word$shift_left1$aux$($135, Bool$true));\n                    var $136 = $137;\n                } else {\n                    var $138 = Word$o$(Word$shift_left1$aux$($135, Bool$true));\n                    var $136 = $138;\n                };\n                var $130 = $136;\n                break;\n            case 'Word.e':\n                var $139 = Word$e;\n                var $130 = $139;\n                break;\n        };\n        return $130;\n    };\n    const Word$shift_left1$aux = x0 => x1 => Word$shift_left1$aux$(x0, x1);\n\n    function Word$shift_left1$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $141 = self.pred;\n                var $142 = Word$o$(Word$shift_left1$aux$($141, Bool$false));\n                var $140 = $142;\n                break;\n            case 'Word.i':\n                var $143 = self.pred;\n                var $144 = Word$o$(Word$shift_left1$aux$($143, Bool$true));\n                var $140 = $144;\n                break;\n            case 'Word.e':\n                var $145 = Word$e;\n                var $140 = $145;\n                break;\n        };\n        return $140;\n    };\n    const Word$shift_left1 = x0 => Word$shift_left1$(x0);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $147 = self.pred;\n                var $148 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $150 = self.pred;\n                            var $151 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $153 = Word$i$(Word$adder$(_a$pred$10, $150, Bool$false));\n                                    var $152 = $153;\n                                } else {\n                                    var $154 = Word$o$(Word$adder$(_a$pred$10, $150, Bool$false));\n                                    var $152 = $154;\n                                };\n                                return $152;\n                            });\n                            var $149 = $151;\n                            break;\n                        case 'Word.i':\n                            var $155 = self.pred;\n                            var $156 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $158 = Word$o$(Word$adder$(_a$pred$10, $155, Bool$true));\n                                    var $157 = $158;\n                                } else {\n                                    var $159 = Word$i$(Word$adder$(_a$pred$10, $155, Bool$false));\n                                    var $157 = $159;\n                                };\n                                return $157;\n                            });\n                            var $149 = $156;\n                            break;\n                        case 'Word.e':\n                            var $160 = (_a$pred$8 => {\n                                var $161 = Word$e;\n                                return $161;\n                            });\n                            var $149 = $160;\n                            break;\n                    };\n                    var $149 = $149($147);\n                    return $149;\n                });\n                var $146 = $148;\n                break;\n            case 'Word.i':\n                var $162 = self.pred;\n                var $163 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $165 = self.pred;\n                            var $166 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $168 = Word$o$(Word$adder$(_a$pred$10, $165, Bool$true));\n                                    var $167 = $168;\n                                } else {\n                                    var $169 = Word$i$(Word$adder$(_a$pred$10, $165, Bool$false));\n                                    var $167 = $169;\n                                };\n                                return $167;\n                            });\n                            var $164 = $166;\n                            break;\n                        case 'Word.i':\n                            var $170 = self.pred;\n                            var $171 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $173 = Word$i$(Word$adder$(_a$pred$10, $170, Bool$true));\n                                    var $172 = $173;\n                                } else {\n                                    var $174 = Word$o$(Word$adder$(_a$pred$10, $170, Bool$true));\n                                    var $172 = $174;\n                                };\n                                return $172;\n                            });\n                            var $164 = $171;\n                            break;\n                        case 'Word.e':\n                            var $175 = (_a$pred$8 => {\n                                var $176 = Word$e;\n                                return $176;\n                            });\n                            var $164 = $175;\n                            break;\n                    };\n                    var $164 = $164($162);\n                    return $164;\n                });\n                var $146 = $163;\n                break;\n            case 'Word.e':\n                var $177 = (_b$5 => {\n                    var $178 = Word$e;\n                    return $178;\n                });\n                var $146 = $177;\n                break;\n        };\n        var $146 = $146(_b$3);\n        return $146;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $179 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $179;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $180 = self.pred;\n                        var $181 = Word$mul$go$($180, Word$shift_left1$(_b$4), _acc$5);\n                        return $181;\n                    case 'Word.i':\n                        var $182 = self.pred;\n                        var $183 = Word$mul$go$($182, Word$shift_left1$(_b$4), Word$add$(_b$4, _acc$5));\n                        return $183;\n                    case 'Word.e':\n                        var $184 = _acc$5;\n                        return $184;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$mul$(_size$1, _a$2, _b$3) {\n        var $185 = Word$mul$go$(_a$2, _b$3, Word$zero$(_size$1));\n        return $185;\n    };\n    const Word$mul = x0 => x1 => x2 => Word$mul$(x0, x1, x2);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Image3D$new$(_length$1, _capacity$2, _buffer$3) {\n        var $186 = ({\n            _: 'Image3D.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $186;\n    };\n    const Image3D$new = x0 => x1 => x2 => Image3D$new$(x0, x1, x2);\n\n    function Image3D$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$needed_depth$(((2 * _capacity$1) >>> 0)))));\n        var $187 = Image3D$new$(0, _capacity$1, _buffer$2);\n        return $187;\n    };\n    const Image3D$alloc_capacity = x0 => Image3D$alloc_capacity$(x0);\n\n    function BitsMap$(_A$1) {\n        var $188 = null;\n        return $188;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $189 = null;\n        return $189;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $190 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $190;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $191 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $191;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function BitsMap$set$(_bits$2, _val$3, _map$4) {\n        var self = _bits$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $193 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $195 = self.val;\n                        var $196 = self.lft;\n                        var $197 = self.rgt;\n                        var $198 = BitsMap$tie$($195, BitsMap$set$($193, _val$3, $196), $197);\n                        var $194 = $198;\n                        break;\n                    case 'BitsMap.new':\n                        var $199 = BitsMap$tie$(Maybe$none, BitsMap$set$($193, _val$3, BitsMap$new), BitsMap$new);\n                        var $194 = $199;\n                        break;\n                };\n                var $192 = $194;\n                break;\n            case 'i':\n                var $200 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $202 = self.val;\n                        var $203 = self.lft;\n                        var $204 = self.rgt;\n                        var $205 = BitsMap$tie$($202, $203, BitsMap$set$($200, _val$3, $204));\n                        var $201 = $205;\n                        break;\n                    case 'BitsMap.new':\n                        var $206 = BitsMap$tie$(Maybe$none, BitsMap$new, BitsMap$set$($200, _val$3, BitsMap$new));\n                        var $201 = $206;\n                        break;\n                };\n                var $192 = $201;\n                break;\n            case 'e':\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $208 = self.lft;\n                        var $209 = self.rgt;\n                        var $210 = BitsMap$tie$(Maybe$some$(_val$3), $208, $209);\n                        var $207 = $210;\n                        break;\n                    case 'BitsMap.new':\n                        var $211 = BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new);\n                        var $207 = $211;\n                        break;\n                };\n                var $192 = $207;\n                break;\n        };\n        return $192;\n    };\n    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $213 = self.pred;\n                var $214 = (Word$to_bits$($213) + '0');\n                var $212 = $214;\n                break;\n            case 'Word.i':\n                var $215 = self.pred;\n                var $216 = (Word$to_bits$($215) + '1');\n                var $212 = $216;\n                break;\n            case 'Word.e':\n                var $217 = Bits$e;\n                var $212 = $217;\n                break;\n        };\n        return $212;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $219 = Bits$e;\n            var $218 = $219;\n        } else {\n            var $220 = self.charCodeAt(0);\n            var $221 = self.slice(1);\n            var $222 = (String$to_bits$($221) + (u16_to_bits($220)));\n            var $218 = $222;\n        };\n        return $218;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $224 = self.head;\n                var $225 = self.tail;\n                var self = $224;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $227 = self.fst;\n                        var $228 = self.snd;\n                        var $229 = BitsMap$set$(String$to_bits$($227), $228, Map$from_list$($225));\n                        var $226 = $229;\n                        break;\n                };\n                var $223 = $226;\n                break;\n            case 'List.nil':\n                var $230 = BitsMap$new;\n                var $223 = $230;\n                break;\n        };\n        return $223;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function List$(_A$1) {\n        var $231 = null;\n        return $231;\n    };\n    const List = x0 => List$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$(_A$1, _B$2) {\n        var $232 = null;\n        return $232;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Word$div$(_a$2, _b$3) {\n        var Word$div$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$div = _a$2 => _b$3 => Word$div$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$div$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n    const U32$length = a0 => (a0.length);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n    const U32$slice = a0 => a1 => a2 => (a2.slice(a0, a1));\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n    const U32$read_base = a0 => a1 => (parseInt(a1, a0));\n\n    function Image3D$parse_byte$(_idx$1, _voxdata$2) {\n        var _chr$3 = (_voxdata$2.slice(((_idx$1 * 2) >>> 0), ((((_idx$1 * 2) >>> 0) + 2) >>> 0)));\n        var $233 = (parseInt(_chr$3, 16));\n        return $233;\n    };\n    const Image3D$parse_byte = x0 => x1 => Image3D$parse_byte$(x0, x1);\n\n    function Word$or$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $235 = self.pred;\n                var $236 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $238 = self.pred;\n                            var $239 = (_a$pred$9 => {\n                                var $240 = Word$o$(Word$or$(_a$pred$9, $238));\n                                return $240;\n                            });\n                            var $237 = $239;\n                            break;\n                        case 'Word.i':\n                            var $241 = self.pred;\n                            var $242 = (_a$pred$9 => {\n                                var $243 = Word$i$(Word$or$(_a$pred$9, $241));\n                                return $243;\n                            });\n                            var $237 = $242;\n                            break;\n                        case 'Word.e':\n                            var $244 = (_a$pred$7 => {\n                                var $245 = Word$e;\n                                return $245;\n                            });\n                            var $237 = $244;\n                            break;\n                    };\n                    var $237 = $237($235);\n                    return $237;\n                });\n                var $234 = $236;\n                break;\n            case 'Word.i':\n                var $246 = self.pred;\n                var $247 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $249 = self.pred;\n                            var $250 = (_a$pred$9 => {\n                                var $251 = Word$i$(Word$or$(_a$pred$9, $249));\n                                return $251;\n                            });\n                            var $248 = $250;\n                            break;\n                        case 'Word.i':\n                            var $252 = self.pred;\n                            var $253 = (_a$pred$9 => {\n                                var $254 = Word$i$(Word$or$(_a$pred$9, $252));\n                                return $254;\n                            });\n                            var $248 = $253;\n                            break;\n                        case 'Word.e':\n                            var $255 = (_a$pred$7 => {\n                                var $256 = Word$e;\n                                return $256;\n                            });\n                            var $248 = $255;\n                            break;\n                    };\n                    var $248 = $248($246);\n                    return $248;\n                });\n                var $234 = $247;\n                break;\n            case 'Word.e':\n                var $257 = (_b$4 => {\n                    var $258 = Word$e;\n                    return $258;\n                });\n                var $234 = $257;\n                break;\n        };\n        var $234 = $234(_b$3);\n        return $234;\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n    const U32$shl = a0 => a1 => (a0 << a1);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $260 = Word$e;\n            var $259 = $260;\n        } else {\n            var $261 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $263 = self.pred;\n                    var $264 = Word$o$(Word$trim$($261, $263));\n                    var $262 = $264;\n                    break;\n                case 'Word.i':\n                    var $265 = self.pred;\n                    var $266 = Word$i$(Word$trim$($261, $265));\n                    var $262 = $266;\n                    break;\n                case 'Word.e':\n                    var $267 = Word$o$(Word$trim$($261, Word$e));\n                    var $262 = $267;\n                    break;\n            };\n            var $259 = $262;\n        };\n        return $259;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = 1;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $269 = self.value;\n                var $270 = $269;\n                var $268 = $270;\n                break;\n            case 'Array.tie':\n                var $271 = Unit$new;\n                var $268 = $271;\n                break;\n        };\n        return $268;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $272 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $272;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $274 = self.lft;\n                var $275 = self.rgt;\n                var $276 = Pair$new$($274, $275);\n                var $273 = $276;\n                break;\n            case 'Array.tip':\n                var $277 = Unit$new;\n                var $273 = $277;\n                break;\n        };\n        return $273;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $278 = self.pred;\n                        var $279 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $278);\n                        return $279;\n                    case 'Word.i':\n                        var $280 = self.pred;\n                        var $281 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $280);\n                        return $281;\n                    case 'Word.e':\n                        var $282 = _nil$3;\n                        return $282;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $283 = Word$foldl$((_arr$6 => {\n            var $284 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $284;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $286 = self.fst;\n                    var $287 = self.snd;\n                    var $288 = Array$tie$(_rec$7($286), $287);\n                    var $285 = $288;\n                    break;\n            };\n            return $285;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $290 = self.fst;\n                    var $291 = self.snd;\n                    var $292 = Array$tie$($290, _rec$7($291));\n                    var $289 = $292;\n                    break;\n            };\n            return $289;\n        }), _idx$3)(_arr$5);\n        return $283;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $293 = Array$mut$(_idx$3, (_x$6 => {\n            var $294 = _val$4;\n            return $294;\n        }), _arr$5);\n        return $293;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const Image3D$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const Image3D$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n\n    function Image3D$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'Image3D.new':\n                var $296 = self.capacity;\n                var $297 = self.buffer;\n                var $298 = Image3D$new$(_length$1, $296, $297);\n                var $295 = $298;\n                break;\n        };\n        return $295;\n    };\n    const Image3D$set_length = x0 => x1 => Image3D$set_length$(x0, x1);\n    const Image3D$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function Image3D$parse$(_voxdata$1) {\n        var _siz$2 = (((_voxdata$1.length) / 12) >>> 0);\n        var _img$3 = Image3D$alloc_capacity$(_siz$2);\n        var _img$4 = (() => {\n            var $300 = _img$3;\n            var $301 = 0;\n            var $302 = _siz$2;\n            let _img$5 = $300;\n            for (let _i$4 = $301; _i$4 < $302; ++_i$4) {\n                var _x$6 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 0) >>> 0), _voxdata$1);\n                var _y$7 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 1) >>> 0), _voxdata$1);\n                var _z$8 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 2) >>> 0), _voxdata$1);\n                var _r$9 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 3) >>> 0), _voxdata$1);\n                var _g$10 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 4) >>> 0), _voxdata$1);\n                var _b$11 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 5) >>> 0), _voxdata$1);\n                var _pos$12 = ((0 | _x$6 | (_y$7 << 12) | (_z$8 << 24)));\n                var _col$13 = ((0 | _r$9 | (_g$10 << 8) | (_b$11 << 16) | (255 << 24)));\n                var $300 = ((_img$5.buffer[_img$5.length * 2] = _pos$12, _img$5.buffer[_img$5.length * 2 + 1] = _col$13, _img$5.length++, _img$5));\n                _img$5 = $300;\n            };\n            return _img$5;\n        })();\n        var $299 = _img$4;\n        return $299;\n    };\n    const Image3D$parse = x0 => Image3D$parse$(x0);\n    const Kaelin$Assets$chars$croni_d_1 = Image3D$parse$(\"7f7516351d4d807516351d4d7d7615351d4d7e7615351d4d7f76156a3a868076158e4a9d817615351d4d827615351d4d7c7714351d4d7d77146a3a867e77146a3a867f77148e4a9d8077146a3a868177146a3a868277146a3a86837714351d4d7b7813351d4d7c78136a3a867d78136a3a867e78136a3a867f78136a3a868078136a3a868178136a3a868278136a3a868378136a3a86847813351d4d7a7912351d4d7b79126a3a867c79126a3a867d79126a3a867e79126a3a867f79126a3a868079126a3a868179126a3a868279126a3a868379126a3a868479126a3a86857912351d4d7a7a11351d4d7b7a116a3a867c7a116a3a867d7a116a3a867e7a116a3a867f7a116a3a86807a116a3a86817a116a3a86827a116a3a86837a116a3a86847a116a3a86857a11351d4d797b10351d4d7a7b106a3a867b7b106a3a867c7b106a3a867d7b106a3a867e7b106a3a867f7b106a3a86807b106a3a86817b106a3a86827b106a3a86837b106a3a86847b106a3a86857b106a3a86867b10351d4d797c0f351d4d7a7c0f6a3a867b7c0f6a3a867c7c0f602d807d7c0f602d807e7c0f6a3a867f7c0f6a3a86807c0f6a3a86817c0f6a3a86827c0f602d80837c0f602d80847c0f6a3a86857c0f6a3a86867c0f351d4d797d0e351d4d7a7d0e602d807b7d0e602d807c7d0e351d4d7d7d0e351d4d7e7d0e6a3a867f7d0e6a3a86807d0e6a3a86817d0e6a3a86827d0e351d4d837d0e351d4d847d0e602d80857d0e602d80867d0e351d4d797e0d351d4d7a7e0d602d807b7e0d351d4d7c7e0d351d4d7d7e0d531e487e7e0d351d4d7f7e0d6a3a86807e0d6a3a86817e0d351d4d827e0d531e48837e0d351d4d847e0d351d4d857e0d4a3580867e0d351d4d797f0c351d4d7a7f0c4a35807b7f0c351d4d7c7f0c531e487d7f0cdf3e467e7f0c531e487f7f0c351d4d807f0c351d4d817f0c531e48827f0cdf3e46837f0c531e48847f0c351d4d857f0c4a3580867f0c351d4d7a800b351d4d7b800b4a35807c800b351d4d7d800b531e487e800b351d4d7f800b351d4d80800b351d4d81800b351d4d82800b531e4883800b351d4d84800b4a358085800b351d4d7b810a351d4d7c810a4a35807d810a8e4a9d7e810a351d4d7f810a351d4d80810a351d4d81810a351d4d82810a8e4a9d83810a4a358084810a351d4d7d8209351d4d7e8209602d807f8209602d808082094a3580818209602d80828209351d4d7c8308351d4d7d83086a3a867e83086a3a867f83086a3a868083084a35808183086a3a868283086a3a86838308351d4d7c8407351d4d7d84076a3a867e84076a3a867f84076a3a868084074a35808184076a3a868284076a3a86838407351d4d7c8506351d4d7d85068e4a9d7e85066a3a867f85066a3a868085064a35808185066a3a868285068e4a9d838506351d4d7d8605351d4d7e8605351d4d7f8605351d4d808605351d4d818605351d4d828605351d4d818704351d4d828704351d4d\");\n    const Web$Jogo$hero$hex = \"0d00000000000e00000000000f00000000001000000000001100000000000c01000000000d01000000001101000000000b02000000000c02000000001202000000000b03000000001203000000000b04000000000c04000000001104000000000c05000000000d05000000000e05000000001005000000001105000000000e06000000000f06000000000e07000000000e08000000000f08000000000d09000000000e09000000000f09000000000c0a000000000d0a000000000e0a000000000f0a00000000100a000000000c0b000000000e0b00000000100b000000000b0c000000000c0c000000000e0c00000000100c00000000110c000000000b0d000000000e0d00000000110d000000000a0e000000000b0e000000000e0e00000000110e00000000120e000000000a0f000000000e0f00000000120f000000000910000000000a10000000000e10000000001210000000001310000000000911000000000e11000000001311000000000e12000000000d13000000000e13000000000f13000000000d14000000000f14000000000d15000000000f15000000000c16000000000d16000000000f16000000000c17000000000f17000000000c18000000000f18000000000c19000000001019000000000c1a00000000101a000000000b1b000000000c1b00000000101b000000000b1c00000000101c000000000b1d00000000101d00000000111d000000000b1e00000000111e000000000a1f000000000b1f00000000111f00000000\";\n    const Web$Jogo$hero = Image3D$parse$(Web$Jogo$hero$hex);\n    const Kaelin$Assets$dark_grass_0 = Image3D$parse$(\"787801347e57797801408d647a7801469e657b7801469e657c7801408d647d7801347e577e7801408d647f7801469e65807801469e65817801469e65827801408d64837801469e65847801469e65857801408d64867801408d64877801347e57787901408d64797901469e657a7901469e657b7901469e657c7901408d647d7901408d647e7901408d647f7901469e65807901469e65817901408d64827901408d64837901408d64847901408d64857901408d64867901408d64877901408d64787a01408d64797a01469e657a7a01469e657b7a01408d647c7a01469e657d7a01469e657e7a01408d647f7a01408d64807a01408d64817a01408d64827a01408d64837a01408d64847a01469e65857a01469e65867a01469e65877a01408d64787b01408d64797b01408d647a7b01408d647b7b01408d647c7b01469e657d7b01469e657e7b01408d647f7b01408d64807b01408d64817b01469e65827b01469e65837b01408d64847b01469e65857b01469e65867b01469e65877b01408d64787c01408d64797c01469e657a7c01408d647b7c01408d647c7c01408d647d7c01408d647e7c01408d647f7c01408d64807c01469e65817c01469e65827c01469e65837c01408d64847c01408d64857c01469e65867c01469e65877c01408d64787d01469e65797d01469e657a7d01469e657b7d01347e577c7d01408d647d7d01469e657e7d01469e657f7d01408d64807d01469e65817d01469e65827d01408d64837d01408d64847d01408d64857d01347e57867d01347e57877d01408d64787e01469e65797e01469e657a7e01408d647b7e01347e577c7e01347e577d7e01469e657e7e01469e657f7e01408d64807e01408d64817e01347e57827e01408d64837e01408d64847e01408d64857e01408d64867e01347e57877e01408d64787f01408d64797f01408d647a7f01408d647b7f01408d647c7f01408d647d7f01408d647e7f01408d647f7f01408d64807f01408d64817f01347e57827f01347e57837f01408d64847f01469e65857f01469e65867f01408d64877f01408d64788001347e57798001347e577a8001469e657b8001469e657c8001408d647d8001408d647e8001469e657f8001469e65808001408d64818001469e65828001469e65838001408d64848001469e65858001469e65868001469e65878001408d64788101347e57798101408d647a8101469e657b8101469e657c8101408d647d8101469e657e8101469e657f8101469e65808101408d64818101469e65828101469e65838101408d64848101408d64858101469e65868101469e65878101408d64788201408d64798201408d647a8201408d647b8201408d647c8201408d647d8201469e657e8201469e657f8201408d64808201408d64818201408d64828201408d64838201408d64848201408d64858201408d64868201408d64878201408d64788301469e65798301408d647a8301408d647b8301408d647c8301408d647d8301408d647e8301408d647f8301469e65808301469e65818301408d64828301347e57838301347e57848301408d64858301408d64868301408d64878301469e65788401469e65798401408d647a8401408d647b8401469e657c8401469e657d8401408d647e8401469e657f8401469e65808401469e65818401408d64828401347e57838401408d64848401469e65858401469e65868401408d64878401469e65788501408d64798501408d647a8501469e657b8501469e657c8501469e657d8501408d647e8501469e657f8501469e65808501408d64818501408d64828501408d64838501408d64848501469e65858501469e65868501469e65878501408d64788601408d64798601408d647a8601469e657b8601469e657c8601408d647d8601408d647e8601408d647f8601408d64808601408d64818601408d64828601408d64838601408d64848601408d64858601469e65868601469e65878601408d64788701347e57798701408d647a8701408d647b8701408d647c8701408d647d8701347e577e8701347e577f8701408d64808701469e65818701469e65828701408d64838701469e65848701469e65858701408d64868701408d64878701408d64\");\n\n    function Web$Kaelin$Entity$new$(_img$1) {\n        var $303 = ({\n            _: 'Web.Kaelin.Entity.new',\n            'img': _img$1\n        });\n        return $303;\n    };\n    const Web$Kaelin$Entity$new = x0 => Web$Kaelin$Entity$new$(x0);\n\n    function Web$Kaelin$Coord$new$(_i$1, _j$2) {\n        var $304 = ({\n            _: 'Web.Kaelin.Coord.new',\n            'i': _i$1,\n            'j': _j$2\n        });\n        return $304;\n    };\n    const Web$Kaelin$Coord$new = x0 => x1 => Web$Kaelin$Coord$new$(x0, x1);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $305 = (String.fromCharCode(_head$1) + _tail$2);\n        return $305;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function Int$to_nat$(_a$1) {\n        var $306 = _a$1((_a$x$2 => _a$y$3 => {\n            var self = _a$y$3;\n            if (self === 0n) {\n                var $308 = Pair$new$(Bool$false, _a$x$2);\n                var $307 = $308;\n            } else {\n                var $309 = (self - 1n);\n                var $310 = Pair$new$(Bool$true, _a$y$3);\n                var $307 = $310;\n            };\n            return $307;\n        }));\n        return $306;\n    };\n    const Int$to_nat = x0 => Int$to_nat$(x0);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $312 = self.head;\n                var $313 = self.tail;\n                var $314 = _cons$5($312)(List$fold$($313, _nil$4, _cons$5));\n                var $311 = $314;\n                break;\n            case 'List.nil':\n                var $315 = _nil$4;\n                var $311 = $315;\n                break;\n        };\n        return $311;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $316 = null;\n        return $316;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $317 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $317;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $318 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $318;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $319 = Either$left$(_n$1);\n                    return $319;\n                } else {\n                    var $320 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $322 = Either$right$(Nat$succ$($320));\n                        var $321 = $322;\n                    } else {\n                        var $323 = (self - 1n);\n                        var $324 = Nat$sub_rem$($323, $320);\n                        var $321 = $324;\n                    };\n                    return $321;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $325 = self.value;\n                        var $326 = Nat$div_mod$go$($325, _m$2, Nat$succ$(_d$3));\n                        return $326;\n                    case 'Either.right':\n                        var $327 = Pair$new$(_d$3, _n$1);\n                        return $327;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function List$cons$(_head$2, _tail$3) {\n        var $328 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $328;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $329 = self.fst;\n                        var $330 = self.snd;\n                        var self = $329;\n                        if (self === 0n) {\n                            var $332 = List$cons$($330, _res$3);\n                            var $331 = $332;\n                        } else {\n                            var $333 = (self - 1n);\n                            var $334 = Nat$to_base$go$(_base$1, $329, List$cons$($330, _res$3));\n                            var $331 = $334;\n                        };\n                        return $331;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $335 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $335;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $336 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $336;\n                } else {\n                    var $337 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $339 = _r$3;\n                        var $338 = $339;\n                    } else {\n                        var $340 = (self - 1n);\n                        var $341 = Nat$mod$go$($340, $337, Nat$succ$(_r$3));\n                        var $338 = $341;\n                    };\n                    return $338;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function Maybe$(_A$1) {\n        var $342 = null;\n        return $342;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $343 = self.head;\n                        var $344 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $346 = Maybe$some$($343);\n                            var $345 = $346;\n                        } else {\n                            var $347 = (self - 1n);\n                            var $348 = List$at$($347, $344);\n                            var $345 = $348;\n                        };\n                        return $345;\n                    case 'List.nil':\n                        var $349 = Maybe$none;\n                        return $349;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $352 = self.value;\n                    var $353 = $352;\n                    var $351 = $353;\n                    break;\n                case 'Maybe.none':\n                    var $354 = 35;\n                    var $351 = $354;\n                    break;\n            };\n            var $350 = $351;\n        } else {\n            var $355 = 35;\n            var $350 = $355;\n        };\n        return $350;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $356 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $357 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $357;\n        }));\n        return $356;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $358 = Nat$to_string_base$(10n, _n$1);\n        return $358;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n\n    function Int$show$(_a$1) {\n        var _result$2 = Int$to_nat$(_a$1);\n        var self = _result$2;\n        switch (self._) {\n            case 'Pair.new':\n                var $360 = self.fst;\n                var $361 = self.snd;\n                var self = $360;\n                if (self) {\n                    var $363 = (\"+\" + Nat$show$($361));\n                    var $362 = $363;\n                } else {\n                    var $364 = (\"-\" + Nat$show$($361));\n                    var $362 = $364;\n                };\n                var $359 = $362;\n                break;\n        };\n        return $359;\n    };\n    const Int$show = x0 => Int$show$(x0);\n\n    function Web$Kaelin$Coord$show$(_coord$1) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var $366 = self.i;\n                var $367 = self.j;\n                var $368 = (Int$show$($366) + (\":\" + Int$show$($367)));\n                var $365 = $368;\n                break;\n        };\n        return $365;\n    };\n    const Web$Kaelin$Coord$show = x0 => Web$Kaelin$Coord$show$(x0);\n\n    function Map$set$(_key$2, _val$3, _map$4) {\n        var $369 = BitsMap$set$(String$to_bits$(_key$2), _val$3, _map$4);\n        return $369;\n    };\n    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);\n\n    function Maybe$default$(_m$2, _a$3) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $371 = self.value;\n                var $372 = $371;\n                var $370 = $372;\n                break;\n            case 'Maybe.none':\n                var $373 = _a$3;\n                var $370 = $373;\n                break;\n        };\n        return $370;\n    };\n    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);\n\n    function BitsMap$get$(_bits$2, _map$3) {\n        var BitsMap$get$ = (_bits$2, _map$3) => ({\n            ctr: 'TCO',\n            arg: [_bits$2, _map$3]\n        });\n        var BitsMap$get = _bits$2 => _map$3 => BitsMap$get$(_bits$2, _map$3);\n        var arg = [_bits$2, _map$3];\n        while (true) {\n            let [_bits$2, _map$3] = arg;\n            var R = (() => {\n                var self = _bits$2;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $374 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $376 = self.lft;\n                                var $377 = BitsMap$get$($374, $376);\n                                var $375 = $377;\n                                break;\n                            case 'BitsMap.new':\n                                var $378 = Maybe$none;\n                                var $375 = $378;\n                                break;\n                        };\n                        return $375;\n                    case 'i':\n                        var $379 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $381 = self.rgt;\n                                var $382 = BitsMap$get$($379, $381);\n                                var $380 = $382;\n                                break;\n                            case 'BitsMap.new':\n                                var $383 = Maybe$none;\n                                var $380 = $383;\n                                break;\n                        };\n                        return $380;\n                    case 'e':\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $385 = self.val;\n                                var $386 = $385;\n                                var $384 = $386;\n                                break;\n                            case 'BitsMap.new':\n                                var $387 = Maybe$none;\n                                var $384 = $387;\n                                break;\n                        };\n                        return $384;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const BitsMap$get = x0 => x1 => BitsMap$get$(x0, x1);\n\n    function Map$get$(_key$2, _map$3) {\n        var $388 = BitsMap$get$(String$to_bits$(_key$2), _map$3);\n        return $388;\n    };\n    const Map$get = x0 => x1 => Map$get$(x0, x1);\n\n    function Web$Kaelin$Map$push$(_coord$1, _ent$2, _map$3) {\n        var _key$4 = Web$Kaelin$Coord$show$(_coord$1);\n        var $389 = Map$set$(_key$4, List$cons$(_ent$2, Maybe$default$(Map$get$(_key$4, _map$3), List$nil)), _map$3);\n        return $389;\n    };\n    const Web$Kaelin$Map$push = x0 => x1 => x2 => Web$Kaelin$Map$push$(x0, x1, x2);\n\n    function Int$new$(_x$1, _y$2, _new$4) {\n        var Int$new$ = (_x$1, _y$2, _new$4) => ({\n            ctr: 'TCO',\n            arg: [_x$1, _y$2, _new$4]\n        });\n        var Int$new = _x$1 => _y$2 => _new$4 => Int$new$(_x$1, _y$2, _new$4);\n        var arg = [_x$1, _y$2, _new$4];\n        while (true) {\n            let [_x$1, _y$2, _new$4] = arg;\n            var R = (() => {\n                var self = _x$1;\n                if (self === 0n) {\n                    var $390 = _new$4(Nat$zero)(_y$2);\n                    return $390;\n                } else {\n                    var $391 = (self - 1n);\n                    var self = _y$2;\n                    if (self === 0n) {\n                        var $393 = _new$4(Nat$succ$($391))(Nat$zero);\n                        var $392 = $393;\n                    } else {\n                        var $394 = (self - 1n);\n                        var $395 = Int$new$($391, $394, _new$4);\n                        var $392 = $395;\n                    };\n                    return $392;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Int$new = x0 => x1 => x2 => Int$new$(x0, x1, x2);\n\n    function Web$Kaelin$Draw$initial_ent$(_map$1) {\n        var _croni$2 = Kaelin$Assets$chars$croni_d_1;\n        var _hero$3 = Web$Jogo$hero;\n        var _grass$4 = Kaelin$Assets$dark_grass_0;\n        var _ent_croni$5 = Web$Kaelin$Entity$new$(_croni$2);\n        var _ent_hero$6 = Web$Kaelin$Entity$new$(_hero$3);\n        var _ent_grass$7 = Web$Kaelin$Entity$new$(_grass$4);\n        var _new_coord$8 = Web$Kaelin$Coord$new;\n        var _map$9 = Web$Kaelin$Map$push$(_new_coord$8(Int$new(0n)(0n))(Int$new(0n)(0n)), _ent_hero$6, _map$1);\n        var _map$10 = Web$Kaelin$Map$push$(_new_coord$8(Int$new(1n)(0n))(Int$new(2n)(0n)), _ent_croni$5, _map$9);\n        var _map$11 = Web$Kaelin$Map$push$(_new_coord$8(Int$new(1n)(0n))(Int$new(3n)(0n)), _ent_grass$7, _map$10);\n        var $396 = _map$11;\n        return $396;\n    };\n    const Web$Kaelin$Draw$initial_ent = x0 => Web$Kaelin$Draw$initial_ent$(x0);\n\n    function Web$Kaelin$State$game$(_room$1, _tick$2, _pos$3, _map$4) {\n        var $397 = ({\n            _: 'Web.Kaelin.State.game',\n            'room': _room$1,\n            'tick': _tick$2,\n            'pos': _pos$3,\n            'map': _map$4\n        });\n        return $397;\n    };\n    const Web$Kaelin$State$game = x0 => x1 => x2 => x3 => Web$Kaelin$State$game$(x0, x1, x2, x3);\n\n    function App$Render$txt$(_text$1) {\n        var $398 = ({\n            _: 'App.Render.txt',\n            'text': _text$1\n        });\n        return $398;\n    };\n    const App$Render$txt = x0 => App$Render$txt$(x0);\n\n    function Image3D$clear$(_img$1) {\n        var $399 = Image3D$set_length$(0, _img$1);\n        return $399;\n    };\n    const Image3D$clear = x0 => Image3D$clear$(x0);\n    const Web$Kaelin$Resources$map_size = 5;\n    const Web$Kaelin$Resources$hexagon_radius = 10;\n    const Nat$add = a0 => a1 => (a0 + a1);\n\n    function Int$add$(_a$1, _b$2) {\n        var $400 = _a$1((_a$x$3 => _a$y$4 => {\n            var $401 = _b$2((_b$x$5 => _b$y$6 => {\n                var $402 = Int$new((_a$x$3 + _b$x$5))((_a$y$4 + _b$y$6));\n                return $402;\n            }));\n            return $401;\n        }));\n        return $400;\n    };\n    const Int$add = x0 => x1 => Int$add$(x0, x1);\n\n    function Int$neg$(_a$1) {\n        var $403 = _a$1((_a$x$2 => _a$y$3 => {\n            var $404 = Int$new(_a$y$3)(_a$x$2);\n            return $404;\n        }));\n        return $403;\n    };\n    const Int$neg = x0 => Int$neg$(x0);\n\n    function Int$sub$(_a$1, _b$2) {\n        var $405 = Int$add$(_a$1, Int$neg$(_b$2));\n        return $405;\n    };\n    const Int$sub = x0 => x1 => Int$sub$(x0, x1);\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $407 = self.pred;\n                var $408 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $407));\n                var $406 = $408;\n                break;\n            case 'Word.i':\n                var $409 = self.pred;\n                var $410 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $409));\n                var $406 = $410;\n                break;\n            case 'Word.e':\n                var $411 = _nil$3;\n                var $406 = $411;\n                break;\n        };\n        return $406;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Word$to_nat$(_word$2) {\n        var $412 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $413 = Nat$succ$((2n * _x$4));\n            return $413;\n        }), _word$2);\n        return $412;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n\n    function U32$to_nat$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $415 = u32_to_word(self);\n                var $416 = Word$to_nat$($415);\n                var $414 = $416;\n                break;\n        };\n        return $414;\n    };\n    const U32$to_nat = x0 => U32$to_nat$(x0);\n\n    function Int$abs$(_a$1) {\n        var _result$2 = Int$to_nat$(_a$1);\n        var self = _result$2;\n        switch (self._) {\n            case 'Pair.new':\n                var $418 = self.snd;\n                var $419 = $418;\n                var $417 = $419;\n                break;\n        };\n        return $417;\n    };\n    const Int$abs = x0 => Int$abs$(x0);\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $421 = Bool$true;\n                var $420 = $421;\n                break;\n            case 'Cmp.gtn':\n                var $422 = Bool$false;\n                var $420 = $422;\n                break;\n        };\n        return $420;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $423 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $423;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U32$lte = a0 => a1 => (a0 <= a1);\n\n    function Web$Kaelin$Coord$fit$(_coord$1, _map_size$2) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var $425 = self.i;\n                var $426 = self.j;\n                var _i$5 = $425;\n                var _j$6 = $426;\n                var _sum$7 = Int$add$(_i$5, _j$6);\n                var _abs$8 = Int$abs$(_sum$7);\n                var _abs$9 = (Number(_abs$8));\n                var $427 = (_abs$9 <= _map_size$2);\n                var $424 = $427;\n                break;\n        };\n        return $424;\n    };\n    const Web$Kaelin$Coord$fit = x0 => x1 => Web$Kaelin$Coord$fit$(x0, x1);\n\n    function Int$is_neg$(_a$1) {\n        var $428 = _a$1((_a$x$2 => _a$y$3 => {\n            var $429 = (_a$x$2 > _a$y$3);\n            return $429;\n        }));\n        return $428;\n    };\n    const Int$is_neg = x0 => Int$is_neg$(x0);\n\n    function Web$Kaelin$Coord$to_screen_xy$(_coord$1) {\n        var _rad$2 = Web$Kaelin$Resources$hexagon_radius;\n        var _hlf$3 = ((_rad$2 / 2) >>> 0);\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var $431 = self.i;\n                var $432 = self.j;\n                var _i$6 = $431;\n                var _j$7 = $432;\n                var $433 = _i$6((_i$x$8 => _i$y$9 => {\n                    var $434 = _j$7((_j$x$10 => _j$y$11 => {\n                        var _cx$12 = 128;\n                        var _cy$13 = 128;\n                        var _is_neg_i$14 = Int$is_neg$(_i$6);\n                        var _is_neg_j$15 = Int$is_neg$(_j$7);\n                        var self = _is_neg_i$14;\n                        if (self) {\n                            var self = _is_neg_j$15;\n                            if (self) {\n                                var _cx$16 = (Math.max(_cx$12 - (((Number(_j$x$10)) * _rad$2) >>> 0), 0));\n                                var _cx$17 = (Math.max(_cx$16 - (((Number(_i$x$8)) * ((_rad$2 * 2) >>> 0)) >>> 0), 0));\n                                var _cy$18 = (Math.max(_cy$13 - (((Number(_j$x$10)) * ((_hlf$3 * 3) >>> 0)) >>> 0), 0));\n                                var $437 = Pair$new$(_cx$17, _cy$18);\n                                var $436 = $437;\n                            } else {\n                                var _cx$16 = ((_cx$12 + (((Number(_j$y$11)) * _rad$2) >>> 0)) >>> 0);\n                                var _cx$17 = (Math.max(_cx$16 - (((Number(_i$x$8)) * ((_rad$2 * 2) >>> 0)) >>> 0), 0));\n                                var _cy$18 = ((_cy$13 + (((Number(_j$y$11)) * ((_hlf$3 * 3) >>> 0)) >>> 0)) >>> 0);\n                                var $438 = Pair$new$(_cx$17, _cy$18);\n                                var $436 = $438;\n                            };\n                            var $435 = $436;\n                        } else {\n                            var self = _is_neg_j$15;\n                            if (self) {\n                                var _cx$16 = (Math.max(_cx$12 - (((Number(_j$x$10)) * _rad$2) >>> 0), 0));\n                                var _cx$17 = ((_cx$16 + (((Number(_i$y$9)) * ((_rad$2 * 2) >>> 0)) >>> 0)) >>> 0);\n                                var _cy$18 = (Math.max(_cy$13 - (((Number(_j$x$10)) * ((_hlf$3 * 3) >>> 0)) >>> 0), 0));\n                                var $440 = Pair$new$(_cx$17, _cy$18);\n                                var $439 = $440;\n                            } else {\n                                var _cx$16 = ((_cx$12 + (((Number(_j$y$11)) * _rad$2) >>> 0)) >>> 0);\n                                var _cx$17 = ((_cx$16 + (((Number(_i$y$9)) * ((_rad$2 * 2) >>> 0)) >>> 0)) >>> 0);\n                                var _cy$18 = ((_cy$13 + (((Number(_j$y$11)) * ((_hlf$3 * 3) >>> 0)) >>> 0)) >>> 0);\n                                var $441 = Pair$new$(_cx$17, _cy$18);\n                                var $439 = $441;\n                            };\n                            var $435 = $439;\n                        };\n                        return $435;\n                    }));\n                    return $434;\n                }));\n                var $430 = $433;\n                break;\n        };\n        return $430;\n    };\n    const Web$Kaelin$Coord$to_screen_xy = x0 => Web$Kaelin$Coord$to_screen_xy$(x0);\n\n    function Image3D$Draw$deresagon$(_cx$1, _cy$2, _cz$3, _rad$4, _col$5, _draw_a$6, _draw_b$7, _draw_c$8, _draw_d$9, _draw_e$10, _draw_f$11, _img$12) {\n        var _hlf$13 = ((_rad$4 / 2) >>> 0);\n        var _v0x$14 = ((_cx$1 + _rad$4) >>> 0);\n        var _v0y$15 = ((_cy$2 + _hlf$13) >>> 0);\n        var _v1x$16 = ((_cx$1 + _rad$4) >>> 0);\n        var _v1y$17 = (Math.max(_cy$2 - _hlf$13, 0));\n        var _v2x$18 = _cx$1;\n        var _v2y$19 = (Math.max(_cy$2 - _rad$4, 0));\n        var _v3x$20 = (Math.max(_cx$1 - _rad$4, 0));\n        var _v3y$21 = (Math.max(_cy$2 - _hlf$13, 0));\n        var _v4x$22 = (Math.max(_cx$1 - _rad$4, 0));\n        var _v4y$23 = ((_cy$2 + _hlf$13) >>> 0);\n        var _v5x$24 = _cx$1;\n        var _v5y$25 = ((_cy$2 + _rad$4) >>> 0);\n        var self = _draw_a$6;\n        if (self) {\n            var _img$26 = (() => {\n                var $444 = _img$12;\n                var $445 = 0;\n                var $446 = _rad$4;\n                let _img$27 = $444;\n                for (let _i$26 = $445; _i$26 < $446; ++_i$26) {\n                    var _px$28 = _v1x$16;\n                    var _py$29 = ((_v1y$17 + _i$26) >>> 0);\n                    var $444 = ((_img$27.buffer[_img$27.length * 2] = ((0 | _px$28 | (_py$29 << 12) | (_cz$3 << 24))), _img$27.buffer[_img$27.length * 2 + 1] = _col$5, _img$27.length++, _img$27));\n                    _img$27 = $444;\n                };\n                return _img$27;\n            })();\n            var $443 = _img$26;\n            var _img$26 = $443;\n        } else {\n            var $447 = _img$12;\n            var _img$26 = $447;\n        };\n        var self = _draw_d$9;\n        if (self) {\n            var _img$27 = (() => {\n                var $449 = _img$26;\n                var $450 = 0;\n                var $451 = _rad$4;\n                let _img$28 = $449;\n                for (let _i$27 = $450; _i$27 < $451; ++_i$27) {\n                    var _px$29 = _v3x$20;\n                    var _py$30 = ((_v3y$21 + _i$27) >>> 0);\n                    var $449 = ((_img$28.buffer[_img$28.length * 2] = ((0 | _px$29 | (_py$30 << 12) | (_cz$3 << 24))), _img$28.buffer[_img$28.length * 2 + 1] = _col$5, _img$28.length++, _img$28));\n                    _img$28 = $449;\n                };\n                return _img$28;\n            })();\n            var $448 = _img$27;\n            var _img$27 = $448;\n        } else {\n            var $452 = _img$26;\n            var _img$27 = $452;\n        };\n        var self = _draw_b$7;\n        if (self) {\n            var _img$28 = (() => {\n                var $454 = _img$27;\n                var $455 = 0;\n                var $456 = _rad$4;\n                let _img$29 = $454;\n                for (let _i$28 = $455; _i$28 < $456; ++_i$28) {\n                    var _px$30 = ((_v2x$18 + _i$28) >>> 0);\n                    var _py$31 = ((_v2y$19 + ((_i$28 / 2) >>> 0)) >>> 0);\n                    var $454 = ((_img$29.buffer[_img$29.length * 2] = ((0 | _px$30 | (_py$31 << 12) | (_cz$3 << 24))), _img$29.buffer[_img$29.length * 2 + 1] = _col$5, _img$29.length++, _img$29));\n                    _img$29 = $454;\n                };\n                return _img$29;\n            })();\n            var $453 = _img$28;\n            var _img$28 = $453;\n        } else {\n            var $457 = _img$27;\n            var _img$28 = $457;\n        };\n        var self = _draw_c$8;\n        if (self) {\n            var _img$29 = (() => {\n                var $459 = _img$28;\n                var $460 = 0;\n                var $461 = _rad$4;\n                let _img$30 = $459;\n                for (let _i$29 = $460; _i$29 < $461; ++_i$29) {\n                    var _px$31 = (Math.max(_v2x$18 - _i$29, 0));\n                    var _py$32 = ((_v2y$19 + ((_i$29 / 2) >>> 0)) >>> 0);\n                    var $459 = ((_img$30.buffer[_img$30.length * 2] = ((0 | _px$31 | (_py$32 << 12) | (_cz$3 << 24))), _img$30.buffer[_img$30.length * 2 + 1] = _col$5, _img$30.length++, _img$30));\n                    _img$30 = $459;\n                };\n                return _img$30;\n            })();\n            var $458 = _img$29;\n            var _img$29 = $458;\n        } else {\n            var $462 = _img$28;\n            var _img$29 = $462;\n        };\n        var self = _draw_f$11;\n        if (self) {\n            var _img$30 = (() => {\n                var $464 = _img$29;\n                var $465 = 0;\n                var $466 = _rad$4;\n                let _img$31 = $464;\n                for (let _i$30 = $465; _i$30 < $466; ++_i$30) {\n                    var _px$32 = (Math.max((Math.max(_v0x$14 - _i$30, 0)) - 1, 0));\n                    var _py$33 = ((_v0y$15 + ((_i$30 / 2) >>> 0)) >>> 0);\n                    var $464 = ((_img$31.buffer[_img$31.length * 2] = ((0 | _px$32 | (_py$33 << 12) | (_cz$3 << 24))), _img$31.buffer[_img$31.length * 2 + 1] = _col$5, _img$31.length++, _img$31));\n                    _img$31 = $464;\n                };\n                return _img$31;\n            })();\n            var $463 = _img$30;\n            var _img$30 = $463;\n        } else {\n            var $467 = _img$29;\n            var _img$30 = $467;\n        };\n        var self = _draw_e$10;\n        if (self) {\n            var _img$31 = (() => {\n                var $469 = _img$30;\n                var $470 = 0;\n                var $471 = _rad$4;\n                let _img$32 = $469;\n                for (let _i$31 = $470; _i$31 < $471; ++_i$31) {\n                    var _px$33 = ((((_v4x$22 + _i$31) >>> 0) + 1) >>> 0);\n                    var _py$34 = ((_v4y$23 + ((_i$31 / 2) >>> 0)) >>> 0);\n                    var $469 = ((_img$32.buffer[_img$32.length * 2] = ((0 | _px$33 | (_py$34 << 12) | (_cz$3 << 24))), _img$32.buffer[_img$32.length * 2 + 1] = _col$5, _img$32.length++, _img$32));\n                    _img$32 = $469;\n                };\n                return _img$32;\n            })();\n            var $468 = _img$31;\n            var _img$31 = $468;\n        } else {\n            var $472 = _img$30;\n            var _img$31 = $472;\n        };\n        var $442 = _img$31;\n        return $442;\n    };\n    const Image3D$Draw$deresagon = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => x11 => Image3D$Draw$deresagon$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);\n\n    function Web$Kaelin$Draw$hexagon_border$(_coord$1, _rad$2, _col$3, _img$4) {\n        var self = Web$Kaelin$Coord$to_screen_xy$(_coord$1);\n        switch (self._) {\n            case 'Pair.new':\n                var $474 = self.fst;\n                var $475 = self.snd;\n                var _img$7 = Image3D$Draw$deresagon$($474, $475, 0, _rad$2, _col$3, Bool$true, Bool$true, Bool$true, Bool$true, Bool$true, Bool$true, _img$4);\n                var $476 = _img$7;\n                var $473 = $476;\n                break;\n        };\n        return $473;\n    };\n    const Web$Kaelin$Draw$hexagon_border = x0 => x1 => x2 => x3 => Web$Kaelin$Draw$hexagon_border$(x0, x1, x2, x3);\n\n    function Web$Kaelin$Map$get$(_coord$1, _map$2) {\n        var $477 = Maybe$default$(Map$get$(Web$Kaelin$Coord$show$(_coord$1), _map$2), List$nil);\n        return $477;\n    };\n    const Web$Kaelin$Map$get = x0 => x1 => Web$Kaelin$Map$get$(x0, x1);\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function Image3D$get_len$(_img$1) {\n        var self = _img$1;\n        switch (self._) {\n            case 'Image3D.new':\n                var $479 = self.length;\n                var $480 = $479;\n                var $478 = $480;\n                break;\n        };\n        return $478;\n    };\n    const Image3D$get_len = x0 => Image3D$get_len$(x0);\n\n    function Array$get$(_idx$3, _arr$4) {\n        var $481 = Word$foldl$(Array$extract_tip, (_rec$6 => _arr$7 => {\n            var _arr_l$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_l$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $483 = self.fst;\n                    var $484 = _rec$6($483);\n                    var $482 = $484;\n                    break;\n            };\n            return $482;\n        }), (_rec$6 => _arr$7 => {\n            var _arr_r$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_r$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $486 = self.snd;\n                    var $487 = _rec$6($486);\n                    var $485 = $487;\n                    break;\n            };\n            return $485;\n        }), _idx$3)(_arr$4);\n        return $481;\n    };\n    const Array$get = x0 => x1 => Array$get$(x0, x1);\n    const Buffer32$get = a0 => a1 => ((a1[a0]));\n    const Image3D$get_pos = a0 => a1 => ((a1.buffer[a0 * 2]));\n    const Image3D$get_col = a0 => a1 => ((a1.buffer[a0 * 2 + 1]));\n\n    function Word$and$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $489 = self.pred;\n                var $490 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $492 = self.pred;\n                            var $493 = (_a$pred$9 => {\n                                var $494 = Word$o$(Word$and$(_a$pred$9, $492));\n                                return $494;\n                            });\n                            var $491 = $493;\n                            break;\n                        case 'Word.i':\n                            var $495 = self.pred;\n                            var $496 = (_a$pred$9 => {\n                                var $497 = Word$o$(Word$and$(_a$pred$9, $495));\n                                return $497;\n                            });\n                            var $491 = $496;\n                            break;\n                        case 'Word.e':\n                            var $498 = (_a$pred$7 => {\n                                var $499 = Word$e;\n                                return $499;\n                            });\n                            var $491 = $498;\n                            break;\n                    };\n                    var $491 = $491($489);\n                    return $491;\n                });\n                var $488 = $490;\n                break;\n            case 'Word.i':\n                var $500 = self.pred;\n                var $501 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $503 = self.pred;\n                            var $504 = (_a$pred$9 => {\n                                var $505 = Word$o$(Word$and$(_a$pred$9, $503));\n                                return $505;\n                            });\n                            var $502 = $504;\n                            break;\n                        case 'Word.i':\n                            var $506 = self.pred;\n                            var $507 = (_a$pred$9 => {\n                                var $508 = Word$i$(Word$and$(_a$pred$9, $506));\n                                return $508;\n                            });\n                            var $502 = $507;\n                            break;\n                        case 'Word.e':\n                            var $509 = (_a$pred$7 => {\n                                var $510 = Word$e;\n                                return $510;\n                            });\n                            var $502 = $509;\n                            break;\n                    };\n                    var $502 = $502($500);\n                    return $502;\n                });\n                var $488 = $501;\n                break;\n            case 'Word.e':\n                var $511 = (_b$4 => {\n                    var $512 = Word$e;\n                    return $512;\n                });\n                var $488 = $511;\n                break;\n        };\n        var $488 = $488(_b$3);\n        return $488;\n    };\n    const Word$and = x0 => x1 => Word$and$(x0, x1);\n    const U32$and = a0 => a1 => (a0 & a1);\n\n    function Image3D$Draw$image$(_x$1, _y$2, _z$3, _src$4, _img$5) {\n        var _len$6 = Image3D$get_len$(_src$4);\n        var _img$7 = (() => {\n            var $514 = _img$5;\n            var $515 = 0;\n            var $516 = _len$6;\n            let _img$8 = $514;\n            for (let _i$7 = $515; _i$7 < $516; ++_i$7) {\n                var _pos$9 = ((_src$4.buffer[_i$7 * 2]));\n                var _col$10 = ((_src$4.buffer[_i$7 * 2 + 1]));\n                var _p_x$11 = (_pos$9 & 4095);\n                var _p_y$12 = ((_pos$9 & 16773120) >>> 12);\n                var _p_z$13 = ((_pos$9 & 4278190080) >>> 24);\n                var _p_x$14 = ((_p_x$11 + _x$1) >>> 0);\n                var _p_y$15 = ((_p_y$12 + _y$2) >>> 0);\n                var _p_z$16 = ((_p_z$13 + _z$3) >>> 0);\n                var _pos$17 = ((0 | _p_x$14 | (_p_y$15 << 12) | (_p_z$16 << 24)));\n                var $514 = ((_img$8.buffer[_img$8.length * 2] = _pos$17, _img$8.buffer[_img$8.length * 2 + 1] = _col$10, _img$8.length++, _img$8));\n                _img$8 = $514;\n            };\n            return _img$8;\n        })();\n        var $513 = _img$7;\n        return $513;\n    };\n    const Image3D$Draw$image = x0 => x1 => x2 => x3 => x4 => Image3D$Draw$image$(x0, x1, x2, x3, x4);\n\n    function Web$Kaelin$Draw$tile$(_coord$1, _map$2, _img$3) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var self = Web$Kaelin$Coord$to_screen_xy$(_coord$1);\n                switch (self._) {\n                    case 'Pair.new':\n                        var $519 = self.fst;\n                        var $520 = self.snd;\n                        var _tile$8 = Web$Kaelin$Map$get$(_coord$1, _map$2);\n                        var _img$9 = (() => {\n                            var $523 = _img$3;\n                            var $524 = _tile$8;\n                            let _img$10 = $523;\n                            let _ent$9;\n                            while ($524._ === 'List.cons') {\n                                _ent$9 = $524.head;\n                                var self = _ent$9;\n                                switch (self._) {\n                                    case 'Web.Kaelin.Entity.new':\n                                        var $525 = self.img;\n                                        var $526 = Image3D$Draw$image$($519, $520, 0, $525, _img$10);\n                                        var $523 = $526;\n                                        break;\n                                };\n                                _img$10 = $523;\n                                $524 = $524.tail;\n                            }\n                            return _img$10;\n                        })();\n                        var $521 = _img$9;\n                        var $518 = $521;\n                        break;\n                };\n                var $517 = $518;\n                break;\n        };\n        return $517;\n    };\n    const Web$Kaelin$Draw$tile = x0 => x1 => x2 => Web$Kaelin$Draw$tile$(x0, x1, x2);\n\n    function Web$Kaelin$Draw$map$(_img$1, _map$2) {\n        var _img$3 = Image3D$clear$(_img$1);\n        var _col$4 = ((0 | 0 | (0 << 8) | (255 << 16) | (255 << 24)));\n        var _map_size$5 = Web$Kaelin$Resources$map_size;\n        var _width$6 = ((((_map_size$5 * 2) >>> 0) + 1) >>> 0);\n        var _height$7 = ((((_map_size$5 * 2) >>> 0) + 1) >>> 0);\n        var _hex_rad$8 = Web$Kaelin$Resources$hexagon_radius;\n        var _img$9 = (() => {\n            var $528 = _img$3;\n            var $529 = 0;\n            var $530 = _height$7;\n            let _img$10 = $528;\n            for (let _j$9 = $529; _j$9 < $530; ++_j$9) {\n                var _img$11 = (() => {\n                    var $531 = _img$10;\n                    var $532 = 0;\n                    var $533 = _width$6;\n                    let _img$12 = $531;\n                    for (let _i$11 = $532; _i$11 < $533; ++_i$11) {\n                        var _coord_i$13 = Int$sub$(Int$new(0n)(U32$to_nat$(_i$11)), Int$new(0n)(U32$to_nat$(_map_size$5)));\n                        var _coord_j$14 = Int$sub$(Int$new(0n)(U32$to_nat$(_j$9)), Int$new(0n)(U32$to_nat$(_map_size$5)));\n                        var _coord$15 = Web$Kaelin$Coord$new$(_coord_i$13, _coord_j$14);\n                        var _fit$16 = Web$Kaelin$Coord$fit$(_coord$15, _map_size$5);\n                        var self = _fit$16;\n                        if (self) {\n                            var _img$17 = Web$Kaelin$Draw$hexagon_border$(_coord$15, _hex_rad$8, _col$4, _img$12);\n                            var _img$18 = Web$Kaelin$Draw$tile$(_coord$15, _map$2, _img$17);\n                            var $534 = _img$18;\n                            var $531 = $534;\n                        } else {\n                            var $535 = _img$12;\n                            var $531 = $535;\n                        };\n                        _img$12 = $531;\n                    };\n                    return _img$12;\n                })();\n                var $528 = _img$11;\n                _img$10 = $528;\n            };\n            return _img$10;\n        })();\n        var $527 = _img$9;\n        return $527;\n    };\n    const Web$Kaelin$Draw$map = x0 => x1 => Web$Kaelin$Draw$map$(x0, x1);\n\n    function Word$mod$(_a$2, _b$3) {\n        var Word$mod$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$mod = _a$2 => _b$3 => Word$mod$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$mod$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mod = x0 => x1 => Word$mod$(x0, x1);\n    const U32$mod = a0 => a1 => (a0 % a1);\n\n    function Image3D$Draw$square$(_x$1, _y$2, _z$3, _w$4, _h$5, _col$6, _img$7) {\n        var _siz$8 = ((_w$4 * _h$5) >>> 0);\n        var _w_2$9 = ((_w$4 / 2) >>> 0);\n        var _h_2$10 = ((_h$5 / 2) >>> 0);\n        var $536 = (() => {\n            var $537 = _img$7;\n            var $538 = 0;\n            var $539 = _siz$8;\n            let _pix$12 = $537;\n            for (let _idx$11 = $538; _idx$11 < $539; ++_idx$11) {\n                var _v_x$13 = (_idx$11 % _w$4);\n                var _v_y$14 = ((_idx$11 / _h$5) >>> 0);\n                var _p_x$15 = (Math.max(((_x$1 + _v_x$13) >>> 0) - _w_2$9, 0));\n                var _p_y$16 = (Math.max(((_y$2 + _v_y$14) >>> 0) - _h_2$10, 0));\n                var _pos$17 = ((0 | _p_x$15 | (_p_y$16 << 12) | (_z$3 << 24)));\n                var _col$18 = _col$6(_v_x$13)(_v_y$14);\n                var _pix$19 = ((_pix$12.buffer[_pix$12.length * 2] = _pos$17, _pix$12.buffer[_pix$12.length * 2 + 1] = _col$18, _pix$12.length++, _pix$12));\n                var $537 = _pix$19;\n                _pix$12 = $537;\n            };\n            return _pix$12;\n        })();\n        return $536;\n    };\n    const Image3D$Draw$square = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Image3D$Draw$square$(x0, x1, x2, x3, x4, x5, x6);\n\n    function Web$Kaelin$Draw$initial_ent$dot$(_img$1) {\n        var _center$2 = ((0 | 0 | (255 << 8) | (255 << 16) | (255 << 24)));\n        var _earth$3 = ((0 | 0 | (0 << 8) | (255 << 16) | (255 << 24)));\n        var _new_coord$4 = Web$Kaelin$Coord$new;\n        var _coord_center$5 = _new_coord$4(Int$new(0n)(0n))(Int$new(0n)(0n));\n        var _coord_earth$6 = _new_coord$4(Int$new(1n)(0n))(Int$new(2n)(0n));\n        var self = Web$Kaelin$Coord$to_screen_xy$(_coord_center$5);\n        switch (self._) {\n            case 'Pair.new':\n                var $541 = self.fst;\n                var $542 = self.snd;\n                var self = Web$Kaelin$Coord$to_screen_xy$(_coord_earth$6);\n                switch (self._) {\n                    case 'Pair.new':\n                        var $544 = self.fst;\n                        var $545 = self.snd;\n                        var _img$11 = Image3D$Draw$square$($541, $542, 0, 4, 4, (_cx$11 => _cy$12 => {\n                            var $547 = _center$2;\n                            return $547;\n                        }), _img$1);\n                        var $546 = Image3D$Draw$square$($544, $545, 0, 16, 19, (_ex$12 => _ey$13 => {\n                            var $548 = _earth$3;\n                            return $548;\n                        }), _img$11);\n                        var $543 = $546;\n                        break;\n                };\n                var $540 = $543;\n                break;\n        };\n        return $540;\n    };\n    const Web$Kaelin$Draw$initial_ent$dot = x0 => Web$Kaelin$Draw$initial_ent$dot$(x0);\n\n    function App$Render$pix$(_pixs$1) {\n        var $549 = ({\n            _: 'App.Render.pix',\n            'pixs': _pixs$1\n        });\n        return $549;\n    };\n    const App$Render$pix = x0 => App$Render$pix$(x0);\n\n    function App$Action$(_S$1) {\n        var $550 = null;\n        return $550;\n    };\n    const App$Action = x0 => App$Action$(x0);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function App$Action$state$(_value$2) {\n        var $551 = ({\n            _: 'App.Action.state',\n            'value': _value$2\n        });\n        return $551;\n    };\n    const App$Action$state = x0 => App$Action$state$(x0);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $552 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $552;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$Kaelin = (() => {\n        var _img$1 = Image3D$alloc_capacity$(65536);\n        var _map$2 = Map$from_list$(List$nil);\n        var _map$3 = Web$Kaelin$Draw$initial_ent$(_map$2);\n        var _init_pos$4 = Web$Kaelin$Coord$new$(Int$new(0n)(0n), Int$new(0n)(2n));\n        var _init$2 = Web$Kaelin$State$game$(\"0x000000000000\", 0n, _init_pos$4, _map$3);\n        var _draw$3 = (_state$3 => {\n            var self = _state$3;\n            switch (self._) {\n                case 'Web.Kaelin.State.game':\n                    var $555 = self.map;\n                    var _map$8 = $555;\n                    var _img$9 = Web$Kaelin$Draw$map$(_img$1, _map$8);\n                    var _img$10 = Web$Kaelin$Draw$initial_ent$dot$(_img$9);\n                    var $556 = App$Render$pix$(_img$10);\n                    var $554 = $556;\n                    break;\n                case 'Web.Kaelin.State.init':\n                case 'Web.Kaelin.State.void':\n                    var $557 = App$Render$txt$(\"TODO: create the renderer for this game state mode\");\n                    var $554 = $557;\n                    break;\n            };\n            return $554;\n        });\n        var _when$4 = (_event$4 => _state$5 => {\n            var self = _event$4;\n            switch (self._) {\n                case 'App.Event.xkey':\n                    var $559 = self.down;\n                    var $560 = self.code;\n                    var self = $559;\n                    if (self) {\n                        var self = ($560 === 68);\n                        if (self) {\n                            var self = _state$5;\n                            switch (self._) {\n                                case 'Web.Kaelin.State.init':\n                                case 'Web.Kaelin.State.void':\n                                    var $564 = List$nil;\n                                    var $563 = $564;\n                                    break;\n                                case 'Web.Kaelin.State.game':\n                                    var $565 = List$cons$(App$Action$state$(_state$5), List$nil);\n                                    var $563 = $565;\n                                    break;\n                            };\n                            var $562 = $563;\n                        } else {\n                            var $566 = List$nil;\n                            var $562 = $566;\n                        };\n                        var $561 = $562;\n                    } else {\n                        var $567 = List$nil;\n                        var $561 = $567;\n                    };\n                    var $558 = $561;\n                    break;\n                case 'App.Event.init':\n                case 'App.Event.tick':\n                case 'App.Event.post':\n                    var $568 = List$nil;\n                    var $558 = $568;\n                    break;\n            };\n            return $558;\n        });\n        var $553 = App$new$(_init$2, _draw$3, _when$4);\n        return $553;\n    })();\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.eql': U32$eql,\n        'Nat.apply': Nat$apply,\n        'Word.i': Word$i,\n        'Word.inc': Word$inc,\n        'U32.inc': U32$inc,\n        'Nat.to_u32': Nat$to_u32,\n        'U32.shr': U32$shr,\n        'U32.needed_depth.go': U32$needed_depth$go,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'U32.sub': U32$sub,\n        'U32.needed_depth': U32$needed_depth,\n        'Word.shift_left1.aux': Word$shift_left1$aux,\n        'Word.shift_left1': Word$shift_left1,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'Word.mul.go': Word$mul$go,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Image3D.new': Image3D$new,\n        'Image3D.alloc_capacity': Image3D$alloc_capacity,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List': List,\n        'List.nil': List$nil,\n        'Pair': Pair,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'U32.length': U32$length,\n        'U32.for': U32$for,\n        'U32.slice': U32$slice,\n        'U32.add': U32$add,\n        'U32.read_base': U32$read_base,\n        'Image3D.parse_byte': Image3D$parse_byte,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'U32.shl': U32$shl,\n        'Pos32.new': Pos32$new,\n        'Col32.new': Col32$new,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Pair.new': Pair$new,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'Image3D.set_pos': Image3D$set_pos,\n        'Image3D.set_col': Image3D$set_col,\n        'Image3D.set_length': Image3D$set_length,\n        'Image3D.push': Image3D$push,\n        'Image3D.parse': Image3D$parse,\n        'Kaelin.Assets.chars.croni_d_1': Kaelin$Assets$chars$croni_d_1,\n        'Web.Jogo.hero.hex': Web$Jogo$hero$hex,\n        'Web.Jogo.hero': Web$Jogo$hero,\n        'Kaelin.Assets.dark_grass_0': Kaelin$Assets$dark_grass_0,\n        'Web.Kaelin.Entity.new': Web$Kaelin$Entity$new,\n        'Web.Kaelin.Coord.new': Web$Kaelin$Coord$new,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'Int.to_nat': Int$to_nat,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'List.cons': List$cons,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Bool.and': Bool$and,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'Maybe': Maybe,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'Int.show': Int$show,\n        'Web.Kaelin.Coord.show': Web$Kaelin$Coord$show,\n        'Map.set': Map$set,\n        'Maybe.default': Maybe$default,\n        'BitsMap.get': BitsMap$get,\n        'Map.get': Map$get,\n        'Web.Kaelin.Map.push': Web$Kaelin$Map$push,\n        'Int.new': Int$new,\n        'Web.Kaelin.Draw.initial_ent': Web$Kaelin$Draw$initial_ent,\n        'Web.Kaelin.State.game': Web$Kaelin$State$game,\n        'App.Render.txt': App$Render$txt,\n        'Image3D.clear': Image3D$clear,\n        'Web.Kaelin.Resources.map_size': Web$Kaelin$Resources$map_size,\n        'Web.Kaelin.Resources.hexagon_radius': Web$Kaelin$Resources$hexagon_radius,\n        'Nat.add': Nat$add,\n        'Int.add': Int$add,\n        'Int.neg': Int$neg,\n        'Int.sub': Int$sub,\n        'Word.fold': Word$fold,\n        'Nat.mul': Nat$mul,\n        'Word.to_nat': Word$to_nat,\n        'U32.to_nat': U32$to_nat,\n        'Int.abs': Int$abs,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Word.lte': Word$lte,\n        'U32.lte': U32$lte,\n        'Web.Kaelin.Coord.fit': Web$Kaelin$Coord$fit,\n        'Int.is_neg': Int$is_neg,\n        'Web.Kaelin.Coord.to_screen_xy': Web$Kaelin$Coord$to_screen_xy,\n        'Image3D.Draw.deresagon': Image3D$Draw$deresagon,\n        'Web.Kaelin.Draw.hexagon_border': Web$Kaelin$Draw$hexagon_border,\n        'Web.Kaelin.Map.get': Web$Kaelin$Map$get,\n        'List.for': List$for,\n        'Image3D.get_len': Image3D$get_len,\n        'Array.get': Array$get,\n        'Buffer32.get': Buffer32$get,\n        'Image3D.get_pos': Image3D$get_pos,\n        'Image3D.get_col': Image3D$get_col,\n        'Word.and': Word$and,\n        'U32.and': U32$and,\n        'Image3D.Draw.image': Image3D$Draw$image,\n        'Web.Kaelin.Draw.tile': Web$Kaelin$Draw$tile,\n        'Web.Kaelin.Draw.map': Web$Kaelin$Draw$map,\n        'Word.mod': Word$mod,\n        'U32.mod': U32$mod,\n        'Image3D.Draw.square': Image3D$Draw$square,\n        'Web.Kaelin.Draw.initial_ent.dot': Web$Kaelin$Draw$initial_ent$dot,\n        'App.Render.pix': App$Render$pix,\n        'App.Action': App$Action,\n        'U16.eql': U16$eql,\n        'App.Action.state': App$Action$state,\n        'App.new': App$new,\n        'Web.Kaelin': Web$Kaelin,\n    };\n})();"],"sourceRoot":""}