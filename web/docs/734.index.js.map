{"version":3,"sources":["webpack://kind-web/./src/apps/Web.TicTacToe.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"734.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c2;\n                return $2;\n            } else {\n                var $3 = c2;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c2;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c2($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c2;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c2($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function BitsMap$(_A$1) {\n        var $33 = null;\n        return $33;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $34 = null;\n        return $34;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $35 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $35;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $36 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $36;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function BitsMap$set$(_bits$2, _val$3, _map$4) {\n        var self = _bits$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $38 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $40 = self.val;\n                        var $41 = self.lft;\n                        var $42 = self.rgt;\n                        var $43 = BitsMap$tie$($40, BitsMap$set$($38, _val$3, $41), $42);\n                        var $39 = $43;\n                        break;\n                    case 'BitsMap.new':\n                        var $44 = BitsMap$tie$(Maybe$none, BitsMap$set$($38, _val$3, BitsMap$new), BitsMap$new);\n                        var $39 = $44;\n                        break;\n                };\n                var $37 = $39;\n                break;\n            case 'i':\n                var $45 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $47 = self.val;\n                        var $48 = self.lft;\n                        var $49 = self.rgt;\n                        var $50 = BitsMap$tie$($47, $48, BitsMap$set$($45, _val$3, $49));\n                        var $46 = $50;\n                        break;\n                    case 'BitsMap.new':\n                        var $51 = BitsMap$tie$(Maybe$none, BitsMap$new, BitsMap$set$($45, _val$3, BitsMap$new));\n                        var $46 = $51;\n                        break;\n                };\n                var $37 = $46;\n                break;\n            case 'e':\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $53 = self.lft;\n                        var $54 = self.rgt;\n                        var $55 = BitsMap$tie$(Maybe$some$(_val$3), $53, $54);\n                        var $52 = $55;\n                        break;\n                    case 'BitsMap.new':\n                        var $56 = BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new);\n                        var $52 = $56;\n                        break;\n                };\n                var $37 = $52;\n                break;\n        };\n        return $37;\n    };\n    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $58 = self.pred;\n                var $59 = (Word$to_bits$($58) + '0');\n                var $57 = $59;\n                break;\n            case 'Word.i':\n                var $60 = self.pred;\n                var $61 = (Word$to_bits$($60) + '1');\n                var $57 = $61;\n                break;\n            case 'Word.e':\n                var $62 = Bits$e;\n                var $57 = $62;\n                break;\n        };\n        return $57;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $64 = Bits$e;\n            var $63 = $64;\n        } else {\n            var $65 = self.charCodeAt(0);\n            var $66 = self.slice(1);\n            var $67 = (String$to_bits$($66) + (u16_to_bits($65)));\n            var $63 = $67;\n        };\n        return $63;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $69 = self.head;\n                var $70 = self.tail;\n                var self = $69;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $72 = self.fst;\n                        var $73 = self.snd;\n                        var $74 = BitsMap$set$(String$to_bits$($72), $73, Map$from_list$($70));\n                        var $71 = $74;\n                        break;\n                };\n                var $68 = $71;\n                break;\n            case 'List.nil':\n                var $75 = BitsMap$new;\n                var $68 = $75;\n                break;\n        };\n        return $68;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $76 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $76;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Pair$(_A$1, _B$2) {\n        var $77 = null;\n        return $77;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $78 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $78;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function List$(_A$1) {\n        var $79 = null;\n        return $79;\n    };\n    const List = x0 => List$(x0);\n\n    function Maybe$default$(_m$2, _a$3) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $81 = self.value;\n                var $82 = $81;\n                var $80 = $82;\n                break;\n            case 'Maybe.none':\n                var $83 = _a$3;\n                var $80 = $83;\n                break;\n        };\n        return $80;\n    };\n    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);\n\n    function Maybe$(_A$1) {\n        var $84 = null;\n        return $84;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function List$get$(_index$2, _list$3) {\n        var List$get$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$get = _index$2 => _list$3 => List$get$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $85 = self.head;\n                        var $86 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $88 = Maybe$some$($85);\n                            var $87 = $88;\n                        } else {\n                            var $89 = (self - 1n);\n                            var $90 = List$get$($89, $86);\n                            var $87 = $90;\n                        };\n                        return $87;\n                    case 'List.nil':\n                        var $91 = Maybe$none;\n                        return $91;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$get = x0 => x1 => List$get$(x0, x1);\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $92 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $92;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function DOM$text$(_value$1) {\n        var $93 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $93;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $94 = (String.fromCharCode(_head$1) + _tail$2);\n        return $94;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function String$flatten$go$(_xs$1, _res$2) {\n        var String$flatten$go$ = (_xs$1, _res$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _res$2]\n        });\n        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);\n        var arg = [_xs$1, _res$2];\n        while (true) {\n            let [_xs$1, _res$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                switch (self._) {\n                    case 'List.cons':\n                        var $95 = self.head;\n                        var $96 = self.tail;\n                        var $97 = String$flatten$go$($96, (_res$2 + $95));\n                        return $97;\n                    case 'List.nil':\n                        var $98 = _res$2;\n                        return $98;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);\n\n    function String$flatten$(_xs$1) {\n        var $99 = String$flatten$go$(_xs$1, \"\");\n        return $99;\n    };\n    const String$flatten = x0 => String$flatten$(x0);\n\n    function List$pure$(_x$2) {\n        var $100 = List$cons$(_x$2, List$nil);\n        return $100;\n    };\n    const List$pure = x0 => List$pure$(x0);\n\n    function List$intersperse$(_sep$2, _xs$3) {\n        var self = _xs$3;\n        switch (self._) {\n            case 'List.cons':\n                var $102 = self.head;\n                var $103 = self.tail;\n                var self = $103;\n                switch (self._) {\n                    case 'List.nil':\n                        var $105 = List$pure$($102);\n                        var $104 = $105;\n                        break;\n                    case 'List.cons':\n                        var $106 = List$cons$($102, List$cons$(_sep$2, List$intersperse$(_sep$2, $103)));\n                        var $104 = $106;\n                        break;\n                };\n                var $101 = $104;\n                break;\n            case 'List.nil':\n                var $107 = List$nil;\n                var $101 = $107;\n                break;\n        };\n        return $101;\n    };\n    const List$intersperse = x0 => x1 => List$intersperse$(x0, x1);\n\n    function String$intercalate$(_sep$1, _xs$2) {\n        var $108 = String$flatten$(List$intersperse$(_sep$1, _xs$2));\n        return $108;\n    };\n    const String$intercalate = x0 => x1 => String$intercalate$(x0, x1);\n\n    function List$map$(_f$3, _as$4) {\n        var self = _as$4;\n        switch (self._) {\n            case 'List.cons':\n                var $110 = self.head;\n                var $111 = self.tail;\n                var $112 = List$cons$(_f$3($110), List$map$(_f$3, $111));\n                var $109 = $112;\n                break;\n            case 'List.nil':\n                var $113 = List$nil;\n                var $109 = $113;\n                break;\n        };\n        return $109;\n    };\n    const List$map = x0 => x1 => List$map$(x0, x1);\n\n    function List$show$(_f$2, _xs$3) {\n        var $114 = String$flatten$(List$cons$(\"[\", List$cons$(String$intercalate$(\",\", List$map$(_f$2, _xs$3)), List$cons$(\"]\", List$nil))));\n        return $114;\n    };\n    const List$show = x0 => x1 => List$show$(x0, x1);\n    const Bool$false = false;\n\n    function String$join$go$(_sep$1, _list$2, _fst$3) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $116 = self.head;\n                var $117 = self.tail;\n                var $118 = String$flatten$(List$cons$((() => {\n                    var self = _fst$3;\n                    if (self) {\n                        var $119 = \"\";\n                        return $119;\n                    } else {\n                        var $120 = _sep$1;\n                        return $120;\n                    };\n                })(), List$cons$($116, List$cons$(String$join$go$(_sep$1, $117, Bool$false), List$nil))));\n                var $115 = $118;\n                break;\n            case 'List.nil':\n                var $121 = \"\";\n                var $115 = $121;\n                break;\n        };\n        return $115;\n    };\n    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);\n    const Bool$true = true;\n\n    function String$join$(_sep$1, _list$2) {\n        var $122 = String$join$go$(_sep$1, _list$2, Bool$true);\n        return $122;\n    };\n    const String$join = x0 => x1 => String$join$(x0, x1);\n\n    function IO$(_A$1) {\n        var $123 = null;\n        return $123;\n    };\n    const IO = x0 => IO$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $124 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $124;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $126 = self.value;\n                var $127 = _f$4($126);\n                var $125 = $127;\n                break;\n            case 'IO.ask':\n                var $128 = self.query;\n                var $129 = self.param;\n                var $130 = self.then;\n                var $131 = IO$ask$($128, $129, (_x$8 => {\n                    var $132 = IO$bind$($130(_x$8), _f$4);\n                    return $132;\n                }));\n                var $125 = $131;\n                break;\n        };\n        return $125;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $133 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $133;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $134 = _new$2(IO$bind)(IO$end);\n        return $134;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function Dynamic$new$(_value$2) {\n        var $135 = ({\n            _: 'Dynamic.new',\n            'value': _value$2\n        });\n        return $135;\n    };\n    const Dynamic$new = x0 => Dynamic$new$(x0);\n    const Unit$new = null;\n    const App$pass = IO$monad$((_m$bind$1 => _m$pure$2 => {\n        var $136 = _m$pure$2;\n        return $136;\n    }))(Dynamic$new$(Unit$new));\n\n    function App$store$(_value$2) {\n        var $137 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $138 = _m$pure$4;\n            return $138;\n        }))(Dynamic$new$(_value$2));\n        return $137;\n    };\n    const App$store = x0 => App$store$(x0);\n    const String$nil = '';\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $139 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $139;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$TicTacToe = (() => {\n        var _place_style$1 = Map$from_list$(List$cons$(Pair$new$(\"cursor\", \"pointer\"), List$nil));\n        var _init$2 = List$cons$(List$cons$(\"A\", List$cons$(\"b\", List$cons$(\"c\", List$nil))), List$cons$(List$cons$(\"d\", List$cons$(\"e\", List$cons$(\"f\", List$nil))), List$cons$(List$cons$(\"g\", List$cons$(\"h\", List$cons$(\"i\", List$nil))), List$nil)));\n        var _draw$3 = (_state$3 => {\n            var _v00$4 = Maybe$default$(List$get$(0n, Maybe$default$(List$get$(0n, _state$3), List$nil)), \"\");\n            var _v10$5 = Maybe$default$(List$get$(1n, Maybe$default$(List$get$(0n, _state$3), List$nil)), \"\");\n            var _v20$6 = Maybe$default$(List$get$(2n, Maybe$default$(List$get$(0n, _state$3), List$nil)), \"\");\n            var _v01$7 = Maybe$default$(List$get$(0n, Maybe$default$(List$get$(1n, _state$3), List$nil)), \"\");\n            var _v11$8 = Maybe$default$(List$get$(1n, Maybe$default$(List$get$(1n, _state$3), List$nil)), \"\");\n            var _v21$9 = Maybe$default$(List$get$(2n, Maybe$default$(List$get$(1n, _state$3), List$nil)), \"\");\n            var _v02$10 = Maybe$default$(List$get$(0n, Maybe$default$(List$get$(2n, _state$3), List$nil)), \"\");\n            var _v12$11 = Maybe$default$(List$get$(1n, Maybe$default$(List$get$(2n, _state$3), List$nil)), \"\");\n            var _v22$12 = Maybe$default$(List$get$(2n, Maybe$default$(List$get$(2n, _state$3), List$nil)), \"\");\n            var $141 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$((\"Estado: \" + List$show$(String$join(\",\"), _state$3))), List$cons$(DOM$node$(\"table\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$node$(\"tr\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$node$(\"td\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"00\"), List$nil)), _place_style$1, List$cons$(DOM$text$(_v00$4), List$nil)), List$cons$(DOM$node$(\"td\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"10\"), List$nil)), _place_style$1, List$cons$(DOM$text$(_v10$5), List$nil)), List$cons$(DOM$node$(\"td\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"20\"), List$nil)), _place_style$1, List$cons$(DOM$text$(_v20$6), List$nil)), List$nil)))), List$cons$(DOM$node$(\"tr\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$node$(\"td\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"01\"), List$nil)), _place_style$1, List$cons$(DOM$text$(_v01$7), List$nil)), List$cons$(DOM$node$(\"td\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"11\"), List$nil)), _place_style$1, List$cons$(DOM$text$(_v11$8), List$nil)), List$cons$(DOM$node$(\"td\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"21\"), List$nil)), _place_style$1, List$cons$(DOM$text$(_v21$9), List$nil)), List$nil)))), List$cons$(DOM$node$(\"tr\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$node$(\"td\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"02\"), List$nil)), _place_style$1, List$cons$(DOM$text$(_v02$10), List$nil)), List$cons$(DOM$node$(\"td\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"12\"), List$nil)), _place_style$1, List$cons$(DOM$text$(_v12$11), List$nil)), List$cons$(DOM$node$(\"td\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"22\"), List$nil)), _place_style$1, List$cons$(DOM$text$(_v22$12), List$nil)), List$nil)))), List$nil)))), List$nil)));\n            return $141;\n        });\n        var _when$4 = (_event$4 => _state$5 => {\n            var self = _event$4;\n            switch (self._) {\n                case 'App.Event.dom':\n                    var $143 = self.id;\n                    var _id$9 = $143;\n                    var $144 = App$store$(List$cons$(List$cons$(_id$9, List$cons$(_id$9, List$cons$(_id$9, List$nil))), List$cons$(List$cons$(_id$9, List$cons$(_id$9, List$cons$(_id$9, List$nil))), List$cons$(List$cons$(_id$9, List$cons$(_id$9, List$cons$(_id$9, List$nil))), List$nil))));\n                    var $142 = $144;\n                    break;\n                case 'App.Event.key_down':\n                    var $145 = self.code;\n                    var _key$8 = String$cons$($145, String$nil);\n                    var $146 = App$store$(List$cons$(List$cons$(_key$8, List$cons$(_key$8, List$cons$(_key$8, List$nil))), List$cons$(List$cons$(_key$8, List$cons$(_key$8, List$cons$(_key$8, List$nil))), List$cons$(List$cons$(_key$8, List$cons$(_key$8, List$cons$(_key$8, List$nil))), List$nil))));\n                    var $142 = $146;\n                    break;\n                case 'App.Event.init':\n                case 'App.Event.tick':\n                case 'App.Event.mouse_down':\n                case 'App.Event.mouse_up':\n                case 'App.Event.key_up':\n                case 'App.Event.post':\n                    var $147 = App$pass;\n                    var $142 = $147;\n                    break;\n            };\n            return $142;\n        });\n        var $140 = App$new$(_init$2, _draw$3, _when$4);\n        return $140;\n    })();\n    return {\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.cons': List$cons,\n        'Pair': Pair,\n        'Pair.new': Pair$new,\n        'List.nil': List$nil,\n        'List': List,\n        'Maybe.default': Maybe$default,\n        'Maybe': Maybe,\n        'List.get': List$get,\n        'DOM.node': DOM$node,\n        'DOM.text': DOM$text,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'String.flatten.go': String$flatten$go,\n        'String.flatten': String$flatten,\n        'List.pure': List$pure,\n        'List.intersperse': List$intersperse,\n        'String.intercalate': String$intercalate,\n        'List.map': List$map,\n        'List.show': List$show,\n        'Bool.false': Bool$false,\n        'String.join.go': String$join$go,\n        'Bool.true': Bool$true,\n        'String.join': String$join,\n        'IO': IO,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'Dynamic.new': Dynamic$new,\n        'Unit.new': Unit$new,\n        'App.pass': App$pass,\n        'App.store': App$store,\n        'String.nil': String$nil,\n        'App.new': App$new,\n        'Web.TicTacToe': Web$TicTacToe,\n    };\n})();"],"sourceRoot":""}