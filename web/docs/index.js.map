{"version":3,"sources":["webpack://kind-web/./events/client.js","webpack://kind-web/./events/lib.js","webpack://kind-web/./src/assets/moonad_logo.png","webpack://kind-web/./node_modules/inferno-hyperscript/dist/index.esm.js","webpack://kind-web/./node_modules/inferno/dist/index.esm.js","webpack://kind-web/./node_modules/inferno/index.esm.js","webpack://kind-web/./node_modules/isomorphic-ws/browser.js","webpack://kind-web/./node_modules/kind-lang/src/kind.js","webpack://kind-web/./node_modules/nano-ethereum-signer/main.min.js","webpack://kind-web/./src/AppList.js","webpack://kind-web/./src/AppPlay.js","webpack://kind-web/./src/apps/index.js","webpack://kind-web/./src/utils.js","webpack://kind-web/webpack/bootstrap","webpack://kind-web/webpack/runtime/create fake namespace object","webpack://kind-web/webpack/runtime/define property getters","webpack://kind-web/webpack/runtime/ensure chunk","webpack://kind-web/webpack/runtime/get javascript chunk filename","webpack://kind-web/webpack/runtime/global","webpack://kind-web/webpack/runtime/hasOwnProperty shorthand","webpack://kind-web/webpack/runtime/load script","webpack://kind-web/webpack/runtime/make namespace object","webpack://kind-web/webpack/runtime/publicPath","webpack://kind-web/webpack/runtime/jsonp chunk loading","webpack://kind-web/./src/index.js"],"names":[],"mappings":";;;;;;AAAA,UAAU,mBAAO,CAAC,GAAU;AAC5B,UAAU,mBAAO,CAAC,GAAsB;AACxC,gBAAgB,mBAAO,CAAC,GAAe;;AAEvC,kCAAkC,wGAAwG,KAAK;AAC/I;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA,0BAA0B,uBAAuB;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClHA,iEAAe,qBAAuB,yCAAyC,E;;;;;;;;;;;;ACAgC;;AAE/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6CAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,WAAW,QAAQ;AACnB,WAAW,qDAAqD;AAChE,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gEAAuB;AAC3C;AACA,mBAAmB,uDAAc;AACjC;AACA;AACA;AACA;AACA,eAAe,oDAAW;AAC1B;AACA;AACA;AACA;AACA,WAAW,6DAAoB;AAC/B;;AAEa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3Hb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,SAAS;AACpB,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChuBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnmBAAmB,qBAAqB;AACxkBAAkB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,SAAS;AACnmBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,qBAAqB;AACrB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,mBAAmB;AACnB,sBAAsB;AACtB,oBAAoB;AACpB;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAE2hB;;;AC1mEvf;;AAEpC,IAAI,KAAqC,EAAE,EAE1C;;;;;;;;ACJD;;AAEA;;AAEA;AACA;AACA,CAAC;AACD;AACA,CAAC,iBAAiB,qBAAM;AACxB,OAAO,qBAAM,cAAc,qBAAM;AACjC,CAAC;AACD;AACA,CAAC;AACD;AACA;;AAEA;;;;;;;;AChBA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,sCAAsC;AAC7D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA,6DAA6D;AAC7D;AACA,yDAAyD;AACzD;AACA,qDAAqD;AACrD;AACA,iDAAiD;AACjD;AACA,6CAA6C;AAC7C;AACA,yCAAyC;AACzC;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAqH,EAAE,+BAA+B,EAAE;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbiDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjyCAAyC;AACzoKAAoK;AACpK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qJAAqJ;AACrJ;AACA,iJAAiJ;AACjJ;AACA;AACA;AACA;AACA,iJAAiJ;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4JAA4J;AAC5J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6IAA6I;AAC7I;AACA,yIAAyI;AACzI;AACA;AACA;AACA;AACA,yIAAyI;AACzoJAAoJ;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qIAAqI;AACrI;AACA,iIAAiI;AACjI;AACA;AACA;AACA;AACA,iIAAiI;AACjyHAAyH;AACzH;AACA;AACA;AACA;AACA,yHAAyH;AACzoIAAoI;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAqH;AACrH;AACA,iHAAiH;AACjH;AACA;AACA;AACA;AACA,iHAAiH;AACjyGAAyG;AACzG;AACA;AACA;AACA;AACA,yGAAyG;AACzoHAAoH;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA,iGAAiG;AACjyFAAyF;AACzF;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA,yFAAyF;AACzyEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oJAAoJ;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iIAAiI;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yIAAyI;AACzI;AACA,qIAAqI;AACrI;AACA,iIAAiI;AACjI;AACA;AACA;AACA;AACA;AACA,yIAAyI;AACzI;AACA,qIAAqI;AACrI;AACA,iIAAiI;AACjI;AACA;AACA;AACA;AACA,qIAAqI;AACrI;AACA,iIAAiI;AACjuEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4IAA4I;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iIAAiI;AACjI;AACA,6HAA6H;AAC7H;AACA,yHAAyH;AACzH;AACA;AACA;AACA;AACA;AACA,iIAAiI;AACjI;AACA,6HAA6H;AAC7H;AACA,yHAAyH;AACzH;AACA;AACA;AACA;AACA,6HAA6H;AAC7H;AACA,yHAAyH;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4HAA4H;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG;AACzG;AACA;AACA;AACA;AACA,6GAA6G;AAC7G;AACA,yGAAyG;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAoH;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA,iGAAiG;AACjyEAAyE;AACzqFAAqF;AACrF;AACA,iFAAiF;AACjyEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvyEAAyE;AACzyCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG;AAChgGAAgG;AAChgFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzyCAAyC;AACziEAAiE;AACjE;AACA;AACA;AACA;AACA,iEAAiE;AACjoFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA,iGAAiG;AACjiCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA,6EAA6E;AAC7E;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH,EAAE;;AAElH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjyEAAyE;AACzaAAa;AACbaAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjqBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjyCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACryBAAyB;AACziBAAiB;AACjiDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,yCAAyC;AACzC;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,yCAAyC;AACzC;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,yFAAyF,+BAA+B;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mIAAmI;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mIAAmI;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,wEAAwE;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kMAAkM,GAAG,EAAE;AACvM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8IAA8I;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8IAA8I;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,gIAAgI;AAChI;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uKAAuK,sCAAsC;AAC7M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjyFAAyF,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE,0CAA0C,EAAE,0CAA0C,EAAE;AACzI;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,EAAE;AAC5D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB,UAAU,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,EAAE,sBAAsB,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wHAAwH,EAAE;AAC1H;AACA,kJAAkJ,EAAE,QAAQ,EAAE;AAC9J;AACA;AACA;AACA;AACA;AACA;AACA,6GAA6G,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA,iEAAiE;AACjE;AACA,6DAA6D;AAC7D;AACA,yDAAyD;AACzD;AACA,qDAAqD;AACrD;AACA,iDAAiD;AACjD;AACA,6CAA6C;AAC7C;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,8DAA8D,EAAE;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wDAAwD,EAAE;AAC1D;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,wDAAwD,EAAE;AAC1D;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I;;;;;;;AC3iwBD,YAAY,eAAe,QAAQ,kBAAkB,mBAAmB,qBAAqB,EAAE,UAAU,wFAAwF,yDAAyD,eAAe,gFAAgF,qBAAM,EAAE,qBAAM,IAAI,YAAY,WAAW,KAAK,WAAW,4BAA4B,0CAA0C;AACxd,cAAc,gBAAgB,0BAA0B,iBAAiB,SAAS,uBAAuB,oCAAoC,EAAE,iCAAiC,eAAe,kBAAkB,cAAc,wEAAwE,kDAAkD,QAAQ,SAAS;AAC1W,iBAAiB,MAAM,SAAS,eAAe,YAAY,aAAa,KAAK,WAAW,gBAAgB,EAAE,OAAO,gBAAgB,OAAO,OAAO,uBAAuB,oCAAoC,GAAG,2BAA2B,yBAAyB,YAAY,YAAY,wBAAwB,0DAA0D;AAC3W,sCAAsC,2BAA2B,qBAAqB,yBAAyB,oBAAoB,YAAY,yBAAyB,mBAAmB,IAAI,cAAc,aAAa,EAAE,eAAe,WAAW,kBAAkB;AACxQ,qBAAqB,qBAAqB,kDAAkD,aAAa,mDAAmD,IAAI,mBAAmB,kBAAkB,8DAA8D,SAAS,sBAAsB,SAAS,sBAAsB,SAAS,sBAAsB,SAAS,sBAAsB,SAAS,sBAAsB,SAAS,uBAAuB,SAAS,uBAAuB,SAAS,QAAQ;AAC/e,OAAO,SAAS,QAAQ,0CAA0C,SAAS,uBAAuB,SAAS,uBAAuB,SAAS,uBAAuB,SAAS,uBAAuB,SAAS,uBAAuB,SAAS,uBAAuB,SAAS,uBAAuB,SAAS,QAAQ,cAAc,UAAU,SAAS,YAAY,YAAY,cAAc,UAAU,cAAc,UAAU,gCAAgC,6BAA6B,aAAa,UAAU;AAChf,IAAI,cAAc,UAAU,aAAa,cAAc,aAAa,cAAc,gCAAgC,6BAA6B,aAAa,UAAU,UAAU,cAAc,UAAU,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,gCAAgC,6BAA6B,aAAa,UAAU,UAAU,cAAc,UAAU,aAAa,cAAc,aAAa,cAAc,aAAa;AAC7e,MAAM,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,gCAAgC,6BAA6B,aAAa,UAAU,UAAU,cAAc,UAAU,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,gCAAgC,6BAA6B,aAAa;AAC/e,IAAI,UAAU,cAAc,UAAU,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,gCAAgC,6BAA6B,aAAa,UAAU,UAAU,eAAe,WAAW,aAAa,cAAc,aAAa,cAAc,aAAa;AAC/e,MAAM,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,gCAAgC,6BAA6B,aAAa,UAAU,UAAU,eAAe,WAAW,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,aAAa,cAAc,aAAa;AAC5e,EAAE,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,gCAAgC,6BAA6B,aAAa,UAAU,UAAU,cAAc,UAAU,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,cAAc,eAAe,aAAa;AACxe,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,aAAa,aAAa,aAAa,gCAAgC,6BAA6B,aAAa,UAAU,UAAU,cAAc,UAAU,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc;AAC9e,KAAK,eAAe,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,aAAa,aAAa,aAAa,aAAa,cAAc,aAAa,cAAc,2BAA2B,4BAA4B,YAAY,SAAS,UAAU,aAAa;AACjf,IAAI,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,aAAa,aAAa,aAAa,aAAa,cAAc,aAAa,cAAc,2BAA2B,4BAA4B;AAC7e,SAAS,UAAU,aAAa,UAAU,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,aAAa,aAAa,aAAa,aAAa,cAAc,aAAa,cAAc,2BAA2B,4BAA4B,YAAY,SAAS;AAClf,IAAI,aAAa,UAAU,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,aAAa,cAAc,aAAa,aAAa,aAAa,aAAa,aAAa,cAAc,aAAa,cAAc,2BAA2B,4BAA4B,YAAY,SAAS,UAAU,aAAa,UAAU,aAAa,cAAc;AACze,cAAc,aAAa,cAAc,cAAc,eAAe,aAAa,cAAc,cAAc,eAAe,aAAa,aAAa,aAAa,aAAa,aAAa,cAAc,aAAa,cAAc,2BAA2B,4BAA4B,YAAY,SAAS,UAAU,aAAa,UAAU,aAAa,cAAc,aAAa,cAAc,aAAa,cAAc,cAAc,eAAe,aAAa,aAAa,cAAc;AAC3e,EAAE,aAAa,cAAc,aAAa,cAAc,2BAA2B,4BAA4B,YAAY,SAAS,UAAU,aAAa,UAAU,aAAa,cAAc,aAAa,cAAc,aAAa,aAAa,cAAc,cAAc,aAAa,cAAc,cAAc,eAAe,2BAA2B,4BAA4B,YAAY,SAAS,UAAU,aAAa,UAAU,aAAa,aAAa,aAAa,aAAa;AAC1e,EAAE,cAAc,cAAc,eAAe,2BAA2B,4BAA4B,YAAY,SAAS,SAAS,aAAa,SAAS,aAAa,cAAc,aAAa,cAAc,2BAA2B,4BAA4B,YAAY,SAAS,UAAU,aAAa,UAAU,2BAA2B,4BAA4B,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ;AACjf,EAAE,QAAQ,iBAAiB,4BAA4B,SAAS,gBAAgB,0CAA0C,kBAAkB,oBAAoB,SAAS,YAAY,cAAc,cAAc,aAAa,+BAA+B,6BAA6B,kBAAkB,QAAQ,2BAA2B,IAAI,KAAK,yBAAyB,MAAM,uDAAuD,SAAS,kBAAkB,YAAY,0BAA0B;AAC/e,EAAE,QAAQ,0BAA0B,KAAK,mBAAmB,kBAAkB,YAAY,IAAI,KAAK,0BAA0B,yBAAyB,mCAAmC,KAAK,mEAAmE,WAAW,MAAM,4BAA4B,aAAa,gBAAgB,YAAY,mBAAmB,kBAAkB,uCAAuC,kBAAkB,aAAa;AAClc,cAAc,wHAAwH,SAAS,KAAwB,KAAK,CAAM,CAAC,OAAO,QAAQ,iBAAiB,qGAAqG,+BAA+B,oCAAoC,yCAAyC,KAAK,kBAAkB,0BAA0B;AACrd,QAAQ,gBAAgB,mCAAmC,uBAAuB,SAAS,gCAAgC,6BAA6B,qBAAqB,0MAA0M,+BAA+B,6BAA6B,8BAA8B;AACjd,EAAE,KAAK,kCAAkC,0BAA0B,YAAY,cAAc,gBAAgB,QAAQ,iCAAiC,KAAK,MAAM,gCAAgC,yBAAyB,8BAA8B,MAAM,mBAAmB,2BAA2B,WAAW,iHAAiH,WAAW,6BAA6B;AAChd,0BAA0B,YAAY,cAAc,gBAAgB,UAAU,aAAa,QAAQ,KAAK,MAAM,iBAAiB,yBAAyB,8BAA8B,MAAM,mBAAmB,+EAA+E,UAAU,2BAA2B,uBAAuB,YAAY,cAAc,qBAAqB,qBAAqB,WAAW,gBAAgB,6BAA6B,kBAAkB,WAAW;AACnf,2BAA2B,KAAK,cAAc,0BAA0B,yBAAyB,KAAK,yCAAyC,eAAe,kBAAkB,0BAA0B,2CAA2C,aAAa;AAClQ,oYAAoY,mCAAmC,QAAQ,SAAS,sBAAsB,SAAS,kBAAkB,cAAc,KAAK;AAC5f,6CAA6C,oBAAoB,iDAAiD,KAAK,mBAAmB,gCAAgC,eAAe,SAAS,sBAAsB,SAAS,2BAA2B,OAAO,OAAO,KAAK,eAAe,UAAU,OAAO,+DAA+D,wBAAwB,eAAe,SAAS,sBAAsB,SAAS,yCAAyC;AACte,GAAG,qBAAqB,6BAA6B,gCAAgC,mBAAmB,gDAAgD,qCAAqC,SAAS,eAAe,WAAW,eAAe,MAAM,QAAQ,OAAO,6BAA6B,KAAK,IAAI,WAAW,KAAK,QAAQ,MAAM,WAAW,QAAQ,OAAO,iCAAiC,UAAU,sCAAsC,wBAAwB,aAAa,QAAQ;AAChe,IAAI,qBAAqB,oBAAoB,oBAAoB,YAAY,yBAAyB,0DAA0D,kCAAkC,8BAA8B,yBAAyB,0BAA0B,0BAA0B,sBAAsB,aAAa,0BAA0B,qEAAqE,wBAAwB,MAAM,gBAAgB,MAAM,cAAc;AACjf,oBAAoB,gBAAgB,cAAc,WAAW,2DAA2D,KAAK,kBAAkB,gDAAgD,qBAAqB,6CAA6C,sBAAsB,WAAW,qBAAqB,aAAa,4BAA4B,wBAAwB,MAAM,kBAAkB,OAAO,SAAS;AACha,mBAAmB,0BAA0B,YAAY,MAAM,gBAAgB,MAAM,cAAc,2DAA2D,cAAc,wDAAwD,kBAAkB,gBAAgB,gBAAgB,WAAW,2DAA2D,KAAK,kBAAkB,gDAAgD,oCAAoC,WAAW,qBAAqB;AACve,GAAG,qBAAqB,iBAAiB,4BAA4B,0BAA0B,gBAAgB,iBAAiB,6BAA6B,2BAA2B,iDAAiD,2BAA2B,oBAAoB,UAAU,0BAA0B,kBAAkB,gCAAgC,qBAAqB,2BAA2B,6BAA6B,WAAW,WAAW,8BAA8B;AAC/e,GAAG,QAAQ,QAAQ,cAAc,KAAK,kBAAkB,+BAA+B,WAAW,+BAA+B,UAAU,oBAAoB,KAAK,0BAA0B,QAAQ,IAAI,gBAAgB,eAAe,iBAAiB,0BAA0B,6BAA6B,uEAAuE,qBAAqB,iDAAiD,cAAc,0BAA0B;AACte,gBAAgB,IAAI,oBAAoB,oBAAoB,KAAK,kBAAkB,wBAAwB,MAAM,6CAA6C,iBAAiB,2BAA2B,2BAA2B,2BAA2B,0BAA0B,2BAA2B,uBAAuB,cAAc,0BAA0B,eAAe,mFAAmF,SAAS,WAAW,SAAS,YAAY;AAC/f,2BAA2B,aAAa,QAAQ,mCAAmC,sEAAsE,sCAAsC,aAAa,2BAA2B,uBAAuB,cAAc,0BAA0B,uDAAuD,aAAa,8DAA8D,aAAa,2BAA2B;AAChd,iBAAiB,+BAA+B,MAAM,oBAAoB,QAAQ,QAAQ,WAAW,KAAK,wBAAwB,eAAe,cAAc,yBAAyB,uBAAuB,KAAK,gBAAgB,uDAAuD,yBAAyB,UAAU,UAAU,cAAc,oDAAoD,SAAS,iBAAiB,6BAA6B,2CAA2C;AAC5e,+CAA+C,wBAAwB,cAAc,kBAAkB,aAAa,oBAAoB,YAAY,WAAW,aAAa,sBAAsB,6BAA6B,QAAQ,KAAK,KAAK,qDAAqD,2BAA2B,gBAAgB,QAAQ,uCAAuC,cAAc,SAAS,MAAM,yBAAyB,OAAO,gBAAgB,+BAA+B;AAC5e,mBAAmB,uBAAuB,MAAM,wBAAwB,uBAAuB,uBAAuB,cAAc,cAAc,mBAAmB,OAAO,SAAS,uEAAuE,UAAU,sFAAsF,UAAU,uCAAuC,kBAAkB,yBAAyB,yBAAyB,YAAY,gCAAgC;AAC7f,CAAC,2CAA2C,eAAe,0BAA0B,8BAA8B,0BAA0B,8BAA8B,2BAA2B,iBAAiB,sBAAsB,uCAAuC,SAAS,WAAW,4DAA4D,2BAA2B,eAAe,yCAAyC,KAAK,4BAA4B,UAAU,2BAA2B;AAC7f,KAAK,UAAU,uBAAuB,2BAA2B,WAAW,6CAA6C,eAAe,mBAAmB,gCAAgC,OAAO,EAAE,gBAAgB,qBAAqB,WAAW,kBAAkB,MAAM,EAAE,8BAA8B,OAAO,OAAO,IAAI,QAAQ,qBAAqB,WAAW,kBAAkB,MAAM,EAAE,8BAA8B,OAAO,OAAO,0DAA0D,OAAO;AAC7e,aAAa,2BAA2B,WAAW,UAAU,uBAAuB,2BAA2B,0CAA0C,mBAAmB,EAAE,gBAAgB,qBAAqB,WAAW,kBAAkB,MAAM,sBAAsB,IAAI,QAAQ,qBAAqB,WAAW,kBAAkB,MAAM,sBAAsB,4CAA4C,iBAAiB,iBAAiB,UAAU,2BAA2B,0BAA0B;AACnf,WAAW,0BAA0B,yBAAyB,0BAA0B,0BAA0B,oBAAoB,yBAAyB,uCAAuC,0BAA0B,UAAU,2BAA2B,0BAA0B,SAAS,kGAAkG,0BAA0B,4BAA4B,gCAAgC;AAChe,aAAa,0BAA0B,2BAA2B,iCAAiC,iCAAiC,4BAA4B,KAAK,KAAK,6BAA6B,UAAU,oBAAoB,OAAO,UAAU,kBAAkB,iBAAiB,0BAA0B,qDAAqD,8CAA8C,yBAAyB,0BAA0B;AACzc,0BAA0B,2BAA2B,WAAW,aAAa,0BAA0B,iDAAiD,6BAA6B,0BAA0B,kDAAkD,2BAA2B,2BAA2B,iDAAiD,6BAA6B,0BAA0B,kDAAkD,2BAA2B;AAC5e,YAAY,iDAAiD,oBAAoB,2BAA2B,yBAAyB,iDAAiD,kBAAkB,0BAA0B,0BAA0B,kDAAkD,kBAAkB,4BAA4B,0BAA0B,kDAAkD,kBAAkB,0BAA0B,0BAA0B;AAC9e,sCAAsC,kBAAkB,yBAAyB,OAAO,iCAAiC,0BAA0B,kBAAkB,gCAAgC,UAAU,2BAA2B,GAAG,sBAAsB,aAAa,eAAe,YAAY,gBAAgB,2BAA2B,kDAAkD,UAAU,eAAe,cAAc,OAAO,wBAAwB,kBAAkB;AAChe,EAAE,OAAO,gCAAgC,mCAAmC,IAAI,kBAAkB,WAAW,mCAAmC,KAAK,SAAS,0BAA0B,SAAS,WAAW,mDAAmD,QAAQ,YAAY,qDAAqD,2BAA2B,gBAAgB,kBAAkB,YAAY,gBAAgB,WAAW,KAAK,eAAe,SAAS,kBAAkB,sBAAsB;AACjf,8DAA8D,UAAU,gBAAgB,oBAAoB,YAAY,eAAe,2BAA2B,2CAA2C,4CAA4C,6BAA6B,iDAAiD,2DAA2D,2BAA2B,4DAA4D,0BAA0B;AACnf,kCAAkC,8BAA8B,aAAa,WAAW,8BAA8B,mBAAmB,4BAA4B,aAAa,SAAS,8BAA8B,UAAU,8BAA8B,aAAa,WAAW,sBAAsB,mBAAmB,4BAA4B,aAAa,SAAS,sBAAsB,UAAU,4BAA4B,aAAa,wBAAwB,2BAA2B;AAChf,IAAI,6BAA6B,0BAA0B,kBAAkB,WAAW,0DAA0D,2BAA2B,mBAAmB,YAAY,UAAU,qBAAqB,8CAA8C,6BAA6B,yBAAyB,QAAQ,gBAAgB,2BAA2B,gBAAgB,QAAQ,aAAa,EAAE,IAAI,QAAQ,aAAa,YAAY,OAAO;AACrd,SAAS,QAAQ,SAAS,IAAI,UAAU,2BAA2B,eAAe,mDAAmD,8BAA8B,kCAAkC,+BAA+B,gBAAgB,wBAAwB,OAAO,YAAY,WAAW,0BAA0B,OAAO,uBAAuB,cAAc,iBAAiB,KAAK,KAAK,aAAa,QAAQ,KAAK,KAAK,aAAa,yBAAyB,oBAAoB;AACpe,iDAAiD,KAAK,UAAU,2BAA2B,kBAAkB,0BAA0B,2BAA2B,YAAY,WAAW,UAAU,SAAS,mBAAmB,cAAc,cAAc,oBAAoB,SAAS,OAAO,QAAQ,OAAO,+BAA+B,qBAAqB,sBAAsB,oFAAoF;AAC5c,oCAAoC,eAAe,wBAAwB,UAAU,yMAAyM,2BAA2B,IAAI,uBAAuB,yBAAyB,eAAe,kBAAkB,8BAA8B,kBAAkB,mBAAmB,oBAAoB;AACre,cAAc,WAAW,qDAAqD,eAAe,QAAQ,IAAI,KAAK,mCAAmC,kBAAkB,YAAY,UAAU,SAAS,mBAAmB,gBAAgB,0CAA0C,iBAAiB,SAAS,mBAAmB,SAAS,KAAK,kBAAkB,WAAW,QAAQ,UAAU,UAAU,kBAAkB,qBAAqB,6BAA6B,UAAU,SAAS,YAAY,YAAY,WAAW,KAAK;AAClgB,WAAW,8CAA8C,OAAO,OAAO,UAAU,mBAAmB,cAAc,YAAY,YAAY,gBAAgB,qBAAqB,EAAE,8BAA8B,cAAc,cAAc,qBAAqB,KAAK,iBAAiB,2BAA2B,aAAa,wDAAwD,aAAa,mBAAmB,mBAAmB,OAAO,OAAO,UAAU,kBAAkB,kBAAkB,SAAS,mBAAmB;AACjgB,EAAE,eAAe,OAAO,kBAAkB,qCAAqC,eAAe,SAAS,2CAA2C,WAAW,KAAK,sBAAsB,8FAA8F,KAAK,8EAA8E,WAAW,sCAAsC,aAAa,WAAW,gBAAgB,UAAU,qBAAqB,KAAK,WAAW;AACjf,GAAG,gBAAgB,WAAW,wGAAwG,UAAU,iBAAiB,oCAAoC,WAAW,UAAU,WAAW,YAAY,kBAAkB,iBAAiB,aAAa,UAAU,mBAAmB,sBAAsB,mBAAmB,gBAAgB,uBAAuB,oBAAoB,yBAAyB,sBAAsB,SAAS,mBAAmB;AAC7e,GAAG,gDAAgD,SAAS,UAAU,mBAAmB,qBAAqB,qBAAqB,kCAAkC,oBAAoB,KAAK,uBAAuB,gCAAgC,qBAAqB,iBAAiB,qCAAqC,gBAAgB,+BAA+B,gBAAgB,uDAAuD,gBAAgB,qCAAqC,mBAAmB,aAAa;AAC3gB,KAAK,UAAU,0BAA0B,4BAA4B,4BAA4B,8BAA8B,cAAc,iBAAiB,kBAAkB,QAAQ,eAAe,OAAO,iCAAiC,WAAW,gEAAgE,kBAAkB;AAC5U,eAAe,WAAW,wBAAwB,aAAa,+BAA+B,uBAAuB,uBAAuB,mBAAmB,0BAA0B,0CAA0C,mBAAmB,SAAS,YAAY,IAAI,WAAW,MAAM,oBAAoB,QAAQ,UAAU,aAAa,SAAS,SAAS,SAAS,SAAS,kBAAkB,kBAAkB,iBAAiB,aAAa;AACzb,mDAAmD,UAAU,aAAa,UAAU,SAAS,mBAAmB,cAAc,MAAM,QAAQ,KAAK,MAAM,mCAAmC,mCAAmC,mCAAmC,mCAAmC,mCAAmC,mCAAmC,mCAAmC,mCAAmC,mCAAmC;AACld,sBAAsB,sBAAsB,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,kBAAkB,kBAAkB,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,kBAAkB,kBAAkB,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,kBAAkB,kBAAkB,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS;AAC/e,EAAE,kBAAkB,kBAAkB,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,OAAO,OAAO,0BAA0B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,2BAA2B,2BAA2B,wBAAwB,wBAAwB,uBAAuB,uBAAuB,2BAA2B,2BAA2B;AAClf,qBAAqB,2BAA2B,0BAA0B,2BAA2B,wBAAwB,yBAAyB,0BAA0B,0BAA0B,uBAAuB,uBAAuB,2BAA2B,4BAA4B,2BAA2B,0BAA0B,oBAAoB,oBAAoB,2BAA2B,0BAA0B,2BAA2B;AAC5d,uBAAuB,uBAAuB,2BAA2B,0BAA0B,yBAAyB,wBAAwB,4BAA4B,2BAA2B,2BAA2B,0BAA0B,2BAA2B,0BAA0B,uBAAuB,uBAAuB,YAAY,YAAY,cAAc,aAAa,cAAc,aAAa,cAAc,aAAa,eAAe,cAAc;AACze,YAAY,cAAc,aAAa,eAAe,aAAa,aAAa,cAAc,eAAe,aAAa,YAAY,YAAY,cAAc,aAAa,eAAe,aAAa,cAAc,cAAc,cAAc,cAAc,YAAY,YAAY,cAAc,aAAa,cAAc,aAAa,eAAe,cAAc,aAAa,eAAe,YAAY,YAAY,eAAe,aAAa,aAAa,aAAa,eAAe,aAAa;AAClf,QAAQ,eAAe,WAAW,cAAc,QAAQ,saAAsa,UAAU,eAAe;AACvf,GAAG,QAAQ,iDAAiD,6BAA6B,IAAI,yCAAyC,wBAAwB,SAAS,UAAU,iBAAiB,OAAO,oBAAoB,aAAa,uCAAuC,IAAI,EAAE,yBAAyB,MAAM,WAAW,+BAA+B,SAAS,4BAA4B,aAAa,SAAS;AAC3Z,6NAA6N,IAAI,SAAS,MAAM,OAAO,QAAQ,IAAI,eAAe,KAAK,KAAK,SAAS,IAAI,gBAAgB,2BAA2B,MAAM,WAAW,mBAAmB,QAAQ,IAAI,eAAe,KAAK,KAAK,QAAQ,IAAI,EAAE,QAAQ,SAAS;AAC5b,gDAAgD,cAAc,cAAc,OAAO,mBAAmB,SAAS,UAAU,UAAU,UAAU,SAAS,mBAAmB,gBAAgB,YAAY,qBAAqB,uCAAuC,+BAA+B,+BAA+B,+BAA+B,0BAA0B,8BAA8B,iBAAiB,iBAAiB,iBAAiB,iBAAiB;AAC1d,2BAA2B,mCAAmC,gBAAgB,aAAa,YAAY,YAAY,2CAA2C,6BAA6B,OAAO,SAAS,wDAAwD,KAAK,iBAAiB,WAAW,WAAW,yBAAyB,KAAK,kBAAkB,UAAU,yBAAyB,6BAA6B,IAAI,KAAK,QAAQ,WAAW;AAC3b,WAAW,eAAe,iCAAiC,8CAA8C,IAAI,KAAK,qBAAqB,UAAU,SAAS,UAAU,KAAK,MAAM,cAAc,8HAA8H,KAAK,4BAA4B;AAC5V,gDAAgD,6CAA6C,0BAA0B,cAAc,cAAc,QAAQ,IAAI,mEAAmE,yBAAyB,UAAU,QAAQ,KAAK,KAAK,QAAQ,KAAK,EAAE,KAAK,QAAQ,IAAI,oCAAoC,YAAY,IAAI,IAAI,UAAU,UAAU,aAAa,QAAQ,IAAI;AAC5Z,UAAU,QAAQ,IAAI,cAAc,mBAAmB,OAAO,0BAA0B,4BAA4B,2BAA2B,sDAAsD,2EAA2E,iCAAiC,+BAA+B,2BAA2B,YAAY,OAAO,yBAAyB,eAAe,iBAAiB,iBAAiB,WAAW,2BAA2B;AAC9e,eAAe,qDAAqD,6BAA6B,oCAAoC,4BAA4B,IAAI,MAAM,YAAY,IAAI,aAAa,UAAU,OAAO,aAAa,2BAA2B,oCAAoC,uDAAuD,IAAI,uBAAuB,OAAO,WAAW,SAAS,mBAAmB,cAAc,yBAAyB,oBAAoB,oBAAoB;AACpf,OAAO,+BAA+B,kDAAkD,QAAQ,sBAAsB,OAAO,eAAe,2BAA2B,6CAA6C,eAAe,2BAA2B,sCAAsC,EAAE,UAAU,EAAE,eAAe;AACjU,mKAAmK,2EAA2E,EAAE,2EAA2E,mJAAmJ,EAAE,EAAE,SAAS,mBAAmB;AAC9e,UAAU,UAAU,MAAM,SAAS,UAAU,aAAa,SAAS,mBAAmB,cAAc,4BAA4B,cAAc,iBAAiB,WAAW,4BAA4B,SAAS,OAAO,gBAAgB,qCAAqC,eAAe,SAAS,wBAAwB,QAAQ,WAAW,gBAAgB,SAAS,8EAA8E,WAAW,sCAAsC,aAAa;AACnf,SAAS,KAAK,6BAA6B,OAAO,wBAAwB,WAAW,OAAO,OAAO,uBAAuB,wBAAwB,SAAS,mBAAmB,QAAQ,WAAW,kBAAkB,qBAAqB,iBAAiB,qBAAqB,oBAAoB,kBAAkB,iBAAiB,+BAA+B,iBAAiB,+BAA+B,iBAAiB,6BAA6B,iBAAiB,+BAA+B,SAAS;AAC3f,iBAAiB,aAAa,qCAAqC,aAAa,gGAAgG,SAAS,kBAAkB;AAC3M,8eAA8e;AAC9e,GAAG,QAAQ,SAAS,SAAS,QAAQ,6BAA6B,sBAAsB,KAAK,gBAAgB,KAAK,WAAW,gDAAgD,YAAY,YAAY,4EAA4E,4BAA4B,QAAQ,WAAW,KAAK,2DAA2D,IAAI,IAAI,IAAI,SAAS,IAAI,IAAI,IAAI,SAAS,yBAAyB,yBAAyB;AAC5d,yBAAyB,yBAAyB,yBAAyB,yBAAyB,0BAA0B,2BAA2B,iDAAiD,SAAS,mBAAmB,cAAc,uBAAuB,mCAAmC,mCAAmC,qBAAqB,6BAA6B,0CAA0C,mBAAmB,iBAAiB,iBAAiB,oBAAoB;AACtf,YAAY,yPAAyP,oBAAoB,6BAA6B,sIAAsI,8CAA8C;AAC1e,kCAAkC,8CAA8C,+BAA+B,SAAS,OAAO,oCAAoC,OAAO,IAAI,2BAA2B,8CAA8C,+CAA+C,oEAAoE,6BAA6B;AACvY,MAAM,4BAA4B,OAAO,iCAAiC,eAAe,OAAO,oBAAoB,2BAA2B,+EAA+E,WAAW,eAAe,WAAW,WAAW,kBAAkB,eAAe,OAAO,YAAY,6BAA6B,cAAc,yBAAyB,mDAAmD;AACzb,aAAa,yBAAyB,oBAAoB,2BAA2B,gBAAgB,UAAU,MAAM,kBAAkB,4BAA4B,4BAA4B,6BAA6B,gCAAgC,WAAW,KAAK,oCAAoC,8BAA8B,8BAA8B,SAAS,WAAW,YAAY,cAAc,0BAA0B,QAAQ,MAAM,wBAAwB,UAAU,UAAU;AAC9e,gBAAgB,0BAA0B,6BAA6B,sBAAsB,0BAA0B,kBAAkB,aAAa,2BAA2B,wDAAwD,MAAM,+BAA+B,kCAAkC,SAAS,KAAK,kBAAkB,yBAAyB,SAAS,+BAA+B,WAAW,gCAAgC,oBAAoB,cAAc;AAC9d,uCAAuC,uBAAuB,kBAAkB,OAAO,KAAK,kBAAkB,yCAAyC,SAAS,uCAAuC,UAAU,yBAAyB,eAAe,4BAA4B,mBAAmB,mBAAmB,+BAA+B,sEAAsE,qBAAqB,yCAAyC;AAC9d,8BAA8B,0BAA0B,0BAA0B,oBAAoB,0BAA0B,oBAAoB,0BAA0B,cAAc,qHAAqH,+BAA+B,WAAW,QAAQ,8DAA8D,2BAA2B;AAC5b,sBAAsB,0BAA0B,sBAAsB,uCAAuC,cAAc,SAAS,kBAAkB,cAAc,KAAK,QAAQ,yBAAyB,SAAS,+BAA+B,UAAU,0BAA0B,sFAAsF,UAAU,8BAA8B,0BAA0B,0BAA0B,2CAA2C;AACnf,kCAAkC,mBAAmB,0BAA0B,yBAAyB,gDAAgD,4BAA4B,qBAAqB,qBAAqB,oDAAoD,qBAAqB,qBAAqB,UAAU,UAAU,uEAAuE,qBAAqB,SAAS,uBAAuB,wBAAwB;AACpe,4BAA4B,2BAA2B,0BAA0B,qBAAqB,8CAA8C,qBAAqB,UAAU,UAAU,uEAAuE,YAAY,SAAS,SAAS,uBAAuB,wBAAwB,cAAc,4BAA4B,2BAA2B,+BAA+B,uBAAuB,iCAAiC;AAC7e,SAAS,IAAI,aAAa,SAAS,eAAe,6BAA6B,SAAS,kCAAkC,QAAQ,IAAI,KAAK,4BAA4B,wBAAwB,SAAS,kBAAkB,SAAS,SAAS,cAAc,SAAS,kBAAkB,IAAI,iCAAiC,0BAA0B,gFAAgF,0BAA0B,YAAY,iBAAiB,iBAAiB;AAC5e,4BAA4B,SAAS,cAAc,+BAA+B,SAAS,SAAS,IAAI,mBAAmB,mBAAmB,0LAA0L,4BAA4B,yBAAyB,wBAAwB,SAAS,mBAAmB,kBAAkB,4CAA4C;AAC/e,EAAE,aAAa,eAAe,qBAAqB,kBAAkB,kBAAkB,2BAA2B,sDAAsD,oBAAoB,mBAAmB,SAAS,cAAc,QAAQ,WAAW,aAAa,gCAAgC,QAAQ,WAAW,cAAc,iCAAiC,iCAAiC,oBAAoB,aAAa,+BAA+B,iCAAiC;AAC1e,SAAS,mBAAmB,cAAc,wCAAwC,wEAAwE,uBAAuB,QAAQ,EAAE,yBAAyB,oBAAoB,qBAAqB,oBAAoB,iBAAiB,2BAA2B,+BAA+B,yDAAyD,6BAA6B,uBAAuB,6BAA6B;AACte,WAAW,iBAAiB,4CAA4C,mCAAmC,kCAAkC,QAAQ,EAAE,eAAe,uBAAuB,0BAA0B,gBAAgB,cAAc,SAAS,oDAAoD,EAAE,oCAAoC,KAAK,kDAAkD,gBAAgB,8BAA8B,kBAAkB,WAAW,aAAa;AACve,6KAA6K,cAAc,MAAM,+BAA+B,wDAAwD,kBAAkB,wBAAwB,MAAM,iBAAiB,MAAM,iGAAiG;AAChc,GAAG,YAAY,qBAAqB,cAAc,yBAAyB,SAAS,mBAAmB,cAAc,wCAAwC,iBAAiB,qBAAqB,2BAA2B,oCAAoC,uDAAuD,wBAAwB,0EAA0E,eAAe,yBAAyB,+BAA+B;AACle,yBAAyB,wBAAwB,QAAQ,gBAAgB,6BAA6B,WAAW,UAAU,yBAAyB,0BAA0B,oCAAoC,2BAA2B,2CAA2C,mBAAmB,mBAAmB,yCAAyC,+GAA+G,2BAA2B;AACjf,0CAA0C,wBAAwB,QAAQ,QAAQ,WAAW,kCAAkC,SAAS,WAAW,6DAA6D,eAAe,WAAW,UAAU,sBAAsB,SAAS,mBAAmB,gBAAgB,UAAU,oBAAoB,uBAAuB,yBAAyB,WAAW,KAAK,qBAAqB,iCAAiC,SAAS,GAAG,0BAA0B;AAChf,WAAW,kCAAkC,uCAAuC,sCAAsC,6BAA6B,sBAAsB,kCAAkC,iCAAiC,iCAAiC,SAAS,mBAAmB,cAAc,2BAA2B,wCAAwC,qBAAqB,uBAAuB,wCAAwC,yBAAyB,SAAS;AACpf,iBAAiB,SAAS,aAAa,cAAc,mCAAmC,KAAK,yDAAyD,SAAS,4DAA4D,eAAe,8EAA8E,yBAAyB,GAAG,oBAAoB,2BAA2B,6BAA6B,OAAO,4BAA4B,oBAAoB,kBAAkB;AACze,uCAAuC,MAAM,EAAE,kGAAkG,iFAAiF,YAAY,iBAAiB,iBAAiB,iBAAiB,0BAA0B,kBAAkB,+DAA+D,GAAG,gDAAgD;AAC/b,6BAA6B,OAAO,8BAA8B,mBAAmB,SAAS,IAAI,8BAA8B,OAAO,6BAA6B,OAAO,0BAA0B,OAAO,4BAA4B,OAAO,qBAAqB;;;;;;;;AC1GpQ,OAAO,kBAAkB,GAAG,mBAAO,CAAC,GAAS;AAC7C,UAAU,yBAAgC;AAC1C,aAAa,mBAAO,CAAC,GAAiB;;AAEtC;AACA;AACA;AACA,wBAAwB;AACxB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;;;;;;;;AC/BA,OAAO,oBAAoB,GAAG,mBAAO,CAAC,GAAS;AAC/C,UAAU,yBAAgC;AAC1C,aAAa,mBAAO,CAAC,GAAiB;AACtC,aAAa,mBAAO,CAAC,GAAsB;AAC3C,cAAc,mBAAO,CAAC,GAAY;AAClC,aAAa,mBAAO,CAAC,GAAW;;AAEhC;;AAEA;AACA;AACA;;AAEA,2BAA2B;AAC3B,oBAAoB;AACpB,0BAA0B;;AAE1B,wBAAwB;AACxB,wBAAwB;AACxB,sBAAsB;AACtB,yBAAyB;AACzB,0BAA0B;AAC1B,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA,wBAAwB;AACxB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,0E;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,kE;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,yBAAyB;AACrE;AACA,uCAAuC,mEAAmE;AAC1G,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS,wBAAwB;AAC9D,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACjYA;AACA,oBAAoB,wGAA6B;AACjD;;;;;;;;ACFA;AACA,oCAAoC,uBAAuB;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC5CA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,qCAAqC,iEAAiE;WACtG;WACA;WACA;WACA;WACA;WACA,E;;;;;WCzBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF,E;;;;;WCRA;WACA;WACA;WACA;WACA,E;;;;;WCJA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA;WACA,CAAC,I;;;;;WCPD,wF;;;;;WCAA;WACA;WACA;WACA;WACA,sBAAsB,4BAA4B,QAAQ;WAC1D;WACA;WACA;WACA,gBAAgB,oBAAoB;WACpC;WACA,kGAAkG,YAAY,OAAO;WACrH;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,kEAAkE,kCAAkC;WACpG;WACA;WACA;WACA,E;;;;;WCzCA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,kC;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA,gCAAgC;;WAEhC;WACA;WACA;WACA,IAAI;WACJ,cAAc;WACd;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,KAAK;WACL;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,oBAAoB;WAC1B;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;WACA;WACA,4G;;;;;;;ACnFA,yCAA2C;;AAE3C,OAAO,kBAAkB,GAAG,mBAAO,CAAC,GAAS;AAC7C,UAAU,yBAAgC;;AAE1C,gBAAgB,mBAAO,CAAC,GAAsB;AAC9C,gBAAgB,mBAAO,CAAC,GAAc;AACtC,gBAAgB,mBAAO,CAAC,GAAc;AACtC,yBAAyB,mBAAO,CAAC,GAAuB;;AAExD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,2CAA2C;AACjF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,yBAAyB,WAAW;AACpC;AACA;AACA;;AAEA","file":"index.js","sourcesContent":["var lib = require(\"./lib.js\");\nvar sig = require(\"nano-ethereum-signer\");\nvar WebSocket = require(\"isomorphic-ws\");\n\nmodule.exports = function client({url = \"ws://localhost:7171\", key = \"0x0000000000000000000000000000000000000000000000000000000000000001\"} = {}) {\n  var ws = new WebSocket(url);\n  var Posts = {};\n  var watching = {};\n\n  // Waits ws to be ready and then sends buffer to server\n  function ws_send(buffer) {\n    if (ws.readyState === 1) {\n      ws.send(buffer);\n    } else {\n      setTimeout(() => ws_send(buffer), 20);\n    }\n  }\n\n  var on_init_callback = null;\n  var on_post_callback = null;\n\n  // Sets the on_init callback\n  function on_init(callback) {\n    on_init_callback = callback;\n  }\n\n  // Sets the on_post callback\n  function on_post(callback) {\n    on_post_callback = callback;\n  }\n\n  // Sends a signed post to a room on the server\n  function send_post(post_room, post_data, priv_key = key) {\n    var priv_key = lib.check_hex(256, priv_key);\n    var post_room = lib.check_hex(48, post_room);\n    var post_data = lib.check_hex(256, post_data);\n    var post_hash = sig.keccak(lib.hexs_to_bytes([post_room, post_data]));\n    var post_sign = sig.signMessage(post_hash, priv_key);\n\n    var msge_buff = lib.hexs_to_bytes([\n      lib.u8_to_hex(lib.POST),\n      post_room,\n      post_data,\n      post_sign,\n    ]);\n    ws_send(msge_buff);\n  };\n\n  // Starts watching a room\n  function watch_room(room_name) {\n    if (!watching[room_name]) {\n      watching[room_name] = true;\n      var room_name = lib.check_hex(48, room_name);\n      var msge_buff = lib.hexs_to_bytes([\n        lib.u8_to_hex(lib.WATCH),\n        room_name,\n      ]);\n      Posts[room_name] = [];\n      ws_send(msge_buff); \n    }\n  };\n\n  // Stops watching a room\n  function unwatch_room(room_name) {\n    if (watching[room_name]) {\n      watching[room_name] = false;\n      var room_name = lib.check_hex(48, room_name);\n      var msge_buff = lib.hexs_to_bytes([\n        lib.u8_to_hex(lib.UNWATCH),\n        room_name,\n      ]);\n      ws_send(msge_buff);\n    }\n  };\n\n  ws.binaryType = \"arraybuffer\";\n\n  ws.onopen = function() {\n    if (on_init_callback) {\n      on_init_callback();\n    }\n  };\n\n  ws.onmessage = (msge) => {\n    var msge = new Uint8Array(msge.data);\n    if (msge[0] === lib.SHOW) {\n      var room = lib.bytes_to_hex(msge.slice(1, 7));\n      var time = lib.bytes_to_hex(msge.slice(7, 13));\n      var addr = lib.bytes_to_hex(msge.slice(13, 33));\n      var data = lib.bytes_to_hex(msge.slice(33, 65));\n      Posts[room].push({time, addr, data});\n      if (on_post_callback) {\n        on_post_callback({room, time, addr, data}, Posts);\n      }\n    };\n  };\n\n  return {\n    on_init,\n    on_post,\n    send_post,\n    watch_room,\n    unwatch_room,\n    lib,\n  };\n};\n\n","const WATCH = 0;\nconst UNWATCH = 1;\nconst POST = 2;\nconst SHOW = 3;\n\n// type RoomID    = U48\n// type PostID    = U48\n// type Time      = U48\n// type Address   = U160\n// type PostData  = U304\n// type Signature = U520\n//\n// type Method\n//   = WATCH(rmid: U48)                                   -- value = 00\n//   | UNWATCH(rmid: U48)                                 -- value = 01\n//   | POST(rmid: U48, data: U304, sign: U520)            -- value = 10\n//   | SHOW(rmid: U48, time: U48, addr: U160, data: U304) -- value = 11\n\nfunction hex_to_bytes(hex) {\n  var arr = [];\n  for (var i = 0; i < (hex.length-2)/2; ++i) {\n    arr.push((parseInt(hex[2+i*2+0],16)<<4)|parseInt(hex[2+i*2+1],16));\n  };\n  return new Uint8Array(arr);\n};\n\nconst hex_char = \"0123456789abcdef\".split(\"\");\nfunction bytes_to_hex(buf) {\n  var hex = \"0x\";\n  for (var i = 0; i < buf.length; ++i) {\n    hex += hex_char[buf[i]>>>4] + hex_char[buf[i]&0xF];\n  };\n  return hex;\n};\n\nfunction hex_join(arr) {\n  var res = \"0x\";\n  for (var i = 0; i < arr.length; ++i) {\n    res += arr[i].slice(2);\n  }\n  return res;\n};\n\nfunction hexs_to_bytes(arr) {\n  return hex_to_bytes(hex_join(arr));\n};\n\nfunction u8_to_hex(num) {\n  return \"0x\" + (\"00\" + num.toString(16)).slice(-2);\n};\n\nfunction hex_to_u8(hex) {\n  return parseInt(hex.slice(2), 16);\n};\n\nfunction hex_to_u48(hex) {\n  return parseInt(hex.slice(-48), 16);\n};\n\nfunction u48_to_hex(num) {\n  var hex = \"0x\";\n  for (var i = 0; i < 12; ++i) {\n    hex += hex_char[(num / (2**((12-i-1)*4))) & 0xF];\n  };\n  return hex;\n};\n\nfunction check_hex(bits, hex) {\n  if (typeof hex !== \"string\" || !/^0x[a-fA-F0-9]*$/.test(hex)) {\n    return null;\n  };\n  while ((hex.length - 2) * 4 < bits) {\n    hex = \"0x0\" + hex.slice(2);\n  };\n  if ((hex.length - 2) * 4 > bits) {\n    hex = hex.slice(0, Math.floor(bits / 4) + 2);\n  }\n  return hex;\n};\n\nvar utf8_encoder = new TextEncoder(\"utf-8\");\nfunction string_to_bytes(str) {\n  return utf8_encoder.encode(str);\n};\n\nvar utf8_decoder = new TextDecoder(\"utf-8\");\nfunction bytes_to_string(buf) {\n  return utf8_decoder.decode(buf);\n};\n\nfunction string_to_hex(str) {\n  return bytes_to_hex(string_to_bytes(str));\n};\n\nfunction hex_to_string(hex) {\n  return bytes_to_string(hex_to_bytes(hex));\n};\n\nmodule.exports = {\n  WATCH,\n  UNWATCH,\n  POST,\n  SHOW,\n  hex_to_bytes,\n  bytes_to_hex,\n  hexs_to_bytes,\n  hex_join,\n  u8_to_hex,\n  hex_to_u8,\n  u48_to_hex,\n  hex_to_u48,\n  string_to_hex,\n  hex_to_string,\n  check_hex,\n};\n","export default __webpack_public_path__ + \"237db229f1e6a224797029452b2c75f0.png\";","import { getFlagsForElementVnode, createFragment, createVNode, createComponentVNode, Fragment } from 'inferno';\n\nvar isArray = Array.isArray;\nfunction isStringOrNumber(o) {\n    var type = typeof o;\n    return type === 'string' || type === 'number';\n}\nfunction isString(o) {\n    return typeof o === 'string';\n}\nfunction isUndefined(o) {\n    return o === void 0;\n}\n\nvar classIdSplit = /([.#]?[a-zA-Z0-9_:-]+)/;\nvar notClassId = /^\\.|#/;\nfunction parseTag(tag, props) {\n    if (!tag) {\n        return 'div';\n    }\n    if (tag === Fragment) {\n        return tag;\n    }\n    var noId = props && isUndefined(props.id);\n    var tagParts = tag.split(classIdSplit);\n    var tagName = null;\n    if (notClassId.test(tagParts[1])) {\n        tagName = 'div';\n    }\n    var classes;\n    for (var i = 0, len = tagParts.length; i < len; ++i) {\n        var part = tagParts[i];\n        if (!part) {\n            continue;\n        }\n        var type = part.charAt(0);\n        if (!tagName) {\n            tagName = part;\n        }\n        else if (type === '.') {\n            if (classes === void 0) {\n                classes = [];\n            }\n            classes.push(part.substring(1, part.length));\n        }\n        else if (type === '#' && noId) {\n            props.id = part.substring(1, part.length);\n        }\n    }\n    if (classes) {\n        if (props.className) {\n            classes.push(props.className);\n        }\n        props.className = classes.join(' ');\n    }\n    return tagName || 'div';\n}\nfunction isChildren(x) {\n    return isStringOrNumber(x) || (x && isArray(x));\n}\n/**\n * Creates virtual node\n * @param {string|VNode|Function} _tag Name for virtual node\n * @param {object=} _props Additional properties for virtual node\n * @param {string|number|VNode|Array<string|number|VNode>|null=} _children Optional children for virtual node\n * @returns {VNode} returns new virtual node\n */\nfunction h(_tag, _props, _children) {\n    // If a child array or text node are passed as the second argument, shift them\n    if (!_children && isChildren(_props)) {\n        _children = _props;\n        _props = {};\n    }\n    var isElement = isString(_tag);\n    _props = _props || {};\n    var tag = isElement ? parseTag(_tag, _props) : _tag;\n    var newProps = {};\n    var key = null;\n    var ref = null;\n    var children = null;\n    var className = null;\n    for (var prop in _props) {\n        if (isElement && (prop === 'className' || prop === 'class')) {\n            className = _props[prop];\n        }\n        else if (prop === 'key') {\n            key = _props[prop];\n        }\n        else if (prop === 'ref') {\n            ref = _props[prop];\n        }\n        else if (prop === 'hooks') {\n            ref = _props[prop];\n        }\n        else if (prop === 'children') {\n            children = _props[prop];\n        }\n        else if (!isElement && prop.substr(0, 11) === 'onComponent') {\n            if (!ref) {\n                ref = {};\n            }\n            ref[prop] = _props[prop];\n        }\n        else {\n            newProps[prop] = _props[prop];\n        }\n    }\n    if (isElement) {\n        var flags = getFlagsForElementVnode(tag);\n        if (flags & 8192 /* Fragment */) {\n            return createFragment(_children || children, 0 /* UnknownChildren */, key);\n        }\n        if (newProps.contenteditable !== void 0) {\n            flags |= 4096 /* ContentEditable */;\n        }\n        return createVNode(flags, tag, className, _children || children, 0 /* UnknownChildren */, newProps, key, ref);\n    }\n    if (children || _children) {\n        newProps.children = children || _children;\n    }\n    return createComponentVNode(2 /* ComponentUnknown */, tag, newProps, key, ref);\n}\n\nexport { h };\n","var isArray = Array.isArray;\nfunction isStringOrNumber(o) {\n    var type = typeof o;\n    return type === 'string' || type === 'number';\n}\nfunction isNullOrUndef(o) {\n    return o === void 0 || o === null;\n}\nfunction isInvalid(o) {\n    return o === null || o === false || o === true || o === void 0;\n}\nfunction isFunction(o) {\n    return typeof o === 'function';\n}\nfunction isString(o) {\n    return typeof o === 'string';\n}\nfunction isNumber(o) {\n    return typeof o === 'number';\n}\nfunction isNull(o) {\n    return o === null;\n}\nfunction isUndefined(o) {\n    return o === void 0;\n}\nfunction combineFrom(first, second) {\n    var out = {};\n    if (first) {\n        for (var key in first) {\n            out[key] = first[key];\n        }\n    }\n    if (second) {\n        for (var key$1 in second) {\n            out[key$1] = second[key$1];\n        }\n    }\n    return out;\n}\n\n/**\n * Links given data to event as first parameter\n * @param {*} data data to be linked, it will be available in function as first parameter\n * @param {Function} event Function to be called when event occurs\n * @returns {{data: *, event: Function}}\n */\nfunction linkEvent(data, event) {\n    if (isFunction(event)) {\n        return { data: data, event: event };\n    }\n    return null; // Return null when event is invalid, to avoid creating unnecessary event handlers\n}\n// object.event should always be function, otherwise its badly created object.\nfunction isLinkEventObject(o) {\n    return !isNull(o) && typeof o === 'object';\n}\n\n// We need EMPTY_OBJ defined in one place.\n// Its used for comparison so we cant inline it into shared\nvar EMPTY_OBJ = {};\nvar Fragment = '$F';\nfunction normalizeEventName(name) {\n    return name.substr(2).toLowerCase();\n}\nfunction appendChild(parentDOM, dom) {\n    parentDOM.appendChild(dom);\n}\nfunction insertOrAppend(parentDOM, newNode, nextNode) {\n    if (isNull(nextNode)) {\n        appendChild(parentDOM, newNode);\n    }\n    else {\n        parentDOM.insertBefore(newNode, nextNode);\n    }\n}\nfunction documentCreateElement(tag, isSVG) {\n    if (isSVG) {\n        return document.createElementNS('http://www.w3.org/2000/svg', tag);\n    }\n    return document.createElement(tag);\n}\nfunction replaceChild(parentDOM, newDom, lastDom) {\n    parentDOM.replaceChild(newDom, lastDom);\n}\nfunction removeChild(parentDOM, childNode) {\n    parentDOM.removeChild(childNode);\n}\nfunction callAll(arrayFn) {\n    for (var i = 0; i < arrayFn.length; i++) {\n        arrayFn[i]();\n    }\n}\nfunction findChildVNode(vNode, startEdge, flags) {\n    var children = vNode.children;\n    if (flags & 4 /* ComponentClass */) {\n        return children.$LI;\n    }\n    if (flags & 8192 /* Fragment */) {\n        return vNode.childFlags === 2 /* HasVNodeChildren */ ? children : children[startEdge ? 0 : children.length - 1];\n    }\n    return children;\n}\nfunction findDOMfromVNode(vNode, startEdge) {\n    var flags;\n    while (vNode) {\n        flags = vNode.flags;\n        if (flags & 2033 /* DOMRef */) {\n            return vNode.dom;\n        }\n        vNode = findChildVNode(vNode, startEdge, flags);\n    }\n    return null;\n}\nfunction removeVNodeDOM(vNode, parentDOM) {\n    do {\n        var flags = vNode.flags;\n        if (flags & 2033 /* DOMRef */) {\n            removeChild(parentDOM, vNode.dom);\n            return;\n        }\n        var children = vNode.children;\n        if (flags & 4 /* ComponentClass */) {\n            vNode = children.$LI;\n        }\n        if (flags & 8 /* ComponentFunction */) {\n            vNode = children;\n        }\n        if (flags & 8192 /* Fragment */) {\n            if (vNode.childFlags === 2 /* HasVNodeChildren */) {\n                vNode = children;\n            }\n            else {\n                for (var i = 0, len = children.length; i < len; ++i) {\n                    removeVNodeDOM(children[i], parentDOM);\n                }\n                return;\n            }\n        }\n    } while (vNode);\n}\nfunction moveVNodeDOM(vNode, parentDOM, nextNode) {\n    do {\n        var flags = vNode.flags;\n        if (flags & 2033 /* DOMRef */) {\n            insertOrAppend(parentDOM, vNode.dom, nextNode);\n            return;\n        }\n        var children = vNode.children;\n        if (flags & 4 /* ComponentClass */) {\n            vNode = children.$LI;\n        }\n        if (flags & 8 /* ComponentFunction */) {\n            vNode = children;\n        }\n        if (flags & 8192 /* Fragment */) {\n            if (vNode.childFlags === 2 /* HasVNodeChildren */) {\n                vNode = children;\n            }\n            else {\n                for (var i = 0, len = children.length; i < len; ++i) {\n                    moveVNodeDOM(children[i], parentDOM, nextNode);\n                }\n                return;\n            }\n        }\n    } while (vNode);\n}\nfunction createDerivedState(instance, nextProps, state) {\n    if (instance.constructor.getDerivedStateFromProps) {\n        return combineFrom(state, instance.constructor.getDerivedStateFromProps(nextProps, state));\n    }\n    return state;\n}\nvar renderCheck = {\n    v: false\n};\nvar options = {\n    componentComparator: null,\n    createVNode: null,\n    renderComplete: null\n};\nfunction setTextContent(dom, children) {\n    dom.textContent = children;\n}\n// Calling this function assumes, nextValue is linkEvent\nfunction isLastValueSameLinkEvent(lastValue, nextValue) {\n    return (isLinkEventObject(lastValue) &&\n        lastValue.event === nextValue.event &&\n        lastValue.data === nextValue.data);\n}\nfunction mergeUnsetProperties(to, from) {\n    for (var propName in from) {\n        if (isUndefined(to[propName])) {\n            to[propName] = from[propName];\n        }\n    }\n    return to;\n}\nfunction safeCall1(method, arg1) {\n    return !!isFunction(method) && (method(arg1), true);\n}\n\nvar keyPrefix = '$';\nfunction V(childFlags, children, className, flags, key, props, ref, type) {\n    this.childFlags = childFlags;\n    this.children = children;\n    this.className = className;\n    this.dom = null;\n    this.flags = flags;\n    this.key = key === void 0 ? null : key;\n    this.props = props === void 0 ? null : props;\n    this.ref = ref === void 0 ? null : ref;\n    this.type = type;\n}\nfunction createVNode(flags, type, className, children, childFlags, props, key, ref) {\n    var childFlag = childFlags === void 0 ? 1 /* HasInvalidChildren */ : childFlags;\n    var vNode = new V(childFlag, children, className, flags, key, props, ref, type);\n    if (options.createVNode) {\n        options.createVNode(vNode);\n    }\n    if (childFlag === 0 /* UnknownChildren */) {\n        normalizeChildren(vNode, vNode.children);\n    }\n    return vNode;\n}\nfunction mergeDefaultHooks(flags, type, ref) {\n    if (flags & 4 /* ComponentClass */) {\n        return ref;\n    }\n    var defaultHooks = (flags & 32768 /* ForwardRef */ ? type.render : type).defaultHooks;\n    if (isNullOrUndef(defaultHooks)) {\n        return ref;\n    }\n    if (isNullOrUndef(ref)) {\n        return defaultHooks;\n    }\n    return mergeUnsetProperties(ref, defaultHooks);\n}\nfunction mergeDefaultProps(flags, type, props) {\n    // set default props\n    var defaultProps = (flags & 32768 /* ForwardRef */ ? type.render : type).defaultProps;\n    if (isNullOrUndef(defaultProps)) {\n        return props;\n    }\n    if (isNullOrUndef(props)) {\n        return combineFrom(defaultProps, null);\n    }\n    return mergeUnsetProperties(props, defaultProps);\n}\nfunction resolveComponentFlags(flags, type) {\n    if (flags & 12 /* ComponentKnown */) {\n        return flags;\n    }\n    if (type.prototype && type.prototype.render) {\n        return 4 /* ComponentClass */;\n    }\n    if (type.render) {\n        return 32776 /* ForwardRefComponent */;\n    }\n    return 8 /* ComponentFunction */;\n}\nfunction createComponentVNode(flags, type, props, key, ref) {\n    flags = resolveComponentFlags(flags, type);\n    var vNode = new V(1 /* HasInvalidChildren */, null, null, flags, key, mergeDefaultProps(flags, type, props), mergeDefaultHooks(flags, type, ref), type);\n    if (options.createVNode) {\n        options.createVNode(vNode);\n    }\n    return vNode;\n}\nfunction createTextVNode(text, key) {\n    return new V(1 /* HasInvalidChildren */, isNullOrUndef(text) || text === true || text === false ? '' : text, null, 16 /* Text */, key, null, null, null);\n}\nfunction createFragment(children, childFlags, key) {\n    var fragment = createVNode(8192 /* Fragment */, 8192 /* Fragment */, null, children, childFlags, null, key, null);\n    switch (fragment.childFlags) {\n        case 1 /* HasInvalidChildren */:\n            fragment.children = createVoidVNode();\n            fragment.childFlags = 2 /* HasVNodeChildren */;\n            break;\n        case 16 /* HasTextChildren */:\n            fragment.children = [createTextVNode(children)];\n            fragment.childFlags = 4 /* HasNonKeyedChildren */;\n            break;\n    }\n    return fragment;\n}\nfunction normalizeProps(vNode) {\n    var props = vNode.props;\n    if (props) {\n        var flags = vNode.flags;\n        if (flags & 481 /* Element */) {\n            if (props.children !== void 0 && isNullOrUndef(vNode.children)) {\n                normalizeChildren(vNode, props.children);\n            }\n            if (props.className !== void 0) {\n                vNode.className = props.className || null;\n                props.className = undefined;\n            }\n        }\n        if (props.key !== void 0) {\n            vNode.key = props.key;\n            props.key = undefined;\n        }\n        if (props.ref !== void 0) {\n            if (flags & 8 /* ComponentFunction */) {\n                vNode.ref = combineFrom(vNode.ref, props.ref);\n            }\n            else {\n                vNode.ref = props.ref;\n            }\n            props.ref = undefined;\n        }\n    }\n    return vNode;\n}\n/*\n * Fragment is different than normal vNode,\n * because when it needs to be cloned we need to clone its children too\n * But not normalize, because otherwise those possibly get KEY and re-mount\n */\nfunction cloneFragment(vNodeToClone) {\n    var oldChildren = vNodeToClone.children;\n    var childFlags = vNodeToClone.childFlags;\n    return createFragment(childFlags === 2 /* HasVNodeChildren */ ? directClone(oldChildren) : oldChildren.map(directClone), childFlags, vNodeToClone.key);\n}\nfunction directClone(vNodeToClone) {\n    var flags = vNodeToClone.flags & -16385 /* ClearInUse */;\n    var props = vNodeToClone.props;\n    if (flags & 14 /* Component */) {\n        if (!isNull(props)) {\n            var propsToClone = props;\n            props = {};\n            for (var key in propsToClone) {\n                props[key] = propsToClone[key];\n            }\n        }\n    }\n    if ((flags & 8192 /* Fragment */) === 0) {\n        return new V(vNodeToClone.childFlags, vNodeToClone.children, vNodeToClone.className, flags, vNodeToClone.key, props, vNodeToClone.ref, vNodeToClone.type);\n    }\n    return cloneFragment(vNodeToClone);\n}\nfunction createVoidVNode() {\n    return createTextVNode('', null);\n}\nfunction createPortal(children, container) {\n    var normalizedRoot = normalizeRoot(children);\n    return createVNode(1024 /* Portal */, 1024 /* Portal */, null, normalizedRoot, 0 /* UnknownChildren */, null, normalizedRoot.key, container);\n}\nfunction _normalizeVNodes(nodes, result, index, currentKey) {\n    for (var len = nodes.length; index < len; index++) {\n        var n = nodes[index];\n        if (!isInvalid(n)) {\n            var newKey = currentKey + keyPrefix + index;\n            if (isArray(n)) {\n                _normalizeVNodes(n, result, 0, newKey);\n            }\n            else {\n                if (isStringOrNumber(n)) {\n                    n = createTextVNode(n, newKey);\n                }\n                else {\n                    var oldKey = n.key;\n                    var isPrefixedKey = isString(oldKey) && oldKey[0] === keyPrefix;\n                    if (n.flags & 81920 /* InUseOrNormalized */ || isPrefixedKey) {\n                        n = directClone(n);\n                    }\n                    n.flags |= 65536 /* Normalized */;\n                    if (!isPrefixedKey) {\n                        if (isNull(oldKey)) {\n                            n.key = newKey;\n                        }\n                        else {\n                            n.key = currentKey + oldKey;\n                        }\n                    }\n                    else if (oldKey.substring(0, currentKey.length) !== currentKey) {\n                        n.key = currentKey + oldKey;\n                    }\n                }\n                result.push(n);\n            }\n        }\n    }\n}\nfunction getFlagsForElementVnode(type) {\n    switch (type) {\n        case 'svg':\n            return 32 /* SvgElement */;\n        case 'input':\n            return 64 /* InputElement */;\n        case 'select':\n            return 256 /* SelectElement */;\n        case 'textarea':\n            return 128 /* TextareaElement */;\n        case Fragment:\n            return 8192 /* Fragment */;\n        default:\n            return 1 /* HtmlElement */;\n    }\n}\nfunction normalizeChildren(vNode, children) {\n    var newChildren;\n    var newChildFlags = 1 /* HasInvalidChildren */;\n    // Don't change children to match strict equal (===) true in patching\n    if (isInvalid(children)) {\n        newChildren = children;\n    }\n    else if (isStringOrNumber(children)) {\n        newChildFlags = 16 /* HasTextChildren */;\n        newChildren = children;\n    }\n    else if (isArray(children)) {\n        var len = children.length;\n        for (var i = 0; i < len; ++i) {\n            var n = children[i];\n            if (isInvalid(n) || isArray(n)) {\n                newChildren = newChildren || children.slice(0, i);\n                _normalizeVNodes(children, newChildren, i, '');\n                break;\n            }\n            else if (isStringOrNumber(n)) {\n                newChildren = newChildren || children.slice(0, i);\n                newChildren.push(createTextVNode(n, keyPrefix + i));\n            }\n            else {\n                var key = n.key;\n                var needsCloning = (n.flags & 81920 /* InUseOrNormalized */) > 0;\n                var isNullKey = isNull(key);\n                var isPrefixed = isString(key) && key[0] === keyPrefix;\n                if (needsCloning || isNullKey || isPrefixed) {\n                    newChildren = newChildren || children.slice(0, i);\n                    if (needsCloning || isPrefixed) {\n                        n = directClone(n);\n                    }\n                    if (isNullKey || isPrefixed) {\n                        n.key = keyPrefix + i;\n                    }\n                    newChildren.push(n);\n                }\n                else if (newChildren) {\n                    newChildren.push(n);\n                }\n                n.flags |= 65536 /* Normalized */;\n            }\n        }\n        newChildren = newChildren || children;\n        if (newChildren.length === 0) {\n            newChildFlags = 1 /* HasInvalidChildren */;\n        }\n        else {\n            newChildFlags = 8 /* HasKeyedChildren */;\n        }\n    }\n    else {\n        newChildren = children;\n        newChildren.flags |= 65536 /* Normalized */;\n        if (children.flags & 81920 /* InUseOrNormalized */) {\n            newChildren = directClone(children);\n        }\n        newChildFlags = 2 /* HasVNodeChildren */;\n    }\n    vNode.children = newChildren;\n    vNode.childFlags = newChildFlags;\n    return vNode;\n}\nfunction normalizeRoot(input) {\n    if (isInvalid(input) || isStringOrNumber(input)) {\n        return createTextVNode(input, null);\n    }\n    if (isArray(input)) {\n        return createFragment(input, 0 /* UnknownChildren */, null);\n    }\n    return input.flags & 16384 /* InUse */ ? directClone(input) : input;\n}\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xmlNS = 'http://www.w3.org/XML/1998/namespace';\nvar namespaces = {\n    'xlink:actuate': xlinkNS,\n    'xlink:arcrole': xlinkNS,\n    'xlink:href': xlinkNS,\n    'xlink:role': xlinkNS,\n    'xlink:show': xlinkNS,\n    'xlink:title': xlinkNS,\n    'xlink:type': xlinkNS,\n    'xml:base': xmlNS,\n    'xml:lang': xmlNS,\n    'xml:space': xmlNS\n};\n\nfunction getDelegatedEventObject(v) {\n    return {\n        onClick: v,\n        onDblClick: v,\n        onFocusIn: v,\n        onFocusOut: v,\n        onKeyDown: v,\n        onKeyPress: v,\n        onKeyUp: v,\n        onMouseDown: v,\n        onMouseMove: v,\n        onMouseUp: v,\n        onTouchEnd: v,\n        onTouchMove: v,\n        onTouchStart: v\n    };\n}\nvar attachedEventCounts = getDelegatedEventObject(0);\nvar attachedEvents = getDelegatedEventObject(null);\nvar syntheticEvents = getDelegatedEventObject(true);\nfunction updateOrAddSyntheticEvent(name, dom) {\n    var eventsObject = dom.$EV;\n    if (!eventsObject) {\n        eventsObject = dom.$EV = getDelegatedEventObject(null);\n    }\n    if (!eventsObject[name]) {\n        if (++attachedEventCounts[name] === 1) {\n            attachedEvents[name] = attachEventToDocument(name);\n        }\n    }\n    return eventsObject;\n}\nfunction unmountSyntheticEvent(name, dom) {\n    var eventsObject = dom.$EV;\n    if (eventsObject && eventsObject[name]) {\n        if (--attachedEventCounts[name] === 0) {\n            document.removeEventListener(normalizeEventName(name), attachedEvents[name]);\n            attachedEvents[name] = null;\n        }\n        eventsObject[name] = null;\n    }\n}\nfunction handleSyntheticEvent(name, lastEvent, nextEvent, dom) {\n    if (isFunction(nextEvent)) {\n        updateOrAddSyntheticEvent(name, dom)[name] = nextEvent;\n    }\n    else if (isLinkEventObject(nextEvent)) {\n        if (isLastValueSameLinkEvent(lastEvent, nextEvent)) {\n            return;\n        }\n        updateOrAddSyntheticEvent(name, dom)[name] = nextEvent;\n    }\n    else {\n        unmountSyntheticEvent(name, dom);\n    }\n}\n// When browsers fully support event.composedPath we could loop it through instead of using parentNode property\nfunction getTargetNode(event) {\n    return isFunction(event.composedPath) ? event.composedPath()[0] : event.target;\n}\nfunction dispatchEvents(event, isClick, name, eventData) {\n    var dom = getTargetNode(event);\n    do {\n        // Html Nodes can be nested fe: span inside button in that scenario browser does not handle disabled attribute on parent,\n        // because the event listener is on document.body\n        // Don't process clicks on disabled elements\n        if (isClick && dom.disabled) {\n            return;\n        }\n        var eventsObject = dom.$EV;\n        if (eventsObject) {\n            var currentEvent = eventsObject[name];\n            if (currentEvent) {\n                // linkEvent object\n                eventData.dom = dom;\n                currentEvent.event ? currentEvent.event(currentEvent.data, event) : currentEvent(event);\n                if (event.cancelBubble) {\n                    return;\n                }\n            }\n        }\n        dom = dom.parentNode;\n    } while (!isNull(dom));\n}\nfunction stopPropagation() {\n    this.cancelBubble = true;\n    if (!this.immediatePropagationStopped) {\n        this.stopImmediatePropagation();\n    }\n}\nfunction isDefaultPrevented() {\n    return this.defaultPrevented;\n}\nfunction isPropagationStopped() {\n    return this.cancelBubble;\n}\nfunction extendEventProperties(event) {\n    // Event data needs to be object to save reference to currentTarget getter\n    var eventData = {\n        dom: document\n    };\n    event.isDefaultPrevented = isDefaultPrevented;\n    event.isPropagationStopped = isPropagationStopped;\n    event.stopPropagation = stopPropagation;\n    Object.defineProperty(event, 'currentTarget', {\n        configurable: true,\n        get: function get() {\n            return eventData.dom;\n        }\n    });\n    return eventData;\n}\nfunction rootClickEvent(name) {\n    return function (event) {\n        if (event.button !== 0) {\n            // Firefox incorrectly triggers click event for mid/right mouse buttons.\n            // This bug has been active for 17 years.\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=184051\n            event.stopPropagation();\n            return;\n        }\n        dispatchEvents(event, true, name, extendEventProperties(event));\n    };\n}\nfunction rootEvent(name) {\n    return function (event) {\n        dispatchEvents(event, false, name, extendEventProperties(event));\n    };\n}\nfunction attachEventToDocument(name) {\n    var attachedEvent = name === 'onClick' || name === 'onDblClick' ? rootClickEvent(name) : rootEvent(name);\n    document.addEventListener(normalizeEventName(name), attachedEvent);\n    return attachedEvent;\n}\n\nfunction isSameInnerHTML(dom, innerHTML) {\n    var tempdom = document.createElement('i');\n    tempdom.innerHTML = innerHTML;\n    return tempdom.innerHTML === dom.innerHTML;\n}\n\nfunction triggerEventListener(props, methodName, e) {\n    if (props[methodName]) {\n        var listener = props[methodName];\n        if (listener.event) {\n            listener.event(listener.data, e);\n        }\n        else {\n            listener(e);\n        }\n    }\n    else {\n        var nativeListenerName = methodName.toLowerCase();\n        if (props[nativeListenerName]) {\n            props[nativeListenerName](e);\n        }\n    }\n}\nfunction createWrappedFunction(methodName, applyValue) {\n    var fnMethod = function (e) {\n        var vNode = this.$V;\n        // If vNode is gone by the time event fires, no-op\n        if (!vNode) {\n            return;\n        }\n        var props = vNode.props || EMPTY_OBJ;\n        var dom = vNode.dom;\n        if (isString(methodName)) {\n            triggerEventListener(props, methodName, e);\n        }\n        else {\n            for (var i = 0; i < methodName.length; ++i) {\n                triggerEventListener(props, methodName[i], e);\n            }\n        }\n        if (isFunction(applyValue)) {\n            var newVNode = this.$V;\n            var newProps = newVNode.props || EMPTY_OBJ;\n            applyValue(newProps, dom, false, newVNode);\n        }\n    };\n    Object.defineProperty(fnMethod, 'wrapped', {\n        configurable: false,\n        enumerable: false,\n        value: true,\n        writable: false\n    });\n    return fnMethod;\n}\n\nfunction attachEvent(dom, eventName, handler) {\n    var previousKey = \"$\" + eventName;\n    var previousArgs = dom[previousKey];\n    if (previousArgs) {\n        if (previousArgs[1].wrapped) {\n            return;\n        }\n        dom.removeEventListener(previousArgs[0], previousArgs[1]);\n        dom[previousKey] = null;\n    }\n    if (isFunction(handler)) {\n        dom.addEventListener(eventName, handler);\n        dom[previousKey] = [eventName, handler];\n    }\n}\n\nfunction isCheckedType(type) {\n    return type === 'checkbox' || type === 'radio';\n}\nvar onTextInputChange = createWrappedFunction('onInput', applyValueInput);\nvar wrappedOnChange = createWrappedFunction(['onClick', 'onChange'], applyValueInput);\n/* tslint:disable-next-line:no-empty */\nfunction emptywrapper(event) {\n    event.stopPropagation();\n}\nemptywrapper.wrapped = true;\nfunction inputEvents(dom, nextPropsOrEmpty) {\n    if (isCheckedType(nextPropsOrEmpty.type)) {\n        attachEvent(dom, 'change', wrappedOnChange);\n        attachEvent(dom, 'click', emptywrapper);\n    }\n    else {\n        attachEvent(dom, 'input', onTextInputChange);\n    }\n}\nfunction applyValueInput(nextPropsOrEmpty, dom) {\n    var type = nextPropsOrEmpty.type;\n    var value = nextPropsOrEmpty.value;\n    var checked = nextPropsOrEmpty.checked;\n    var multiple = nextPropsOrEmpty.multiple;\n    var defaultValue = nextPropsOrEmpty.defaultValue;\n    var hasValue = !isNullOrUndef(value);\n    if (type && type !== dom.type) {\n        dom.setAttribute('type', type);\n    }\n    if (!isNullOrUndef(multiple) && multiple !== dom.multiple) {\n        dom.multiple = multiple;\n    }\n    if (!isNullOrUndef(defaultValue) && !hasValue) {\n        dom.defaultValue = defaultValue + '';\n    }\n    if (isCheckedType(type)) {\n        if (hasValue) {\n            dom.value = value;\n        }\n        if (!isNullOrUndef(checked)) {\n            dom.checked = checked;\n        }\n    }\n    else {\n        if (hasValue && dom.value !== value) {\n            dom.defaultValue = value;\n            dom.value = value;\n        }\n        else if (!isNullOrUndef(checked)) {\n            dom.checked = checked;\n        }\n    }\n}\n\nfunction updateChildOptions(vNode, value) {\n    if (vNode.type === 'option') {\n        updateChildOption(vNode, value);\n    }\n    else {\n        var children = vNode.children;\n        var flags = vNode.flags;\n        if (flags & 4 /* ComponentClass */) {\n            updateChildOptions(children.$LI, value);\n        }\n        else if (flags & 8 /* ComponentFunction */) {\n            updateChildOptions(children, value);\n        }\n        else if (vNode.childFlags === 2 /* HasVNodeChildren */) {\n            updateChildOptions(children, value);\n        }\n        else if (vNode.childFlags & 12 /* MultipleChildren */) {\n            for (var i = 0, len = children.length; i < len; ++i) {\n                updateChildOptions(children[i], value);\n            }\n        }\n    }\n}\nfunction updateChildOption(vNode, value) {\n    var props = vNode.props || EMPTY_OBJ;\n    var dom = vNode.dom;\n    // we do this as multiple may have changed\n    dom.value = props.value;\n    if (props.value === value || (isArray(value) && value.indexOf(props.value) !== -1)) {\n        dom.selected = true;\n    }\n    else if (!isNullOrUndef(value) || !isNullOrUndef(props.selected)) {\n        dom.selected = props.selected || false;\n    }\n}\nvar onSelectChange = createWrappedFunction('onChange', applyValueSelect);\nfunction selectEvents(dom) {\n    attachEvent(dom, 'change', onSelectChange);\n}\nfunction applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode) {\n    var multiplePropInBoolean = Boolean(nextPropsOrEmpty.multiple);\n    if (!isNullOrUndef(nextPropsOrEmpty.multiple) && multiplePropInBoolean !== dom.multiple) {\n        dom.multiple = multiplePropInBoolean;\n    }\n    var index = nextPropsOrEmpty.selectedIndex;\n    if (index === -1) {\n        dom.selectedIndex = -1;\n    }\n    var childFlags = vNode.childFlags;\n    if (childFlags !== 1 /* HasInvalidChildren */) {\n        var value = nextPropsOrEmpty.value;\n        if (isNumber(index) && index > -1 && dom.options[index]) {\n            value = dom.options[index].value;\n        }\n        if (mounting && isNullOrUndef(value)) {\n            value = nextPropsOrEmpty.defaultValue;\n        }\n        updateChildOptions(vNode, value);\n    }\n}\n\nvar onTextareaInputChange = createWrappedFunction('onInput', applyValueTextArea);\nvar wrappedOnChange$1 = createWrappedFunction('onChange');\nfunction textAreaEvents(dom, nextPropsOrEmpty) {\n    attachEvent(dom, 'input', onTextareaInputChange);\n    if (nextPropsOrEmpty.onChange) {\n        attachEvent(dom, 'change', wrappedOnChange$1);\n    }\n}\nfunction applyValueTextArea(nextPropsOrEmpty, dom, mounting) {\n    var value = nextPropsOrEmpty.value;\n    var domValue = dom.value;\n    if (isNullOrUndef(value)) {\n        if (mounting) {\n            var defaultValue = nextPropsOrEmpty.defaultValue;\n            if (!isNullOrUndef(defaultValue) && defaultValue !== domValue) {\n                dom.defaultValue = defaultValue;\n                dom.value = defaultValue;\n            }\n        }\n    }\n    else if (domValue !== value) {\n        /* There is value so keep it controlled */\n        dom.defaultValue = value;\n        dom.value = value;\n    }\n}\n\nfunction processElement(flags, vNode, dom, nextPropsOrEmpty, mounting, isControlled) {\n    if (flags & 64 /* InputElement */) {\n        applyValueInput(nextPropsOrEmpty, dom);\n    }\n    else if (flags & 256 /* SelectElement */) {\n        applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode);\n    }\n    else if (flags & 128 /* TextareaElement */) {\n        applyValueTextArea(nextPropsOrEmpty, dom, mounting);\n    }\n    if (isControlled) {\n        dom.$V = vNode;\n    }\n}\nfunction addFormElementEventHandlers(flags, dom, nextPropsOrEmpty) {\n    if (flags & 64 /* InputElement */) {\n        inputEvents(dom, nextPropsOrEmpty);\n    }\n    else if (flags & 256 /* SelectElement */) {\n        selectEvents(dom);\n    }\n    else if (flags & 128 /* TextareaElement */) {\n        textAreaEvents(dom, nextPropsOrEmpty);\n    }\n}\nfunction isControlledFormElement(nextPropsOrEmpty) {\n    return nextPropsOrEmpty.type && isCheckedType(nextPropsOrEmpty.type) ? !isNullOrUndef(nextPropsOrEmpty.checked) : !isNullOrUndef(nextPropsOrEmpty.value);\n}\n\nfunction createRef() {\n    return {\n        current: null\n    };\n}\nfunction forwardRef(render) {\n    // @ts-ignore\n    return {\n        render: render\n    };\n}\nfunction unmountRef(ref) {\n    if (ref) {\n        if (!safeCall1(ref, null) && ref.current) {\n            ref.current = null;\n        }\n    }\n}\nfunction mountRef(ref, value, lifecycle) {\n    if (ref && (isFunction(ref) || ref.current !== void 0)) {\n        lifecycle.push(function () {\n            if (!safeCall1(ref, value) && ref.current !== void 0) {\n                ref.current = value;\n            }\n        });\n    }\n}\n\nfunction remove(vNode, parentDOM) {\n    unmount(vNode);\n    removeVNodeDOM(vNode, parentDOM);\n}\nfunction unmount(vNode) {\n    var flags = vNode.flags;\n    var children = vNode.children;\n    var ref;\n    if (flags & 481 /* Element */) {\n        ref = vNode.ref;\n        var props = vNode.props;\n        unmountRef(ref);\n        var childFlags = vNode.childFlags;\n        if (!isNull(props)) {\n            var keys = Object.keys(props);\n            for (var i = 0, len = keys.length; i < len; i++) {\n                var key = keys[i];\n                if (syntheticEvents[key]) {\n                    unmountSyntheticEvent(key, vNode.dom);\n                }\n            }\n        }\n        if (childFlags & 12 /* MultipleChildren */) {\n            unmountAllChildren(children);\n        }\n        else if (childFlags === 2 /* HasVNodeChildren */) {\n            unmount(children);\n        }\n    }\n    else if (children) {\n        if (flags & 4 /* ComponentClass */) {\n            if (isFunction(children.componentWillUnmount)) {\n                children.componentWillUnmount();\n            }\n            unmountRef(vNode.ref);\n            children.$UN = true;\n            unmount(children.$LI);\n        }\n        else if (flags & 8 /* ComponentFunction */) {\n            ref = vNode.ref;\n            if (!isNullOrUndef(ref) && isFunction(ref.onComponentWillUnmount)) {\n                ref.onComponentWillUnmount(findDOMfromVNode(vNode, true), vNode.props || EMPTY_OBJ);\n            }\n            unmount(children);\n        }\n        else if (flags & 1024 /* Portal */) {\n            remove(children, vNode.ref);\n        }\n        else if (flags & 8192 /* Fragment */) {\n            if (vNode.childFlags & 12 /* MultipleChildren */) {\n                unmountAllChildren(children);\n            }\n        }\n    }\n}\nfunction unmountAllChildren(children) {\n    for (var i = 0, len = children.length; i < len; ++i) {\n        unmount(children[i]);\n    }\n}\nfunction clearDOM(dom) {\n    // Optimization for clearing dom\n    dom.textContent = '';\n}\nfunction removeAllChildren(dom, vNode, children) {\n    unmountAllChildren(children);\n    if (vNode.flags & 8192 /* Fragment */) {\n        removeVNodeDOM(vNode, dom);\n    }\n    else {\n        clearDOM(dom);\n    }\n}\n\nfunction wrapLinkEvent(nextValue) {\n    // This variable makes sure there is no \"this\" context in callback\n    var ev = nextValue.event;\n    return function (e) {\n        ev(nextValue.data, e);\n    };\n}\nfunction patchEvent(name, lastValue, nextValue, dom) {\n    if (isLinkEventObject(nextValue)) {\n        if (isLastValueSameLinkEvent(lastValue, nextValue)) {\n            return;\n        }\n        nextValue = wrapLinkEvent(nextValue);\n    }\n    attachEvent(dom, normalizeEventName(name), nextValue);\n}\n// We are assuming here that we come from patchProp routine\n// -nextAttrValue cannot be null or undefined\nfunction patchStyle(lastAttrValue, nextAttrValue, dom) {\n    if (isNullOrUndef(nextAttrValue)) {\n        dom.removeAttribute('style');\n        return;\n    }\n    var domStyle = dom.style;\n    var style;\n    var value;\n    if (isString(nextAttrValue)) {\n        domStyle.cssText = nextAttrValue;\n        return;\n    }\n    if (!isNullOrUndef(lastAttrValue) && !isString(lastAttrValue)) {\n        for (style in nextAttrValue) {\n            // do not add a hasOwnProperty check here, it affects performance\n            value = nextAttrValue[style];\n            if (value !== lastAttrValue[style]) {\n                domStyle.setProperty(style, value);\n            }\n        }\n        for (style in lastAttrValue) {\n            if (isNullOrUndef(nextAttrValue[style])) {\n                domStyle.removeProperty(style);\n            }\n        }\n    }\n    else {\n        for (style in nextAttrValue) {\n            value = nextAttrValue[style];\n            domStyle.setProperty(style, value);\n        }\n    }\n}\nfunction patchDangerInnerHTML(lastValue, nextValue, lastVNode, dom) {\n    var lastHtml = (lastValue && lastValue.__html) || '';\n    var nextHtml = (nextValue && nextValue.__html) || '';\n    if (lastHtml !== nextHtml) {\n        if (!isNullOrUndef(nextHtml) && !isSameInnerHTML(dom, nextHtml)) {\n            if (!isNull(lastVNode)) {\n                if (lastVNode.childFlags & 12 /* MultipleChildren */) {\n                    unmountAllChildren(lastVNode.children);\n                }\n                else if (lastVNode.childFlags === 2 /* HasVNodeChildren */) {\n                    unmount(lastVNode.children);\n                }\n                lastVNode.children = null;\n                lastVNode.childFlags = 1 /* HasInvalidChildren */;\n            }\n            dom.innerHTML = nextHtml;\n        }\n    }\n}\nfunction patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode) {\n    switch (prop) {\n        case 'children':\n        case 'childrenType':\n        case 'className':\n        case 'defaultValue':\n        case 'key':\n        case 'multiple':\n        case 'ref':\n        case 'selectedIndex':\n            break;\n        case 'autoFocus':\n            dom.autofocus = !!nextValue;\n            break;\n        case 'allowfullscreen':\n        case 'autoplay':\n        case 'capture':\n        case 'checked':\n        case 'controls':\n        case 'default':\n        case 'disabled':\n        case 'hidden':\n        case 'indeterminate':\n        case 'loop':\n        case 'muted':\n        case 'novalidate':\n        case 'open':\n        case 'readOnly':\n        case 'required':\n        case 'reversed':\n        case 'scoped':\n        case 'seamless':\n        case 'selected':\n            dom[prop] = !!nextValue;\n            break;\n        case 'defaultChecked':\n        case 'value':\n        case 'volume':\n            if (hasControlledValue && prop === 'value') {\n                break;\n            }\n            var value = isNullOrUndef(nextValue) ? '' : nextValue;\n            if (dom[prop] !== value) {\n                dom[prop] = value;\n            }\n            break;\n        case 'style':\n            patchStyle(lastValue, nextValue, dom);\n            break;\n        case 'dangerouslySetInnerHTML':\n            patchDangerInnerHTML(lastValue, nextValue, lastVNode, dom);\n            break;\n        default:\n            if (syntheticEvents[prop]) {\n                handleSyntheticEvent(prop, lastValue, nextValue, dom);\n            }\n            else if (prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110) {\n                patchEvent(prop, lastValue, nextValue, dom);\n            }\n            else if (isNullOrUndef(nextValue)) {\n                dom.removeAttribute(prop);\n            }\n            else if (isSVG && namespaces[prop]) {\n                // We optimize for isSVG being false\n                // If we end up in this path we can read property again\n                dom.setAttributeNS(namespaces[prop], prop, nextValue);\n            }\n            else {\n                dom.setAttribute(prop, nextValue);\n            }\n            break;\n    }\n}\nfunction mountProps(vNode, flags, props, dom, isSVG) {\n    var hasControlledValue = false;\n    var isFormElement = (flags & 448 /* FormElement */) > 0;\n    if (isFormElement) {\n        hasControlledValue = isControlledFormElement(props);\n        if (hasControlledValue) {\n            addFormElementEventHandlers(flags, dom, props);\n        }\n    }\n    for (var prop in props) {\n        // do not add a hasOwnProperty check here, it affects performance\n        patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue, null);\n    }\n    if (isFormElement) {\n        processElement(flags, vNode, dom, props, true, hasControlledValue);\n    }\n}\n\nfunction renderNewInput(instance, props, context) {\n    var nextInput = normalizeRoot(instance.render(props, instance.state, context));\n    var childContext = context;\n    if (isFunction(instance.getChildContext)) {\n        childContext = combineFrom(context, instance.getChildContext());\n    }\n    instance.$CX = childContext;\n    return nextInput;\n}\nfunction createClassComponentInstance(vNode, Component, props, context, isSVG, lifecycle) {\n    var instance = new Component(props, context);\n    var usesNewAPI = (instance.$N = Boolean(Component.getDerivedStateFromProps || instance.getSnapshotBeforeUpdate));\n    instance.$SVG = isSVG;\n    instance.$L = lifecycle;\n    vNode.children = instance;\n    instance.$BS = false;\n    instance.context = context;\n    if (instance.props === EMPTY_OBJ) {\n        instance.props = props;\n    }\n    if (!usesNewAPI) {\n        if (isFunction(instance.componentWillMount)) {\n            instance.$BR = true;\n            instance.componentWillMount();\n            var pending = instance.$PS;\n            if (!isNull(pending)) {\n                var state = instance.state;\n                if (isNull(state)) {\n                    instance.state = pending;\n                }\n                else {\n                    for (var key in pending) {\n                        state[key] = pending[key];\n                    }\n                }\n                instance.$PS = null;\n            }\n            instance.$BR = false;\n        }\n    }\n    else {\n        instance.state = createDerivedState(instance, props, instance.state);\n    }\n    instance.$LI = renderNewInput(instance, props, context);\n    return instance;\n}\nfunction renderFunctionalComponent(vNode, context) {\n    var props = vNode.props || EMPTY_OBJ;\n    return vNode.flags & 32768 /* ForwardRef */ ? vNode.type.render(props, vNode.ref, context) : vNode.type(props, context);\n}\n\nfunction mount(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n    var flags = (vNode.flags |= 16384 /* InUse */);\n    if (flags & 481 /* Element */) {\n        mountElement(vNode, parentDOM, context, isSVG, nextNode, lifecycle);\n    }\n    else if (flags & 4 /* ComponentClass */) {\n        mountClassComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle);\n    }\n    else if (flags & 8 /* ComponentFunction */) {\n        mountFunctionalComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle);\n        mountFunctionalComponentCallbacks(vNode, lifecycle);\n    }\n    else if (flags & 512 /* Void */ || flags & 16 /* Text */) {\n        mountText(vNode, parentDOM, nextNode);\n    }\n    else if (flags & 8192 /* Fragment */) {\n        mountFragment(vNode, context, parentDOM, isSVG, nextNode, lifecycle);\n    }\n    else if (flags & 1024 /* Portal */) {\n        mountPortal(vNode, context, parentDOM, nextNode, lifecycle);\n    }\n    else ;\n}\nfunction mountPortal(vNode, context, parentDOM, nextNode, lifecycle) {\n    mount(vNode.children, vNode.ref, context, false, null, lifecycle);\n    var placeHolderVNode = createVoidVNode();\n    mountText(placeHolderVNode, parentDOM, nextNode);\n    vNode.dom = placeHolderVNode.dom;\n}\nfunction mountFragment(vNode, context, parentDOM, isSVG, nextNode, lifecycle) {\n    var children = vNode.children;\n    var childFlags = vNode.childFlags;\n    // When fragment is optimized for multiple children, check if there is no children and change flag to invalid\n    // This is the only normalization always done, to keep optimization flags API same for fragments and regular elements\n    if (childFlags & 12 /* MultipleChildren */ && children.length === 0) {\n        childFlags = vNode.childFlags = 2 /* HasVNodeChildren */;\n        children = vNode.children = createVoidVNode();\n    }\n    if (childFlags === 2 /* HasVNodeChildren */) {\n        mount(children, parentDOM, nextNode, isSVG, nextNode, lifecycle);\n    }\n    else {\n        mountArrayChildren(children, parentDOM, context, isSVG, nextNode, lifecycle);\n    }\n}\nfunction mountText(vNode, parentDOM, nextNode) {\n    var dom = (vNode.dom = document.createTextNode(vNode.children));\n    if (!isNull(parentDOM)) {\n        insertOrAppend(parentDOM, dom, nextNode);\n    }\n}\nfunction mountElement(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n    var flags = vNode.flags;\n    var props = vNode.props;\n    var className = vNode.className;\n    var childFlags = vNode.childFlags;\n    var dom = (vNode.dom = documentCreateElement(vNode.type, (isSVG = isSVG || (flags & 32 /* SvgElement */) > 0)));\n    var children = vNode.children;\n    if (!isNullOrUndef(className) && className !== '') {\n        if (isSVG) {\n            dom.setAttribute('class', className);\n        }\n        else {\n            dom.className = className;\n        }\n    }\n    if (childFlags === 16 /* HasTextChildren */) {\n        setTextContent(dom, children);\n    }\n    else if (childFlags !== 1 /* HasInvalidChildren */) {\n        var childrenIsSVG = isSVG && vNode.type !== 'foreignObject';\n        if (childFlags === 2 /* HasVNodeChildren */) {\n            if (children.flags & 16384 /* InUse */) {\n                vNode.children = children = directClone(children);\n            }\n            mount(children, dom, context, childrenIsSVG, null, lifecycle);\n        }\n        else if (childFlags === 8 /* HasKeyedChildren */ || childFlags === 4 /* HasNonKeyedChildren */) {\n            mountArrayChildren(children, dom, context, childrenIsSVG, null, lifecycle);\n        }\n    }\n    if (!isNull(parentDOM)) {\n        insertOrAppend(parentDOM, dom, nextNode);\n    }\n    if (!isNull(props)) {\n        mountProps(vNode, flags, props, dom, isSVG);\n    }\n    mountRef(vNode.ref, dom, lifecycle);\n}\nfunction mountArrayChildren(children, dom, context, isSVG, nextNode, lifecycle) {\n    for (var i = 0; i < children.length; ++i) {\n        var child = children[i];\n        if (child.flags & 16384 /* InUse */) {\n            children[i] = child = directClone(child);\n        }\n        mount(child, dom, context, isSVG, nextNode, lifecycle);\n    }\n}\nfunction mountClassComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n    var instance = createClassComponentInstance(vNode, vNode.type, vNode.props || EMPTY_OBJ, context, isSVG, lifecycle);\n    mount(instance.$LI, parentDOM, instance.$CX, isSVG, nextNode, lifecycle);\n    mountClassComponentCallbacks(vNode.ref, instance, lifecycle);\n}\nfunction mountFunctionalComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n    mount((vNode.children = normalizeRoot(renderFunctionalComponent(vNode, context))), parentDOM, context, isSVG, nextNode, lifecycle);\n}\nfunction createClassMountCallback(instance) {\n    return function () {\n        instance.componentDidMount();\n    };\n}\nfunction mountClassComponentCallbacks(ref, instance, lifecycle) {\n    mountRef(ref, instance, lifecycle);\n    if (isFunction(instance.componentDidMount)) {\n        lifecycle.push(createClassMountCallback(instance));\n    }\n}\nfunction createOnMountCallback(ref, vNode) {\n    return function () {\n        ref.onComponentDidMount(findDOMfromVNode(vNode, true), vNode.props || EMPTY_OBJ);\n    };\n}\nfunction mountFunctionalComponentCallbacks(vNode, lifecycle) {\n    var ref = vNode.ref;\n    if (!isNullOrUndef(ref)) {\n        safeCall1(ref.onComponentWillMount, vNode.props || EMPTY_OBJ);\n        if (isFunction(ref.onComponentDidMount)) {\n            lifecycle.push(createOnMountCallback(ref, vNode));\n        }\n    }\n}\n\nfunction replaceWithNewNode(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle) {\n    unmount(lastVNode);\n    if ((nextVNode.flags & lastVNode.flags & 2033 /* DOMRef */) !== 0) {\n        mount(nextVNode, null, context, isSVG, null, lifecycle);\n        // Single DOM operation, when we have dom references available\n        replaceChild(parentDOM, nextVNode.dom, lastVNode.dom);\n    }\n    else {\n        mount(nextVNode, parentDOM, context, isSVG, findDOMfromVNode(lastVNode, true), lifecycle);\n        removeVNodeDOM(lastVNode, parentDOM);\n    }\n}\nfunction patch(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n    var nextFlags = (nextVNode.flags |= 16384 /* InUse */);\n    if (lastVNode.flags !== nextFlags || lastVNode.type !== nextVNode.type || lastVNode.key !== nextVNode.key || nextFlags & 2048 /* ReCreate */) {\n        if (lastVNode.flags & 16384 /* InUse */) {\n            replaceWithNewNode(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle);\n        }\n        else {\n            // Last vNode is not in use, it has crashed at application level. Just mount nextVNode and ignore last one\n            mount(nextVNode, parentDOM, context, isSVG, nextNode, lifecycle);\n        }\n    }\n    else if (nextFlags & 481 /* Element */) {\n        patchElement(lastVNode, nextVNode, context, isSVG, nextFlags, lifecycle);\n    }\n    else if (nextFlags & 4 /* ComponentClass */) {\n        patchClassComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle);\n    }\n    else if (nextFlags & 8 /* ComponentFunction */) {\n        patchFunctionalComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle);\n    }\n    else if (nextFlags & 16 /* Text */) {\n        patchText(lastVNode, nextVNode);\n    }\n    else if (nextFlags & 512 /* Void */) {\n        nextVNode.dom = lastVNode.dom;\n    }\n    else if (nextFlags & 8192 /* Fragment */) {\n        patchFragment(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle);\n    }\n    else {\n        patchPortal(lastVNode, nextVNode, context, lifecycle);\n    }\n}\nfunction patchSingleTextChild(lastChildren, nextChildren, parentDOM) {\n    if (lastChildren !== nextChildren) {\n        if (lastChildren !== '') {\n            parentDOM.firstChild.nodeValue = nextChildren;\n        }\n        else {\n            setTextContent(parentDOM, nextChildren);\n        }\n    }\n}\nfunction patchContentEditableChildren(dom, nextChildren) {\n    if (dom.textContent !== nextChildren) {\n        dom.textContent = nextChildren;\n    }\n}\nfunction patchFragment(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle) {\n    var lastChildren = lastVNode.children;\n    var nextChildren = nextVNode.children;\n    var lastChildFlags = lastVNode.childFlags;\n    var nextChildFlags = nextVNode.childFlags;\n    var nextNode = null;\n    // When fragment is optimized for multiple children, check if there is no children and change flag to invalid\n    // This is the only normalization always done, to keep optimization flags API same for fragments and regular elements\n    if (nextChildFlags & 12 /* MultipleChildren */ && nextChildren.length === 0) {\n        nextChildFlags = nextVNode.childFlags = 2 /* HasVNodeChildren */;\n        nextChildren = nextVNode.children = createVoidVNode();\n    }\n    var nextIsSingle = (nextChildFlags & 2 /* HasVNodeChildren */) !== 0;\n    if (lastChildFlags & 12 /* MultipleChildren */) {\n        var lastLen = lastChildren.length;\n        // We need to know Fragment's edge node when\n        if (\n        // It uses keyed algorithm\n        (lastChildFlags & 8 /* HasKeyedChildren */ && nextChildFlags & 8 /* HasKeyedChildren */) ||\n            // It transforms from many to single\n            nextIsSingle ||\n            // It will append more nodes\n            (!nextIsSingle && nextChildren.length > lastLen)) {\n            // When fragment has multiple children there is always at least one vNode\n            nextNode = findDOMfromVNode(lastChildren[lastLen - 1], false).nextSibling;\n        }\n    }\n    patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context, isSVG, nextNode, lastVNode, lifecycle);\n}\nfunction patchPortal(lastVNode, nextVNode, context, lifecycle) {\n    var lastContainer = lastVNode.ref;\n    var nextContainer = nextVNode.ref;\n    var nextChildren = nextVNode.children;\n    patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, lastContainer, context, false, null, lastVNode, lifecycle);\n    nextVNode.dom = lastVNode.dom;\n    if (lastContainer !== nextContainer && !isInvalid(nextChildren)) {\n        var node = nextChildren.dom;\n        removeChild(lastContainer, node);\n        appendChild(nextContainer, node);\n    }\n}\nfunction patchElement(lastVNode, nextVNode, context, isSVG, nextFlags, lifecycle) {\n    var dom = (nextVNode.dom = lastVNode.dom);\n    var lastProps = lastVNode.props;\n    var nextProps = nextVNode.props;\n    var isFormElement = false;\n    var hasControlledValue = false;\n    var nextPropsOrEmpty;\n    isSVG = isSVG || (nextFlags & 32 /* SvgElement */) > 0;\n    // inlined patchProps  -- starts --\n    if (lastProps !== nextProps) {\n        var lastPropsOrEmpty = lastProps || EMPTY_OBJ;\n        nextPropsOrEmpty = nextProps || EMPTY_OBJ;\n        if (nextPropsOrEmpty !== EMPTY_OBJ) {\n            isFormElement = (nextFlags & 448 /* FormElement */) > 0;\n            if (isFormElement) {\n                hasControlledValue = isControlledFormElement(nextPropsOrEmpty);\n            }\n            for (var prop in nextPropsOrEmpty) {\n                var lastValue = lastPropsOrEmpty[prop];\n                var nextValue = nextPropsOrEmpty[prop];\n                if (lastValue !== nextValue) {\n                    patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode);\n                }\n            }\n        }\n        if (lastPropsOrEmpty !== EMPTY_OBJ) {\n            for (var prop$1 in lastPropsOrEmpty) {\n                if (isNullOrUndef(nextPropsOrEmpty[prop$1]) && !isNullOrUndef(lastPropsOrEmpty[prop$1])) {\n                    patchProp(prop$1, lastPropsOrEmpty[prop$1], null, dom, isSVG, hasControlledValue, lastVNode);\n                }\n            }\n        }\n    }\n    var nextChildren = nextVNode.children;\n    var nextClassName = nextVNode.className;\n    // inlined patchProps  -- ends --\n    if (lastVNode.className !== nextClassName) {\n        if (isNullOrUndef(nextClassName)) {\n            dom.removeAttribute('class');\n        }\n        else if (isSVG) {\n            dom.setAttribute('class', nextClassName);\n        }\n        else {\n            dom.className = nextClassName;\n        }\n    }\n    if (nextFlags & 4096 /* ContentEditable */) {\n        patchContentEditableChildren(dom, nextChildren);\n    }\n    else {\n        patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, dom, context, isSVG && nextVNode.type !== 'foreignObject', null, lastVNode, lifecycle);\n    }\n    if (isFormElement) {\n        processElement(nextFlags, nextVNode, dom, nextPropsOrEmpty, false, hasControlledValue);\n    }\n    var nextRef = nextVNode.ref;\n    var lastRef = lastVNode.ref;\n    if (lastRef !== nextRef) {\n        unmountRef(lastRef);\n        mountRef(nextRef, dom, lifecycle);\n    }\n}\nfunction replaceOneVNodeWithMultipleVNodes(lastChildren, nextChildren, parentDOM, context, isSVG, lifecycle) {\n    unmount(lastChildren);\n    mountArrayChildren(nextChildren, parentDOM, context, isSVG, findDOMfromVNode(lastChildren, true), lifecycle);\n    removeVNodeDOM(lastChildren, parentDOM);\n}\nfunction patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context, isSVG, nextNode, parentVNode, lifecycle) {\n    switch (lastChildFlags) {\n        case 2 /* HasVNodeChildren */:\n            switch (nextChildFlags) {\n                case 2 /* HasVNodeChildren */:\n                    patch(lastChildren, nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n                    break;\n                case 1 /* HasInvalidChildren */:\n                    remove(lastChildren, parentDOM);\n                    break;\n                case 16 /* HasTextChildren */:\n                    unmount(lastChildren);\n                    setTextContent(parentDOM, nextChildren);\n                    break;\n                default:\n                    replaceOneVNodeWithMultipleVNodes(lastChildren, nextChildren, parentDOM, context, isSVG, lifecycle);\n                    break;\n            }\n            break;\n        case 1 /* HasInvalidChildren */:\n            switch (nextChildFlags) {\n                case 2 /* HasVNodeChildren */:\n                    mount(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n                    break;\n                case 1 /* HasInvalidChildren */:\n                    break;\n                case 16 /* HasTextChildren */:\n                    setTextContent(parentDOM, nextChildren);\n                    break;\n                default:\n                    mountArrayChildren(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n                    break;\n            }\n            break;\n        case 16 /* HasTextChildren */:\n            switch (nextChildFlags) {\n                case 16 /* HasTextChildren */:\n                    patchSingleTextChild(lastChildren, nextChildren, parentDOM);\n                    break;\n                case 2 /* HasVNodeChildren */:\n                    clearDOM(parentDOM);\n                    mount(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n                    break;\n                case 1 /* HasInvalidChildren */:\n                    clearDOM(parentDOM);\n                    break;\n                default:\n                    clearDOM(parentDOM);\n                    mountArrayChildren(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n                    break;\n            }\n            break;\n        default:\n            switch (nextChildFlags) {\n                case 16 /* HasTextChildren */:\n                    unmountAllChildren(lastChildren);\n                    setTextContent(parentDOM, nextChildren);\n                    break;\n                case 2 /* HasVNodeChildren */:\n                    removeAllChildren(parentDOM, parentVNode, lastChildren);\n                    mount(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n                    break;\n                case 1 /* HasInvalidChildren */:\n                    removeAllChildren(parentDOM, parentVNode, lastChildren);\n                    break;\n                default:\n                    var lastLength = lastChildren.length | 0;\n                    var nextLength = nextChildren.length | 0;\n                    // Fast path's for both algorithms\n                    if (lastLength === 0) {\n                        if (nextLength > 0) {\n                            mountArrayChildren(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);\n                        }\n                    }\n                    else if (nextLength === 0) {\n                        removeAllChildren(parentDOM, parentVNode, lastChildren);\n                    }\n                    else if (nextChildFlags === 8 /* HasKeyedChildren */ && lastChildFlags === 8 /* HasKeyedChildren */) {\n                        patchKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength, nextNode, parentVNode, lifecycle);\n                    }\n                    else {\n                        patchNonKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength, nextNode, lifecycle);\n                    }\n                    break;\n            }\n            break;\n    }\n}\nfunction createDidUpdate(instance, lastProps, lastState, snapshot, lifecycle) {\n    lifecycle.push(function () {\n        instance.componentDidUpdate(lastProps, lastState, snapshot);\n    });\n}\nfunction updateClassComponent(instance, nextState, nextProps, parentDOM, context, isSVG, force, nextNode, lifecycle) {\n    var lastState = instance.state;\n    var lastProps = instance.props;\n    var usesNewAPI = Boolean(instance.$N);\n    var hasSCU = isFunction(instance.shouldComponentUpdate);\n    if (usesNewAPI) {\n        nextState = createDerivedState(instance, nextProps, nextState !== lastState ? combineFrom(lastState, nextState) : nextState);\n    }\n    if (force || !hasSCU || (hasSCU && instance.shouldComponentUpdate(nextProps, nextState, context))) {\n        if (!usesNewAPI && isFunction(instance.componentWillUpdate)) {\n            instance.componentWillUpdate(nextProps, nextState, context);\n        }\n        instance.props = nextProps;\n        instance.state = nextState;\n        instance.context = context;\n        var snapshot = null;\n        var nextInput = renderNewInput(instance, nextProps, context);\n        if (usesNewAPI && isFunction(instance.getSnapshotBeforeUpdate)) {\n            snapshot = instance.getSnapshotBeforeUpdate(lastProps, lastState);\n        }\n        patch(instance.$LI, nextInput, parentDOM, instance.$CX, isSVG, nextNode, lifecycle);\n        // Dont update Last input, until patch has been succesfully executed\n        instance.$LI = nextInput;\n        if (isFunction(instance.componentDidUpdate)) {\n            createDidUpdate(instance, lastProps, lastState, snapshot, lifecycle);\n        }\n    }\n    else {\n        instance.props = nextProps;\n        instance.state = nextState;\n        instance.context = context;\n    }\n}\nfunction patchClassComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n    var instance = (nextVNode.children = lastVNode.children);\n    // If Component has crashed, ignore it to stay functional\n    if (isNull(instance)) {\n        return;\n    }\n    instance.$L = lifecycle;\n    var nextProps = nextVNode.props || EMPTY_OBJ;\n    var nextRef = nextVNode.ref;\n    var lastRef = lastVNode.ref;\n    var nextState = instance.state;\n    if (!instance.$N) {\n        if (isFunction(instance.componentWillReceiveProps)) {\n            instance.$BR = true;\n            instance.componentWillReceiveProps(nextProps, context);\n            // If instance component was removed during its own update do nothing.\n            if (instance.$UN) {\n                return;\n            }\n            instance.$BR = false;\n        }\n        if (!isNull(instance.$PS)) {\n            nextState = combineFrom(nextState, instance.$PS);\n            instance.$PS = null;\n        }\n    }\n    updateClassComponent(instance, nextState, nextProps, parentDOM, context, isSVG, false, nextNode, lifecycle);\n    if (lastRef !== nextRef) {\n        unmountRef(lastRef);\n        mountRef(nextRef, instance, lifecycle);\n    }\n}\nfunction patchFunctionalComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle) {\n    var shouldUpdate = true;\n    var nextProps = nextVNode.props || EMPTY_OBJ;\n    var nextRef = nextVNode.ref;\n    var lastProps = lastVNode.props;\n    var nextHooksDefined = !isNullOrUndef(nextRef);\n    var lastInput = lastVNode.children;\n    if (nextHooksDefined && isFunction(nextRef.onComponentShouldUpdate)) {\n        shouldUpdate = nextRef.onComponentShouldUpdate(lastProps, nextProps);\n    }\n    if (shouldUpdate !== false) {\n        if (nextHooksDefined && isFunction(nextRef.onComponentWillUpdate)) {\n            nextRef.onComponentWillUpdate(lastProps, nextProps);\n        }\n        var nextInput = normalizeRoot(renderFunctionalComponent(nextVNode, context));\n        patch(lastInput, nextInput, parentDOM, context, isSVG, nextNode, lifecycle);\n        nextVNode.children = nextInput;\n        if (nextHooksDefined && isFunction(nextRef.onComponentDidUpdate)) {\n            nextRef.onComponentDidUpdate(lastProps, nextProps);\n        }\n    }\n    else {\n        nextVNode.children = lastInput;\n    }\n}\nfunction patchText(lastVNode, nextVNode) {\n    var nextText = nextVNode.children;\n    var dom = (nextVNode.dom = lastVNode.dom);\n    if (nextText !== lastVNode.children) {\n        dom.nodeValue = nextText;\n    }\n}\nfunction patchNonKeyedChildren(lastChildren, nextChildren, dom, context, isSVG, lastChildrenLength, nextChildrenLength, nextNode, lifecycle) {\n    var commonLength = lastChildrenLength > nextChildrenLength ? nextChildrenLength : lastChildrenLength;\n    var i = 0;\n    var nextChild;\n    var lastChild;\n    for (; i < commonLength; ++i) {\n        nextChild = nextChildren[i];\n        lastChild = lastChildren[i];\n        if (nextChild.flags & 16384 /* InUse */) {\n            nextChild = nextChildren[i] = directClone(nextChild);\n        }\n        patch(lastChild, nextChild, dom, context, isSVG, nextNode, lifecycle);\n        lastChildren[i] = nextChild;\n    }\n    if (lastChildrenLength < nextChildrenLength) {\n        for (i = commonLength; i < nextChildrenLength; ++i) {\n            nextChild = nextChildren[i];\n            if (nextChild.flags & 16384 /* InUse */) {\n                nextChild = nextChildren[i] = directClone(nextChild);\n            }\n            mount(nextChild, dom, context, isSVG, nextNode, lifecycle);\n        }\n    }\n    else if (lastChildrenLength > nextChildrenLength) {\n        for (i = commonLength; i < lastChildrenLength; ++i) {\n            remove(lastChildren[i], dom);\n        }\n    }\n}\nfunction patchKeyedChildren(a, b, dom, context, isSVG, aLength, bLength, outerEdge, parentVNode, lifecycle) {\n    var aEnd = aLength - 1;\n    var bEnd = bLength - 1;\n    var j = 0;\n    var aNode = a[j];\n    var bNode = b[j];\n    var nextPos;\n    var nextNode;\n    // Step 1\n    // tslint:disable-next-line\n    outer: {\n        // Sync nodes with the same key at the beginning.\n        while (aNode.key === bNode.key) {\n            if (bNode.flags & 16384 /* InUse */) {\n                b[j] = bNode = directClone(bNode);\n            }\n            patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);\n            a[j] = bNode;\n            ++j;\n            if (j > aEnd || j > bEnd) {\n                break outer;\n            }\n            aNode = a[j];\n            bNode = b[j];\n        }\n        aNode = a[aEnd];\n        bNode = b[bEnd];\n        // Sync nodes with the same key at the end.\n        while (aNode.key === bNode.key) {\n            if (bNode.flags & 16384 /* InUse */) {\n                b[bEnd] = bNode = directClone(bNode);\n            }\n            patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);\n            a[aEnd] = bNode;\n            aEnd--;\n            bEnd--;\n            if (j > aEnd || j > bEnd) {\n                break outer;\n            }\n            aNode = a[aEnd];\n            bNode = b[bEnd];\n        }\n    }\n    if (j > aEnd) {\n        if (j <= bEnd) {\n            nextPos = bEnd + 1;\n            nextNode = nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge;\n            while (j <= bEnd) {\n                bNode = b[j];\n                if (bNode.flags & 16384 /* InUse */) {\n                    b[j] = bNode = directClone(bNode);\n                }\n                ++j;\n                mount(bNode, dom, context, isSVG, nextNode, lifecycle);\n            }\n        }\n    }\n    else if (j > bEnd) {\n        while (j <= aEnd) {\n            remove(a[j++], dom);\n        }\n    }\n    else {\n        patchKeyedChildrenComplex(a, b, context, aLength, bLength, aEnd, bEnd, j, dom, isSVG, outerEdge, parentVNode, lifecycle);\n    }\n}\nfunction patchKeyedChildrenComplex(a, b, context, aLength, bLength, aEnd, bEnd, j, dom, isSVG, outerEdge, parentVNode, lifecycle) {\n    var aNode;\n    var bNode;\n    var nextPos;\n    var i = 0;\n    var aStart = j;\n    var bStart = j;\n    var aLeft = aEnd - j + 1;\n    var bLeft = bEnd - j + 1;\n    var sources = new Int32Array(bLeft + 1);\n    // Keep track if its possible to remove whole DOM using textContent = '';\n    var canRemoveWholeContent = aLeft === aLength;\n    var moved = false;\n    var pos = 0;\n    var patched = 0;\n    // When sizes are small, just loop them through\n    if (bLength < 4 || (aLeft | bLeft) < 32) {\n        for (i = aStart; i <= aEnd; ++i) {\n            aNode = a[i];\n            if (patched < bLeft) {\n                for (j = bStart; j <= bEnd; j++) {\n                    bNode = b[j];\n                    if (aNode.key === bNode.key) {\n                        sources[j - bStart] = i + 1;\n                        if (canRemoveWholeContent) {\n                            canRemoveWholeContent = false;\n                            while (aStart < i) {\n                                remove(a[aStart++], dom);\n                            }\n                        }\n                        if (pos > j) {\n                            moved = true;\n                        }\n                        else {\n                            pos = j;\n                        }\n                        if (bNode.flags & 16384 /* InUse */) {\n                            b[j] = bNode = directClone(bNode);\n                        }\n                        patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);\n                        ++patched;\n                        break;\n                    }\n                }\n                if (!canRemoveWholeContent && j > bEnd) {\n                    remove(aNode, dom);\n                }\n            }\n            else if (!canRemoveWholeContent) {\n                remove(aNode, dom);\n            }\n        }\n    }\n    else {\n        var keyIndex = {};\n        // Map keys by their index\n        for (i = bStart; i <= bEnd; ++i) {\n            keyIndex[b[i].key] = i;\n        }\n        // Try to patch same keys\n        for (i = aStart; i <= aEnd; ++i) {\n            aNode = a[i];\n            if (patched < bLeft) {\n                j = keyIndex[aNode.key];\n                if (j !== void 0) {\n                    if (canRemoveWholeContent) {\n                        canRemoveWholeContent = false;\n                        while (i > aStart) {\n                            remove(a[aStart++], dom);\n                        }\n                    }\n                    sources[j - bStart] = i + 1;\n                    if (pos > j) {\n                        moved = true;\n                    }\n                    else {\n                        pos = j;\n                    }\n                    bNode = b[j];\n                    if (bNode.flags & 16384 /* InUse */) {\n                        b[j] = bNode = directClone(bNode);\n                    }\n                    patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);\n                    ++patched;\n                }\n                else if (!canRemoveWholeContent) {\n                    remove(aNode, dom);\n                }\n            }\n            else if (!canRemoveWholeContent) {\n                remove(aNode, dom);\n            }\n        }\n    }\n    // fast-path: if nothing patched remove all old and add all new\n    if (canRemoveWholeContent) {\n        removeAllChildren(dom, parentVNode, a);\n        mountArrayChildren(b, dom, context, isSVG, outerEdge, lifecycle);\n    }\n    else if (moved) {\n        var seq = lis_algorithm(sources);\n        j = seq.length - 1;\n        for (i = bLeft - 1; i >= 0; i--) {\n            if (sources[i] === 0) {\n                pos = i + bStart;\n                bNode = b[pos];\n                if (bNode.flags & 16384 /* InUse */) {\n                    b[pos] = bNode = directClone(bNode);\n                }\n                nextPos = pos + 1;\n                mount(bNode, dom, context, isSVG, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge, lifecycle);\n            }\n            else if (j < 0 || i !== seq[j]) {\n                pos = i + bStart;\n                bNode = b[pos];\n                nextPos = pos + 1;\n                moveVNodeDOM(bNode, dom, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge);\n            }\n            else {\n                j--;\n            }\n        }\n    }\n    else if (patched !== bLeft) {\n        // when patched count doesn't match b length we need to insert those new ones\n        // loop backwards so we can use insertBefore\n        for (i = bLeft - 1; i >= 0; i--) {\n            if (sources[i] === 0) {\n                pos = i + bStart;\n                bNode = b[pos];\n                if (bNode.flags & 16384 /* InUse */) {\n                    b[pos] = bNode = directClone(bNode);\n                }\n                nextPos = pos + 1;\n                mount(bNode, dom, context, isSVG, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge, lifecycle);\n            }\n        }\n    }\n}\nvar result;\nvar p;\nvar maxLen = 0;\n// https://en.wikipedia.org/wiki/Longest_increasing_subsequence\nfunction lis_algorithm(arr) {\n    var arrI = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var u = 0;\n    var v = 0;\n    var c = 0;\n    var len = arr.length;\n    if (len > maxLen) {\n        maxLen = len;\n        result = new Int32Array(len);\n        p = new Int32Array(len);\n    }\n    for (; i < len; ++i) {\n        arrI = arr[i];\n        if (arrI !== 0) {\n            j = result[k];\n            if (arr[j] < arrI) {\n                p[i] = j;\n                result[++k] = i;\n                continue;\n            }\n            u = 0;\n            v = k;\n            while (u < v) {\n                c = (u + v) >> 1;\n                if (arr[result[c]] < arrI) {\n                    u = c + 1;\n                }\n                else {\n                    v = c;\n                }\n            }\n            if (arrI < arr[result[u]]) {\n                if (u > 0) {\n                    p[i] = result[u - 1];\n                }\n                result[u] = i;\n            }\n        }\n    }\n    u = k + 1;\n    var seq = new Int32Array(u);\n    v = result[u - 1];\n    while (u-- > 0) {\n        seq[u] = v;\n        v = p[v];\n        result[u] = 0;\n    }\n    return seq;\n}\n\nvar hasDocumentAvailable = typeof document !== 'undefined';\nif (hasDocumentAvailable) {\n    /*\n     * Defining $EV and $V properties on Node.prototype\n     * fixes v8 \"wrong map\" de-optimization\n     */\n    if (window.Node) {\n        Node.prototype.$EV = null;\n        Node.prototype.$V = null;\n    }\n}\nfunction __render(input, parentDOM, callback, context) {\n    var lifecycle = [];\n    var rootInput = parentDOM.$V;\n    renderCheck.v = true;\n    if (isNullOrUndef(rootInput)) {\n        if (!isNullOrUndef(input)) {\n            if (input.flags & 16384 /* InUse */) {\n                input = directClone(input);\n            }\n            mount(input, parentDOM, context, false, null, lifecycle);\n            parentDOM.$V = input;\n            rootInput = input;\n        }\n    }\n    else {\n        if (isNullOrUndef(input)) {\n            remove(rootInput, parentDOM);\n            parentDOM.$V = null;\n        }\n        else {\n            if (input.flags & 16384 /* InUse */) {\n                input = directClone(input);\n            }\n            patch(rootInput, input, parentDOM, context, false, null, lifecycle);\n            rootInput = parentDOM.$V = input;\n        }\n    }\n    callAll(lifecycle);\n    renderCheck.v = false;\n    if (isFunction(callback)) {\n        callback();\n    }\n    if (isFunction(options.renderComplete)) {\n        options.renderComplete(rootInput, parentDOM);\n    }\n}\nfunction render(input, parentDOM, callback, context) {\n    if ( callback === void 0 ) callback = null;\n    if ( context === void 0 ) context = EMPTY_OBJ;\n\n    __render(input, parentDOM, callback, context);\n}\nfunction createRenderer(parentDOM) {\n    return function renderer(lastInput, nextInput, callback, context) {\n        if (!parentDOM) {\n            parentDOM = lastInput;\n        }\n        render(nextInput, parentDOM, callback, context);\n    };\n}\n\nvar QUEUE = [];\nvar nextTick = typeof Promise !== 'undefined'\n    ? Promise.resolve().then.bind(Promise.resolve())\n    : function (a) {\n        window.setTimeout(a, 0);\n    };\nvar microTaskPending = false;\nfunction queueStateChanges(component, newState, callback, force) {\n    var pending = component.$PS;\n    if (isFunction(newState)) {\n        newState = newState(pending ? combineFrom(component.state, pending) : component.state, component.props, component.context);\n    }\n    if (isNullOrUndef(pending)) {\n        component.$PS = newState;\n    }\n    else {\n        for (var stateKey in newState) {\n            pending[stateKey] = newState[stateKey];\n        }\n    }\n    if (!component.$BR) {\n        if (!renderCheck.v) {\n            if (QUEUE.length === 0) {\n                applyState(component, force);\n                if (isFunction(callback)) {\n                    callback.call(component);\n                }\n                return;\n            }\n        }\n        if (QUEUE.indexOf(component) === -1) {\n            QUEUE.push(component);\n        }\n        if (force) {\n            component.$F = true;\n        }\n        if (!microTaskPending) {\n            microTaskPending = true;\n            nextTick(rerender);\n        }\n        if (isFunction(callback)) {\n            var QU = component.$QU;\n            if (!QU) {\n                QU = component.$QU = [];\n            }\n            QU.push(callback);\n        }\n    }\n    else if (isFunction(callback)) {\n        component.$L.push(callback.bind(component));\n    }\n}\nfunction callSetStateCallbacks(component) {\n    var queue = component.$QU;\n    for (var i = 0; i < queue.length; ++i) {\n        queue[i].call(component);\n    }\n    component.$QU = null;\n}\nfunction rerender() {\n    var component;\n    microTaskPending = false;\n    while ((component = QUEUE.shift())) {\n        if (!component.$UN) {\n            var force = component.$F;\n            component.$F = false;\n            applyState(component, force);\n            if (component.$QU) {\n                callSetStateCallbacks(component);\n            }\n        }\n    }\n}\nfunction applyState(component, force) {\n    if (force || !component.$BR) {\n        var pendingState = component.$PS;\n        component.$PS = null;\n        var lifecycle = [];\n        renderCheck.v = true;\n        updateClassComponent(component, combineFrom(component.state, pendingState), component.props, findDOMfromVNode(component.$LI, true).parentNode, component.context, component.$SVG, force, null, lifecycle);\n        callAll(lifecycle);\n        renderCheck.v = false;\n    }\n    else {\n        component.state = component.$PS;\n        component.$PS = null;\n    }\n}\nvar Component = function Component(props, context) {\n    // Public\n    this.state = null;\n    // Internal properties\n    this.$BR = false; // BLOCK RENDER\n    this.$BS = true; // BLOCK STATE\n    this.$PS = null; // PENDING STATE (PARTIAL or FULL)\n    this.$LI = null; // LAST INPUT\n    this.$UN = false; // UNMOUNTED\n    this.$CX = null; // CHILDCONTEXT\n    this.$QU = null; // QUEUE\n    this.$N = false; // Uses new lifecycle API Flag\n    this.$L = null; // Current lifecycle of this component\n    this.$SVG = false; // Flag to keep track if component is inside SVG tree\n    this.$F = false; // Force update flag\n    this.props = props || EMPTY_OBJ;\n    this.context = context || EMPTY_OBJ; // context should not be mutable\n};\nComponent.prototype.forceUpdate = function forceUpdate (callback) {\n    if (this.$UN) {\n        return;\n    }\n    // Do not allow double render during force update\n    queueStateChanges(this, {}, callback, true);\n};\nComponent.prototype.setState = function setState (newState, callback) {\n    if (this.$UN) {\n        return;\n    }\n    if (!this.$BS) {\n        queueStateChanges(this, newState, callback, false);\n    }\n};\nComponent.prototype.render = function render (_nextProps, _nextState, _nextContext) {\n    return null;\n};\n\nvar version = \"7.4.8\";\n\nexport { Component, EMPTY_OBJ, Fragment, createClassComponentInstance as _CI, normalizeRoot as _HI, mount as _M, mountClassComponentCallbacks as _MCCC, mountElement as _ME, mountFunctionalComponentCallbacks as _MFCC, mountProps as _MP, mountRef as _MR, renderFunctionalComponent as _RFC, __render, createComponentVNode, createFragment, createPortal, createRef, createRenderer, createTextVNode, createVNode, directClone, findDOMfromVNode, forwardRef, getFlagsForElementVnode, linkEvent, normalizeProps, options, render, rerender, version };\n","export * from './dist/index.esm.js';\n\nif (process.env.NODE_ENV !== 'production') {\n  console.warn('You are running production build of Inferno in development mode. Use dev:module entry point.');\n}\n","// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nmodule.exports = ws\n","module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    var list_length = list => {\n        var len = 0;\n        while (list._ === 'List.cons') {\n            len += 1;\n            list = list.tail;\n        };\n        return BigInt(len);\n    };\n    var nat_to_bits = n => {\n        return n === 0n ? '' : n.toString(2);\n    };\n    var kind_name_to_bits = name => {\n        const TABLE = {\n            'A': '000000',\n            'B': '100000',\n            'C': '010000',\n            'D': '110000',\n            'E': '001000',\n            'F': '101000',\n            'G': '011000',\n            'H': '111000',\n            'I': '000100',\n            'J': '100100',\n            'K': '010100',\n            'L': '110100',\n            'M': '001100',\n            'N': '101100',\n            'O': '011100',\n            'P': '111100',\n            'Q': '000010',\n            'R': '100010',\n            'S': '010010',\n            'T': '110010',\n            'U': '001010',\n            'V': '101010',\n            'W': '011010',\n            'X': '111010',\n            'Y': '000110',\n            'Z': '100110',\n            'a': '010110',\n            'b': '110110',\n            'c': '001110',\n            'd': '101110',\n            'e': '011110',\n            'f': '111110',\n            'g': '000001',\n            'h': '100001',\n            'i': '010001',\n            'j': '110001',\n            'k': '001001',\n            'l': '101001',\n            'm': '011001',\n            'n': '111001',\n            'o': '000101',\n            'p': '100101',\n            'q': '010101',\n            'r': '110101',\n            's': '001101',\n            't': '101101',\n            'u': '011101',\n            'v': '111101',\n            'w': '000011',\n            'x': '100011',\n            'y': '010011',\n            'z': '110011',\n            '0': '001011',\n            '1': '101011',\n            '2': '011011',\n            '3': '111011',\n            '4': '000111',\n            '5': '100111',\n            '6': '010111',\n            '7': '110111',\n            '8': '001111',\n            '9': '101111',\n            '.': '011111',\n            '_': '111111',\n        }\n        var a = '';\n        for (var i = name.length - 1; i >= 0; --i) {\n            a += TABLE[name[i]];\n        }\n        return a;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $22 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $18 = c0;\n                return $18;\n            } else {\n                var $19 = self.charCodeAt(0);\n                var $20 = self.slice(1);\n                var $21 = c1($19)($20);\n                return $21;\n            };\n        })();\n        return $22;\n    });\n    var run = (p) => {\n        if (typeof window === 'undefined') {\n            var rl = eval(\"require('readline')\").createInterface({\n                input: process.stdin,\n                output: process.stdout,\n                terminal: false\n            });\n            var fs = eval(\"require('fs')\");\n            var pc = eval(\"process\");\n            var ht = eval(\"require('http')\");\n            var hs = eval(\"require('https')\");\n        } else {\n            var rl = {\n                question: (x, f) => f(''),\n                close: () => {}\n            };\n            var fs = {\n                readFileSync: () => ''\n            };\n            var pc = {\n                exit: () => {},\n                argv: []\n            };\n            var ht = null;\n            var hs = null;\n        };\n        return run_io({\n            rl,\n            fs,\n            pc,\n            ht,\n            hs\n        }, p).then((x) => {\n            rl.close();\n            return x;\n        }).catch((e) => {\n            rl.close();\n            throw e;\n        });\n    };\n    var set_file = (lib, param) => {\n        var path = '';\n        for (var i = 0; i < param.length && param[i] !== '='; ++i) {\n            path += param[i];\n        };\n        var data = param.slice(i + 1);\n        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {\n            recursive: true\n        });\n        lib.fs.writeFileSync(path, data);\n        return '';\n    };\n    var del_file = (lib, param) => {\n        try {\n            lib.fs.unlinkSync(param);\n            return '';\n        } catch (e) {\n            if (e.message.indexOf('EPERM') !== -1) {\n                lib.fs.rmdirSync(param);\n                return '';\n            } else {\n                throw e;\n            }\n        }\n    };\n    var get_file = (lib, param) => {\n        return lib.fs.readFileSync(param, 'utf8');\n    }\n    var get_dir = (lib, param) => {\n        return lib.fs.readdirSync(param).join(';');\n    };\n    var get_file_mtime = (lib, param) => {\n        return String(lib.fs.statSync(param).mtime.getTime());\n    };\n    var request = (lib, param) => {\n        if (typeof fetch === 'undefined') {\n            return new Promise((res, err) => {\n                (/^https/.test(param) ? lib.hs : lib.ht).get(param, r => {\n                    let data = '';\n                    r.on('data', chunk => {\n                        data += chunk;\n                    });\n                    r.on('end', () => res(data));\n                }).on('error', e => res(''));\n            });\n        } else {\n            return fetch(param).then(res => res.text()).catch(e => '');\n        }\n    }\n    var file_error = e => {\n        if (e.message.indexOf('NOENT') !== -1) {\n            return '';\n        } else {\n            throw e;\n        }\n    };\n    var io_action = {\n        print: async (lib, param) => {\n            console.log(param);\n            return '';\n        },\n        put_string: async (lib, param) => {\n            process.stdout.write(param);\n            return '';\n        },\n        get_file: async (lib, param) => {\n            try {\n                return get_file(lib, param);\n            } catch (e) {\n                return file_error(e);\n            }\n        },\n        set_file: async (lib, param) => {\n            try {\n                return set_file(lib, param)\n            } catch (e) {\n                return file_error(e);\n            }\n        },\n        del_file: async (lib, param) => {\n            try {\n                return del_file(lib, param);\n            } catch (e) {\n                return file_error(e);\n            }\n        },\n        get_dir: async (lib, param) => {\n            try {\n                return get_dir(lib, param);\n            } catch (e) {\n                return file_error(e);\n            }\n        },\n        get_file_mtime: async (lib, param) => {\n            try {\n                return get_file_mtime(lib, param);\n            } catch (e) {\n                return file_error(e);\n            }\n        },\n        get_time: async (lib, param) => {\n            return String(Date.now());\n        },\n        exit: async (lib, param) => {\n            lib.pc.exit();\n            return '';\n        },\n        request: async (lib, param) => {\n            return request(lib, param);\n        },\n        get_time: async (lib, param) => {\n            return String(Date.now());\n        },\n        get_line: async (lib, param) => {\n            return await new Promise((res, err) => {\n                lib.rl.question(p.param, (line) => res(line));\n            });\n        },\n        get_args: async (lib, param) => {\n            return lib.pc.argv[2] || '';\n        },\n    };\n    var run_io = async (lib, io, depth = 0) => {\n        switch (io._) {\n            case 'IO.end':\n                return Promise.resolve(io.value);\n            case 'IO.ask':\n                var action = io_action[io.query];\n                var answer = await action(lib, io.param);\n                return await run_io(lib, io.then(answer), depth + 1);\n        }\n    };\n\n    function IO$(_A$1) {\n        var $23 = null;\n        return $23;\n    };\n    const IO = x0 => IO$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $24 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $24;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $26 = self.value;\n                var $27 = _f$4($26);\n                var $25 = $27;\n                break;\n            case 'IO.ask':\n                var $28 = self.query;\n                var $29 = self.param;\n                var $30 = self.then;\n                var $31 = IO$ask$($28, $29, (_x$8 => {\n                    var $32 = IO$bind$($30(_x$8), _f$4);\n                    return $32;\n                }));\n                var $25 = $31;\n                break;\n        };\n        return $25;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $33 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $33;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $34 = _new$2(IO$bind)(IO$end);\n        return $34;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function Maybe$(_A$1) {\n        var $35 = null;\n        return $35;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function BitsMap$(_A$1) {\n        var $36 = null;\n        return $36;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const BitsMap$get = a0 => a1 => (bitsmap_get(a0, a1));\n    const Bits$e = '';\n    const Bool$false = false;\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Bool$true = true;\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $38 = Bool$true;\n                var $37 = $38;\n                break;\n            case 'Cmp.gtn':\n                var $39 = Bool$false;\n                var $37 = $39;\n                break;\n        };\n        return $37;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $41 = self.pred;\n                var $42 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $44 = self.pred;\n                            var $45 = (_a$pred$10 => {\n                                var $46 = Word$cmp$go$(_a$pred$10, $44, _c$4);\n                                return $46;\n                            });\n                            var $43 = $45;\n                            break;\n                        case 'Word.i':\n                            var $47 = self.pred;\n                            var $48 = (_a$pred$10 => {\n                                var $49 = Word$cmp$go$(_a$pred$10, $47, Cmp$ltn);\n                                return $49;\n                            });\n                            var $43 = $48;\n                            break;\n                        case 'Word.e':\n                            var $50 = (_a$pred$8 => {\n                                var $51 = _c$4;\n                                return $51;\n                            });\n                            var $43 = $50;\n                            break;\n                    };\n                    var $43 = $43($41);\n                    return $43;\n                });\n                var $40 = $42;\n                break;\n            case 'Word.i':\n                var $52 = self.pred;\n                var $53 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $55 = self.pred;\n                            var $56 = (_a$pred$10 => {\n                                var $57 = Word$cmp$go$(_a$pred$10, $55, Cmp$gtn);\n                                return $57;\n                            });\n                            var $54 = $56;\n                            break;\n                        case 'Word.i':\n                            var $58 = self.pred;\n                            var $59 = (_a$pred$10 => {\n                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);\n                                return $60;\n                            });\n                            var $54 = $59;\n                            break;\n                        case 'Word.e':\n                            var $61 = (_a$pred$8 => {\n                                var $62 = _c$4;\n                                return $62;\n                            });\n                            var $54 = $61;\n                            break;\n                    };\n                    var $54 = $54($52);\n                    return $54;\n                });\n                var $40 = $53;\n                break;\n            case 'Word.e':\n                var $63 = (_b$5 => {\n                    var $64 = _c$4;\n                    return $64;\n                });\n                var $40 = $63;\n                break;\n        };\n        var $40 = $40(_b$3);\n        return $40;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $65 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $65;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $66 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $66;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n\n    function Nat$succ$(_pred$1) {\n        var $67 = 1n + _pred$1;\n        return $67;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U16$lte = a0 => a1 => (a0 <= a1);\n\n    function U16$btw$(_a$1, _b$2, _c$3) {\n        var $68 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));\n        return $68;\n    };\n    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);\n\n    function U16$new$(_value$1) {\n        var $69 = word_to_u16(_value$1);\n        return $69;\n    };\n    const U16$new = x0 => U16$new$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$(_size$1) {\n        var $70 = null;\n        return $70;\n    };\n    const Word = x0 => Word$(x0);\n\n    function Word$i$(_pred$2) {\n        var $71 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $71;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$o$(_pred$2) {\n        var $72 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $72;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $74 = self.pred;\n                var $75 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $77 = self.pred;\n                            var $78 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $80 = Word$i$(Word$subber$(_a$pred$10, $77, Bool$true));\n                                    var $79 = $80;\n                                } else {\n                                    var $81 = Word$o$(Word$subber$(_a$pred$10, $77, Bool$false));\n                                    var $79 = $81;\n                                };\n                                return $79;\n                            });\n                            var $76 = $78;\n                            break;\n                        case 'Word.i':\n                            var $82 = self.pred;\n                            var $83 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $85 = Word$o$(Word$subber$(_a$pred$10, $82, Bool$true));\n                                    var $84 = $85;\n                                } else {\n                                    var $86 = Word$i$(Word$subber$(_a$pred$10, $82, Bool$true));\n                                    var $84 = $86;\n                                };\n                                return $84;\n                            });\n                            var $76 = $83;\n                            break;\n                        case 'Word.e':\n                            var $87 = (_a$pred$8 => {\n                                var $88 = Word$e;\n                                return $88;\n                            });\n                            var $76 = $87;\n                            break;\n                    };\n                    var $76 = $76($74);\n                    return $76;\n                });\n                var $73 = $75;\n                break;\n            case 'Word.i':\n                var $89 = self.pred;\n                var $90 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $92 = self.pred;\n                            var $93 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $95 = Word$o$(Word$subber$(_a$pred$10, $92, Bool$false));\n                                    var $94 = $95;\n                                } else {\n                                    var $96 = Word$i$(Word$subber$(_a$pred$10, $92, Bool$false));\n                                    var $94 = $96;\n                                };\n                                return $94;\n                            });\n                            var $91 = $93;\n                            break;\n                        case 'Word.i':\n                            var $97 = self.pred;\n                            var $98 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $100 = Word$i$(Word$subber$(_a$pred$10, $97, Bool$true));\n                                    var $99 = $100;\n                                } else {\n                                    var $101 = Word$o$(Word$subber$(_a$pred$10, $97, Bool$false));\n                                    var $99 = $101;\n                                };\n                                return $99;\n                            });\n                            var $91 = $98;\n                            break;\n                        case 'Word.e':\n                            var $102 = (_a$pred$8 => {\n                                var $103 = Word$e;\n                                return $103;\n                            });\n                            var $91 = $102;\n                            break;\n                    };\n                    var $91 = $91($89);\n                    return $91;\n                });\n                var $73 = $90;\n                break;\n            case 'Word.e':\n                var $104 = (_b$5 => {\n                    var $105 = Word$e;\n                    return $105;\n                });\n                var $73 = $104;\n                break;\n        };\n        var $73 = $73(_b$3);\n        return $73;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $106 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $106;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U16$sub = a0 => a1 => ((a0 - a1) & 0xFFFF);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $107 = _x$4;\n                    return $107;\n                } else {\n                    var $108 = (self - 1n);\n                    var $109 = Nat$apply$($108, _f$3, _f$3(_x$4));\n                    return $109;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $111 = self.pred;\n                var $112 = Word$i$($111);\n                var $110 = $112;\n                break;\n            case 'Word.i':\n                var $113 = self.pred;\n                var $114 = Word$o$(Word$inc$($113));\n                var $110 = $114;\n                break;\n            case 'Word.e':\n                var $115 = Word$e;\n                var $110 = $115;\n                break;\n        };\n        return $110;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $117 = Word$e;\n            var $116 = $117;\n        } else {\n            var $118 = (self - 1n);\n            var $119 = Word$o$(Word$zero$($118));\n            var $116 = $119;\n        };\n        return $116;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $120 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $120;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $122 = self.pred;\n                var $123 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $125 = self.pred;\n                            var $126 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $128 = Word$i$(Word$adder$(_a$pred$10, $125, Bool$false));\n                                    var $127 = $128;\n                                } else {\n                                    var $129 = Word$o$(Word$adder$(_a$pred$10, $125, Bool$false));\n                                    var $127 = $129;\n                                };\n                                return $127;\n                            });\n                            var $124 = $126;\n                            break;\n                        case 'Word.i':\n                            var $130 = self.pred;\n                            var $131 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $133 = Word$o$(Word$adder$(_a$pred$10, $130, Bool$true));\n                                    var $132 = $133;\n                                } else {\n                                    var $134 = Word$i$(Word$adder$(_a$pred$10, $130, Bool$false));\n                                    var $132 = $134;\n                                };\n                                return $132;\n                            });\n                            var $124 = $131;\n                            break;\n                        case 'Word.e':\n                            var $135 = (_a$pred$8 => {\n                                var $136 = Word$e;\n                                return $136;\n                            });\n                            var $124 = $135;\n                            break;\n                    };\n                    var $124 = $124($122);\n                    return $124;\n                });\n                var $121 = $123;\n                break;\n            case 'Word.i':\n                var $137 = self.pred;\n                var $138 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $140 = self.pred;\n                            var $141 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $143 = Word$o$(Word$adder$(_a$pred$10, $140, Bool$true));\n                                    var $142 = $143;\n                                } else {\n                                    var $144 = Word$i$(Word$adder$(_a$pred$10, $140, Bool$false));\n                                    var $142 = $144;\n                                };\n                                return $142;\n                            });\n                            var $139 = $141;\n                            break;\n                        case 'Word.i':\n                            var $145 = self.pred;\n                            var $146 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $148 = Word$i$(Word$adder$(_a$pred$10, $145, Bool$true));\n                                    var $147 = $148;\n                                } else {\n                                    var $149 = Word$o$(Word$adder$(_a$pred$10, $145, Bool$true));\n                                    var $147 = $149;\n                                };\n                                return $147;\n                            });\n                            var $139 = $146;\n                            break;\n                        case 'Word.e':\n                            var $150 = (_a$pred$8 => {\n                                var $151 = Word$e;\n                                return $151;\n                            });\n                            var $139 = $150;\n                            break;\n                    };\n                    var $139 = $139($137);\n                    return $139;\n                });\n                var $121 = $138;\n                break;\n            case 'Word.e':\n                var $152 = (_b$5 => {\n                    var $153 = Word$e;\n                    return $153;\n                });\n                var $121 = $152;\n                break;\n        };\n        var $121 = $121(_b$3);\n        return $121;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $154 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $154;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $156 = Bool$false;\n                var $155 = $156;\n                break;\n            case 'Cmp.eql':\n                var $157 = Bool$true;\n                var $155 = $157;\n                break;\n        };\n        return $155;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $158 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $158;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $160 = self.pred;\n                var $161 = (Word$to_bits$($160) + '0');\n                var $159 = $161;\n                break;\n            case 'Word.i':\n                var $162 = self.pred;\n                var $163 = (Word$to_bits$($162) + '1');\n                var $159 = $163;\n                break;\n            case 'Word.e':\n                var $164 = Bits$e;\n                var $159 = $164;\n                break;\n        };\n        return $159;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $166 = Word$e;\n            var $165 = $166;\n        } else {\n            var $167 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $169 = self.pred;\n                    var $170 = Word$o$(Word$trim$($167, $169));\n                    var $168 = $170;\n                    break;\n                case 'Word.i':\n                    var $171 = self.pred;\n                    var $172 = Word$i$(Word$trim$($167, $171));\n                    var $168 = $172;\n                    break;\n                case 'Word.e':\n                    var $173 = Word$o$(Word$trim$($167, Word$e));\n                    var $168 = $173;\n                    break;\n            };\n            var $165 = $168;\n        };\n        return $165;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Bits$reverse$tco$(_a$1, _r$2) {\n        var Bits$reverse$tco$ = (_a$1, _r$2) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _r$2]\n        });\n        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);\n        var arg = [_a$1, _r$2];\n        while (true) {\n            let [_a$1, _r$2] = arg;\n            var R = (() => {\n                var self = _a$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $174 = self.slice(0, -1);\n                        var $175 = Bits$reverse$tco$($174, (_r$2 + '0'));\n                        return $175;\n                    case 'i':\n                        var $176 = self.slice(0, -1);\n                        var $177 = Bits$reverse$tco$($176, (_r$2 + '1'));\n                        return $177;\n                    case 'e':\n                        var $178 = _r$2;\n                        return $178;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);\n\n    function Bits$reverse$(_a$1) {\n        var $179 = Bits$reverse$tco$(_a$1, Bits$e);\n        return $179;\n    };\n    const Bits$reverse = x0 => Bits$reverse$(x0);\n    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));\n\n    function Kind$Map$get$(_name$2, _map$3) {\n        var $180 = (bitsmap_get((kind_name_to_bits(_name$2)), _map$3));\n        return $180;\n    };\n    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);\n\n    function Parser$Reply$(_V$1) {\n        var $181 = null;\n        return $181;\n    };\n    const Parser$Reply = x0 => Parser$Reply$(x0);\n\n    function List$(_A$1) {\n        var $182 = null;\n        return $182;\n    };\n    const List = x0 => List$(x0);\n\n    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {\n        var $183 = ({\n            _: 'Parser.Reply.error',\n            'idx': _idx$2,\n            'code': _code$3,\n            'err': _err$4\n        });\n        return $183;\n    };\n    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);\n\n    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {\n        var $184 = ({\n            _: 'Parser.Reply.value',\n            'idx': _idx$2,\n            'code': _code$3,\n            'val': _val$4\n        });\n        return $184;\n    };\n    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function List$cons$(_head$2, _tail$3) {\n        var $185 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $185;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {\n        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({\n            ctr: 'TCO',\n            arg: [_parse$2, _values$3, _idx$4, _code$5]\n        });\n        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);\n        var arg = [_parse$2, _values$3, _idx$4, _code$5];\n        while (true) {\n            let [_parse$2, _values$3, _idx$4, _code$5] = arg;\n            var R = (() => {\n                var self = _parse$2(_idx$4)(_code$5);\n                switch (self._) {\n                    case 'Parser.Reply.value':\n                        var $186 = self.idx;\n                        var $187 = self.code;\n                        var $188 = self.val;\n                        var $189 = Parser$many$go$(_parse$2, (_xs$9 => {\n                            var $190 = _values$3(List$cons$($188, _xs$9));\n                            return $190;\n                        }), $186, $187);\n                        return $189;\n                    case 'Parser.Reply.error':\n                        var $191 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));\n                        return $191;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);\n\n    function Parser$many$(_parser$2) {\n        var $192 = Parser$many$go(_parser$2)((_x$3 => {\n            var $193 = _x$3;\n            return $193;\n        }));\n        return $192;\n    };\n    const Parser$many = x0 => Parser$many$(x0);\n\n    function Parser$many1$(_parser$2, _idx$3, _code$4) {\n        var self = _parser$2(_idx$3)(_code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $195 = self.idx;\n                var $196 = self.code;\n                var $197 = self.err;\n                var $198 = Parser$Reply$error$($195, $196, $197);\n                var $194 = $198;\n                break;\n            case 'Parser.Reply.value':\n                var $199 = self.idx;\n                var $200 = self.code;\n                var $201 = self.val;\n                var self = Parser$many$(_parser$2)($199)($200);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $203 = self.idx;\n                        var $204 = self.code;\n                        var $205 = self.err;\n                        var $206 = Parser$Reply$error$($203, $204, $205);\n                        var $202 = $206;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $207 = self.idx;\n                        var $208 = self.code;\n                        var $209 = self.val;\n                        var $210 = Parser$Reply$value$($207, $208, List$cons$($201, $209));\n                        var $202 = $210;\n                        break;\n                };\n                var $194 = $202;\n                break;\n        };\n        return $194;\n    };\n    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);\n\n    function Parser$digit$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $212 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n            var $211 = $212;\n        } else {\n            var $213 = self.charCodeAt(0);\n            var $214 = self.slice(1);\n            var _sidx$5 = Nat$succ$(_idx$1);\n            var self = ($213 === 48);\n            if (self) {\n                var $216 = Parser$Reply$value$(_sidx$5, $214, 0n);\n                var $215 = $216;\n            } else {\n                var self = ($213 === 49);\n                if (self) {\n                    var $218 = Parser$Reply$value$(_sidx$5, $214, 1n);\n                    var $217 = $218;\n                } else {\n                    var self = ($213 === 50);\n                    if (self) {\n                        var $220 = Parser$Reply$value$(_sidx$5, $214, 2n);\n                        var $219 = $220;\n                    } else {\n                        var self = ($213 === 51);\n                        if (self) {\n                            var $222 = Parser$Reply$value$(_sidx$5, $214, 3n);\n                            var $221 = $222;\n                        } else {\n                            var self = ($213 === 52);\n                            if (self) {\n                                var $224 = Parser$Reply$value$(_sidx$5, $214, 4n);\n                                var $223 = $224;\n                            } else {\n                                var self = ($213 === 53);\n                                if (self) {\n                                    var $226 = Parser$Reply$value$(_sidx$5, $214, 5n);\n                                    var $225 = $226;\n                                } else {\n                                    var self = ($213 === 54);\n                                    if (self) {\n                                        var $228 = Parser$Reply$value$(_sidx$5, $214, 6n);\n                                        var $227 = $228;\n                                    } else {\n                                        var self = ($213 === 55);\n                                        if (self) {\n                                            var $230 = Parser$Reply$value$(_sidx$5, $214, 7n);\n                                            var $229 = $230;\n                                        } else {\n                                            var self = ($213 === 56);\n                                            if (self) {\n                                                var $232 = Parser$Reply$value$(_sidx$5, $214, 8n);\n                                                var $231 = $232;\n                                            } else {\n                                                var self = ($213 === 57);\n                                                if (self) {\n                                                    var $234 = Parser$Reply$value$(_sidx$5, $214, 9n);\n                                                    var $233 = $234;\n                                                } else {\n                                                    var $235 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n                                                    var $233 = $235;\n                                                };\n                                                var $231 = $233;\n                                            };\n                                            var $229 = $231;\n                                        };\n                                        var $227 = $229;\n                                    };\n                                    var $225 = $227;\n                                };\n                                var $223 = $225;\n                            };\n                            var $221 = $223;\n                        };\n                        var $219 = $221;\n                    };\n                    var $217 = $219;\n                };\n                var $215 = $217;\n            };\n            var $211 = $215;\n        };\n        return $211;\n    };\n    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {\n        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({\n            ctr: 'TCO',\n            arg: [_b$1, _ds$2, _p$3, _res$4]\n        });\n        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);\n        var arg = [_b$1, _ds$2, _p$3, _res$4];\n        while (true) {\n            let [_b$1, _ds$2, _p$3, _res$4] = arg;\n            var R = (() => {\n                var self = _ds$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $236 = self.head;\n                        var $237 = self.tail;\n                        var $238 = Nat$from_base$go$(_b$1, $237, (_b$1 * _p$3), (($236 * _p$3) + _res$4));\n                        return $238;\n                    case 'List.nil':\n                        var $239 = _res$4;\n                        return $239;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);\n\n    function List$reverse$go$(_xs$2, _res$3) {\n        var List$reverse$go$ = (_xs$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _res$3]\n        });\n        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);\n        var arg = [_xs$2, _res$3];\n        while (true) {\n            let [_xs$2, _res$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $240 = self.head;\n                        var $241 = self.tail;\n                        var $242 = List$reverse$go$($241, List$cons$($240, _res$3));\n                        return $242;\n                    case 'List.nil':\n                        var $243 = _res$3;\n                        return $243;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);\n\n    function List$reverse$(_xs$2) {\n        var $244 = List$reverse$go$(_xs$2, List$nil);\n        return $244;\n    };\n    const List$reverse = x0 => List$reverse$(x0);\n\n    function Nat$from_base$(_base$1, _ds$2) {\n        var $245 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);\n        return $245;\n    };\n    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);\n\n    function Parser$nat$(_idx$1, _code$2) {\n        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $247 = self.idx;\n                var $248 = self.code;\n                var $249 = self.err;\n                var $250 = Parser$Reply$error$($247, $248, $249);\n                var $246 = $250;\n                break;\n            case 'Parser.Reply.value':\n                var $251 = self.idx;\n                var $252 = self.code;\n                var $253 = self.val;\n                var $254 = Parser$Reply$value$($251, $252, Nat$from_base$(10n, $253));\n                var $246 = $254;\n                break;\n        };\n        return $246;\n    };\n    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);\n\n    function Nat$read$(_str$1) {\n        var _p$2 = Parser$nat$(0n, _str$1);\n        var self = _p$2;\n        switch (self._) {\n            case 'Parser.Reply.value':\n                var $256 = self.val;\n                var $257 = $256;\n                var $255 = $257;\n                break;\n            case 'Parser.Reply.error':\n                var $258 = 0n;\n                var $255 = $258;\n                break;\n        };\n        return $255;\n    };\n    const Nat$read = x0 => Nat$read$(x0);\n    const IO$get_time = IO$ask$(\"get_time\", \"\", (_time$1 => {\n        var $259 = IO$end$(Nat$read$(_time$1));\n        return $259;\n    }));\n\n    function Maybe$some$(_value$2) {\n        var $260 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $260;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n\n    function Kind$Synth$load$cached$is_loop$(_name$1, _defs$2) {\n        var self = Kind$Map$get$(_name$1, _defs$2);\n        switch (self._) {\n            case 'Maybe.some':\n                var $262 = self.value;\n                var self = $262;\n                switch (self._) {\n                    case 'Kind.Def.new':\n                        var $264 = self.stat;\n                        var self = $264;\n                        switch (self._) {\n                            case 'Kind.Status.done':\n                                var $266 = self.cached;\n                                var $267 = $266;\n                                var $265 = $267;\n                                break;\n                            case 'Kind.Status.init':\n                            case 'Kind.Status.wait':\n                            case 'Kind.Status.fail':\n                                var $268 = Bool$false;\n                                var $265 = $268;\n                                break;\n                        };\n                        var $263 = $265;\n                        break;\n                };\n                var $261 = $263;\n                break;\n            case 'Maybe.none':\n                var $269 = Bool$false;\n                var $261 = $269;\n                break;\n        };\n        return $261;\n    };\n    const Kind$Synth$load$cached$is_loop = x0 => x1 => Kind$Synth$load$cached$is_loop$(x0, x1);\n\n    function IO$get_file$(_name$1) {\n        var $270 = IO$ask$(\"get_file\", _name$1, (_file$2 => {\n            var $271 = IO$end$(_file$2);\n            return $271;\n        }));\n        return $270;\n    };\n    const IO$get_file = x0 => IO$get_file$(x0);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $272 = (String.fromCharCode(_head$1) + _tail$2);\n        return $272;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n    const Bool$not = a0 => (!a0);\n\n    function String$is_empty$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $274 = Bool$true;\n            var $273 = $274;\n        } else {\n            var $275 = self.charCodeAt(0);\n            var $276 = self.slice(1);\n            var $277 = Bool$false;\n            var $273 = $277;\n        };\n        return $273;\n    };\n    const String$is_empty = x0 => String$is_empty$(x0);\n\n    function IO$get_file_mtime$(_name$1) {\n        var $278 = IO$ask$(\"get_file_mtime\", _name$1, (_file$2 => {\n            var $279 = IO$end$(_file$2);\n            return $279;\n        }));\n        return $278;\n    };\n    const IO$get_file_mtime = x0 => IO$get_file_mtime$(x0);\n    const String$eql = a0 => a1 => (a0 === a1);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $280 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $280;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Maybe$bind$(_m$3, _f$4) {\n        var self = _m$3;\n        switch (self._) {\n            case 'Maybe.some':\n                var $282 = self.value;\n                var $283 = _f$4($282);\n                var $281 = $283;\n                break;\n            case 'Maybe.none':\n                var $284 = Maybe$none;\n                var $281 = $284;\n                break;\n        };\n        return $281;\n    };\n    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);\n\n    function Maybe$monad$(_new$2) {\n        var $285 = _new$2(Maybe$bind)(Maybe$some);\n        return $285;\n    };\n    const Maybe$monad = x0 => Maybe$monad$(x0);\n\n    function Pair$(_A$1, _B$2) {\n        var $286 = null;\n        return $286;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n    const Unit$new = null;\n    const Bool$or = a0 => a1 => (a0 || a1);\n\n    function Kind$Core$read$spaces$(_code$1) {\n        var Kind$Core$read$spaces$ = (_code$1) => ({\n            ctr: 'TCO',\n            arg: [_code$1]\n        });\n        var Kind$Core$read$spaces = _code$1 => Kind$Core$read$spaces$(_code$1);\n        var arg = [_code$1];\n        while (true) {\n            let [_code$1] = arg;\n            var R = (() => {\n                var self = _code$1;\n                if (self.length === 0) {\n                    var $287 = Pair$new$(_code$1, Unit$new);\n                    return $287;\n                } else {\n                    var $288 = self.charCodeAt(0);\n                    var $289 = self.slice(1);\n                    var _is_space$4 = (($288 === 32) || (($288 === 10) || (($288 === 13) || (($288 === 9) || (($288 === 11) || (($288 === 12) || Bool$false))))));\n                    var self = _is_space$4;\n                    if (self) {\n                        var $291 = Kind$Core$read$spaces$($289);\n                        var $290 = $291;\n                    } else {\n                        var $292 = Pair$new$(_code$1, Unit$new);\n                        var $290 = $292;\n                    };\n                    return $290;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Core$read$spaces = x0 => Kind$Core$read$spaces$(x0);\n\n    function Kind$Term$ref$(_name$1) {\n        var $293 = ({\n            _: 'Kind.Term.ref',\n            'name': _name$1\n        });\n        return $293;\n    };\n    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);\n\n    function Char$eql$(_a$1, _b$2) {\n        var $294 = (_a$1 === _b$2);\n        return $294;\n    };\n    const Char$eql = x0 => x1 => Char$eql$(x0, x1);\n    const Kind$Term$typ = ({\n        _: 'Kind.Term.typ'\n    });\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $296 = Bool$false;\n                var $295 = $296;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $297 = Bool$true;\n                var $295 = $297;\n                break;\n        };\n        return $295;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $298 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $298;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n    const U16$gte = a0 => a1 => (a0 >= a1);\n\n    function Cmp$as_ltn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $300 = Bool$true;\n                var $299 = $300;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $301 = Bool$false;\n                var $299 = $301;\n                break;\n        };\n        return $299;\n    };\n    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);\n\n    function Word$ltn$(_a$2, _b$3) {\n        var $302 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));\n        return $302;\n    };\n    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);\n    const U16$ltn = a0 => a1 => (a0 < a1);\n\n    function Kind$Core$read$is_name$(_chr$1) {\n        var $303 = (((_chr$1 >= 46) && (_chr$1 <= 47)) || (((_chr$1 >= 48) && (_chr$1 < 58)) || (((_chr$1 >= 65) && (_chr$1 < 91)) || (((_chr$1 >= 95) && (_chr$1 < 96)) || (((_chr$1 >= 97) && (_chr$1 < 123)) || Bool$false)))));\n        return $303;\n    };\n    const Kind$Core$read$is_name = x0 => Kind$Core$read$is_name$(x0);\n\n    function Kind$Core$read$name$(_code$1) {\n        var self = _code$1;\n        if (self.length === 0) {\n            var $305 = Pair$new$(_code$1, \"\");\n            var $304 = $305;\n        } else {\n            var $306 = self.charCodeAt(0);\n            var $307 = self.slice(1);\n            var self = Kind$Core$read$is_name$($306);\n            if (self) {\n                var self = Kind$Core$read$name$($307);\n                switch (self._) {\n                    case 'Pair.new':\n                        var $310 = self.fst;\n                        var $311 = self.snd;\n                        var $312 = Pair$new$($310, String$cons$($306, $311));\n                        var $309 = $312;\n                        break;\n                };\n                var $308 = $309;\n            } else {\n                var $313 = Pair$new$(_code$1, \"\");\n                var $308 = $313;\n            };\n            var $304 = $308;\n        };\n        return $304;\n    };\n    const Kind$Core$read$name = x0 => Kind$Core$read$name$(x0);\n\n    function Kind$Core$read$char$(_code$1, _chr$2) {\n        var self = Kind$Core$read$spaces$(_code$1);\n        switch (self._) {\n            case 'Pair.new':\n                var $315 = self.fst;\n                var self = $315;\n                if (self.length === 0) {\n                    var $317 = Pair$new$(\"\", Unit$new);\n                    var $316 = $317;\n                } else {\n                    var $318 = self.charCodeAt(0);\n                    var $319 = self.slice(1);\n                    var self = ($318 === _chr$2);\n                    if (self) {\n                        var $321 = Pair$new$($319, Unit$new);\n                        var $320 = $321;\n                    } else {\n                        var $322 = Pair$new$(\"\", Unit$new);\n                        var $320 = $322;\n                    };\n                    var $316 = $320;\n                };\n                var $314 = $316;\n                break;\n        };\n        return $314;\n    };\n    const Kind$Core$read$char = x0 => x1 => Kind$Core$read$char$(x0, x1);\n\n    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {\n        var $323 = ({\n            _: 'Kind.Term.all',\n            'eras': _eras$1,\n            'self': _self$2,\n            'name': _name$3,\n            'xtyp': _xtyp$4,\n            'body': _body$5\n        });\n        return $323;\n    };\n    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);\n\n    function Kind$Term$lam$(_name$1, _body$2) {\n        var $324 = ({\n            _: 'Kind.Term.lam',\n            'name': _name$1,\n            'body': _body$2\n        });\n        return $324;\n    };\n    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);\n\n    function Kind$Term$app$(_func$1, _argm$2) {\n        var $325 = ({\n            _: 'Kind.Term.app',\n            'func': _func$1,\n            'argm': _argm$2\n        });\n        return $325;\n    };\n    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);\n\n    function Kind$Term$let$(_name$1, _expr$2, _body$3) {\n        var $326 = ({\n            _: 'Kind.Term.let',\n            'name': _name$1,\n            'expr': _expr$2,\n            'body': _body$3\n        });\n        return $326;\n    };\n    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);\n\n    function Kind$Term$def$(_name$1, _expr$2, _body$3) {\n        var $327 = ({\n            _: 'Kind.Term.def',\n            'name': _name$1,\n            'expr': _expr$2,\n            'body': _body$3\n        });\n        return $327;\n    };\n    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);\n\n    function Kind$Term$ann$(_done$1, _term$2, _type$3) {\n        var $328 = ({\n            _: 'Kind.Term.ann',\n            'done': _done$1,\n            'term': _term$2,\n            'type': _type$3\n        });\n        return $328;\n    };\n    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);\n\n    function String$starts_with$(_xs$1, _match$2) {\n        var String$starts_with$ = (_xs$1, _match$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _match$2]\n        });\n        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);\n        var arg = [_xs$1, _match$2];\n        while (true) {\n            let [_xs$1, _match$2] = arg;\n            var R = (() => {\n                var self = _match$2;\n                if (self.length === 0) {\n                    var $329 = Bool$true;\n                    return $329;\n                } else {\n                    var $330 = self.charCodeAt(0);\n                    var $331 = self.slice(1);\n                    var self = _xs$1;\n                    if (self.length === 0) {\n                        var $333 = Bool$false;\n                        var $332 = $333;\n                    } else {\n                        var $334 = self.charCodeAt(0);\n                        var $335 = self.slice(1);\n                        var self = Char$eql$($330, $334);\n                        if (self) {\n                            var $337 = String$starts_with$($335, $331);\n                            var $336 = $337;\n                        } else {\n                            var $338 = Bool$false;\n                            var $336 = $338;\n                        };\n                        var $332 = $336;\n                    };\n                    return $332;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);\n    const String$nil = '';\n\n    function String$drop$(_n$1, _xs$2) {\n        var String$drop$ = (_n$1, _xs$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _xs$2]\n        });\n        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);\n        var arg = [_n$1, _xs$2];\n        while (true) {\n            let [_n$1, _xs$2] = arg;\n            var R = (() => {\n                var self = _n$1;\n                if (self === 0n) {\n                    var $339 = _xs$2;\n                    return $339;\n                } else {\n                    var $340 = (self - 1n);\n                    var self = _xs$2;\n                    if (self.length === 0) {\n                        var $342 = String$nil;\n                        var $341 = $342;\n                    } else {\n                        var $343 = self.charCodeAt(0);\n                        var $344 = self.slice(1);\n                        var $345 = String$drop$($340, $344);\n                        var $341 = $345;\n                    };\n                    return $341;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$drop = x0 => x1 => String$drop$(x0, x1);\n\n    function Char$is_hex$(_chr$1) {\n        var $346 = (((_chr$1 >= 48) && (_chr$1 <= 57)) || (((_chr$1 >= 97) && (_chr$1 <= 102)) || (((_chr$1 >= 65) && (_chr$1 <= 70)) || Bool$false)));\n        return $346;\n    };\n    const Char$is_hex = x0 => Char$is_hex$(x0);\n\n    function Word$shift_left1$aux$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $348 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $350 = Word$i$(Word$shift_left1$aux$($348, Bool$false));\n                    var $349 = $350;\n                } else {\n                    var $351 = Word$o$(Word$shift_left1$aux$($348, Bool$false));\n                    var $349 = $351;\n                };\n                var $347 = $349;\n                break;\n            case 'Word.i':\n                var $352 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $354 = Word$i$(Word$shift_left1$aux$($352, Bool$true));\n                    var $353 = $354;\n                } else {\n                    var $355 = Word$o$(Word$shift_left1$aux$($352, Bool$true));\n                    var $353 = $355;\n                };\n                var $347 = $353;\n                break;\n            case 'Word.e':\n                var $356 = Word$e;\n                var $347 = $356;\n                break;\n        };\n        return $347;\n    };\n    const Word$shift_left1$aux = x0 => x1 => Word$shift_left1$aux$(x0, x1);\n\n    function Word$shift_left1$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $358 = self.pred;\n                var $359 = Word$o$(Word$shift_left1$aux$($358, Bool$false));\n                var $357 = $359;\n                break;\n            case 'Word.i':\n                var $360 = self.pred;\n                var $361 = Word$o$(Word$shift_left1$aux$($360, Bool$true));\n                var $357 = $361;\n                break;\n            case 'Word.e':\n                var $362 = Word$e;\n                var $357 = $362;\n                break;\n        };\n        return $357;\n    };\n    const Word$shift_left1 = x0 => Word$shift_left1$(x0);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $363 = self.pred;\n                        var $364 = Word$mul$go$($363, Word$shift_left1$(_b$4), _acc$5);\n                        return $364;\n                    case 'Word.i':\n                        var $365 = self.pred;\n                        var $366 = Word$mul$go$($365, Word$shift_left1$(_b$4), Word$add$(_b$4, _acc$5));\n                        return $366;\n                    case 'Word.e':\n                        var $367 = _acc$5;\n                        return $367;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$to_zero$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $369 = self.pred;\n                var $370 = Word$o$(Word$to_zero$($369));\n                var $368 = $370;\n                break;\n            case 'Word.i':\n                var $371 = self.pred;\n                var $372 = Word$o$(Word$to_zero$($371));\n                var $368 = $372;\n                break;\n            case 'Word.e':\n                var $373 = Word$e;\n                var $368 = $373;\n                break;\n        };\n        return $368;\n    };\n    const Word$to_zero = x0 => Word$to_zero$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var $374 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));\n        return $374;\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U16$mul = a0 => a1 => ((a0 * a1) & 0xFFFF);\n    const U16$inc = a0 => ((a0 + 1) & 0xFFFF);\n    const U16$zero = U16$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))));\n\n    function Char$hex_value16$(_chr$1) {\n        var self = ((_chr$1 >= 48) && (_chr$1 <= 57));\n        if (self) {\n            var $376 = ((_chr$1 - 48) & 0xFFFF);\n            var $375 = $376;\n        } else {\n            var self = ((_chr$1 >= 97) && (_chr$1 <= 102));\n            if (self) {\n                var $378 = (_x0$2 => {\n                    var $379 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);\n                    return $379;\n                })(((_chr$1 - 97) & 0xFFFF));\n                var $377 = $378;\n            } else {\n                var self = ((_chr$1 >= 65) && (_chr$1 <= 70));\n                if (self) {\n                    var $381 = (_x0$2 => {\n                        var $382 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);\n                        return $382;\n                    })(((_chr$1 - 65) & 0xFFFF));\n                    var $380 = $381;\n                } else {\n                    var $383 = U16$zero;\n                    var $380 = $383;\n                };\n                var $377 = $380;\n            };\n            var $375 = $377;\n        };\n        return $375;\n    };\n    const Char$hex_value16 = x0 => Char$hex_value16$(x0);\n\n    function Kind$Core$read$u16$(_code$1, _u16$2) {\n        var Kind$Core$read$u16$ = (_code$1, _u16$2) => ({\n            ctr: 'TCO',\n            arg: [_code$1, _u16$2]\n        });\n        var Kind$Core$read$u16 = _code$1 => _u16$2 => Kind$Core$read$u16$(_code$1, _u16$2);\n        var arg = [_code$1, _u16$2];\n        while (true) {\n            let [_code$1, _u16$2] = arg;\n            var R = (() => {\n                var self = _code$1;\n                if (self.length === 0) {\n                    var $384 = Pair$new$(_code$1, _u16$2);\n                    return $384;\n                } else {\n                    var $385 = self.charCodeAt(0);\n                    var $386 = self.slice(1);\n                    var self = Char$is_hex$($385);\n                    if (self) {\n                        var _u16$5 = ((((_u16$2 * 16) & 0xFFFF) + Char$hex_value16$($385)) & 0xFFFF);\n                        var $388 = Kind$Core$read$u16$($386, _u16$5);\n                        var $387 = $388;\n                    } else {\n                        var $389 = Pair$new$(_code$1, _u16$2);\n                        var $387 = $389;\n                    };\n                    return $387;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Core$read$u16 = x0 => x1 => Kind$Core$read$u16$(x0, x1);\n\n    function Kind$Core$read$chrx$(_code$1) {\n        var self = String$starts_with$(_code$1, \"\\\\u{\");\n        if (self) {\n            var _code$2 = String$drop$(3n, _code$1);\n            var self = Kind$Core$read$u16$(_code$2, 0);\n            switch (self._) {\n                case 'Pair.new':\n                    var $392 = self.fst;\n                    var $393 = self.snd;\n                    var self = String$starts_with$($392, \"}\");\n                    if (self) {\n                        var $395 = Pair$new$(String$drop$(1n, $392), $393);\n                        var $394 = $395;\n                    } else {\n                        var $396 = Pair$new$(\"\", 63);\n                        var $394 = $396;\n                    };\n                    var $391 = $394;\n                    break;\n            };\n            var $390 = $391;\n        } else {\n            var self = String$starts_with$(_code$1, \"\\\\\\'\");\n            if (self) {\n                var $398 = Pair$new$(String$drop$(2n, _code$1), 39);\n                var $397 = $398;\n            } else {\n                var self = String$starts_with$(_code$1, \"\\\\\\\"\");\n                if (self) {\n                    var $400 = Pair$new$(String$drop$(2n, _code$1), 34);\n                    var $399 = $400;\n                } else {\n                    var self = String$starts_with$(_code$1, \"\\\\\\\\\");\n                    if (self) {\n                        var $402 = Pair$new$(String$drop$(2n, _code$1), 92);\n                        var $401 = $402;\n                    } else {\n                        var self = _code$1;\n                        if (self.length === 0) {\n                            var $404 = Pair$new$(\"\", 63);\n                            var $403 = $404;\n                        } else {\n                            var $405 = self.charCodeAt(0);\n                            var $406 = self.slice(1);\n                            var $407 = Pair$new$($406, $405);\n                            var $403 = $407;\n                        };\n                        var $401 = $403;\n                    };\n                    var $399 = $401;\n                };\n                var $397 = $399;\n            };\n            var $390 = $397;\n        };\n        return $390;\n    };\n    const Kind$Core$read$chrx = x0 => Kind$Core$read$chrx$(x0);\n\n    function Kind$Term$chr$(_chrx$1) {\n        var $408 = ({\n            _: 'Kind.Term.chr',\n            'chrx': _chrx$1\n        });\n        return $408;\n    };\n    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);\n\n    function Kind$Core$read$strx$(_code$1) {\n        var self = String$starts_with$(_code$1, \"\\\"\");\n        if (self) {\n            var $410 = Pair$new$(_code$1, \"\");\n            var $409 = $410;\n        } else {\n            var self = Kind$Core$read$chrx$(_code$1);\n            switch (self._) {\n                case 'Pair.new':\n                    var $412 = self.fst;\n                    var $413 = self.snd;\n                    var self = Kind$Core$read$strx$($412);\n                    switch (self._) {\n                        case 'Pair.new':\n                            var $415 = self.fst;\n                            var $416 = self.snd;\n                            var $417 = Pair$new$($415, String$cons$($413, $416));\n                            var $414 = $417;\n                            break;\n                    };\n                    var $411 = $414;\n                    break;\n            };\n            var $409 = $411;\n        };\n        return $409;\n    };\n    const Kind$Core$read$strx = x0 => Kind$Core$read$strx$(x0);\n\n    function Kind$Term$str$(_strx$1) {\n        var $418 = ({\n            _: 'Kind.Term.str',\n            'strx': _strx$1\n        });\n        return $418;\n    };\n    const Kind$Term$str = x0 => Kind$Term$str$(x0);\n\n    function Char$dec_value$(_chr$1) {\n        var self = (_chr$1 === 48);\n        if (self) {\n            var $420 = 0n;\n            var $419 = $420;\n        } else {\n            var self = (_chr$1 === 49);\n            if (self) {\n                var $422 = 1n;\n                var $421 = $422;\n            } else {\n                var self = (_chr$1 === 50);\n                if (self) {\n                    var $424 = 2n;\n                    var $423 = $424;\n                } else {\n                    var self = (_chr$1 === 51);\n                    if (self) {\n                        var $426 = 3n;\n                        var $425 = $426;\n                    } else {\n                        var self = (_chr$1 === 52);\n                        if (self) {\n                            var $428 = 4n;\n                            var $427 = $428;\n                        } else {\n                            var self = (_chr$1 === 53);\n                            if (self) {\n                                var $430 = 5n;\n                                var $429 = $430;\n                            } else {\n                                var self = (_chr$1 === 54);\n                                if (self) {\n                                    var $432 = 6n;\n                                    var $431 = $432;\n                                } else {\n                                    var self = (_chr$1 === 55);\n                                    if (self) {\n                                        var $434 = 7n;\n                                        var $433 = $434;\n                                    } else {\n                                        var self = (_chr$1 === 56);\n                                        if (self) {\n                                            var $436 = 8n;\n                                            var $435 = $436;\n                                        } else {\n                                            var self = (_chr$1 === 57);\n                                            if (self) {\n                                                var $438 = 9n;\n                                                var $437 = $438;\n                                            } else {\n                                                var $439 = 0n;\n                                                var $437 = $439;\n                                            };\n                                            var $435 = $437;\n                                        };\n                                        var $433 = $435;\n                                    };\n                                    var $431 = $433;\n                                };\n                                var $429 = $431;\n                            };\n                            var $427 = $429;\n                        };\n                        var $425 = $427;\n                    };\n                    var $423 = $425;\n                };\n                var $421 = $423;\n            };\n            var $419 = $421;\n        };\n        return $419;\n    };\n    const Char$dec_value = x0 => Char$dec_value$(x0);\n\n    function Kind$Core$read$natx$(_code$1, _nat$2) {\n        var Kind$Core$read$natx$ = (_code$1, _nat$2) => ({\n            ctr: 'TCO',\n            arg: [_code$1, _nat$2]\n        });\n        var Kind$Core$read$natx = _code$1 => _nat$2 => Kind$Core$read$natx$(_code$1, _nat$2);\n        var arg = [_code$1, _nat$2];\n        while (true) {\n            let [_code$1, _nat$2] = arg;\n            var R = (() => {\n                var self = _code$1;\n                if (self.length === 0) {\n                    var $440 = Pair$new$(_code$1, _nat$2);\n                    return $440;\n                } else {\n                    var $441 = self.charCodeAt(0);\n                    var $442 = self.slice(1);\n                    var self = Char$is_hex$($441);\n                    if (self) {\n                        var _nat$5 = ((_nat$2 * 10n) + Char$dec_value$($441));\n                        var $444 = Kind$Core$read$natx$($442, _nat$5);\n                        var $443 = $444;\n                    } else {\n                        var $445 = Pair$new$(_code$1, _nat$2);\n                        var $443 = $445;\n                    };\n                    return $443;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Core$read$natx = x0 => x1 => Kind$Core$read$natx$(x0, x1);\n\n    function Kind$Term$nat$(_natx$1) {\n        var $446 = ({\n            _: 'Kind.Term.nat',\n            'natx': _natx$1\n        });\n        return $446;\n    };\n    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $448 = self.fst;\n                var $449 = $448;\n                var $447 = $449;\n                break;\n        };\n        return $447;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n    const Nat$eql = a0 => a1 => (a0 === a1);\n\n    function Nat$pred$(_n$1) {\n        var self = _n$1;\n        if (self === 0n) {\n            var $451 = Nat$zero;\n            var $450 = $451;\n        } else {\n            var $452 = (self - 1n);\n            var $453 = $452;\n            var $450 = $453;\n        };\n        return $450;\n    };\n    const Nat$pred = x0 => Nat$pred$(x0);\n\n    function Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5) {\n        var Kind$Core$read$find$ = (_list$2, _cond$3, _indx$4, _skip$5) => ({\n            ctr: 'TCO',\n            arg: [_list$2, _cond$3, _indx$4, _skip$5]\n        });\n        var Kind$Core$read$find = _list$2 => _cond$3 => _indx$4 => _skip$5 => Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5);\n        var arg = [_list$2, _cond$3, _indx$4, _skip$5];\n        while (true) {\n            let [_list$2, _cond$3, _indx$4, _skip$5] = arg;\n            var R = (() => {\n                var self = _list$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $454 = self.head;\n                        var $455 = self.tail;\n                        var self = _cond$3($454)(_indx$4);\n                        if (self) {\n                            var self = (_skip$5 === 0n);\n                            if (self) {\n                                var $458 = Maybe$some$(Pair$new$($454, _indx$4));\n                                var $457 = $458;\n                            } else {\n                                var $459 = Kind$Core$read$find$($455, _cond$3, Nat$succ$(_indx$4), Nat$pred$(_skip$5));\n                                var $457 = $459;\n                            };\n                            var $456 = $457;\n                        } else {\n                            var $460 = Kind$Core$read$find$($455, _cond$3, Nat$succ$(_indx$4), _skip$5);\n                            var $456 = $460;\n                        };\n                        return $456;\n                    case 'List.nil':\n                        var $461 = Maybe$none;\n                        return $461;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Core$read$find = x0 => x1 => x2 => x3 => Kind$Core$read$find$(x0, x1, x2, x3);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $463 = self.snd;\n                var $464 = $463;\n                var $462 = $464;\n                break;\n        };\n        return $462;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function Kind$Core$read$term$(_code$1) {\n        var self = Kind$Core$read$spaces$(_code$1);\n        switch (self._) {\n            case 'Pair.new':\n                var $466 = self.fst;\n                var self = $466;\n                if (self.length === 0) {\n                    var $468 = Pair$new$(\"\", (_ctx$4 => {\n                        var $469 = Kind$Term$ref$(\"error\");\n                        return $469;\n                    }));\n                    var $467 = $468;\n                } else {\n                    var $470 = self.charCodeAt(0);\n                    var $471 = self.slice(1);\n                    var _head$6 = $470;\n                    var _code$7 = $471;\n                    var self = Char$eql$(_head$6, 42);\n                    if (self) {\n                        var $473 = Pair$new$(_code$7, (_ctx$8 => {\n                            var $474 = Kind$Term$typ;\n                            return $474;\n                        }));\n                        var $472 = $473;\n                    } else {\n                        var self = (_head$6 === 64);\n                        if (self) {\n                            var self = Kind$Core$read$name$(_code$7);\n                            switch (self._) {\n                                case 'Pair.new':\n                                    var $477 = self.fst;\n                                    var $478 = self.snd;\n                                    var self = Kind$Core$read$char$($477, 40);\n                                    switch (self._) {\n                                        case 'Pair.new':\n                                            var $480 = self.fst;\n                                            var self = Kind$Core$read$name$($480);\n                                            switch (self._) {\n                                                case 'Pair.new':\n                                                    var $482 = self.fst;\n                                                    var $483 = self.snd;\n                                                    var self = Kind$Core$read$char$($482, 58);\n                                                    switch (self._) {\n                                                        case 'Pair.new':\n                                                            var $485 = self.fst;\n                                                            var self = Kind$Core$read$term$($485);\n                                                            switch (self._) {\n                                                                case 'Pair.new':\n                                                                    var $487 = self.fst;\n                                                                    var $488 = self.snd;\n                                                                    var self = Kind$Core$read$char$($487, 41);\n                                                                    switch (self._) {\n                                                                        case 'Pair.new':\n                                                                            var $490 = self.fst;\n                                                                            var self = Kind$Core$read$term$($490);\n                                                                            switch (self._) {\n                                                                                case 'Pair.new':\n                                                                                    var $492 = self.fst;\n                                                                                    var $493 = self.snd;\n                                                                                    var $494 = Pair$new$($492, (_ctx$22 => {\n                                                                                        var $495 = Kind$Term$all$(Bool$false, $478, $483, $488(_ctx$22), (_s$23 => _x$24 => {\n                                                                                            var $496 = $493(List$cons$(Pair$new$($483, _x$24), List$cons$(Pair$new$($478, _s$23), _ctx$22)));\n                                                                                            return $496;\n                                                                                        }));\n                                                                                        return $495;\n                                                                                    }));\n                                                                                    var $491 = $494;\n                                                                                    break;\n                                                                            };\n                                                                            var $489 = $491;\n                                                                            break;\n                                                                    };\n                                                                    var $486 = $489;\n                                                                    break;\n                                                            };\n                                                            var $484 = $486;\n                                                            break;\n                                                    };\n                                                    var $481 = $484;\n                                                    break;\n                                            };\n                                            var $479 = $481;\n                                            break;\n                                    };\n                                    var $476 = $479;\n                                    break;\n                            };\n                            var $475 = $476;\n                        } else {\n                            var self = (_head$6 === 37);\n                            if (self) {\n                                var self = Kind$Core$read$name$(_code$7);\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $499 = self.fst;\n                                        var $500 = self.snd;\n                                        var self = Kind$Core$read$char$($499, 40);\n                                        switch (self._) {\n                                            case 'Pair.new':\n                                                var $502 = self.fst;\n                                                var self = Kind$Core$read$name$($502);\n                                                switch (self._) {\n                                                    case 'Pair.new':\n                                                        var $504 = self.fst;\n                                                        var $505 = self.snd;\n                                                        var self = Kind$Core$read$char$($504, 58);\n                                                        switch (self._) {\n                                                            case 'Pair.new':\n                                                                var $507 = self.fst;\n                                                                var self = Kind$Core$read$term$($507);\n                                                                switch (self._) {\n                                                                    case 'Pair.new':\n                                                                        var $509 = self.fst;\n                                                                        var $510 = self.snd;\n                                                                        var self = Kind$Core$read$char$($509, 41);\n                                                                        switch (self._) {\n                                                                            case 'Pair.new':\n                                                                                var $512 = self.fst;\n                                                                                var self = Kind$Core$read$term$($512);\n                                                                                switch (self._) {\n                                                                                    case 'Pair.new':\n                                                                                        var $514 = self.fst;\n                                                                                        var $515 = self.snd;\n                                                                                        var $516 = Pair$new$($514, (_ctx$22 => {\n                                                                                            var $517 = Kind$Term$all$(Bool$true, $500, $505, $510(_ctx$22), (_s$23 => _x$24 => {\n                                                                                                var $518 = $515(List$cons$(Pair$new$($505, _x$24), List$cons$(Pair$new$($500, _s$23), _ctx$22)));\n                                                                                                return $518;\n                                                                                            }));\n                                                                                            return $517;\n                                                                                        }));\n                                                                                        var $513 = $516;\n                                                                                        break;\n                                                                                };\n                                                                                var $511 = $513;\n                                                                                break;\n                                                                        };\n                                                                        var $508 = $511;\n                                                                        break;\n                                                                };\n                                                                var $506 = $508;\n                                                                break;\n                                                        };\n                                                        var $503 = $506;\n                                                        break;\n                                                };\n                                                var $501 = $503;\n                                                break;\n                                        };\n                                        var $498 = $501;\n                                        break;\n                                };\n                                var $497 = $498;\n                            } else {\n                                var self = (_head$6 === 35);\n                                if (self) {\n                                    var self = Kind$Core$read$name$(_code$7);\n                                    switch (self._) {\n                                        case 'Pair.new':\n                                            var $521 = self.fst;\n                                            var $522 = self.snd;\n                                            var self = Kind$Core$read$term$($521);\n                                            switch (self._) {\n                                                case 'Pair.new':\n                                                    var $524 = self.fst;\n                                                    var $525 = self.snd;\n                                                    var $526 = Pair$new$($524, (_ctx$12 => {\n                                                        var $527 = Kind$Term$lam$($522, (_x$13 => {\n                                                            var $528 = $525(List$cons$(Pair$new$($522, _x$13), _ctx$12));\n                                                            return $528;\n                                                        }));\n                                                        return $527;\n                                                    }));\n                                                    var $523 = $526;\n                                                    break;\n                                            };\n                                            var $520 = $523;\n                                            break;\n                                    };\n                                    var $519 = $520;\n                                } else {\n                                    var self = (_head$6 === 40);\n                                    if (self) {\n                                        var self = Kind$Core$read$term$(_code$7);\n                                        switch (self._) {\n                                            case 'Pair.new':\n                                                var $531 = self.fst;\n                                                var $532 = self.snd;\n                                                var self = Kind$Core$read$term$($531);\n                                                switch (self._) {\n                                                    case 'Pair.new':\n                                                        var $534 = self.fst;\n                                                        var $535 = self.snd;\n                                                        var self = Kind$Core$read$char$($534, 41);\n                                                        switch (self._) {\n                                                            case 'Pair.new':\n                                                                var $537 = self.fst;\n                                                                var $538 = Pair$new$($537, (_ctx$14 => {\n                                                                    var $539 = Kind$Term$app$($532(_ctx$14), $535(_ctx$14));\n                                                                    return $539;\n                                                                }));\n                                                                var $536 = $538;\n                                                                break;\n                                                        };\n                                                        var $533 = $536;\n                                                        break;\n                                                };\n                                                var $530 = $533;\n                                                break;\n                                        };\n                                        var $529 = $530;\n                                    } else {\n                                        var self = (_head$6 === 33);\n                                        if (self) {\n                                            var self = Kind$Core$read$name$(_code$7);\n                                            switch (self._) {\n                                                case 'Pair.new':\n                                                    var $542 = self.fst;\n                                                    var $543 = self.snd;\n                                                    var self = Kind$Core$read$char$($542, 61);\n                                                    switch (self._) {\n                                                        case 'Pair.new':\n                                                            var $545 = self.fst;\n                                                            var self = Kind$Core$read$term$($545);\n                                                            switch (self._) {\n                                                                case 'Pair.new':\n                                                                    var $547 = self.fst;\n                                                                    var $548 = self.snd;\n                                                                    var self = Kind$Core$read$char$($547, 59);\n                                                                    switch (self._) {\n                                                                        case 'Pair.new':\n                                                                            var $550 = self.fst;\n                                                                            var self = Kind$Core$read$term$($550);\n                                                                            switch (self._) {\n                                                                                case 'Pair.new':\n                                                                                    var $552 = self.fst;\n                                                                                    var $553 = self.snd;\n                                                                                    var $554 = Pair$new$($552, (_ctx$18 => {\n                                                                                        var $555 = Kind$Term$let$($543, $548(_ctx$18), (_x$19 => {\n                                                                                            var $556 = $553(List$cons$(Pair$new$($543, _x$19), _ctx$18));\n                                                                                            return $556;\n                                                                                        }));\n                                                                                        return $555;\n                                                                                    }));\n                                                                                    var $551 = $554;\n                                                                                    break;\n                                                                            };\n                                                                            var $549 = $551;\n                                                                            break;\n                                                                    };\n                                                                    var $546 = $549;\n                                                                    break;\n                                                            };\n                                                            var $544 = $546;\n                                                            break;\n                                                    };\n                                                    var $541 = $544;\n                                                    break;\n                                            };\n                                            var $540 = $541;\n                                        } else {\n                                            var self = (_head$6 === 36);\n                                            if (self) {\n                                                var self = Kind$Core$read$name$(_code$7);\n                                                switch (self._) {\n                                                    case 'Pair.new':\n                                                        var $559 = self.fst;\n                                                        var $560 = self.snd;\n                                                        var self = Kind$Core$read$char$($559, 61);\n                                                        switch (self._) {\n                                                            case 'Pair.new':\n                                                                var $562 = self.fst;\n                                                                var self = Kind$Core$read$term$($562);\n                                                                switch (self._) {\n                                                                    case 'Pair.new':\n                                                                        var $564 = self.fst;\n                                                                        var $565 = self.snd;\n                                                                        var self = Kind$Core$read$char$($564, 59);\n                                                                        switch (self._) {\n                                                                            case 'Pair.new':\n                                                                                var $567 = self.fst;\n                                                                                var self = Kind$Core$read$term$($567);\n                                                                                switch (self._) {\n                                                                                    case 'Pair.new':\n                                                                                        var $569 = self.fst;\n                                                                                        var $570 = self.snd;\n                                                                                        var $571 = Pair$new$($569, (_ctx$18 => {\n                                                                                            var $572 = Kind$Term$def$($560, $565(_ctx$18), (_x$19 => {\n                                                                                                var $573 = $570(List$cons$(Pair$new$($560, _x$19), _ctx$18));\n                                                                                                return $573;\n                                                                                            }));\n                                                                                            return $572;\n                                                                                        }));\n                                                                                        var $568 = $571;\n                                                                                        break;\n                                                                                };\n                                                                                var $566 = $568;\n                                                                                break;\n                                                                        };\n                                                                        var $563 = $566;\n                                                                        break;\n                                                                };\n                                                                var $561 = $563;\n                                                                break;\n                                                        };\n                                                        var $558 = $561;\n                                                        break;\n                                                };\n                                                var $557 = $558;\n                                            } else {\n                                                var self = (_head$6 === 123);\n                                                if (self) {\n                                                    var self = Kind$Core$read$term$(_code$7);\n                                                    switch (self._) {\n                                                        case 'Pair.new':\n                                                            var $576 = self.fst;\n                                                            var $577 = self.snd;\n                                                            var self = Kind$Core$read$char$($576, 58);\n                                                            switch (self._) {\n                                                                case 'Pair.new':\n                                                                    var $579 = self.fst;\n                                                                    var self = Kind$Core$read$term$($579);\n                                                                    switch (self._) {\n                                                                        case 'Pair.new':\n                                                                            var $581 = self.fst;\n                                                                            var $582 = self.snd;\n                                                                            var self = Kind$Core$read$char$($581, 125);\n                                                                            switch (self._) {\n                                                                                case 'Pair.new':\n                                                                                    var $584 = self.fst;\n                                                                                    var $585 = Pair$new$($584, (_ctx$16 => {\n                                                                                        var $586 = Kind$Term$ann$(Bool$false, $577(_ctx$16), $582(_ctx$16));\n                                                                                        return $586;\n                                                                                    }));\n                                                                                    var $583 = $585;\n                                                                                    break;\n                                                                            };\n                                                                            var $580 = $583;\n                                                                            break;\n                                                                    };\n                                                                    var $578 = $580;\n                                                                    break;\n                                                            };\n                                                            var $575 = $578;\n                                                            break;\n                                                    };\n                                                    var $574 = $575;\n                                                } else {\n                                                    var self = (_head$6 === 39);\n                                                    if (self) {\n                                                        var self = Kind$Core$read$chrx$(_code$7);\n                                                        switch (self._) {\n                                                            case 'Pair.new':\n                                                                var $589 = self.fst;\n                                                                var $590 = self.snd;\n                                                                var self = Kind$Core$read$char$($589, 39);\n                                                                switch (self._) {\n                                                                    case 'Pair.new':\n                                                                        var $592 = self.fst;\n                                                                        var $593 = Pair$new$($592, (_ctx$12 => {\n                                                                            var $594 = Kind$Term$chr$($590);\n                                                                            return $594;\n                                                                        }));\n                                                                        var $591 = $593;\n                                                                        break;\n                                                                };\n                                                                var $588 = $591;\n                                                                break;\n                                                        };\n                                                        var $587 = $588;\n                                                    } else {\n                                                        var self = (_head$6 === 34);\n                                                        if (self) {\n                                                            var self = Kind$Core$read$strx$(_code$7);\n                                                            switch (self._) {\n                                                                case 'Pair.new':\n                                                                    var $597 = self.fst;\n                                                                    var $598 = self.snd;\n                                                                    var self = Kind$Core$read$char$($597, 34);\n                                                                    switch (self._) {\n                                                                        case 'Pair.new':\n                                                                            var $600 = self.fst;\n                                                                            var $601 = Pair$new$($600, (_ctx$12 => {\n                                                                                var $602 = Kind$Term$str$($598);\n                                                                                return $602;\n                                                                            }));\n                                                                            var $599 = $601;\n                                                                            break;\n                                                                    };\n                                                                    var $596 = $599;\n                                                                    break;\n                                                            };\n                                                            var $595 = $596;\n                                                        } else {\n                                                            var self = (_head$6 === 43);\n                                                            if (self) {\n                                                                var self = Kind$Core$read$natx$(_code$7, 0n);\n                                                                switch (self._) {\n                                                                    case 'Pair.new':\n                                                                        var $605 = self.fst;\n                                                                        var $606 = self.snd;\n                                                                        var $607 = Pair$new$($605, (_ctx$10 => {\n                                                                            var $608 = Kind$Term$nat$($606);\n                                                                            return $608;\n                                                                        }));\n                                                                        var $604 = $607;\n                                                                        break;\n                                                                };\n                                                                var $603 = $604;\n                                                            } else {\n                                                                var self = Kind$Core$read$is_name$(_head$6);\n                                                                if (self) {\n                                                                    var self = Kind$Core$read$name$(_code$7);\n                                                                    switch (self._) {\n                                                                        case 'Pair.new':\n                                                                            var $611 = self.fst;\n                                                                            var $612 = self.snd;\n                                                                            var _name$10 = String$cons$(_head$6, $612);\n                                                                            var self = $611;\n                                                                            if (self.length === 0) {\n                                                                                var $614 = Pair$new$(\"\", 0n);\n                                                                                var self = $614;\n                                                                            } else {\n                                                                                var $615 = self.charCodeAt(0);\n                                                                                var $616 = self.slice(1);\n                                                                                var self = ($615 === 94);\n                                                                                if (self) {\n                                                                                    var $618 = Kind$Core$read$natx$($616, 0n);\n                                                                                    var $617 = $618;\n                                                                                } else {\n                                                                                    var $619 = Pair$new$($611, 0n);\n                                                                                    var $617 = $619;\n                                                                                };\n                                                                                var self = $617;\n                                                                            };\n                                                                            switch (self._) {\n                                                                                case 'Pair.new':\n                                                                                    var $620 = self.fst;\n                                                                                    var $621 = self.snd;\n                                                                                    var $622 = Pair$new$($620, (_ctx$13 => {\n                                                                                        var _got$14 = Kind$Core$read$find$(_ctx$13, (_x$14 => _i$15 => {\n                                                                                            var $624 = (Pair$fst$(_x$14) === _name$10);\n                                                                                            return $624;\n                                                                                        }), 0n, $621);\n                                                                                        var self = _got$14;\n                                                                                        switch (self._) {\n                                                                                            case 'Maybe.some':\n                                                                                                var $625 = self.value;\n                                                                                                var $626 = Pair$snd$(Pair$fst$($625));\n                                                                                                var $623 = $626;\n                                                                                                break;\n                                                                                            case 'Maybe.none':\n                                                                                                var $627 = Kind$Term$ref$(_name$10);\n                                                                                                var $623 = $627;\n                                                                                                break;\n                                                                                        };\n                                                                                        return $623;\n                                                                                    }));\n                                                                                    var $613 = $622;\n                                                                                    break;\n                                                                            };\n                                                                            var $610 = $613;\n                                                                            break;\n                                                                    };\n                                                                    var $609 = $610;\n                                                                } else {\n                                                                    var $628 = Pair$new$(\"\", (_ctx$8 => {\n                                                                        var $629 = Kind$Term$ref$(\"error\");\n                                                                        return $629;\n                                                                    }));\n                                                                    var $609 = $628;\n                                                                };\n                                                                var $603 = $609;\n                                                            };\n                                                            var $595 = $603;\n                                                        };\n                                                        var $587 = $595;\n                                                    };\n                                                    var $574 = $587;\n                                                };\n                                                var $557 = $574;\n                                            };\n                                            var $540 = $557;\n                                        };\n                                        var $529 = $540;\n                                    };\n                                    var $519 = $529;\n                                };\n                                var $497 = $519;\n                            };\n                            var $475 = $497;\n                        };\n                        var $472 = $475;\n                    };\n                    var $467 = $472;\n                };\n                var $465 = $467;\n                break;\n        };\n        return $465;\n    };\n    const Kind$Core$read$term = x0 => Kind$Core$read$term$(x0);\n\n    function Kind$Core$read$(_code$1) {\n        var self = Kind$Core$read$term$((_code$1 + \";\"));\n        switch (self._) {\n            case 'Pair.new':\n                var $631 = self.fst;\n                var $632 = self.snd;\n                var self = $631;\n                if (self.length === 0) {\n                    var $634 = Maybe$none;\n                    var $633 = $634;\n                } else {\n                    var $635 = self.charCodeAt(0);\n                    var $636 = self.slice(1);\n                    var $637 = Maybe$some$($632(List$nil));\n                    var $633 = $637;\n                };\n                var $630 = $633;\n                break;\n        };\n        return $630;\n    };\n    const Kind$Core$read = x0 => Kind$Core$read$(x0);\n\n    function Bool$read$(_code$1) {\n        var self = (_code$1 === \"Bool.true\");\n        if (self) {\n            var $639 = Maybe$some$(Bool$true);\n            var $638 = $639;\n        } else {\n            var self = (_code$1 === \"Bool.false\");\n            if (self) {\n                var $641 = Maybe$some$(Bool$false);\n                var $640 = $641;\n            } else {\n                var $642 = Maybe$none;\n                var $640 = $642;\n            };\n            var $638 = $640;\n        };\n        return $638;\n    };\n    const Bool$read = x0 => Bool$read$(x0);\n\n    function Kind$Status$done$(_cached$1) {\n        var $643 = ({\n            _: 'Kind.Status.done',\n            'cached': _cached$1\n        });\n        return $643;\n    };\n    const Kind$Status$done = x0 => Kind$Status$done$(x0);\n\n    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {\n        var $644 = ({\n            _: 'Kind.Def.new',\n            'file': _file$1,\n            'code': _code$2,\n            'orig': _orig$3,\n            'name': _name$4,\n            'term': _term$5,\n            'type': _type$6,\n            'isct': _isct$7,\n            'arit': _arit$8,\n            'stat': _stat$9\n        });\n        return $644;\n    };\n    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);\n\n    function Kind$Synth$load$cached$def$(_name$1) {\n        var $645 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $646 = _m$bind$2;\n            return $646;\n        }))(IO$get_file$((\".cache/\" + (_name$1 + \".file\"))))((_cache_file$2 => {\n            var self = (!String$is_empty$(_cache_file$2));\n            if (self) {\n                var $648 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n                    var $649 = _m$bind$3;\n                    return $649;\n                }))(IO$get_file$((\".cache/\" + (_name$1 + \".time\"))))((_cache_time$3 => {\n                    var $650 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                        var $651 = _m$bind$4;\n                        return $651;\n                    }))(IO$get_file_mtime$(_cache_file$2))((_cache_file_time$4 => {\n                        var self = (_cache_time$3 === _cache_file_time$4);\n                        if (self) {\n                            var $653 = IO$monad$((_m$bind$5 => _m$pure$6 => {\n                                var $654 = _m$bind$5;\n                                return $654;\n                            }))(IO$get_file$((\".cache/\" + (_name$1 + \".term\"))))((_cache_term$5 => {\n                                var $655 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                                    var $656 = _m$bind$6;\n                                    return $656;\n                                }))(IO$get_file$((\".cache/\" + (_name$1 + \".type\"))))((_cache_type$6 => {\n                                    var $657 = IO$monad$((_m$bind$7 => _m$pure$8 => {\n                                        var $658 = _m$bind$7;\n                                        return $658;\n                                    }))(IO$get_file$((\".cache/\" + (_name$1 + \".isct\"))))((_cache_isct$7 => {\n                                        var $659 = IO$monad$((_m$bind$8 => _m$pure$9 => {\n                                            var $660 = _m$bind$8;\n                                            return $660;\n                                        }))(IO$get_file$((\".cache/\" + (_name$1 + \".arit\"))))((_cache_arit$8 => {\n                                            var $661 = IO$monad$((_m$bind$9 => _m$pure$10 => {\n                                                var $662 = _m$pure$10;\n                                                return $662;\n                                            }))((() => {\n                                                var _file$9 = _cache_file$2;\n                                                var _code$10 = \"<cached>\";\n                                                var _orig$11 = Pair$new$(0n, 0n);\n                                                var $663 = Maybe$monad$((_m$bind$12 => _m$pure$13 => {\n                                                    var $664 = _m$bind$12;\n                                                    return $664;\n                                                }))(Kind$Core$read$(_cache_term$5))((_term$12 => {\n                                                    var $665 = Maybe$monad$((_m$bind$13 => _m$pure$14 => {\n                                                        var $666 = _m$bind$13;\n                                                        return $666;\n                                                    }))(Kind$Core$read$(_cache_type$6))((_type$13 => {\n                                                        var $667 = Maybe$monad$((_m$bind$14 => _m$pure$15 => {\n                                                            var $668 = _m$bind$14;\n                                                            return $668;\n                                                        }))(Bool$read$(_cache_isct$7))((_isct$14 => {\n                                                            var $669 = Maybe$monad$((_m$bind$15 => _m$pure$16 => {\n                                                                var $670 = _m$bind$15;\n                                                                return $670;\n                                                            }))(Maybe$some$(Nat$read$(_cache_arit$8)))((_arit$15 => {\n                                                                var _stat$16 = Kind$Status$done$(Bool$true);\n                                                                var $671 = Maybe$monad$((_m$bind$17 => _m$pure$18 => {\n                                                                    var $672 = _m$pure$18;\n                                                                    return $672;\n                                                                }))(Kind$Def$new$(_file$9, _code$10, _orig$11, _name$1, _term$12, _type$13, _isct$14, _arit$15, _stat$16));\n                                                                return $671;\n                                                            }));\n                                                            return $669;\n                                                        }));\n                                                        return $667;\n                                                    }));\n                                                    return $665;\n                                                }));\n                                                return $663;\n                                            })());\n                                            return $661;\n                                        }));\n                                        return $659;\n                                    }));\n                                    return $657;\n                                }));\n                                return $655;\n                            }));\n                            var $652 = $653;\n                        } else {\n                            var $673 = IO$monad$((_m$bind$5 => _m$pure$6 => {\n                                var $674 = _m$pure$6;\n                                return $674;\n                            }))(Maybe$none);\n                            var $652 = $673;\n                        };\n                        return $652;\n                    }));\n                    return $650;\n                }));\n                var $647 = $648;\n            } else {\n                var $675 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n                    var $676 = _m$pure$4;\n                    return $676;\n                }))(Maybe$none);\n                var $647 = $675;\n            };\n            return $647;\n        }));\n        return $645;\n    };\n    const Kind$Synth$load$cached$def = x0 => Kind$Synth$load$cached$def$(x0);\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $677 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $677;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n\n    function Kind$Map$set$(_name$2, _val$3, _map$4) {\n        var $678 = (bitsmap_set((kind_name_to_bits(_name$2)), _val$3, _map$4, 'set'));\n        return $678;\n    };\n    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);\n    const Kind$Map$new = BitsMap$new;\n    const Kind$Map = null;\n\n    function Kind$Core$dependencies$go$(_term$1, _deps$2) {\n        var _nil$3 = Kind$Term$typ;\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.ref':\n                var $680 = self.name;\n                var $681 = Kind$Map$set$($680, Unit$new, _deps$2);\n                var $679 = $681;\n                break;\n            case 'Kind.Term.all':\n                var $682 = self.xtyp;\n                var $683 = self.body;\n                var _deps$9 = Kind$Core$dependencies$go$($682, _deps$2);\n                var _deps$10 = Kind$Core$dependencies$go$($683(_nil$3)(_nil$3), _deps$9);\n                var $684 = _deps$10;\n                var $679 = $684;\n                break;\n            case 'Kind.Term.lam':\n                var $685 = self.body;\n                var _deps$6 = Kind$Core$dependencies$go$($685(_nil$3), _deps$2);\n                var $686 = _deps$6;\n                var $679 = $686;\n                break;\n            case 'Kind.Term.app':\n                var $687 = self.func;\n                var $688 = self.argm;\n                var _deps$6 = Kind$Core$dependencies$go$($687, _deps$2);\n                var _deps$7 = Kind$Core$dependencies$go$($688, _deps$6);\n                var $689 = _deps$7;\n                var $679 = $689;\n                break;\n            case 'Kind.Term.let':\n                var $690 = self.expr;\n                var $691 = self.body;\n                var _deps$7 = Kind$Core$dependencies$go$($690, _deps$2);\n                var _deps$8 = Kind$Core$dependencies$go$($691(_nil$3), _deps$7);\n                var $692 = _deps$8;\n                var $679 = $692;\n                break;\n            case 'Kind.Term.def':\n                var $693 = self.expr;\n                var $694 = self.body;\n                var _deps$7 = Kind$Core$dependencies$go$($693, _deps$2);\n                var _deps$8 = Kind$Core$dependencies$go$($694(_nil$3), _deps$7);\n                var $695 = _deps$8;\n                var $679 = $695;\n                break;\n            case 'Kind.Term.ann':\n                var $696 = self.term;\n                var $697 = self.type;\n                var _deps$7 = Kind$Core$dependencies$go$($696, _deps$2);\n                var _deps$8 = Kind$Core$dependencies$go$($697, _deps$7);\n                var $698 = _deps$8;\n                var $679 = $698;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.typ':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n            case 'Kind.Term.cse':\n            case 'Kind.Term.ori':\n                var $699 = _deps$2;\n                var $679 = $699;\n                break;\n        };\n        return $679;\n    };\n    const Kind$Core$dependencies$go = x0 => x1 => Kind$Core$dependencies$go$(x0, x1);\n\n    function List$mapped$(_as$2, _f$4) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $701 = self.head;\n                var $702 = self.tail;\n                var $703 = List$cons$(_f$4($701), List$mapped$($702, _f$4));\n                var $700 = $703;\n                break;\n            case 'List.nil':\n                var $704 = List$nil;\n                var $700 = $704;\n                break;\n        };\n        return $700;\n    };\n    const List$mapped = x0 => x1 => List$mapped$(x0, x1);\n\n    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $706 = self.val;\n                var $707 = self.lft;\n                var $708 = self.rgt;\n                var self = $706;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $710 = self.value;\n                        var $711 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $710), _list$4);\n                        var _list0$8 = $711;\n                        break;\n                    case 'Maybe.none':\n                        var $712 = _list$4;\n                        var _list0$8 = $712;\n                        break;\n                };\n                var _list1$9 = BitsMap$to_list$go$($707, (_key$3 + '0'), _list0$8);\n                var _list2$10 = BitsMap$to_list$go$($708, (_key$3 + '1'), _list1$9);\n                var $709 = _list2$10;\n                var $705 = $709;\n                break;\n            case 'BitsMap.new':\n                var $713 = _list$4;\n                var $705 = $713;\n                break;\n        };\n        return $705;\n    };\n    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);\n\n    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {\n        var self = _bits$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $715 = self.slice(0, -1);\n                var self = _need$3;\n                if (self === 0n) {\n                    var _head$6 = Bits$reverse$(_chunk$4);\n                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);\n                    var $717 = List$cons$(_head$6, _tail$7);\n                    var $716 = $717;\n                } else {\n                    var $718 = (self - 1n);\n                    var _chunk$7 = (_chunk$4 + '0');\n                    var $719 = Bits$chunks_of$go$(_len$1, $715, $718, _chunk$7);\n                    var $716 = $719;\n                };\n                var $714 = $716;\n                break;\n            case 'i':\n                var $720 = self.slice(0, -1);\n                var self = _need$3;\n                if (self === 0n) {\n                    var _head$6 = Bits$reverse$(_chunk$4);\n                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);\n                    var $722 = List$cons$(_head$6, _tail$7);\n                    var $721 = $722;\n                } else {\n                    var $723 = (self - 1n);\n                    var _chunk$7 = (_chunk$4 + '1');\n                    var $724 = Bits$chunks_of$go$(_len$1, $720, $723, _chunk$7);\n                    var $721 = $724;\n                };\n                var $714 = $721;\n                break;\n            case 'e':\n                var $725 = List$cons$(Bits$reverse$(_chunk$4), List$nil);\n                var $714 = $725;\n                break;\n        };\n        return $714;\n    };\n    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);\n\n    function Bits$chunks_of$(_len$1, _bits$2) {\n        var $726 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);\n        return $726;\n    };\n    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $728 = self.head;\n                var $729 = self.tail;\n                var $730 = _cons$5($728)(List$fold$($729, _nil$4, _cons$5));\n                var $727 = $730;\n                break;\n            case 'List.nil':\n                var $731 = _nil$4;\n                var $727 = $731;\n                break;\n        };\n        return $727;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Word$from_bits$(_size$1, _bits$2) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $733 = Word$e;\n            var $732 = $733;\n        } else {\n            var $734 = (self - 1n);\n            var self = _bits$2;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $736 = self.slice(0, -1);\n                    var $737 = Word$o$(Word$from_bits$($734, $736));\n                    var $735 = $737;\n                    break;\n                case 'i':\n                    var $738 = self.slice(0, -1);\n                    var $739 = Word$i$(Word$from_bits$($734, $738));\n                    var $735 = $739;\n                    break;\n                case 'e':\n                    var $740 = Word$o$(Word$from_bits$($734, Bits$e));\n                    var $735 = $740;\n                    break;\n            };\n            var $732 = $735;\n        };\n        return $732;\n    };\n    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);\n\n    function Kind$Name$from_bits$(_bits$1) {\n        var _list$2 = Bits$chunks_of$(6n, _bits$1);\n        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {\n            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));\n            var self = U16$btw$(0, _u16$5, 25);\n            if (self) {\n                var $743 = ((_u16$5 + 65) & 0xFFFF);\n                var _chr$6 = $743;\n            } else {\n                var self = U16$btw$(26, _u16$5, 51);\n                if (self) {\n                    var $745 = ((_u16$5 + 71) & 0xFFFF);\n                    var $744 = $745;\n                } else {\n                    var self = U16$btw$(52, _u16$5, 61);\n                    if (self) {\n                        var $747 = ((_u16$5 - 4) & 0xFFFF);\n                        var $746 = $747;\n                    } else {\n                        var self = (62 === _u16$5);\n                        if (self) {\n                            var $749 = 46;\n                            var $748 = $749;\n                        } else {\n                            var $750 = 95;\n                            var $748 = $750;\n                        };\n                        var $746 = $748;\n                    };\n                    var $744 = $746;\n                };\n                var _chr$6 = $744;\n            };\n            var $742 = String$cons$(_chr$6, _name$4);\n            return $742;\n        }));\n        var $741 = _name$3;\n        return $741;\n    };\n    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);\n\n    function Kind$Map$to_list$(_xs$2) {\n        var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));\n        var $751 = List$mapped$(_kvs$3, (_kv$4 => {\n            var self = _kv$4;\n            switch (self._) {\n                case 'Pair.new':\n                    var $753 = self.fst;\n                    var $754 = self.snd;\n                    var $755 = Pair$new$(Kind$Name$from_bits$($753), $754);\n                    var $752 = $755;\n                    break;\n            };\n            return $752;\n        }));\n        return $751;\n    };\n    const Kind$Map$to_list = x0 => Kind$Map$to_list$(x0);\n\n    function Kind$Map$keys$(_xs$2) {\n        var $756 = List$mapped$(Kind$Map$to_list$(_xs$2), Pair$fst);\n        return $756;\n    };\n    const Kind$Map$keys = x0 => Kind$Map$keys$(x0);\n\n    function Kind$Synth$load$cached$(_names$1, _defs$2) {\n        var self = _names$1;\n        switch (self._) {\n            case 'List.cons':\n                var $758 = self.head;\n                var $759 = self.tail;\n                var self = Kind$Synth$load$cached$is_loop$($758, _defs$2);\n                if (self) {\n                    var $761 = Kind$Synth$load$cached$($759, _defs$2);\n                    var $760 = $761;\n                } else {\n                    var _name$5 = $758;\n                    var $762 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                        var $763 = _m$bind$6;\n                        return $763;\n                    }))(Kind$Synth$load$cached$def$(_name$5))((_defn$6 => {\n                        var self = _defn$6;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $765 = self.value;\n                                var self = $765;\n                                switch (self._) {\n                                    case 'Kind.Def.new':\n                                        var $767 = self.term;\n                                        var $768 = self.type;\n                                        var _defs$17 = Kind$Map$set$(_name$5, $765, _defs$2);\n                                        var _deps$18 = Kind$Map$new;\n                                        var _deps$19 = Kind$Core$dependencies$go$($767, _deps$18);\n                                        var _deps$20 = Kind$Core$dependencies$go$($768, _deps$19);\n                                        var _deps$21 = Kind$Map$keys$(_deps$20);\n                                        var $769 = IO$monad$((_m$bind$22 => _m$pure$23 => {\n                                            var $770 = _m$bind$22;\n                                            return $770;\n                                        }))(Kind$Synth$load$cached$(_deps$21, _defs$17))((_defs$22 => {\n                                            var self = _defs$22;\n                                            switch (self._) {\n                                                case 'Maybe.some':\n                                                    var $772 = self.value;\n                                                    var $773 = Kind$Synth$load$cached$($759, $772);\n                                                    var $771 = $773;\n                                                    break;\n                                                case 'Maybe.none':\n                                                    var $774 = IO$monad$((_m$bind$23 => _m$pure$24 => {\n                                                        var $775 = _m$pure$24;\n                                                        return $775;\n                                                    }))(Maybe$none);\n                                                    var $771 = $774;\n                                                    break;\n                                            };\n                                            return $771;\n                                        }));\n                                        var $766 = $769;\n                                        break;\n                                };\n                                var $764 = $766;\n                                break;\n                            case 'Maybe.none':\n                                var $776 = IO$monad$((_m$bind$7 => _m$pure$8 => {\n                                    var $777 = _m$pure$8;\n                                    return $777;\n                                }))(Maybe$none);\n                                var $764 = $776;\n                                break;\n                        };\n                        return $764;\n                    }));\n                    var $760 = $762;\n                };\n                var $757 = $760;\n                break;\n            case 'List.nil':\n                var $778 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n                    var $779 = _m$pure$4;\n                    return $779;\n                }))(Maybe$some$(_defs$2));\n                var $757 = $778;\n                break;\n        };\n        return $757;\n    };\n    const Kind$Synth$load$cached = x0 => x1 => Kind$Synth$load$cached$(x0, x1);\n\n    function Parser$is_eof$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $781 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);\n            var $780 = $781;\n        } else {\n            var $782 = self.charCodeAt(0);\n            var $783 = self.slice(1);\n            var $784 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);\n            var $780 = $784;\n        };\n        return $780;\n    };\n    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);\n\n    function Parser$(_V$1) {\n        var $785 = null;\n        return $785;\n    };\n    const Parser = x0 => Parser$(x0);\n\n    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {\n        var $786 = ({\n            _: 'Parser.ErrorAt.new',\n            'idx': _idx$1,\n            'code': _code$2,\n            'err': _err$3\n        });\n        return $786;\n    };\n    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n\n    function Parser$ErrorAt$combine$(_a$1, _b$2) {\n        var self = _a$1;\n        switch (self._) {\n            case 'Maybe.some':\n                var $788 = self.value;\n                var self = _b$2;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $790 = self.value;\n                        var self = $788;\n                        switch (self._) {\n                            case 'Parser.ErrorAt.new':\n                                var $792 = self.idx;\n                                var self = $790;\n                                switch (self._) {\n                                    case 'Parser.ErrorAt.new':\n                                        var $794 = self.idx;\n                                        var self = ($792 > $794);\n                                        if (self) {\n                                            var $796 = _a$1;\n                                            var $795 = $796;\n                                        } else {\n                                            var $797 = _b$2;\n                                            var $795 = $797;\n                                        };\n                                        var $793 = $795;\n                                        break;\n                                };\n                                var $791 = $793;\n                                break;\n                        };\n                        var $789 = $791;\n                        break;\n                    case 'Maybe.none':\n                        var $798 = _a$1;\n                        var $789 = $798;\n                        break;\n                };\n                var $787 = $789;\n                break;\n            case 'Maybe.none':\n                var $799 = _b$2;\n                var $787 = $799;\n                break;\n        };\n        return $787;\n    };\n    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);\n\n    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {\n        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({\n            ctr: 'TCO',\n            arg: [_pars$2, _err$3, _idx$4, _code$5]\n        });\n        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);\n        var arg = [_pars$2, _err$3, _idx$4, _code$5];\n        while (true) {\n            let [_pars$2, _err$3, _idx$4, _code$5] = arg;\n            var R = (() => {\n                var self = _pars$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $800 = self.head;\n                        var $801 = self.tail;\n                        var _parsed$8 = $800(_idx$4)(_code$5);\n                        var self = _parsed$8;\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $803 = self.idx;\n                                var $804 = self.code;\n                                var $805 = self.err;\n                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($803, $804, $805));\n                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);\n                                var $806 = Parser$first_of$go$($801, _err$13, _idx$4, _code$5);\n                                var $802 = $806;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $807 = self.idx;\n                                var $808 = self.code;\n                                var $809 = self.val;\n                                var $810 = Parser$Reply$value$($807, $808, $809);\n                                var $802 = $810;\n                                break;\n                        };\n                        return $802;\n                    case 'List.nil':\n                        var self = _err$3;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $812 = self.value;\n                                var self = $812;\n                                switch (self._) {\n                                    case 'Parser.ErrorAt.new':\n                                        var $814 = self.idx;\n                                        var $815 = self.code;\n                                        var $816 = self.err;\n                                        var $817 = Parser$Reply$error$($814, $815, $816);\n                                        var $813 = $817;\n                                        break;\n                                };\n                                var $811 = $813;\n                                break;\n                            case 'Maybe.none':\n                                var $818 = Parser$Reply$error$(_idx$4, _code$5, \"No parse.\");\n                                var $811 = $818;\n                                break;\n                        };\n                        return $811;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);\n\n    function Parser$first_of$(_pars$2) {\n        var $819 = Parser$first_of$go(_pars$2)(Maybe$none);\n        return $819;\n    };\n    const Parser$first_of = x0 => Parser$first_of$(x0);\n\n    function String$flatten$go$(_xs$1, _res$2) {\n        var String$flatten$go$ = (_xs$1, _res$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _res$2]\n        });\n        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);\n        var arg = [_xs$1, _res$2];\n        while (true) {\n            let [_xs$1, _res$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                switch (self._) {\n                    case 'List.cons':\n                        var $820 = self.head;\n                        var $821 = self.tail;\n                        var $822 = String$flatten$go$($821, (_res$2 + $820));\n                        return $822;\n                    case 'List.nil':\n                        var $823 = _res$2;\n                        return $823;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);\n\n    function String$flatten$(_xs$1) {\n        var $824 = String$flatten$go$(_xs$1, \"\");\n        return $824;\n    };\n    const String$flatten = x0 => String$flatten$(x0);\n\n    function Parser$text$go$(_text$1, _idx$2, _code$3) {\n        var self = _text$1;\n        if (self.length === 0) {\n            var $826 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);\n            var $825 = $826;\n        } else {\n            var $827 = self.charCodeAt(0);\n            var $828 = self.slice(1);\n            var self = _code$3;\n            if (self.length === 0) {\n                var _error$6 = String$flatten$(List$cons$(\"Expected \\'\", List$cons$(_text$1, List$cons$(\"\\', found end of file.\", List$nil))));\n                var $830 = Parser$Reply$error$(_idx$2, _code$3, _error$6);\n                var $829 = $830;\n            } else {\n                var $831 = self.charCodeAt(0);\n                var $832 = self.slice(1);\n                var self = ($827 === $831);\n                if (self) {\n                    var $834 = Parser$text$($828, Nat$succ$(_idx$2), $832);\n                    var $833 = $834;\n                } else {\n                    var _error$8 = String$flatten$(List$cons$(\"Expected \\'\", List$cons$(_text$1, List$cons$(\"\\', found \\'\", List$cons$(String$cons$($831, String$nil), List$cons$(\"\\'.\", List$nil))))));\n                    var $835 = Parser$Reply$error$(_idx$2, _code$3, _error$8);\n                    var $833 = $835;\n                };\n                var $829 = $833;\n            };\n            var $825 = $829;\n        };\n        return $825;\n    };\n    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);\n\n    function Parser$text$(_text$1, _idx$2, _code$3) {\n        var self = Parser$text$go$(_text$1, _idx$2, _code$3);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $837 = self.err;\n                var $838 = Parser$Reply$error$(_idx$2, _code$3, $837);\n                var $836 = $838;\n                break;\n            case 'Parser.Reply.value':\n                var $839 = self.idx;\n                var $840 = self.code;\n                var $841 = self.val;\n                var $842 = Parser$Reply$value$($839, $840, $841);\n                var $836 = $842;\n                break;\n        };\n        return $836;\n    };\n    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);\n\n    function Parser$eof$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $844 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);\n            var $843 = $844;\n        } else {\n            var $845 = self.charCodeAt(0);\n            var $846 = self.slice(1);\n            var $847 = Parser$Reply$error$(_idx$1, _code$2, \"Expected end-of-file.\");\n            var $843 = $847;\n        };\n        return $843;\n    };\n    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);\n\n    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {\n        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({\n            ctr: 'TCO',\n            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]\n        });\n        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);\n        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];\n        while (true) {\n            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;\n            var R = (() => {\n                var _until_reply$7 = _until$2(_idx$5)(_code$6);\n                var self = _until_reply$7;\n                switch (self._) {\n                    case 'Parser.Reply.value':\n                        var $849 = self.idx;\n                        var $850 = self.code;\n                        var $851 = Parser$Reply$value$($849, $850, List$reverse$(_values$4));\n                        var $848 = $851;\n                        break;\n                    case 'Parser.Reply.error':\n                        var _reply$11 = _parse$3(_idx$5)(_code$6);\n                        var self = _reply$11;\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $853 = self.idx;\n                                var $854 = self.code;\n                                var $855 = self.err;\n                                var $856 = Parser$Reply$error$($853, $854, $855);\n                                var $852 = $856;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $857 = self.idx;\n                                var $858 = self.code;\n                                var $859 = self.val;\n                                var $860 = Parser$until$go$(_until$2, _parse$3, List$cons$($859, _values$4), $857, $858);\n                                var $852 = $860;\n                                break;\n                        };\n                        var $848 = $852;\n                        break;\n                };\n                return $848;\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);\n\n    function Parser$until$(_until$2, _parse$3) {\n        var $861 = Parser$until$go(_until$2)(_parse$3)(List$nil);\n        return $861;\n    };\n    const Parser$until = x0 => x1 => Parser$until$(x0, x1);\n\n    function Parser$one$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $863 = Parser$Reply$error$(_idx$1, _code$2, \"Unexpected end of file.\");\n            var $862 = $863;\n        } else {\n            var $864 = self.charCodeAt(0);\n            var $865 = self.slice(1);\n            var $866 = Parser$Reply$value$(Nat$succ$(_idx$1), $865, $864);\n            var $862 = $866;\n        };\n        return $862;\n    };\n    const Parser$one = x0 => x1 => Parser$one$(x0, x1);\n    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(\" \"), List$cons$(Parser$text(\"\\u{9}\"), List$cons$(Parser$text(\"\\u{a}\"), List$cons$((_idx$1 => _code$2 => {\n        var self = Parser$text$(\"//\", _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $868 = self.idx;\n                var $869 = self.code;\n                var $870 = self.err;\n                var $871 = Parser$Reply$error$($868, $869, $870);\n                var $867 = $871;\n                break;\n            case 'Parser.Reply.value':\n                var $872 = self.idx;\n                var $873 = self.code;\n                var _endl_or_eof$6 = Parser$first_of$(List$cons$(Parser$text(\"\\u{a}\"), List$cons$(Parser$eof, List$nil)));\n                var self = Parser$until$(_endl_or_eof$6, Parser$one)($872)($873);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $875 = self.idx;\n                        var $876 = self.code;\n                        var $877 = self.err;\n                        var $878 = Parser$Reply$error$($875, $876, $877);\n                        var $874 = $878;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $879 = self.idx;\n                        var $880 = self.code;\n                        var $881 = Parser$Reply$value$($879, $880, Unit$new);\n                        var $874 = $881;\n                        break;\n                };\n                var $867 = $874;\n                break;\n        };\n        return $867;\n    }), List$nil))))));\n\n    function Parser$get_index$(_idx$1, _code$2) {\n        var $882 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);\n        return $882;\n    };\n    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);\n\n    function Kind$Parser$init$(_idx$1, _code$2) {\n        var self = Kind$Parser$spaces(_idx$1)(_code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $884 = self.idx;\n                var $885 = self.code;\n                var $886 = self.err;\n                var $887 = Parser$Reply$error$($884, $885, $886);\n                var $883 = $887;\n                break;\n            case 'Parser.Reply.value':\n                var $888 = self.idx;\n                var $889 = self.code;\n                var self = Parser$get_index$($888, $889);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $891 = self.idx;\n                        var $892 = self.code;\n                        var $893 = self.err;\n                        var $894 = Parser$Reply$error$($891, $892, $893);\n                        var $890 = $894;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $895 = self.idx;\n                        var $896 = self.code;\n                        var $897 = self.val;\n                        var $898 = Parser$Reply$value$($895, $896, $897);\n                        var $890 = $898;\n                        break;\n                };\n                var $883 = $890;\n                break;\n        };\n        return $883;\n    };\n    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);\n\n    function Kind$Name$is_letter$(_chr$1) {\n        var self = U16$btw$(65, _chr$1, 90);\n        if (self) {\n            var $900 = Bool$true;\n            var $899 = $900;\n        } else {\n            var self = U16$btw$(97, _chr$1, 122);\n            if (self) {\n                var $902 = Bool$true;\n                var $901 = $902;\n            } else {\n                var self = U16$btw$(48, _chr$1, 57);\n                if (self) {\n                    var $904 = Bool$true;\n                    var $903 = $904;\n                } else {\n                    var self = (46 === _chr$1);\n                    if (self) {\n                        var $906 = Bool$true;\n                        var $905 = $906;\n                    } else {\n                        var self = (95 === _chr$1);\n                        if (self) {\n                            var $908 = Bool$true;\n                            var $907 = $908;\n                        } else {\n                            var self = (94 === _chr$1);\n                            if (self) {\n                                var $910 = Bool$true;\n                                var $909 = $910;\n                            } else {\n                                var $911 = Bool$false;\n                                var $909 = $911;\n                            };\n                            var $907 = $909;\n                        };\n                        var $905 = $907;\n                    };\n                    var $903 = $905;\n                };\n                var $901 = $903;\n            };\n            var $899 = $901;\n        };\n        return $899;\n    };\n    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);\n\n    function Kind$Parser$letter$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $913 = Parser$Reply$error$(_idx$1, _code$2, \"Unexpected eof.\");\n            var $912 = $913;\n        } else {\n            var $914 = self.charCodeAt(0);\n            var $915 = self.slice(1);\n            var self = Kind$Name$is_letter$($914);\n            if (self) {\n                var $917 = Parser$Reply$value$(Nat$succ$(_idx$1), $915, $914);\n                var $916 = $917;\n            } else {\n                var $918 = Parser$Reply$error$(_idx$1, _code$2, \"Expected letter.\");\n                var $916 = $918;\n            };\n            var $912 = $916;\n        };\n        return $912;\n    };\n    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);\n\n    function Kind$Parser$name1$(_idx$1, _code$2) {\n        var self = Kind$Parser$spaces(_idx$1)(_code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $920 = self.idx;\n                var $921 = self.code;\n                var $922 = self.err;\n                var $923 = Parser$Reply$error$($920, $921, $922);\n                var $919 = $923;\n                break;\n            case 'Parser.Reply.value':\n                var $924 = self.idx;\n                var $925 = self.code;\n                var self = Parser$many1$(Kind$Parser$letter, $924, $925);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $927 = self.idx;\n                        var $928 = self.code;\n                        var $929 = self.err;\n                        var $930 = Parser$Reply$error$($927, $928, $929);\n                        var $926 = $930;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $931 = self.idx;\n                        var $932 = self.code;\n                        var $933 = self.val;\n                        var $934 = Parser$Reply$value$($931, $932, List$fold$($933, String$nil, String$cons));\n                        var $926 = $934;\n                        break;\n                };\n                var $919 = $926;\n                break;\n        };\n        return $919;\n    };\n    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);\n\n    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {\n        var self = Kind$Parser$spaces(_idx$2)(_code$3);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $936 = self.idx;\n                var $937 = self.code;\n                var $938 = self.err;\n                var $939 = Parser$Reply$error$($936, $937, $938);\n                var $935 = $939;\n                break;\n            case 'Parser.Reply.value':\n                var $940 = self.idx;\n                var $941 = self.code;\n                var $942 = Parser$text$(_text$1, $940, $941);\n                var $935 = $942;\n                break;\n        };\n        return $935;\n    };\n    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);\n\n    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {\n        var self = _parser$3(_idx$4)(_code$5);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $944 = self.idx;\n                var $945 = self.code;\n                var $946 = self.err;\n                var $947 = Parser$Reply$error$($944, $945, $946);\n                var $943 = $947;\n                break;\n            case 'Parser.Reply.value':\n                var $948 = self.idx;\n                var $949 = self.code;\n                var $950 = self.val;\n                var self = Parser$until$(_cond$2, _parser$3)($948)($949);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $952 = self.idx;\n                        var $953 = self.code;\n                        var $954 = self.err;\n                        var $955 = Parser$Reply$error$($952, $953, $954);\n                        var $951 = $955;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $956 = self.idx;\n                        var $957 = self.code;\n                        var $958 = self.val;\n                        var $959 = Parser$Reply$value$($956, $957, List$cons$($950, $958));\n                        var $951 = $959;\n                        break;\n                };\n                var $943 = $951;\n                break;\n        };\n        return $943;\n    };\n    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);\n\n    function Parser$maybe$(_parse$2, _idx$3, _code$4) {\n        var self = _parse$2(_idx$3)(_code$4);\n        switch (self._) {\n            case 'Parser.Reply.value':\n                var $961 = self.idx;\n                var $962 = self.code;\n                var $963 = self.val;\n                var $964 = Parser$Reply$value$($961, $962, Maybe$some$($963));\n                var $960 = $964;\n                break;\n            case 'Parser.Reply.error':\n                var $965 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);\n                var $960 = $965;\n                break;\n        };\n        return $960;\n    };\n    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);\n\n    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {\n        var self = Kind$Parser$spaces(_idx$3)(_code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $967 = self.idx;\n                var $968 = self.code;\n                var $969 = self.err;\n                var $970 = Parser$Reply$error$($967, $968, $969);\n                var $966 = $970;\n                break;\n            case 'Parser.Reply.value':\n                var $971 = self.idx;\n                var $972 = self.code;\n                var self = _parser$2($971)($972);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $974 = self.idx;\n                        var $975 = self.code;\n                        var $976 = self.err;\n                        var $977 = Parser$Reply$error$($974, $975, $976);\n                        var $973 = $977;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $978 = self.idx;\n                        var $979 = self.code;\n                        var $980 = self.val;\n                        var self = Parser$maybe$(Kind$Parser$text(\",\"), $978, $979);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $982 = self.idx;\n                                var $983 = self.code;\n                                var $984 = self.err;\n                                var $985 = Parser$Reply$error$($982, $983, $984);\n                                var $981 = $985;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $986 = self.idx;\n                                var $987 = self.code;\n                                var $988 = Parser$Reply$value$($986, $987, $980);\n                                var $981 = $988;\n                                break;\n                        };\n                        var $973 = $981;\n                        break;\n                };\n                var $966 = $973;\n                break;\n        };\n        return $966;\n    };\n    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);\n\n    function Kind$Parser$name$(_idx$1, _code$2) {\n        var self = Kind$Parser$spaces(_idx$1)(_code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $990 = self.idx;\n                var $991 = self.code;\n                var $992 = self.err;\n                var $993 = Parser$Reply$error$($990, $991, $992);\n                var $989 = $993;\n                break;\n            case 'Parser.Reply.value':\n                var $994 = self.idx;\n                var $995 = self.code;\n                var self = Parser$many$(Kind$Parser$letter)($994)($995);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $997 = self.idx;\n                        var $998 = self.code;\n                        var $999 = self.err;\n                        var $1000 = Parser$Reply$error$($997, $998, $999);\n                        var $996 = $1000;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1001 = self.idx;\n                        var $1002 = self.code;\n                        var $1003 = self.val;\n                        var $1004 = Parser$Reply$value$($1001, $1002, List$fold$($1003, String$nil, String$cons));\n                        var $996 = $1004;\n                        break;\n                };\n                var $989 = $996;\n                break;\n        };\n        return $989;\n    };\n    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);\n\n    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {\n        var self = Parser$get_index$(_idx$2, _code$3);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1006 = self.idx;\n                var $1007 = self.code;\n                var $1008 = self.err;\n                var $1009 = Parser$Reply$error$($1006, $1007, $1008);\n                var $1005 = $1009;\n                break;\n            case 'Parser.Reply.value':\n                var $1010 = self.idx;\n                var $1011 = self.code;\n                var $1012 = self.val;\n                var _orig$7 = Pair$new$(_from$1, $1012);\n                var $1013 = Parser$Reply$value$($1010, $1011, _orig$7);\n                var $1005 = $1013;\n                break;\n        };\n        return $1005;\n    };\n    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);\n\n    function Kind$Term$ori$(_orig$1, _expr$2) {\n        var $1014 = ({\n            _: 'Kind.Term.ori',\n            'orig': _orig$1,\n            'expr': _expr$2\n        });\n        return $1014;\n    };\n    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);\n\n    function Kind$Parser$forall$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1016 = self.idx;\n                var $1017 = self.code;\n                var $1018 = self.err;\n                var $1019 = Parser$Reply$error$($1016, $1017, $1018);\n                var $1015 = $1019;\n                break;\n            case 'Parser.Reply.value':\n                var $1020 = self.idx;\n                var $1021 = self.code;\n                var $1022 = self.val;\n                var self = Kind$Parser$name$($1020, $1021);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1024 = self.idx;\n                        var $1025 = self.code;\n                        var $1026 = self.err;\n                        var $1027 = Parser$Reply$error$($1024, $1025, $1026);\n                        var $1023 = $1027;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1028 = self.idx;\n                        var $1029 = self.code;\n                        var $1030 = self.val;\n                        var self = Kind$Parser$binder$(\":\", $1028, $1029);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1032 = self.idx;\n                                var $1033 = self.code;\n                                var $1034 = self.err;\n                                var $1035 = Parser$Reply$error$($1032, $1033, $1034);\n                                var $1031 = $1035;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1036 = self.idx;\n                                var $1037 = self.code;\n                                var $1038 = self.val;\n                                var self = Parser$maybe$(Kind$Parser$text(\"->\"), $1036, $1037);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1040 = self.idx;\n                                        var $1041 = self.code;\n                                        var $1042 = self.err;\n                                        var $1043 = Parser$Reply$error$($1040, $1041, $1042);\n                                        var $1039 = $1043;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1044 = self.idx;\n                                        var $1045 = self.code;\n                                        var self = Kind$Parser$term$($1044, $1045);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1047 = self.idx;\n                                                var $1048 = self.code;\n                                                var $1049 = self.err;\n                                                var $1050 = Parser$Reply$error$($1047, $1048, $1049);\n                                                var $1046 = $1050;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1051 = self.idx;\n                                                var $1052 = self.code;\n                                                var $1053 = self.val;\n                                                var _term$18 = List$fold$($1038, $1053, (_x$18 => _t$19 => {\n                                                    var self = _x$18;\n                                                    switch (self._) {\n                                                        case 'Kind.Binder.new':\n                                                            var $1056 = self.eras;\n                                                            var $1057 = self.name;\n                                                            var $1058 = self.term;\n                                                            var $1059 = Kind$Term$all$($1056, \"\", $1057, $1058, (_s$23 => _x$24 => {\n                                                                var $1060 = _t$19;\n                                                                return $1060;\n                                                            }));\n                                                            var $1055 = $1059;\n                                                            break;\n                                                    };\n                                                    return $1055;\n                                                }));\n                                                var self = Kind$Parser$stop$($1022, $1051, $1052);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $1061 = self.idx;\n                                                        var $1062 = self.code;\n                                                        var $1063 = self.err;\n                                                        var $1064 = Parser$Reply$error$($1061, $1062, $1063);\n                                                        var $1054 = $1064;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $1065 = self.idx;\n                                                        var $1066 = self.code;\n                                                        var $1067 = self.val;\n                                                        var $1068 = Parser$Reply$value$($1065, $1066, (() => {\n                                                            var self = _term$18;\n                                                            switch (self._) {\n                                                                case 'Kind.Term.all':\n                                                                    var $1069 = self.eras;\n                                                                    var $1070 = self.name;\n                                                                    var $1071 = self.xtyp;\n                                                                    var $1072 = self.body;\n                                                                    var $1073 = Kind$Term$ori$($1067, Kind$Term$all$($1069, $1030, $1070, $1071, $1072));\n                                                                    return $1073;\n                                                                case 'Kind.Term.var':\n                                                                case 'Kind.Term.ref':\n                                                                case 'Kind.Term.typ':\n                                                                case 'Kind.Term.lam':\n                                                                case 'Kind.Term.app':\n                                                                case 'Kind.Term.let':\n                                                                case 'Kind.Term.def':\n                                                                case 'Kind.Term.ann':\n                                                                case 'Kind.Term.gol':\n                                                                case 'Kind.Term.hol':\n                                                                case 'Kind.Term.nat':\n                                                                case 'Kind.Term.chr':\n                                                                case 'Kind.Term.str':\n                                                                case 'Kind.Term.cse':\n                                                                case 'Kind.Term.ori':\n                                                                    var $1074 = _term$18;\n                                                                    return $1074;\n                                                            };\n                                                        })());\n                                                        var $1054 = $1068;\n                                                        break;\n                                                };\n                                                var $1046 = $1054;\n                                                break;\n                                        };\n                                        var $1039 = $1046;\n                                        break;\n                                };\n                                var $1031 = $1039;\n                                break;\n                        };\n                        var $1023 = $1031;\n                        break;\n                };\n                var $1015 = $1023;\n                break;\n        };\n        return $1015;\n    };\n    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);\n\n    function Kind$Parser$make_lambda$(_names$1, _body$2) {\n        var self = _names$1;\n        switch (self._) {\n            case 'List.cons':\n                var $1076 = self.head;\n                var $1077 = self.tail;\n                var $1078 = Kind$Term$lam$($1076, (_x$5 => {\n                    var $1079 = Kind$Parser$make_lambda$($1077, _body$2);\n                    return $1079;\n                }));\n                var $1075 = $1078;\n                break;\n            case 'List.nil':\n                var $1080 = _body$2;\n                var $1075 = $1080;\n                break;\n        };\n        return $1075;\n    };\n    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);\n\n    function Kind$Parser$lambda$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1082 = self.idx;\n                var $1083 = self.code;\n                var $1084 = self.err;\n                var $1085 = Parser$Reply$error$($1082, $1083, $1084);\n                var $1081 = $1085;\n                break;\n            case 'Parser.Reply.value':\n                var $1086 = self.idx;\n                var $1087 = self.code;\n                var $1088 = self.val;\n                var self = Kind$Parser$text$(\"(\", $1086, $1087);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1090 = self.idx;\n                        var $1091 = self.code;\n                        var $1092 = self.err;\n                        var $1093 = Parser$Reply$error$($1090, $1091, $1092);\n                        var $1089 = $1093;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1094 = self.idx;\n                        var $1095 = self.code;\n                        var self = Parser$until1$(Kind$Parser$text(\")\"), Kind$Parser$item(Kind$Parser$name1), $1094, $1095);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1097 = self.idx;\n                                var $1098 = self.code;\n                                var $1099 = self.err;\n                                var $1100 = Parser$Reply$error$($1097, $1098, $1099);\n                                var $1096 = $1100;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1101 = self.idx;\n                                var $1102 = self.code;\n                                var $1103 = self.val;\n                                var self = Kind$Parser$term$($1101, $1102);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1105 = self.idx;\n                                        var $1106 = self.code;\n                                        var $1107 = self.err;\n                                        var $1108 = Parser$Reply$error$($1105, $1106, $1107);\n                                        var $1104 = $1108;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1109 = self.idx;\n                                        var $1110 = self.code;\n                                        var $1111 = self.val;\n                                        var self = Kind$Parser$stop$($1088, $1109, $1110);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1113 = self.idx;\n                                                var $1114 = self.code;\n                                                var $1115 = self.err;\n                                                var $1116 = Parser$Reply$error$($1113, $1114, $1115);\n                                                var $1112 = $1116;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1117 = self.idx;\n                                                var $1118 = self.code;\n                                                var $1119 = self.val;\n                                                var _expr$18 = Kind$Parser$make_lambda$($1103, $1111);\n                                                var $1120 = Parser$Reply$value$($1117, $1118, Kind$Term$ori$($1119, _expr$18));\n                                                var $1112 = $1120;\n                                                break;\n                                        };\n                                        var $1104 = $1112;\n                                        break;\n                                };\n                                var $1096 = $1104;\n                                break;\n                        };\n                        var $1089 = $1096;\n                        break;\n                };\n                var $1081 = $1089;\n                break;\n        };\n        return $1081;\n    };\n    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);\n\n    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1122 = self.idx;\n                var $1123 = self.code;\n                var $1124 = self.err;\n                var $1125 = Parser$Reply$error$($1122, $1123, $1124);\n                var $1121 = $1125;\n                break;\n            case 'Parser.Reply.value':\n                var $1126 = self.idx;\n                var $1127 = self.code;\n                var $1128 = self.val;\n                var self = Kind$Parser$text$(\"<\", $1126, $1127);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1130 = self.idx;\n                        var $1131 = self.code;\n                        var $1132 = self.err;\n                        var $1133 = Parser$Reply$error$($1130, $1131, $1132);\n                        var $1129 = $1133;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1134 = self.idx;\n                        var $1135 = self.code;\n                        var self = Parser$until1$(Kind$Parser$text(\">\"), Kind$Parser$item(Kind$Parser$name1), $1134, $1135);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1137 = self.idx;\n                                var $1138 = self.code;\n                                var $1139 = self.err;\n                                var $1140 = Parser$Reply$error$($1137, $1138, $1139);\n                                var $1136 = $1140;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1141 = self.idx;\n                                var $1142 = self.code;\n                                var $1143 = self.val;\n                                var self = Kind$Parser$term$($1141, $1142);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1145 = self.idx;\n                                        var $1146 = self.code;\n                                        var $1147 = self.err;\n                                        var $1148 = Parser$Reply$error$($1145, $1146, $1147);\n                                        var $1144 = $1148;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1149 = self.idx;\n                                        var $1150 = self.code;\n                                        var $1151 = self.val;\n                                        var self = Kind$Parser$stop$($1128, $1149, $1150);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1153 = self.idx;\n                                                var $1154 = self.code;\n                                                var $1155 = self.err;\n                                                var $1156 = Parser$Reply$error$($1153, $1154, $1155);\n                                                var $1152 = $1156;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1157 = self.idx;\n                                                var $1158 = self.code;\n                                                var $1159 = self.val;\n                                                var _expr$18 = Kind$Parser$make_lambda$($1143, $1151);\n                                                var $1160 = Parser$Reply$value$($1157, $1158, Kind$Term$ori$($1159, _expr$18));\n                                                var $1152 = $1160;\n                                                break;\n                                        };\n                                        var $1144 = $1152;\n                                        break;\n                                };\n                                var $1136 = $1144;\n                                break;\n                        };\n                        var $1129 = $1136;\n                        break;\n                };\n                var $1121 = $1129;\n                break;\n        };\n        return $1121;\n    };\n    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);\n\n    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1162 = self.idx;\n                var $1163 = self.code;\n                var $1164 = self.err;\n                var $1165 = Parser$Reply$error$($1162, $1163, $1164);\n                var $1161 = $1165;\n                break;\n            case 'Parser.Reply.value':\n                var $1166 = self.idx;\n                var $1167 = self.code;\n                var $1168 = self.val;\n                var self = Kind$Parser$text$(\"()\", $1166, $1167);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1170 = self.idx;\n                        var $1171 = self.code;\n                        var $1172 = self.err;\n                        var $1173 = Parser$Reply$error$($1170, $1171, $1172);\n                        var $1169 = $1173;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1174 = self.idx;\n                        var $1175 = self.code;\n                        var self = Kind$Parser$term$($1174, $1175);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1177 = self.idx;\n                                var $1178 = self.code;\n                                var $1179 = self.err;\n                                var $1180 = Parser$Reply$error$($1177, $1178, $1179);\n                                var $1176 = $1180;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1181 = self.idx;\n                                var $1182 = self.code;\n                                var $1183 = self.val;\n                                var self = Kind$Parser$stop$($1168, $1181, $1182);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1185 = self.idx;\n                                        var $1186 = self.code;\n                                        var $1187 = self.err;\n                                        var $1188 = Parser$Reply$error$($1185, $1186, $1187);\n                                        var $1184 = $1188;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1189 = self.idx;\n                                        var $1190 = self.code;\n                                        var $1191 = self.val;\n                                        var _expr$15 = Kind$Term$lam$(\"\", (_x$15 => {\n                                            var $1193 = $1183;\n                                            return $1193;\n                                        }));\n                                        var $1192 = Parser$Reply$value$($1189, $1190, Kind$Term$ori$($1191, _expr$15));\n                                        var $1184 = $1192;\n                                        break;\n                                };\n                                var $1176 = $1184;\n                                break;\n                        };\n                        var $1169 = $1176;\n                        break;\n                };\n                var $1161 = $1169;\n                break;\n        };\n        return $1161;\n    };\n    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);\n\n    function Kind$Parser$parenthesis$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1195 = self.idx;\n                var $1196 = self.code;\n                var $1197 = self.err;\n                var $1198 = Parser$Reply$error$($1195, $1196, $1197);\n                var $1194 = $1198;\n                break;\n            case 'Parser.Reply.value':\n                var $1199 = self.idx;\n                var $1200 = self.code;\n                var $1201 = self.val;\n                var self = Kind$Parser$text$(\"(\", $1199, $1200);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1203 = self.idx;\n                        var $1204 = self.code;\n                        var $1205 = self.err;\n                        var $1206 = Parser$Reply$error$($1203, $1204, $1205);\n                        var $1202 = $1206;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1207 = self.idx;\n                        var $1208 = self.code;\n                        var self = Kind$Parser$term$($1207, $1208);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1210 = self.idx;\n                                var $1211 = self.code;\n                                var $1212 = self.err;\n                                var $1213 = Parser$Reply$error$($1210, $1211, $1212);\n                                var $1209 = $1213;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1214 = self.idx;\n                                var $1215 = self.code;\n                                var $1216 = self.val;\n                                var self = Kind$Parser$text$(\")\", $1214, $1215);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1218 = self.idx;\n                                        var $1219 = self.code;\n                                        var $1220 = self.err;\n                                        var $1221 = Parser$Reply$error$($1218, $1219, $1220);\n                                        var $1217 = $1221;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1222 = self.idx;\n                                        var $1223 = self.code;\n                                        var self = Kind$Parser$stop$($1201, $1222, $1223);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1225 = self.idx;\n                                                var $1226 = self.code;\n                                                var $1227 = self.err;\n                                                var $1228 = Parser$Reply$error$($1225, $1226, $1227);\n                                                var $1224 = $1228;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1229 = self.idx;\n                                                var $1230 = self.code;\n                                                var $1231 = self.val;\n                                                var $1232 = Parser$Reply$value$($1229, $1230, Kind$Term$ori$($1231, $1216));\n                                                var $1224 = $1232;\n                                                break;\n                                        };\n                                        var $1217 = $1224;\n                                        break;\n                                };\n                                var $1209 = $1217;\n                                break;\n                        };\n                        var $1202 = $1209;\n                        break;\n                };\n                var $1194 = $1202;\n                break;\n        };\n        return $1194;\n    };\n    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);\n\n    function Kind$Term$hol$(_path$1) {\n        var $1233 = ({\n            _: 'Kind.Term.hol',\n            'path': _path$1\n        });\n        return $1233;\n    };\n    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);\n\n    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1235 = self.idx;\n                var $1236 = self.code;\n                var $1237 = self.err;\n                var $1238 = Parser$Reply$error$($1235, $1236, $1237);\n                var $1234 = $1238;\n                break;\n            case 'Parser.Reply.value':\n                var $1239 = self.idx;\n                var $1240 = self.code;\n                var $1241 = self.val;\n                var self = Kind$Parser$text$(\"let \", $1239, $1240);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1243 = self.idx;\n                        var $1244 = self.code;\n                        var $1245 = self.err;\n                        var $1246 = Parser$Reply$error$($1243, $1244, $1245);\n                        var $1242 = $1246;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1247 = self.idx;\n                        var $1248 = self.code;\n                        var self = Kind$Parser$name1$($1247, $1248);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1250 = self.idx;\n                                var $1251 = self.code;\n                                var $1252 = self.err;\n                                var $1253 = Parser$Reply$error$($1250, $1251, $1252);\n                                var $1249 = $1253;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1254 = self.idx;\n                                var $1255 = self.code;\n                                var $1256 = self.val;\n                                var self = Kind$Parser$text$(\"=\", $1254, $1255);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1258 = self.idx;\n                                        var $1259 = self.code;\n                                        var $1260 = self.err;\n                                        var $1261 = Parser$Reply$error$($1258, $1259, $1260);\n                                        var $1257 = $1261;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1262 = self.idx;\n                                        var $1263 = self.code;\n                                        var self = Kind$Parser$text$(\"for \", $1262, $1263);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1265 = self.idx;\n                                                var $1266 = self.code;\n                                                var $1267 = self.err;\n                                                var $1268 = Parser$Reply$error$($1265, $1266, $1267);\n                                                var $1264 = $1268;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1269 = self.idx;\n                                                var $1270 = self.code;\n                                                var self = Kind$Parser$name1$($1269, $1270);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $1272 = self.idx;\n                                                        var $1273 = self.code;\n                                                        var $1274 = self.err;\n                                                        var $1275 = Parser$Reply$error$($1272, $1273, $1274);\n                                                        var $1271 = $1275;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $1276 = self.idx;\n                                                        var $1277 = self.code;\n                                                        var $1278 = self.val;\n                                                        var self = Kind$Parser$text$(\":\", $1276, $1277);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $1280 = self.idx;\n                                                                var $1281 = self.code;\n                                                                var $1282 = self.err;\n                                                                var $1283 = Parser$Reply$error$($1280, $1281, $1282);\n                                                                var $1279 = $1283;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $1284 = self.idx;\n                                                                var $1285 = self.code;\n                                                                var self = Kind$Parser$text$(\"U32\", $1284, $1285);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $1287 = self.idx;\n                                                                        var $1288 = self.code;\n                                                                        var $1289 = self.err;\n                                                                        var $1290 = Parser$Reply$error$($1287, $1288, $1289);\n                                                                        var $1286 = $1290;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $1291 = self.idx;\n                                                                        var $1292 = self.code;\n                                                                        var self = Kind$Parser$text$(\"from\", $1291, $1292);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $1294 = self.idx;\n                                                                                var $1295 = self.code;\n                                                                                var $1296 = self.err;\n                                                                                var $1297 = Parser$Reply$error$($1294, $1295, $1296);\n                                                                                var $1293 = $1297;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $1298 = self.idx;\n                                                                                var $1299 = self.code;\n                                                                                var self = Kind$Parser$term$($1298, $1299);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $1301 = self.idx;\n                                                                                        var $1302 = self.code;\n                                                                                        var $1303 = self.err;\n                                                                                        var $1304 = Parser$Reply$error$($1301, $1302, $1303);\n                                                                                        var $1300 = $1304;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $1305 = self.idx;\n                                                                                        var $1306 = self.code;\n                                                                                        var $1307 = self.val;\n                                                                                        var self = Kind$Parser$text$(\"to\", $1305, $1306);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $1309 = self.idx;\n                                                                                                var $1310 = self.code;\n                                                                                                var $1311 = self.err;\n                                                                                                var $1312 = Parser$Reply$error$($1309, $1310, $1311);\n                                                                                                var $1308 = $1312;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $1313 = self.idx;\n                                                                                                var $1314 = self.code;\n                                                                                                var self = Kind$Parser$term$($1313, $1314);\n                                                                                                switch (self._) {\n                                                                                                    case 'Parser.Reply.error':\n                                                                                                        var $1316 = self.idx;\n                                                                                                        var $1317 = self.code;\n                                                                                                        var $1318 = self.err;\n                                                                                                        var $1319 = Parser$Reply$error$($1316, $1317, $1318);\n                                                                                                        var $1315 = $1319;\n                                                                                                        break;\n                                                                                                    case 'Parser.Reply.value':\n                                                                                                        var $1320 = self.idx;\n                                                                                                        var $1321 = self.code;\n                                                                                                        var $1322 = self.val;\n                                                                                                        var self = Kind$Parser$text$(\":\", $1320, $1321);\n                                                                                                        switch (self._) {\n                                                                                                            case 'Parser.Reply.error':\n                                                                                                                var $1324 = self.idx;\n                                                                                                                var $1325 = self.code;\n                                                                                                                var $1326 = self.err;\n                                                                                                                var $1327 = Parser$Reply$error$($1324, $1325, $1326);\n                                                                                                                var $1323 = $1327;\n                                                                                                                break;\n                                                                                                            case 'Parser.Reply.value':\n                                                                                                                var $1328 = self.idx;\n                                                                                                                var $1329 = self.code;\n                                                                                                                var self = Kind$Parser$term$($1328, $1329);\n                                                                                                                switch (self._) {\n                                                                                                                    case 'Parser.Reply.error':\n                                                                                                                        var $1331 = self.idx;\n                                                                                                                        var $1332 = self.code;\n                                                                                                                        var $1333 = self.err;\n                                                                                                                        var $1334 = Parser$Reply$error$($1331, $1332, $1333);\n                                                                                                                        var $1330 = $1334;\n                                                                                                                        break;\n                                                                                                                    case 'Parser.Reply.value':\n                                                                                                                        var $1335 = self.idx;\n                                                                                                                        var $1336 = self.code;\n                                                                                                                        var $1337 = self.val;\n                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(\";\"), $1335, $1336);\n                                                                                                                        switch (self._) {\n                                                                                                                            case 'Parser.Reply.error':\n                                                                                                                                var $1339 = self.idx;\n                                                                                                                                var $1340 = self.code;\n                                                                                                                                var $1341 = self.err;\n                                                                                                                                var $1342 = Parser$Reply$error$($1339, $1340, $1341);\n                                                                                                                                var $1338 = $1342;\n                                                                                                                                break;\n                                                                                                                            case 'Parser.Reply.value':\n                                                                                                                                var $1343 = self.idx;\n                                                                                                                                var $1344 = self.code;\n                                                                                                                                var self = Kind$Parser$term$($1343, $1344);\n                                                                                                                                switch (self._) {\n                                                                                                                                    case 'Parser.Reply.error':\n                                                                                                                                        var $1346 = self.idx;\n                                                                                                                                        var $1347 = self.code;\n                                                                                                                                        var $1348 = self.err;\n                                                                                                                                        var $1349 = Parser$Reply$error$($1346, $1347, $1348);\n                                                                                                                                        var $1345 = $1349;\n                                                                                                                                        break;\n                                                                                                                                    case 'Parser.Reply.value':\n                                                                                                                                        var $1350 = self.idx;\n                                                                                                                                        var $1351 = self.code;\n                                                                                                                                        var $1352 = self.val;\n                                                                                                                                        var self = Kind$Parser$stop$($1241, $1350, $1351);\n                                                                                                                                        switch (self._) {\n                                                                                                                                            case 'Parser.Reply.error':\n                                                                                                                                                var $1354 = self.idx;\n                                                                                                                                                var $1355 = self.code;\n                                                                                                                                                var $1356 = self.err;\n                                                                                                                                                var $1357 = Parser$Reply$error$($1354, $1355, $1356);\n                                                                                                                                                var $1353 = $1357;\n                                                                                                                                                break;\n                                                                                                                                            case 'Parser.Reply.value':\n                                                                                                                                                var $1358 = self.idx;\n                                                                                                                                                var $1359 = self.code;\n                                                                                                                                                var $1360 = self.val;\n                                                                                                                                                var _term$54 = Kind$Term$ref$(\"U32.for\");\n                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));\n                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($1256));\n                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $1307);\n                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $1322);\n                                                                                                                                                var _lamb$59 = Kind$Term$lam$($1278, (_e$59 => {\n                                                                                                                                                    var $1362 = Kind$Term$lam$($1256, (_s$60 => {\n                                                                                                                                                        var $1363 = $1337;\n                                                                                                                                                        return $1363;\n                                                                                                                                                    }));\n                                                                                                                                                    return $1362;\n                                                                                                                                                }));\n                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);\n                                                                                                                                                var _term$61 = Kind$Term$let$($1256, _term$60, (_x$61 => {\n                                                                                                                                                    var $1364 = $1352;\n                                                                                                                                                    return $1364;\n                                                                                                                                                }));\n                                                                                                                                                var $1361 = Parser$Reply$value$($1358, $1359, Kind$Term$ori$($1360, _term$61));\n                                                                                                                                                var $1353 = $1361;\n                                                                                                                                                break;\n                                                                                                                                        };\n                                                                                                                                        var $1345 = $1353;\n                                                                                                                                        break;\n                                                                                                                                };\n                                                                                                                                var $1338 = $1345;\n                                                                                                                                break;\n                                                                                                                        };\n                                                                                                                        var $1330 = $1338;\n                                                                                                                        break;\n                                                                                                                };\n                                                                                                                var $1323 = $1330;\n                                                                                                                break;\n                                                                                                        };\n                                                                                                        var $1315 = $1323;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $1308 = $1315;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $1300 = $1308;\n                                                                                        break;\n                                                                                };\n                                                                                var $1293 = $1300;\n                                                                                break;\n                                                                        };\n                                                                        var $1286 = $1293;\n                                                                        break;\n                                                                };\n                                                                var $1279 = $1286;\n                                                                break;\n                                                        };\n                                                        var $1271 = $1279;\n                                                        break;\n                                                };\n                                                var $1264 = $1271;\n                                                break;\n                                        };\n                                        var $1257 = $1264;\n                                        break;\n                                };\n                                var $1249 = $1257;\n                                break;\n                        };\n                        var $1242 = $1249;\n                        break;\n                };\n                var $1234 = $1242;\n                break;\n        };\n        return $1234;\n    };\n    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);\n\n    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1366 = self.idx;\n                var $1367 = self.code;\n                var $1368 = self.err;\n                var $1369 = Parser$Reply$error$($1366, $1367, $1368);\n                var $1365 = $1369;\n                break;\n            case 'Parser.Reply.value':\n                var $1370 = self.idx;\n                var $1371 = self.code;\n                var $1372 = self.val;\n                var self = Kind$Parser$text$(\"for \", $1370, $1371);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1374 = self.idx;\n                        var $1375 = self.code;\n                        var $1376 = self.err;\n                        var $1377 = Parser$Reply$error$($1374, $1375, $1376);\n                        var $1373 = $1377;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1378 = self.idx;\n                        var $1379 = self.code;\n                        var self = Kind$Parser$name1$($1378, $1379);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1381 = self.idx;\n                                var $1382 = self.code;\n                                var $1383 = self.err;\n                                var $1384 = Parser$Reply$error$($1381, $1382, $1383);\n                                var $1380 = $1384;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1385 = self.idx;\n                                var $1386 = self.code;\n                                var $1387 = self.val;\n                                var self = Kind$Parser$text$(\":\", $1385, $1386);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1389 = self.idx;\n                                        var $1390 = self.code;\n                                        var $1391 = self.err;\n                                        var $1392 = Parser$Reply$error$($1389, $1390, $1391);\n                                        var $1388 = $1392;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1393 = self.idx;\n                                        var $1394 = self.code;\n                                        var self = Kind$Parser$text$(\"U32\", $1393, $1394);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1396 = self.idx;\n                                                var $1397 = self.code;\n                                                var $1398 = self.err;\n                                                var $1399 = Parser$Reply$error$($1396, $1397, $1398);\n                                                var $1395 = $1399;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1400 = self.idx;\n                                                var $1401 = self.code;\n                                                var self = Kind$Parser$text$(\"from\", $1400, $1401);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $1403 = self.idx;\n                                                        var $1404 = self.code;\n                                                        var $1405 = self.err;\n                                                        var $1406 = Parser$Reply$error$($1403, $1404, $1405);\n                                                        var $1402 = $1406;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $1407 = self.idx;\n                                                        var $1408 = self.code;\n                                                        var self = Kind$Parser$term$($1407, $1408);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $1410 = self.idx;\n                                                                var $1411 = self.code;\n                                                                var $1412 = self.err;\n                                                                var $1413 = Parser$Reply$error$($1410, $1411, $1412);\n                                                                var $1409 = $1413;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $1414 = self.idx;\n                                                                var $1415 = self.code;\n                                                                var $1416 = self.val;\n                                                                var self = Kind$Parser$text$(\"to\", $1414, $1415);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $1418 = self.idx;\n                                                                        var $1419 = self.code;\n                                                                        var $1420 = self.err;\n                                                                        var $1421 = Parser$Reply$error$($1418, $1419, $1420);\n                                                                        var $1417 = $1421;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $1422 = self.idx;\n                                                                        var $1423 = self.code;\n                                                                        var self = Kind$Parser$term$($1422, $1423);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $1425 = self.idx;\n                                                                                var $1426 = self.code;\n                                                                                var $1427 = self.err;\n                                                                                var $1428 = Parser$Reply$error$($1425, $1426, $1427);\n                                                                                var $1424 = $1428;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $1429 = self.idx;\n                                                                                var $1430 = self.code;\n                                                                                var $1431 = self.val;\n                                                                                var self = Kind$Parser$text$(\"with \", $1429, $1430);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $1433 = self.idx;\n                                                                                        var $1434 = self.code;\n                                                                                        var $1435 = self.err;\n                                                                                        var $1436 = Parser$Reply$error$($1433, $1434, $1435);\n                                                                                        var $1432 = $1436;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $1437 = self.idx;\n                                                                                        var $1438 = self.code;\n                                                                                        var self = Kind$Parser$name1$($1437, $1438);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $1440 = self.idx;\n                                                                                                var $1441 = self.code;\n                                                                                                var $1442 = self.err;\n                                                                                                var $1443 = Parser$Reply$error$($1440, $1441, $1442);\n                                                                                                var $1439 = $1443;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $1444 = self.idx;\n                                                                                                var $1445 = self.code;\n                                                                                                var $1446 = self.val;\n                                                                                                var self = Kind$Parser$text$(\":\", $1444, $1445);\n                                                                                                switch (self._) {\n                                                                                                    case 'Parser.Reply.error':\n                                                                                                        var $1448 = self.idx;\n                                                                                                        var $1449 = self.code;\n                                                                                                        var $1450 = self.err;\n                                                                                                        var $1451 = Parser$Reply$error$($1448, $1449, $1450);\n                                                                                                        var $1447 = $1451;\n                                                                                                        break;\n                                                                                                    case 'Parser.Reply.value':\n                                                                                                        var $1452 = self.idx;\n                                                                                                        var $1453 = self.code;\n                                                                                                        var self = Kind$Parser$term$($1452, $1453);\n                                                                                                        switch (self._) {\n                                                                                                            case 'Parser.Reply.error':\n                                                                                                                var $1455 = self.idx;\n                                                                                                                var $1456 = self.code;\n                                                                                                                var $1457 = self.err;\n                                                                                                                var $1458 = Parser$Reply$error$($1455, $1456, $1457);\n                                                                                                                var $1454 = $1458;\n                                                                                                                break;\n                                                                                                            case 'Parser.Reply.value':\n                                                                                                                var $1459 = self.idx;\n                                                                                                                var $1460 = self.code;\n                                                                                                                var $1461 = self.val;\n                                                                                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $1459, $1460);\n                                                                                                                switch (self._) {\n                                                                                                                    case 'Parser.Reply.error':\n                                                                                                                        var $1463 = self.idx;\n                                                                                                                        var $1464 = self.code;\n                                                                                                                        var $1465 = self.err;\n                                                                                                                        var $1466 = Parser$Reply$error$($1463, $1464, $1465);\n                                                                                                                        var $1462 = $1466;\n                                                                                                                        break;\n                                                                                                                    case 'Parser.Reply.value':\n                                                                                                                        var $1467 = self.idx;\n                                                                                                                        var $1468 = self.code;\n                                                                                                                        var self = Kind$Parser$term$($1467, $1468);\n                                                                                                                        switch (self._) {\n                                                                                                                            case 'Parser.Reply.error':\n                                                                                                                                var $1470 = self.idx;\n                                                                                                                                var $1471 = self.code;\n                                                                                                                                var $1472 = self.err;\n                                                                                                                                var $1473 = Parser$Reply$error$($1470, $1471, $1472);\n                                                                                                                                var $1469 = $1473;\n                                                                                                                                break;\n                                                                                                                            case 'Parser.Reply.value':\n                                                                                                                                var $1474 = self.idx;\n                                                                                                                                var $1475 = self.code;\n                                                                                                                                var $1476 = self.val;\n                                                                                                                                var self = Kind$Parser$stop$($1372, $1474, $1475);\n                                                                                                                                switch (self._) {\n                                                                                                                                    case 'Parser.Reply.error':\n                                                                                                                                        var $1478 = self.idx;\n                                                                                                                                        var $1479 = self.code;\n                                                                                                                                        var $1480 = self.err;\n                                                                                                                                        var $1481 = Parser$Reply$error$($1478, $1479, $1480);\n                                                                                                                                        var $1477 = $1481;\n                                                                                                                                        break;\n                                                                                                                                    case 'Parser.Reply.value':\n                                                                                                                                        var $1482 = self.idx;\n                                                                                                                                        var $1483 = self.code;\n                                                                                                                                        var $1484 = self.val;\n                                                                                                                                        var _term$51 = Kind$Term$ref$(\"U32.for\");\n                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));\n                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($1446));\n                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $1416);\n                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $1431);\n                                                                                                                                        var _lamb$56 = Kind$Term$lam$($1387, (_e$56 => {\n                                                                                                                                            var $1486 = Kind$Term$lam$($1446, (_s$57 => {\n                                                                                                                                                var $1487 = $1461;\n                                                                                                                                                return $1487;\n                                                                                                                                            }));\n                                                                                                                                            return $1486;\n                                                                                                                                        }));\n                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);\n                                                                                                                                        var _term$58 = Kind$Term$let$($1446, _term$57, (_x$58 => {\n                                                                                                                                            var $1488 = $1476;\n                                                                                                                                            return $1488;\n                                                                                                                                        }));\n                                                                                                                                        var $1485 = Parser$Reply$value$($1482, $1483, Kind$Term$ori$($1484, _term$58));\n                                                                                                                                        var $1477 = $1485;\n                                                                                                                                        break;\n                                                                                                                                };\n                                                                                                                                var $1469 = $1477;\n                                                                                                                                break;\n                                                                                                                        };\n                                                                                                                        var $1462 = $1469;\n                                                                                                                        break;\n                                                                                                                };\n                                                                                                                var $1454 = $1462;\n                                                                                                                break;\n                                                                                                        };\n                                                                                                        var $1447 = $1454;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $1439 = $1447;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $1432 = $1439;\n                                                                                        break;\n                                                                                };\n                                                                                var $1424 = $1432;\n                                                                                break;\n                                                                        };\n                                                                        var $1417 = $1424;\n                                                                        break;\n                                                                };\n                                                                var $1409 = $1417;\n                                                                break;\n                                                        };\n                                                        var $1402 = $1409;\n                                                        break;\n                                                };\n                                                var $1395 = $1402;\n                                                break;\n                                        };\n                                        var $1388 = $1395;\n                                        break;\n                                };\n                                var $1380 = $1388;\n                                break;\n                        };\n                        var $1373 = $1380;\n                        break;\n                };\n                var $1365 = $1373;\n                break;\n        };\n        return $1365;\n    };\n    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);\n\n    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1490 = self.idx;\n                var $1491 = self.code;\n                var $1492 = self.err;\n                var $1493 = Parser$Reply$error$($1490, $1491, $1492);\n                var $1489 = $1493;\n                break;\n            case 'Parser.Reply.value':\n                var $1494 = self.idx;\n                var $1495 = self.code;\n                var $1496 = self.val;\n                var self = Kind$Parser$text$(\"let \", $1494, $1495);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1498 = self.idx;\n                        var $1499 = self.code;\n                        var $1500 = self.err;\n                        var $1501 = Parser$Reply$error$($1498, $1499, $1500);\n                        var $1497 = $1501;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1502 = self.idx;\n                        var $1503 = self.code;\n                        var self = Kind$Parser$name1$($1502, $1503);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1505 = self.idx;\n                                var $1506 = self.code;\n                                var $1507 = self.err;\n                                var $1508 = Parser$Reply$error$($1505, $1506, $1507);\n                                var $1504 = $1508;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1509 = self.idx;\n                                var $1510 = self.code;\n                                var $1511 = self.val;\n                                var self = Kind$Parser$text$(\"=\", $1509, $1510);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1513 = self.idx;\n                                        var $1514 = self.code;\n                                        var $1515 = self.err;\n                                        var $1516 = Parser$Reply$error$($1513, $1514, $1515);\n                                        var $1512 = $1516;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1517 = self.idx;\n                                        var $1518 = self.code;\n                                        var self = Kind$Parser$text$(\"for \", $1517, $1518);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1520 = self.idx;\n                                                var $1521 = self.code;\n                                                var $1522 = self.err;\n                                                var $1523 = Parser$Reply$error$($1520, $1521, $1522);\n                                                var $1519 = $1523;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1524 = self.idx;\n                                                var $1525 = self.code;\n                                                var self = Kind$Parser$name1$($1524, $1525);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $1527 = self.idx;\n                                                        var $1528 = self.code;\n                                                        var $1529 = self.err;\n                                                        var $1530 = Parser$Reply$error$($1527, $1528, $1529);\n                                                        var $1526 = $1530;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $1531 = self.idx;\n                                                        var $1532 = self.code;\n                                                        var $1533 = self.val;\n                                                        var self = Kind$Parser$text$(\"from\", $1531, $1532);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $1535 = self.idx;\n                                                                var $1536 = self.code;\n                                                                var $1537 = self.err;\n                                                                var $1538 = Parser$Reply$error$($1535, $1536, $1537);\n                                                                var $1534 = $1538;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $1539 = self.idx;\n                                                                var $1540 = self.code;\n                                                                var self = Kind$Parser$term$($1539, $1540);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $1542 = self.idx;\n                                                                        var $1543 = self.code;\n                                                                        var $1544 = self.err;\n                                                                        var $1545 = Parser$Reply$error$($1542, $1543, $1544);\n                                                                        var $1541 = $1545;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $1546 = self.idx;\n                                                                        var $1547 = self.code;\n                                                                        var $1548 = self.val;\n                                                                        var self = Kind$Parser$text$(\"to\", $1546, $1547);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $1550 = self.idx;\n                                                                                var $1551 = self.code;\n                                                                                var $1552 = self.err;\n                                                                                var $1553 = Parser$Reply$error$($1550, $1551, $1552);\n                                                                                var $1549 = $1553;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $1554 = self.idx;\n                                                                                var $1555 = self.code;\n                                                                                var self = Kind$Parser$term$($1554, $1555);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $1557 = self.idx;\n                                                                                        var $1558 = self.code;\n                                                                                        var $1559 = self.err;\n                                                                                        var $1560 = Parser$Reply$error$($1557, $1558, $1559);\n                                                                                        var $1556 = $1560;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $1561 = self.idx;\n                                                                                        var $1562 = self.code;\n                                                                                        var $1563 = self.val;\n                                                                                        var self = Kind$Parser$text$(\":\", $1561, $1562);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $1565 = self.idx;\n                                                                                                var $1566 = self.code;\n                                                                                                var $1567 = self.err;\n                                                                                                var $1568 = Parser$Reply$error$($1565, $1566, $1567);\n                                                                                                var $1564 = $1568;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $1569 = self.idx;\n                                                                                                var $1570 = self.code;\n                                                                                                var self = Kind$Parser$term$($1569, $1570);\n                                                                                                switch (self._) {\n                                                                                                    case 'Parser.Reply.error':\n                                                                                                        var $1572 = self.idx;\n                                                                                                        var $1573 = self.code;\n                                                                                                        var $1574 = self.err;\n                                                                                                        var $1575 = Parser$Reply$error$($1572, $1573, $1574);\n                                                                                                        var $1571 = $1575;\n                                                                                                        break;\n                                                                                                    case 'Parser.Reply.value':\n                                                                                                        var $1576 = self.idx;\n                                                                                                        var $1577 = self.code;\n                                                                                                        var $1578 = self.val;\n                                                                                                        var self = Parser$maybe$(Kind$Parser$text(\";\"), $1576, $1577);\n                                                                                                        switch (self._) {\n                                                                                                            case 'Parser.Reply.error':\n                                                                                                                var $1580 = self.idx;\n                                                                                                                var $1581 = self.code;\n                                                                                                                var $1582 = self.err;\n                                                                                                                var $1583 = Parser$Reply$error$($1580, $1581, $1582);\n                                                                                                                var $1579 = $1583;\n                                                                                                                break;\n                                                                                                            case 'Parser.Reply.value':\n                                                                                                                var $1584 = self.idx;\n                                                                                                                var $1585 = self.code;\n                                                                                                                var self = Kind$Parser$term$($1584, $1585);\n                                                                                                                switch (self._) {\n                                                                                                                    case 'Parser.Reply.error':\n                                                                                                                        var $1587 = self.idx;\n                                                                                                                        var $1588 = self.code;\n                                                                                                                        var $1589 = self.err;\n                                                                                                                        var $1590 = Parser$Reply$error$($1587, $1588, $1589);\n                                                                                                                        var $1586 = $1590;\n                                                                                                                        break;\n                                                                                                                    case 'Parser.Reply.value':\n                                                                                                                        var $1591 = self.idx;\n                                                                                                                        var $1592 = self.code;\n                                                                                                                        var $1593 = self.val;\n                                                                                                                        var self = Kind$Parser$stop$($1496, $1591, $1592);\n                                                                                                                        switch (self._) {\n                                                                                                                            case 'Parser.Reply.error':\n                                                                                                                                var $1595 = self.idx;\n                                                                                                                                var $1596 = self.code;\n                                                                                                                                var $1597 = self.err;\n                                                                                                                                var $1598 = Parser$Reply$error$($1595, $1596, $1597);\n                                                                                                                                var $1594 = $1598;\n                                                                                                                                break;\n                                                                                                                            case 'Parser.Reply.value':\n                                                                                                                                var $1599 = self.idx;\n                                                                                                                                var $1600 = self.code;\n                                                                                                                                var $1601 = self.val;\n                                                                                                                                var _term$48 = Kind$Term$ref$(\"Nat.for\");\n                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));\n                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($1511));\n                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $1548);\n                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1563);\n                                                                                                                                var _lamb$53 = Kind$Term$lam$($1533, (_e$53 => {\n                                                                                                                                    var $1603 = Kind$Term$lam$($1511, (_s$54 => {\n                                                                                                                                        var $1604 = $1578;\n                                                                                                                                        return $1604;\n                                                                                                                                    }));\n                                                                                                                                    return $1603;\n                                                                                                                                }));\n                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);\n                                                                                                                                var _term$55 = Kind$Term$let$($1511, _term$54, (_x$55 => {\n                                                                                                                                    var $1605 = $1593;\n                                                                                                                                    return $1605;\n                                                                                                                                }));\n                                                                                                                                var $1602 = Parser$Reply$value$($1599, $1600, Kind$Term$ori$($1601, _term$55));\n                                                                                                                                var $1594 = $1602;\n                                                                                                                                break;\n                                                                                                                        };\n                                                                                                                        var $1586 = $1594;\n                                                                                                                        break;\n                                                                                                                };\n                                                                                                                var $1579 = $1586;\n                                                                                                                break;\n                                                                                                        };\n                                                                                                        var $1571 = $1579;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $1564 = $1571;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $1556 = $1564;\n                                                                                        break;\n                                                                                };\n                                                                                var $1549 = $1556;\n                                                                                break;\n                                                                        };\n                                                                        var $1541 = $1549;\n                                                                        break;\n                                                                };\n                                                                var $1534 = $1541;\n                                                                break;\n                                                        };\n                                                        var $1526 = $1534;\n                                                        break;\n                                                };\n                                                var $1519 = $1526;\n                                                break;\n                                        };\n                                        var $1512 = $1519;\n                                        break;\n                                };\n                                var $1504 = $1512;\n                                break;\n                        };\n                        var $1497 = $1504;\n                        break;\n                };\n                var $1489 = $1497;\n                break;\n        };\n        return $1489;\n    };\n    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);\n\n    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1607 = self.idx;\n                var $1608 = self.code;\n                var $1609 = self.err;\n                var $1610 = Parser$Reply$error$($1607, $1608, $1609);\n                var $1606 = $1610;\n                break;\n            case 'Parser.Reply.value':\n                var $1611 = self.idx;\n                var $1612 = self.code;\n                var $1613 = self.val;\n                var self = Kind$Parser$text$(\"for \", $1611, $1612);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1615 = self.idx;\n                        var $1616 = self.code;\n                        var $1617 = self.err;\n                        var $1618 = Parser$Reply$error$($1615, $1616, $1617);\n                        var $1614 = $1618;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1619 = self.idx;\n                        var $1620 = self.code;\n                        var self = Kind$Parser$name1$($1619, $1620);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1622 = self.idx;\n                                var $1623 = self.code;\n                                var $1624 = self.err;\n                                var $1625 = Parser$Reply$error$($1622, $1623, $1624);\n                                var $1621 = $1625;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1626 = self.idx;\n                                var $1627 = self.code;\n                                var $1628 = self.val;\n                                var self = Kind$Parser$text$(\"from\", $1626, $1627);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1630 = self.idx;\n                                        var $1631 = self.code;\n                                        var $1632 = self.err;\n                                        var $1633 = Parser$Reply$error$($1630, $1631, $1632);\n                                        var $1629 = $1633;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1634 = self.idx;\n                                        var $1635 = self.code;\n                                        var self = Kind$Parser$term$($1634, $1635);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1637 = self.idx;\n                                                var $1638 = self.code;\n                                                var $1639 = self.err;\n                                                var $1640 = Parser$Reply$error$($1637, $1638, $1639);\n                                                var $1636 = $1640;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1641 = self.idx;\n                                                var $1642 = self.code;\n                                                var $1643 = self.val;\n                                                var self = Kind$Parser$text$(\"to\", $1641, $1642);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $1645 = self.idx;\n                                                        var $1646 = self.code;\n                                                        var $1647 = self.err;\n                                                        var $1648 = Parser$Reply$error$($1645, $1646, $1647);\n                                                        var $1644 = $1648;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $1649 = self.idx;\n                                                        var $1650 = self.code;\n                                                        var self = Kind$Parser$term$($1649, $1650);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $1652 = self.idx;\n                                                                var $1653 = self.code;\n                                                                var $1654 = self.err;\n                                                                var $1655 = Parser$Reply$error$($1652, $1653, $1654);\n                                                                var $1651 = $1655;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $1656 = self.idx;\n                                                                var $1657 = self.code;\n                                                                var $1658 = self.val;\n                                                                var self = Kind$Parser$text$(\"with \", $1656, $1657);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $1660 = self.idx;\n                                                                        var $1661 = self.code;\n                                                                        var $1662 = self.err;\n                                                                        var $1663 = Parser$Reply$error$($1660, $1661, $1662);\n                                                                        var $1659 = $1663;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $1664 = self.idx;\n                                                                        var $1665 = self.code;\n                                                                        var self = Kind$Parser$name1$($1664, $1665);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $1667 = self.idx;\n                                                                                var $1668 = self.code;\n                                                                                var $1669 = self.err;\n                                                                                var $1670 = Parser$Reply$error$($1667, $1668, $1669);\n                                                                                var $1666 = $1670;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $1671 = self.idx;\n                                                                                var $1672 = self.code;\n                                                                                var $1673 = self.val;\n                                                                                var self = Kind$Parser$text$(\":\", $1671, $1672);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $1675 = self.idx;\n                                                                                        var $1676 = self.code;\n                                                                                        var $1677 = self.err;\n                                                                                        var $1678 = Parser$Reply$error$($1675, $1676, $1677);\n                                                                                        var $1674 = $1678;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $1679 = self.idx;\n                                                                                        var $1680 = self.code;\n                                                                                        var self = Kind$Parser$term$($1679, $1680);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $1682 = self.idx;\n                                                                                                var $1683 = self.code;\n                                                                                                var $1684 = self.err;\n                                                                                                var $1685 = Parser$Reply$error$($1682, $1683, $1684);\n                                                                                                var $1681 = $1685;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $1686 = self.idx;\n                                                                                                var $1687 = self.code;\n                                                                                                var $1688 = self.val;\n                                                                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $1686, $1687);\n                                                                                                switch (self._) {\n                                                                                                    case 'Parser.Reply.error':\n                                                                                                        var $1690 = self.idx;\n                                                                                                        var $1691 = self.code;\n                                                                                                        var $1692 = self.err;\n                                                                                                        var $1693 = Parser$Reply$error$($1690, $1691, $1692);\n                                                                                                        var $1689 = $1693;\n                                                                                                        break;\n                                                                                                    case 'Parser.Reply.value':\n                                                                                                        var $1694 = self.idx;\n                                                                                                        var $1695 = self.code;\n                                                                                                        var self = Kind$Parser$term$($1694, $1695);\n                                                                                                        switch (self._) {\n                                                                                                            case 'Parser.Reply.error':\n                                                                                                                var $1697 = self.idx;\n                                                                                                                var $1698 = self.code;\n                                                                                                                var $1699 = self.err;\n                                                                                                                var $1700 = Parser$Reply$error$($1697, $1698, $1699);\n                                                                                                                var $1696 = $1700;\n                                                                                                                break;\n                                                                                                            case 'Parser.Reply.value':\n                                                                                                                var $1701 = self.idx;\n                                                                                                                var $1702 = self.code;\n                                                                                                                var $1703 = self.val;\n                                                                                                                var self = Kind$Parser$stop$($1613, $1701, $1702);\n                                                                                                                switch (self._) {\n                                                                                                                    case 'Parser.Reply.error':\n                                                                                                                        var $1705 = self.idx;\n                                                                                                                        var $1706 = self.code;\n                                                                                                                        var $1707 = self.err;\n                                                                                                                        var $1708 = Parser$Reply$error$($1705, $1706, $1707);\n                                                                                                                        var $1704 = $1708;\n                                                                                                                        break;\n                                                                                                                    case 'Parser.Reply.value':\n                                                                                                                        var $1709 = self.idx;\n                                                                                                                        var $1710 = self.code;\n                                                                                                                        var $1711 = self.val;\n                                                                                                                        var _term$45 = Kind$Term$ref$(\"Nat.for\");\n                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));\n                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1673));\n                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1643);\n                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1658);\n                                                                                                                        var _lamb$50 = Kind$Term$lam$($1628, (_e$50 => {\n                                                                                                                            var $1713 = Kind$Term$lam$($1673, (_s$51 => {\n                                                                                                                                var $1714 = $1688;\n                                                                                                                                return $1714;\n                                                                                                                            }));\n                                                                                                                            return $1713;\n                                                                                                                        }));\n                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);\n                                                                                                                        var _term$52 = Kind$Term$let$($1673, _term$51, (_x$52 => {\n                                                                                                                            var $1715 = $1703;\n                                                                                                                            return $1715;\n                                                                                                                        }));\n                                                                                                                        var $1712 = Parser$Reply$value$($1709, $1710, Kind$Term$ori$($1711, _term$52));\n                                                                                                                        var $1704 = $1712;\n                                                                                                                        break;\n                                                                                                                };\n                                                                                                                var $1696 = $1704;\n                                                                                                                break;\n                                                                                                        };\n                                                                                                        var $1689 = $1696;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $1681 = $1689;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $1674 = $1681;\n                                                                                        break;\n                                                                                };\n                                                                                var $1666 = $1674;\n                                                                                break;\n                                                                        };\n                                                                        var $1659 = $1666;\n                                                                        break;\n                                                                };\n                                                                var $1651 = $1659;\n                                                                break;\n                                                        };\n                                                        var $1644 = $1651;\n                                                        break;\n                                                };\n                                                var $1636 = $1644;\n                                                break;\n                                        };\n                                        var $1629 = $1636;\n                                        break;\n                                };\n                                var $1621 = $1629;\n                                break;\n                        };\n                        var $1614 = $1621;\n                        break;\n                };\n                var $1606 = $1614;\n                break;\n        };\n        return $1606;\n    };\n    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);\n\n    function Kind$Parser$letforin$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1717 = self.idx;\n                var $1718 = self.code;\n                var $1719 = self.err;\n                var $1720 = Parser$Reply$error$($1717, $1718, $1719);\n                var $1716 = $1720;\n                break;\n            case 'Parser.Reply.value':\n                var $1721 = self.idx;\n                var $1722 = self.code;\n                var $1723 = self.val;\n                var self = Kind$Parser$text$(\"let \", $1721, $1722);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1725 = self.idx;\n                        var $1726 = self.code;\n                        var $1727 = self.err;\n                        var $1728 = Parser$Reply$error$($1725, $1726, $1727);\n                        var $1724 = $1728;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1729 = self.idx;\n                        var $1730 = self.code;\n                        var self = Kind$Parser$name1$($1729, $1730);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1732 = self.idx;\n                                var $1733 = self.code;\n                                var $1734 = self.err;\n                                var $1735 = Parser$Reply$error$($1732, $1733, $1734);\n                                var $1731 = $1735;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1736 = self.idx;\n                                var $1737 = self.code;\n                                var $1738 = self.val;\n                                var self = Kind$Parser$text$(\"=\", $1736, $1737);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1740 = self.idx;\n                                        var $1741 = self.code;\n                                        var $1742 = self.err;\n                                        var $1743 = Parser$Reply$error$($1740, $1741, $1742);\n                                        var $1739 = $1743;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1744 = self.idx;\n                                        var $1745 = self.code;\n                                        var self = Kind$Parser$text$(\"for \", $1744, $1745);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1747 = self.idx;\n                                                var $1748 = self.code;\n                                                var $1749 = self.err;\n                                                var $1750 = Parser$Reply$error$($1747, $1748, $1749);\n                                                var $1746 = $1750;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1751 = self.idx;\n                                                var $1752 = self.code;\n                                                var self = Kind$Parser$name1$($1751, $1752);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $1754 = self.idx;\n                                                        var $1755 = self.code;\n                                                        var $1756 = self.err;\n                                                        var $1757 = Parser$Reply$error$($1754, $1755, $1756);\n                                                        var $1753 = $1757;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $1758 = self.idx;\n                                                        var $1759 = self.code;\n                                                        var $1760 = self.val;\n                                                        var self = Kind$Parser$text$(\"in\", $1758, $1759);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $1762 = self.idx;\n                                                                var $1763 = self.code;\n                                                                var $1764 = self.err;\n                                                                var $1765 = Parser$Reply$error$($1762, $1763, $1764);\n                                                                var $1761 = $1765;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $1766 = self.idx;\n                                                                var $1767 = self.code;\n                                                                var self = Kind$Parser$term$($1766, $1767);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $1769 = self.idx;\n                                                                        var $1770 = self.code;\n                                                                        var $1771 = self.err;\n                                                                        var $1772 = Parser$Reply$error$($1769, $1770, $1771);\n                                                                        var $1768 = $1772;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $1773 = self.idx;\n                                                                        var $1774 = self.code;\n                                                                        var $1775 = self.val;\n                                                                        var self = Kind$Parser$text$(\":\", $1773, $1774);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $1777 = self.idx;\n                                                                                var $1778 = self.code;\n                                                                                var $1779 = self.err;\n                                                                                var $1780 = Parser$Reply$error$($1777, $1778, $1779);\n                                                                                var $1776 = $1780;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $1781 = self.idx;\n                                                                                var $1782 = self.code;\n                                                                                var self = Kind$Parser$term$($1781, $1782);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $1784 = self.idx;\n                                                                                        var $1785 = self.code;\n                                                                                        var $1786 = self.err;\n                                                                                        var $1787 = Parser$Reply$error$($1784, $1785, $1786);\n                                                                                        var $1783 = $1787;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $1788 = self.idx;\n                                                                                        var $1789 = self.code;\n                                                                                        var $1790 = self.val;\n                                                                                        var self = Parser$maybe$(Kind$Parser$text(\";\"), $1788, $1789);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $1792 = self.idx;\n                                                                                                var $1793 = self.code;\n                                                                                                var $1794 = self.err;\n                                                                                                var $1795 = Parser$Reply$error$($1792, $1793, $1794);\n                                                                                                var $1791 = $1795;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $1796 = self.idx;\n                                                                                                var $1797 = self.code;\n                                                                                                var self = Kind$Parser$term$($1796, $1797);\n                                                                                                switch (self._) {\n                                                                                                    case 'Parser.Reply.error':\n                                                                                                        var $1799 = self.idx;\n                                                                                                        var $1800 = self.code;\n                                                                                                        var $1801 = self.err;\n                                                                                                        var $1802 = Parser$Reply$error$($1799, $1800, $1801);\n                                                                                                        var $1798 = $1802;\n                                                                                                        break;\n                                                                                                    case 'Parser.Reply.value':\n                                                                                                        var $1803 = self.idx;\n                                                                                                        var $1804 = self.code;\n                                                                                                        var $1805 = self.val;\n                                                                                                        var self = Kind$Parser$stop$($1723, $1803, $1804);\n                                                                                                        switch (self._) {\n                                                                                                            case 'Parser.Reply.error':\n                                                                                                                var $1807 = self.idx;\n                                                                                                                var $1808 = self.code;\n                                                                                                                var $1809 = self.err;\n                                                                                                                var $1810 = Parser$Reply$error$($1807, $1808, $1809);\n                                                                                                                var $1806 = $1810;\n                                                                                                                break;\n                                                                                                            case 'Parser.Reply.value':\n                                                                                                                var $1811 = self.idx;\n                                                                                                                var $1812 = self.code;\n                                                                                                                var $1813 = self.val;\n                                                                                                                var _term$42 = Kind$Term$ref$(\"List.for\");\n                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));\n                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $1775);\n                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));\n                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($1738));\n                                                                                                                var _lamb$47 = Kind$Term$lam$($1760, (_i$47 => {\n                                                                                                                    var $1815 = Kind$Term$lam$($1738, (_x$48 => {\n                                                                                                                        var $1816 = $1790;\n                                                                                                                        return $1816;\n                                                                                                                    }));\n                                                                                                                    return $1815;\n                                                                                                                }));\n                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);\n                                                                                                                var _term$49 = Kind$Term$let$($1738, _term$48, (_x$49 => {\n                                                                                                                    var $1817 = $1805;\n                                                                                                                    return $1817;\n                                                                                                                }));\n                                                                                                                var $1814 = Parser$Reply$value$($1811, $1812, Kind$Term$ori$($1813, _term$49));\n                                                                                                                var $1806 = $1814;\n                                                                                                                break;\n                                                                                                        };\n                                                                                                        var $1798 = $1806;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $1791 = $1798;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $1783 = $1791;\n                                                                                        break;\n                                                                                };\n                                                                                var $1776 = $1783;\n                                                                                break;\n                                                                        };\n                                                                        var $1768 = $1776;\n                                                                        break;\n                                                                };\n                                                                var $1761 = $1768;\n                                                                break;\n                                                        };\n                                                        var $1753 = $1761;\n                                                        break;\n                                                };\n                                                var $1746 = $1753;\n                                                break;\n                                        };\n                                        var $1739 = $1746;\n                                        break;\n                                };\n                                var $1731 = $1739;\n                                break;\n                        };\n                        var $1724 = $1731;\n                        break;\n                };\n                var $1716 = $1724;\n                break;\n        };\n        return $1716;\n    };\n    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);\n\n    function Kind$Parser$letforin$with$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1819 = self.idx;\n                var $1820 = self.code;\n                var $1821 = self.err;\n                var $1822 = Parser$Reply$error$($1819, $1820, $1821);\n                var $1818 = $1822;\n                break;\n            case 'Parser.Reply.value':\n                var $1823 = self.idx;\n                var $1824 = self.code;\n                var $1825 = self.val;\n                var self = Kind$Parser$text$(\"for \", $1823, $1824);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1827 = self.idx;\n                        var $1828 = self.code;\n                        var $1829 = self.err;\n                        var $1830 = Parser$Reply$error$($1827, $1828, $1829);\n                        var $1826 = $1830;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1831 = self.idx;\n                        var $1832 = self.code;\n                        var self = Kind$Parser$name1$($1831, $1832);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1834 = self.idx;\n                                var $1835 = self.code;\n                                var $1836 = self.err;\n                                var $1837 = Parser$Reply$error$($1834, $1835, $1836);\n                                var $1833 = $1837;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1838 = self.idx;\n                                var $1839 = self.code;\n                                var $1840 = self.val;\n                                var self = Kind$Parser$text$(\"in\", $1838, $1839);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1842 = self.idx;\n                                        var $1843 = self.code;\n                                        var $1844 = self.err;\n                                        var $1845 = Parser$Reply$error$($1842, $1843, $1844);\n                                        var $1841 = $1845;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1846 = self.idx;\n                                        var $1847 = self.code;\n                                        var self = Kind$Parser$term$($1846, $1847);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1849 = self.idx;\n                                                var $1850 = self.code;\n                                                var $1851 = self.err;\n                                                var $1852 = Parser$Reply$error$($1849, $1850, $1851);\n                                                var $1848 = $1852;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1853 = self.idx;\n                                                var $1854 = self.code;\n                                                var $1855 = self.val;\n                                                var self = Kind$Parser$text$(\"with \", $1853, $1854);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $1857 = self.idx;\n                                                        var $1858 = self.code;\n                                                        var $1859 = self.err;\n                                                        var $1860 = Parser$Reply$error$($1857, $1858, $1859);\n                                                        var $1856 = $1860;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $1861 = self.idx;\n                                                        var $1862 = self.code;\n                                                        var self = Kind$Parser$name1$($1861, $1862);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $1864 = self.idx;\n                                                                var $1865 = self.code;\n                                                                var $1866 = self.err;\n                                                                var $1867 = Parser$Reply$error$($1864, $1865, $1866);\n                                                                var $1863 = $1867;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $1868 = self.idx;\n                                                                var $1869 = self.code;\n                                                                var $1870 = self.val;\n                                                                var self = Kind$Parser$text$(\":\", $1868, $1869);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $1872 = self.idx;\n                                                                        var $1873 = self.code;\n                                                                        var $1874 = self.err;\n                                                                        var $1875 = Parser$Reply$error$($1872, $1873, $1874);\n                                                                        var $1871 = $1875;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $1876 = self.idx;\n                                                                        var $1877 = self.code;\n                                                                        var self = Kind$Parser$term$($1876, $1877);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $1879 = self.idx;\n                                                                                var $1880 = self.code;\n                                                                                var $1881 = self.err;\n                                                                                var $1882 = Parser$Reply$error$($1879, $1880, $1881);\n                                                                                var $1878 = $1882;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $1883 = self.idx;\n                                                                                var $1884 = self.code;\n                                                                                var $1885 = self.val;\n                                                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $1883, $1884);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $1887 = self.idx;\n                                                                                        var $1888 = self.code;\n                                                                                        var $1889 = self.err;\n                                                                                        var $1890 = Parser$Reply$error$($1887, $1888, $1889);\n                                                                                        var $1886 = $1890;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $1891 = self.idx;\n                                                                                        var $1892 = self.code;\n                                                                                        var self = Kind$Parser$term$($1891, $1892);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $1894 = self.idx;\n                                                                                                var $1895 = self.code;\n                                                                                                var $1896 = self.err;\n                                                                                                var $1897 = Parser$Reply$error$($1894, $1895, $1896);\n                                                                                                var $1893 = $1897;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $1898 = self.idx;\n                                                                                                var $1899 = self.code;\n                                                                                                var $1900 = self.val;\n                                                                                                var self = Kind$Parser$stop$($1825, $1898, $1899);\n                                                                                                switch (self._) {\n                                                                                                    case 'Parser.Reply.error':\n                                                                                                        var $1902 = self.idx;\n                                                                                                        var $1903 = self.code;\n                                                                                                        var $1904 = self.err;\n                                                                                                        var $1905 = Parser$Reply$error$($1902, $1903, $1904);\n                                                                                                        var $1901 = $1905;\n                                                                                                        break;\n                                                                                                    case 'Parser.Reply.value':\n                                                                                                        var $1906 = self.idx;\n                                                                                                        var $1907 = self.code;\n                                                                                                        var $1908 = self.val;\n                                                                                                        var _term$39 = Kind$Term$ref$(\"List.for\");\n                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));\n                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $1855);\n                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));\n                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($1870));\n                                                                                                        var _lamb$44 = Kind$Term$lam$($1840, (_i$44 => {\n                                                                                                            var $1910 = Kind$Term$lam$($1870, (_x$45 => {\n                                                                                                                var $1911 = $1885;\n                                                                                                                return $1911;\n                                                                                                            }));\n                                                                                                            return $1910;\n                                                                                                        }));\n                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);\n                                                                                                        var _term$46 = Kind$Term$let$($1870, _term$45, (_x$46 => {\n                                                                                                            var $1912 = $1900;\n                                                                                                            return $1912;\n                                                                                                        }));\n                                                                                                        var $1909 = Parser$Reply$value$($1906, $1907, Kind$Term$ori$($1908, _term$46));\n                                                                                                        var $1901 = $1909;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $1893 = $1901;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $1886 = $1893;\n                                                                                        break;\n                                                                                };\n                                                                                var $1878 = $1886;\n                                                                                break;\n                                                                        };\n                                                                        var $1871 = $1878;\n                                                                        break;\n                                                                };\n                                                                var $1863 = $1871;\n                                                                break;\n                                                        };\n                                                        var $1856 = $1863;\n                                                        break;\n                                                };\n                                                var $1848 = $1856;\n                                                break;\n                                        };\n                                        var $1841 = $1848;\n                                        break;\n                                };\n                                var $1833 = $1841;\n                                break;\n                        };\n                        var $1826 = $1833;\n                        break;\n                };\n                var $1818 = $1826;\n                break;\n        };\n        return $1818;\n    };\n    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);\n\n    function Kind$Parser$letwhile$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $1914 = self.idx;\n                var $1915 = self.code;\n                var $1916 = self.err;\n                var $1917 = Parser$Reply$error$($1914, $1915, $1916);\n                var $1913 = $1917;\n                break;\n            case 'Parser.Reply.value':\n                var $1918 = self.idx;\n                var $1919 = self.code;\n                var $1920 = self.val;\n                var self = Kind$Parser$text$(\"let \", $1918, $1919);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $1922 = self.idx;\n                        var $1923 = self.code;\n                        var $1924 = self.err;\n                        var $1925 = Parser$Reply$error$($1922, $1923, $1924);\n                        var $1921 = $1925;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $1926 = self.idx;\n                        var $1927 = self.code;\n                        var self = Kind$Parser$name1$($1926, $1927);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $1929 = self.idx;\n                                var $1930 = self.code;\n                                var $1931 = self.err;\n                                var $1932 = Parser$Reply$error$($1929, $1930, $1931);\n                                var $1928 = $1932;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $1933 = self.idx;\n                                var $1934 = self.code;\n                                var $1935 = self.val;\n                                var self = Kind$Parser$text$(\"=\", $1933, $1934);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $1937 = self.idx;\n                                        var $1938 = self.code;\n                                        var $1939 = self.err;\n                                        var $1940 = Parser$Reply$error$($1937, $1938, $1939);\n                                        var $1936 = $1940;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $1941 = self.idx;\n                                        var $1942 = self.code;\n                                        var self = Kind$Parser$text$(\"while \", $1941, $1942);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $1944 = self.idx;\n                                                var $1945 = self.code;\n                                                var $1946 = self.err;\n                                                var $1947 = Parser$Reply$error$($1944, $1945, $1946);\n                                                var $1943 = $1947;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $1948 = self.idx;\n                                                var $1949 = self.code;\n                                                var self = Kind$Parser$term$($1948, $1949);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $1951 = self.idx;\n                                                        var $1952 = self.code;\n                                                        var $1953 = self.err;\n                                                        var $1954 = Parser$Reply$error$($1951, $1952, $1953);\n                                                        var $1950 = $1954;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $1955 = self.idx;\n                                                        var $1956 = self.code;\n                                                        var $1957 = self.val;\n                                                        var self = Kind$Parser$text$(\":\", $1955, $1956);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $1959 = self.idx;\n                                                                var $1960 = self.code;\n                                                                var $1961 = self.err;\n                                                                var $1962 = Parser$Reply$error$($1959, $1960, $1961);\n                                                                var $1958 = $1962;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $1963 = self.idx;\n                                                                var $1964 = self.code;\n                                                                var self = Kind$Parser$term$($1963, $1964);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $1966 = self.idx;\n                                                                        var $1967 = self.code;\n                                                                        var $1968 = self.err;\n                                                                        var $1969 = Parser$Reply$error$($1966, $1967, $1968);\n                                                                        var $1965 = $1969;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $1970 = self.idx;\n                                                                        var $1971 = self.code;\n                                                                        var $1972 = self.val;\n                                                                        var self = Parser$maybe$(Kind$Parser$text(\";\"), $1970, $1971);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $1974 = self.idx;\n                                                                                var $1975 = self.code;\n                                                                                var $1976 = self.err;\n                                                                                var $1977 = Parser$Reply$error$($1974, $1975, $1976);\n                                                                                var $1973 = $1977;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $1978 = self.idx;\n                                                                                var $1979 = self.code;\n                                                                                var self = Kind$Parser$term$($1978, $1979);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $1981 = self.idx;\n                                                                                        var $1982 = self.code;\n                                                                                        var $1983 = self.err;\n                                                                                        var $1984 = Parser$Reply$error$($1981, $1982, $1983);\n                                                                                        var $1980 = $1984;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $1985 = self.idx;\n                                                                                        var $1986 = self.code;\n                                                                                        var $1987 = self.val;\n                                                                                        var self = Kind$Parser$stop$($1920, $1985, $1986);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $1989 = self.idx;\n                                                                                                var $1990 = self.code;\n                                                                                                var $1991 = self.err;\n                                                                                                var $1992 = Parser$Reply$error$($1989, $1990, $1991);\n                                                                                                var $1988 = $1992;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $1993 = self.idx;\n                                                                                                var $1994 = self.code;\n                                                                                                var $1995 = self.val;\n                                                                                                var _term$36 = Kind$Term$ref$(\"Function.while\");\n                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));\n                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($1935));\n                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($1935, (_s$39 => {\n                                                                                                    var $1997 = $1957;\n                                                                                                    return $1997;\n                                                                                                })));\n                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($1935, (_s$40 => {\n                                                                                                    var $1998 = $1972;\n                                                                                                    return $1998;\n                                                                                                })));\n                                                                                                var _term$41 = Kind$Term$let$($1935, _term$40, (_x$41 => {\n                                                                                                    var $1999 = $1987;\n                                                                                                    return $1999;\n                                                                                                }));\n                                                                                                var $1996 = Parser$Reply$value$($1993, $1994, Kind$Term$ori$($1995, _term$41));\n                                                                                                var $1988 = $1996;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $1980 = $1988;\n                                                                                        break;\n                                                                                };\n                                                                                var $1973 = $1980;\n                                                                                break;\n                                                                        };\n                                                                        var $1965 = $1973;\n                                                                        break;\n                                                                };\n                                                                var $1958 = $1965;\n                                                                break;\n                                                        };\n                                                        var $1950 = $1958;\n                                                        break;\n                                                };\n                                                var $1943 = $1950;\n                                                break;\n                                        };\n                                        var $1936 = $1943;\n                                        break;\n                                };\n                                var $1928 = $1936;\n                                break;\n                        };\n                        var $1921 = $1928;\n                        break;\n                };\n                var $1913 = $1921;\n                break;\n        };\n        return $1913;\n    };\n    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);\n\n    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2001 = self.idx;\n                var $2002 = self.code;\n                var $2003 = self.err;\n                var $2004 = Parser$Reply$error$($2001, $2002, $2003);\n                var $2000 = $2004;\n                break;\n            case 'Parser.Reply.value':\n                var $2005 = self.idx;\n                var $2006 = self.code;\n                var $2007 = self.val;\n                var self = Kind$Parser$text$(\"while \", $2005, $2006);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2009 = self.idx;\n                        var $2010 = self.code;\n                        var $2011 = self.err;\n                        var $2012 = Parser$Reply$error$($2009, $2010, $2011);\n                        var $2008 = $2012;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2013 = self.idx;\n                        var $2014 = self.code;\n                        var self = Kind$Parser$term$($2013, $2014);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2016 = self.idx;\n                                var $2017 = self.code;\n                                var $2018 = self.err;\n                                var $2019 = Parser$Reply$error$($2016, $2017, $2018);\n                                var $2015 = $2019;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2020 = self.idx;\n                                var $2021 = self.code;\n                                var $2022 = self.val;\n                                var self = Kind$Parser$text$(\"with \", $2020, $2021);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2024 = self.idx;\n                                        var $2025 = self.code;\n                                        var $2026 = self.err;\n                                        var $2027 = Parser$Reply$error$($2024, $2025, $2026);\n                                        var $2023 = $2027;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2028 = self.idx;\n                                        var $2029 = self.code;\n                                        var self = Kind$Parser$name1$($2028, $2029);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2031 = self.idx;\n                                                var $2032 = self.code;\n                                                var $2033 = self.err;\n                                                var $2034 = Parser$Reply$error$($2031, $2032, $2033);\n                                                var $2030 = $2034;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2035 = self.idx;\n                                                var $2036 = self.code;\n                                                var $2037 = self.val;\n                                                var self = Kind$Parser$text$(\":\", $2035, $2036);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2039 = self.idx;\n                                                        var $2040 = self.code;\n                                                        var $2041 = self.err;\n                                                        var $2042 = Parser$Reply$error$($2039, $2040, $2041);\n                                                        var $2038 = $2042;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2043 = self.idx;\n                                                        var $2044 = self.code;\n                                                        var self = Kind$Parser$term$($2043, $2044);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2046 = self.idx;\n                                                                var $2047 = self.code;\n                                                                var $2048 = self.err;\n                                                                var $2049 = Parser$Reply$error$($2046, $2047, $2048);\n                                                                var $2045 = $2049;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2050 = self.idx;\n                                                                var $2051 = self.code;\n                                                                var $2052 = self.val;\n                                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $2050, $2051);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2054 = self.idx;\n                                                                        var $2055 = self.code;\n                                                                        var $2056 = self.err;\n                                                                        var $2057 = Parser$Reply$error$($2054, $2055, $2056);\n                                                                        var $2053 = $2057;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2058 = self.idx;\n                                                                        var $2059 = self.code;\n                                                                        var self = Kind$Parser$term$($2058, $2059);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $2061 = self.idx;\n                                                                                var $2062 = self.code;\n                                                                                var $2063 = self.err;\n                                                                                var $2064 = Parser$Reply$error$($2061, $2062, $2063);\n                                                                                var $2060 = $2064;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $2065 = self.idx;\n                                                                                var $2066 = self.code;\n                                                                                var $2067 = self.val;\n                                                                                var self = Kind$Parser$stop$($2007, $2065, $2066);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $2069 = self.idx;\n                                                                                        var $2070 = self.code;\n                                                                                        var $2071 = self.err;\n                                                                                        var $2072 = Parser$Reply$error$($2069, $2070, $2071);\n                                                                                        var $2068 = $2072;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $2073 = self.idx;\n                                                                                        var $2074 = self.code;\n                                                                                        var $2075 = self.val;\n                                                                                        var _term$33 = Kind$Term$ref$(\"Function.while\");\n                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));\n                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($2037));\n                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($2037, (_s$36 => {\n                                                                                            var $2077 = $2022;\n                                                                                            return $2077;\n                                                                                        })));\n                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($2037, (_s$37 => {\n                                                                                            var $2078 = $2052;\n                                                                                            return $2078;\n                                                                                        })));\n                                                                                        var _term$38 = Kind$Term$let$($2037, _term$37, (_x$38 => {\n                                                                                            var $2079 = $2067;\n                                                                                            return $2079;\n                                                                                        }));\n                                                                                        var $2076 = Parser$Reply$value$($2073, $2074, Kind$Term$ori$($2075, _term$38));\n                                                                                        var $2068 = $2076;\n                                                                                        break;\n                                                                                };\n                                                                                var $2060 = $2068;\n                                                                                break;\n                                                                        };\n                                                                        var $2053 = $2060;\n                                                                        break;\n                                                                };\n                                                                var $2045 = $2053;\n                                                                break;\n                                                        };\n                                                        var $2038 = $2045;\n                                                        break;\n                                                };\n                                                var $2030 = $2038;\n                                                break;\n                                        };\n                                        var $2023 = $2030;\n                                        break;\n                                };\n                                var $2015 = $2023;\n                                break;\n                        };\n                        var $2008 = $2015;\n                        break;\n                };\n                var $2000 = $2008;\n                break;\n        };\n        return $2000;\n    };\n    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);\n\n    function Kind$Parser$let$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2081 = self.idx;\n                var $2082 = self.code;\n                var $2083 = self.err;\n                var $2084 = Parser$Reply$error$($2081, $2082, $2083);\n                var $2080 = $2084;\n                break;\n            case 'Parser.Reply.value':\n                var $2085 = self.idx;\n                var $2086 = self.code;\n                var $2087 = self.val;\n                var self = Kind$Parser$text$(\"let \", $2085, $2086);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2089 = self.idx;\n                        var $2090 = self.code;\n                        var $2091 = self.err;\n                        var $2092 = Parser$Reply$error$($2089, $2090, $2091);\n                        var $2088 = $2092;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2093 = self.idx;\n                        var $2094 = self.code;\n                        var self = Kind$Parser$name$($2093, $2094);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2096 = self.idx;\n                                var $2097 = self.code;\n                                var $2098 = self.err;\n                                var $2099 = Parser$Reply$error$($2096, $2097, $2098);\n                                var $2095 = $2099;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2100 = self.idx;\n                                var $2101 = self.code;\n                                var $2102 = self.val;\n                                var self = Kind$Parser$text$(\"=\", $2100, $2101);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2104 = self.idx;\n                                        var $2105 = self.code;\n                                        var $2106 = self.err;\n                                        var $2107 = Parser$Reply$error$($2104, $2105, $2106);\n                                        var $2103 = $2107;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2108 = self.idx;\n                                        var $2109 = self.code;\n                                        var self = Kind$Parser$term$($2108, $2109);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2111 = self.idx;\n                                                var $2112 = self.code;\n                                                var $2113 = self.err;\n                                                var $2114 = Parser$Reply$error$($2111, $2112, $2113);\n                                                var $2110 = $2114;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2115 = self.idx;\n                                                var $2116 = self.code;\n                                                var $2117 = self.val;\n                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $2115, $2116);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2119 = self.idx;\n                                                        var $2120 = self.code;\n                                                        var $2121 = self.err;\n                                                        var $2122 = Parser$Reply$error$($2119, $2120, $2121);\n                                                        var $2118 = $2122;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2123 = self.idx;\n                                                        var $2124 = self.code;\n                                                        var self = Kind$Parser$term$($2123, $2124);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2126 = self.idx;\n                                                                var $2127 = self.code;\n                                                                var $2128 = self.err;\n                                                                var $2129 = Parser$Reply$error$($2126, $2127, $2128);\n                                                                var $2125 = $2129;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2130 = self.idx;\n                                                                var $2131 = self.code;\n                                                                var $2132 = self.val;\n                                                                var self = Kind$Parser$stop$($2087, $2130, $2131);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2134 = self.idx;\n                                                                        var $2135 = self.code;\n                                                                        var $2136 = self.err;\n                                                                        var $2137 = Parser$Reply$error$($2134, $2135, $2136);\n                                                                        var $2133 = $2137;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2138 = self.idx;\n                                                                        var $2139 = self.code;\n                                                                        var $2140 = self.val;\n                                                                        var $2141 = Parser$Reply$value$($2138, $2139, Kind$Term$ori$($2140, Kind$Term$let$($2102, $2117, (_x$27 => {\n                                                                            var $2142 = $2132;\n                                                                            return $2142;\n                                                                        }))));\n                                                                        var $2133 = $2141;\n                                                                        break;\n                                                                };\n                                                                var $2125 = $2133;\n                                                                break;\n                                                        };\n                                                        var $2118 = $2125;\n                                                        break;\n                                                };\n                                                var $2110 = $2118;\n                                                break;\n                                        };\n                                        var $2103 = $2110;\n                                        break;\n                                };\n                                var $2095 = $2103;\n                                break;\n                        };\n                        var $2088 = $2095;\n                        break;\n                };\n                var $2080 = $2088;\n                break;\n        };\n        return $2080;\n    };\n    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);\n\n    function Kind$Parser$let$omit$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2144 = self.idx;\n                var $2145 = self.code;\n                var $2146 = self.err;\n                var $2147 = Parser$Reply$error$($2144, $2145, $2146);\n                var $2143 = $2147;\n                break;\n            case 'Parser.Reply.value':\n                var $2148 = self.idx;\n                var $2149 = self.code;\n                var $2150 = self.val;\n                var self = Kind$Parser$name$($2148, $2149);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2152 = self.idx;\n                        var $2153 = self.code;\n                        var $2154 = self.err;\n                        var $2155 = Parser$Reply$error$($2152, $2153, $2154);\n                        var $2151 = $2155;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2156 = self.idx;\n                        var $2157 = self.code;\n                        var $2158 = self.val;\n                        var self = Kind$Parser$text$(\"= \", $2156, $2157);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2160 = self.idx;\n                                var $2161 = self.code;\n                                var $2162 = self.err;\n                                var $2163 = Parser$Reply$error$($2160, $2161, $2162);\n                                var $2159 = $2163;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2164 = self.idx;\n                                var $2165 = self.code;\n                                var self = Kind$Parser$term$($2164, $2165);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2167 = self.idx;\n                                        var $2168 = self.code;\n                                        var $2169 = self.err;\n                                        var $2170 = Parser$Reply$error$($2167, $2168, $2169);\n                                        var $2166 = $2170;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2171 = self.idx;\n                                        var $2172 = self.code;\n                                        var $2173 = self.val;\n                                        var self = Parser$maybe$(Kind$Parser$text(\";\"), $2171, $2172);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2175 = self.idx;\n                                                var $2176 = self.code;\n                                                var $2177 = self.err;\n                                                var $2178 = Parser$Reply$error$($2175, $2176, $2177);\n                                                var $2174 = $2178;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2179 = self.idx;\n                                                var $2180 = self.code;\n                                                var self = Kind$Parser$term$($2179, $2180);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2182 = self.idx;\n                                                        var $2183 = self.code;\n                                                        var $2184 = self.err;\n                                                        var $2185 = Parser$Reply$error$($2182, $2183, $2184);\n                                                        var $2181 = $2185;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2186 = self.idx;\n                                                        var $2187 = self.code;\n                                                        var $2188 = self.val;\n                                                        var self = Kind$Parser$stop$($2150, $2186, $2187);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2190 = self.idx;\n                                                                var $2191 = self.code;\n                                                                var $2192 = self.err;\n                                                                var $2193 = Parser$Reply$error$($2190, $2191, $2192);\n                                                                var $2189 = $2193;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2194 = self.idx;\n                                                                var $2195 = self.code;\n                                                                var $2196 = self.val;\n                                                                var $2197 = Parser$Reply$value$($2194, $2195, Kind$Term$ori$($2196, Kind$Term$let$($2158, $2173, (_x$24 => {\n                                                                    var $2198 = $2188;\n                                                                    return $2198;\n                                                                }))));\n                                                                var $2189 = $2197;\n                                                                break;\n                                                        };\n                                                        var $2181 = $2189;\n                                                        break;\n                                                };\n                                                var $2174 = $2181;\n                                                break;\n                                        };\n                                        var $2166 = $2174;\n                                        break;\n                                };\n                                var $2159 = $2166;\n                                break;\n                        };\n                        var $2151 = $2159;\n                        break;\n                };\n                var $2143 = $2151;\n                break;\n        };\n        return $2143;\n    };\n    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);\n\n    function Kind$Parser$getwhile$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2200 = self.idx;\n                var $2201 = self.code;\n                var $2202 = self.err;\n                var $2203 = Parser$Reply$error$($2200, $2201, $2202);\n                var $2199 = $2203;\n                break;\n            case 'Parser.Reply.value':\n                var $2204 = self.idx;\n                var $2205 = self.code;\n                var $2206 = self.val;\n                var self = Parser$maybe$(Kind$Parser$text(\"let \"), $2204, $2205);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2208 = self.idx;\n                        var $2209 = self.code;\n                        var $2210 = self.err;\n                        var $2211 = Parser$Reply$error$($2208, $2209, $2210);\n                        var $2207 = $2211;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2212 = self.idx;\n                        var $2213 = self.code;\n                        var self = Kind$Parser$text$(\"{\", $2212, $2213);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2215 = self.idx;\n                                var $2216 = self.code;\n                                var $2217 = self.err;\n                                var $2218 = Parser$Reply$error$($2215, $2216, $2217);\n                                var $2214 = $2218;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2219 = self.idx;\n                                var $2220 = self.code;\n                                var self = Kind$Parser$name$($2219, $2220);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2222 = self.idx;\n                                        var $2223 = self.code;\n                                        var $2224 = self.err;\n                                        var $2225 = Parser$Reply$error$($2222, $2223, $2224);\n                                        var $2221 = $2225;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2226 = self.idx;\n                                        var $2227 = self.code;\n                                        var $2228 = self.val;\n                                        var self = Kind$Parser$text$(\",\", $2226, $2227);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2230 = self.idx;\n                                                var $2231 = self.code;\n                                                var $2232 = self.err;\n                                                var $2233 = Parser$Reply$error$($2230, $2231, $2232);\n                                                var $2229 = $2233;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2234 = self.idx;\n                                                var $2235 = self.code;\n                                                var self = Kind$Parser$name$($2234, $2235);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2237 = self.idx;\n                                                        var $2238 = self.code;\n                                                        var $2239 = self.err;\n                                                        var $2240 = Parser$Reply$error$($2237, $2238, $2239);\n                                                        var $2236 = $2240;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2241 = self.idx;\n                                                        var $2242 = self.code;\n                                                        var $2243 = self.val;\n                                                        var self = Kind$Parser$text$(\"}\", $2241, $2242);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2245 = self.idx;\n                                                                var $2246 = self.code;\n                                                                var $2247 = self.err;\n                                                                var $2248 = Parser$Reply$error$($2245, $2246, $2247);\n                                                                var $2244 = $2248;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2249 = self.idx;\n                                                                var $2250 = self.code;\n                                                                var self = Kind$Parser$text$(\"=\", $2249, $2250);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2252 = self.idx;\n                                                                        var $2253 = self.code;\n                                                                        var $2254 = self.err;\n                                                                        var $2255 = Parser$Reply$error$($2252, $2253, $2254);\n                                                                        var $2251 = $2255;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2256 = self.idx;\n                                                                        var $2257 = self.code;\n                                                                        var self = Kind$Parser$text$(\"while \", $2256, $2257);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $2259 = self.idx;\n                                                                                var $2260 = self.code;\n                                                                                var $2261 = self.err;\n                                                                                var $2262 = Parser$Reply$error$($2259, $2260, $2261);\n                                                                                var $2258 = $2262;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $2263 = self.idx;\n                                                                                var $2264 = self.code;\n                                                                                var self = Kind$Parser$term$($2263, $2264);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $2266 = self.idx;\n                                                                                        var $2267 = self.code;\n                                                                                        var $2268 = self.err;\n                                                                                        var $2269 = Parser$Reply$error$($2266, $2267, $2268);\n                                                                                        var $2265 = $2269;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $2270 = self.idx;\n                                                                                        var $2271 = self.code;\n                                                                                        var $2272 = self.val;\n                                                                                        var self = Kind$Parser$text$(\":\", $2270, $2271);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $2274 = self.idx;\n                                                                                                var $2275 = self.code;\n                                                                                                var $2276 = self.err;\n                                                                                                var $2277 = Parser$Reply$error$($2274, $2275, $2276);\n                                                                                                var $2273 = $2277;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $2278 = self.idx;\n                                                                                                var $2279 = self.code;\n                                                                                                var self = Kind$Parser$term$($2278, $2279);\n                                                                                                switch (self._) {\n                                                                                                    case 'Parser.Reply.error':\n                                                                                                        var $2281 = self.idx;\n                                                                                                        var $2282 = self.code;\n                                                                                                        var $2283 = self.err;\n                                                                                                        var $2284 = Parser$Reply$error$($2281, $2282, $2283);\n                                                                                                        var $2280 = $2284;\n                                                                                                        break;\n                                                                                                    case 'Parser.Reply.value':\n                                                                                                        var $2285 = self.idx;\n                                                                                                        var $2286 = self.code;\n                                                                                                        var $2287 = self.val;\n                                                                                                        var self = Parser$maybe$(Kind$Parser$text(\";\"), $2285, $2286);\n                                                                                                        switch (self._) {\n                                                                                                            case 'Parser.Reply.error':\n                                                                                                                var $2289 = self.idx;\n                                                                                                                var $2290 = self.code;\n                                                                                                                var $2291 = self.err;\n                                                                                                                var $2292 = Parser$Reply$error$($2289, $2290, $2291);\n                                                                                                                var $2288 = $2292;\n                                                                                                                break;\n                                                                                                            case 'Parser.Reply.value':\n                                                                                                                var $2293 = self.idx;\n                                                                                                                var $2294 = self.code;\n                                                                                                                var self = Kind$Parser$term$($2293, $2294);\n                                                                                                                switch (self._) {\n                                                                                                                    case 'Parser.Reply.error':\n                                                                                                                        var $2296 = self.idx;\n                                                                                                                        var $2297 = self.code;\n                                                                                                                        var $2298 = self.err;\n                                                                                                                        var $2299 = Parser$Reply$error$($2296, $2297, $2298);\n                                                                                                                        var $2295 = $2299;\n                                                                                                                        break;\n                                                                                                                    case 'Parser.Reply.value':\n                                                                                                                        var $2300 = self.idx;\n                                                                                                                        var $2301 = self.code;\n                                                                                                                        var $2302 = self.val;\n                                                                                                                        var self = Kind$Parser$stop$($2206, $2300, $2301);\n                                                                                                                        switch (self._) {\n                                                                                                                            case 'Parser.Reply.error':\n                                                                                                                                var $2304 = self.idx;\n                                                                                                                                var $2305 = self.code;\n                                                                                                                                var $2306 = self.err;\n                                                                                                                                var $2307 = Parser$Reply$error$($2304, $2305, $2306);\n                                                                                                                                var $2303 = $2307;\n                                                                                                                                break;\n                                                                                                                            case 'Parser.Reply.value':\n                                                                                                                                var $2308 = self.idx;\n                                                                                                                                var $2309 = self.code;\n                                                                                                                                var $2310 = self.val;\n                                                                                                                                var _moti$48 = Kind$Term$lam$(\"\", (_x$48 => {\n                                                                                                                                    var $2312 = Kind$Term$hol$(Bits$e);\n                                                                                                                                    return $2312;\n                                                                                                                                }));\n                                                                                                                                var _term$49 = Kind$Term$ref$(\"Function.while\");\n                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));\n                                                                                                                                var _init$51 = Kind$Term$ref$(\"Pair.new\");\n                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));\n                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));\n                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($2228));\n                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($2243));\n                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);\n                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$(\"s\", (_s$57 => {\n                                                                                                                                    var $2313 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($2228, (_x$58 => {\n                                                                                                                                        var $2314 = Kind$Term$lam$($2243, (_y$59 => {\n                                                                                                                                            var $2315 = $2272;\n                                                                                                                                            return $2315;\n                                                                                                                                        }));\n                                                                                                                                        return $2314;\n                                                                                                                                    })));\n                                                                                                                                    return $2313;\n                                                                                                                                })));\n                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$(\"s\", (_s$58 => {\n                                                                                                                                    var $2316 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($2228, (_x$59 => {\n                                                                                                                                        var $2317 = Kind$Term$lam$($2243, (_y$60 => {\n                                                                                                                                            var $2318 = $2287;\n                                                                                                                                            return $2318;\n                                                                                                                                        }));\n                                                                                                                                        return $2317;\n                                                                                                                                    })));\n                                                                                                                                    return $2316;\n                                                                                                                                })));\n                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($2228, (_x$59 => {\n                                                                                                                                    var $2319 = Kind$Term$lam$($2243, (_y$60 => {\n                                                                                                                                        var $2320 = $2302;\n                                                                                                                                        return $2320;\n                                                                                                                                    }));\n                                                                                                                                    return $2319;\n                                                                                                                                })));\n                                                                                                                                var $2311 = Parser$Reply$value$($2308, $2309, Kind$Term$ori$($2310, _term$59));\n                                                                                                                                var $2303 = $2311;\n                                                                                                                                break;\n                                                                                                                        };\n                                                                                                                        var $2295 = $2303;\n                                                                                                                        break;\n                                                                                                                };\n                                                                                                                var $2288 = $2295;\n                                                                                                                break;\n                                                                                                        };\n                                                                                                        var $2280 = $2288;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $2273 = $2280;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $2265 = $2273;\n                                                                                        break;\n                                                                                };\n                                                                                var $2258 = $2265;\n                                                                                break;\n                                                                        };\n                                                                        var $2251 = $2258;\n                                                                        break;\n                                                                };\n                                                                var $2244 = $2251;\n                                                                break;\n                                                        };\n                                                        var $2236 = $2244;\n                                                        break;\n                                                };\n                                                var $2229 = $2236;\n                                                break;\n                                        };\n                                        var $2221 = $2229;\n                                        break;\n                                };\n                                var $2214 = $2221;\n                                break;\n                        };\n                        var $2207 = $2214;\n                        break;\n                };\n                var $2199 = $2207;\n                break;\n        };\n        return $2199;\n    };\n    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);\n\n    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2322 = self.idx;\n                var $2323 = self.code;\n                var $2324 = self.err;\n                var $2325 = Parser$Reply$error$($2322, $2323, $2324);\n                var $2321 = $2325;\n                break;\n            case 'Parser.Reply.value':\n                var $2326 = self.idx;\n                var $2327 = self.code;\n                var $2328 = self.val;\n                var self = Kind$Parser$text$(\"while \", $2326, $2327);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2330 = self.idx;\n                        var $2331 = self.code;\n                        var $2332 = self.err;\n                        var $2333 = Parser$Reply$error$($2330, $2331, $2332);\n                        var $2329 = $2333;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2334 = self.idx;\n                        var $2335 = self.code;\n                        var self = Kind$Parser$term$($2334, $2335);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2337 = self.idx;\n                                var $2338 = self.code;\n                                var $2339 = self.err;\n                                var $2340 = Parser$Reply$error$($2337, $2338, $2339);\n                                var $2336 = $2340;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2341 = self.idx;\n                                var $2342 = self.code;\n                                var $2343 = self.val;\n                                var self = Kind$Parser$text$(\"with \", $2341, $2342);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2345 = self.idx;\n                                        var $2346 = self.code;\n                                        var $2347 = self.err;\n                                        var $2348 = Parser$Reply$error$($2345, $2346, $2347);\n                                        var $2344 = $2348;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2349 = self.idx;\n                                        var $2350 = self.code;\n                                        var self = Kind$Parser$text$(\"{\", $2349, $2350);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2352 = self.idx;\n                                                var $2353 = self.code;\n                                                var $2354 = self.err;\n                                                var $2355 = Parser$Reply$error$($2352, $2353, $2354);\n                                                var $2351 = $2355;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2356 = self.idx;\n                                                var $2357 = self.code;\n                                                var self = Kind$Parser$name$($2356, $2357);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2359 = self.idx;\n                                                        var $2360 = self.code;\n                                                        var $2361 = self.err;\n                                                        var $2362 = Parser$Reply$error$($2359, $2360, $2361);\n                                                        var $2358 = $2362;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2363 = self.idx;\n                                                        var $2364 = self.code;\n                                                        var $2365 = self.val;\n                                                        var self = Kind$Parser$text$(\",\", $2363, $2364);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2367 = self.idx;\n                                                                var $2368 = self.code;\n                                                                var $2369 = self.err;\n                                                                var $2370 = Parser$Reply$error$($2367, $2368, $2369);\n                                                                var $2366 = $2370;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2371 = self.idx;\n                                                                var $2372 = self.code;\n                                                                var self = Kind$Parser$name$($2371, $2372);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2374 = self.idx;\n                                                                        var $2375 = self.code;\n                                                                        var $2376 = self.err;\n                                                                        var $2377 = Parser$Reply$error$($2374, $2375, $2376);\n                                                                        var $2373 = $2377;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2378 = self.idx;\n                                                                        var $2379 = self.code;\n                                                                        var $2380 = self.val;\n                                                                        var self = Kind$Parser$text$(\"}\", $2378, $2379);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $2382 = self.idx;\n                                                                                var $2383 = self.code;\n                                                                                var $2384 = self.err;\n                                                                                var $2385 = Parser$Reply$error$($2382, $2383, $2384);\n                                                                                var $2381 = $2385;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $2386 = self.idx;\n                                                                                var $2387 = self.code;\n                                                                                var self = Kind$Parser$text$(\":\", $2386, $2387);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $2389 = self.idx;\n                                                                                        var $2390 = self.code;\n                                                                                        var $2391 = self.err;\n                                                                                        var $2392 = Parser$Reply$error$($2389, $2390, $2391);\n                                                                                        var $2388 = $2392;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $2393 = self.idx;\n                                                                                        var $2394 = self.code;\n                                                                                        var self = Kind$Parser$term$($2393, $2394);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $2396 = self.idx;\n                                                                                                var $2397 = self.code;\n                                                                                                var $2398 = self.err;\n                                                                                                var $2399 = Parser$Reply$error$($2396, $2397, $2398);\n                                                                                                var $2395 = $2399;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $2400 = self.idx;\n                                                                                                var $2401 = self.code;\n                                                                                                var $2402 = self.val;\n                                                                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $2400, $2401);\n                                                                                                switch (self._) {\n                                                                                                    case 'Parser.Reply.error':\n                                                                                                        var $2404 = self.idx;\n                                                                                                        var $2405 = self.code;\n                                                                                                        var $2406 = self.err;\n                                                                                                        var $2407 = Parser$Reply$error$($2404, $2405, $2406);\n                                                                                                        var $2403 = $2407;\n                                                                                                        break;\n                                                                                                    case 'Parser.Reply.value':\n                                                                                                        var $2408 = self.idx;\n                                                                                                        var $2409 = self.code;\n                                                                                                        var self = Kind$Parser$term$($2408, $2409);\n                                                                                                        switch (self._) {\n                                                                                                            case 'Parser.Reply.error':\n                                                                                                                var $2411 = self.idx;\n                                                                                                                var $2412 = self.code;\n                                                                                                                var $2413 = self.err;\n                                                                                                                var $2414 = Parser$Reply$error$($2411, $2412, $2413);\n                                                                                                                var $2410 = $2414;\n                                                                                                                break;\n                                                                                                            case 'Parser.Reply.value':\n                                                                                                                var $2415 = self.idx;\n                                                                                                                var $2416 = self.code;\n                                                                                                                var $2417 = self.val;\n                                                                                                                var self = Kind$Parser$stop$($2328, $2415, $2416);\n                                                                                                                switch (self._) {\n                                                                                                                    case 'Parser.Reply.error':\n                                                                                                                        var $2419 = self.idx;\n                                                                                                                        var $2420 = self.code;\n                                                                                                                        var $2421 = self.err;\n                                                                                                                        var $2422 = Parser$Reply$error$($2419, $2420, $2421);\n                                                                                                                        var $2418 = $2422;\n                                                                                                                        break;\n                                                                                                                    case 'Parser.Reply.value':\n                                                                                                                        var $2423 = self.idx;\n                                                                                                                        var $2424 = self.code;\n                                                                                                                        var $2425 = self.val;\n                                                                                                                        var _moti$45 = Kind$Term$lam$(\"\", (_x$45 => {\n                                                                                                                            var $2427 = Kind$Term$hol$(Bits$e);\n                                                                                                                            return $2427;\n                                                                                                                        }));\n                                                                                                                        var _term$46 = Kind$Term$ref$(\"Function.while\");\n                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));\n                                                                                                                        var _init$48 = Kind$Term$ref$(\"Pair.new\");\n                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));\n                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));\n                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($2365));\n                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($2380));\n                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);\n                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$(\"s\", (_s$54 => {\n                                                                                                                            var $2428 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($2365, (_x$55 => {\n                                                                                                                                var $2429 = Kind$Term$lam$($2380, (_y$56 => {\n                                                                                                                                    var $2430 = $2343;\n                                                                                                                                    return $2430;\n                                                                                                                                }));\n                                                                                                                                return $2429;\n                                                                                                                            })));\n                                                                                                                            return $2428;\n                                                                                                                        })));\n                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$(\"s\", (_s$55 => {\n                                                                                                                            var $2431 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($2365, (_x$56 => {\n                                                                                                                                var $2432 = Kind$Term$lam$($2380, (_y$57 => {\n                                                                                                                                    var $2433 = $2402;\n                                                                                                                                    return $2433;\n                                                                                                                                }));\n                                                                                                                                return $2432;\n                                                                                                                            })));\n                                                                                                                            return $2431;\n                                                                                                                        })));\n                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($2365, (_x$56 => {\n                                                                                                                            var $2434 = Kind$Term$lam$($2380, (_y$57 => {\n                                                                                                                                var $2435 = $2417;\n                                                                                                                                return $2435;\n                                                                                                                            }));\n                                                                                                                            return $2434;\n                                                                                                                        })));\n                                                                                                                        var $2426 = Parser$Reply$value$($2423, $2424, Kind$Term$ori$($2425, _term$56));\n                                                                                                                        var $2418 = $2426;\n                                                                                                                        break;\n                                                                                                                };\n                                                                                                                var $2410 = $2418;\n                                                                                                                break;\n                                                                                                        };\n                                                                                                        var $2403 = $2410;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $2395 = $2403;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $2388 = $2395;\n                                                                                        break;\n                                                                                };\n                                                                                var $2381 = $2388;\n                                                                                break;\n                                                                        };\n                                                                        var $2373 = $2381;\n                                                                        break;\n                                                                };\n                                                                var $2366 = $2373;\n                                                                break;\n                                                        };\n                                                        var $2358 = $2366;\n                                                        break;\n                                                };\n                                                var $2351 = $2358;\n                                                break;\n                                        };\n                                        var $2344 = $2351;\n                                        break;\n                                };\n                                var $2336 = $2344;\n                                break;\n                        };\n                        var $2329 = $2336;\n                        break;\n                };\n                var $2321 = $2329;\n                break;\n        };\n        return $2321;\n    };\n    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);\n\n    function Kind$Parser$get$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2437 = self.idx;\n                var $2438 = self.code;\n                var $2439 = self.err;\n                var $2440 = Parser$Reply$error$($2437, $2438, $2439);\n                var $2436 = $2440;\n                break;\n            case 'Parser.Reply.value':\n                var $2441 = self.idx;\n                var $2442 = self.code;\n                var $2443 = self.val;\n                var self = Kind$Parser$text$(\"let \", $2441, $2442);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2445 = self.idx;\n                        var $2446 = self.code;\n                        var $2447 = self.err;\n                        var $2448 = Parser$Reply$error$($2445, $2446, $2447);\n                        var $2444 = $2448;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2449 = self.idx;\n                        var $2450 = self.code;\n                        var self = Kind$Parser$text$(\"{\", $2449, $2450);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2452 = self.idx;\n                                var $2453 = self.code;\n                                var $2454 = self.err;\n                                var $2455 = Parser$Reply$error$($2452, $2453, $2454);\n                                var $2451 = $2455;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2456 = self.idx;\n                                var $2457 = self.code;\n                                var self = Kind$Parser$name$($2456, $2457);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2459 = self.idx;\n                                        var $2460 = self.code;\n                                        var $2461 = self.err;\n                                        var $2462 = Parser$Reply$error$($2459, $2460, $2461);\n                                        var $2458 = $2462;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2463 = self.idx;\n                                        var $2464 = self.code;\n                                        var $2465 = self.val;\n                                        var self = Kind$Parser$text$(\",\", $2463, $2464);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2467 = self.idx;\n                                                var $2468 = self.code;\n                                                var $2469 = self.err;\n                                                var $2470 = Parser$Reply$error$($2467, $2468, $2469);\n                                                var $2466 = $2470;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2471 = self.idx;\n                                                var $2472 = self.code;\n                                                var self = Kind$Parser$name$($2471, $2472);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2474 = self.idx;\n                                                        var $2475 = self.code;\n                                                        var $2476 = self.err;\n                                                        var $2477 = Parser$Reply$error$($2474, $2475, $2476);\n                                                        var $2473 = $2477;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2478 = self.idx;\n                                                        var $2479 = self.code;\n                                                        var $2480 = self.val;\n                                                        var self = Kind$Parser$text$(\"}\", $2478, $2479);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2482 = self.idx;\n                                                                var $2483 = self.code;\n                                                                var $2484 = self.err;\n                                                                var $2485 = Parser$Reply$error$($2482, $2483, $2484);\n                                                                var $2481 = $2485;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2486 = self.idx;\n                                                                var $2487 = self.code;\n                                                                var self = Kind$Parser$text$(\"=\", $2486, $2487);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2489 = self.idx;\n                                                                        var $2490 = self.code;\n                                                                        var $2491 = self.err;\n                                                                        var $2492 = Parser$Reply$error$($2489, $2490, $2491);\n                                                                        var $2488 = $2492;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2493 = self.idx;\n                                                                        var $2494 = self.code;\n                                                                        var self = Kind$Parser$term$($2493, $2494);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $2496 = self.idx;\n                                                                                var $2497 = self.code;\n                                                                                var $2498 = self.err;\n                                                                                var $2499 = Parser$Reply$error$($2496, $2497, $2498);\n                                                                                var $2495 = $2499;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $2500 = self.idx;\n                                                                                var $2501 = self.code;\n                                                                                var $2502 = self.val;\n                                                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $2500, $2501);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $2504 = self.idx;\n                                                                                        var $2505 = self.code;\n                                                                                        var $2506 = self.err;\n                                                                                        var $2507 = Parser$Reply$error$($2504, $2505, $2506);\n                                                                                        var $2503 = $2507;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $2508 = self.idx;\n                                                                                        var $2509 = self.code;\n                                                                                        var self = Kind$Parser$term$($2508, $2509);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $2511 = self.idx;\n                                                                                                var $2512 = self.code;\n                                                                                                var $2513 = self.err;\n                                                                                                var $2514 = Parser$Reply$error$($2511, $2512, $2513);\n                                                                                                var $2510 = $2514;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $2515 = self.idx;\n                                                                                                var $2516 = self.code;\n                                                                                                var $2517 = self.val;\n                                                                                                var self = Kind$Parser$stop$($2443, $2515, $2516);\n                                                                                                switch (self._) {\n                                                                                                    case 'Parser.Reply.error':\n                                                                                                        var $2519 = self.idx;\n                                                                                                        var $2520 = self.code;\n                                                                                                        var $2521 = self.err;\n                                                                                                        var $2522 = Parser$Reply$error$($2519, $2520, $2521);\n                                                                                                        var $2518 = $2522;\n                                                                                                        break;\n                                                                                                    case 'Parser.Reply.value':\n                                                                                                        var $2523 = self.idx;\n                                                                                                        var $2524 = self.code;\n                                                                                                        var $2525 = self.val;\n                                                                                                        var _term$39 = $2502;\n                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$(\"\", (_x$40 => {\n                                                                                                            var $2527 = Kind$Term$hol$(Bits$e);\n                                                                                                            return $2527;\n                                                                                                        })));\n                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($2465, (_x$41 => {\n                                                                                                            var $2528 = Kind$Term$lam$($2480, (_y$42 => {\n                                                                                                                var $2529 = $2517;\n                                                                                                                return $2529;\n                                                                                                            }));\n                                                                                                            return $2528;\n                                                                                                        })));\n                                                                                                        var $2526 = Parser$Reply$value$($2523, $2524, Kind$Term$ori$($2525, _term$41));\n                                                                                                        var $2518 = $2526;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $2510 = $2518;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $2503 = $2510;\n                                                                                        break;\n                                                                                };\n                                                                                var $2495 = $2503;\n                                                                                break;\n                                                                        };\n                                                                        var $2488 = $2495;\n                                                                        break;\n                                                                };\n                                                                var $2481 = $2488;\n                                                                break;\n                                                        };\n                                                        var $2473 = $2481;\n                                                        break;\n                                                };\n                                                var $2466 = $2473;\n                                                break;\n                                        };\n                                        var $2458 = $2466;\n                                        break;\n                                };\n                                var $2451 = $2458;\n                                break;\n                        };\n                        var $2444 = $2451;\n                        break;\n                };\n                var $2436 = $2444;\n                break;\n        };\n        return $2436;\n    };\n    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);\n\n    function Kind$Parser$get$omit$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2531 = self.idx;\n                var $2532 = self.code;\n                var $2533 = self.err;\n                var $2534 = Parser$Reply$error$($2531, $2532, $2533);\n                var $2530 = $2534;\n                break;\n            case 'Parser.Reply.value':\n                var $2535 = self.idx;\n                var $2536 = self.code;\n                var $2537 = self.val;\n                var self = Kind$Parser$text$(\"{\", $2535, $2536);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2539 = self.idx;\n                        var $2540 = self.code;\n                        var $2541 = self.err;\n                        var $2542 = Parser$Reply$error$($2539, $2540, $2541);\n                        var $2538 = $2542;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2543 = self.idx;\n                        var $2544 = self.code;\n                        var self = Kind$Parser$name$($2543, $2544);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2546 = self.idx;\n                                var $2547 = self.code;\n                                var $2548 = self.err;\n                                var $2549 = Parser$Reply$error$($2546, $2547, $2548);\n                                var $2545 = $2549;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2550 = self.idx;\n                                var $2551 = self.code;\n                                var $2552 = self.val;\n                                var self = Kind$Parser$text$(\",\", $2550, $2551);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2554 = self.idx;\n                                        var $2555 = self.code;\n                                        var $2556 = self.err;\n                                        var $2557 = Parser$Reply$error$($2554, $2555, $2556);\n                                        var $2553 = $2557;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2558 = self.idx;\n                                        var $2559 = self.code;\n                                        var self = Kind$Parser$name$($2558, $2559);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2561 = self.idx;\n                                                var $2562 = self.code;\n                                                var $2563 = self.err;\n                                                var $2564 = Parser$Reply$error$($2561, $2562, $2563);\n                                                var $2560 = $2564;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2565 = self.idx;\n                                                var $2566 = self.code;\n                                                var $2567 = self.val;\n                                                var self = Kind$Parser$text$(\"}\", $2565, $2566);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2569 = self.idx;\n                                                        var $2570 = self.code;\n                                                        var $2571 = self.err;\n                                                        var $2572 = Parser$Reply$error$($2569, $2570, $2571);\n                                                        var $2568 = $2572;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2573 = self.idx;\n                                                        var $2574 = self.code;\n                                                        var self = Kind$Parser$text$(\"= \", $2573, $2574);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2576 = self.idx;\n                                                                var $2577 = self.code;\n                                                                var $2578 = self.err;\n                                                                var $2579 = Parser$Reply$error$($2576, $2577, $2578);\n                                                                var $2575 = $2579;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2580 = self.idx;\n                                                                var $2581 = self.code;\n                                                                var self = Kind$Parser$term$($2580, $2581);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2583 = self.idx;\n                                                                        var $2584 = self.code;\n                                                                        var $2585 = self.err;\n                                                                        var $2586 = Parser$Reply$error$($2583, $2584, $2585);\n                                                                        var $2582 = $2586;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2587 = self.idx;\n                                                                        var $2588 = self.code;\n                                                                        var $2589 = self.val;\n                                                                        var self = Parser$maybe$(Kind$Parser$text(\";\"), $2587, $2588);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $2591 = self.idx;\n                                                                                var $2592 = self.code;\n                                                                                var $2593 = self.err;\n                                                                                var $2594 = Parser$Reply$error$($2591, $2592, $2593);\n                                                                                var $2590 = $2594;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $2595 = self.idx;\n                                                                                var $2596 = self.code;\n                                                                                var self = Kind$Parser$term$($2595, $2596);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $2598 = self.idx;\n                                                                                        var $2599 = self.code;\n                                                                                        var $2600 = self.err;\n                                                                                        var $2601 = Parser$Reply$error$($2598, $2599, $2600);\n                                                                                        var $2597 = $2601;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $2602 = self.idx;\n                                                                                        var $2603 = self.code;\n                                                                                        var $2604 = self.val;\n                                                                                        var self = Kind$Parser$stop$($2537, $2602, $2603);\n                                                                                        switch (self._) {\n                                                                                            case 'Parser.Reply.error':\n                                                                                                var $2606 = self.idx;\n                                                                                                var $2607 = self.code;\n                                                                                                var $2608 = self.err;\n                                                                                                var $2609 = Parser$Reply$error$($2606, $2607, $2608);\n                                                                                                var $2605 = $2609;\n                                                                                                break;\n                                                                                            case 'Parser.Reply.value':\n                                                                                                var $2610 = self.idx;\n                                                                                                var $2611 = self.code;\n                                                                                                var $2612 = self.val;\n                                                                                                var _term$36 = $2589;\n                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$(\"\", (_x$37 => {\n                                                                                                    var $2614 = Kind$Term$hol$(Bits$e);\n                                                                                                    return $2614;\n                                                                                                })));\n                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($2552, (_x$38 => {\n                                                                                                    var $2615 = Kind$Term$lam$($2567, (_y$39 => {\n                                                                                                        var $2616 = $2604;\n                                                                                                        return $2616;\n                                                                                                    }));\n                                                                                                    return $2615;\n                                                                                                })));\n                                                                                                var $2613 = Parser$Reply$value$($2610, $2611, Kind$Term$ori$($2612, _term$38));\n                                                                                                var $2605 = $2613;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $2597 = $2605;\n                                                                                        break;\n                                                                                };\n                                                                                var $2590 = $2597;\n                                                                                break;\n                                                                        };\n                                                                        var $2582 = $2590;\n                                                                        break;\n                                                                };\n                                                                var $2575 = $2582;\n                                                                break;\n                                                        };\n                                                        var $2568 = $2575;\n                                                        break;\n                                                };\n                                                var $2560 = $2568;\n                                                break;\n                                        };\n                                        var $2553 = $2560;\n                                        break;\n                                };\n                                var $2545 = $2553;\n                                break;\n                        };\n                        var $2538 = $2545;\n                        break;\n                };\n                var $2530 = $2538;\n                break;\n        };\n        return $2530;\n    };\n    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);\n\n    function Kind$Parser$def$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2618 = self.idx;\n                var $2619 = self.code;\n                var $2620 = self.err;\n                var $2621 = Parser$Reply$error$($2618, $2619, $2620);\n                var $2617 = $2621;\n                break;\n            case 'Parser.Reply.value':\n                var $2622 = self.idx;\n                var $2623 = self.code;\n                var $2624 = self.val;\n                var self = Kind$Parser$text$(\"def \", $2622, $2623);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2626 = self.idx;\n                        var $2627 = self.code;\n                        var $2628 = self.err;\n                        var $2629 = Parser$Reply$error$($2626, $2627, $2628);\n                        var $2625 = $2629;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2630 = self.idx;\n                        var $2631 = self.code;\n                        var self = Kind$Parser$name$($2630, $2631);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2633 = self.idx;\n                                var $2634 = self.code;\n                                var $2635 = self.err;\n                                var $2636 = Parser$Reply$error$($2633, $2634, $2635);\n                                var $2632 = $2636;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2637 = self.idx;\n                                var $2638 = self.code;\n                                var $2639 = self.val;\n                                var self = Kind$Parser$text$(\"=\", $2637, $2638);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2641 = self.idx;\n                                        var $2642 = self.code;\n                                        var $2643 = self.err;\n                                        var $2644 = Parser$Reply$error$($2641, $2642, $2643);\n                                        var $2640 = $2644;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2645 = self.idx;\n                                        var $2646 = self.code;\n                                        var self = Kind$Parser$term$($2645, $2646);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2648 = self.idx;\n                                                var $2649 = self.code;\n                                                var $2650 = self.err;\n                                                var $2651 = Parser$Reply$error$($2648, $2649, $2650);\n                                                var $2647 = $2651;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2652 = self.idx;\n                                                var $2653 = self.code;\n                                                var $2654 = self.val;\n                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $2652, $2653);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2656 = self.idx;\n                                                        var $2657 = self.code;\n                                                        var $2658 = self.err;\n                                                        var $2659 = Parser$Reply$error$($2656, $2657, $2658);\n                                                        var $2655 = $2659;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2660 = self.idx;\n                                                        var $2661 = self.code;\n                                                        var self = Kind$Parser$term$($2660, $2661);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2663 = self.idx;\n                                                                var $2664 = self.code;\n                                                                var $2665 = self.err;\n                                                                var $2666 = Parser$Reply$error$($2663, $2664, $2665);\n                                                                var $2662 = $2666;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2667 = self.idx;\n                                                                var $2668 = self.code;\n                                                                var $2669 = self.val;\n                                                                var self = Kind$Parser$stop$($2624, $2667, $2668);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2671 = self.idx;\n                                                                        var $2672 = self.code;\n                                                                        var $2673 = self.err;\n                                                                        var $2674 = Parser$Reply$error$($2671, $2672, $2673);\n                                                                        var $2670 = $2674;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2675 = self.idx;\n                                                                        var $2676 = self.code;\n                                                                        var $2677 = self.val;\n                                                                        var $2678 = Parser$Reply$value$($2675, $2676, Kind$Term$ori$($2677, Kind$Term$def$($2639, $2654, (_x$27 => {\n                                                                            var $2679 = $2669;\n                                                                            return $2679;\n                                                                        }))));\n                                                                        var $2670 = $2678;\n                                                                        break;\n                                                                };\n                                                                var $2662 = $2670;\n                                                                break;\n                                                        };\n                                                        var $2655 = $2662;\n                                                        break;\n                                                };\n                                                var $2647 = $2655;\n                                                break;\n                                        };\n                                        var $2640 = $2647;\n                                        break;\n                                };\n                                var $2632 = $2640;\n                                break;\n                        };\n                        var $2625 = $2632;\n                        break;\n                };\n                var $2617 = $2625;\n                break;\n        };\n        return $2617;\n    };\n    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);\n\n    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2681 = self.idx;\n                var $2682 = self.code;\n                var $2683 = self.err;\n                var $2684 = Parser$Reply$error$($2681, $2682, $2683);\n                var $2680 = $2684;\n                break;\n            case 'Parser.Reply.value':\n                var $2685 = self.idx;\n                var $2686 = self.code;\n                var $2687 = self.val;\n                var self = Kind$Parser$text$(\"rewrite \", $2685, $2686);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2689 = self.idx;\n                        var $2690 = self.code;\n                        var $2691 = self.err;\n                        var $2692 = Parser$Reply$error$($2689, $2690, $2691);\n                        var $2688 = $2692;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2693 = self.idx;\n                        var $2694 = self.code;\n                        var self = Kind$Parser$name1$($2693, $2694);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2696 = self.idx;\n                                var $2697 = self.code;\n                                var $2698 = self.err;\n                                var $2699 = Parser$Reply$error$($2696, $2697, $2698);\n                                var $2695 = $2699;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2700 = self.idx;\n                                var $2701 = self.code;\n                                var $2702 = self.val;\n                                var self = Kind$Parser$text$(\"in\", $2700, $2701);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2704 = self.idx;\n                                        var $2705 = self.code;\n                                        var $2706 = self.err;\n                                        var $2707 = Parser$Reply$error$($2704, $2705, $2706);\n                                        var $2703 = $2707;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2708 = self.idx;\n                                        var $2709 = self.code;\n                                        var self = Kind$Parser$term$($2708, $2709);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2711 = self.idx;\n                                                var $2712 = self.code;\n                                                var $2713 = self.err;\n                                                var $2714 = Parser$Reply$error$($2711, $2712, $2713);\n                                                var $2710 = $2714;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2715 = self.idx;\n                                                var $2716 = self.code;\n                                                var $2717 = self.val;\n                                                var self = Kind$Parser$text$(\"with\", $2715, $2716);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2719 = self.idx;\n                                                        var $2720 = self.code;\n                                                        var $2721 = self.err;\n                                                        var $2722 = Parser$Reply$error$($2719, $2720, $2721);\n                                                        var $2718 = $2722;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2723 = self.idx;\n                                                        var $2724 = self.code;\n                                                        var self = Kind$Parser$term$($2723, $2724);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2726 = self.idx;\n                                                                var $2727 = self.code;\n                                                                var $2728 = self.err;\n                                                                var $2729 = Parser$Reply$error$($2726, $2727, $2728);\n                                                                var $2725 = $2729;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2730 = self.idx;\n                                                                var $2731 = self.code;\n                                                                var $2732 = self.val;\n                                                                var self = Kind$Parser$term$($2730, $2731);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2734 = self.idx;\n                                                                        var $2735 = self.code;\n                                                                        var $2736 = self.err;\n                                                                        var $2737 = Parser$Reply$error$($2734, $2735, $2736);\n                                                                        var $2733 = $2737;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2738 = self.idx;\n                                                                        var $2739 = self.code;\n                                                                        var $2740 = self.val;\n                                                                        var self = Kind$Parser$stop$($2687, $2738, $2739);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $2742 = self.idx;\n                                                                                var $2743 = self.code;\n                                                                                var $2744 = self.err;\n                                                                                var $2745 = Parser$Reply$error$($2742, $2743, $2744);\n                                                                                var $2741 = $2745;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $2746 = self.idx;\n                                                                                var $2747 = self.code;\n                                                                                var $2748 = self.val;\n                                                                                var _moti$30 = Kind$Term$lam$($2702, (_s$30 => {\n                                                                                    var $2750 = Kind$Term$lam$(\"\", (_x$31 => {\n                                                                                        var $2751 = $2717;\n                                                                                        return $2751;\n                                                                                    }));\n                                                                                    return $2750;\n                                                                                }));\n                                                                                var _term$31 = Kind$Term$ref$(\"Equal.mirror\");\n                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));\n                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));\n                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));\n                                                                                var _term$35 = Kind$Term$app$(_term$34, $2732);\n                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);\n                                                                                var _term$37 = Kind$Term$app$(_term$36, $2740);\n                                                                                var $2749 = Parser$Reply$value$($2746, $2747, Kind$Term$ori$($2748, _term$37));\n                                                                                var $2741 = $2749;\n                                                                                break;\n                                                                        };\n                                                                        var $2733 = $2741;\n                                                                        break;\n                                                                };\n                                                                var $2725 = $2733;\n                                                                break;\n                                                        };\n                                                        var $2718 = $2725;\n                                                        break;\n                                                };\n                                                var $2710 = $2718;\n                                                break;\n                                        };\n                                        var $2703 = $2710;\n                                        break;\n                                };\n                                var $2695 = $2703;\n                                break;\n                        };\n                        var $2688 = $2695;\n                        break;\n                };\n                var $2680 = $2688;\n                break;\n        };\n        return $2680;\n    };\n    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);\n\n    function Kind$Parser$if$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2753 = self.idx;\n                var $2754 = self.code;\n                var $2755 = self.err;\n                var $2756 = Parser$Reply$error$($2753, $2754, $2755);\n                var $2752 = $2756;\n                break;\n            case 'Parser.Reply.value':\n                var $2757 = self.idx;\n                var $2758 = self.code;\n                var $2759 = self.val;\n                var self = Kind$Parser$text$(\"if \", $2757, $2758);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2761 = self.idx;\n                        var $2762 = self.code;\n                        var $2763 = self.err;\n                        var $2764 = Parser$Reply$error$($2761, $2762, $2763);\n                        var $2760 = $2764;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2765 = self.idx;\n                        var $2766 = self.code;\n                        var self = Kind$Parser$term$($2765, $2766);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2768 = self.idx;\n                                var $2769 = self.code;\n                                var $2770 = self.err;\n                                var $2771 = Parser$Reply$error$($2768, $2769, $2770);\n                                var $2767 = $2771;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2772 = self.idx;\n                                var $2773 = self.code;\n                                var $2774 = self.val;\n                                var self = Kind$Parser$text$(\"then\", $2772, $2773);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2776 = self.idx;\n                                        var $2777 = self.code;\n                                        var $2778 = self.err;\n                                        var $2779 = Parser$Reply$error$($2776, $2777, $2778);\n                                        var $2775 = $2779;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2780 = self.idx;\n                                        var $2781 = self.code;\n                                        var self = Kind$Parser$term$($2780, $2781);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2783 = self.idx;\n                                                var $2784 = self.code;\n                                                var $2785 = self.err;\n                                                var $2786 = Parser$Reply$error$($2783, $2784, $2785);\n                                                var $2782 = $2786;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2787 = self.idx;\n                                                var $2788 = self.code;\n                                                var $2789 = self.val;\n                                                var self = Kind$Parser$text$(\"else\", $2787, $2788);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2791 = self.idx;\n                                                        var $2792 = self.code;\n                                                        var $2793 = self.err;\n                                                        var $2794 = Parser$Reply$error$($2791, $2792, $2793);\n                                                        var $2790 = $2794;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2795 = self.idx;\n                                                        var $2796 = self.code;\n                                                        var self = Kind$Parser$term$($2795, $2796);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2798 = self.idx;\n                                                                var $2799 = self.code;\n                                                                var $2800 = self.err;\n                                                                var $2801 = Parser$Reply$error$($2798, $2799, $2800);\n                                                                var $2797 = $2801;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2802 = self.idx;\n                                                                var $2803 = self.code;\n                                                                var $2804 = self.val;\n                                                                var self = Kind$Parser$stop$($2759, $2802, $2803);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2806 = self.idx;\n                                                                        var $2807 = self.code;\n                                                                        var $2808 = self.err;\n                                                                        var $2809 = Parser$Reply$error$($2806, $2807, $2808);\n                                                                        var $2805 = $2809;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2810 = self.idx;\n                                                                        var $2811 = self.code;\n                                                                        var $2812 = self.val;\n                                                                        var _term$27 = $2774;\n                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$(\"\", (_x$28 => {\n                                                                            var $2814 = Kind$Term$hol$(Bits$e);\n                                                                            return $2814;\n                                                                        })));\n                                                                        var _term$29 = Kind$Term$app$(_term$28, $2789);\n                                                                        var _term$30 = Kind$Term$app$(_term$29, $2804);\n                                                                        var $2813 = Parser$Reply$value$($2810, $2811, Kind$Term$ori$($2812, _term$30));\n                                                                        var $2805 = $2813;\n                                                                        break;\n                                                                };\n                                                                var $2797 = $2805;\n                                                                break;\n                                                        };\n                                                        var $2790 = $2797;\n                                                        break;\n                                                };\n                                                var $2782 = $2790;\n                                                break;\n                                        };\n                                        var $2775 = $2782;\n                                        break;\n                                };\n                                var $2767 = $2775;\n                                break;\n                        };\n                        var $2760 = $2767;\n                        break;\n                };\n                var $2752 = $2760;\n                break;\n        };\n        return $2752;\n    };\n    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);\n    const Kind$Code$backslash = 92;\n    const Kind$Code$escapes = List$cons$(Pair$new$(\"\\\\b\", 8), List$cons$(Pair$new$(\"\\\\f\", 12), List$cons$(Pair$new$(\"\\\\n\", 10), List$cons$(Pair$new$(\"\\\\r\", 13), List$cons$(Pair$new$(\"\\\\t\", 9), List$cons$(Pair$new$(\"\\\\v\", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$(\"\\\\\\\"\", 34), List$cons$(Pair$new$(\"\\\\0\", 0), List$cons$(Pair$new$(\"\\\\\\'\", 39), List$nil))))))))));\n    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {\n        var self = _esc$1;\n        switch (self._) {\n            case 'Pair.new':\n                var $2816 = self.fst;\n                var $2817 = self.snd;\n                var $2818 = (_idx$4 => _code$5 => {\n                    var self = Parser$text$($2816, _idx$4, _code$5);\n                    switch (self._) {\n                        case 'Parser.Reply.error':\n                            var $2820 = self.idx;\n                            var $2821 = self.code;\n                            var $2822 = self.err;\n                            var $2823 = Parser$Reply$error$($2820, $2821, $2822);\n                            var $2819 = $2823;\n                            break;\n                        case 'Parser.Reply.value':\n                            var $2824 = self.idx;\n                            var $2825 = self.code;\n                            var $2826 = Parser$Reply$value$($2824, $2825, $2817);\n                            var $2819 = $2826;\n                            break;\n                    };\n                    return $2819;\n                });\n                var $2815 = $2818;\n                break;\n        };\n        return $2815;\n    }))), List$cons$(Parser$one, List$nil)));\n\n    function Kind$Parser$char$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2828 = self.idx;\n                var $2829 = self.code;\n                var $2830 = self.err;\n                var $2831 = Parser$Reply$error$($2828, $2829, $2830);\n                var $2827 = $2831;\n                break;\n            case 'Parser.Reply.value':\n                var $2832 = self.idx;\n                var $2833 = self.code;\n                var $2834 = self.val;\n                var self = Kind$Parser$text$(\"\\'\", $2832, $2833);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2836 = self.idx;\n                        var $2837 = self.code;\n                        var $2838 = self.err;\n                        var $2839 = Parser$Reply$error$($2836, $2837, $2838);\n                        var $2835 = $2839;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2840 = self.idx;\n                        var $2841 = self.code;\n                        var self = Kind$Parser$char$single($2840)($2841);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2843 = self.idx;\n                                var $2844 = self.code;\n                                var $2845 = self.err;\n                                var $2846 = Parser$Reply$error$($2843, $2844, $2845);\n                                var $2842 = $2846;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2847 = self.idx;\n                                var $2848 = self.code;\n                                var $2849 = self.val;\n                                var self = Parser$text$(\"\\'\", $2847, $2848);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2851 = self.idx;\n                                        var $2852 = self.code;\n                                        var $2853 = self.err;\n                                        var $2854 = Parser$Reply$error$($2851, $2852, $2853);\n                                        var $2850 = $2854;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2855 = self.idx;\n                                        var $2856 = self.code;\n                                        var self = Kind$Parser$stop$($2834, $2855, $2856);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2858 = self.idx;\n                                                var $2859 = self.code;\n                                                var $2860 = self.err;\n                                                var $2861 = Parser$Reply$error$($2858, $2859, $2860);\n                                                var $2857 = $2861;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2862 = self.idx;\n                                                var $2863 = self.code;\n                                                var $2864 = self.val;\n                                                var $2865 = Parser$Reply$value$($2862, $2863, Kind$Term$ori$($2864, Kind$Term$chr$($2849)));\n                                                var $2857 = $2865;\n                                                break;\n                                        };\n                                        var $2850 = $2857;\n                                        break;\n                                };\n                                var $2842 = $2850;\n                                break;\n                        };\n                        var $2835 = $2842;\n                        break;\n                };\n                var $2827 = $2835;\n                break;\n        };\n        return $2827;\n    };\n    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);\n\n    function String$reverse$go$(_xs$1, _res$2) {\n        var String$reverse$go$ = (_xs$1, _res$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _res$2]\n        });\n        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);\n        var arg = [_xs$1, _res$2];\n        while (true) {\n            let [_xs$1, _res$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                if (self.length === 0) {\n                    var $2866 = _res$2;\n                    return $2866;\n                } else {\n                    var $2867 = self.charCodeAt(0);\n                    var $2868 = self.slice(1);\n                    var $2869 = String$reverse$go$($2868, String$cons$($2867, _res$2));\n                    return $2869;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);\n\n    function String$reverse$(_xs$1) {\n        var $2870 = String$reverse$go$(_xs$1, String$nil);\n        return $2870;\n    };\n    const String$reverse = x0 => String$reverse$(x0);\n\n    function Kind$Parser$string$go$(_delim$1, _str$2, _idx$3, _code$4) {\n        var Kind$Parser$string$go$ = (_delim$1, _str$2, _idx$3, _code$4) => ({\n            ctr: 'TCO',\n            arg: [_delim$1, _str$2, _idx$3, _code$4]\n        });\n        var Kind$Parser$string$go = _delim$1 => _str$2 => _idx$3 => _code$4 => Kind$Parser$string$go$(_delim$1, _str$2, _idx$3, _code$4);\n        var arg = [_delim$1, _str$2, _idx$3, _code$4];\n        while (true) {\n            let [_delim$1, _str$2, _idx$3, _code$4] = arg;\n            var R = (() => {\n                var self = _code$4;\n                if (self.length === 0) {\n                    var $2871 = Parser$Reply$error$(_idx$3, _code$4, \"Non-terminating string.\");\n                    return $2871;\n                } else {\n                    var $2872 = self.charCodeAt(0);\n                    var $2873 = self.slice(1);\n                    var self = ($2872 === _delim$1);\n                    if (self) {\n                        var $2875 = Parser$Reply$value$(Nat$succ$(_idx$3), $2873, String$reverse$(_str$2));\n                        var $2874 = $2875;\n                    } else {\n                        var self = Kind$Parser$char$single(_idx$3)(_code$4);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2877 = self.idx;\n                                var $2878 = self.code;\n                                var $2879 = self.err;\n                                var $2880 = Parser$Reply$error$($2877, $2878, $2879);\n                                var $2876 = $2880;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2881 = self.idx;\n                                var $2882 = self.code;\n                                var $2883 = self.val;\n                                var $2884 = Kind$Parser$string$go$(_delim$1, String$cons$($2883, _str$2), $2881, $2882);\n                                var $2876 = $2884;\n                                break;\n                        };\n                        var $2874 = $2876;\n                    };\n                    return $2874;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Parser$string$go = x0 => x1 => x2 => x3 => Kind$Parser$string$go$(x0, x1, x2, x3);\n\n    function Kind$Parser$string$(_delim$1, _idx$2, _code$3) {\n        var self = Kind$Parser$init$(_idx$2, _code$3);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2886 = self.idx;\n                var $2887 = self.code;\n                var $2888 = self.err;\n                var $2889 = Parser$Reply$error$($2886, $2887, $2888);\n                var $2885 = $2889;\n                break;\n            case 'Parser.Reply.value':\n                var $2890 = self.idx;\n                var $2891 = self.code;\n                var $2892 = self.val;\n                var self = Kind$Parser$text$(String$cons$(_delim$1, String$nil), $2890, $2891);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2894 = self.idx;\n                        var $2895 = self.code;\n                        var $2896 = self.err;\n                        var $2897 = Parser$Reply$error$($2894, $2895, $2896);\n                        var $2893 = $2897;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2898 = self.idx;\n                        var $2899 = self.code;\n                        var self = Kind$Parser$string$go$(_delim$1, \"\", $2898, $2899);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2901 = self.idx;\n                                var $2902 = self.code;\n                                var $2903 = self.err;\n                                var $2904 = Parser$Reply$error$($2901, $2902, $2903);\n                                var $2900 = $2904;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2905 = self.idx;\n                                var $2906 = self.code;\n                                var $2907 = self.val;\n                                var self = Kind$Parser$stop$($2892, $2905, $2906);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2909 = self.idx;\n                                        var $2910 = self.code;\n                                        var $2911 = self.err;\n                                        var $2912 = Parser$Reply$error$($2909, $2910, $2911);\n                                        var $2908 = $2912;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2913 = self.idx;\n                                        var $2914 = self.code;\n                                        var $2915 = self.val;\n                                        var $2916 = Parser$Reply$value$($2913, $2914, Kind$Term$ori$($2915, Kind$Term$str$($2907)));\n                                        var $2908 = $2916;\n                                        break;\n                                };\n                                var $2900 = $2908;\n                                break;\n                        };\n                        var $2893 = $2900;\n                        break;\n                };\n                var $2885 = $2893;\n                break;\n        };\n        return $2885;\n    };\n    const Kind$Parser$string = x0 => x1 => x2 => Kind$Parser$string$(x0, x1, x2);\n\n    function Kind$Parser$pair$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2918 = self.idx;\n                var $2919 = self.code;\n                var $2920 = self.err;\n                var $2921 = Parser$Reply$error$($2918, $2919, $2920);\n                var $2917 = $2921;\n                break;\n            case 'Parser.Reply.value':\n                var $2922 = self.idx;\n                var $2923 = self.code;\n                var $2924 = self.val;\n                var self = Kind$Parser$text$(\"{\", $2922, $2923);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2926 = self.idx;\n                        var $2927 = self.code;\n                        var $2928 = self.err;\n                        var $2929 = Parser$Reply$error$($2926, $2927, $2928);\n                        var $2925 = $2929;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2930 = self.idx;\n                        var $2931 = self.code;\n                        var self = Kind$Parser$term$($2930, $2931);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2933 = self.idx;\n                                var $2934 = self.code;\n                                var $2935 = self.err;\n                                var $2936 = Parser$Reply$error$($2933, $2934, $2935);\n                                var $2932 = $2936;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2937 = self.idx;\n                                var $2938 = self.code;\n                                var $2939 = self.val;\n                                var self = Parser$maybe$(Kind$Parser$text(\",\"), $2937, $2938);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $2941 = self.idx;\n                                        var $2942 = self.code;\n                                        var $2943 = self.err;\n                                        var $2944 = Parser$Reply$error$($2941, $2942, $2943);\n                                        var $2940 = $2944;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $2945 = self.idx;\n                                        var $2946 = self.code;\n                                        var self = Kind$Parser$term$($2945, $2946);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $2948 = self.idx;\n                                                var $2949 = self.code;\n                                                var $2950 = self.err;\n                                                var $2951 = Parser$Reply$error$($2948, $2949, $2950);\n                                                var $2947 = $2951;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $2952 = self.idx;\n                                                var $2953 = self.code;\n                                                var $2954 = self.val;\n                                                var self = Parser$maybe$(Kind$Parser$text(\",\"), $2952, $2953);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $2956 = self.idx;\n                                                        var $2957 = self.code;\n                                                        var $2958 = self.err;\n                                                        var $2959 = Parser$Reply$error$($2956, $2957, $2958);\n                                                        var $2955 = $2959;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $2960 = self.idx;\n                                                        var $2961 = self.code;\n                                                        var self = Kind$Parser$text$(\"}\", $2960, $2961);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $2963 = self.idx;\n                                                                var $2964 = self.code;\n                                                                var $2965 = self.err;\n                                                                var $2966 = Parser$Reply$error$($2963, $2964, $2965);\n                                                                var $2962 = $2966;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $2967 = self.idx;\n                                                                var $2968 = self.code;\n                                                                var self = Kind$Parser$stop$($2924, $2967, $2968);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $2970 = self.idx;\n                                                                        var $2971 = self.code;\n                                                                        var $2972 = self.err;\n                                                                        var $2973 = Parser$Reply$error$($2970, $2971, $2972);\n                                                                        var $2969 = $2973;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $2974 = self.idx;\n                                                                        var $2975 = self.code;\n                                                                        var $2976 = self.val;\n                                                                        var _term$27 = Kind$Term$ref$(\"Pair.new\");\n                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));\n                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));\n                                                                        var _term$30 = Kind$Term$app$(_term$29, $2939);\n                                                                        var _term$31 = Kind$Term$app$(_term$30, $2954);\n                                                                        var $2977 = Parser$Reply$value$($2974, $2975, Kind$Term$ori$($2976, _term$31));\n                                                                        var $2969 = $2977;\n                                                                        break;\n                                                                };\n                                                                var $2962 = $2969;\n                                                                break;\n                                                        };\n                                                        var $2955 = $2962;\n                                                        break;\n                                                };\n                                                var $2947 = $2955;\n                                                break;\n                                        };\n                                        var $2940 = $2947;\n                                        break;\n                                };\n                                var $2932 = $2940;\n                                break;\n                        };\n                        var $2925 = $2932;\n                        break;\n                };\n                var $2917 = $2925;\n                break;\n        };\n        return $2917;\n    };\n    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);\n\n    function Kind$Parser$sigma$type$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $2979 = self.idx;\n                var $2980 = self.code;\n                var $2981 = self.err;\n                var $2982 = Parser$Reply$error$($2979, $2980, $2981);\n                var $2978 = $2982;\n                break;\n            case 'Parser.Reply.value':\n                var $2983 = self.idx;\n                var $2984 = self.code;\n                var $2985 = self.val;\n                var self = Kind$Parser$text$(\"[\", $2983, $2984);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $2987 = self.idx;\n                        var $2988 = self.code;\n                        var $2989 = self.err;\n                        var $2990 = Parser$Reply$error$($2987, $2988, $2989);\n                        var $2986 = $2990;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $2991 = self.idx;\n                        var $2992 = self.code;\n                        var self = Kind$Parser$name1$($2991, $2992);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $2994 = self.idx;\n                                var $2995 = self.code;\n                                var $2996 = self.err;\n                                var $2997 = Parser$Reply$error$($2994, $2995, $2996);\n                                var $2993 = $2997;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $2998 = self.idx;\n                                var $2999 = self.code;\n                                var $3000 = self.val;\n                                var self = Kind$Parser$text$(\":\", $2998, $2999);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3002 = self.idx;\n                                        var $3003 = self.code;\n                                        var $3004 = self.err;\n                                        var $3005 = Parser$Reply$error$($3002, $3003, $3004);\n                                        var $3001 = $3005;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3006 = self.idx;\n                                        var $3007 = self.code;\n                                        var self = Kind$Parser$term$($3006, $3007);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3009 = self.idx;\n                                                var $3010 = self.code;\n                                                var $3011 = self.err;\n                                                var $3012 = Parser$Reply$error$($3009, $3010, $3011);\n                                                var $3008 = $3012;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3013 = self.idx;\n                                                var $3014 = self.code;\n                                                var $3015 = self.val;\n                                                var self = Kind$Parser$text$(\"]\", $3013, $3014);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $3017 = self.idx;\n                                                        var $3018 = self.code;\n                                                        var $3019 = self.err;\n                                                        var $3020 = Parser$Reply$error$($3017, $3018, $3019);\n                                                        var $3016 = $3020;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $3021 = self.idx;\n                                                        var $3022 = self.code;\n                                                        var self = Kind$Parser$term$($3021, $3022);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $3024 = self.idx;\n                                                                var $3025 = self.code;\n                                                                var $3026 = self.err;\n                                                                var $3027 = Parser$Reply$error$($3024, $3025, $3026);\n                                                                var $3023 = $3027;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $3028 = self.idx;\n                                                                var $3029 = self.code;\n                                                                var $3030 = self.val;\n                                                                var self = Kind$Parser$stop$($2985, $3028, $3029);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $3032 = self.idx;\n                                                                        var $3033 = self.code;\n                                                                        var $3034 = self.err;\n                                                                        var $3035 = Parser$Reply$error$($3032, $3033, $3034);\n                                                                        var $3031 = $3035;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $3036 = self.idx;\n                                                                        var $3037 = self.code;\n                                                                        var $3038 = self.val;\n                                                                        var _term$27 = Kind$Term$ref$(\"Sigma\");\n                                                                        var _term$28 = Kind$Term$app$(_term$27, $3015);\n                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($3000, (_x$29 => {\n                                                                            var $3040 = $3030;\n                                                                            return $3040;\n                                                                        })));\n                                                                        var $3039 = Parser$Reply$value$($3036, $3037, Kind$Term$ori$($3038, _term$29));\n                                                                        var $3031 = $3039;\n                                                                        break;\n                                                                };\n                                                                var $3023 = $3031;\n                                                                break;\n                                                        };\n                                                        var $3016 = $3023;\n                                                        break;\n                                                };\n                                                var $3008 = $3016;\n                                                break;\n                                        };\n                                        var $3001 = $3008;\n                                        break;\n                                };\n                                var $2993 = $3001;\n                                break;\n                        };\n                        var $2986 = $2993;\n                        break;\n                };\n                var $2978 = $2986;\n                break;\n        };\n        return $2978;\n    };\n    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);\n\n    function Kind$Parser$some$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3042 = self.idx;\n                var $3043 = self.code;\n                var $3044 = self.err;\n                var $3045 = Parser$Reply$error$($3042, $3043, $3044);\n                var $3041 = $3045;\n                break;\n            case 'Parser.Reply.value':\n                var $3046 = self.idx;\n                var $3047 = self.code;\n                var $3048 = self.val;\n                var self = Kind$Parser$text$(\"some(\", $3046, $3047);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3050 = self.idx;\n                        var $3051 = self.code;\n                        var $3052 = self.err;\n                        var $3053 = Parser$Reply$error$($3050, $3051, $3052);\n                        var $3049 = $3053;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3054 = self.idx;\n                        var $3055 = self.code;\n                        var self = Kind$Parser$term$($3054, $3055);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3057 = self.idx;\n                                var $3058 = self.code;\n                                var $3059 = self.err;\n                                var $3060 = Parser$Reply$error$($3057, $3058, $3059);\n                                var $3056 = $3060;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3061 = self.idx;\n                                var $3062 = self.code;\n                                var $3063 = self.val;\n                                var self = Kind$Parser$text$(\")\", $3061, $3062);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3065 = self.idx;\n                                        var $3066 = self.code;\n                                        var $3067 = self.err;\n                                        var $3068 = Parser$Reply$error$($3065, $3066, $3067);\n                                        var $3064 = $3068;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3069 = self.idx;\n                                        var $3070 = self.code;\n                                        var self = Kind$Parser$stop$($3048, $3069, $3070);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3072 = self.idx;\n                                                var $3073 = self.code;\n                                                var $3074 = self.err;\n                                                var $3075 = Parser$Reply$error$($3072, $3073, $3074);\n                                                var $3071 = $3075;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3076 = self.idx;\n                                                var $3077 = self.code;\n                                                var $3078 = self.val;\n                                                var _term$18 = Kind$Term$ref$(\"Maybe.some\");\n                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));\n                                                var _term$20 = Kind$Term$app$(_term$19, $3063);\n                                                var $3079 = Parser$Reply$value$($3076, $3077, Kind$Term$ori$($3078, _term$20));\n                                                var $3071 = $3079;\n                                                break;\n                                        };\n                                        var $3064 = $3071;\n                                        break;\n                                };\n                                var $3056 = $3064;\n                                break;\n                        };\n                        var $3049 = $3056;\n                        break;\n                };\n                var $3041 = $3049;\n                break;\n        };\n        return $3041;\n    };\n    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);\n\n    function Kind$Parser$not$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3081 = self.idx;\n                var $3082 = self.code;\n                var $3083 = self.err;\n                var $3084 = Parser$Reply$error$($3081, $3082, $3083);\n                var $3080 = $3084;\n                break;\n            case 'Parser.Reply.value':\n                var $3085 = self.idx;\n                var $3086 = self.code;\n                var $3087 = self.val;\n                var self = Kind$Parser$text$(\"not(\", $3085, $3086);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3089 = self.idx;\n                        var $3090 = self.code;\n                        var $3091 = self.err;\n                        var $3092 = Parser$Reply$error$($3089, $3090, $3091);\n                        var $3088 = $3092;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3093 = self.idx;\n                        var $3094 = self.code;\n                        var self = Kind$Parser$term$($3093, $3094);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3096 = self.idx;\n                                var $3097 = self.code;\n                                var $3098 = self.err;\n                                var $3099 = Parser$Reply$error$($3096, $3097, $3098);\n                                var $3095 = $3099;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3100 = self.idx;\n                                var $3101 = self.code;\n                                var $3102 = self.val;\n                                var self = Kind$Parser$text$(\")\", $3100, $3101);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3104 = self.idx;\n                                        var $3105 = self.code;\n                                        var $3106 = self.err;\n                                        var $3107 = Parser$Reply$error$($3104, $3105, $3106);\n                                        var $3103 = $3107;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3108 = self.idx;\n                                        var $3109 = self.code;\n                                        var self = Kind$Parser$stop$($3087, $3108, $3109);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3111 = self.idx;\n                                                var $3112 = self.code;\n                                                var $3113 = self.err;\n                                                var $3114 = Parser$Reply$error$($3111, $3112, $3113);\n                                                var $3110 = $3114;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3115 = self.idx;\n                                                var $3116 = self.code;\n                                                var $3117 = self.val;\n                                                var _term$18 = Kind$Term$ref$(\"Bool.not\");\n                                                var _term$19 = Kind$Term$app$(_term$18, $3102);\n                                                var $3118 = Parser$Reply$value$($3115, $3116, Kind$Term$ori$($3117, _term$19));\n                                                var $3110 = $3118;\n                                                break;\n                                        };\n                                        var $3103 = $3110;\n                                        break;\n                                };\n                                var $3095 = $3103;\n                                break;\n                        };\n                        var $3088 = $3095;\n                        break;\n                };\n                var $3080 = $3088;\n                break;\n        };\n        return $3080;\n    };\n    const Kind$Parser$not = x0 => x1 => Kind$Parser$not$(x0, x1);\n\n    function Kind$Parser$left$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3120 = self.idx;\n                var $3121 = self.code;\n                var $3122 = self.err;\n                var $3123 = Parser$Reply$error$($3120, $3121, $3122);\n                var $3119 = $3123;\n                break;\n            case 'Parser.Reply.value':\n                var $3124 = self.idx;\n                var $3125 = self.code;\n                var $3126 = self.val;\n                var self = Kind$Parser$text$(\"left(\", $3124, $3125);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3128 = self.idx;\n                        var $3129 = self.code;\n                        var $3130 = self.err;\n                        var $3131 = Parser$Reply$error$($3128, $3129, $3130);\n                        var $3127 = $3131;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3132 = self.idx;\n                        var $3133 = self.code;\n                        var self = Kind$Parser$term$($3132, $3133);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3135 = self.idx;\n                                var $3136 = self.code;\n                                var $3137 = self.err;\n                                var $3138 = Parser$Reply$error$($3135, $3136, $3137);\n                                var $3134 = $3138;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3139 = self.idx;\n                                var $3140 = self.code;\n                                var $3141 = self.val;\n                                var self = Kind$Parser$text$(\")\", $3139, $3140);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3143 = self.idx;\n                                        var $3144 = self.code;\n                                        var $3145 = self.err;\n                                        var $3146 = Parser$Reply$error$($3143, $3144, $3145);\n                                        var $3142 = $3146;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3147 = self.idx;\n                                        var $3148 = self.code;\n                                        var self = Kind$Parser$stop$($3126, $3147, $3148);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3150 = self.idx;\n                                                var $3151 = self.code;\n                                                var $3152 = self.err;\n                                                var $3153 = Parser$Reply$error$($3150, $3151, $3152);\n                                                var $3149 = $3153;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3154 = self.idx;\n                                                var $3155 = self.code;\n                                                var $3156 = self.val;\n                                                var _term$18 = Kind$Term$ref$(\"Either.left\");\n                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));\n                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));\n                                                var _term$21 = Kind$Term$app$(_term$20, $3141);\n                                                var $3157 = Parser$Reply$value$($3154, $3155, Kind$Term$ori$($3156, _term$21));\n                                                var $3149 = $3157;\n                                                break;\n                                        };\n                                        var $3142 = $3149;\n                                        break;\n                                };\n                                var $3134 = $3142;\n                                break;\n                        };\n                        var $3127 = $3134;\n                        break;\n                };\n                var $3119 = $3127;\n                break;\n        };\n        return $3119;\n    };\n    const Kind$Parser$left = x0 => x1 => Kind$Parser$left$(x0, x1);\n\n    function Kind$Parser$right$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3159 = self.idx;\n                var $3160 = self.code;\n                var $3161 = self.err;\n                var $3162 = Parser$Reply$error$($3159, $3160, $3161);\n                var $3158 = $3162;\n                break;\n            case 'Parser.Reply.value':\n                var $3163 = self.idx;\n                var $3164 = self.code;\n                var $3165 = self.val;\n                var self = Kind$Parser$text$(\"right(\", $3163, $3164);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3167 = self.idx;\n                        var $3168 = self.code;\n                        var $3169 = self.err;\n                        var $3170 = Parser$Reply$error$($3167, $3168, $3169);\n                        var $3166 = $3170;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3171 = self.idx;\n                        var $3172 = self.code;\n                        var self = Kind$Parser$term$($3171, $3172);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3174 = self.idx;\n                                var $3175 = self.code;\n                                var $3176 = self.err;\n                                var $3177 = Parser$Reply$error$($3174, $3175, $3176);\n                                var $3173 = $3177;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3178 = self.idx;\n                                var $3179 = self.code;\n                                var $3180 = self.val;\n                                var self = Kind$Parser$text$(\")\", $3178, $3179);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3182 = self.idx;\n                                        var $3183 = self.code;\n                                        var $3184 = self.err;\n                                        var $3185 = Parser$Reply$error$($3182, $3183, $3184);\n                                        var $3181 = $3185;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3186 = self.idx;\n                                        var $3187 = self.code;\n                                        var self = Kind$Parser$stop$($3165, $3186, $3187);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3189 = self.idx;\n                                                var $3190 = self.code;\n                                                var $3191 = self.err;\n                                                var $3192 = Parser$Reply$error$($3189, $3190, $3191);\n                                                var $3188 = $3192;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3193 = self.idx;\n                                                var $3194 = self.code;\n                                                var $3195 = self.val;\n                                                var _term$18 = Kind$Term$ref$(\"Either.right\");\n                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));\n                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));\n                                                var _term$21 = Kind$Term$app$(_term$20, $3180);\n                                                var $3196 = Parser$Reply$value$($3193, $3194, Kind$Term$ori$($3195, _term$21));\n                                                var $3188 = $3196;\n                                                break;\n                                        };\n                                        var $3181 = $3188;\n                                        break;\n                                };\n                                var $3173 = $3181;\n                                break;\n                        };\n                        var $3166 = $3173;\n                        break;\n                };\n                var $3158 = $3166;\n                break;\n        };\n        return $3158;\n    };\n    const Kind$Parser$right = x0 => x1 => Kind$Parser$right$(x0, x1);\n\n    function Kind$Parser$apply$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3198 = self.idx;\n                var $3199 = self.code;\n                var $3200 = self.err;\n                var $3201 = Parser$Reply$error$($3198, $3199, $3200);\n                var $3197 = $3201;\n                break;\n            case 'Parser.Reply.value':\n                var $3202 = self.idx;\n                var $3203 = self.code;\n                var $3204 = self.val;\n                var self = Kind$Parser$text$(\"apply(\", $3202, $3203);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3206 = self.idx;\n                        var $3207 = self.code;\n                        var $3208 = self.err;\n                        var $3209 = Parser$Reply$error$($3206, $3207, $3208);\n                        var $3205 = $3209;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3210 = self.idx;\n                        var $3211 = self.code;\n                        var self = Kind$Parser$term$($3210, $3211);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3213 = self.idx;\n                                var $3214 = self.code;\n                                var $3215 = self.err;\n                                var $3216 = Parser$Reply$error$($3213, $3214, $3215);\n                                var $3212 = $3216;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3217 = self.idx;\n                                var $3218 = self.code;\n                                var $3219 = self.val;\n                                var self = Kind$Parser$text$(\",\", $3217, $3218);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3221 = self.idx;\n                                        var $3222 = self.code;\n                                        var $3223 = self.err;\n                                        var $3224 = Parser$Reply$error$($3221, $3222, $3223);\n                                        var $3220 = $3224;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3225 = self.idx;\n                                        var $3226 = self.code;\n                                        var self = Kind$Parser$term$($3225, $3226);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3228 = self.idx;\n                                                var $3229 = self.code;\n                                                var $3230 = self.err;\n                                                var $3231 = Parser$Reply$error$($3228, $3229, $3230);\n                                                var $3227 = $3231;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3232 = self.idx;\n                                                var $3233 = self.code;\n                                                var $3234 = self.val;\n                                                var self = Kind$Parser$text$(\")\", $3232, $3233);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $3236 = self.idx;\n                                                        var $3237 = self.code;\n                                                        var $3238 = self.err;\n                                                        var $3239 = Parser$Reply$error$($3236, $3237, $3238);\n                                                        var $3235 = $3239;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $3240 = self.idx;\n                                                        var $3241 = self.code;\n                                                        var self = Kind$Parser$stop$($3204, $3240, $3241);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $3243 = self.idx;\n                                                                var $3244 = self.code;\n                                                                var $3245 = self.err;\n                                                                var $3246 = Parser$Reply$error$($3243, $3244, $3245);\n                                                                var $3242 = $3246;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $3247 = self.idx;\n                                                                var $3248 = self.code;\n                                                                var $3249 = self.val;\n                                                                var _term$24 = Kind$Term$ref$(\"Equal.apply\");\n                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));\n                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));\n                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));\n                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));\n                                                                var _term$29 = Kind$Term$app$(_term$28, $3219);\n                                                                var _term$30 = Kind$Term$app$(_term$29, $3234);\n                                                                var $3250 = Parser$Reply$value$($3247, $3248, Kind$Term$ori$($3249, _term$30));\n                                                                var $3242 = $3250;\n                                                                break;\n                                                        };\n                                                        var $3235 = $3242;\n                                                        break;\n                                                };\n                                                var $3227 = $3235;\n                                                break;\n                                        };\n                                        var $3220 = $3227;\n                                        break;\n                                };\n                                var $3212 = $3220;\n                                break;\n                        };\n                        var $3205 = $3212;\n                        break;\n                };\n                var $3197 = $3205;\n                break;\n        };\n        return $3197;\n    };\n    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);\n\n    function Kind$Parser$chain$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3252 = self.idx;\n                var $3253 = self.code;\n                var $3254 = self.err;\n                var $3255 = Parser$Reply$error$($3252, $3253, $3254);\n                var $3251 = $3255;\n                break;\n            case 'Parser.Reply.value':\n                var $3256 = self.idx;\n                var $3257 = self.code;\n                var $3258 = self.val;\n                var self = Kind$Parser$text$(\"chain(\", $3256, $3257);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3260 = self.idx;\n                        var $3261 = self.code;\n                        var $3262 = self.err;\n                        var $3263 = Parser$Reply$error$($3260, $3261, $3262);\n                        var $3259 = $3263;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3264 = self.idx;\n                        var $3265 = self.code;\n                        var self = Kind$Parser$term$($3264, $3265);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3267 = self.idx;\n                                var $3268 = self.code;\n                                var $3269 = self.err;\n                                var $3270 = Parser$Reply$error$($3267, $3268, $3269);\n                                var $3266 = $3270;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3271 = self.idx;\n                                var $3272 = self.code;\n                                var $3273 = self.val;\n                                var self = Kind$Parser$text$(\",\", $3271, $3272);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3275 = self.idx;\n                                        var $3276 = self.code;\n                                        var $3277 = self.err;\n                                        var $3278 = Parser$Reply$error$($3275, $3276, $3277);\n                                        var $3274 = $3278;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3279 = self.idx;\n                                        var $3280 = self.code;\n                                        var self = Kind$Parser$term$($3279, $3280);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3282 = self.idx;\n                                                var $3283 = self.code;\n                                                var $3284 = self.err;\n                                                var $3285 = Parser$Reply$error$($3282, $3283, $3284);\n                                                var $3281 = $3285;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3286 = self.idx;\n                                                var $3287 = self.code;\n                                                var $3288 = self.val;\n                                                var self = Kind$Parser$text$(\")\", $3286, $3287);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $3290 = self.idx;\n                                                        var $3291 = self.code;\n                                                        var $3292 = self.err;\n                                                        var $3293 = Parser$Reply$error$($3290, $3291, $3292);\n                                                        var $3289 = $3293;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $3294 = self.idx;\n                                                        var $3295 = self.code;\n                                                        var self = Kind$Parser$stop$($3258, $3294, $3295);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $3297 = self.idx;\n                                                                var $3298 = self.code;\n                                                                var $3299 = self.err;\n                                                                var $3300 = Parser$Reply$error$($3297, $3298, $3299);\n                                                                var $3296 = $3300;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $3301 = self.idx;\n                                                                var $3302 = self.code;\n                                                                var $3303 = self.val;\n                                                                var _term$24 = Kind$Term$ref$(\"Equal.chain\");\n                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));\n                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));\n                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));\n                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));\n                                                                var _term$29 = Kind$Term$app$(_term$28, $3273);\n                                                                var _term$30 = Kind$Term$app$(_term$29, $3288);\n                                                                var $3304 = Parser$Reply$value$($3301, $3302, Kind$Term$ori$($3303, _term$30));\n                                                                var $3296 = $3304;\n                                                                break;\n                                                        };\n                                                        var $3289 = $3296;\n                                                        break;\n                                                };\n                                                var $3281 = $3289;\n                                                break;\n                                        };\n                                        var $3274 = $3281;\n                                        break;\n                                };\n                                var $3266 = $3274;\n                                break;\n                        };\n                        var $3259 = $3266;\n                        break;\n                };\n                var $3251 = $3259;\n                break;\n        };\n        return $3251;\n    };\n    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);\n\n    function Kind$Parser$mirror$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3306 = self.idx;\n                var $3307 = self.code;\n                var $3308 = self.err;\n                var $3309 = Parser$Reply$error$($3306, $3307, $3308);\n                var $3305 = $3309;\n                break;\n            case 'Parser.Reply.value':\n                var $3310 = self.idx;\n                var $3311 = self.code;\n                var $3312 = self.val;\n                var self = Kind$Parser$text$(\"mirror(\", $3310, $3311);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3314 = self.idx;\n                        var $3315 = self.code;\n                        var $3316 = self.err;\n                        var $3317 = Parser$Reply$error$($3314, $3315, $3316);\n                        var $3313 = $3317;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3318 = self.idx;\n                        var $3319 = self.code;\n                        var self = Kind$Parser$term$($3318, $3319);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3321 = self.idx;\n                                var $3322 = self.code;\n                                var $3323 = self.err;\n                                var $3324 = Parser$Reply$error$($3321, $3322, $3323);\n                                var $3320 = $3324;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3325 = self.idx;\n                                var $3326 = self.code;\n                                var $3327 = self.val;\n                                var self = Kind$Parser$text$(\")\", $3325, $3326);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3329 = self.idx;\n                                        var $3330 = self.code;\n                                        var $3331 = self.err;\n                                        var $3332 = Parser$Reply$error$($3329, $3330, $3331);\n                                        var $3328 = $3332;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3333 = self.idx;\n                                        var $3334 = self.code;\n                                        var self = Kind$Parser$stop$($3312, $3333, $3334);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3336 = self.idx;\n                                                var $3337 = self.code;\n                                                var $3338 = self.err;\n                                                var $3339 = Parser$Reply$error$($3336, $3337, $3338);\n                                                var $3335 = $3339;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3340 = self.idx;\n                                                var $3341 = self.code;\n                                                var $3342 = self.val;\n                                                var _term$18 = Kind$Term$ref$(\"Equal.mirror\");\n                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));\n                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));\n                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));\n                                                var _term$22 = Kind$Term$app$(_term$21, $3327);\n                                                var $3343 = Parser$Reply$value$($3340, $3341, Kind$Term$ori$($3342, _term$22));\n                                                var $3335 = $3343;\n                                                break;\n                                        };\n                                        var $3328 = $3335;\n                                        break;\n                                };\n                                var $3320 = $3328;\n                                break;\n                        };\n                        var $3313 = $3320;\n                        break;\n                };\n                var $3305 = $3313;\n                break;\n        };\n        return $3305;\n    };\n    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);\n\n    function Kind$Name$read$(_str$1) {\n        var $3344 = _str$1;\n        return $3344;\n    };\n    const Kind$Name$read = x0 => Kind$Name$read$(x0);\n\n    function Kind$Parser$list$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3346 = self.idx;\n                var $3347 = self.code;\n                var $3348 = self.err;\n                var $3349 = Parser$Reply$error$($3346, $3347, $3348);\n                var $3345 = $3349;\n                break;\n            case 'Parser.Reply.value':\n                var $3350 = self.idx;\n                var $3351 = self.code;\n                var $3352 = self.val;\n                var self = Kind$Parser$text$(\"[\", $3350, $3351);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3354 = self.idx;\n                        var $3355 = self.code;\n                        var $3356 = self.err;\n                        var $3357 = Parser$Reply$error$($3354, $3355, $3356);\n                        var $3353 = $3357;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3358 = self.idx;\n                        var $3359 = self.code;\n                        var self = Parser$until$(Kind$Parser$text(\"]\"), Kind$Parser$item(Kind$Parser$term))($3358)($3359);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3361 = self.idx;\n                                var $3362 = self.code;\n                                var $3363 = self.err;\n                                var $3364 = Parser$Reply$error$($3361, $3362, $3363);\n                                var $3360 = $3364;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3365 = self.idx;\n                                var $3366 = self.code;\n                                var $3367 = self.val;\n                                var self = Kind$Parser$stop$($3352, $3365, $3366);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3369 = self.idx;\n                                        var $3370 = self.code;\n                                        var $3371 = self.err;\n                                        var $3372 = Parser$Reply$error$($3369, $3370, $3371);\n                                        var $3368 = $3372;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3373 = self.idx;\n                                        var $3374 = self.code;\n                                        var $3375 = self.val;\n                                        var $3376 = Parser$Reply$value$($3373, $3374, List$fold$($3367, Kind$Term$ori$($3375, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$(\"List.nil\")), Kind$Term$hol$(Bits$e))), (_x$15 => _xs$16 => {\n                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$(\"List.cons\"));\n                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));\n                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);\n                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);\n                                            var $3377 = Kind$Term$ori$($3375, _term$20);\n                                            return $3377;\n                                        })));\n                                        var $3368 = $3376;\n                                        break;\n                                };\n                                var $3360 = $3368;\n                                break;\n                        };\n                        var $3353 = $3360;\n                        break;\n                };\n                var $3345 = $3353;\n                break;\n        };\n        return $3345;\n    };\n    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);\n\n    function Kind$Parser$map$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3379 = self.idx;\n                var $3380 = self.code;\n                var $3381 = self.err;\n                var $3382 = Parser$Reply$error$($3379, $3380, $3381);\n                var $3378 = $3382;\n                break;\n            case 'Parser.Reply.value':\n                var $3383 = self.idx;\n                var $3384 = self.code;\n                var $3385 = self.val;\n                var self = Kind$Parser$text$(\"{\", $3383, $3384);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3387 = self.idx;\n                        var $3388 = self.code;\n                        var $3389 = self.err;\n                        var $3390 = Parser$Reply$error$($3387, $3388, $3389);\n                        var $3386 = $3390;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3391 = self.idx;\n                        var $3392 = self.code;\n                        var self = Parser$until$(Kind$Parser$text(\"}\"), Kind$Parser$item((_idx$9 => _code$10 => {\n                            var self = Kind$Parser$term$(_idx$9, _code$10);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $3395 = self.idx;\n                                    var $3396 = self.code;\n                                    var $3397 = self.err;\n                                    var $3398 = Parser$Reply$error$($3395, $3396, $3397);\n                                    var $3394 = $3398;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $3399 = self.idx;\n                                    var $3400 = self.code;\n                                    var $3401 = self.val;\n                                    var self = Kind$Parser$text$(\":\", $3399, $3400);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $3403 = self.idx;\n                                            var $3404 = self.code;\n                                            var $3405 = self.err;\n                                            var $3406 = Parser$Reply$error$($3403, $3404, $3405);\n                                            var $3402 = $3406;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $3407 = self.idx;\n                                            var $3408 = self.code;\n                                            var self = Kind$Parser$term$($3407, $3408);\n                                            switch (self._) {\n                                                case 'Parser.Reply.error':\n                                                    var $3410 = self.idx;\n                                                    var $3411 = self.code;\n                                                    var $3412 = self.err;\n                                                    var $3413 = Parser$Reply$error$($3410, $3411, $3412);\n                                                    var $3409 = $3413;\n                                                    break;\n                                                case 'Parser.Reply.value':\n                                                    var $3414 = self.idx;\n                                                    var $3415 = self.code;\n                                                    var $3416 = self.val;\n                                                    var $3417 = Parser$Reply$value$($3414, $3415, Pair$new$($3401, $3416));\n                                                    var $3409 = $3417;\n                                                    break;\n                                            };\n                                            var $3402 = $3409;\n                                            break;\n                                    };\n                                    var $3394 = $3402;\n                                    break;\n                            };\n                            return $3394;\n                        })))($3391)($3392);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3418 = self.idx;\n                                var $3419 = self.code;\n                                var $3420 = self.err;\n                                var $3421 = Parser$Reply$error$($3418, $3419, $3420);\n                                var $3393 = $3421;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3422 = self.idx;\n                                var $3423 = self.code;\n                                var $3424 = self.val;\n                                var self = Kind$Parser$stop$($3385, $3422, $3423);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3426 = self.idx;\n                                        var $3427 = self.code;\n                                        var $3428 = self.err;\n                                        var $3429 = Parser$Reply$error$($3426, $3427, $3428);\n                                        var $3425 = $3429;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3430 = self.idx;\n                                        var $3431 = self.code;\n                                        var $3432 = self.val;\n                                        var _list$15 = List$fold$($3424, Kind$Term$ori$($3432, Kind$Term$app$(Kind$Term$ref$(\"List.nil\"), Kind$Term$hol$(Bits$e))), (_kv$15 => _xs$16 => {\n                                            var self = _kv$15;\n                                            switch (self._) {\n                                                case 'Pair.new':\n                                                    var $3435 = self.fst;\n                                                    var $3436 = self.snd;\n                                                    var _pair$19 = Kind$Term$ref$(\"Pair.new\");\n                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));\n                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));\n                                                    var _pair$22 = Kind$Term$app$(_pair$21, $3435);\n                                                    var _pair$23 = Kind$Term$app$(_pair$22, $3436);\n                                                    var _term$24 = Kind$Term$ref$(\"List.cons\");\n                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));\n                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);\n                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);\n                                                    var $3437 = Kind$Term$ori$($3432, _term$27);\n                                                    var $3434 = $3437;\n                                                    break;\n                                            };\n                                            return $3434;\n                                        }));\n                                        var _term$16 = Kind$Term$ref$(\"Map.from_list\");\n                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));\n                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);\n                                        var $3433 = Parser$Reply$value$($3430, $3431, Kind$Term$ori$($3432, _term$18));\n                                        var $3425 = $3433;\n                                        break;\n                                };\n                                var $3393 = $3425;\n                                break;\n                        };\n                        var $3386 = $3393;\n                        break;\n                };\n                var $3378 = $3386;\n                break;\n        };\n        return $3378;\n    };\n    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);\n\n    function Kind$Parser$log$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3439 = self.idx;\n                var $3440 = self.code;\n                var $3441 = self.err;\n                var $3442 = Parser$Reply$error$($3439, $3440, $3441);\n                var $3438 = $3442;\n                break;\n            case 'Parser.Reply.value':\n                var $3443 = self.idx;\n                var $3444 = self.code;\n                var $3445 = self.val;\n                var self = Kind$Parser$text$(\"log(\", $3443, $3444);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3447 = self.idx;\n                        var $3448 = self.code;\n                        var $3449 = self.err;\n                        var $3450 = Parser$Reply$error$($3447, $3448, $3449);\n                        var $3446 = $3450;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3451 = self.idx;\n                        var $3452 = self.code;\n                        var self = Parser$until$(Kind$Parser$text(\")\"), Kind$Parser$item(Kind$Parser$term))($3451)($3452);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3454 = self.idx;\n                                var $3455 = self.code;\n                                var $3456 = self.err;\n                                var $3457 = Parser$Reply$error$($3454, $3455, $3456);\n                                var $3453 = $3457;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3458 = self.idx;\n                                var $3459 = self.code;\n                                var $3460 = self.val;\n                                var self = Kind$Parser$term$($3458, $3459);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3462 = self.idx;\n                                        var $3463 = self.code;\n                                        var $3464 = self.err;\n                                        var $3465 = Parser$Reply$error$($3462, $3463, $3464);\n                                        var $3461 = $3465;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3466 = self.idx;\n                                        var $3467 = self.code;\n                                        var $3468 = self.val;\n                                        var _term$15 = Kind$Term$ref$(\"Debug.log\");\n                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));\n                                        var _args$17 = List$fold$($3460, Kind$Term$ref$(\"String.nil\"), (_x$17 => _xs$18 => {\n                                            var _arg$19 = Kind$Term$ref$(\"String.concat\");\n                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);\n                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);\n                                            var $3470 = _arg$21;\n                                            return $3470;\n                                        }));\n                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);\n                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$(\"\", (_x$19 => {\n                                            var $3471 = $3468;\n                                            return $3471;\n                                        })));\n                                        var self = Kind$Parser$stop$($3445, $3466, $3467);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3472 = self.idx;\n                                                var $3473 = self.code;\n                                                var $3474 = self.err;\n                                                var $3475 = Parser$Reply$error$($3472, $3473, $3474);\n                                                var $3469 = $3475;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3476 = self.idx;\n                                                var $3477 = self.code;\n                                                var $3478 = self.val;\n                                                var $3479 = Parser$Reply$value$($3476, $3477, Kind$Term$ori$($3478, _term$19));\n                                                var $3469 = $3479;\n                                                break;\n                                        };\n                                        var $3461 = $3469;\n                                        break;\n                                };\n                                var $3453 = $3461;\n                                break;\n                        };\n                        var $3446 = $3453;\n                        break;\n                };\n                var $3438 = $3446;\n                break;\n        };\n        return $3438;\n    };\n    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);\n\n    function Kind$Parser$do$statements$(_monad_name$1) {\n        var $3480 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {\n            var self = Kind$Parser$init$(_idx$2, _code$3);\n            switch (self._) {\n                case 'Parser.Reply.error':\n                    var $3482 = self.idx;\n                    var $3483 = self.code;\n                    var $3484 = self.err;\n                    var $3485 = Parser$Reply$error$($3482, $3483, $3484);\n                    var $3481 = $3485;\n                    break;\n                case 'Parser.Reply.value':\n                    var $3486 = self.idx;\n                    var $3487 = self.code;\n                    var $3488 = self.val;\n                    var self = Parser$first_of$(List$cons$(Kind$Parser$text(\"var \"), List$cons$(Kind$Parser$text(\"get \"), List$nil)))($3486)($3487);\n                    switch (self._) {\n                        case 'Parser.Reply.error':\n                            var $3490 = self.idx;\n                            var $3491 = self.code;\n                            var $3492 = self.err;\n                            var $3493 = Parser$Reply$error$($3490, $3491, $3492);\n                            var $3489 = $3493;\n                            break;\n                        case 'Parser.Reply.value':\n                            var $3494 = self.idx;\n                            var $3495 = self.code;\n                            var self = Kind$Parser$name1$($3494, $3495);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $3497 = self.idx;\n                                    var $3498 = self.code;\n                                    var $3499 = self.err;\n                                    var $3500 = Parser$Reply$error$($3497, $3498, $3499);\n                                    var $3496 = $3500;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $3501 = self.idx;\n                                    var $3502 = self.code;\n                                    var $3503 = self.val;\n                                    var self = Kind$Parser$text$(\"=\", $3501, $3502);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $3505 = self.idx;\n                                            var $3506 = self.code;\n                                            var $3507 = self.err;\n                                            var $3508 = Parser$Reply$error$($3505, $3506, $3507);\n                                            var $3504 = $3508;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $3509 = self.idx;\n                                            var $3510 = self.code;\n                                            var self = Kind$Parser$term$($3509, $3510);\n                                            switch (self._) {\n                                                case 'Parser.Reply.error':\n                                                    var $3512 = self.idx;\n                                                    var $3513 = self.code;\n                                                    var $3514 = self.err;\n                                                    var $3515 = Parser$Reply$error$($3512, $3513, $3514);\n                                                    var $3511 = $3515;\n                                                    break;\n                                                case 'Parser.Reply.value':\n                                                    var $3516 = self.idx;\n                                                    var $3517 = self.code;\n                                                    var $3518 = self.val;\n                                                    var self = Parser$maybe$(Kind$Parser$text(\";\"), $3516, $3517);\n                                                    switch (self._) {\n                                                        case 'Parser.Reply.error':\n                                                            var $3520 = self.idx;\n                                                            var $3521 = self.code;\n                                                            var $3522 = self.err;\n                                                            var $3523 = Parser$Reply$error$($3520, $3521, $3522);\n                                                            var $3519 = $3523;\n                                                            break;\n                                                        case 'Parser.Reply.value':\n                                                            var $3524 = self.idx;\n                                                            var $3525 = self.code;\n                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3524)($3525);\n                                                            switch (self._) {\n                                                                case 'Parser.Reply.error':\n                                                                    var $3527 = self.idx;\n                                                                    var $3528 = self.code;\n                                                                    var $3529 = self.err;\n                                                                    var $3530 = Parser$Reply$error$($3527, $3528, $3529);\n                                                                    var $3526 = $3530;\n                                                                    break;\n                                                                case 'Parser.Reply.value':\n                                                                    var $3531 = self.idx;\n                                                                    var $3532 = self.code;\n                                                                    var $3533 = self.val;\n                                                                    var self = Kind$Parser$stop$($3488, $3531, $3532);\n                                                                    switch (self._) {\n                                                                        case 'Parser.Reply.error':\n                                                                            var $3535 = self.idx;\n                                                                            var $3536 = self.code;\n                                                                            var $3537 = self.err;\n                                                                            var $3538 = Parser$Reply$error$($3535, $3536, $3537);\n                                                                            var $3534 = $3538;\n                                                                            break;\n                                                                        case 'Parser.Reply.value':\n                                                                            var $3539 = self.idx;\n                                                                            var $3540 = self.code;\n                                                                            var $3541 = self.val;\n                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$(\"Monad.bind\"), Kind$Term$ref$(_monad_name$1));\n                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + \".monad\")));\n                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));\n                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));\n                                                                            var _term$32 = Kind$Term$app$(_term$31, $3518);\n                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($3503, (_x$33 => {\n                                                                                var $3543 = $3533;\n                                                                                return $3543;\n                                                                            })));\n                                                                            var $3542 = Parser$Reply$value$($3539, $3540, Kind$Term$ori$($3541, _term$33));\n                                                                            var $3534 = $3542;\n                                                                            break;\n                                                                    };\n                                                                    var $3526 = $3534;\n                                                                    break;\n                                                            };\n                                                            var $3519 = $3526;\n                                                            break;\n                                                    };\n                                                    var $3511 = $3519;\n                                                    break;\n                                            };\n                                            var $3504 = $3511;\n                                            break;\n                                    };\n                                    var $3496 = $3504;\n                                    break;\n                            };\n                            var $3489 = $3496;\n                            break;\n                    };\n                    var $3481 = $3489;\n                    break;\n            };\n            return $3481;\n        }), List$cons$((_idx$2 => _code$3 => {\n            var self = Kind$Parser$init$(_idx$2, _code$3);\n            switch (self._) {\n                case 'Parser.Reply.error':\n                    var $3545 = self.idx;\n                    var $3546 = self.code;\n                    var $3547 = self.err;\n                    var $3548 = Parser$Reply$error$($3545, $3546, $3547);\n                    var $3544 = $3548;\n                    break;\n                case 'Parser.Reply.value':\n                    var $3549 = self.idx;\n                    var $3550 = self.code;\n                    var $3551 = self.val;\n                    var self = Kind$Parser$text$(\"let \", $3549, $3550);\n                    switch (self._) {\n                        case 'Parser.Reply.error':\n                            var $3553 = self.idx;\n                            var $3554 = self.code;\n                            var $3555 = self.err;\n                            var $3556 = Parser$Reply$error$($3553, $3554, $3555);\n                            var $3552 = $3556;\n                            break;\n                        case 'Parser.Reply.value':\n                            var $3557 = self.idx;\n                            var $3558 = self.code;\n                            var self = Kind$Parser$name1$($3557, $3558);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $3560 = self.idx;\n                                    var $3561 = self.code;\n                                    var $3562 = self.err;\n                                    var $3563 = Parser$Reply$error$($3560, $3561, $3562);\n                                    var $3559 = $3563;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $3564 = self.idx;\n                                    var $3565 = self.code;\n                                    var $3566 = self.val;\n                                    var self = Kind$Parser$text$(\"=\", $3564, $3565);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $3568 = self.idx;\n                                            var $3569 = self.code;\n                                            var $3570 = self.err;\n                                            var $3571 = Parser$Reply$error$($3568, $3569, $3570);\n                                            var $3567 = $3571;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $3572 = self.idx;\n                                            var $3573 = self.code;\n                                            var self = Kind$Parser$term$($3572, $3573);\n                                            switch (self._) {\n                                                case 'Parser.Reply.error':\n                                                    var $3575 = self.idx;\n                                                    var $3576 = self.code;\n                                                    var $3577 = self.err;\n                                                    var $3578 = Parser$Reply$error$($3575, $3576, $3577);\n                                                    var $3574 = $3578;\n                                                    break;\n                                                case 'Parser.Reply.value':\n                                                    var $3579 = self.idx;\n                                                    var $3580 = self.code;\n                                                    var $3581 = self.val;\n                                                    var self = Parser$maybe$(Kind$Parser$text(\";\"), $3579, $3580);\n                                                    switch (self._) {\n                                                        case 'Parser.Reply.error':\n                                                            var $3583 = self.idx;\n                                                            var $3584 = self.code;\n                                                            var $3585 = self.err;\n                                                            var $3586 = Parser$Reply$error$($3583, $3584, $3585);\n                                                            var $3582 = $3586;\n                                                            break;\n                                                        case 'Parser.Reply.value':\n                                                            var $3587 = self.idx;\n                                                            var $3588 = self.code;\n                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3587)($3588);\n                                                            switch (self._) {\n                                                                case 'Parser.Reply.error':\n                                                                    var $3590 = self.idx;\n                                                                    var $3591 = self.code;\n                                                                    var $3592 = self.err;\n                                                                    var $3593 = Parser$Reply$error$($3590, $3591, $3592);\n                                                                    var $3589 = $3593;\n                                                                    break;\n                                                                case 'Parser.Reply.value':\n                                                                    var $3594 = self.idx;\n                                                                    var $3595 = self.code;\n                                                                    var $3596 = self.val;\n                                                                    var self = Kind$Parser$stop$($3551, $3594, $3595);\n                                                                    switch (self._) {\n                                                                        case 'Parser.Reply.error':\n                                                                            var $3598 = self.idx;\n                                                                            var $3599 = self.code;\n                                                                            var $3600 = self.err;\n                                                                            var $3601 = Parser$Reply$error$($3598, $3599, $3600);\n                                                                            var $3597 = $3601;\n                                                                            break;\n                                                                        case 'Parser.Reply.value':\n                                                                            var $3602 = self.idx;\n                                                                            var $3603 = self.code;\n                                                                            var $3604 = self.val;\n                                                                            var $3605 = Parser$Reply$value$($3602, $3603, Kind$Term$ori$($3604, Kind$Term$let$($3566, $3581, (_x$28 => {\n                                                                                var $3606 = $3596;\n                                                                                return $3606;\n                                                                            }))));\n                                                                            var $3597 = $3605;\n                                                                            break;\n                                                                    };\n                                                                    var $3589 = $3597;\n                                                                    break;\n                                                            };\n                                                            var $3582 = $3589;\n                                                            break;\n                                                    };\n                                                    var $3574 = $3582;\n                                                    break;\n                                            };\n                                            var $3567 = $3574;\n                                            break;\n                                    };\n                                    var $3559 = $3567;\n                                    break;\n                            };\n                            var $3552 = $3559;\n                            break;\n                    };\n                    var $3544 = $3552;\n                    break;\n            };\n            return $3544;\n        }), List$cons$((_idx$2 => _code$3 => {\n            var self = Kind$Parser$init$(_idx$2, _code$3);\n            switch (self._) {\n                case 'Parser.Reply.error':\n                    var $3608 = self.idx;\n                    var $3609 = self.code;\n                    var $3610 = self.err;\n                    var $3611 = Parser$Reply$error$($3608, $3609, $3610);\n                    var $3607 = $3611;\n                    break;\n                case 'Parser.Reply.value':\n                    var $3612 = self.idx;\n                    var $3613 = self.code;\n                    var $3614 = self.val;\n                    var self = Kind$Parser$text$(\"return \", $3612, $3613);\n                    switch (self._) {\n                        case 'Parser.Reply.error':\n                            var $3616 = self.idx;\n                            var $3617 = self.code;\n                            var $3618 = self.err;\n                            var $3619 = Parser$Reply$error$($3616, $3617, $3618);\n                            var $3615 = $3619;\n                            break;\n                        case 'Parser.Reply.value':\n                            var $3620 = self.idx;\n                            var $3621 = self.code;\n                            var self = Kind$Parser$term$($3620, $3621);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $3623 = self.idx;\n                                    var $3624 = self.code;\n                                    var $3625 = self.err;\n                                    var $3626 = Parser$Reply$error$($3623, $3624, $3625);\n                                    var $3622 = $3626;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $3627 = self.idx;\n                                    var $3628 = self.code;\n                                    var $3629 = self.val;\n                                    var self = Parser$maybe$(Kind$Parser$text(\";\"), $3627, $3628);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $3631 = self.idx;\n                                            var $3632 = self.code;\n                                            var $3633 = self.err;\n                                            var $3634 = Parser$Reply$error$($3631, $3632, $3633);\n                                            var $3630 = $3634;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $3635 = self.idx;\n                                            var $3636 = self.code;\n                                            var self = Kind$Parser$stop$($3614, $3635, $3636);\n                                            switch (self._) {\n                                                case 'Parser.Reply.error':\n                                                    var $3638 = self.idx;\n                                                    var $3639 = self.code;\n                                                    var $3640 = self.err;\n                                                    var $3641 = Parser$Reply$error$($3638, $3639, $3640);\n                                                    var $3637 = $3641;\n                                                    break;\n                                                case 'Parser.Reply.value':\n                                                    var $3642 = self.idx;\n                                                    var $3643 = self.code;\n                                                    var $3644 = self.val;\n                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$(\"Monad.pure\"), Kind$Term$ref$(_monad_name$1));\n                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + \".monad\")));\n                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));\n                                                    var _term$22 = Kind$Term$app$(_term$21, $3629);\n                                                    var $3645 = Parser$Reply$value$($3642, $3643, Kind$Term$ori$($3644, _term$22));\n                                                    var $3637 = $3645;\n                                                    break;\n                                            };\n                                            var $3630 = $3637;\n                                            break;\n                                    };\n                                    var $3622 = $3630;\n                                    break;\n                            };\n                            var $3615 = $3622;\n                            break;\n                    };\n                    var $3607 = $3615;\n                    break;\n            };\n            return $3607;\n        }), List$cons$((_idx$2 => _code$3 => {\n            var self = Kind$Parser$init$(_idx$2, _code$3);\n            switch (self._) {\n                case 'Parser.Reply.error':\n                    var $3647 = self.idx;\n                    var $3648 = self.code;\n                    var $3649 = self.err;\n                    var $3650 = Parser$Reply$error$($3647, $3648, $3649);\n                    var $3646 = $3650;\n                    break;\n                case 'Parser.Reply.value':\n                    var $3651 = self.idx;\n                    var $3652 = self.code;\n                    var $3653 = self.val;\n                    var self = Kind$Parser$term$($3651, $3652);\n                    switch (self._) {\n                        case 'Parser.Reply.error':\n                            var $3655 = self.idx;\n                            var $3656 = self.code;\n                            var $3657 = self.err;\n                            var $3658 = Parser$Reply$error$($3655, $3656, $3657);\n                            var $3654 = $3658;\n                            break;\n                        case 'Parser.Reply.value':\n                            var $3659 = self.idx;\n                            var $3660 = self.code;\n                            var $3661 = self.val;\n                            var self = Parser$maybe$(Kind$Parser$text(\";\"), $3659, $3660);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $3663 = self.idx;\n                                    var $3664 = self.code;\n                                    var $3665 = self.err;\n                                    var $3666 = Parser$Reply$error$($3663, $3664, $3665);\n                                    var $3662 = $3666;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $3667 = self.idx;\n                                    var $3668 = self.code;\n                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3667)($3668);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $3670 = self.idx;\n                                            var $3671 = self.code;\n                                            var $3672 = self.err;\n                                            var $3673 = Parser$Reply$error$($3670, $3671, $3672);\n                                            var $3669 = $3673;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $3674 = self.idx;\n                                            var $3675 = self.code;\n                                            var $3676 = self.val;\n                                            var self = Kind$Parser$stop$($3653, $3674, $3675);\n                                            switch (self._) {\n                                                case 'Parser.Reply.error':\n                                                    var $3678 = self.idx;\n                                                    var $3679 = self.code;\n                                                    var $3680 = self.err;\n                                                    var $3681 = Parser$Reply$error$($3678, $3679, $3680);\n                                                    var $3677 = $3681;\n                                                    break;\n                                                case 'Parser.Reply.value':\n                                                    var $3682 = self.idx;\n                                                    var $3683 = self.code;\n                                                    var $3684 = self.val;\n                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$(\"Monad.bind\"), Kind$Term$ref$(_monad_name$1));\n                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + \".monad\")));\n                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));\n                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));\n                                                    var _term$23 = Kind$Term$app$(_term$22, $3661);\n                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$(\"\", (_x$24 => {\n                                                        var $3686 = $3676;\n                                                        return $3686;\n                                                    })));\n                                                    var $3685 = Parser$Reply$value$($3682, $3683, Kind$Term$ori$($3684, _term$24));\n                                                    var $3677 = $3685;\n                                                    break;\n                                            };\n                                            var $3669 = $3677;\n                                            break;\n                                    };\n                                    var $3662 = $3669;\n                                    break;\n                            };\n                            var $3654 = $3662;\n                            break;\n                    };\n                    var $3646 = $3654;\n                    break;\n            };\n            return $3646;\n        }), List$cons$((_idx$2 => _code$3 => {\n            var self = Kind$Parser$term$(_idx$2, _code$3);\n            switch (self._) {\n                case 'Parser.Reply.error':\n                    var $3688 = self.idx;\n                    var $3689 = self.code;\n                    var $3690 = self.err;\n                    var $3691 = Parser$Reply$error$($3688, $3689, $3690);\n                    var $3687 = $3691;\n                    break;\n                case 'Parser.Reply.value':\n                    var $3692 = self.idx;\n                    var $3693 = self.code;\n                    var $3694 = self.val;\n                    var self = Parser$maybe$(Kind$Parser$text(\";\"), $3692, $3693);\n                    switch (self._) {\n                        case 'Parser.Reply.error':\n                            var $3696 = self.idx;\n                            var $3697 = self.code;\n                            var $3698 = self.err;\n                            var $3699 = Parser$Reply$error$($3696, $3697, $3698);\n                            var $3695 = $3699;\n                            break;\n                        case 'Parser.Reply.value':\n                            var $3700 = self.idx;\n                            var $3701 = self.code;\n                            var $3702 = Parser$Reply$value$($3700, $3701, $3694);\n                            var $3695 = $3702;\n                            break;\n                    };\n                    var $3687 = $3695;\n                    break;\n            };\n            return $3687;\n        }), List$nil))))));\n        return $3480;\n    };\n    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);\n\n    function Kind$Parser$do$(_idx$1, _code$2) {\n        var self = Parser$maybe$(Kind$Parser$text(\"do \"), _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3704 = self.idx;\n                var $3705 = self.code;\n                var $3706 = self.err;\n                var $3707 = Parser$Reply$error$($3704, $3705, $3706);\n                var $3703 = $3707;\n                break;\n            case 'Parser.Reply.value':\n                var $3708 = self.idx;\n                var $3709 = self.code;\n                var self = Kind$Parser$name1$($3708, $3709);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3711 = self.idx;\n                        var $3712 = self.code;\n                        var $3713 = self.err;\n                        var $3714 = Parser$Reply$error$($3711, $3712, $3713);\n                        var $3710 = $3714;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3715 = self.idx;\n                        var $3716 = self.code;\n                        var $3717 = self.val;\n                        var self = Parser$text$(\" {\", $3715, $3716);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3719 = self.idx;\n                                var $3720 = self.code;\n                                var $3721 = self.err;\n                                var $3722 = Parser$Reply$error$($3719, $3720, $3721);\n                                var $3718 = $3722;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3723 = self.idx;\n                                var $3724 = self.code;\n                                var self = Kind$Parser$do$statements$($3717)($3723)($3724);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3726 = self.idx;\n                                        var $3727 = self.code;\n                                        var $3728 = self.err;\n                                        var $3729 = Parser$Reply$error$($3726, $3727, $3728);\n                                        var $3725 = $3729;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3730 = self.idx;\n                                        var $3731 = self.code;\n                                        var $3732 = self.val;\n                                        var self = Kind$Parser$text$(\"}\", $3730, $3731);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3734 = self.idx;\n                                                var $3735 = self.code;\n                                                var $3736 = self.err;\n                                                var $3737 = Parser$Reply$error$($3734, $3735, $3736);\n                                                var $3733 = $3737;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3738 = self.idx;\n                                                var $3739 = self.code;\n                                                var $3740 = Parser$Reply$value$($3738, $3739, $3732);\n                                                var $3733 = $3740;\n                                                break;\n                                        };\n                                        var $3725 = $3733;\n                                        break;\n                                };\n                                var $3718 = $3725;\n                                break;\n                        };\n                        var $3710 = $3718;\n                        break;\n                };\n                var $3703 = $3710;\n                break;\n        };\n        return $3703;\n    };\n    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);\n\n    function Parser$try$(_parse$2, _idx$3, _code$4) {\n        var self = _parse$2(_idx$3)(_code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3742 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);\n                var $3741 = $3742;\n                break;\n            case 'Parser.Reply.value':\n                var $3743 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);\n                var $3741 = $3743;\n                break;\n        };\n        return $3741;\n    };\n    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);\n\n    function Parser$fail$(_error$2, _idx$3, _code$4) {\n        var $3744 = Parser$Reply$error$(_idx$3, _code$4, _error$2);\n        return $3744;\n    };\n    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);\n\n    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {\n        var self = Parser$try$(_test$2, _idx$4, _code$5);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3746 = self.idx;\n                var $3747 = self.code;\n                var $3748 = self.err;\n                var $3749 = Parser$Reply$error$($3746, $3747, $3748);\n                var $3745 = $3749;\n                break;\n            case 'Parser.Reply.value':\n                var $3750 = self.idx;\n                var $3751 = self.code;\n                var $3752 = self.val;\n                var self = $3752;\n                if (self) {\n                    var $3754 = Parser$fail(\"Avoided.\");\n                    var $3753 = $3754;\n                } else {\n                    var $3755 = _parse$3;\n                    var $3753 = $3755;\n                };\n                var $3753 = $3753($3750)($3751);\n                var $3745 = $3753;\n                break;\n        };\n        return $3745;\n    };\n    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);\n\n    function Maybe$default$(_m$2, _a$3) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $3757 = self.value;\n                var $3758 = $3757;\n                var $3756 = $3758;\n                break;\n            case 'Maybe.none':\n                var $3759 = _a$3;\n                var $3756 = $3759;\n                break;\n        };\n        return $3756;\n    };\n    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);\n\n    function Kind$Term$unroll_nat$(_natx$1) {\n        var self = _natx$1;\n        if (self === 0n) {\n            var $3761 = Kind$Term$ref$(Kind$Name$read$(\"Nat.zero\"));\n            var $3760 = $3761;\n        } else {\n            var $3762 = (self - 1n);\n            var _func$3 = Kind$Term$ref$(Kind$Name$read$(\"Nat.succ\"));\n            var _argm$4 = Kind$Term$nat$($3762);\n            var $3763 = Kind$Term$app$(_func$3, _argm$4);\n            var $3760 = $3763;\n        };\n        return $3760;\n    };\n    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function Kind$Term$unroll_chr$bits$(_bits$1) {\n        var self = _bits$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $3765 = self.slice(0, -1);\n                var $3766 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$(\"Bits.o\")), Kind$Term$unroll_chr$bits$($3765));\n                var $3764 = $3766;\n                break;\n            case 'i':\n                var $3767 = self.slice(0, -1);\n                var $3768 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$(\"Bits.i\")), Kind$Term$unroll_chr$bits$($3767));\n                var $3764 = $3768;\n                break;\n            case 'e':\n                var $3769 = Kind$Term$ref$(Kind$Name$read$(\"Bits.e\"));\n                var $3764 = $3769;\n                break;\n        };\n        return $3764;\n    };\n    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);\n\n    function Kind$Term$unroll_chr$(_chrx$1) {\n        var _bits$2 = (u16_to_bits(_chrx$1));\n        var _term$3 = Kind$Term$ref$(Kind$Name$read$(\"Word.from_bits\"));\n        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));\n        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));\n        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$(\"U16.new\")), _term$5);\n        var $3770 = _term$6;\n        return $3770;\n    };\n    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);\n\n    function Kind$Term$unroll_str$(_strx$1) {\n        var self = _strx$1;\n        if (self.length === 0) {\n            var $3772 = Kind$Term$ref$(Kind$Name$read$(\"String.nil\"));\n            var $3771 = $3772;\n        } else {\n            var $3773 = self.charCodeAt(0);\n            var $3774 = self.slice(1);\n            var _char$4 = Kind$Term$chr$($3773);\n            var _term$5 = Kind$Term$ref$(Kind$Name$read$(\"String.cons\"));\n            var _term$6 = Kind$Term$app$(_term$5, _char$4);\n            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($3774));\n            var $3775 = _term$7;\n            var $3771 = $3775;\n        };\n        return $3771;\n    };\n    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);\n\n    function Kind$Term$reduce$(_term$1, _defs$2) {\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.ref':\n                var $3777 = self.name;\n                var self = Kind$Map$get$($3777, _defs$2);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $3779 = self.value;\n                        var self = $3779;\n                        switch (self._) {\n                            case 'Kind.Def.new':\n                                var $3781 = self.term;\n                                var $3782 = Kind$Term$reduce$($3781, _defs$2);\n                                var $3780 = $3782;\n                                break;\n                        };\n                        var $3778 = $3780;\n                        break;\n                    case 'Maybe.none':\n                        var $3783 = Kind$Term$ref$($3777);\n                        var $3778 = $3783;\n                        break;\n                };\n                var $3776 = $3778;\n                break;\n            case 'Kind.Term.app':\n                var $3784 = self.func;\n                var $3785 = self.argm;\n                var _func$5 = Kind$Term$reduce$($3784, _defs$2);\n                var self = _func$5;\n                switch (self._) {\n                    case 'Kind.Term.lam':\n                        var $3787 = self.body;\n                        var $3788 = Kind$Term$reduce$($3787($3785), _defs$2);\n                        var $3786 = $3788;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.hol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                    case 'Kind.Term.ori':\n                        var $3789 = _term$1;\n                        var $3786 = $3789;\n                        break;\n                };\n                var $3776 = $3786;\n                break;\n            case 'Kind.Term.let':\n                var $3790 = self.expr;\n                var $3791 = self.body;\n                var $3792 = Kind$Term$reduce$($3791($3790), _defs$2);\n                var $3776 = $3792;\n                break;\n            case 'Kind.Term.def':\n                var $3793 = self.expr;\n                var $3794 = self.body;\n                var $3795 = Kind$Term$reduce$($3794($3793), _defs$2);\n                var $3776 = $3795;\n                break;\n            case 'Kind.Term.ann':\n                var $3796 = self.term;\n                var $3797 = Kind$Term$reduce$($3796, _defs$2);\n                var $3776 = $3797;\n                break;\n            case 'Kind.Term.nat':\n                var $3798 = self.natx;\n                var $3799 = Kind$Term$reduce$(Kind$Term$unroll_nat$($3798), _defs$2);\n                var $3776 = $3799;\n                break;\n            case 'Kind.Term.chr':\n                var $3800 = self.chrx;\n                var $3801 = Kind$Term$reduce$(Kind$Term$unroll_chr$($3800), _defs$2);\n                var $3776 = $3801;\n                break;\n            case 'Kind.Term.str':\n                var $3802 = self.strx;\n                var $3803 = Kind$Term$reduce$(Kind$Term$unroll_str$($3802), _defs$2);\n                var $3776 = $3803;\n                break;\n            case 'Kind.Term.ori':\n                var $3804 = self.expr;\n                var $3805 = Kind$Term$reduce$($3804, _defs$2);\n                var $3776 = $3805;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.typ':\n            case 'Kind.Term.all':\n            case 'Kind.Term.lam':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.cse':\n                var $3806 = _term$1;\n                var $3776 = $3806;\n                break;\n        };\n        return $3776;\n    };\n    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);\n\n    function Kind$Term$extract_name$(_term$1) {\n        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);\n        var self = _term$2;\n        switch (self._) {\n            case 'Kind.Term.var':\n                var $3808 = self.name;\n                var $3809 = $3808;\n                var $3807 = $3809;\n                break;\n            case 'Kind.Term.ref':\n                var $3810 = self.name;\n                var $3811 = $3810;\n                var $3807 = $3811;\n                break;\n            case 'Kind.Term.typ':\n            case 'Kind.Term.all':\n            case 'Kind.Term.lam':\n            case 'Kind.Term.app':\n            case 'Kind.Term.let':\n            case 'Kind.Term.def':\n            case 'Kind.Term.ann':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n            case 'Kind.Term.cse':\n            case 'Kind.Term.ori':\n                var $3812 = \"self\";\n                var $3807 = $3812;\n                break;\n        };\n        return $3807;\n    };\n    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);\n\n    function Kind$Ann$new$(_name$1, _term$2, _type$3) {\n        var $3813 = ({\n            _: 'Kind.Ann.new',\n            'name': _name$1,\n            'term': _term$2,\n            'type': _type$3\n        });\n        return $3813;\n    };\n    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);\n    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {\n        var self = Kind$Parser$text$(\"with \", _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3815 = self.idx;\n                var $3816 = self.code;\n                var $3817 = self.err;\n                var $3818 = Parser$Reply$error$($3815, $3816, $3817);\n                var $3814 = $3818;\n                break;\n            case 'Parser.Reply.value':\n                var $3819 = self.idx;\n                var $3820 = self.code;\n                var $3821 = Parser$many$((_idx$6 => _code$7 => {\n                    var self = Kind$Parser$name1$(_idx$6, _code$7);\n                    switch (self._) {\n                        case 'Parser.Reply.error':\n                            var $3823 = self.idx;\n                            var $3824 = self.code;\n                            var $3825 = self.err;\n                            var $3826 = Parser$Reply$error$($3823, $3824, $3825);\n                            var $3822 = $3826;\n                            break;\n                        case 'Parser.Reply.value':\n                            var $3827 = self.idx;\n                            var $3828 = self.code;\n                            var $3829 = self.val;\n                            var self = Parser$maybe$((_idx$11 => _code$12 => {\n                                var self = Kind$Parser$text$(\":\", _idx$11, _code$12);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3832 = self.idx;\n                                        var $3833 = self.code;\n                                        var $3834 = self.err;\n                                        var $3835 = Parser$Reply$error$($3832, $3833, $3834);\n                                        var $3831 = $3835;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3836 = self.idx;\n                                        var $3837 = self.code;\n                                        var self = Kind$Parser$term$($3836, $3837);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3839 = self.idx;\n                                                var $3840 = self.code;\n                                                var $3841 = self.err;\n                                                var $3842 = Parser$Reply$error$($3839, $3840, $3841);\n                                                var $3838 = $3842;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3843 = self.idx;\n                                                var $3844 = self.code;\n                                                var $3845 = self.val;\n                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $3843, $3844);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $3847 = self.idx;\n                                                        var $3848 = self.code;\n                                                        var $3849 = self.err;\n                                                        var $3850 = Parser$Reply$error$($3847, $3848, $3849);\n                                                        var $3846 = $3850;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $3851 = self.idx;\n                                                        var $3852 = self.code;\n                                                        var $3853 = Parser$Reply$value$($3851, $3852, $3845);\n                                                        var $3846 = $3853;\n                                                        break;\n                                                };\n                                                var $3838 = $3846;\n                                                break;\n                                        };\n                                        var $3831 = $3838;\n                                        break;\n                                };\n                                return $3831;\n                            }), $3827, $3828);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $3854 = self.idx;\n                                    var $3855 = self.code;\n                                    var $3856 = self.err;\n                                    var $3857 = Parser$Reply$error$($3854, $3855, $3856);\n                                    var $3830 = $3857;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $3858 = self.idx;\n                                    var $3859 = self.code;\n                                    var $3860 = self.val;\n                                    var $3861 = Parser$Reply$value$($3858, $3859, Kind$Ann$new$($3829, Kind$Term$ref$($3829), $3860));\n                                    var $3830 = $3861;\n                                    break;\n                            };\n                            var $3822 = $3830;\n                            break;\n                    };\n                    return $3822;\n                }))($3819)($3820);\n                var $3814 = $3821;\n                break;\n        };\n        return $3814;\n    }), List$cons$((_idx$1 => _code$2 => {\n        var $3862 = Parser$Reply$value$(_idx$1, _code$2, List$nil);\n        return $3862;\n    }), List$nil)));\n\n    function Kind$Parser$case$case$(_idx$1, _code$2) {\n        var self = Parser$until$(Kind$Parser$text(\":\"), Kind$Parser$name1)(_idx$1)(_code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3864 = self.idx;\n                var $3865 = self.code;\n                var $3866 = self.err;\n                var $3867 = Parser$Reply$error$($3864, $3865, $3866);\n                var $3863 = $3867;\n                break;\n            case 'Parser.Reply.value':\n                var $3868 = self.idx;\n                var $3869 = self.code;\n                var $3870 = self.val;\n                var self = Kind$Parser$term$($3868, $3869);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3872 = self.idx;\n                        var $3873 = self.code;\n                        var $3874 = self.err;\n                        var $3875 = Parser$Reply$error$($3872, $3873, $3874);\n                        var $3871 = $3875;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3876 = self.idx;\n                        var $3877 = self.code;\n                        var $3878 = self.val;\n                        var self = Parser$maybe$(Kind$Parser$text(\",\"), $3876, $3877);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3880 = self.idx;\n                                var $3881 = self.code;\n                                var $3882 = self.err;\n                                var $3883 = Parser$Reply$error$($3880, $3881, $3882);\n                                var $3879 = $3883;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3884 = self.idx;\n                                var $3885 = self.code;\n                                var $3886 = Parser$Reply$value$($3884, $3885, Pair$new$($3870, $3878));\n                                var $3879 = $3886;\n                                break;\n                        };\n                        var $3871 = $3879;\n                        break;\n                };\n                var $3863 = $3871;\n                break;\n        };\n        return $3863;\n    };\n    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);\n    const Debug$log = a0 => a1 => ((console.log(a0), a1()));\n\n    function Kind$Parser$case$group$(_dflt$1, _cses$2) {\n        var self = _cses$2;\n        switch (self._) {\n            case 'List.cons':\n                var $3888 = self.head;\n                var $3889 = self.tail;\n                var _map$5 = Kind$Parser$case$group$(_dflt$1, $3889);\n                var self = $3888;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $3891 = self.fst;\n                        var $3892 = self.snd;\n                        var self = $3891;\n                        switch (self._) {\n                            case 'List.cons':\n                                var $3894 = self.head;\n                                var $3895 = self.tail;\n                                var _rest$10 = Maybe$default$(Kind$Map$get$($3894, _map$5), List$nil);\n                                var $3896 = Kind$Map$set$($3894, List$cons$(Pair$new$($3895, $3892), _rest$10), _map$5);\n                                var $3893 = $3896;\n                                break;\n                            case 'List.nil':\n                                var $3897 = _map$5;\n                                var $3893 = $3897;\n                                break;\n                        };\n                        var $3890 = $3893;\n                        break;\n                };\n                var $3887 = $3890;\n                break;\n            case 'List.nil':\n                var self = _dflt$1;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $3899 = self.value;\n                        var $3900 = Kind$Map$set$(\"_\", List$cons$(Pair$new$(List$nil, $3899), List$nil), Kind$Map$new);\n                        var $3898 = $3900;\n                        break;\n                    case 'Maybe.none':\n                        var $3901 = Kind$Map$new;\n                        var $3898 = $3901;\n                        break;\n                };\n                var $3887 = $3898;\n                break;\n        };\n        return $3887;\n    };\n    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);\n\n    function BitsMap$map$(_fn$3, _map$4) {\n        var self = _map$4;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $3903 = self.val;\n                var $3904 = self.lft;\n                var $3905 = self.rgt;\n                var self = $3903;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $3907 = self.value;\n                        var $3908 = Maybe$some$(_fn$3($3907));\n                        var _val$8 = $3908;\n                        break;\n                    case 'Maybe.none':\n                        var $3909 = Maybe$none;\n                        var _val$8 = $3909;\n                        break;\n                };\n                var _lft$9 = BitsMap$map$(_fn$3, $3904);\n                var _rgt$10 = BitsMap$map$(_fn$3, $3905);\n                var $3906 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);\n                var $3902 = $3906;\n                break;\n            case 'BitsMap.new':\n                var $3910 = BitsMap$new;\n                var $3902 = $3910;\n                break;\n        };\n        return $3902;\n    };\n    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);\n\n    function Kind$Map$map$(_fn$3, _map$4) {\n        var $3911 = BitsMap$map$(_fn$3, _map$4);\n        return $3911;\n    };\n    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);\n\n    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {\n        var $3912 = ({\n            _: 'Kind.Term.cse',\n            'path': _path$1,\n            'expr': _expr$2,\n            'name': _name$3,\n            'with': _with$4,\n            'cses': _cses$5,\n            'moti': _moti$6\n        });\n        return $3912;\n    };\n    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);\n\n    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {\n        var self = _vals$1;\n        switch (self._) {\n            case 'List.cons':\n                var $3914 = self.head;\n                var $3915 = self.tail;\n                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);\n                var _name$10 = Pair$fst$($3914);\n                var _expr$11 = Pair$snd$($3914);\n                var _cses$12 = Kind$Map$map$((_cses$12 => {\n                    var $3917 = Kind$Parser$case$build$($3915, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);\n                    return $3917;\n                }), _group$9);\n                var $3916 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));\n                var $3913 = $3916;\n                break;\n            case 'List.nil':\n                var self = _cses$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $3919 = self.head;\n                        var $3920 = Pair$snd$($3919);\n                        var $3918 = $3920;\n                        break;\n                    case 'List.nil':\n                        var $3921 = ((console.log((\"MISSING CASE\" + String$nil)), (_$7 => {\n                            var $3922 = Kind$Term$ref$(\"missing_case\");\n                            return $3922;\n                        })()));\n                        var $3918 = $3921;\n                        break;\n                };\n                var $3913 = $3918;\n                break;\n        };\n        return $3913;\n    };\n    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);\n\n    function Kind$Parser$case$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $3924 = self.idx;\n                var $3925 = self.code;\n                var $3926 = self.err;\n                var $3927 = Parser$Reply$error$($3924, $3925, $3926);\n                var $3923 = $3927;\n                break;\n            case 'Parser.Reply.value':\n                var $3928 = self.idx;\n                var $3929 = self.code;\n                var $3930 = self.val;\n                var self = Kind$Parser$text$(\"case \", $3928, $3929);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $3932 = self.idx;\n                        var $3933 = self.code;\n                        var $3934 = self.err;\n                        var $3935 = Parser$Reply$error$($3932, $3933, $3934);\n                        var $3931 = $3935;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $3936 = self.idx;\n                        var $3937 = self.code;\n                        var self = Parser$many1$((_idx$9 => _code$10 => {\n                            var self = Parser$avoiding$(Kind$Parser$text(\"{\"), Kind$Parser$term, _idx$9, _code$10);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $3940 = self.idx;\n                                    var $3941 = self.code;\n                                    var $3942 = self.err;\n                                    var $3943 = Parser$Reply$error$($3940, $3941, $3942);\n                                    var $3939 = $3943;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $3944 = self.idx;\n                                    var $3945 = self.code;\n                                    var $3946 = self.val;\n                                    var self = Parser$maybe$((_idx$14 => _code$15 => {\n                                        var self = Kind$Parser$text$(\"as\", _idx$14, _code$15);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3949 = self.idx;\n                                                var $3950 = self.code;\n                                                var $3951 = self.err;\n                                                var $3952 = Parser$Reply$error$($3949, $3950, $3951);\n                                                var $3948 = $3952;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3953 = self.idx;\n                                                var $3954 = self.code;\n                                                var self = Kind$Parser$name1$($3953, $3954);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $3956 = self.idx;\n                                                        var $3957 = self.code;\n                                                        var $3958 = self.err;\n                                                        var $3959 = Parser$Reply$error$($3956, $3957, $3958);\n                                                        var $3955 = $3959;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $3960 = self.idx;\n                                                        var $3961 = self.code;\n                                                        var $3962 = self.val;\n                                                        var self = Parser$maybe$(Kind$Parser$text(\";\"), $3960, $3961);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $3964 = self.idx;\n                                                                var $3965 = self.code;\n                                                                var $3966 = self.err;\n                                                                var $3967 = Parser$Reply$error$($3964, $3965, $3966);\n                                                                var $3963 = $3967;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $3968 = self.idx;\n                                                                var $3969 = self.code;\n                                                                var $3970 = Parser$Reply$value$($3968, $3969, $3962);\n                                                                var $3963 = $3970;\n                                                                break;\n                                                        };\n                                                        var $3955 = $3963;\n                                                        break;\n                                                };\n                                                var $3948 = $3955;\n                                                break;\n                                        };\n                                        return $3948;\n                                    }), $3944, $3945);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $3971 = self.idx;\n                                            var $3972 = self.code;\n                                            var $3973 = self.err;\n                                            var $3974 = Parser$Reply$error$($3971, $3972, $3973);\n                                            var $3947 = $3974;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $3975 = self.idx;\n                                            var $3976 = self.code;\n                                            var $3977 = self.val;\n                                            var _name$17 = Maybe$default$($3977, Kind$Term$extract_name$($3946));\n                                            var $3978 = Parser$Reply$value$($3975, $3976, Pair$new$(_name$17, $3946));\n                                            var $3947 = $3978;\n                                            break;\n                                    };\n                                    var $3939 = $3947;\n                                    break;\n                            };\n                            return $3939;\n                        }), $3936, $3937);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $3979 = self.idx;\n                                var $3980 = self.code;\n                                var $3981 = self.err;\n                                var $3982 = Parser$Reply$error$($3979, $3980, $3981);\n                                var $3938 = $3982;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $3983 = self.idx;\n                                var $3984 = self.code;\n                                var $3985 = self.val;\n                                var self = Kind$Parser$case$with($3983)($3984);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $3987 = self.idx;\n                                        var $3988 = self.code;\n                                        var $3989 = self.err;\n                                        var $3990 = Parser$Reply$error$($3987, $3988, $3989);\n                                        var $3986 = $3990;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $3991 = self.idx;\n                                        var $3992 = self.code;\n                                        var $3993 = self.val;\n                                        var self = Kind$Parser$text$(\"{\", $3991, $3992);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $3995 = self.idx;\n                                                var $3996 = self.code;\n                                                var $3997 = self.err;\n                                                var $3998 = Parser$Reply$error$($3995, $3996, $3997);\n                                                var $3994 = $3998;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $3999 = self.idx;\n                                                var $4000 = self.code;\n                                                var self = Parser$until$(Kind$Parser$text(\"}\"), Kind$Parser$case$case)($3999)($4000);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $4002 = self.idx;\n                                                        var $4003 = self.code;\n                                                        var $4004 = self.err;\n                                                        var $4005 = Parser$Reply$error$($4002, $4003, $4004);\n                                                        var $4001 = $4005;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $4006 = self.idx;\n                                                        var $4007 = self.code;\n                                                        var $4008 = self.val;\n                                                        var self = Parser$maybe$(Kind$Parser$text(\"!\"), $4006, $4007);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $4010 = self.idx;\n                                                                var $4011 = self.code;\n                                                                var $4012 = self.err;\n                                                                var $4013 = Parser$Reply$error$($4010, $4011, $4012);\n                                                                var $4009 = $4013;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $4014 = self.idx;\n                                                                var $4015 = self.code;\n                                                                var $4016 = self.val;\n                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {\n                                                                    var self = Kind$Parser$text$(\"default\", _idx$24, _code$25);\n                                                                    switch (self._) {\n                                                                        case 'Parser.Reply.error':\n                                                                            var $4019 = self.idx;\n                                                                            var $4020 = self.code;\n                                                                            var $4021 = self.err;\n                                                                            var $4022 = Parser$Reply$error$($4019, $4020, $4021);\n                                                                            var $4018 = $4022;\n                                                                            break;\n                                                                        case 'Parser.Reply.value':\n                                                                            var $4023 = self.idx;\n                                                                            var $4024 = self.code;\n                                                                            var self = Kind$Parser$term$($4023, $4024);\n                                                                            switch (self._) {\n                                                                                case 'Parser.Reply.error':\n                                                                                    var $4026 = self.idx;\n                                                                                    var $4027 = self.code;\n                                                                                    var $4028 = self.err;\n                                                                                    var $4029 = Parser$Reply$error$($4026, $4027, $4028);\n                                                                                    var $4025 = $4029;\n                                                                                    break;\n                                                                                case 'Parser.Reply.value':\n                                                                                    var $4030 = self.idx;\n                                                                                    var $4031 = self.code;\n                                                                                    var $4032 = self.val;\n                                                                                    var $4033 = Parser$Reply$value$($4030, $4031, $4032);\n                                                                                    var $4025 = $4033;\n                                                                                    break;\n                                                                            };\n                                                                            var $4018 = $4025;\n                                                                            break;\n                                                                    };\n                                                                    return $4018;\n                                                                }), $4014, $4015);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $4034 = self.idx;\n                                                                        var $4035 = self.code;\n                                                                        var $4036 = self.err;\n                                                                        var $4037 = Parser$Reply$error$($4034, $4035, $4036);\n                                                                        var $4017 = $4037;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $4038 = self.idx;\n                                                                        var $4039 = self.code;\n                                                                        var $4040 = self.val;\n                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {\n                                                                            var self = Kind$Parser$text$(\":\", _idx$27, _code$28);\n                                                                            switch (self._) {\n                                                                                case 'Parser.Reply.error':\n                                                                                    var $4043 = self.idx;\n                                                                                    var $4044 = self.code;\n                                                                                    var $4045 = self.err;\n                                                                                    var $4046 = Parser$Reply$error$($4043, $4044, $4045);\n                                                                                    var $4042 = $4046;\n                                                                                    break;\n                                                                                case 'Parser.Reply.value':\n                                                                                    var $4047 = self.idx;\n                                                                                    var $4048 = self.code;\n                                                                                    var $4049 = Kind$Parser$term$($4047, $4048);\n                                                                                    var $4042 = $4049;\n                                                                                    break;\n                                                                            };\n                                                                            return $4042;\n                                                                        }), $4038, $4039);\n                                                                        switch (self._) {\n                                                                            case 'Parser.Reply.error':\n                                                                                var $4050 = self.idx;\n                                                                                var $4051 = self.code;\n                                                                                var $4052 = self.err;\n                                                                                var $4053 = Parser$Reply$error$($4050, $4051, $4052);\n                                                                                var $4041 = $4053;\n                                                                                break;\n                                                                            case 'Parser.Reply.value':\n                                                                                var $4054 = self.idx;\n                                                                                var $4055 = self.code;\n                                                                                var $4056 = self.val;\n                                                                                var self = $4056;\n                                                                                switch (self._) {\n                                                                                    case 'Maybe.some':\n                                                                                        var $4058 = self.value;\n                                                                                        var $4059 = Maybe$some$($4058);\n                                                                                        var _moti$30 = $4059;\n                                                                                        break;\n                                                                                    case 'Maybe.none':\n                                                                                        var self = $4016;\n                                                                                        switch (self._) {\n                                                                                            case 'Maybe.none':\n                                                                                                var $4061 = Maybe$some$(Kind$Term$hol$(Bits$e));\n                                                                                                var $4060 = $4061;\n                                                                                                break;\n                                                                                            case 'Maybe.some':\n                                                                                                var $4062 = Maybe$none;\n                                                                                                var $4060 = $4062;\n                                                                                                break;\n                                                                                        };\n                                                                                        var _moti$30 = $4060;\n                                                                                        break;\n                                                                                };\n                                                                                var self = Kind$Parser$stop$($3930, $4054, $4055);\n                                                                                switch (self._) {\n                                                                                    case 'Parser.Reply.error':\n                                                                                        var $4063 = self.idx;\n                                                                                        var $4064 = self.code;\n                                                                                        var $4065 = self.err;\n                                                                                        var $4066 = Parser$Reply$error$($4063, $4064, $4065);\n                                                                                        var $4057 = $4066;\n                                                                                        break;\n                                                                                    case 'Parser.Reply.value':\n                                                                                        var $4067 = self.idx;\n                                                                                        var $4068 = self.code;\n                                                                                        var $4069 = self.val;\n                                                                                        var $4070 = Parser$Reply$value$($4067, $4068, Kind$Parser$case$build$($3985, $3993, $4008, $4040, _moti$30, $4069));\n                                                                                        var $4057 = $4070;\n                                                                                        break;\n                                                                                };\n                                                                                var $4041 = $4057;\n                                                                                break;\n                                                                        };\n                                                                        var $4017 = $4041;\n                                                                        break;\n                                                                };\n                                                                var $4009 = $4017;\n                                                                break;\n                                                        };\n                                                        var $4001 = $4009;\n                                                        break;\n                                                };\n                                                var $3994 = $4001;\n                                                break;\n                                        };\n                                        var $3986 = $3994;\n                                        break;\n                                };\n                                var $3938 = $3986;\n                                break;\n                        };\n                        var $3931 = $3938;\n                        break;\n                };\n                var $3923 = $3931;\n                break;\n        };\n        return $3923;\n    };\n    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);\n\n    function Kind$Parser$open$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4072 = self.idx;\n                var $4073 = self.code;\n                var $4074 = self.err;\n                var $4075 = Parser$Reply$error$($4072, $4073, $4074);\n                var $4071 = $4075;\n                break;\n            case 'Parser.Reply.value':\n                var $4076 = self.idx;\n                var $4077 = self.code;\n                var $4078 = self.val;\n                var self = Kind$Parser$text$(\"open \", $4076, $4077);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4080 = self.idx;\n                        var $4081 = self.code;\n                        var $4082 = self.err;\n                        var $4083 = Parser$Reply$error$($4080, $4081, $4082);\n                        var $4079 = $4083;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4084 = self.idx;\n                        var $4085 = self.code;\n                        var self = Kind$Parser$spaces($4084)($4085);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4087 = self.idx;\n                                var $4088 = self.code;\n                                var $4089 = self.err;\n                                var $4090 = Parser$Reply$error$($4087, $4088, $4089);\n                                var $4086 = $4090;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4091 = self.idx;\n                                var $4092 = self.code;\n                                var self = Kind$Parser$term$($4091, $4092);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4094 = self.idx;\n                                        var $4095 = self.code;\n                                        var $4096 = self.err;\n                                        var $4097 = Parser$Reply$error$($4094, $4095, $4096);\n                                        var $4093 = $4097;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4098 = self.idx;\n                                        var $4099 = self.code;\n                                        var $4100 = self.val;\n                                        var self = Parser$maybe$((_idx$15 => _code$16 => {\n                                            var self = Kind$Parser$text$(\"as\", _idx$15, _code$16);\n                                            switch (self._) {\n                                                case 'Parser.Reply.error':\n                                                    var $4103 = self.idx;\n                                                    var $4104 = self.code;\n                                                    var $4105 = self.err;\n                                                    var $4106 = Parser$Reply$error$($4103, $4104, $4105);\n                                                    var $4102 = $4106;\n                                                    break;\n                                                case 'Parser.Reply.value':\n                                                    var $4107 = self.idx;\n                                                    var $4108 = self.code;\n                                                    var $4109 = Kind$Parser$name1$($4107, $4108);\n                                                    var $4102 = $4109;\n                                                    break;\n                                            };\n                                            return $4102;\n                                        }), $4098, $4099);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4110 = self.idx;\n                                                var $4111 = self.code;\n                                                var $4112 = self.err;\n                                                var $4113 = Parser$Reply$error$($4110, $4111, $4112);\n                                                var $4101 = $4113;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4114 = self.idx;\n                                                var $4115 = self.code;\n                                                var $4116 = self.val;\n                                                var self = Parser$maybe$(Kind$Parser$text(\";\"), $4114, $4115);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $4118 = self.idx;\n                                                        var $4119 = self.code;\n                                                        var $4120 = self.err;\n                                                        var $4121 = Parser$Reply$error$($4118, $4119, $4120);\n                                                        var $4117 = $4121;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $4122 = self.idx;\n                                                        var $4123 = self.code;\n                                                        var self = $4116;\n                                                        switch (self._) {\n                                                            case 'Maybe.some':\n                                                                var $4125 = self.value;\n                                                                var $4126 = $4125;\n                                                                var _name$21 = $4126;\n                                                                break;\n                                                            case 'Maybe.none':\n                                                                var self = Kind$Term$reduce$($4100, Kind$Map$new);\n                                                                switch (self._) {\n                                                                    case 'Kind.Term.var':\n                                                                        var $4128 = self.name;\n                                                                        var $4129 = $4128;\n                                                                        var $4127 = $4129;\n                                                                        break;\n                                                                    case 'Kind.Term.ref':\n                                                                        var $4130 = self.name;\n                                                                        var $4131 = $4130;\n                                                                        var $4127 = $4131;\n                                                                        break;\n                                                                    case 'Kind.Term.typ':\n                                                                    case 'Kind.Term.all':\n                                                                    case 'Kind.Term.lam':\n                                                                    case 'Kind.Term.app':\n                                                                    case 'Kind.Term.let':\n                                                                    case 'Kind.Term.def':\n                                                                    case 'Kind.Term.ann':\n                                                                    case 'Kind.Term.gol':\n                                                                    case 'Kind.Term.hol':\n                                                                    case 'Kind.Term.nat':\n                                                                    case 'Kind.Term.chr':\n                                                                    case 'Kind.Term.str':\n                                                                    case 'Kind.Term.cse':\n                                                                    case 'Kind.Term.ori':\n                                                                        var $4132 = Kind$Name$read$(\"self\");\n                                                                        var $4127 = $4132;\n                                                                        break;\n                                                                };\n                                                                var _name$21 = $4127;\n                                                                break;\n                                                        };\n                                                        var _wyth$22 = List$nil;\n                                                        var self = Kind$Parser$term$($4122, $4123);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $4133 = self.idx;\n                                                                var $4134 = self.code;\n                                                                var $4135 = self.err;\n                                                                var $4136 = Parser$Reply$error$($4133, $4134, $4135);\n                                                                var $4124 = $4136;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $4137 = self.idx;\n                                                                var $4138 = self.code;\n                                                                var $4139 = self.val;\n                                                                var _cses$26 = Kind$Map$set$(\"_\", $4139, Kind$Map$new);\n                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));\n                                                                var self = Kind$Parser$stop$($4078, $4137, $4138);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $4141 = self.idx;\n                                                                        var $4142 = self.code;\n                                                                        var $4143 = self.err;\n                                                                        var $4144 = Parser$Reply$error$($4141, $4142, $4143);\n                                                                        var $4140 = $4144;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $4145 = self.idx;\n                                                                        var $4146 = self.code;\n                                                                        var $4147 = self.val;\n                                                                        var $4148 = Parser$Reply$value$($4145, $4146, Kind$Term$ori$($4147, Kind$Term$cse$(Bits$e, $4100, _name$21, _wyth$22, _cses$26, _moti$27)));\n                                                                        var $4140 = $4148;\n                                                                        break;\n                                                                };\n                                                                var $4124 = $4140;\n                                                                break;\n                                                        };\n                                                        var $4117 = $4124;\n                                                        break;\n                                                };\n                                                var $4101 = $4117;\n                                                break;\n                                        };\n                                        var $4093 = $4101;\n                                        break;\n                                };\n                                var $4086 = $4093;\n                                break;\n                        };\n                        var $4079 = $4086;\n                        break;\n                };\n                var $4071 = $4079;\n                break;\n        };\n        return $4071;\n    };\n    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);\n\n    function Kind$Parser$without$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4150 = self.idx;\n                var $4151 = self.code;\n                var $4152 = self.err;\n                var $4153 = Parser$Reply$error$($4150, $4151, $4152);\n                var $4149 = $4153;\n                break;\n            case 'Parser.Reply.value':\n                var $4154 = self.idx;\n                var $4155 = self.code;\n                var $4156 = self.val;\n                var self = Kind$Parser$text$(\"without \", $4154, $4155);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4158 = self.idx;\n                        var $4159 = self.code;\n                        var $4160 = self.err;\n                        var $4161 = Parser$Reply$error$($4158, $4159, $4160);\n                        var $4157 = $4161;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4162 = self.idx;\n                        var $4163 = self.code;\n                        var self = Kind$Parser$name1$($4162, $4163);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4165 = self.idx;\n                                var $4166 = self.code;\n                                var $4167 = self.err;\n                                var $4168 = Parser$Reply$error$($4165, $4166, $4167);\n                                var $4164 = $4168;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4169 = self.idx;\n                                var $4170 = self.code;\n                                var $4171 = self.val;\n                                var self = Kind$Parser$text$(\":\", $4169, $4170);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4173 = self.idx;\n                                        var $4174 = self.code;\n                                        var $4175 = self.err;\n                                        var $4176 = Parser$Reply$error$($4173, $4174, $4175);\n                                        var $4172 = $4176;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4177 = self.idx;\n                                        var $4178 = self.code;\n                                        var self = Kind$Parser$term$($4177, $4178);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4180 = self.idx;\n                                                var $4181 = self.code;\n                                                var $4182 = self.err;\n                                                var $4183 = Parser$Reply$error$($4180, $4181, $4182);\n                                                var $4179 = $4183;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4184 = self.idx;\n                                                var $4185 = self.code;\n                                                var $4186 = self.val;\n                                                var self = Kind$Parser$term$($4184, $4185);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $4188 = self.idx;\n                                                        var $4189 = self.code;\n                                                        var $4190 = self.err;\n                                                        var $4191 = Parser$Reply$error$($4188, $4189, $4190);\n                                                        var $4187 = $4191;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $4192 = self.idx;\n                                                        var $4193 = self.code;\n                                                        var $4194 = self.val;\n                                                        var self = Kind$Parser$stop$($4156, $4192, $4193);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $4196 = self.idx;\n                                                                var $4197 = self.code;\n                                                                var $4198 = self.err;\n                                                                var $4199 = Parser$Reply$error$($4196, $4197, $4198);\n                                                                var $4195 = $4199;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $4200 = self.idx;\n                                                                var $4201 = self.code;\n                                                                var $4202 = self.val;\n                                                                var _term$24 = Kind$Term$ref$($4171);\n                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$(\"\", (_x$25 => {\n                                                                    var $4204 = Kind$Term$hol$(Bits$e);\n                                                                    return $4204;\n                                                                })));\n                                                                var _term$26 = Kind$Term$app$(_term$25, $4186);\n                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($4171, (_x$27 => {\n                                                                    var $4205 = $4194;\n                                                                    return $4205;\n                                                                })));\n                                                                var $4203 = Parser$Reply$value$($4200, $4201, Kind$Term$ori$($4202, _term$27));\n                                                                var $4195 = $4203;\n                                                                break;\n                                                        };\n                                                        var $4187 = $4195;\n                                                        break;\n                                                };\n                                                var $4179 = $4187;\n                                                break;\n                                        };\n                                        var $4172 = $4179;\n                                        break;\n                                };\n                                var $4164 = $4172;\n                                break;\n                        };\n                        var $4157 = $4164;\n                        break;\n                };\n                var $4149 = $4157;\n                break;\n        };\n        return $4149;\n    };\n    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);\n\n    function Kind$Parser$switch$case$(_idx$1, _code$2) {\n        var self = Kind$Parser$term$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4207 = self.idx;\n                var $4208 = self.code;\n                var $4209 = self.err;\n                var $4210 = Parser$Reply$error$($4207, $4208, $4209);\n                var $4206 = $4210;\n                break;\n            case 'Parser.Reply.value':\n                var $4211 = self.idx;\n                var $4212 = self.code;\n                var $4213 = self.val;\n                var self = Kind$Parser$text$(\":\", $4211, $4212);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4215 = self.idx;\n                        var $4216 = self.code;\n                        var $4217 = self.err;\n                        var $4218 = Parser$Reply$error$($4215, $4216, $4217);\n                        var $4214 = $4218;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4219 = self.idx;\n                        var $4220 = self.code;\n                        var self = Kind$Parser$term$($4219, $4220);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4222 = self.idx;\n                                var $4223 = self.code;\n                                var $4224 = self.err;\n                                var $4225 = Parser$Reply$error$($4222, $4223, $4224);\n                                var $4221 = $4225;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4226 = self.idx;\n                                var $4227 = self.code;\n                                var $4228 = self.val;\n                                var $4229 = Parser$Reply$value$($4226, $4227, Pair$new$($4213, $4228));\n                                var $4221 = $4229;\n                                break;\n                        };\n                        var $4214 = $4221;\n                        break;\n                };\n                var $4206 = $4214;\n                break;\n        };\n        return $4206;\n    };\n    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);\n\n    function Kind$Parser$switch$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4231 = self.idx;\n                var $4232 = self.code;\n                var $4233 = self.err;\n                var $4234 = Parser$Reply$error$($4231, $4232, $4233);\n                var $4230 = $4234;\n                break;\n            case 'Parser.Reply.value':\n                var $4235 = self.idx;\n                var $4236 = self.code;\n                var $4237 = self.val;\n                var self = Kind$Parser$text$(\"switch \", $4235, $4236);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4239 = self.idx;\n                        var $4240 = self.code;\n                        var $4241 = self.err;\n                        var $4242 = Parser$Reply$error$($4239, $4240, $4241);\n                        var $4238 = $4242;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4243 = self.idx;\n                        var $4244 = self.code;\n                        var self = Kind$Parser$term$($4243, $4244);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4246 = self.idx;\n                                var $4247 = self.code;\n                                var $4248 = self.err;\n                                var $4249 = Parser$Reply$error$($4246, $4247, $4248);\n                                var $4245 = $4249;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4250 = self.idx;\n                                var $4251 = self.code;\n                                var $4252 = self.val;\n                                var self = Kind$Parser$text$(\"{\", $4250, $4251);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4254 = self.idx;\n                                        var $4255 = self.code;\n                                        var $4256 = self.err;\n                                        var $4257 = Parser$Reply$error$($4254, $4255, $4256);\n                                        var $4253 = $4257;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4258 = self.idx;\n                                        var $4259 = self.code;\n                                        var self = Parser$until$(Kind$Parser$text(\"}\"), Kind$Parser$switch$case)($4258)($4259);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4261 = self.idx;\n                                                var $4262 = self.code;\n                                                var $4263 = self.err;\n                                                var $4264 = Parser$Reply$error$($4261, $4262, $4263);\n                                                var $4260 = $4264;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4265 = self.idx;\n                                                var $4266 = self.code;\n                                                var $4267 = self.val;\n                                                var self = Kind$Parser$text$(\"default \", $4265, $4266);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $4269 = self.idx;\n                                                        var $4270 = self.code;\n                                                        var $4271 = self.err;\n                                                        var $4272 = Parser$Reply$error$($4269, $4270, $4271);\n                                                        var $4268 = $4272;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $4273 = self.idx;\n                                                        var $4274 = self.code;\n                                                        var self = Kind$Parser$term$($4273, $4274);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $4276 = self.idx;\n                                                                var $4277 = self.code;\n                                                                var $4278 = self.err;\n                                                                var $4279 = Parser$Reply$error$($4276, $4277, $4278);\n                                                                var $4275 = $4279;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $4280 = self.idx;\n                                                                var $4281 = self.code;\n                                                                var $4282 = self.val;\n                                                                var self = Kind$Parser$stop$($4237, $4280, $4281);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $4284 = self.idx;\n                                                                        var $4285 = self.code;\n                                                                        var $4286 = self.err;\n                                                                        var $4287 = Parser$Reply$error$($4284, $4285, $4286);\n                                                                        var $4283 = $4287;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $4288 = self.idx;\n                                                                        var $4289 = self.code;\n                                                                        var $4290 = self.val;\n                                                                        var _term$27 = List$fold$($4267, $4282, (_cse$27 => _rest$28 => {\n                                                                            var self = _cse$27;\n                                                                            switch (self._) {\n                                                                                case 'Pair.new':\n                                                                                    var $4293 = self.fst;\n                                                                                    var $4294 = self.snd;\n                                                                                    var _term$31 = Kind$Term$app$($4252, $4293);\n                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$(\"\", (_x$32 => {\n                                                                                        var $4296 = Kind$Term$hol$(Bits$e);\n                                                                                        return $4296;\n                                                                                    })));\n                                                                                    var _term$33 = Kind$Term$app$(_term$32, $4294);\n                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);\n                                                                                    var $4295 = _term$34;\n                                                                                    var $4292 = $4295;\n                                                                                    break;\n                                                                            };\n                                                                            return $4292;\n                                                                        }));\n                                                                        var $4291 = Parser$Reply$value$($4288, $4289, Kind$Term$ori$($4290, _term$27));\n                                                                        var $4283 = $4291;\n                                                                        break;\n                                                                };\n                                                                var $4275 = $4283;\n                                                                break;\n                                                        };\n                                                        var $4268 = $4275;\n                                                        break;\n                                                };\n                                                var $4260 = $4268;\n                                                break;\n                                        };\n                                        var $4253 = $4260;\n                                        break;\n                                };\n                                var $4245 = $4253;\n                                break;\n                        };\n                        var $4238 = $4245;\n                        break;\n                };\n                var $4230 = $4238;\n                break;\n        };\n        return $4230;\n    };\n    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);\n\n    function Bits$tail$(_a$1) {\n        var self = _a$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $4298 = self.slice(0, -1);\n                var $4299 = $4298;\n                var $4297 = $4299;\n                break;\n            case 'i':\n                var $4300 = self.slice(0, -1);\n                var $4301 = $4300;\n                var $4297 = $4301;\n                break;\n            case 'e':\n                var $4302 = Bits$e;\n                var $4297 = $4302;\n                break;\n        };\n        return $4297;\n    };\n    const Bits$tail = x0 => Bits$tail$(x0);\n\n    function Bits$inc$(_a$1) {\n        var self = _a$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $4304 = self.slice(0, -1);\n                var $4305 = ($4304 + '1');\n                var $4303 = $4305;\n                break;\n            case 'i':\n                var $4306 = self.slice(0, -1);\n                var $4307 = (Bits$inc$($4306) + '0');\n                var $4303 = $4307;\n                break;\n            case 'e':\n                var $4308 = (Bits$e + '1');\n                var $4303 = $4308;\n                break;\n        };\n        return $4303;\n    };\n    const Bits$inc = x0 => Bits$inc$(x0);\n    const Nat$to_bits = a0 => (nat_to_bits(a0));\n\n    function Maybe$is_some$(_m$2) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.none':\n                var $4310 = Bool$false;\n                var $4309 = $4310;\n                break;\n            case 'Maybe.some':\n                var $4311 = Bool$true;\n                var $4309 = $4311;\n                break;\n        };\n        return $4309;\n    };\n    const Maybe$is_some = x0 => Maybe$is_some$(x0);\n\n    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {\n        var $4312 = ({\n            _: 'Kind.Term.gol',\n            'name': _name$1,\n            'dref': _dref$2,\n            'verb': _verb$3\n        });\n        return $4312;\n    };\n    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);\n\n    function Kind$Parser$goal$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4314 = self.idx;\n                var $4315 = self.code;\n                var $4316 = self.err;\n                var $4317 = Parser$Reply$error$($4314, $4315, $4316);\n                var $4313 = $4317;\n                break;\n            case 'Parser.Reply.value':\n                var $4318 = self.idx;\n                var $4319 = self.code;\n                var $4320 = self.val;\n                var self = Kind$Parser$text$(\"?\", $4318, $4319);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4322 = self.idx;\n                        var $4323 = self.code;\n                        var $4324 = self.err;\n                        var $4325 = Parser$Reply$error$($4322, $4323, $4324);\n                        var $4321 = $4325;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4326 = self.idx;\n                        var $4327 = self.code;\n                        var self = Kind$Parser$name$($4326, $4327);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4329 = self.idx;\n                                var $4330 = self.code;\n                                var $4331 = self.err;\n                                var $4332 = Parser$Reply$error$($4329, $4330, $4331);\n                                var $4328 = $4332;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4333 = self.idx;\n                                var $4334 = self.code;\n                                var $4335 = self.val;\n                                var self = Parser$many$((_idx$12 => _code$13 => {\n                                    var self = Kind$Parser$text$(\"-\", _idx$12, _code$13);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $4338 = self.idx;\n                                            var $4339 = self.code;\n                                            var $4340 = self.err;\n                                            var $4341 = Parser$Reply$error$($4338, $4339, $4340);\n                                            var $4337 = $4341;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $4342 = self.idx;\n                                            var $4343 = self.code;\n                                            var self = Parser$nat$($4342, $4343);\n                                            switch (self._) {\n                                                case 'Parser.Reply.error':\n                                                    var $4345 = self.idx;\n                                                    var $4346 = self.code;\n                                                    var $4347 = self.err;\n                                                    var $4348 = Parser$Reply$error$($4345, $4346, $4347);\n                                                    var $4344 = $4348;\n                                                    break;\n                                                case 'Parser.Reply.value':\n                                                    var $4349 = self.idx;\n                                                    var $4350 = self.code;\n                                                    var $4351 = self.val;\n                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($4351)))));\n                                                    var $4352 = Parser$Reply$value$($4349, $4350, _bits$20);\n                                                    var $4344 = $4352;\n                                                    break;\n                                            };\n                                            var $4337 = $4344;\n                                            break;\n                                    };\n                                    return $4337;\n                                }))($4333)($4334);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4353 = self.idx;\n                                        var $4354 = self.code;\n                                        var $4355 = self.err;\n                                        var $4356 = Parser$Reply$error$($4353, $4354, $4355);\n                                        var $4336 = $4356;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4357 = self.idx;\n                                        var $4358 = self.code;\n                                        var $4359 = self.val;\n                                        var self = Parser$maybe$(Parser$text(\"-\"), $4357, $4358);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4361 = self.idx;\n                                                var $4362 = self.code;\n                                                var $4363 = self.err;\n                                                var $4364 = Parser$Reply$error$($4361, $4362, $4363);\n                                                var self = $4364;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4365 = self.idx;\n                                                var $4366 = self.code;\n                                                var $4367 = self.val;\n                                                var $4368 = Parser$Reply$value$($4365, $4366, Maybe$is_some$($4367));\n                                                var self = $4368;\n                                                break;\n                                        };\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4369 = self.idx;\n                                                var $4370 = self.code;\n                                                var $4371 = self.err;\n                                                var $4372 = Parser$Reply$error$($4369, $4370, $4371);\n                                                var $4360 = $4372;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4373 = self.idx;\n                                                var $4374 = self.code;\n                                                var $4375 = self.val;\n                                                var self = Kind$Parser$stop$($4320, $4373, $4374);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $4377 = self.idx;\n                                                        var $4378 = self.code;\n                                                        var $4379 = self.err;\n                                                        var $4380 = Parser$Reply$error$($4377, $4378, $4379);\n                                                        var $4376 = $4380;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $4381 = self.idx;\n                                                        var $4382 = self.code;\n                                                        var $4383 = self.val;\n                                                        var $4384 = Parser$Reply$value$($4381, $4382, Kind$Term$ori$($4383, Kind$Term$gol$($4335, $4359, $4375)));\n                                                        var $4376 = $4384;\n                                                        break;\n                                                };\n                                                var $4360 = $4376;\n                                                break;\n                                        };\n                                        var $4336 = $4360;\n                                        break;\n                                };\n                                var $4328 = $4336;\n                                break;\n                        };\n                        var $4321 = $4328;\n                        break;\n                };\n                var $4313 = $4321;\n                break;\n        };\n        return $4313;\n    };\n    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);\n\n    function Kind$Parser$hole$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4386 = self.idx;\n                var $4387 = self.code;\n                var $4388 = self.err;\n                var $4389 = Parser$Reply$error$($4386, $4387, $4388);\n                var $4385 = $4389;\n                break;\n            case 'Parser.Reply.value':\n                var $4390 = self.idx;\n                var $4391 = self.code;\n                var $4392 = self.val;\n                var self = Kind$Parser$text$(\"_\", $4390, $4391);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4394 = self.idx;\n                        var $4395 = self.code;\n                        var $4396 = self.err;\n                        var $4397 = Parser$Reply$error$($4394, $4395, $4396);\n                        var $4393 = $4397;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4398 = self.idx;\n                        var $4399 = self.code;\n                        var self = Kind$Parser$stop$($4392, $4398, $4399);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4401 = self.idx;\n                                var $4402 = self.code;\n                                var $4403 = self.err;\n                                var $4404 = Parser$Reply$error$($4401, $4402, $4403);\n                                var $4400 = $4404;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4405 = self.idx;\n                                var $4406 = self.code;\n                                var $4407 = self.val;\n                                var $4408 = Parser$Reply$value$($4405, $4406, Kind$Term$ori$($4407, Kind$Term$hol$(Bits$e)));\n                                var $4400 = $4408;\n                                break;\n                        };\n                        var $4393 = $4400;\n                        break;\n                };\n                var $4385 = $4393;\n                break;\n        };\n        return $4385;\n    };\n    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);\n\n    function Kind$Parser$float$sign$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $4410 = Parser$Reply$error$(_idx$1, _code$2, \"Expected \\'+\\' or \\'-\\'.\");\n            var $4409 = $4410;\n        } else {\n            var $4411 = self.charCodeAt(0);\n            var $4412 = self.slice(1);\n            var _sidx$5 = Nat$succ$(_idx$1);\n            var self = (($4411 === 43) || ($4411 === 45));\n            if (self) {\n                var $4414 = Parser$Reply$value$(_sidx$5, $4412, $4411);\n                var $4413 = $4414;\n            } else {\n                var $4415 = Parser$Reply$error$(_idx$1, _code$2, \"Expected \\'+\\' ou \\'-\\'.\");\n                var $4413 = $4415;\n            };\n            var $4409 = $4413;\n        };\n        return $4409;\n    };\n    const Kind$Parser$float$sign = x0 => x1 => Kind$Parser$float$sign$(x0, x1);\n\n    function List$any$(_cond$2, _list$3) {\n        var List$any$ = (_cond$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_cond$2, _list$3]\n        });\n        var List$any = _cond$2 => _list$3 => List$any$(_cond$2, _list$3);\n        var arg = [_cond$2, _list$3];\n        while (true) {\n            let [_cond$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $4416 = self.head;\n                        var $4417 = self.tail;\n                        var self = _cond$2($4416);\n                        if (self) {\n                            var $4419 = Bool$true;\n                            var $4418 = $4419;\n                        } else {\n                            var $4420 = List$any$(_cond$2, $4417);\n                            var $4418 = $4420;\n                        };\n                        return $4418;\n                    case 'List.nil':\n                        var $4421 = Bool$false;\n                        return $4421;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$any = x0 => x1 => List$any$(x0, x1);\n\n    function Kind$Parser$float$str_digit$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $4423 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n            var $4422 = $4423;\n        } else {\n            var $4424 = self.charCodeAt(0);\n            var $4425 = self.slice(1);\n            var _sidx$5 = Nat$succ$(_idx$1);\n            var _digits$6 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$nil)))))))))));\n            var self = List$any$(a1 => ($4424 === a1), _digits$6);\n            if (self) {\n                var $4427 = Parser$Reply$value$(_sidx$5, $4425, $4424);\n                var $4426 = $4427;\n            } else {\n                var $4428 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n                var $4426 = $4428;\n            };\n            var $4422 = $4426;\n        };\n        return $4422;\n    };\n    const Kind$Parser$float$str_digit = x0 => x1 => Kind$Parser$float$str_digit$(x0, x1);\n\n    function String$from_list$(_xs$1) {\n        var self = _xs$1;\n        switch (self._) {\n            case 'List.cons':\n                var $4430 = self.head;\n                var $4431 = self.tail;\n                var $4432 = String$cons$($4430, String$from_list$($4431));\n                var $4429 = $4432;\n                break;\n            case 'List.nil':\n                var $4433 = String$nil;\n                var $4429 = $4433;\n                break;\n        };\n        return $4429;\n    };\n    const String$from_list = x0 => String$from_list$(x0);\n\n    function Kind$Parser$float$64$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4435 = self.idx;\n                var $4436 = self.code;\n                var $4437 = self.err;\n                var $4438 = Parser$Reply$error$($4435, $4436, $4437);\n                var $4434 = $4438;\n                break;\n            case 'Parser.Reply.value':\n                var $4439 = self.idx;\n                var $4440 = self.code;\n                var $4441 = self.val;\n                var self = Parser$maybe$(Kind$Parser$float$sign, $4439, $4440);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4443 = self.idx;\n                        var $4444 = self.code;\n                        var $4445 = self.err;\n                        var $4446 = Parser$Reply$error$($4443, $4444, $4445);\n                        var $4442 = $4446;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4447 = self.idx;\n                        var $4448 = self.code;\n                        var $4449 = self.val;\n                        var _sign$9 = Maybe$default$($4449, 43);\n                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4447, $4448);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4451 = self.idx;\n                                var $4452 = self.code;\n                                var $4453 = self.err;\n                                var $4454 = Parser$Reply$error$($4451, $4452, $4453);\n                                var $4450 = $4454;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4455 = self.idx;\n                                var $4456 = self.code;\n                                var $4457 = self.val;\n                                var self = Parser$text$(\".\", $4455, $4456);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4459 = self.idx;\n                                        var $4460 = self.code;\n                                        var $4461 = self.err;\n                                        var $4462 = Parser$Reply$error$($4459, $4460, $4461);\n                                        var $4458 = $4462;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4463 = self.idx;\n                                        var $4464 = self.code;\n                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4463, $4464);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4466 = self.idx;\n                                                var $4467 = self.code;\n                                                var $4468 = self.err;\n                                                var $4469 = Parser$Reply$error$($4466, $4467, $4468);\n                                                var $4465 = $4469;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4470 = self.idx;\n                                                var $4471 = self.code;\n                                                var $4472 = self.val;\n                                                var self = Parser$text$(\"#64\", $4470, $4471);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $4474 = self.idx;\n                                                        var $4475 = self.code;\n                                                        var $4476 = self.err;\n                                                        var $4477 = Parser$Reply$error$($4474, $4475, $4476);\n                                                        var $4473 = $4477;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $4478 = self.idx;\n                                                        var $4479 = self.code;\n                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4457)) + (\".\" + String$from_list$($4472))));\n                                                        var _conv$23 = Kind$Term$ref$(\"F64.parse\");\n                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);\n                                                        var self = Kind$Parser$stop$($4441, $4478, $4479);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $4481 = self.idx;\n                                                                var $4482 = self.code;\n                                                                var $4483 = self.err;\n                                                                var $4484 = Parser$Reply$error$($4481, $4482, $4483);\n                                                                var $4480 = $4484;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $4485 = self.idx;\n                                                                var $4486 = self.code;\n                                                                var $4487 = self.val;\n                                                                var $4488 = Parser$Reply$value$($4485, $4486, Kind$Term$ori$($4487, _term$24));\n                                                                var $4480 = $4488;\n                                                                break;\n                                                        };\n                                                        var $4473 = $4480;\n                                                        break;\n                                                };\n                                                var $4465 = $4473;\n                                                break;\n                                        };\n                                        var $4458 = $4465;\n                                        break;\n                                };\n                                var $4450 = $4458;\n                                break;\n                        };\n                        var $4442 = $4450;\n                        break;\n                };\n                var $4434 = $4442;\n                break;\n        };\n        return $4434;\n    };\n    const Kind$Parser$float$64 = x0 => x1 => Kind$Parser$float$64$(x0, x1);\n\n    function Kind$Parser$float$32$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4490 = self.idx;\n                var $4491 = self.code;\n                var $4492 = self.err;\n                var $4493 = Parser$Reply$error$($4490, $4491, $4492);\n                var $4489 = $4493;\n                break;\n            case 'Parser.Reply.value':\n                var $4494 = self.idx;\n                var $4495 = self.code;\n                var $4496 = self.val;\n                var self = Parser$maybe$(Kind$Parser$float$sign, $4494, $4495);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4498 = self.idx;\n                        var $4499 = self.code;\n                        var $4500 = self.err;\n                        var $4501 = Parser$Reply$error$($4498, $4499, $4500);\n                        var $4497 = $4501;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4502 = self.idx;\n                        var $4503 = self.code;\n                        var $4504 = self.val;\n                        var _sign$9 = Maybe$default$($4504, 43);\n                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4502, $4503);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4506 = self.idx;\n                                var $4507 = self.code;\n                                var $4508 = self.err;\n                                var $4509 = Parser$Reply$error$($4506, $4507, $4508);\n                                var $4505 = $4509;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4510 = self.idx;\n                                var $4511 = self.code;\n                                var $4512 = self.val;\n                                var self = Parser$text$(\".\", $4510, $4511);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4514 = self.idx;\n                                        var $4515 = self.code;\n                                        var $4516 = self.err;\n                                        var $4517 = Parser$Reply$error$($4514, $4515, $4516);\n                                        var $4513 = $4517;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4518 = self.idx;\n                                        var $4519 = self.code;\n                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4518, $4519);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4521 = self.idx;\n                                                var $4522 = self.code;\n                                                var $4523 = self.err;\n                                                var $4524 = Parser$Reply$error$($4521, $4522, $4523);\n                                                var $4520 = $4524;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4525 = self.idx;\n                                                var $4526 = self.code;\n                                                var $4527 = self.val;\n                                                var self = Parser$text$(\"#32\", $4525, $4526);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $4529 = self.idx;\n                                                        var $4530 = self.code;\n                                                        var $4531 = self.err;\n                                                        var $4532 = Parser$Reply$error$($4529, $4530, $4531);\n                                                        var $4528 = $4532;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $4533 = self.idx;\n                                                        var $4534 = self.code;\n                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4512)) + (\".\" + String$from_list$($4527))));\n                                                        var _conv$23 = Kind$Term$ref$(\"F32.parse\");\n                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);\n                                                        var self = Kind$Parser$stop$($4496, $4533, $4534);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $4536 = self.idx;\n                                                                var $4537 = self.code;\n                                                                var $4538 = self.err;\n                                                                var $4539 = Parser$Reply$error$($4536, $4537, $4538);\n                                                                var $4535 = $4539;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $4540 = self.idx;\n                                                                var $4541 = self.code;\n                                                                var $4542 = self.val;\n                                                                var $4543 = Parser$Reply$value$($4540, $4541, Kind$Term$ori$($4542, _term$24));\n                                                                var $4535 = $4543;\n                                                                break;\n                                                        };\n                                                        var $4528 = $4535;\n                                                        break;\n                                                };\n                                                var $4520 = $4528;\n                                                break;\n                                        };\n                                        var $4513 = $4520;\n                                        break;\n                                };\n                                var $4505 = $4513;\n                                break;\n                        };\n                        var $4497 = $4505;\n                        break;\n                };\n                var $4489 = $4497;\n                break;\n        };\n        return $4489;\n    };\n    const Kind$Parser$float$32 = x0 => x1 => Kind$Parser$float$32$(x0, x1);\n\n    function Either$(_A$1, _B$2) {\n        var $4544 = null;\n        return $4544;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $4545 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $4545;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $4546 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $4546;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $4547 = Either$left$(_n$1);\n                    return $4547;\n                } else {\n                    var $4548 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $4550 = Either$right$(Nat$succ$($4548));\n                        var $4549 = $4550;\n                    } else {\n                        var $4551 = (self - 1n);\n                        var $4552 = Nat$sub_rem$($4551, $4548);\n                        var $4549 = $4552;\n                    };\n                    return $4549;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $4553 = self.value;\n                        var $4554 = Nat$div_mod$go$($4553, _m$2, Nat$succ$(_d$3));\n                        return $4554;\n                    case 'Either.right':\n                        var $4555 = Pair$new$(_d$3, _n$1);\n                        return $4555;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $4556 = self.fst;\n                        var $4557 = self.snd;\n                        var self = $4556;\n                        if (self === 0n) {\n                            var $4559 = List$cons$($4557, _res$3);\n                            var $4558 = $4559;\n                        } else {\n                            var $4560 = (self - 1n);\n                            var $4561 = Nat$to_base$go$(_base$1, $4556, List$cons$($4557, _res$3));\n                            var $4558 = $4561;\n                        };\n                        return $4558;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $4562 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $4562;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $4563 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $4563;\n                } else {\n                    var $4564 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $4566 = _r$3;\n                        var $4565 = $4566;\n                    } else {\n                        var $4567 = (self - 1n);\n                        var $4568 = Nat$mod$go$($4567, $4564, Nat$succ$(_r$3));\n                        var $4565 = $4568;\n                    };\n                    return $4565;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $4569 = self.head;\n                        var $4570 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $4572 = Maybe$some$($4569);\n                            var $4571 = $4572;\n                        } else {\n                            var $4573 = (self - 1n);\n                            var $4574 = List$at$($4573, $4570);\n                            var $4571 = $4574;\n                        };\n                        return $4571;\n                    case 'List.nil':\n                        var $4575 = Maybe$none;\n                        return $4575;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $4578 = self.value;\n                    var $4579 = $4578;\n                    var $4577 = $4579;\n                    break;\n                case 'Maybe.none':\n                    var $4580 = 35;\n                    var $4577 = $4580;\n                    break;\n            };\n            var $4576 = $4577;\n        } else {\n            var $4581 = 35;\n            var $4576 = $4581;\n        };\n        return $4576;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $4582 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $4583 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $4583;\n        }));\n        return $4582;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $4584 = Nat$to_string_base$(10n, _n$1);\n        return $4584;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n\n    function Kind$Parser$int_pos$(_idx$1, _code$2) {\n        var self = Parser$text$(\"+\", _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4586 = self.idx;\n                var $4587 = self.code;\n                var $4588 = self.err;\n                var $4589 = Parser$Reply$error$($4586, $4587, $4588);\n                var $4585 = $4589;\n                break;\n            case 'Parser.Reply.value':\n                var $4590 = self.idx;\n                var $4591 = self.code;\n                var self = Parser$many1$(Parser$digit, $4590, $4591);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4593 = self.idx;\n                        var $4594 = self.code;\n                        var $4595 = self.err;\n                        var $4596 = Parser$Reply$error$($4593, $4594, $4595);\n                        var $4592 = $4596;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4597 = self.idx;\n                        var $4598 = self.code;\n                        var $4599 = self.val;\n                        var $4600 = Parser$Reply$value$($4597, $4598, Pair$new$(Bool$true, Nat$from_base$(10n, $4599)));\n                        var $4592 = $4600;\n                        break;\n                };\n                var $4585 = $4592;\n                break;\n        };\n        return $4585;\n    };\n    const Kind$Parser$int_pos = x0 => x1 => Kind$Parser$int_pos$(x0, x1);\n\n    function Kind$Parser$int_neg$(_idx$1, _code$2) {\n        var self = Parser$text$(\"-\", _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4602 = self.idx;\n                var $4603 = self.code;\n                var $4604 = self.err;\n                var $4605 = Parser$Reply$error$($4602, $4603, $4604);\n                var $4601 = $4605;\n                break;\n            case 'Parser.Reply.value':\n                var $4606 = self.idx;\n                var $4607 = self.code;\n                var self = Parser$many1$(Parser$digit, $4606, $4607);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4609 = self.idx;\n                        var $4610 = self.code;\n                        var $4611 = self.err;\n                        var $4612 = Parser$Reply$error$($4609, $4610, $4611);\n                        var $4608 = $4612;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4613 = self.idx;\n                        var $4614 = self.code;\n                        var $4615 = self.val;\n                        var $4616 = Parser$Reply$value$($4613, $4614, Pair$new$(Bool$false, Nat$from_base$(10n, $4615)));\n                        var $4608 = $4616;\n                        break;\n                };\n                var $4601 = $4608;\n                break;\n        };\n        return $4601;\n    };\n    const Kind$Parser$int_neg = x0 => x1 => Kind$Parser$int_neg$(x0, x1);\n\n    function Kind$Parser$int$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4618 = self.idx;\n                var $4619 = self.code;\n                var $4620 = self.err;\n                var $4621 = Parser$Reply$error$($4618, $4619, $4620);\n                var $4617 = $4621;\n                break;\n            case 'Parser.Reply.value':\n                var $4622 = self.idx;\n                var $4623 = self.code;\n                var $4624 = self.val;\n                var self = Kind$Parser$spaces($4622)($4623);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4626 = self.idx;\n                        var $4627 = self.code;\n                        var $4628 = self.err;\n                        var $4629 = Parser$Reply$error$($4626, $4627, $4628);\n                        var $4625 = $4629;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4630 = self.idx;\n                        var $4631 = self.code;\n                        var self = Parser$first_of$(List$cons$(Kind$Parser$int_pos, List$cons$(Kind$Parser$int_neg, List$nil)))($4630)($4631);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4633 = self.idx;\n                                var $4634 = self.code;\n                                var $4635 = self.err;\n                                var $4636 = Parser$Reply$error$($4633, $4634, $4635);\n                                var $4632 = $4636;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4637 = self.idx;\n                                var $4638 = self.code;\n                                var $4639 = self.val;\n                                var self = $4639;\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $4641 = self.fst;\n                                        var $4642 = self.snd;\n                                        var _ret$14 = Kind$Term$ref$(\"Int.from_nat\");\n                                        var _ret$15 = Kind$Term$app$(_ret$14, Kind$Term$nat$($4642));\n                                        var self = $4641;\n                                        if (self) {\n                                            var $4644 = _ret$15;\n                                            var $4643 = $4644;\n                                        } else {\n                                            var _inv$16 = Kind$Term$ref$(\"Int.neg\");\n                                            var $4645 = Kind$Term$app$(_inv$16, _ret$15);\n                                            var $4643 = $4645;\n                                        };\n                                        var _term$12 = $4643;\n                                        break;\n                                };\n                                var self = Kind$Parser$stop$($4624, $4637, $4638);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4646 = self.idx;\n                                        var $4647 = self.code;\n                                        var $4648 = self.err;\n                                        var $4649 = Parser$Reply$error$($4646, $4647, $4648);\n                                        var $4640 = $4649;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4650 = self.idx;\n                                        var $4651 = self.code;\n                                        var $4652 = self.val;\n                                        var $4653 = Parser$Reply$value$($4650, $4651, Kind$Term$ori$($4652, _term$12));\n                                        var $4640 = $4653;\n                                        break;\n                                };\n                                var $4632 = $4640;\n                                break;\n                        };\n                        var $4625 = $4632;\n                        break;\n                };\n                var $4617 = $4625;\n                break;\n        };\n        return $4617;\n    };\n    const Kind$Parser$int = x0 => x1 => Kind$Parser$int$(x0, x1);\n\n    function Kind$Parser$machine_integer$signed$(_size$1) {\n        var _size_str$2 = Nat$show$(_size$1);\n        var $4654 = (_idx$3 => _code$4 => {\n            var self = Kind$Parser$init$(_idx$3, _code$4);\n            switch (self._) {\n                case 'Parser.Reply.error':\n                    var $4656 = self.idx;\n                    var $4657 = self.code;\n                    var $4658 = self.err;\n                    var $4659 = Parser$Reply$error$($4656, $4657, $4658);\n                    var $4655 = $4659;\n                    break;\n                case 'Parser.Reply.value':\n                    var $4660 = self.idx;\n                    var $4661 = self.code;\n                    var $4662 = self.val;\n                    var self = Kind$Parser$spaces($4660)($4661);\n                    switch (self._) {\n                        case 'Parser.Reply.error':\n                            var $4664 = self.idx;\n                            var $4665 = self.code;\n                            var $4666 = self.err;\n                            var $4667 = Parser$Reply$error$($4664, $4665, $4666);\n                            var $4663 = $4667;\n                            break;\n                        case 'Parser.Reply.value':\n                            var $4668 = self.idx;\n                            var $4669 = self.code;\n                            var self = Kind$Parser$int$($4668, $4669);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $4671 = self.idx;\n                                    var $4672 = self.code;\n                                    var $4673 = self.err;\n                                    var $4674 = Parser$Reply$error$($4671, $4672, $4673);\n                                    var $4670 = $4674;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $4675 = self.idx;\n                                    var $4676 = self.code;\n                                    var $4677 = self.val;\n                                    var self = Parser$text$((\"#\" + _size_str$2), $4675, $4676);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $4679 = self.idx;\n                                            var $4680 = self.code;\n                                            var $4681 = self.err;\n                                            var $4682 = Parser$Reply$error$($4679, $4680, $4681);\n                                            var $4678 = $4682;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $4683 = self.idx;\n                                            var $4684 = self.code;\n                                            var _term$17 = Kind$Term$ref$((\"Int.to_i\" + _size_str$2));\n                                            var _term$18 = Kind$Term$app$(_term$17, $4677);\n                                            var self = Kind$Parser$stop$($4662, $4683, $4684);\n                                            switch (self._) {\n                                                case 'Parser.Reply.error':\n                                                    var $4686 = self.idx;\n                                                    var $4687 = self.code;\n                                                    var $4688 = self.err;\n                                                    var $4689 = Parser$Reply$error$($4686, $4687, $4688);\n                                                    var $4685 = $4689;\n                                                    break;\n                                                case 'Parser.Reply.value':\n                                                    var $4690 = self.idx;\n                                                    var $4691 = self.code;\n                                                    var $4692 = self.val;\n                                                    var $4693 = Parser$Reply$value$($4690, $4691, Kind$Term$ori$($4692, _term$18));\n                                                    var $4685 = $4693;\n                                                    break;\n                                            };\n                                            var $4678 = $4685;\n                                            break;\n                                    };\n                                    var $4670 = $4678;\n                                    break;\n                            };\n                            var $4663 = $4670;\n                            break;\n                    };\n                    var $4655 = $4663;\n                    break;\n            };\n            return $4655;\n        });\n        return $4654;\n    };\n    const Kind$Parser$machine_integer$signed = x0 => Kind$Parser$machine_integer$signed$(x0);\n\n    function Parser$hex_digit$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $4695 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n            var $4694 = $4695;\n        } else {\n            var $4696 = self.charCodeAt(0);\n            var $4697 = self.slice(1);\n            var _sidx$5 = Nat$succ$(_idx$1);\n            var self = ($4696 === 48);\n            if (self) {\n                var $4699 = Parser$Reply$value$(_sidx$5, $4697, 0n);\n                var $4698 = $4699;\n            } else {\n                var self = ($4696 === 49);\n                if (self) {\n                    var $4701 = Parser$Reply$value$(_sidx$5, $4697, 1n);\n                    var $4700 = $4701;\n                } else {\n                    var self = ($4696 === 50);\n                    if (self) {\n                        var $4703 = Parser$Reply$value$(_sidx$5, $4697, 2n);\n                        var $4702 = $4703;\n                    } else {\n                        var self = ($4696 === 51);\n                        if (self) {\n                            var $4705 = Parser$Reply$value$(_sidx$5, $4697, 3n);\n                            var $4704 = $4705;\n                        } else {\n                            var self = ($4696 === 52);\n                            if (self) {\n                                var $4707 = Parser$Reply$value$(_sidx$5, $4697, 4n);\n                                var $4706 = $4707;\n                            } else {\n                                var self = ($4696 === 53);\n                                if (self) {\n                                    var $4709 = Parser$Reply$value$(_sidx$5, $4697, 5n);\n                                    var $4708 = $4709;\n                                } else {\n                                    var self = ($4696 === 54);\n                                    if (self) {\n                                        var $4711 = Parser$Reply$value$(_sidx$5, $4697, 6n);\n                                        var $4710 = $4711;\n                                    } else {\n                                        var self = ($4696 === 55);\n                                        if (self) {\n                                            var $4713 = Parser$Reply$value$(_sidx$5, $4697, 7n);\n                                            var $4712 = $4713;\n                                        } else {\n                                            var self = ($4696 === 56);\n                                            if (self) {\n                                                var $4715 = Parser$Reply$value$(_sidx$5, $4697, 8n);\n                                                var $4714 = $4715;\n                                            } else {\n                                                var self = ($4696 === 57);\n                                                if (self) {\n                                                    var $4717 = Parser$Reply$value$(_sidx$5, $4697, 9n);\n                                                    var $4716 = $4717;\n                                                } else {\n                                                    var self = ($4696 === 97);\n                                                    if (self) {\n                                                        var $4719 = Parser$Reply$value$(_sidx$5, $4697, 10n);\n                                                        var $4718 = $4719;\n                                                    } else {\n                                                        var self = ($4696 === 98);\n                                                        if (self) {\n                                                            var $4721 = Parser$Reply$value$(_sidx$5, $4697, 11n);\n                                                            var $4720 = $4721;\n                                                        } else {\n                                                            var self = ($4696 === 99);\n                                                            if (self) {\n                                                                var $4723 = Parser$Reply$value$(_sidx$5, $4697, 12n);\n                                                                var $4722 = $4723;\n                                                            } else {\n                                                                var self = ($4696 === 100);\n                                                                if (self) {\n                                                                    var $4725 = Parser$Reply$value$(_sidx$5, $4697, 13n);\n                                                                    var $4724 = $4725;\n                                                                } else {\n                                                                    var self = ($4696 === 101);\n                                                                    if (self) {\n                                                                        var $4727 = Parser$Reply$value$(_sidx$5, $4697, 14n);\n                                                                        var $4726 = $4727;\n                                                                    } else {\n                                                                        var self = ($4696 === 102);\n                                                                        if (self) {\n                                                                            var $4729 = Parser$Reply$value$(_sidx$5, $4697, 15n);\n                                                                            var $4728 = $4729;\n                                                                        } else {\n                                                                            var self = ($4696 === 65);\n                                                                            if (self) {\n                                                                                var $4731 = Parser$Reply$value$(_sidx$5, $4697, 10n);\n                                                                                var $4730 = $4731;\n                                                                            } else {\n                                                                                var self = ($4696 === 66);\n                                                                                if (self) {\n                                                                                    var $4733 = Parser$Reply$value$(_sidx$5, $4697, 11n);\n                                                                                    var $4732 = $4733;\n                                                                                } else {\n                                                                                    var self = ($4696 === 67);\n                                                                                    if (self) {\n                                                                                        var $4735 = Parser$Reply$value$(_sidx$5, $4697, 12n);\n                                                                                        var $4734 = $4735;\n                                                                                    } else {\n                                                                                        var self = ($4696 === 68);\n                                                                                        if (self) {\n                                                                                            var $4737 = Parser$Reply$value$(_sidx$5, $4697, 13n);\n                                                                                            var $4736 = $4737;\n                                                                                        } else {\n                                                                                            var self = ($4696 === 69);\n                                                                                            if (self) {\n                                                                                                var $4739 = Parser$Reply$value$(_sidx$5, $4697, 14n);\n                                                                                                var $4738 = $4739;\n                                                                                            } else {\n                                                                                                var self = ($4696 === 70);\n                                                                                                if (self) {\n                                                                                                    var $4741 = Parser$Reply$value$(_sidx$5, $4697, 15n);\n                                                                                                    var $4740 = $4741;\n                                                                                                } else {\n                                                                                                    var $4742 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n                                                                                                    var $4740 = $4742;\n                                                                                                };\n                                                                                                var $4738 = $4740;\n                                                                                            };\n                                                                                            var $4736 = $4738;\n                                                                                        };\n                                                                                        var $4734 = $4736;\n                                                                                    };\n                                                                                    var $4732 = $4734;\n                                                                                };\n                                                                                var $4730 = $4732;\n                                                                            };\n                                                                            var $4728 = $4730;\n                                                                        };\n                                                                        var $4726 = $4728;\n                                                                    };\n                                                                    var $4724 = $4726;\n                                                                };\n                                                                var $4722 = $4724;\n                                                            };\n                                                            var $4720 = $4722;\n                                                        };\n                                                        var $4718 = $4720;\n                                                    };\n                                                    var $4716 = $4718;\n                                                };\n                                                var $4714 = $4716;\n                                            };\n                                            var $4712 = $4714;\n                                        };\n                                        var $4710 = $4712;\n                                    };\n                                    var $4708 = $4710;\n                                };\n                                var $4706 = $4708;\n                            };\n                            var $4704 = $4706;\n                        };\n                        var $4702 = $4704;\n                    };\n                    var $4700 = $4702;\n                };\n                var $4698 = $4700;\n            };\n            var $4694 = $4698;\n        };\n        return $4694;\n    };\n    const Parser$hex_digit = x0 => x1 => Parser$hex_digit$(x0, x1);\n\n    function Parser$hex_nat$(_idx$1, _code$2) {\n        var self = Parser$text$(\"0x\", _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4744 = self.idx;\n                var $4745 = self.code;\n                var $4746 = self.err;\n                var $4747 = Parser$Reply$error$($4744, $4745, $4746);\n                var $4743 = $4747;\n                break;\n            case 'Parser.Reply.value':\n                var $4748 = self.idx;\n                var $4749 = self.code;\n                var self = Parser$many1$(Parser$hex_digit, $4748, $4749);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4751 = self.idx;\n                        var $4752 = self.code;\n                        var $4753 = self.err;\n                        var $4754 = Parser$Reply$error$($4751, $4752, $4753);\n                        var $4750 = $4754;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4755 = self.idx;\n                        var $4756 = self.code;\n                        var $4757 = self.val;\n                        var $4758 = Parser$Reply$value$($4755, $4756, Nat$from_base$(16n, $4757));\n                        var $4750 = $4758;\n                        break;\n                };\n                var $4743 = $4750;\n                break;\n        };\n        return $4743;\n    };\n    const Parser$hex_nat = x0 => x1 => Parser$hex_nat$(x0, x1);\n\n    function Kind$Parser$nat$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4760 = self.idx;\n                var $4761 = self.code;\n                var $4762 = self.err;\n                var $4763 = Parser$Reply$error$($4760, $4761, $4762);\n                var $4759 = $4763;\n                break;\n            case 'Parser.Reply.value':\n                var $4764 = self.idx;\n                var $4765 = self.code;\n                var $4766 = self.val;\n                var self = Kind$Parser$spaces($4764)($4765);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4768 = self.idx;\n                        var $4769 = self.code;\n                        var $4770 = self.err;\n                        var $4771 = Parser$Reply$error$($4768, $4769, $4770);\n                        var $4767 = $4771;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4772 = self.idx;\n                        var $4773 = self.code;\n                        var self = Parser$first_of$(List$cons$(Parser$hex_nat, List$cons$(Parser$nat, List$nil)))($4772)($4773);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4775 = self.idx;\n                                var $4776 = self.code;\n                                var $4777 = self.err;\n                                var $4778 = Parser$Reply$error$($4775, $4776, $4777);\n                                var $4774 = $4778;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4779 = self.idx;\n                                var $4780 = self.code;\n                                var $4781 = self.val;\n                                var self = Kind$Parser$stop$($4766, $4779, $4780);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4783 = self.idx;\n                                        var $4784 = self.code;\n                                        var $4785 = self.err;\n                                        var $4786 = Parser$Reply$error$($4783, $4784, $4785);\n                                        var $4782 = $4786;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4787 = self.idx;\n                                        var $4788 = self.code;\n                                        var $4789 = self.val;\n                                        var $4790 = Parser$Reply$value$($4787, $4788, Kind$Term$ori$($4789, Kind$Term$nat$($4781)));\n                                        var $4782 = $4790;\n                                        break;\n                                };\n                                var $4774 = $4782;\n                                break;\n                        };\n                        var $4767 = $4774;\n                        break;\n                };\n                var $4759 = $4767;\n                break;\n        };\n        return $4759;\n    };\n    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);\n\n    function Kind$Parser$machine_integer$unsigned$(_size$1) {\n        var _size_str$2 = Nat$show$(_size$1);\n        var $4791 = (_idx$3 => _code$4 => {\n            var self = Kind$Parser$init$(_idx$3, _code$4);\n            switch (self._) {\n                case 'Parser.Reply.error':\n                    var $4793 = self.idx;\n                    var $4794 = self.code;\n                    var $4795 = self.err;\n                    var $4796 = Parser$Reply$error$($4793, $4794, $4795);\n                    var $4792 = $4796;\n                    break;\n                case 'Parser.Reply.value':\n                    var $4797 = self.idx;\n                    var $4798 = self.code;\n                    var $4799 = self.val;\n                    var self = Kind$Parser$spaces($4797)($4798);\n                    switch (self._) {\n                        case 'Parser.Reply.error':\n                            var $4801 = self.idx;\n                            var $4802 = self.code;\n                            var $4803 = self.err;\n                            var $4804 = Parser$Reply$error$($4801, $4802, $4803);\n                            var $4800 = $4804;\n                            break;\n                        case 'Parser.Reply.value':\n                            var $4805 = self.idx;\n                            var $4806 = self.code;\n                            var self = Kind$Parser$nat$($4805, $4806);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $4808 = self.idx;\n                                    var $4809 = self.code;\n                                    var $4810 = self.err;\n                                    var $4811 = Parser$Reply$error$($4808, $4809, $4810);\n                                    var $4807 = $4811;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $4812 = self.idx;\n                                    var $4813 = self.code;\n                                    var $4814 = self.val;\n                                    var self = Parser$text$((\"#\" + Nat$show$(_size$1)), $4812, $4813);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $4816 = self.idx;\n                                            var $4817 = self.code;\n                                            var $4818 = self.err;\n                                            var $4819 = Parser$Reply$error$($4816, $4817, $4818);\n                                            var $4815 = $4819;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $4820 = self.idx;\n                                            var $4821 = self.code;\n                                            var _term$17 = Kind$Term$ref$((\"Nat.to_u\" + Nat$show$(_size$1)));\n                                            var _term$18 = Kind$Term$app$(_term$17, $4814);\n                                            var self = Kind$Parser$stop$($4799, $4820, $4821);\n                                            switch (self._) {\n                                                case 'Parser.Reply.error':\n                                                    var $4823 = self.idx;\n                                                    var $4824 = self.code;\n                                                    var $4825 = self.err;\n                                                    var $4826 = Parser$Reply$error$($4823, $4824, $4825);\n                                                    var $4822 = $4826;\n                                                    break;\n                                                case 'Parser.Reply.value':\n                                                    var $4827 = self.idx;\n                                                    var $4828 = self.code;\n                                                    var $4829 = self.val;\n                                                    var $4830 = Parser$Reply$value$($4827, $4828, Kind$Term$ori$($4829, _term$18));\n                                                    var $4822 = $4830;\n                                                    break;\n                                            };\n                                            var $4815 = $4822;\n                                            break;\n                                    };\n                                    var $4807 = $4815;\n                                    break;\n                            };\n                            var $4800 = $4807;\n                            break;\n                    };\n                    var $4792 = $4800;\n                    break;\n            };\n            return $4792;\n        });\n        return $4791;\n    };\n    const Kind$Parser$machine_integer$unsigned = x0 => Kind$Parser$machine_integer$unsigned$(x0);\n\n    function Kind$Parser$u64$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4832 = self.idx;\n                var $4833 = self.code;\n                var $4834 = self.err;\n                var $4835 = Parser$Reply$error$($4832, $4833, $4834);\n                var $4831 = $4835;\n                break;\n            case 'Parser.Reply.value':\n                var $4836 = self.idx;\n                var $4837 = self.code;\n                var $4838 = self.val;\n                var self = Kind$Parser$spaces($4836)($4837);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4840 = self.idx;\n                        var $4841 = self.code;\n                        var $4842 = self.err;\n                        var $4843 = Parser$Reply$error$($4840, $4841, $4842);\n                        var $4839 = $4843;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4844 = self.idx;\n                        var $4845 = self.code;\n                        var self = Parser$nat$($4844, $4845);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4847 = self.idx;\n                                var $4848 = self.code;\n                                var $4849 = self.err;\n                                var $4850 = Parser$Reply$error$($4847, $4848, $4849);\n                                var $4846 = $4850;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4851 = self.idx;\n                                var $4852 = self.code;\n                                var $4853 = self.val;\n                                var self = Parser$text$(\"l\", $4851, $4852);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4855 = self.idx;\n                                        var $4856 = self.code;\n                                        var $4857 = self.err;\n                                        var $4858 = Parser$Reply$error$($4855, $4856, $4857);\n                                        var $4854 = $4858;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4859 = self.idx;\n                                        var $4860 = self.code;\n                                        var _term$15 = Kind$Term$ref$(\"Nat.to_u64\");\n                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4853));\n                                        var self = Kind$Parser$stop$($4838, $4859, $4860);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4862 = self.idx;\n                                                var $4863 = self.code;\n                                                var $4864 = self.err;\n                                                var $4865 = Parser$Reply$error$($4862, $4863, $4864);\n                                                var $4861 = $4865;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4866 = self.idx;\n                                                var $4867 = self.code;\n                                                var $4868 = self.val;\n                                                var $4869 = Parser$Reply$value$($4866, $4867, Kind$Term$ori$($4868, _term$16));\n                                                var $4861 = $4869;\n                                                break;\n                                        };\n                                        var $4854 = $4861;\n                                        break;\n                                };\n                                var $4846 = $4854;\n                                break;\n                        };\n                        var $4839 = $4846;\n                        break;\n                };\n                var $4831 = $4839;\n                break;\n        };\n        return $4831;\n    };\n    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);\n\n    function Kind$Parser$u32$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4871 = self.idx;\n                var $4872 = self.code;\n                var $4873 = self.err;\n                var $4874 = Parser$Reply$error$($4871, $4872, $4873);\n                var $4870 = $4874;\n                break;\n            case 'Parser.Reply.value':\n                var $4875 = self.idx;\n                var $4876 = self.code;\n                var $4877 = self.val;\n                var self = Kind$Parser$spaces($4875)($4876);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4879 = self.idx;\n                        var $4880 = self.code;\n                        var $4881 = self.err;\n                        var $4882 = Parser$Reply$error$($4879, $4880, $4881);\n                        var $4878 = $4882;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4883 = self.idx;\n                        var $4884 = self.code;\n                        var self = Parser$nat$($4883, $4884);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4886 = self.idx;\n                                var $4887 = self.code;\n                                var $4888 = self.err;\n                                var $4889 = Parser$Reply$error$($4886, $4887, $4888);\n                                var $4885 = $4889;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4890 = self.idx;\n                                var $4891 = self.code;\n                                var $4892 = self.val;\n                                var self = Parser$text$(\"u\", $4890, $4891);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4894 = self.idx;\n                                        var $4895 = self.code;\n                                        var $4896 = self.err;\n                                        var $4897 = Parser$Reply$error$($4894, $4895, $4896);\n                                        var $4893 = $4897;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4898 = self.idx;\n                                        var $4899 = self.code;\n                                        var _term$15 = Kind$Term$ref$(\"Nat.to_u32\");\n                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4892));\n                                        var self = Kind$Parser$stop$($4877, $4898, $4899);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4901 = self.idx;\n                                                var $4902 = self.code;\n                                                var $4903 = self.err;\n                                                var $4904 = Parser$Reply$error$($4901, $4902, $4903);\n                                                var $4900 = $4904;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4905 = self.idx;\n                                                var $4906 = self.code;\n                                                var $4907 = self.val;\n                                                var $4908 = Parser$Reply$value$($4905, $4906, Kind$Term$ori$($4907, _term$16));\n                                                var $4900 = $4908;\n                                                break;\n                                        };\n                                        var $4893 = $4900;\n                                        break;\n                                };\n                                var $4885 = $4893;\n                                break;\n                        };\n                        var $4878 = $4885;\n                        break;\n                };\n                var $4870 = $4878;\n                break;\n        };\n        return $4870;\n    };\n    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);\n\n    function Kind$Parser$u16$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4910 = self.idx;\n                var $4911 = self.code;\n                var $4912 = self.err;\n                var $4913 = Parser$Reply$error$($4910, $4911, $4912);\n                var $4909 = $4913;\n                break;\n            case 'Parser.Reply.value':\n                var $4914 = self.idx;\n                var $4915 = self.code;\n                var $4916 = self.val;\n                var self = Kind$Parser$spaces($4914)($4915);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4918 = self.idx;\n                        var $4919 = self.code;\n                        var $4920 = self.err;\n                        var $4921 = Parser$Reply$error$($4918, $4919, $4920);\n                        var $4917 = $4921;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4922 = self.idx;\n                        var $4923 = self.code;\n                        var self = Parser$nat$($4922, $4923);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4925 = self.idx;\n                                var $4926 = self.code;\n                                var $4927 = self.err;\n                                var $4928 = Parser$Reply$error$($4925, $4926, $4927);\n                                var $4924 = $4928;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4929 = self.idx;\n                                var $4930 = self.code;\n                                var $4931 = self.val;\n                                var self = Parser$text$(\"s\", $4929, $4930);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4933 = self.idx;\n                                        var $4934 = self.code;\n                                        var $4935 = self.err;\n                                        var $4936 = Parser$Reply$error$($4933, $4934, $4935);\n                                        var $4932 = $4936;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4937 = self.idx;\n                                        var $4938 = self.code;\n                                        var _term$15 = Kind$Term$ref$(\"Nat.to_u16\");\n                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4931));\n                                        var self = Kind$Parser$stop$($4916, $4937, $4938);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4940 = self.idx;\n                                                var $4941 = self.code;\n                                                var $4942 = self.err;\n                                                var $4943 = Parser$Reply$error$($4940, $4941, $4942);\n                                                var $4939 = $4943;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4944 = self.idx;\n                                                var $4945 = self.code;\n                                                var $4946 = self.val;\n                                                var $4947 = Parser$Reply$value$($4944, $4945, Kind$Term$ori$($4946, _term$16));\n                                                var $4939 = $4947;\n                                                break;\n                                        };\n                                        var $4932 = $4939;\n                                        break;\n                                };\n                                var $4924 = $4932;\n                                break;\n                        };\n                        var $4917 = $4924;\n                        break;\n                };\n                var $4909 = $4917;\n                break;\n        };\n        return $4909;\n    };\n    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);\n\n    function Kind$Parser$u8$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4949 = self.idx;\n                var $4950 = self.code;\n                var $4951 = self.err;\n                var $4952 = Parser$Reply$error$($4949, $4950, $4951);\n                var $4948 = $4952;\n                break;\n            case 'Parser.Reply.value':\n                var $4953 = self.idx;\n                var $4954 = self.code;\n                var $4955 = self.val;\n                var self = Kind$Parser$spaces($4953)($4954);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4957 = self.idx;\n                        var $4958 = self.code;\n                        var $4959 = self.err;\n                        var $4960 = Parser$Reply$error$($4957, $4958, $4959);\n                        var $4956 = $4960;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $4961 = self.idx;\n                        var $4962 = self.code;\n                        var self = Parser$nat$($4961, $4962);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $4964 = self.idx;\n                                var $4965 = self.code;\n                                var $4966 = self.err;\n                                var $4967 = Parser$Reply$error$($4964, $4965, $4966);\n                                var $4963 = $4967;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $4968 = self.idx;\n                                var $4969 = self.code;\n                                var $4970 = self.val;\n                                var self = Parser$text$(\"b\", $4968, $4969);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $4972 = self.idx;\n                                        var $4973 = self.code;\n                                        var $4974 = self.err;\n                                        var $4975 = Parser$Reply$error$($4972, $4973, $4974);\n                                        var $4971 = $4975;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $4976 = self.idx;\n                                        var $4977 = self.code;\n                                        var _term$15 = Kind$Term$ref$(\"Nat.to_u8\");\n                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4970));\n                                        var self = Kind$Parser$stop$($4955, $4976, $4977);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $4979 = self.idx;\n                                                var $4980 = self.code;\n                                                var $4981 = self.err;\n                                                var $4982 = Parser$Reply$error$($4979, $4980, $4981);\n                                                var $4978 = $4982;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $4983 = self.idx;\n                                                var $4984 = self.code;\n                                                var $4985 = self.val;\n                                                var $4986 = Parser$Reply$value$($4983, $4984, Kind$Term$ori$($4985, _term$16));\n                                                var $4978 = $4986;\n                                                break;\n                                        };\n                                        var $4971 = $4978;\n                                        break;\n                                };\n                                var $4963 = $4971;\n                                break;\n                        };\n                        var $4956 = $4963;\n                        break;\n                };\n                var $4948 = $4956;\n                break;\n        };\n        return $4948;\n    };\n    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);\n\n    function Kind$Parser$reference$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $4988 = self.idx;\n                var $4989 = self.code;\n                var $4990 = self.err;\n                var $4991 = Parser$Reply$error$($4988, $4989, $4990);\n                var $4987 = $4991;\n                break;\n            case 'Parser.Reply.value':\n                var $4992 = self.idx;\n                var $4993 = self.code;\n                var $4994 = self.val;\n                var self = Kind$Parser$name1$($4992, $4993);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $4996 = self.idx;\n                        var $4997 = self.code;\n                        var $4998 = self.err;\n                        var $4999 = Parser$Reply$error$($4996, $4997, $4998);\n                        var $4995 = $4999;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5000 = self.idx;\n                        var $5001 = self.code;\n                        var $5002 = self.val;\n                        var self = Kind$Parser$stop$($4994, $5000, $5001);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5004 = self.idx;\n                                var $5005 = self.code;\n                                var $5006 = self.err;\n                                var $5007 = Parser$Reply$error$($5004, $5005, $5006);\n                                var $5003 = $5007;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5008 = self.idx;\n                                var $5009 = self.code;\n                                var $5010 = self.val;\n                                var self = ($5002 === \"case\");\n                                if (self) {\n                                    var $5012 = Parser$fail(\"Reserved keyword.\");\n                                    var $5011 = $5012;\n                                } else {\n                                    var self = ($5002 === \"do\");\n                                    if (self) {\n                                        var $5014 = Parser$fail(\"Reserved keyword.\");\n                                        var $5013 = $5014;\n                                    } else {\n                                        var self = ($5002 === \"if\");\n                                        if (self) {\n                                            var $5016 = Parser$fail(\"Reserved keyword.\");\n                                            var $5015 = $5016;\n                                        } else {\n                                            var self = ($5002 === \"with\");\n                                            if (self) {\n                                                var $5018 = Parser$fail(\"Reserved keyword.\");\n                                                var $5017 = $5018;\n                                            } else {\n                                                var self = ($5002 === \"let\");\n                                                if (self) {\n                                                    var $5020 = Parser$fail(\"Reserved keyword.\");\n                                                    var $5019 = $5020;\n                                                } else {\n                                                    var self = ($5002 === \"def\");\n                                                    if (self) {\n                                                        var $5022 = Parser$fail(\"Reserved keyword.\");\n                                                        var $5021 = $5022;\n                                                    } else {\n                                                        var self = ($5002 === \"Type\");\n                                                        if (self) {\n                                                            var $5024 = (_idx$12 => _code$13 => {\n                                                                var $5025 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$typ));\n                                                                return $5025;\n                                                            });\n                                                            var $5023 = $5024;\n                                                        } else {\n                                                            var self = ($5002 === \"true\");\n                                                            if (self) {\n                                                                var $5027 = (_idx$12 => _code$13 => {\n                                                                    var $5028 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$ref$(\"Bool.true\")));\n                                                                    return $5028;\n                                                                });\n                                                                var $5026 = $5027;\n                                                            } else {\n                                                                var self = ($5002 === \"false\");\n                                                                if (self) {\n                                                                    var $5030 = (_idx$12 => _code$13 => {\n                                                                        var $5031 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$ref$(\"Bool.false\")));\n                                                                        return $5031;\n                                                                    });\n                                                                    var $5029 = $5030;\n                                                                } else {\n                                                                    var self = ($5002 === \"unit\");\n                                                                    if (self) {\n                                                                        var $5033 = (_idx$12 => _code$13 => {\n                                                                            var $5034 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$ref$(\"Unit.new\")));\n                                                                            return $5034;\n                                                                        });\n                                                                        var $5032 = $5033;\n                                                                    } else {\n                                                                        var self = ($5002 === \"none\");\n                                                                        if (self) {\n                                                                            var _term$12 = Kind$Term$ref$(\"Maybe.none\");\n                                                                            var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));\n                                                                            var $5036 = (_idx$14 => _code$15 => {\n                                                                                var $5037 = Parser$Reply$value$(_idx$14, _code$15, Kind$Term$ori$($5010, _term$13));\n                                                                                return $5037;\n                                                                            });\n                                                                            var $5035 = $5036;\n                                                                        } else {\n                                                                            var self = ($5002 === \"refl\");\n                                                                            if (self) {\n                                                                                var _term$12 = Kind$Term$ref$(\"Equal.refl\");\n                                                                                var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));\n                                                                                var _term$14 = Kind$Term$app$(_term$13, Kind$Term$hol$(Bits$e));\n                                                                                var $5039 = (_idx$15 => _code$16 => {\n                                                                                    var $5040 = Parser$Reply$value$(_idx$15, _code$16, Kind$Term$ori$($5010, _term$14));\n                                                                                    return $5040;\n                                                                                });\n                                                                                var $5038 = $5039;\n                                                                            } else {\n                                                                                var $5041 = (_idx$12 => _code$13 => {\n                                                                                    var $5042 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$ref$($5002)));\n                                                                                    return $5042;\n                                                                                });\n                                                                                var $5038 = $5041;\n                                                                            };\n                                                                            var $5035 = $5038;\n                                                                        };\n                                                                        var $5032 = $5035;\n                                                                    };\n                                                                    var $5029 = $5032;\n                                                                };\n                                                                var $5026 = $5029;\n                                                            };\n                                                            var $5023 = $5026;\n                                                        };\n                                                        var $5021 = $5023;\n                                                    };\n                                                    var $5019 = $5021;\n                                                };\n                                                var $5017 = $5019;\n                                            };\n                                            var $5015 = $5017;\n                                        };\n                                        var $5013 = $5015;\n                                    };\n                                    var $5011 = $5013;\n                                };\n                                var $5011 = $5011($5008)($5009);\n                                var $5003 = $5011;\n                                break;\n                        };\n                        var $4995 = $5003;\n                        break;\n                };\n                var $4987 = $4995;\n                break;\n        };\n        return $4987;\n    };\n    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {\n        var self = Parser$text$(\"(\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5044 = self.idx;\n                var $5045 = self.code;\n                var $5046 = self.err;\n                var $5047 = Parser$Reply$error$($5044, $5045, $5046);\n                var $5043 = $5047;\n                break;\n            case 'Parser.Reply.value':\n                var $5048 = self.idx;\n                var $5049 = self.code;\n                var self = Parser$until1$(Kind$Parser$text(\")\"), Kind$Parser$item(Kind$Parser$term), $5048, $5049);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5051 = self.idx;\n                        var $5052 = self.code;\n                        var $5053 = self.err;\n                        var $5054 = Parser$Reply$error$($5051, $5052, $5053);\n                        var $5050 = $5054;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5055 = self.idx;\n                        var $5056 = self.code;\n                        var $5057 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5055, $5056);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5059 = self.idx;\n                                var $5060 = self.code;\n                                var $5061 = self.err;\n                                var $5062 = Parser$Reply$error$($5059, $5060, $5061);\n                                var $5058 = $5062;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5063 = self.idx;\n                                var $5064 = self.code;\n                                var $5065 = self.val;\n                                var _expr$14 = (() => {\n                                    var $5068 = _func$2;\n                                    var $5069 = $5057;\n                                    let _f$15 = $5068;\n                                    let _x$14;\n                                    while ($5069._ === 'List.cons') {\n                                        _x$14 = $5069.head;\n                                        var $5068 = Kind$Term$app$(_f$15, _x$14);\n                                        _f$15 = $5068;\n                                        $5069 = $5069.tail;\n                                    }\n                                    return _f$15;\n                                })();\n                                var $5066 = Parser$Reply$value$($5063, $5064, Kind$Term$ori$($5065, _expr$14));\n                                var $5058 = $5066;\n                                break;\n                        };\n                        var $5050 = $5058;\n                        break;\n                };\n                var $5043 = $5050;\n                break;\n        };\n        return $5043;\n    };\n    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);\n    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(\" \"), List$cons$(Parser$text(\"\\u{a}\"), List$nil))));\n\n    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {\n        var self = Parser$spaces(_idx$2)(_code$3);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5071 = self.idx;\n                var $5072 = self.code;\n                var $5073 = self.err;\n                var $5074 = Parser$Reply$error$($5071, $5072, $5073);\n                var $5070 = $5074;\n                break;\n            case 'Parser.Reply.value':\n                var $5075 = self.idx;\n                var $5076 = self.code;\n                var $5077 = Parser$text$(_text$1, $5075, $5076);\n                var $5070 = $5077;\n                break;\n        };\n        return $5070;\n    };\n    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);\n\n    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {\n        var self = Parser$get_index$(_idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5079 = self.idx;\n                var $5080 = self.code;\n                var $5081 = self.err;\n                var $5082 = Parser$Reply$error$($5079, $5080, $5081);\n                var $5078 = $5082;\n                break;\n            case 'Parser.Reply.value':\n                var $5083 = self.idx;\n                var $5084 = self.code;\n                var $5085 = self.val;\n                var self = Parser$text$(\"<\", $5083, $5084);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5087 = self.idx;\n                        var $5088 = self.code;\n                        var $5089 = self.err;\n                        var $5090 = Parser$Reply$error$($5087, $5088, $5089);\n                        var $5086 = $5090;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5091 = self.idx;\n                        var $5092 = self.code;\n                        var self = Parser$until1$(Parser$spaces_text(\">\"), Kind$Parser$item(Kind$Parser$term), $5091, $5092);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5094 = self.idx;\n                                var $5095 = self.code;\n                                var $5096 = self.err;\n                                var $5097 = Parser$Reply$error$($5094, $5095, $5096);\n                                var $5093 = $5097;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5098 = self.idx;\n                                var $5099 = self.code;\n                                var $5100 = self.val;\n                                var self = Kind$Parser$stop$($5085, $5098, $5099);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5102 = self.idx;\n                                        var $5103 = self.code;\n                                        var $5104 = self.err;\n                                        var $5105 = Parser$Reply$error$($5102, $5103, $5104);\n                                        var $5101 = $5105;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5106 = self.idx;\n                                        var $5107 = self.code;\n                                        var $5108 = self.val;\n                                        var _expr$17 = (() => {\n                                            var $5111 = _func$2;\n                                            var $5112 = $5100;\n                                            let _f$18 = $5111;\n                                            let _x$17;\n                                            while ($5112._ === 'List.cons') {\n                                                _x$17 = $5112.head;\n                                                var $5111 = Kind$Term$app$(_f$18, _x$17);\n                                                _f$18 = $5111;\n                                                $5112 = $5112.tail;\n                                            }\n                                            return _f$18;\n                                        })();\n                                        var $5109 = Parser$Reply$value$($5106, $5107, Kind$Term$ori$($5108, _expr$17));\n                                        var $5101 = $5109;\n                                        break;\n                                };\n                                var $5093 = $5101;\n                                break;\n                        };\n                        var $5086 = $5093;\n                        break;\n                };\n                var $5078 = $5086;\n                break;\n        };\n        return $5078;\n    };\n    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);\n\n    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {\n        var self = Parser$text$(\"[\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5114 = self.idx;\n                var $5115 = self.code;\n                var $5116 = self.err;\n                var $5117 = Parser$Reply$error$($5114, $5115, $5116);\n                var $5113 = $5117;\n                break;\n            case 'Parser.Reply.value':\n                var $5118 = self.idx;\n                var $5119 = self.code;\n                var self = Kind$Parser$term$($5118, $5119);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5121 = self.idx;\n                        var $5122 = self.code;\n                        var $5123 = self.err;\n                        var $5124 = Parser$Reply$error$($5121, $5122, $5123);\n                        var $5120 = $5124;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5125 = self.idx;\n                        var $5126 = self.code;\n                        var $5127 = self.val;\n                        var self = Kind$Parser$text$(\"]\", $5125, $5126);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5129 = self.idx;\n                                var $5130 = self.code;\n                                var $5131 = self.err;\n                                var $5132 = Parser$Reply$error$($5129, $5130, $5131);\n                                var $5128 = $5132;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5133 = self.idx;\n                                var $5134 = self.code;\n                                var self = Kind$Parser$text$(\"<-\", $5133, $5134);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5136 = self.idx;\n                                        var $5137 = self.code;\n                                        var $5138 = self.err;\n                                        var $5139 = Parser$Reply$error$($5136, $5137, $5138);\n                                        var $5135 = $5139;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5140 = self.idx;\n                                        var $5141 = self.code;\n                                        var self = Kind$Parser$term$($5140, $5141);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $5143 = self.idx;\n                                                var $5144 = self.code;\n                                                var $5145 = self.err;\n                                                var $5146 = Parser$Reply$error$($5143, $5144, $5145);\n                                                var $5142 = $5146;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $5147 = self.idx;\n                                                var $5148 = self.code;\n                                                var $5149 = self.val;\n                                                var self = Kind$Parser$stop$(_init$1, $5147, $5148);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $5151 = self.idx;\n                                                        var $5152 = self.code;\n                                                        var $5153 = self.err;\n                                                        var $5154 = Parser$Reply$error$($5151, $5152, $5153);\n                                                        var $5150 = $5154;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $5155 = self.idx;\n                                                        var $5156 = self.code;\n                                                        var $5157 = self.val;\n                                                        var _term$23 = Kind$Term$ref$(\"List.set\");\n                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));\n                                                        var _term$25 = Kind$Term$app$(_term$24, $5127);\n                                                        var _term$26 = Kind$Term$app$(_term$25, $5149);\n                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);\n                                                        var $5158 = Parser$Reply$value$($5155, $5156, Kind$Term$ori$($5157, _term$27));\n                                                        var $5150 = $5158;\n                                                        break;\n                                                };\n                                                var $5142 = $5150;\n                                                break;\n                                        };\n                                        var $5135 = $5142;\n                                        break;\n                                };\n                                var $5128 = $5135;\n                                break;\n                        };\n                        var $5120 = $5128;\n                        break;\n                };\n                var $5113 = $5120;\n                break;\n        };\n        return $5113;\n    };\n    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);\n\n    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {\n        var self = Parser$text$(\"[\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5160 = self.idx;\n                var $5161 = self.code;\n                var $5162 = self.err;\n                var $5163 = Parser$Reply$error$($5160, $5161, $5162);\n                var $5159 = $5163;\n                break;\n            case 'Parser.Reply.value':\n                var $5164 = self.idx;\n                var $5165 = self.code;\n                var self = Kind$Parser$term$($5164, $5165);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5167 = self.idx;\n                        var $5168 = self.code;\n                        var $5169 = self.err;\n                        var $5170 = Parser$Reply$error$($5167, $5168, $5169);\n                        var $5166 = $5170;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5171 = self.idx;\n                        var $5172 = self.code;\n                        var $5173 = self.val;\n                        var self = Kind$Parser$text$(\"]\", $5171, $5172);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5175 = self.idx;\n                                var $5176 = self.code;\n                                var $5177 = self.err;\n                                var $5178 = Parser$Reply$error$($5175, $5176, $5177);\n                                var $5174 = $5178;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5179 = self.idx;\n                                var $5180 = self.code;\n                                var self = Kind$Parser$stop$(_init$1, $5179, $5180);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5182 = self.idx;\n                                        var $5183 = self.code;\n                                        var $5184 = self.err;\n                                        var $5185 = Parser$Reply$error$($5182, $5183, $5184);\n                                        var $5181 = $5185;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5186 = self.idx;\n                                        var $5187 = self.code;\n                                        var $5188 = self.val;\n                                        var _term$17 = Kind$Term$ref$(\"List.get\");\n                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));\n                                        var _term$19 = Kind$Term$app$(_term$18, $5173);\n                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);\n                                        var $5189 = Parser$Reply$value$($5186, $5187, Kind$Term$ori$($5188, _term$20));\n                                        var $5181 = $5189;\n                                        break;\n                                };\n                                var $5174 = $5181;\n                                break;\n                        };\n                        var $5166 = $5174;\n                        break;\n                };\n                var $5159 = $5166;\n                break;\n        };\n        return $5159;\n    };\n    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);\n\n    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {\n        var self = Parser$text$(\"{\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5191 = self.idx;\n                var $5192 = self.code;\n                var $5193 = self.err;\n                var $5194 = Parser$Reply$error$($5191, $5192, $5193);\n                var $5190 = $5194;\n                break;\n            case 'Parser.Reply.value':\n                var $5195 = self.idx;\n                var $5196 = self.code;\n                var self = Kind$Parser$term$($5195, $5196);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5198 = self.idx;\n                        var $5199 = self.code;\n                        var $5200 = self.err;\n                        var $5201 = Parser$Reply$error$($5198, $5199, $5200);\n                        var $5197 = $5201;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5202 = self.idx;\n                        var $5203 = self.code;\n                        var $5204 = self.val;\n                        var self = Kind$Parser$text$(\"}\", $5202, $5203);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5206 = self.idx;\n                                var $5207 = self.code;\n                                var $5208 = self.err;\n                                var $5209 = Parser$Reply$error$($5206, $5207, $5208);\n                                var $5205 = $5209;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5210 = self.idx;\n                                var $5211 = self.code;\n                                var self = Kind$Parser$text$(\"<-\", $5210, $5211);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5213 = self.idx;\n                                        var $5214 = self.code;\n                                        var $5215 = self.err;\n                                        var $5216 = Parser$Reply$error$($5213, $5214, $5215);\n                                        var $5212 = $5216;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5217 = self.idx;\n                                        var $5218 = self.code;\n                                        var self = Kind$Parser$term$($5217, $5218);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $5220 = self.idx;\n                                                var $5221 = self.code;\n                                                var $5222 = self.err;\n                                                var $5223 = Parser$Reply$error$($5220, $5221, $5222);\n                                                var $5219 = $5223;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $5224 = self.idx;\n                                                var $5225 = self.code;\n                                                var $5226 = self.val;\n                                                var self = Kind$Parser$stop$(_init$1, $5224, $5225);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $5228 = self.idx;\n                                                        var $5229 = self.code;\n                                                        var $5230 = self.err;\n                                                        var $5231 = Parser$Reply$error$($5228, $5229, $5230);\n                                                        var $5227 = $5231;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $5232 = self.idx;\n                                                        var $5233 = self.code;\n                                                        var $5234 = self.val;\n                                                        var _term$23 = Kind$Term$ref$(\"Map.set\");\n                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));\n                                                        var _term$25 = Kind$Term$app$(_term$24, $5204);\n                                                        var _term$26 = Kind$Term$app$(_term$25, $5226);\n                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);\n                                                        var $5235 = Parser$Reply$value$($5232, $5233, Kind$Term$ori$($5234, _term$27));\n                                                        var $5227 = $5235;\n                                                        break;\n                                                };\n                                                var $5219 = $5227;\n                                                break;\n                                        };\n                                        var $5212 = $5219;\n                                        break;\n                                };\n                                var $5205 = $5212;\n                                break;\n                        };\n                        var $5197 = $5205;\n                        break;\n                };\n                var $5190 = $5197;\n                break;\n        };\n        return $5190;\n    };\n    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);\n\n    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {\n        var self = Parser$text$(\"{\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5237 = self.idx;\n                var $5238 = self.code;\n                var $5239 = self.err;\n                var $5240 = Parser$Reply$error$($5237, $5238, $5239);\n                var $5236 = $5240;\n                break;\n            case 'Parser.Reply.value':\n                var $5241 = self.idx;\n                var $5242 = self.code;\n                var self = Kind$Parser$term$($5241, $5242);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5244 = self.idx;\n                        var $5245 = self.code;\n                        var $5246 = self.err;\n                        var $5247 = Parser$Reply$error$($5244, $5245, $5246);\n                        var $5243 = $5247;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5248 = self.idx;\n                        var $5249 = self.code;\n                        var $5250 = self.val;\n                        var self = Kind$Parser$text$(\"}\", $5248, $5249);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5252 = self.idx;\n                                var $5253 = self.code;\n                                var $5254 = self.err;\n                                var $5255 = Parser$Reply$error$($5252, $5253, $5254);\n                                var $5251 = $5255;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5256 = self.idx;\n                                var $5257 = self.code;\n                                var self = Kind$Parser$stop$(_init$1, $5256, $5257);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5259 = self.idx;\n                                        var $5260 = self.code;\n                                        var $5261 = self.err;\n                                        var $5262 = Parser$Reply$error$($5259, $5260, $5261);\n                                        var $5258 = $5262;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5263 = self.idx;\n                                        var $5264 = self.code;\n                                        var $5265 = self.val;\n                                        var _term$17 = Kind$Term$ref$(\"Map.get\");\n                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));\n                                        var _term$19 = Kind$Term$app$(_term$18, $5250);\n                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);\n                                        var $5266 = Parser$Reply$value$($5263, $5264, Kind$Term$ori$($5265, _term$20));\n                                        var $5258 = $5266;\n                                        break;\n                                };\n                                var $5251 = $5258;\n                                break;\n                        };\n                        var $5243 = $5251;\n                        break;\n                };\n                var $5236 = $5243;\n                break;\n        };\n        return $5236;\n    };\n    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);\n\n    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"->\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5268 = self.idx;\n                var $5269 = self.code;\n                var $5270 = self.err;\n                var $5271 = Parser$Reply$error$($5268, $5269, $5270);\n                var $5267 = $5271;\n                break;\n            case 'Parser.Reply.value':\n                var $5272 = self.idx;\n                var $5273 = self.code;\n                var self = Kind$Parser$term$($5272, $5273);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5275 = self.idx;\n                        var $5276 = self.code;\n                        var $5277 = self.err;\n                        var $5278 = Parser$Reply$error$($5275, $5276, $5277);\n                        var $5274 = $5278;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5279 = self.idx;\n                        var $5280 = self.code;\n                        var $5281 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5279, $5280);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5283 = self.idx;\n                                var $5284 = self.code;\n                                var $5285 = self.err;\n                                var $5286 = Parser$Reply$error$($5283, $5284, $5285);\n                                var $5282 = $5286;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5287 = self.idx;\n                                var $5288 = self.code;\n                                var $5289 = self.val;\n                                var $5290 = Parser$Reply$value$($5287, $5288, Kind$Term$ori$($5289, Kind$Term$all$(Bool$false, \"\", \"\", _xtyp$2, (_s$14 => _x$15 => {\n                                    var $5291 = $5281;\n                                    return $5291;\n                                }))));\n                                var $5282 = $5290;\n                                break;\n                        };\n                        var $5274 = $5282;\n                        break;\n                };\n                var $5267 = $5274;\n                break;\n        };\n        return $5267;\n    };\n    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);\n\n    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {\n        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5293 = self.idx;\n                var $5294 = self.code;\n                var $5295 = self.err;\n                var $5296 = Parser$Reply$error$($5293, $5294, $5295);\n                var $5292 = $5296;\n                break;\n            case 'Parser.Reply.value':\n                var $5297 = self.idx;\n                var $5298 = self.code;\n                var self = Parser$text$(\" \", $5297, $5298);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5300 = self.idx;\n                        var $5301 = self.code;\n                        var $5302 = self.err;\n                        var $5303 = Parser$Reply$error$($5300, $5301, $5302);\n                        var $5299 = $5303;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5304 = self.idx;\n                        var $5305 = self.code;\n                        var self = Kind$Parser$term$($5304, $5305);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5307 = self.idx;\n                                var $5308 = self.code;\n                                var $5309 = self.err;\n                                var $5310 = Parser$Reply$error$($5307, $5308, $5309);\n                                var $5306 = $5310;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5311 = self.idx;\n                                var $5312 = self.code;\n                                var $5313 = self.val;\n                                var self = Kind$Parser$stop$(_init$3, $5311, $5312);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5315 = self.idx;\n                                        var $5316 = self.code;\n                                        var $5317 = self.err;\n                                        var $5318 = Parser$Reply$error$($5315, $5316, $5317);\n                                        var $5314 = $5318;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5319 = self.idx;\n                                        var $5320 = self.code;\n                                        var $5321 = self.val;\n                                        var _term$19 = Kind$Term$ref$(_ref$2);\n                                        var _term$20 = Kind$Term$app$(_term$19, _val0$4);\n                                        var _term$21 = Kind$Term$app$(_term$20, $5313);\n                                        var $5322 = Parser$Reply$value$($5319, $5320, Kind$Term$ori$($5321, _term$21));\n                                        var $5314 = $5322;\n                                        break;\n                                };\n                                var $5306 = $5314;\n                                break;\n                        };\n                        var $5299 = $5306;\n                        break;\n                };\n                var $5292 = $5299;\n                break;\n        };\n        return $5292;\n    };\n    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);\n    const Kind$Parser$add = Kind$Parser$op(\"+\")(\"Nat.add\");\n    const Kind$Parser$sub = Kind$Parser$op(\"-\")(\"Nat.sub\");\n    const Kind$Parser$mul = Kind$Parser$op(\"*\")(\"Nat.mul\");\n    const Kind$Parser$div = Kind$Parser$op(\"/\")(\"Nat.div\");\n    const Kind$Parser$mod = Kind$Parser$op(\"%\")(\"Nat.mod\");\n    const Kind$Parser$ltn = Kind$Parser$op(\"<?\")(\"Nat.ltn\");\n    const Kind$Parser$lte = Kind$Parser$op(\"<=?\")(\"Nat.lte\");\n    const Kind$Parser$eql = Kind$Parser$op(\"=?\")(\"Nat.eql\");\n    const Kind$Parser$gte = Kind$Parser$op(\">=?\")(\"Nat.gte\");\n    const Kind$Parser$gtn = Kind$Parser$op(\">?\")(\"Nat.gtn\");\n    const Kind$Parser$and = Kind$Parser$op(\"&&\")(\"Bool.and\");\n    const Kind$Parser$or = Kind$Parser$op(\"||\")(\"Bool.or\");\n\n    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"<>\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5324 = self.idx;\n                var $5325 = self.code;\n                var $5326 = self.err;\n                var $5327 = Parser$Reply$error$($5324, $5325, $5326);\n                var $5323 = $5327;\n                break;\n            case 'Parser.Reply.value':\n                var $5328 = self.idx;\n                var $5329 = self.code;\n                var self = Kind$Parser$term$($5328, $5329);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5331 = self.idx;\n                        var $5332 = self.code;\n                        var $5333 = self.err;\n                        var $5334 = Parser$Reply$error$($5331, $5332, $5333);\n                        var $5330 = $5334;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5335 = self.idx;\n                        var $5336 = self.code;\n                        var $5337 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5335, $5336);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5339 = self.idx;\n                                var $5340 = self.code;\n                                var $5341 = self.err;\n                                var $5342 = Parser$Reply$error$($5339, $5340, $5341);\n                                var $5338 = $5342;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5343 = self.idx;\n                                var $5344 = self.code;\n                                var $5345 = self.val;\n                                var _term$14 = Kind$Term$ref$(\"Maybe.default\");\n                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));\n                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);\n                                var _term$17 = Kind$Term$app$(_term$16, $5337);\n                                var $5346 = Parser$Reply$value$($5343, $5344, Kind$Term$ori$($5345, _term$17));\n                                var $5338 = $5346;\n                                break;\n                        };\n                        var $5330 = $5338;\n                        break;\n                };\n                var $5323 = $5330;\n                break;\n        };\n        return $5323;\n    };\n    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);\n\n    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"&\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5348 = self.idx;\n                var $5349 = self.code;\n                var $5350 = self.err;\n                var $5351 = Parser$Reply$error$($5348, $5349, $5350);\n                var $5347 = $5351;\n                break;\n            case 'Parser.Reply.value':\n                var $5352 = self.idx;\n                var $5353 = self.code;\n                var self = Kind$Parser$term$($5352, $5353);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5355 = self.idx;\n                        var $5356 = self.code;\n                        var $5357 = self.err;\n                        var $5358 = Parser$Reply$error$($5355, $5356, $5357);\n                        var $5354 = $5358;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5359 = self.idx;\n                        var $5360 = self.code;\n                        var $5361 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5359, $5360);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5363 = self.idx;\n                                var $5364 = self.code;\n                                var $5365 = self.err;\n                                var $5366 = Parser$Reply$error$($5363, $5364, $5365);\n                                var $5362 = $5366;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5367 = self.idx;\n                                var $5368 = self.code;\n                                var _term$14 = Kind$Term$ref$(\"List.cons\");\n                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));\n                                var _term$16 = Kind$Term$app$(_term$15, _head$2);\n                                var _term$17 = Kind$Term$app$(_term$16, $5361);\n                                var self = Kind$Parser$stop$(_init$1, $5367, $5368);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5370 = self.idx;\n                                        var $5371 = self.code;\n                                        var $5372 = self.err;\n                                        var $5373 = Parser$Reply$error$($5370, $5371, $5372);\n                                        var $5369 = $5373;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5374 = self.idx;\n                                        var $5375 = self.code;\n                                        var $5376 = self.val;\n                                        var $5377 = Parser$Reply$value$($5374, $5375, Kind$Term$ori$($5376, _term$17));\n                                        var $5369 = $5377;\n                                        break;\n                                };\n                                var $5362 = $5369;\n                                break;\n                        };\n                        var $5354 = $5362;\n                        break;\n                };\n                var $5347 = $5354;\n                break;\n        };\n        return $5347;\n    };\n    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);\n\n    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"++\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5379 = self.idx;\n                var $5380 = self.code;\n                var $5381 = self.err;\n                var $5382 = Parser$Reply$error$($5379, $5380, $5381);\n                var $5378 = $5382;\n                break;\n            case 'Parser.Reply.value':\n                var $5383 = self.idx;\n                var $5384 = self.code;\n                var self = Kind$Parser$term$($5383, $5384);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5386 = self.idx;\n                        var $5387 = self.code;\n                        var $5388 = self.err;\n                        var $5389 = Parser$Reply$error$($5386, $5387, $5388);\n                        var $5385 = $5389;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5390 = self.idx;\n                        var $5391 = self.code;\n                        var $5392 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5390, $5391);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5394 = self.idx;\n                                var $5395 = self.code;\n                                var $5396 = self.err;\n                                var $5397 = Parser$Reply$error$($5394, $5395, $5396);\n                                var $5393 = $5397;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5398 = self.idx;\n                                var $5399 = self.code;\n                                var _term$14 = Kind$Term$ref$(\"List.concat\");\n                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));\n                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);\n                                var _term$17 = Kind$Term$app$(_term$16, $5392);\n                                var self = Kind$Parser$stop$(_init$1, $5398, $5399);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5401 = self.idx;\n                                        var $5402 = self.code;\n                                        var $5403 = self.err;\n                                        var $5404 = Parser$Reply$error$($5401, $5402, $5403);\n                                        var $5400 = $5404;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5405 = self.idx;\n                                        var $5406 = self.code;\n                                        var $5407 = self.val;\n                                        var $5408 = Parser$Reply$value$($5405, $5406, Kind$Term$ori$($5407, _term$17));\n                                        var $5400 = $5408;\n                                        break;\n                                };\n                                var $5393 = $5400;\n                                break;\n                        };\n                        var $5385 = $5393;\n                        break;\n                };\n                var $5378 = $5385;\n                break;\n        };\n        return $5378;\n    };\n    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);\n\n    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"|\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5410 = self.idx;\n                var $5411 = self.code;\n                var $5412 = self.err;\n                var $5413 = Parser$Reply$error$($5410, $5411, $5412);\n                var $5409 = $5413;\n                break;\n            case 'Parser.Reply.value':\n                var $5414 = self.idx;\n                var $5415 = self.code;\n                var self = Kind$Parser$term$($5414, $5415);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5417 = self.idx;\n                        var $5418 = self.code;\n                        var $5419 = self.err;\n                        var $5420 = Parser$Reply$error$($5417, $5418, $5419);\n                        var $5416 = $5420;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5421 = self.idx;\n                        var $5422 = self.code;\n                        var $5423 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5421, $5422);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5425 = self.idx;\n                                var $5426 = self.code;\n                                var $5427 = self.err;\n                                var $5428 = Parser$Reply$error$($5425, $5426, $5427);\n                                var $5424 = $5428;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5429 = self.idx;\n                                var $5430 = self.code;\n                                var _term$14 = Kind$Term$ref$(\"String.concat\");\n                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);\n                                var _term$16 = Kind$Term$app$(_term$15, $5423);\n                                var self = Kind$Parser$stop$(_init$1, $5429, $5430);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5432 = self.idx;\n                                        var $5433 = self.code;\n                                        var $5434 = self.err;\n                                        var $5435 = Parser$Reply$error$($5432, $5433, $5434);\n                                        var $5431 = $5435;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5436 = self.idx;\n                                        var $5437 = self.code;\n                                        var $5438 = self.val;\n                                        var $5439 = Parser$Reply$value$($5436, $5437, Kind$Term$ori$($5438, _term$16));\n                                        var $5431 = $5439;\n                                        break;\n                                };\n                                var $5424 = $5431;\n                                break;\n                        };\n                        var $5416 = $5424;\n                        break;\n                };\n                var $5409 = $5416;\n                break;\n        };\n        return $5409;\n    };\n    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);\n\n    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"~\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5441 = self.idx;\n                var $5442 = self.code;\n                var $5443 = self.err;\n                var $5444 = Parser$Reply$error$($5441, $5442, $5443);\n                var $5440 = $5444;\n                break;\n            case 'Parser.Reply.value':\n                var $5445 = self.idx;\n                var $5446 = self.code;\n                var self = Kind$Parser$term$($5445, $5446);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5448 = self.idx;\n                        var $5449 = self.code;\n                        var $5450 = self.err;\n                        var $5451 = Parser$Reply$error$($5448, $5449, $5450);\n                        var $5447 = $5451;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5452 = self.idx;\n                        var $5453 = self.code;\n                        var $5454 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5452, $5453);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5456 = self.idx;\n                                var $5457 = self.code;\n                                var $5458 = self.err;\n                                var $5459 = Parser$Reply$error$($5456, $5457, $5458);\n                                var $5455 = $5459;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5460 = self.idx;\n                                var $5461 = self.code;\n                                var $5462 = self.val;\n                                var _term$14 = Kind$Term$ref$(\"Sigma.new\");\n                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));\n                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));\n                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);\n                                var _term$18 = Kind$Term$app$(_term$17, $5454);\n                                var $5463 = Parser$Reply$value$($5460, $5461, Kind$Term$ori$($5462, _term$18));\n                                var $5455 = $5463;\n                                break;\n                        };\n                        var $5447 = $5455;\n                        break;\n                };\n                var $5440 = $5447;\n                break;\n        };\n        return $5440;\n    };\n    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);\n\n    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"==\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5465 = self.idx;\n                var $5466 = self.code;\n                var $5467 = self.err;\n                var $5468 = Parser$Reply$error$($5465, $5466, $5467);\n                var $5464 = $5468;\n                break;\n            case 'Parser.Reply.value':\n                var $5469 = self.idx;\n                var $5470 = self.code;\n                var self = Kind$Parser$term$($5469, $5470);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5472 = self.idx;\n                        var $5473 = self.code;\n                        var $5474 = self.err;\n                        var $5475 = Parser$Reply$error$($5472, $5473, $5474);\n                        var $5471 = $5475;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5476 = self.idx;\n                        var $5477 = self.code;\n                        var $5478 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5476, $5477);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5480 = self.idx;\n                                var $5481 = self.code;\n                                var $5482 = self.err;\n                                var $5483 = Parser$Reply$error$($5480, $5481, $5482);\n                                var $5479 = $5483;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5484 = self.idx;\n                                var $5485 = self.code;\n                                var $5486 = self.val;\n                                var _term$14 = Kind$Term$ref$(\"Equal\");\n                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));\n                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);\n                                var _term$17 = Kind$Term$app$(_term$16, $5478);\n                                var $5487 = Parser$Reply$value$($5484, $5485, Kind$Term$ori$($5486, _term$17));\n                                var $5479 = $5487;\n                                break;\n                        };\n                        var $5471 = $5479;\n                        break;\n                };\n                var $5464 = $5471;\n                break;\n        };\n        return $5464;\n    };\n    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);\n\n    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"!=\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5489 = self.idx;\n                var $5490 = self.code;\n                var $5491 = self.err;\n                var $5492 = Parser$Reply$error$($5489, $5490, $5491);\n                var $5488 = $5492;\n                break;\n            case 'Parser.Reply.value':\n                var $5493 = self.idx;\n                var $5494 = self.code;\n                var self = Kind$Parser$term$($5493, $5494);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5496 = self.idx;\n                        var $5497 = self.code;\n                        var $5498 = self.err;\n                        var $5499 = Parser$Reply$error$($5496, $5497, $5498);\n                        var $5495 = $5499;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5500 = self.idx;\n                        var $5501 = self.code;\n                        var $5502 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5500, $5501);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5504 = self.idx;\n                                var $5505 = self.code;\n                                var $5506 = self.err;\n                                var $5507 = Parser$Reply$error$($5504, $5505, $5506);\n                                var $5503 = $5507;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5508 = self.idx;\n                                var $5509 = self.code;\n                                var $5510 = self.val;\n                                var _term$14 = Kind$Term$ref$(\"Equal\");\n                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));\n                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);\n                                var _term$17 = Kind$Term$app$(_term$16, $5502);\n                                var _term$18 = Kind$Term$app$(Kind$Term$ref$(\"Not\"), _term$17);\n                                var $5511 = Parser$Reply$value$($5508, $5509, Kind$Term$ori$($5510, _term$18));\n                                var $5503 = $5511;\n                                break;\n                        };\n                        var $5495 = $5503;\n                        break;\n                };\n                var $5488 = $5495;\n                break;\n        };\n        return $5488;\n    };\n    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);\n\n    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"::\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5513 = self.idx;\n                var $5514 = self.code;\n                var $5515 = self.err;\n                var $5516 = Parser$Reply$error$($5513, $5514, $5515);\n                var $5512 = $5516;\n                break;\n            case 'Parser.Reply.value':\n                var $5517 = self.idx;\n                var $5518 = self.code;\n                var self = Kind$Parser$text$(\"rewrite\", $5517, $5518);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5520 = self.idx;\n                        var $5521 = self.code;\n                        var $5522 = self.err;\n                        var $5523 = Parser$Reply$error$($5520, $5521, $5522);\n                        var $5519 = $5523;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5524 = self.idx;\n                        var $5525 = self.code;\n                        var self = Kind$Parser$name1$($5524, $5525);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5527 = self.idx;\n                                var $5528 = self.code;\n                                var $5529 = self.err;\n                                var $5530 = Parser$Reply$error$($5527, $5528, $5529);\n                                var $5526 = $5530;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5531 = self.idx;\n                                var $5532 = self.code;\n                                var $5533 = self.val;\n                                var self = Kind$Parser$text$(\"in\", $5531, $5532);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5535 = self.idx;\n                                        var $5536 = self.code;\n                                        var $5537 = self.err;\n                                        var $5538 = Parser$Reply$error$($5535, $5536, $5537);\n                                        var $5534 = $5538;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5539 = self.idx;\n                                        var $5540 = self.code;\n                                        var self = Kind$Parser$term$($5539, $5540);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $5542 = self.idx;\n                                                var $5543 = self.code;\n                                                var $5544 = self.err;\n                                                var $5545 = Parser$Reply$error$($5542, $5543, $5544);\n                                                var $5541 = $5545;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $5546 = self.idx;\n                                                var $5547 = self.code;\n                                                var $5548 = self.val;\n                                                var self = Kind$Parser$text$(\"with\", $5546, $5547);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $5550 = self.idx;\n                                                        var $5551 = self.code;\n                                                        var $5552 = self.err;\n                                                        var $5553 = Parser$Reply$error$($5550, $5551, $5552);\n                                                        var $5549 = $5553;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $5554 = self.idx;\n                                                        var $5555 = self.code;\n                                                        var self = Kind$Parser$term$($5554, $5555);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $5557 = self.idx;\n                                                                var $5558 = self.code;\n                                                                var $5559 = self.err;\n                                                                var $5560 = Parser$Reply$error$($5557, $5558, $5559);\n                                                                var $5556 = $5560;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $5561 = self.idx;\n                                                                var $5562 = self.code;\n                                                                var $5563 = self.val;\n                                                                var self = Kind$Parser$stop$(_init$1, $5561, $5562);\n                                                                switch (self._) {\n                                                                    case 'Parser.Reply.error':\n                                                                        var $5565 = self.idx;\n                                                                        var $5566 = self.code;\n                                                                        var $5567 = self.err;\n                                                                        var $5568 = Parser$Reply$error$($5565, $5566, $5567);\n                                                                        var $5564 = $5568;\n                                                                        break;\n                                                                    case 'Parser.Reply.value':\n                                                                        var $5569 = self.idx;\n                                                                        var $5570 = self.code;\n                                                                        var $5571 = self.val;\n                                                                        var _term$29 = Kind$Term$ref$(\"Equal.rewrite\");\n                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));\n                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));\n                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));\n                                                                        var _term$33 = Kind$Term$app$(_term$32, $5563);\n                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($5533, (_x$34 => {\n                                                                            var $5573 = $5548;\n                                                                            return $5573;\n                                                                        })));\n                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);\n                                                                        var $5572 = Parser$Reply$value$($5569, $5570, Kind$Term$ori$($5571, _term$35));\n                                                                        var $5564 = $5572;\n                                                                        break;\n                                                                };\n                                                                var $5556 = $5564;\n                                                                break;\n                                                        };\n                                                        var $5549 = $5556;\n                                                        break;\n                                                };\n                                                var $5541 = $5549;\n                                                break;\n                                        };\n                                        var $5534 = $5541;\n                                        break;\n                                };\n                                var $5526 = $5534;\n                                break;\n                        };\n                        var $5519 = $5526;\n                        break;\n                };\n                var $5512 = $5519;\n                break;\n        };\n        return $5512;\n    };\n    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);\n\n    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"::\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5575 = self.idx;\n                var $5576 = self.code;\n                var $5577 = self.err;\n                var $5578 = Parser$Reply$error$($5575, $5576, $5577);\n                var $5574 = $5578;\n                break;\n            case 'Parser.Reply.value':\n                var $5579 = self.idx;\n                var $5580 = self.code;\n                var self = Kind$Parser$term$($5579, $5580);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5582 = self.idx;\n                        var $5583 = self.code;\n                        var $5584 = self.err;\n                        var $5585 = Parser$Reply$error$($5582, $5583, $5584);\n                        var $5581 = $5585;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5586 = self.idx;\n                        var $5587 = self.code;\n                        var $5588 = self.val;\n                        var self = Kind$Parser$stop$(_init$1, $5586, $5587);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5590 = self.idx;\n                                var $5591 = self.code;\n                                var $5592 = self.err;\n                                var $5593 = Parser$Reply$error$($5590, $5591, $5592);\n                                var $5589 = $5593;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5594 = self.idx;\n                                var $5595 = self.code;\n                                var $5596 = self.val;\n                                var $5597 = Parser$Reply$value$($5594, $5595, Kind$Term$ori$($5596, Kind$Term$ann$(Bool$false, _term$2, $5588)));\n                                var $5589 = $5597;\n                                break;\n                        };\n                        var $5581 = $5589;\n                        break;\n                };\n                var $5574 = $5581;\n                break;\n        };\n        return $5574;\n    };\n    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);\n\n    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$(\"!\", _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5599 = self.idx;\n                var $5600 = self.code;\n                var $5601 = self.err;\n                var $5602 = Parser$Reply$error$($5599, $5600, $5601);\n                var $5598 = $5602;\n                break;\n            case 'Parser.Reply.value':\n                var $5603 = self.idx;\n                var $5604 = self.code;\n                var self = Kind$Parser$stop$(_init$1, $5603, $5604);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5606 = self.idx;\n                        var $5607 = self.code;\n                        var $5608 = self.err;\n                        var $5609 = Parser$Reply$error$($5606, $5607, $5608);\n                        var $5605 = $5609;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5610 = self.idx;\n                        var $5611 = self.code;\n                        var $5612 = self.val;\n                        var $5613 = Parser$Reply$value$($5610, $5611, Kind$Term$ori$($5612, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));\n                        var $5605 = $5613;\n                        break;\n                };\n                var $5598 = $5605;\n                break;\n        };\n        return $5598;\n    };\n    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);\n\n    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {\n        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({\n            ctr: 'TCO',\n            arg: [_init$1, _term$2, _idx$3, _code$4]\n        });\n        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);\n        var arg = [_init$1, _term$2, _idx$3, _code$4];\n        while (true) {\n            let [_init$1, _term$2, _idx$3, _code$4] = arg;\n            var R = (() => {\n                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));\n                var self = _suffix_parser$5(_idx$3)(_code$4);\n                switch (self._) {\n                    case 'Parser.Reply.value':\n                        var $5615 = self.idx;\n                        var $5616 = self.code;\n                        var $5617 = self.val;\n                        var $5618 = Kind$Parser$suffix$(_init$1, $5617, $5615, $5616);\n                        var $5614 = $5618;\n                        break;\n                    case 'Parser.Reply.error':\n                        var $5619 = Parser$Reply$value$(_idx$3, _code$4, _term$2);\n                        var $5614 = $5619;\n                        break;\n                };\n                return $5614;\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);\n\n    function Kind$Parser$term$(_idx$1, _code$2) {\n        var self = Kind$Parser$init$(_idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5621 = self.idx;\n                var $5622 = self.code;\n                var $5623 = self.err;\n                var $5624 = Parser$Reply$error$($5621, $5622, $5623);\n                var $5620 = $5624;\n                break;\n            case 'Parser.Reply.value':\n                var $5625 = self.idx;\n                var $5626 = self.code;\n                var $5627 = self.val;\n                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string(34), List$cons$(Kind$Parser$string(96), List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$not, List$cons$(Kind$Parser$left, List$cons$(Kind$Parser$right, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$float$64, List$cons$(Kind$Parser$float$32, List$cons$(Kind$Parser$machine_integer$signed$(256n), List$cons$(Kind$Parser$machine_integer$signed$(128n), List$cons$(Kind$Parser$machine_integer$signed$(64n), List$cons$(Kind$Parser$machine_integer$signed$(32n), List$cons$(Kind$Parser$machine_integer$signed$(16n), List$cons$(Kind$Parser$machine_integer$signed$(8n), List$cons$(Kind$Parser$int, List$cons$(Kind$Parser$machine_integer$unsigned$(256n), List$cons$(Kind$Parser$machine_integer$unsigned$(128n), List$cons$(Kind$Parser$machine_integer$unsigned$(64n), List$cons$(Kind$Parser$machine_integer$unsigned$(32n), List$cons$(Kind$Parser$machine_integer$unsigned$(16n), List$cons$(Kind$Parser$machine_integer$unsigned$(8n), List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))($5625)($5626);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5629 = self.idx;\n                        var $5630 = self.code;\n                        var $5631 = self.err;\n                        var $5632 = Parser$Reply$error$($5629, $5630, $5631);\n                        var $5628 = $5632;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5633 = self.idx;\n                        var $5634 = self.code;\n                        var $5635 = self.val;\n                        var $5636 = Kind$Parser$suffix$($5627, $5635, $5633, $5634);\n                        var $5628 = $5636;\n                        break;\n                };\n                var $5620 = $5628;\n                break;\n        };\n        return $5620;\n    };\n    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);\n\n    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {\n        var self = Kind$Parser$name$(_idx$2, _code$3);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5638 = self.idx;\n                var $5639 = self.code;\n                var $5640 = self.err;\n                var $5641 = Parser$Reply$error$($5638, $5639, $5640);\n                var $5637 = $5641;\n                break;\n            case 'Parser.Reply.value':\n                var $5642 = self.idx;\n                var $5643 = self.code;\n                var $5644 = self.val;\n                var self = Kind$Parser$text$(_sep$1, $5642, $5643);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5646 = self.idx;\n                        var $5647 = self.code;\n                        var $5648 = self.err;\n                        var $5649 = Parser$Reply$error$($5646, $5647, $5648);\n                        var $5645 = $5649;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5650 = self.idx;\n                        var $5651 = self.code;\n                        var self = Kind$Parser$term$($5650, $5651);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5653 = self.idx;\n                                var $5654 = self.code;\n                                var $5655 = self.err;\n                                var $5656 = Parser$Reply$error$($5653, $5654, $5655);\n                                var $5652 = $5656;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5657 = self.idx;\n                                var $5658 = self.code;\n                                var $5659 = self.val;\n                                var $5660 = Parser$Reply$value$($5657, $5658, Pair$new$($5644, $5659));\n                                var $5652 = $5660;\n                                break;\n                        };\n                        var $5645 = $5652;\n                        break;\n                };\n                var $5637 = $5645;\n                break;\n        };\n        return $5637;\n    };\n    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);\n\n    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {\n        var $5661 = ({\n            _: 'Kind.Binder.new',\n            'eras': _eras$1,\n            'name': _name$2,\n            'term': _term$3\n        });\n        return $5661;\n    };\n    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);\n\n    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {\n        var self = Kind$Parser$text$((() => {\n            var self = _eras$2;\n            if (self) {\n                var $5663 = \"<\";\n                return $5663;\n            } else {\n                var $5664 = \"(\";\n                return $5664;\n            };\n        })(), _idx$3, _code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5665 = self.idx;\n                var $5666 = self.code;\n                var $5667 = self.err;\n                var $5668 = Parser$Reply$error$($5665, $5666, $5667);\n                var $5662 = $5668;\n                break;\n            case 'Parser.Reply.value':\n                var $5669 = self.idx;\n                var $5670 = self.code;\n                var self = Parser$until1$(Kind$Parser$text((() => {\n                    var self = _eras$2;\n                    if (self) {\n                        var $5672 = \">\";\n                        return $5672;\n                    } else {\n                        var $5673 = \")\";\n                        return $5673;\n                    };\n                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $5669, $5670);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5674 = self.idx;\n                        var $5675 = self.code;\n                        var $5676 = self.err;\n                        var $5677 = Parser$Reply$error$($5674, $5675, $5676);\n                        var $5671 = $5677;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5678 = self.idx;\n                        var $5679 = self.code;\n                        var $5680 = self.val;\n                        var $5681 = Parser$Reply$value$($5678, $5679, List$mapped$($5680, (_pair$11 => {\n                            var self = _pair$11;\n                            switch (self._) {\n                                case 'Pair.new':\n                                    var $5683 = self.fst;\n                                    var $5684 = self.snd;\n                                    var $5685 = Kind$Binder$new$(_eras$2, $5683, $5684);\n                                    var $5682 = $5685;\n                                    break;\n                            };\n                            return $5682;\n                        })));\n                        var $5671 = $5681;\n                        break;\n                };\n                var $5662 = $5671;\n                break;\n        };\n        return $5662;\n    };\n    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);\n\n    function List$concat$(_as$2, _bs$3) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $5687 = self.head;\n                var $5688 = self.tail;\n                var $5689 = List$cons$($5687, List$concat$($5688, _bs$3));\n                var $5686 = $5689;\n                break;\n            case 'List.nil':\n                var $5690 = _bs$3;\n                var $5686 = $5690;\n                break;\n        };\n        return $5686;\n    };\n    const List$concat = x0 => x1 => List$concat$(x0, x1);\n\n    function List$flatten$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $5692 = self.head;\n                var $5693 = self.tail;\n                var $5694 = List$concat$($5692, List$flatten$($5693));\n                var $5691 = $5694;\n                break;\n            case 'List.nil':\n                var $5695 = List$nil;\n                var $5691 = $5695;\n                break;\n        };\n        return $5691;\n    };\n    const List$flatten = x0 => List$flatten$(x0);\n\n    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {\n        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5697 = self.idx;\n                var $5698 = self.code;\n                var $5699 = self.err;\n                var $5700 = Parser$Reply$error$($5697, $5698, $5699);\n                var $5696 = $5700;\n                break;\n            case 'Parser.Reply.value':\n                var $5701 = self.idx;\n                var $5702 = self.code;\n                var $5703 = self.val;\n                var $5704 = Parser$Reply$value$($5701, $5702, List$flatten$($5703));\n                var $5696 = $5704;\n                break;\n        };\n        return $5696;\n    };\n    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);\n    const List$length = a0 => (list_length(a0));\n\n    function Kind$Parser$make_forall$(_binds$1, _body$2) {\n        var self = _binds$1;\n        switch (self._) {\n            case 'List.cons':\n                var $5706 = self.head;\n                var $5707 = self.tail;\n                var self = $5706;\n                switch (self._) {\n                    case 'Kind.Binder.new':\n                        var $5709 = self.eras;\n                        var $5710 = self.name;\n                        var $5711 = self.term;\n                        var $5712 = Kind$Term$all$($5709, \"\", $5710, $5711, (_s$8 => _x$9 => {\n                            var $5713 = Kind$Parser$make_forall$($5707, _body$2);\n                            return $5713;\n                        }));\n                        var $5708 = $5712;\n                        break;\n                };\n                var $5705 = $5708;\n                break;\n            case 'List.nil':\n                var $5714 = _body$2;\n                var $5705 = $5714;\n                break;\n        };\n        return $5705;\n    };\n    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);\n\n    function List$at_last$(_index$2, _list$3) {\n        var $5715 = List$at$(_index$2, List$reverse$(_list$3));\n        return $5715;\n    };\n    const List$at_last = x0 => x1 => List$at_last$(x0, x1);\n\n    function Kind$Term$var$(_name$1, _indx$2) {\n        var $5716 = ({\n            _: 'Kind.Term.var',\n            'name': _name$1,\n            'indx': _indx$2\n        });\n        return $5716;\n    };\n    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);\n\n    function Kind$Context$get_name_skips$(_name$1) {\n        var self = _name$1;\n        if (self.length === 0) {\n            var $5718 = Pair$new$(\"\", 0n);\n            var $5717 = $5718;\n        } else {\n            var $5719 = self.charCodeAt(0);\n            var $5720 = self.slice(1);\n            var _name_skips$4 = Kind$Context$get_name_skips$($5720);\n            var self = _name_skips$4;\n            switch (self._) {\n                case 'Pair.new':\n                    var $5722 = self.fst;\n                    var $5723 = self.snd;\n                    var self = ($5719 === 94);\n                    if (self) {\n                        var $5725 = Pair$new$($5722, Nat$succ$($5723));\n                        var $5724 = $5725;\n                    } else {\n                        var $5726 = Pair$new$(String$cons$($5719, $5722), $5723);\n                        var $5724 = $5726;\n                    };\n                    var $5721 = $5724;\n                    break;\n            };\n            var $5717 = $5721;\n        };\n        return $5717;\n    };\n    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);\n\n    function Kind$Name$eql$(_a$1, _b$2) {\n        var $5727 = (_a$1 === _b$2);\n        return $5727;\n    };\n    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);\n\n    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {\n        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({\n            ctr: 'TCO',\n            arg: [_name$1, _skip$2, _ctx$3]\n        });\n        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);\n        var arg = [_name$1, _skip$2, _ctx$3];\n        while (true) {\n            let [_name$1, _skip$2, _ctx$3] = arg;\n            var R = (() => {\n                var self = _ctx$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $5728 = self.head;\n                        var $5729 = self.tail;\n                        var self = $5728;\n                        switch (self._) {\n                            case 'Pair.new':\n                                var $5731 = self.fst;\n                                var $5732 = self.snd;\n                                var self = Kind$Name$eql$(_name$1, $5731);\n                                if (self) {\n                                    var self = _skip$2;\n                                    if (self === 0n) {\n                                        var $5735 = Maybe$some$($5732);\n                                        var $5734 = $5735;\n                                    } else {\n                                        var $5736 = (self - 1n);\n                                        var $5737 = Kind$Context$find$go$(_name$1, $5736, $5729);\n                                        var $5734 = $5737;\n                                    };\n                                    var $5733 = $5734;\n                                } else {\n                                    var $5738 = Kind$Context$find$go$(_name$1, _skip$2, $5729);\n                                    var $5733 = $5738;\n                                };\n                                var $5730 = $5733;\n                                break;\n                        };\n                        return $5730;\n                    case 'List.nil':\n                        var $5739 = Maybe$none;\n                        return $5739;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);\n\n    function Kind$Context$find$(_name$1, _ctx$2) {\n        var self = Kind$Context$get_name_skips$(_name$1);\n        switch (self._) {\n            case 'Pair.new':\n                var $5741 = self.fst;\n                var $5742 = self.snd;\n                var $5743 = Kind$Context$find$go$($5741, $5742, _ctx$2);\n                var $5740 = $5743;\n                break;\n        };\n        return $5740;\n    };\n    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);\n\n    function Kind$Path$o$(_path$1, _x$2) {\n        var $5744 = _path$1((_x$2 + '0'));\n        return $5744;\n    };\n    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);\n\n    function Kind$Path$i$(_path$1, _x$2) {\n        var $5745 = _path$1((_x$2 + '1'));\n        return $5745;\n    };\n    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);\n\n    function Kind$Path$to_bits$(_path$1) {\n        var $5746 = _path$1(Bits$e);\n        return $5746;\n    };\n    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);\n\n    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {\n        var self = _term$3;\n        switch (self._) {\n            case 'Kind.Term.var':\n                var $5748 = self.name;\n                var $5749 = self.indx;\n                var self = List$at_last$($5749, _vars$1);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $5751 = self.value;\n                        var $5752 = Pair$snd$($5751);\n                        var $5750 = $5752;\n                        break;\n                    case 'Maybe.none':\n                        var $5753 = Kind$Term$var$($5748, $5749);\n                        var $5750 = $5753;\n                        break;\n                };\n                var $5747 = $5750;\n                break;\n            case 'Kind.Term.ref':\n                var $5754 = self.name;\n                var self = Kind$Context$find$($5754, _vars$1);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $5756 = self.value;\n                        var $5757 = $5756;\n                        var $5755 = $5757;\n                        break;\n                    case 'Maybe.none':\n                        var $5758 = Kind$Term$ref$($5754);\n                        var $5755 = $5758;\n                        break;\n                };\n                var $5747 = $5755;\n                break;\n            case 'Kind.Term.all':\n                var $5759 = self.eras;\n                var $5760 = self.self;\n                var $5761 = self.name;\n                var $5762 = self.xtyp;\n                var $5763 = self.body;\n                var _vlen$9 = (list_length(_vars$1));\n                var $5764 = Kind$Term$all$($5759, $5760, $5761, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5762), (_s$10 => _x$11 => {\n                    var $5765 = Kind$Term$bind$(List$cons$(Pair$new$($5761, _x$11), List$cons$(Pair$new$($5760, _s$10), _vars$1)), Kind$Path$i(_path$2), $5763(Kind$Term$var$($5760, _vlen$9))(Kind$Term$var$($5761, Nat$succ$(_vlen$9))));\n                    return $5765;\n                }));\n                var $5747 = $5764;\n                break;\n            case 'Kind.Term.lam':\n                var $5766 = self.name;\n                var $5767 = self.body;\n                var _vlen$6 = (list_length(_vars$1));\n                var $5768 = Kind$Term$lam$($5766, (_x$7 => {\n                    var $5769 = Kind$Term$bind$(List$cons$(Pair$new$($5766, _x$7), _vars$1), Kind$Path$o(_path$2), $5767(Kind$Term$var$($5766, _vlen$6)));\n                    return $5769;\n                }));\n                var $5747 = $5768;\n                break;\n            case 'Kind.Term.app':\n                var $5770 = self.func;\n                var $5771 = self.argm;\n                var $5772 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5770), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5771));\n                var $5747 = $5772;\n                break;\n            case 'Kind.Term.let':\n                var $5773 = self.name;\n                var $5774 = self.expr;\n                var $5775 = self.body;\n                var _vlen$7 = (list_length(_vars$1));\n                var $5776 = Kind$Term$let$($5773, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5774), (_x$8 => {\n                    var $5777 = Kind$Term$bind$(List$cons$(Pair$new$($5773, _x$8), _vars$1), Kind$Path$i(_path$2), $5775(Kind$Term$var$($5773, _vlen$7)));\n                    return $5777;\n                }));\n                var $5747 = $5776;\n                break;\n            case 'Kind.Term.def':\n                var $5778 = self.name;\n                var $5779 = self.expr;\n                var $5780 = self.body;\n                var _vlen$7 = (list_length(_vars$1));\n                var $5781 = Kind$Term$def$($5778, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5779), (_x$8 => {\n                    var $5782 = Kind$Term$bind$(List$cons$(Pair$new$($5778, _x$8), _vars$1), Kind$Path$i(_path$2), $5780(Kind$Term$var$($5778, _vlen$7)));\n                    return $5782;\n                }));\n                var $5747 = $5781;\n                break;\n            case 'Kind.Term.ann':\n                var $5783 = self.done;\n                var $5784 = self.term;\n                var $5785 = self.type;\n                var $5786 = Kind$Term$ann$($5783, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5784), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5785));\n                var $5747 = $5786;\n                break;\n            case 'Kind.Term.gol':\n                var $5787 = self.name;\n                var $5788 = self.dref;\n                var $5789 = self.verb;\n                var $5790 = Kind$Term$gol$($5787, $5788, $5789);\n                var $5747 = $5790;\n                break;\n            case 'Kind.Term.nat':\n                var $5791 = self.natx;\n                var $5792 = Kind$Term$nat$($5791);\n                var $5747 = $5792;\n                break;\n            case 'Kind.Term.chr':\n                var $5793 = self.chrx;\n                var $5794 = Kind$Term$chr$($5793);\n                var $5747 = $5794;\n                break;\n            case 'Kind.Term.str':\n                var $5795 = self.strx;\n                var $5796 = Kind$Term$str$($5795);\n                var $5747 = $5796;\n                break;\n            case 'Kind.Term.cse':\n                var $5797 = self.expr;\n                var $5798 = self.name;\n                var $5799 = self.with;\n                var $5800 = self.cses;\n                var $5801 = self.moti;\n                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5797);\n                var _name$11 = $5798;\n                var _wyth$12 = List$mapped$($5799, (_with_var$12 => {\n                    var self = _with_var$12;\n                    switch (self._) {\n                        case 'Kind.Ann.new':\n                            var $5804 = self.name;\n                            var $5805 = self.term;\n                            var $5806 = self.type;\n                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $5805);\n                            var self = $5806;\n                            switch (self._) {\n                                case 'Maybe.some':\n                                    var $5808 = self.value;\n                                    var $5809 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $5808));\n                                    var _with_var_type$17 = $5809;\n                                    break;\n                                case 'Maybe.none':\n                                    var $5810 = Maybe$none;\n                                    var _with_var_type$17 = $5810;\n                                    break;\n                            };\n                            var $5807 = Kind$Ann$new$($5804, _with_var_term$16, _with_var_type$17);\n                            var $5803 = $5807;\n                            break;\n                    };\n                    return $5803;\n                }));\n                var _cses$13 = $5800;\n                var _moti$14 = $5801;\n                var $5802 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);\n                var $5747 = $5802;\n                break;\n            case 'Kind.Term.ori':\n                var $5811 = self.orig;\n                var $5812 = self.expr;\n                var $5813 = Kind$Term$ori$($5811, Kind$Term$bind$(_vars$1, _path$2, $5812));\n                var $5747 = $5813;\n                break;\n            case 'Kind.Term.typ':\n                var $5814 = Kind$Term$typ;\n                var $5747 = $5814;\n                break;\n            case 'Kind.Term.hol':\n                var $5815 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));\n                var $5747 = $5815;\n                break;\n        };\n        return $5747;\n    };\n    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);\n\n    function Trampoline$call$(_t$2) {\n        var Trampoline$call$ = (_t$2) => ({\n            ctr: 'TCO',\n            arg: [_t$2]\n        });\n        var Trampoline$call = _t$2 => Trampoline$call$(_t$2);\n        var arg = [_t$2];\n        while (true) {\n            let [_t$2] = arg;\n            var R = (() => {\n                var self = _t$2;\n                switch (self._) {\n                    case 'Trampoline.done':\n                        var $5816 = self.value;\n                        var $5817 = $5816;\n                        return $5817;\n                    case 'Trampoline.wrap':\n                        var $5818 = self.value;\n                        var $5819 = Trampoline$call$($5818(Unit$new));\n                        return $5819;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Trampoline$call = x0 => Trampoline$call$(x0);\n\n    function Trampoline$(_A$1) {\n        var $5820 = null;\n        return $5820;\n    };\n    const Trampoline = x0 => Trampoline$(x0);\n\n    function Trampoline$wrap$(_value$2) {\n        var $5821 = ({\n            _: 'Trampoline.wrap',\n            'value': _value$2\n        });\n        return $5821;\n    };\n    const Trampoline$wrap = x0 => Trampoline$wrap$(x0);\n\n    function BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5) {\n        var BitsMap$set_if_empty$cps$go$ = (_bits$2, _val$3, _map$4, _cont$5) => ({\n            ctr: 'TCO',\n            arg: [_bits$2, _val$3, _map$4, _cont$5]\n        });\n        var BitsMap$set_if_empty$cps$go = _bits$2 => _val$3 => _map$4 => _cont$5 => BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5);\n        var arg = [_bits$2, _val$3, _map$4, _cont$5];\n        while (true) {\n            let [_bits$2, _val$3, _map$4, _cont$5] = arg;\n            var R = (() => {\n                var self = _bits$2;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $5822 = self.slice(0, -1);\n                        var self = _map$4;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $5824 = self.val;\n                                var $5825 = self.lft;\n                                var $5826 = self.rgt;\n                                var $5827 = BitsMap$set_if_empty$cps$go$($5822, _val$3, $5825, (_lft$10 => {\n                                    var $5828 = Trampoline$wrap$((_$11 => {\n                                        var $5829 = _cont$5(BitsMap$tie$($5824, _lft$10, $5826));\n                                        return $5829;\n                                    }));\n                                    return $5828;\n                                }));\n                                var $5823 = $5827;\n                                break;\n                            case 'BitsMap.new':\n                                var $5830 = BitsMap$set_if_empty$cps$go$($5822, _val$3, BitsMap$new, (_lft$7 => {\n                                    var $5831 = Trampoline$wrap$((_$8 => {\n                                        var $5832 = _cont$5(BitsMap$tie$(Maybe$none, _lft$7, BitsMap$new));\n                                        return $5832;\n                                    }));\n                                    return $5831;\n                                }));\n                                var $5823 = $5830;\n                                break;\n                        };\n                        return $5823;\n                    case 'i':\n                        var $5833 = self.slice(0, -1);\n                        var self = _map$4;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $5835 = self.val;\n                                var $5836 = self.lft;\n                                var $5837 = self.rgt;\n                                var $5838 = BitsMap$set_if_empty$cps$go$($5833, _val$3, $5837, (_rgt$10 => {\n                                    var $5839 = Trampoline$wrap$((_$11 => {\n                                        var $5840 = _cont$5(BitsMap$tie$($5835, $5836, _rgt$10));\n                                        return $5840;\n                                    }));\n                                    return $5839;\n                                }));\n                                var $5834 = $5838;\n                                break;\n                            case 'BitsMap.new':\n                                var $5841 = BitsMap$set_if_empty$cps$go$($5833, _val$3, BitsMap$new, (_rgt$7 => {\n                                    var $5842 = Trampoline$wrap$((_$8 => {\n                                        var $5843 = _cont$5(BitsMap$tie$(Maybe$none, BitsMap$new, _rgt$7));\n                                        return $5843;\n                                    }));\n                                    return $5842;\n                                }));\n                                var $5834 = $5841;\n                                break;\n                        };\n                        return $5834;\n                    case 'e':\n                        var self = _map$4;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $5845 = self.val;\n                                var $5846 = self.lft;\n                                var $5847 = self.rgt;\n                                var $5848 = _cont$5(BitsMap$tie$((() => {\n                                    var self = $5845;\n                                    switch (self._) {\n                                        case 'Maybe.some':\n                                            var $5849 = self.value;\n                                            var $5850 = Maybe$some$($5849);\n                                            return $5850;\n                                        case 'Maybe.none':\n                                            var $5851 = Maybe$some$(_val$3);\n                                            return $5851;\n                                    };\n                                })(), $5846, $5847));\n                                var $5844 = $5848;\n                                break;\n                            case 'BitsMap.new':\n                                var $5852 = _cont$5(BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new));\n                                var $5844 = $5852;\n                                break;\n                        };\n                        return $5844;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const BitsMap$set_if_empty$cps$go = x0 => x1 => x2 => x3 => BitsMap$set_if_empty$cps$go$(x0, x1, x2, x3);\n\n    function Trampoline$done$(_value$2) {\n        var $5853 = ({\n            _: 'Trampoline.done',\n            'value': _value$2\n        });\n        return $5853;\n    };\n    const Trampoline$done = x0 => Trampoline$done$(x0);\n\n    function BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4) {\n        var $5854 = Trampoline$call$(BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, Trampoline$done));\n        return $5854;\n    };\n    const BitsMap$set_if_empty$cps = x0 => x1 => x2 => BitsMap$set_if_empty$cps$(x0, x1, x2);\n\n    function BitsMap$set_if_empty$(_bits$2, _val$3, _map$4) {\n        var $5855 = BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4);\n        return $5855;\n    };\n    const BitsMap$set_if_empty = x0 => x1 => x2 => BitsMap$set_if_empty$(x0, x1, x2);\n\n    function Kind$Map$set_if_empty$(_name$2, _val$3, _map$4) {\n        var $5856 = BitsMap$set_if_empty$((kind_name_to_bits(_name$2)), _val$3, _map$4);\n        return $5856;\n    };\n    const Kind$Map$set_if_empty = x0 => x1 => x2 => Kind$Map$set_if_empty$(x0, x1, x2);\n    const Kind$Status$init = ({\n        _: 'Kind.Status.init'\n    });\n\n    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {\n        var _defn$11 = Kind$Def$new(_file$1)(_code$2)(_orig$3)(_name$4)(_term$5)(_type$6)(_isct$7)(_arit$8);\n        var self = _done$9;\n        if (self) {\n            var $5858 = Kind$Map$set$(_name$4, _defn$11(Kind$Status$done$(Bool$false)), _defs$10);\n            var $5857 = $5858;\n        } else {\n            var $5859 = Kind$Map$set_if_empty$(_name$4, _defn$11(Kind$Status$init), _defs$10);\n            var $5857 = $5859;\n        };\n        return $5857;\n    };\n    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);\n\n    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {\n        var self = Kind$Parser$init$(_idx$4, _code$5);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5861 = self.idx;\n                var $5862 = self.code;\n                var $5863 = self.err;\n                var $5864 = Parser$Reply$error$($5861, $5862, $5863);\n                var $5860 = $5864;\n                break;\n            case 'Parser.Reply.value':\n                var $5865 = self.idx;\n                var $5866 = self.code;\n                var $5867 = self.val;\n                var self = Kind$Parser$name1$($5865, $5866);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5869 = self.idx;\n                        var $5870 = self.code;\n                        var $5871 = self.err;\n                        var $5872 = Parser$Reply$error$($5869, $5870, $5871);\n                        var $5868 = $5872;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5873 = self.idx;\n                        var $5874 = self.code;\n                        var $5875 = self.val;\n                        var self = Parser$many$(Kind$Parser$binder(\":\"))($5873)($5874);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5877 = self.idx;\n                                var $5878 = self.code;\n                                var $5879 = self.err;\n                                var $5880 = Parser$Reply$error$($5877, $5878, $5879);\n                                var $5876 = $5880;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5881 = self.idx;\n                                var $5882 = self.code;\n                                var $5883 = self.val;\n                                var _args$15 = List$flatten$($5883);\n                                var self = Kind$Parser$text$(\":\", $5881, $5882);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5885 = self.idx;\n                                        var $5886 = self.code;\n                                        var $5887 = self.err;\n                                        var $5888 = Parser$Reply$error$($5885, $5886, $5887);\n                                        var $5884 = $5888;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5889 = self.idx;\n                                        var $5890 = self.code;\n                                        var self = Kind$Parser$term$($5889, $5890);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $5892 = self.idx;\n                                                var $5893 = self.code;\n                                                var $5894 = self.err;\n                                                var $5895 = Parser$Reply$error$($5892, $5893, $5894);\n                                                var $5891 = $5895;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $5896 = self.idx;\n                                                var $5897 = self.code;\n                                                var $5898 = self.val;\n                                                var self = Kind$Parser$term$($5896, $5897);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $5900 = self.idx;\n                                                        var $5901 = self.code;\n                                                        var $5902 = self.err;\n                                                        var $5903 = Parser$Reply$error$($5900, $5901, $5902);\n                                                        var $5899 = $5903;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $5904 = self.idx;\n                                                        var $5905 = self.code;\n                                                        var $5906 = self.val;\n                                                        var self = Kind$Parser$stop$($5867, $5904, $5905);\n                                                        switch (self._) {\n                                                            case 'Parser.Reply.error':\n                                                                var $5908 = self.idx;\n                                                                var $5909 = self.code;\n                                                                var $5910 = self.err;\n                                                                var $5911 = Parser$Reply$error$($5908, $5909, $5910);\n                                                                var $5907 = $5911;\n                                                                break;\n                                                            case 'Parser.Reply.value':\n                                                                var $5912 = self.idx;\n                                                                var $5913 = self.code;\n                                                                var $5914 = self.val;\n                                                                var _arit$28 = (list_length(_args$15));\n                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $5898);\n                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {\n                                                                    var self = _x$30;\n                                                                    switch (self._) {\n                                                                        case 'Kind.Binder.new':\n                                                                            var $5917 = self.name;\n                                                                            var $5918 = $5917;\n                                                                            var $5916 = $5918;\n                                                                            break;\n                                                                    };\n                                                                    return $5916;\n                                                                })), $5906);\n                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {\n                                                                    var $5919 = (_x$31 + '1');\n                                                                    return $5919;\n                                                                }), _type$29);\n                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {\n                                                                    var $5920 = (_x$32 + '0');\n                                                                    return $5920;\n                                                                }), _term$30);\n                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $5914, $5875, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);\n                                                                var $5915 = Parser$Reply$value$($5912, $5913, _defs$33);\n                                                                var $5907 = $5915;\n                                                                break;\n                                                        };\n                                                        var $5899 = $5907;\n                                                        break;\n                                                };\n                                                var $5891 = $5899;\n                                                break;\n                                        };\n                                        var $5884 = $5891;\n                                        break;\n                                };\n                                var $5876 = $5884;\n                                break;\n                        };\n                        var $5868 = $5876;\n                        break;\n                };\n                var $5860 = $5868;\n                break;\n        };\n        return $5860;\n    };\n    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);\n\n    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {\n        var $5921 = ({\n            _: 'Kind.Constructor.new',\n            'name': _name$1,\n            'args': _args$2,\n            'inds': _inds$3\n        });\n        return $5921;\n    };\n    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);\n\n    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {\n        var self = Kind$Parser$name1$(_idx$2, _code$3);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5923 = self.idx;\n                var $5924 = self.code;\n                var $5925 = self.err;\n                var $5926 = Parser$Reply$error$($5923, $5924, $5925);\n                var $5922 = $5926;\n                break;\n            case 'Parser.Reply.value':\n                var $5927 = self.idx;\n                var $5928 = self.code;\n                var $5929 = self.val;\n                var self = Parser$maybe$(Kind$Parser$binder(\":\"), $5927, $5928);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5931 = self.idx;\n                        var $5932 = self.code;\n                        var $5933 = self.err;\n                        var $5934 = Parser$Reply$error$($5931, $5932, $5933);\n                        var $5930 = $5934;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5935 = self.idx;\n                        var $5936 = self.code;\n                        var $5937 = self.val;\n                        var self = Parser$maybe$((_idx$10 => _code$11 => {\n                            var self = Kind$Parser$text$(\"~\", _idx$10, _code$11);\n                            switch (self._) {\n                                case 'Parser.Reply.error':\n                                    var $5940 = self.idx;\n                                    var $5941 = self.code;\n                                    var $5942 = self.err;\n                                    var $5943 = Parser$Reply$error$($5940, $5941, $5942);\n                                    var $5939 = $5943;\n                                    break;\n                                case 'Parser.Reply.value':\n                                    var $5944 = self.idx;\n                                    var $5945 = self.code;\n                                    var $5946 = Kind$Parser$binder$(\"=\", $5944, $5945);\n                                    var $5939 = $5946;\n                                    break;\n                            };\n                            return $5939;\n                        }), $5935, $5936);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5947 = self.idx;\n                                var $5948 = self.code;\n                                var $5949 = self.err;\n                                var $5950 = Parser$Reply$error$($5947, $5948, $5949);\n                                var $5938 = $5950;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5951 = self.idx;\n                                var $5952 = self.code;\n                                var $5953 = self.val;\n                                var _args$13 = Maybe$default$($5937, List$nil);\n                                var _inds$14 = Maybe$default$($5953, List$nil);\n                                var $5954 = Parser$Reply$value$($5951, $5952, Kind$Constructor$new$($5929, _args$13, _inds$14));\n                                var $5938 = $5954;\n                                break;\n                        };\n                        var $5930 = $5938;\n                        break;\n                };\n                var $5922 = $5930;\n                break;\n        };\n        return $5922;\n    };\n    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);\n\n    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {\n        var $5955 = ({\n            _: 'Kind.Datatype.new',\n            'name': _name$1,\n            'pars': _pars$2,\n            'inds': _inds$3,\n            'ctrs': _ctrs$4\n        });\n        return $5955;\n    };\n    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);\n\n    function Kind$Parser$datatype$(_idx$1, _code$2) {\n        var self = Kind$Parser$text$(\"type \", _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $5957 = self.idx;\n                var $5958 = self.code;\n                var $5959 = self.err;\n                var $5960 = Parser$Reply$error$($5957, $5958, $5959);\n                var $5956 = $5960;\n                break;\n            case 'Parser.Reply.value':\n                var $5961 = self.idx;\n                var $5962 = self.code;\n                var self = Kind$Parser$name1$($5961, $5962);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $5964 = self.idx;\n                        var $5965 = self.code;\n                        var $5966 = self.err;\n                        var $5967 = Parser$Reply$error$($5964, $5965, $5966);\n                        var $5963 = $5967;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $5968 = self.idx;\n                        var $5969 = self.code;\n                        var $5970 = self.val;\n                        var self = Parser$maybe$(Kind$Parser$binder(\":\"), $5968, $5969);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $5972 = self.idx;\n                                var $5973 = self.code;\n                                var $5974 = self.err;\n                                var $5975 = Parser$Reply$error$($5972, $5973, $5974);\n                                var $5971 = $5975;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $5976 = self.idx;\n                                var $5977 = self.code;\n                                var $5978 = self.val;\n                                var self = Parser$maybe$((_idx$12 => _code$13 => {\n                                    var self = Kind$Parser$text$(\"~\", _idx$12, _code$13);\n                                    switch (self._) {\n                                        case 'Parser.Reply.error':\n                                            var $5981 = self.idx;\n                                            var $5982 = self.code;\n                                            var $5983 = self.err;\n                                            var $5984 = Parser$Reply$error$($5981, $5982, $5983);\n                                            var $5980 = $5984;\n                                            break;\n                                        case 'Parser.Reply.value':\n                                            var $5985 = self.idx;\n                                            var $5986 = self.code;\n                                            var $5987 = Kind$Parser$binder$(\":\", $5985, $5986);\n                                            var $5980 = $5987;\n                                            break;\n                                    };\n                                    return $5980;\n                                }), $5976, $5977);\n                                switch (self._) {\n                                    case 'Parser.Reply.error':\n                                        var $5988 = self.idx;\n                                        var $5989 = self.code;\n                                        var $5990 = self.err;\n                                        var $5991 = Parser$Reply$error$($5988, $5989, $5990);\n                                        var $5979 = $5991;\n                                        break;\n                                    case 'Parser.Reply.value':\n                                        var $5992 = self.idx;\n                                        var $5993 = self.code;\n                                        var $5994 = self.val;\n                                        var _pars$15 = Maybe$default$($5978, List$nil);\n                                        var _inds$16 = Maybe$default$($5994, List$nil);\n                                        var self = Kind$Parser$text$(\"{\", $5992, $5993);\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $5996 = self.idx;\n                                                var $5997 = self.code;\n                                                var $5998 = self.err;\n                                                var $5999 = Parser$Reply$error$($5996, $5997, $5998);\n                                                var $5995 = $5999;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $6000 = self.idx;\n                                                var $6001 = self.code;\n                                                var self = Parser$until$(Kind$Parser$text(\"}\"), Kind$Parser$item(Kind$Parser$constructor($5970)))($6000)($6001);\n                                                switch (self._) {\n                                                    case 'Parser.Reply.error':\n                                                        var $6003 = self.idx;\n                                                        var $6004 = self.code;\n                                                        var $6005 = self.err;\n                                                        var $6006 = Parser$Reply$error$($6003, $6004, $6005);\n                                                        var $6002 = $6006;\n                                                        break;\n                                                    case 'Parser.Reply.value':\n                                                        var $6007 = self.idx;\n                                                        var $6008 = self.code;\n                                                        var $6009 = self.val;\n                                                        var $6010 = Parser$Reply$value$($6007, $6008, Kind$Datatype$new$($5970, _pars$15, _inds$16, $6009));\n                                                        var $6002 = $6010;\n                                                        break;\n                                                };\n                                                var $5995 = $6002;\n                                                break;\n                                        };\n                                        var $5979 = $5995;\n                                        break;\n                                };\n                                var $5971 = $5979;\n                                break;\n                        };\n                        var $5963 = $5971;\n                        break;\n                };\n                var $5956 = $5963;\n                break;\n        };\n        return $5956;\n    };\n    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);\n\n    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {\n        var self = _inds$3;\n        switch (self._) {\n            case 'List.cons':\n                var $6012 = self.head;\n                var $6013 = self.tail;\n                var self = $6012;\n                switch (self._) {\n                    case 'Kind.Binder.new':\n                        var $6015 = self.eras;\n                        var $6016 = self.name;\n                        var $6017 = self.term;\n                        var $6018 = Kind$Term$all$($6015, \"\", $6016, $6017, (_s$9 => _x$10 => {\n                            var $6019 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $6013);\n                            return $6019;\n                        }));\n                        var $6014 = $6018;\n                        break;\n                };\n                var $6011 = $6014;\n                break;\n            case 'List.nil':\n                var self = _type$1;\n                switch (self._) {\n                    case 'Kind.Datatype.new':\n                        var $6021 = self.pars;\n                        var $6022 = self.inds;\n                        var _slf$8 = Kind$Term$ref$(_name$2);\n                        var _slf$9 = (() => {\n                            var $6025 = _slf$8;\n                            var $6026 = $6021;\n                            let _slf$10 = $6025;\n                            let _v$9;\n                            while ($6026._ === 'List.cons') {\n                                _v$9 = $6026.head;\n                                var $6025 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {\n                                    var self = _v$9;\n                                    switch (self._) {\n                                        case 'Kind.Binder.new':\n                                            var $6027 = self.name;\n                                            var $6028 = $6027;\n                                            return $6028;\n                                    };\n                                })()));\n                                _slf$10 = $6025;\n                                $6026 = $6026.tail;\n                            }\n                            return _slf$10;\n                        })();\n                        var _slf$10 = (() => {\n                            var $6030 = _slf$9;\n                            var $6031 = $6022;\n                            let _slf$11 = $6030;\n                            let _v$10;\n                            while ($6031._ === 'List.cons') {\n                                _v$10 = $6031.head;\n                                var $6030 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {\n                                    var self = _v$10;\n                                    switch (self._) {\n                                        case 'Kind.Binder.new':\n                                            var $6032 = self.name;\n                                            var $6033 = $6032;\n                                            return $6033;\n                                    };\n                                })()));\n                                _slf$11 = $6030;\n                                $6031 = $6031.tail;\n                            }\n                            return _slf$11;\n                        })();\n                        var $6023 = Kind$Term$all$(Bool$false, \"\", \"\", _slf$10, (_s$11 => _x$12 => {\n                            var $6034 = Kind$Term$typ;\n                            return $6034;\n                        }));\n                        var $6020 = $6023;\n                        break;\n                };\n                var $6011 = $6020;\n                break;\n        };\n        return $6011;\n    };\n    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);\n\n    function Kind$Datatype$build_term$motive$(_type$1) {\n        var self = _type$1;\n        switch (self._) {\n            case 'Kind.Datatype.new':\n                var $6036 = self.name;\n                var $6037 = self.inds;\n                var $6038 = Kind$Datatype$build_term$motive$go$(_type$1, $6036, $6037);\n                var $6035 = $6038;\n                break;\n        };\n        return $6035;\n    };\n    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);\n\n    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {\n        var self = _args$3;\n        switch (self._) {\n            case 'List.cons':\n                var $6040 = self.head;\n                var $6041 = self.tail;\n                var self = $6040;\n                switch (self._) {\n                    case 'Kind.Binder.new':\n                        var $6043 = self.eras;\n                        var $6044 = self.name;\n                        var $6045 = self.term;\n                        var _eras$9 = $6043;\n                        var _name$10 = $6044;\n                        var _xtyp$11 = $6045;\n                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6041);\n                        var $6046 = Kind$Term$all$(_eras$9, \"\", _name$10, _xtyp$11, (_s$13 => _x$14 => {\n                            var $6047 = _body$12;\n                            return $6047;\n                        }));\n                        var $6042 = $6046;\n                        break;\n                };\n                var $6039 = $6042;\n                break;\n            case 'List.nil':\n                var self = _type$1;\n                switch (self._) {\n                    case 'Kind.Datatype.new':\n                        var $6049 = self.name;\n                        var $6050 = self.pars;\n                        var self = _ctor$2;\n                        switch (self._) {\n                            case 'Kind.Constructor.new':\n                                var $6052 = self.name;\n                                var $6053 = self.args;\n                                var $6054 = self.inds;\n                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$(\"P\"));\n                                var _ret$12 = (() => {\n                                    var $6057 = _ret$11;\n                                    var $6058 = $6054;\n                                    let _ret$13 = $6057;\n                                    let _v$12;\n                                    while ($6058._ === 'List.cons') {\n                                        _v$12 = $6058.head;\n                                        var $6057 = Kind$Term$app$(_ret$13, (() => {\n                                            var self = _v$12;\n                                            switch (self._) {\n                                                case 'Kind.Binder.new':\n                                                    var $6059 = self.term;\n                                                    var $6060 = $6059;\n                                                    return $6060;\n                                            };\n                                        })());\n                                        _ret$13 = $6057;\n                                        $6058 = $6058.tail;\n                                    }\n                                    return _ret$13;\n                                })();\n                                var _ctr$13 = String$flatten$(List$cons$($6049, List$cons$(Kind$Name$read$(\".\"), List$cons$($6052, List$nil))));\n                                var _slf$14 = Kind$Term$ref$(_ctr$13);\n                                var _slf$15 = (() => {\n                                    var $6062 = _slf$14;\n                                    var $6063 = $6050;\n                                    let _slf$16 = $6062;\n                                    let _v$15;\n                                    while ($6063._ === 'List.cons') {\n                                        _v$15 = $6063.head;\n                                        var $6062 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {\n                                            var self = _v$15;\n                                            switch (self._) {\n                                                case 'Kind.Binder.new':\n                                                    var $6064 = self.name;\n                                                    var $6065 = $6064;\n                                                    return $6065;\n                                            };\n                                        })()));\n                                        _slf$16 = $6062;\n                                        $6063 = $6063.tail;\n                                    }\n                                    return _slf$16;\n                                })();\n                                var _slf$16 = (() => {\n                                    var $6067 = _slf$15;\n                                    var $6068 = $6053;\n                                    let _slf$17 = $6067;\n                                    let _v$16;\n                                    while ($6068._ === 'List.cons') {\n                                        _v$16 = $6068.head;\n                                        var $6067 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {\n                                            var self = _v$16;\n                                            switch (self._) {\n                                                case 'Kind.Binder.new':\n                                                    var $6069 = self.name;\n                                                    var $6070 = $6069;\n                                                    return $6070;\n                                            };\n                                        })()));\n                                        _slf$17 = $6067;\n                                        $6068 = $6068.tail;\n                                    }\n                                    return _slf$17;\n                                })();\n                                var $6055 = Kind$Term$app$(_ret$12, _slf$16);\n                                var $6051 = $6055;\n                                break;\n                        };\n                        var $6048 = $6051;\n                        break;\n                };\n                var $6039 = $6048;\n                break;\n        };\n        return $6039;\n    };\n    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);\n\n    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {\n        var self = _ctor$2;\n        switch (self._) {\n            case 'Kind.Constructor.new':\n                var $6072 = self.args;\n                var $6073 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6072);\n                var $6071 = $6073;\n                break;\n        };\n        return $6071;\n    };\n    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);\n\n    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {\n        var self = _ctrs$3;\n        switch (self._) {\n            case 'List.cons':\n                var $6075 = self.head;\n                var $6076 = self.tail;\n                var self = $6075;\n                switch (self._) {\n                    case 'Kind.Constructor.new':\n                        var $6078 = self.name;\n                        var $6079 = Kind$Term$all$(Bool$false, \"\", $6078, Kind$Datatype$build_term$constructor$(_type$1, $6075), (_s$9 => _x$10 => {\n                            var $6080 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $6076);\n                            return $6080;\n                        }));\n                        var $6077 = $6079;\n                        break;\n                };\n                var $6074 = $6077;\n                break;\n            case 'List.nil':\n                var self = _type$1;\n                switch (self._) {\n                    case 'Kind.Datatype.new':\n                        var $6082 = self.inds;\n                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$(\"P\"));\n                        var _ret$9 = (() => {\n                            var $6085 = _ret$8;\n                            var $6086 = $6082;\n                            let _ret$10 = $6085;\n                            let _v$9;\n                            while ($6086._ === 'List.cons') {\n                                _v$9 = $6086.head;\n                                var $6085 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {\n                                    var self = _v$9;\n                                    switch (self._) {\n                                        case 'Kind.Binder.new':\n                                            var $6087 = self.name;\n                                            var $6088 = $6087;\n                                            return $6088;\n                                    };\n                                })()));\n                                _ret$10 = $6085;\n                                $6086 = $6086.tail;\n                            }\n                            return _ret$10;\n                        })();\n                        var $6083 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + \".Self\")));\n                        var $6081 = $6083;\n                        break;\n                };\n                var $6074 = $6081;\n                break;\n        };\n        return $6074;\n    };\n    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);\n\n    function Kind$Datatype$build_term$constructors$(_type$1) {\n        var self = _type$1;\n        switch (self._) {\n            case 'Kind.Datatype.new':\n                var $6090 = self.name;\n                var $6091 = self.ctrs;\n                var $6092 = Kind$Datatype$build_term$constructors$go$(_type$1, $6090, $6091);\n                var $6089 = $6092;\n                break;\n        };\n        return $6089;\n    };\n    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);\n\n    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {\n        var self = _pars$3;\n        switch (self._) {\n            case 'List.cons':\n                var $6094 = self.head;\n                var $6095 = self.tail;\n                var self = $6094;\n                switch (self._) {\n                    case 'Kind.Binder.new':\n                        var $6097 = self.name;\n                        var $6098 = Kind$Term$lam$($6097, (_x$10 => {\n                            var $6099 = Kind$Datatype$build_term$go$(_type$1, _name$2, $6095, _inds$4);\n                            return $6099;\n                        }));\n                        var $6096 = $6098;\n                        break;\n                };\n                var $6093 = $6096;\n                break;\n            case 'List.nil':\n                var self = _inds$4;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6101 = self.head;\n                        var $6102 = self.tail;\n                        var self = $6101;\n                        switch (self._) {\n                            case 'Kind.Binder.new':\n                                var $6104 = self.name;\n                                var $6105 = Kind$Term$lam$($6104, (_x$10 => {\n                                    var $6106 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $6102);\n                                    return $6106;\n                                }));\n                                var $6103 = $6105;\n                                break;\n                        };\n                        var $6100 = $6103;\n                        break;\n                    case 'List.nil':\n                        var $6107 = Kind$Term$all$(Bool$true, (_name$2 + \".Self\"), Kind$Name$read$(\"P\"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {\n                            var $6108 = Kind$Datatype$build_term$constructors$(_type$1);\n                            return $6108;\n                        }));\n                        var $6100 = $6107;\n                        break;\n                };\n                var $6093 = $6100;\n                break;\n        };\n        return $6093;\n    };\n    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);\n\n    function Kind$Datatype$build_term$(_type$1) {\n        var self = _type$1;\n        switch (self._) {\n            case 'Kind.Datatype.new':\n                var $6110 = self.name;\n                var $6111 = self.pars;\n                var $6112 = self.inds;\n                var $6113 = Kind$Datatype$build_term$go$(_type$1, $6110, $6111, $6112);\n                var $6109 = $6113;\n                break;\n        };\n        return $6109;\n    };\n    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);\n\n    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {\n        var self = _pars$3;\n        switch (self._) {\n            case 'List.cons':\n                var $6115 = self.head;\n                var $6116 = self.tail;\n                var self = $6115;\n                switch (self._) {\n                    case 'Kind.Binder.new':\n                        var $6118 = self.name;\n                        var $6119 = self.term;\n                        var $6120 = Kind$Term$all$(Bool$false, \"\", $6118, $6119, (_s$10 => _x$11 => {\n                            var $6121 = Kind$Datatype$build_type$go$(_type$1, _name$2, $6116, _inds$4);\n                            return $6121;\n                        }));\n                        var $6117 = $6120;\n                        break;\n                };\n                var $6114 = $6117;\n                break;\n            case 'List.nil':\n                var self = _inds$4;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6123 = self.head;\n                        var $6124 = self.tail;\n                        var self = $6123;\n                        switch (self._) {\n                            case 'Kind.Binder.new':\n                                var $6126 = self.name;\n                                var $6127 = self.term;\n                                var $6128 = Kind$Term$all$(Bool$false, \"\", $6126, $6127, (_s$10 => _x$11 => {\n                                    var $6129 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $6124);\n                                    return $6129;\n                                }));\n                                var $6125 = $6128;\n                                break;\n                        };\n                        var $6122 = $6125;\n                        break;\n                    case 'List.nil':\n                        var $6130 = Kind$Term$typ;\n                        var $6122 = $6130;\n                        break;\n                };\n                var $6114 = $6122;\n                break;\n        };\n        return $6114;\n    };\n    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);\n\n    function Kind$Datatype$build_type$(_type$1) {\n        var self = _type$1;\n        switch (self._) {\n            case 'Kind.Datatype.new':\n                var $6132 = self.name;\n                var $6133 = self.pars;\n                var $6134 = self.inds;\n                var $6135 = Kind$Datatype$build_type$go$(_type$1, $6132, $6133, $6134);\n                var $6131 = $6135;\n                break;\n        };\n        return $6131;\n    };\n    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);\n\n    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {\n        var self = _ctrs$3;\n        switch (self._) {\n            case 'List.cons':\n                var $6137 = self.head;\n                var $6138 = self.tail;\n                var self = $6137;\n                switch (self._) {\n                    case 'Kind.Constructor.new':\n                        var $6140 = self.name;\n                        var $6141 = Kind$Term$lam$($6140, (_x$9 => {\n                            var $6142 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6138);\n                            return $6142;\n                        }));\n                        var $6139 = $6141;\n                        break;\n                };\n                var $6136 = $6139;\n                break;\n            case 'List.nil':\n                var self = _ctor$2;\n                switch (self._) {\n                    case 'Kind.Constructor.new':\n                        var $6144 = self.name;\n                        var $6145 = self.args;\n                        var _ret$7 = Kind$Term$ref$($6144);\n                        var _ret$8 = (() => {\n                            var $6148 = _ret$7;\n                            var $6149 = $6145;\n                            let _ret$9 = $6148;\n                            let _arg$8;\n                            while ($6149._ === 'List.cons') {\n                                _arg$8 = $6149.head;\n                                var $6148 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {\n                                    var self = _arg$8;\n                                    switch (self._) {\n                                        case 'Kind.Binder.new':\n                                            var $6150 = self.name;\n                                            var $6151 = $6150;\n                                            return $6151;\n                                    };\n                                })()));\n                                _ret$9 = $6148;\n                                $6149 = $6149.tail;\n                            }\n                            return _ret$9;\n                        })();\n                        var $6146 = _ret$8;\n                        var $6143 = $6146;\n                        break;\n                };\n                var $6136 = $6143;\n                break;\n        };\n        return $6136;\n    };\n    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);\n\n    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {\n        var self = _type$1;\n        switch (self._) {\n            case 'Kind.Datatype.new':\n                var $6153 = self.ctrs;\n                var $6154 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6153);\n                var $6152 = $6154;\n                break;\n        };\n        return $6152;\n    };\n    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);\n\n    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {\n        var self = _pars$4;\n        switch (self._) {\n            case 'List.cons':\n                var $6156 = self.head;\n                var $6157 = self.tail;\n                var self = $6156;\n                switch (self._) {\n                    case 'Kind.Binder.new':\n                        var $6159 = self.name;\n                        var $6160 = Kind$Term$lam$($6159, (_x$11 => {\n                            var $6161 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $6157, _args$5);\n                            return $6161;\n                        }));\n                        var $6158 = $6160;\n                        break;\n                };\n                var $6155 = $6158;\n                break;\n            case 'List.nil':\n                var self = _args$5;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6163 = self.head;\n                        var $6164 = self.tail;\n                        var self = $6163;\n                        switch (self._) {\n                            case 'Kind.Binder.new':\n                                var $6166 = self.name;\n                                var $6167 = Kind$Term$lam$($6166, (_x$11 => {\n                                    var $6168 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $6164);\n                                    return $6168;\n                                }));\n                                var $6165 = $6167;\n                                break;\n                        };\n                        var $6162 = $6165;\n                        break;\n                    case 'List.nil':\n                        var $6169 = Kind$Term$lam$(Kind$Name$read$(\"P\"), (_x$6 => {\n                            var $6170 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);\n                            return $6170;\n                        }));\n                        var $6162 = $6169;\n                        break;\n                };\n                var $6155 = $6162;\n                break;\n        };\n        return $6155;\n    };\n    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);\n\n    function Kind$Constructor$build_term$(_type$1, _ctor$2) {\n        var self = _type$1;\n        switch (self._) {\n            case 'Kind.Datatype.new':\n                var $6172 = self.name;\n                var $6173 = self.pars;\n                var self = _ctor$2;\n                switch (self._) {\n                    case 'Kind.Constructor.new':\n                        var $6175 = self.args;\n                        var $6176 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $6172, $6173, $6175);\n                        var $6174 = $6176;\n                        break;\n                };\n                var $6171 = $6174;\n                break;\n        };\n        return $6171;\n    };\n    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);\n\n    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {\n        var self = _pars$4;\n        switch (self._) {\n            case 'List.cons':\n                var $6178 = self.head;\n                var $6179 = self.tail;\n                var self = $6178;\n                switch (self._) {\n                    case 'Kind.Binder.new':\n                        var $6181 = self.eras;\n                        var $6182 = self.name;\n                        var $6183 = self.term;\n                        var $6184 = Kind$Term$all$($6181, \"\", $6182, $6183, (_s$11 => _x$12 => {\n                            var $6185 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $6179, _args$5);\n                            return $6185;\n                        }));\n                        var $6180 = $6184;\n                        break;\n                };\n                var $6177 = $6180;\n                break;\n            case 'List.nil':\n                var self = _args$5;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6187 = self.head;\n                        var $6188 = self.tail;\n                        var self = $6187;\n                        switch (self._) {\n                            case 'Kind.Binder.new':\n                                var $6190 = self.eras;\n                                var $6191 = self.name;\n                                var $6192 = self.term;\n                                var $6193 = Kind$Term$all$($6190, \"\", $6191, $6192, (_s$11 => _x$12 => {\n                                    var $6194 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $6188);\n                                    return $6194;\n                                }));\n                                var $6189 = $6193;\n                                break;\n                        };\n                        var $6186 = $6189;\n                        break;\n                    case 'List.nil':\n                        var self = _type$1;\n                        switch (self._) {\n                            case 'Kind.Datatype.new':\n                                var $6196 = self.pars;\n                                var self = _ctor$2;\n                                switch (self._) {\n                                    case 'Kind.Constructor.new':\n                                        var $6198 = self.inds;\n                                        var _type$13 = Kind$Term$ref$(_name$3);\n                                        var _type$14 = (() => {\n                                            var $6201 = _type$13;\n                                            var $6202 = $6196;\n                                            let _type$15 = $6201;\n                                            let _v$14;\n                                            while ($6202._ === 'List.cons') {\n                                                _v$14 = $6202.head;\n                                                var $6201 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {\n                                                    var self = _v$14;\n                                                    switch (self._) {\n                                                        case 'Kind.Binder.new':\n                                                            var $6203 = self.name;\n                                                            var $6204 = $6203;\n                                                            return $6204;\n                                                    };\n                                                })()));\n                                                _type$15 = $6201;\n                                                $6202 = $6202.tail;\n                                            }\n                                            return _type$15;\n                                        })();\n                                        var _type$15 = (() => {\n                                            var $6206 = _type$14;\n                                            var $6207 = $6198;\n                                            let _type$16 = $6206;\n                                            let _v$15;\n                                            while ($6207._ === 'List.cons') {\n                                                _v$15 = $6207.head;\n                                                var $6206 = Kind$Term$app$(_type$16, (() => {\n                                                    var self = _v$15;\n                                                    switch (self._) {\n                                                        case 'Kind.Binder.new':\n                                                            var $6208 = self.term;\n                                                            var $6209 = $6208;\n                                                            return $6209;\n                                                    };\n                                                })());\n                                                _type$16 = $6206;\n                                                $6207 = $6207.tail;\n                                            }\n                                            return _type$16;\n                                        })();\n                                        var $6199 = _type$15;\n                                        var $6197 = $6199;\n                                        break;\n                                };\n                                var $6195 = $6197;\n                                break;\n                        };\n                        var $6186 = $6195;\n                        break;\n                };\n                var $6177 = $6186;\n                break;\n        };\n        return $6177;\n    };\n    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);\n\n    function Kind$Constructor$build_type$(_type$1, _ctor$2) {\n        var self = _type$1;\n        switch (self._) {\n            case 'Kind.Datatype.new':\n                var $6211 = self.name;\n                var $6212 = self.pars;\n                var self = _ctor$2;\n                switch (self._) {\n                    case 'Kind.Constructor.new':\n                        var $6214 = self.args;\n                        var $6215 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $6211, $6212, $6214);\n                        var $6213 = $6215;\n                        break;\n                };\n                var $6210 = $6213;\n                break;\n        };\n        return $6210;\n    };\n    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);\n\n    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {\n        var self = Kind$Parser$init$(_idx$4, _code$5);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $6217 = self.idx;\n                var $6218 = self.code;\n                var $6219 = self.err;\n                var $6220 = Parser$Reply$error$($6217, $6218, $6219);\n                var $6216 = $6220;\n                break;\n            case 'Parser.Reply.value':\n                var $6221 = self.idx;\n                var $6222 = self.code;\n                var $6223 = self.val;\n                var self = Kind$Parser$datatype$($6221, $6222);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $6225 = self.idx;\n                        var $6226 = self.code;\n                        var $6227 = self.err;\n                        var $6228 = Parser$Reply$error$($6225, $6226, $6227);\n                        var $6224 = $6228;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $6229 = self.idx;\n                        var $6230 = self.code;\n                        var $6231 = self.val;\n                        var self = Kind$Parser$stop$($6223, $6229, $6230);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $6233 = self.idx;\n                                var $6234 = self.code;\n                                var $6235 = self.err;\n                                var $6236 = Parser$Reply$error$($6233, $6234, $6235);\n                                var $6232 = $6236;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $6237 = self.idx;\n                                var $6238 = self.code;\n                                var $6239 = self.val;\n                                var self = $6231;\n                                switch (self._) {\n                                    case 'Kind.Datatype.new':\n                                        var $6241 = self.name;\n                                        var $6242 = self.pars;\n                                        var $6243 = self.inds;\n                                        var $6244 = self.ctrs;\n                                        var _term$19 = Kind$Datatype$build_term$($6231);\n                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {\n                                            var $6246 = (_x$20 + '1');\n                                            return $6246;\n                                        }), _term$19);\n                                        var _type$21 = Kind$Datatype$build_type$($6231);\n                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {\n                                            var $6247 = (_x$22 + '0');\n                                            return $6247;\n                                        }), _type$21);\n                                        var _arit$23 = ((list_length($6242)) + (list_length($6243)));\n                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $6239, $6241, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);\n                                        var _defs$25 = List$fold$($6244, _defs$24, (_ctr$25 => _defs$26 => {\n                                            var _typ_name$27 = $6241;\n                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {\n                                                var self = _ctr$25;\n                                                switch (self._) {\n                                                    case 'Kind.Constructor.new':\n                                                        var $6249 = self.args;\n                                                        var $6250 = $6249;\n                                                        return $6250;\n                                                };\n                                            })())));\n                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$(\".\"), List$cons$((() => {\n                                                var self = _ctr$25;\n                                                switch (self._) {\n                                                    case 'Kind.Constructor.new':\n                                                        var $6251 = self.name;\n                                                        var $6252 = $6251;\n                                                        return $6252;\n                                                };\n                                            })(), List$nil))));\n                                            var _ctr_term$30 = Kind$Constructor$build_term$($6231, _ctr$25);\n                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {\n                                                var $6253 = (_x$31 + '1');\n                                                return $6253;\n                                            }), _ctr_term$30);\n                                            var _ctr_type$32 = Kind$Constructor$build_type$($6231, _ctr$25);\n                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {\n                                                var $6254 = (_x$33 + '0');\n                                                return $6254;\n                                            }), _ctr_type$32);\n                                            var $6248 = Kind$Map$def$(_file$1, _code$2, $6239, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);\n                                            return $6248;\n                                        }));\n                                        var $6245 = (_idx$26 => _code$27 => {\n                                            var $6255 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);\n                                            return $6255;\n                                        });\n                                        var $6240 = $6245;\n                                        break;\n                                };\n                                var $6240 = $6240($6237)($6238);\n                                var $6232 = $6240;\n                                break;\n                        };\n                        var $6224 = $6232;\n                        break;\n                };\n                var $6216 = $6224;\n                break;\n        };\n        return $6216;\n    };\n    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);\n\n    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {\n        var self = Kind$Parser$spaces(_idx$4)(_code$5);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $6257 = self.idx;\n                var $6258 = self.code;\n                var $6259 = self.err;\n                var $6260 = Parser$Reply$error$($6257, $6258, $6259);\n                var $6256 = $6260;\n                break;\n            case 'Parser.Reply.value':\n                var $6261 = self.idx;\n                var $6262 = self.code;\n                var self = Parser$eof$($6261, $6262);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $6264 = self.idx;\n                        var $6265 = self.code;\n                        var $6266 = self.err;\n                        var $6267 = Parser$Reply$error$($6264, $6265, $6266);\n                        var $6263 = $6267;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $6268 = self.idx;\n                        var $6269 = self.code;\n                        var $6270 = Parser$Reply$value$($6268, $6269, _defs$3);\n                        var $6263 = $6270;\n                        break;\n                };\n                var $6256 = $6263;\n                break;\n        };\n        return $6256;\n    };\n    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);\n\n    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {\n        var self = Parser$is_eof$(_idx$4, _code$5);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $6272 = self.idx;\n                var $6273 = self.code;\n                var $6274 = self.err;\n                var $6275 = Parser$Reply$error$($6272, $6273, $6274);\n                var $6271 = $6275;\n                break;\n            case 'Parser.Reply.value':\n                var $6276 = self.idx;\n                var $6277 = self.code;\n                var $6278 = self.val;\n                var self = $6278;\n                if (self) {\n                    var $6280 = (_idx$9 => _code$10 => {\n                        var $6281 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);\n                        return $6281;\n                    });\n                    var $6279 = $6280;\n                } else {\n                    var $6282 = (_idx$9 => _code$10 => {\n                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);\n                        switch (self._) {\n                            case 'Parser.Reply.error':\n                                var $6284 = self.idx;\n                                var $6285 = self.code;\n                                var $6286 = self.err;\n                                var $6287 = Parser$Reply$error$($6284, $6285, $6286);\n                                var $6283 = $6287;\n                                break;\n                            case 'Parser.Reply.value':\n                                var $6288 = self.idx;\n                                var $6289 = self.code;\n                                var $6290 = self.val;\n                                var $6291 = Kind$Parser$file$(_file$1, _code$2, $6290, $6288, $6289);\n                                var $6283 = $6291;\n                                break;\n                        };\n                        return $6283;\n                    });\n                    var $6279 = $6282;\n                };\n                var $6279 = $6279($6276)($6277);\n                var $6271 = $6279;\n                break;\n        };\n        return $6271;\n    };\n    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);\n\n    function String$join$go$(_sep$1, _list$2, _fst$3) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $6293 = self.head;\n                var $6294 = self.tail;\n                var $6295 = String$flatten$(List$cons$((() => {\n                    var self = _fst$3;\n                    if (self) {\n                        var $6296 = \"\";\n                        return $6296;\n                    } else {\n                        var $6297 = _sep$1;\n                        return $6297;\n                    };\n                })(), List$cons$($6293, List$cons$(String$join$go$(_sep$1, $6294, Bool$false), List$nil))));\n                var $6292 = $6295;\n                break;\n            case 'List.nil':\n                var $6298 = \"\";\n                var $6292 = $6298;\n                break;\n        };\n        return $6292;\n    };\n    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);\n\n    function String$join$(_sep$1, _list$2) {\n        var $6299 = String$join$go$(_sep$1, _list$2, Bool$true);\n        return $6299;\n    };\n    const String$join = x0 => x1 => String$join$(x0, x1);\n\n    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {\n        var $6300 = String$join$(\"\\u{a}\", _res$3);\n        return $6300;\n    };\n    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);\n\n    function Maybe$extract$(_m$2, _a$4, _f$5) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $6302 = self.value;\n                var $6303 = _f$5($6302);\n                var $6301 = $6303;\n                break;\n            case 'Maybe.none':\n                var $6304 = _a$4;\n                var $6301 = $6304;\n                break;\n        };\n        return $6301;\n    };\n    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);\n\n    function Nat$is_zero$(_n$1) {\n        var self = _n$1;\n        if (self === 0n) {\n            var $6306 = Bool$true;\n            var $6305 = $6306;\n        } else {\n            var $6307 = (self - 1n);\n            var $6308 = Bool$false;\n            var $6305 = $6308;\n        };\n        return $6305;\n    };\n    const Nat$is_zero = x0 => Nat$is_zero$(x0);\n\n    function Nat$double$(_n$1) {\n        var self = _n$1;\n        if (self === 0n) {\n            var $6310 = Nat$zero;\n            var $6309 = $6310;\n        } else {\n            var $6311 = (self - 1n);\n            var $6312 = Nat$succ$(Nat$succ$(Nat$double$($6311)));\n            var $6309 = $6312;\n        };\n        return $6309;\n    };\n    const Nat$double = x0 => Nat$double$(x0);\n\n    function String$pad_right$(_size$1, _chr$2, _str$3) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $6314 = _str$3;\n            var $6313 = $6314;\n        } else {\n            var $6315 = (self - 1n);\n            var self = _str$3;\n            if (self.length === 0) {\n                var $6317 = String$cons$(_chr$2, String$pad_right$($6315, _chr$2, \"\"));\n                var $6316 = $6317;\n            } else {\n                var $6318 = self.charCodeAt(0);\n                var $6319 = self.slice(1);\n                var $6320 = String$cons$($6318, String$pad_right$($6315, _chr$2, $6319));\n                var $6316 = $6320;\n            };\n            var $6313 = $6316;\n        };\n        return $6313;\n    };\n    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);\n\n    function String$pad_left$(_size$1, _chr$2, _str$3) {\n        var $6321 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));\n        return $6321;\n    };\n    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);\n\n    function Kind$Code$color$(_col$1, _str$2) {\n        var $6322 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));\n        return $6322;\n    };\n    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);\n\n    function List$take$(_n$2, _xs$3) {\n        var self = _xs$3;\n        switch (self._) {\n            case 'List.cons':\n                var $6324 = self.head;\n                var $6325 = self.tail;\n                var self = _n$2;\n                if (self === 0n) {\n                    var $6327 = List$nil;\n                    var $6326 = $6327;\n                } else {\n                    var $6328 = (self - 1n);\n                    var $6329 = List$cons$($6324, List$take$($6328, $6325));\n                    var $6326 = $6329;\n                };\n                var $6323 = $6326;\n                break;\n            case 'List.nil':\n                var $6330 = List$nil;\n                var $6323 = $6330;\n                break;\n        };\n        return $6323;\n    };\n    const List$take = x0 => x1 => List$take$(x0, x1);\n\n    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {\n        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({\n            ctr: 'TCO',\n            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]\n        });\n        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);\n        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];\n        while (true) {\n            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;\n            var R = (() => {\n                var _spa$9 = 3n;\n                var self = _code$1;\n                if (self.length === 0) {\n                    var $6332 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));\n                    var $6331 = $6332;\n                } else {\n                    var $6333 = self.charCodeAt(0);\n                    var $6334 = self.slice(1);\n                    var self = ($6333 === 10);\n                    if (self) {\n                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);\n                        var self = _stp$12;\n                        if (self) {\n                            var $6337 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));\n                            var $6336 = $6337;\n                        } else {\n                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));\n                            var self = _ix1$3;\n                            if (self === 0n) {\n                                var self = _lft$6;\n                                switch (self._) {\n                                    case 'Maybe.some':\n                                        var $6340 = self.value;\n                                        var $6341 = Maybe$some$(Nat$pred$($6340));\n                                        var $6339 = $6341;\n                                        break;\n                                    case 'Maybe.none':\n                                        var $6342 = Maybe$some$(_spa$9);\n                                        var $6339 = $6342;\n                                        break;\n                                };\n                                var _lft$14 = $6339;\n                            } else {\n                                var $6343 = (self - 1n);\n                                var $6344 = _lft$6;\n                                var _lft$14 = $6344;\n                            };\n                            var _ix0$15 = Nat$pred$(_ix0$2);\n                            var _ix1$16 = Nat$pred$(_ix1$3);\n                            var _col$17 = 0n;\n                            var _row$18 = Nat$succ$(_row$5);\n                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);\n                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(\" | \", List$nil))));\n                            var $6338 = Kind$Code$highlight$go$($6334, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);\n                            var $6336 = $6338;\n                        };\n                        var $6335 = $6336;\n                    } else {\n                        var _chr$12 = String$cons$($6333, String$nil);\n                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));\n                        if (self) {\n                            var $6346 = String$reverse$(Kind$Code$color$(\"31\", Kind$Code$color$(\"4\", _chr$12)));\n                            var _chr$13 = $6346;\n                        } else {\n                            var $6347 = _chr$12;\n                            var _chr$13 = $6347;\n                        };\n                        var self = (_ix0$2 === 1n);\n                        if (self) {\n                            var $6348 = List$take$(_spa$9, _res$8);\n                            var _res$14 = $6348;\n                        } else {\n                            var $6349 = _res$8;\n                            var _res$14 = $6349;\n                        };\n                        var _ix0$15 = Nat$pred$(_ix0$2);\n                        var _ix1$16 = Nat$pred$(_ix1$3);\n                        var _col$17 = Nat$succ$(_col$4);\n                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));\n                        var $6345 = Kind$Code$highlight$go$($6334, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);\n                        var $6335 = $6345;\n                    };\n                    var $6331 = $6335;\n                };\n                return $6331;\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);\n\n    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {\n        var $6350 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$(\"   1 | \"), List$nil);\n        return $6350;\n    };\n    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);\n\n    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {\n        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $6352 = self.idx;\n                var $6353 = self.err;\n                var _err$7 = $6353;\n                var _hig$8 = Kind$Code$highlight$(_code$2, $6352, Nat$succ$($6352));\n                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$(\"\\u{a}\", List$cons$(_hig$8, List$nil))));\n                var $6354 = Either$left$(_str$9);\n                var $6351 = $6354;\n                break;\n            case 'Parser.Reply.value':\n                var $6355 = self.val;\n                var $6356 = Either$right$($6355);\n                var $6351 = $6356;\n                break;\n        };\n        return $6351;\n    };\n    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);\n\n    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {\n        var self = _files$2;\n        switch (self._) {\n            case 'List.cons':\n                var $6358 = self.head;\n                var $6359 = self.tail;\n                var $6360 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                    var $6361 = _m$bind$6;\n                    return $6361;\n                }))(IO$get_file$($6358))((_code$6 => {\n                    var _read$7 = Kind$Defs$read$($6358, _code$6, _defs$3);\n                    var self = _read$7;\n                    switch (self._) {\n                        case 'Either.right':\n                            var $6363 = self.value;\n                            var _defs$9 = $6363;\n                            var self = Kind$Map$get$(_name$1, _defs$9);\n                            switch (self._) {\n                                case 'Maybe.none':\n                                    var $6365 = Kind$Synth$load$go$(_name$1, $6359, _defs$9);\n                                    var $6364 = $6365;\n                                    break;\n                                case 'Maybe.some':\n                                    var $6366 = IO$monad$((_m$bind$11 => _m$pure$12 => {\n                                        var $6367 = _m$pure$12;\n                                        return $6367;\n                                    }))(Maybe$some$(_defs$9));\n                                    var $6364 = $6366;\n                                    break;\n                            };\n                            var $6362 = $6364;\n                            break;\n                        case 'Either.left':\n                            var $6368 = Kind$Synth$load$go$(_name$1, $6359, _defs$3);\n                            var $6362 = $6368;\n                            break;\n                    };\n                    return $6362;\n                }));\n                var $6357 = $6360;\n                break;\n            case 'List.nil':\n                var $6369 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                    var $6370 = _m$pure$5;\n                    return $6370;\n                }))(Maybe$none);\n                var $6357 = $6369;\n                break;\n        };\n        return $6357;\n    };\n    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);\n\n    function Kind$Synth$files_of$make$(_names$1, _last$2) {\n        var self = _names$1;\n        switch (self._) {\n            case 'List.cons':\n                var $6372 = self.head;\n                var $6373 = self.tail;\n                var _head$5 = (_last$2 + ($6372 + \".kind\"));\n                var _tail$6 = Kind$Synth$files_of$make$($6373, (_last$2 + ($6372 + \"/\")));\n                var $6374 = List$cons$(_head$5, _tail$6);\n                var $6371 = $6374;\n                break;\n            case 'List.nil':\n                var $6375 = List$nil;\n                var $6371 = $6375;\n                break;\n        };\n        return $6371;\n    };\n    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);\n\n    function String$length$go$(_xs$1, _n$2) {\n        var String$length$go$ = (_xs$1, _n$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _n$2]\n        });\n        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);\n        var arg = [_xs$1, _n$2];\n        while (true) {\n            let [_xs$1, _n$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                if (self.length === 0) {\n                    var $6376 = _n$2;\n                    return $6376;\n                } else {\n                    var $6377 = self.charCodeAt(0);\n                    var $6378 = self.slice(1);\n                    var $6379 = String$length$go$($6378, Nat$succ$(_n$2));\n                    return $6379;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$length$go = x0 => x1 => String$length$go$(x0, x1);\n\n    function String$length$(_xs$1) {\n        var $6380 = String$length$go$(_xs$1, 0n);\n        return $6380;\n    };\n    const String$length = x0 => String$length$(x0);\n\n    function String$split$go$(_xs$1, _match$2, _last$3) {\n        var self = _xs$1;\n        if (self.length === 0) {\n            var $6382 = List$cons$(_last$3, List$nil);\n            var $6381 = $6382;\n        } else {\n            var $6383 = self.charCodeAt(0);\n            var $6384 = self.slice(1);\n            var self = String$starts_with$(_xs$1, _match$2);\n            if (self) {\n                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);\n                var $6386 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, \"\"));\n                var $6385 = $6386;\n            } else {\n                var _next$6 = String$cons$($6383, String$nil);\n                var $6387 = String$split$go$($6384, _match$2, (_last$3 + _next$6));\n                var $6385 = $6387;\n            };\n            var $6381 = $6385;\n        };\n        return $6381;\n    };\n    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);\n\n    function String$split$(_xs$1, _match$2) {\n        var $6388 = String$split$go$(_xs$1, _match$2, \"\");\n        return $6388;\n    };\n    const String$split = x0 => x1 => String$split$(x0, x1);\n\n    function Kind$Synth$files_of$(_name$1) {\n        var $6389 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, \".\"), \"\"));\n        return $6389;\n    };\n    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);\n\n    function Kind$Synth$load$(_name$1, _defs$2) {\n        var $6390 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $6391 = _m$bind$3;\n            return $6391;\n        }))(Kind$Synth$load$cached$(List$cons$(_name$1, List$nil), _defs$2))((_cached_defs$3 => {\n            var self = _cached_defs$3;\n            switch (self._) {\n                case 'Maybe.some':\n                    var $6393 = self.value;\n                    var $6394 = IO$monad$((_m$bind$5 => _m$pure$6 => {\n                        var $6395 = _m$pure$6;\n                        return $6395;\n                    }))(Maybe$some$($6393));\n                    var $6392 = $6394;\n                    break;\n                case 'Maybe.none':\n                    var $6396 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);\n                    var $6392 = $6396;\n                    break;\n            };\n            return $6392;\n        }));\n        return $6390;\n    };\n    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);\n    const Kind$Status$wait = ({\n        _: 'Kind.Status.wait'\n    });\n\n    function Kind$Check$(_V$1) {\n        var $6397 = null;\n        return $6397;\n    };\n    const Kind$Check = x0 => Kind$Check$(x0);\n\n    function Kind$Check$result$(_value$2, _errors$3) {\n        var $6398 = ({\n            _: 'Kind.Check.result',\n            'value': _value$2,\n            'errors': _errors$3\n        });\n        return $6398;\n    };\n    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);\n\n    function Kind$Error$undefined_reference$(_origin$1, _name$2) {\n        var $6399 = ({\n            _: 'Kind.Error.undefined_reference',\n            'origin': _origin$1,\n            'name': _name$2\n        });\n        return $6399;\n    };\n    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);\n\n    function Kind$Error$waiting$(_name$1) {\n        var $6400 = ({\n            _: 'Kind.Error.waiting',\n            'name': _name$1\n        });\n        return $6400;\n    };\n    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);\n\n    function Kind$Error$indirect$(_name$1) {\n        var $6401 = ({\n            _: 'Kind.Error.indirect',\n            'name': _name$1\n        });\n        return $6401;\n    };\n    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);\n\n    function Maybe$mapped$(_m$2, _f$4) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $6403 = self.value;\n                var $6404 = Maybe$some$(_f$4($6403));\n                var $6402 = $6404;\n                break;\n            case 'Maybe.none':\n                var $6405 = Maybe$none;\n                var $6402 = $6405;\n                break;\n        };\n        return $6402;\n    };\n    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);\n\n    function Kind$MPath$o$(_path$1) {\n        var $6406 = Maybe$mapped$(_path$1, Kind$Path$o);\n        return $6406;\n    };\n    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);\n\n    function Kind$MPath$i$(_path$1) {\n        var $6407 = Maybe$mapped$(_path$1, Kind$Path$i);\n        return $6407;\n    };\n    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);\n\n    function Kind$Error$patch$(_path$1, _term$2) {\n        var $6408 = ({\n            _: 'Kind.Error.patch',\n            'path': _path$1,\n            'term': _term$2\n        });\n        return $6408;\n    };\n    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);\n\n    function Kind$MPath$to_bits$(_path$1) {\n        var self = _path$1;\n        switch (self._) {\n            case 'Maybe.some':\n                var $6410 = self.value;\n                var $6411 = $6410(Bits$e);\n                var $6409 = $6411;\n                break;\n            case 'Maybe.none':\n                var $6412 = Bits$e;\n                var $6409 = $6412;\n                break;\n        };\n        return $6409;\n    };\n    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);\n\n    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {\n        var $6413 = ({\n            _: 'Kind.Error.type_mismatch',\n            'origin': _origin$1,\n            'expected': _expected$2,\n            'detected': _detected$3,\n            'context': _context$4\n        });\n        return $6413;\n    };\n    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);\n\n    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {\n        var $6414 = ({\n            _: 'Kind.Error.show_goal',\n            'name': _name$1,\n            'dref': _dref$2,\n            'verb': _verb$3,\n            'goal': _goal$4,\n            'context': _context$5\n        });\n        return $6414;\n    };\n    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);\n\n    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {\n        var self = _vars$1;\n        switch (self._) {\n            case 'List.cons':\n                var $6416 = self.head;\n                var $6417 = self.tail;\n                var self = $6416;\n                switch (self._) {\n                    case 'Kind.Ann.new':\n                        var $6419 = self.name;\n                        var $6420 = self.term;\n                        var $6421 = self.type;\n                        var self = $6421;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $6423 = self.value;\n                                var $6424 = Kind$Check$result$(Maybe$some$(Maybe$some$($6423)), List$nil);\n                                var self = $6424;\n                                break;\n                            case 'Maybe.none':\n                                var self = Kind$Term$check$($6420, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $6426 = self.value;\n                                        var $6427 = self.errors;\n                                        var self = $6426;\n                                        switch (self._) {\n                                            case 'Maybe.some':\n                                                var $6429 = self.value;\n                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($6429)), List$nil);\n                                                switch (self._) {\n                                                    case 'Kind.Check.result':\n                                                        var $6431 = self.value;\n                                                        var $6432 = self.errors;\n                                                        var $6433 = Kind$Check$result$($6431, List$concat$($6427, $6432));\n                                                        var $6430 = $6433;\n                                                        break;\n                                                };\n                                                var $6428 = $6430;\n                                                break;\n                                            case 'Maybe.none':\n                                                var $6434 = Kind$Check$result$(Maybe$none, $6427);\n                                                var $6428 = $6434;\n                                                break;\n                                        };\n                                        var $6425 = $6428;\n                                        break;\n                                };\n                                var self = $6425;\n                                break;\n                        };\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $6435 = self.value;\n                                var $6436 = self.errors;\n                                var self = $6435;\n                                switch (self._) {\n                                    case 'Maybe.some':\n                                        var $6438 = self.value;\n                                        var self = Kind$Term$check$infer_with_types$($6417, _defs$2, _ctx$3, _path$4, _orig$5);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6440 = self.value;\n                                                var $6441 = self.errors;\n                                                var self = $6440;\n                                                switch (self._) {\n                                                    case 'Maybe.some':\n                                                        var $6443 = self.value;\n                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($6419, $6420, $6438), $6443)), List$nil);\n                                                        switch (self._) {\n                                                            case 'Kind.Check.result':\n                                                                var $6445 = self.value;\n                                                                var $6446 = self.errors;\n                                                                var $6447 = Kind$Check$result$($6445, List$concat$($6441, $6446));\n                                                                var $6444 = $6447;\n                                                                break;\n                                                        };\n                                                        var $6442 = $6444;\n                                                        break;\n                                                    case 'Maybe.none':\n                                                        var $6448 = Kind$Check$result$(Maybe$none, $6441);\n                                                        var $6442 = $6448;\n                                                        break;\n                                                };\n                                                var self = $6442;\n                                                break;\n                                        };\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6449 = self.value;\n                                                var $6450 = self.errors;\n                                                var $6451 = Kind$Check$result$($6449, List$concat$($6436, $6450));\n                                                var $6439 = $6451;\n                                                break;\n                                        };\n                                        var $6437 = $6439;\n                                        break;\n                                    case 'Maybe.none':\n                                        var $6452 = Kind$Check$result$(Maybe$none, $6436);\n                                        var $6437 = $6452;\n                                        break;\n                                };\n                                var $6422 = $6437;\n                                break;\n                        };\n                        var $6418 = $6422;\n                        break;\n                };\n                var $6415 = $6418;\n                break;\n            case 'List.nil':\n                var $6453 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);\n                var $6415 = $6453;\n                break;\n        };\n        return $6415;\n    };\n    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);\n\n    function Kind$Term$normalize$(_term$1, _defs$2) {\n        var self = Kind$Term$reduce$(_term$1, _defs$2);\n        switch (self._) {\n            case 'Kind.Term.var':\n                var $6455 = self.name;\n                var $6456 = self.indx;\n                var $6457 = Kind$Term$var$($6455, $6456);\n                var $6454 = $6457;\n                break;\n            case 'Kind.Term.ref':\n                var $6458 = self.name;\n                var $6459 = Kind$Term$ref$($6458);\n                var $6454 = $6459;\n                break;\n            case 'Kind.Term.all':\n                var $6460 = self.eras;\n                var $6461 = self.self;\n                var $6462 = self.name;\n                var $6463 = self.xtyp;\n                var $6464 = self.body;\n                var $6465 = Kind$Term$all$($6460, $6461, $6462, Kind$Term$normalize$($6463, _defs$2), (_s$8 => _x$9 => {\n                    var $6466 = Kind$Term$normalize$($6464(_s$8)(_x$9), _defs$2);\n                    return $6466;\n                }));\n                var $6454 = $6465;\n                break;\n            case 'Kind.Term.lam':\n                var $6467 = self.name;\n                var $6468 = self.body;\n                var $6469 = Kind$Term$lam$($6467, (_x$5 => {\n                    var $6470 = Kind$Term$normalize$($6468(_x$5), _defs$2);\n                    return $6470;\n                }));\n                var $6454 = $6469;\n                break;\n            case 'Kind.Term.app':\n                var $6471 = self.func;\n                var $6472 = self.argm;\n                var $6473 = Kind$Term$app$(Kind$Term$normalize$($6471, _defs$2), Kind$Term$normalize$($6472, _defs$2));\n                var $6454 = $6473;\n                break;\n            case 'Kind.Term.let':\n                var $6474 = self.name;\n                var $6475 = self.expr;\n                var $6476 = self.body;\n                var $6477 = Kind$Term$let$($6474, Kind$Term$normalize$($6475, _defs$2), (_x$6 => {\n                    var $6478 = Kind$Term$normalize$($6476(_x$6), _defs$2);\n                    return $6478;\n                }));\n                var $6454 = $6477;\n                break;\n            case 'Kind.Term.def':\n                var $6479 = self.name;\n                var $6480 = self.expr;\n                var $6481 = self.body;\n                var $6482 = Kind$Term$def$($6479, Kind$Term$normalize$($6480, _defs$2), (_x$6 => {\n                    var $6483 = Kind$Term$normalize$($6481(_x$6), _defs$2);\n                    return $6483;\n                }));\n                var $6454 = $6482;\n                break;\n            case 'Kind.Term.ann':\n                var $6484 = self.done;\n                var $6485 = self.term;\n                var $6486 = self.type;\n                var $6487 = Kind$Term$ann$($6484, Kind$Term$normalize$($6485, _defs$2), Kind$Term$normalize$($6486, _defs$2));\n                var $6454 = $6487;\n                break;\n            case 'Kind.Term.gol':\n                var $6488 = self.name;\n                var $6489 = self.dref;\n                var $6490 = self.verb;\n                var $6491 = Kind$Term$gol$($6488, $6489, $6490);\n                var $6454 = $6491;\n                break;\n            case 'Kind.Term.hol':\n                var $6492 = self.path;\n                var $6493 = Kind$Term$hol$($6492);\n                var $6454 = $6493;\n                break;\n            case 'Kind.Term.nat':\n                var $6494 = self.natx;\n                var $6495 = Kind$Term$nat$($6494);\n                var $6454 = $6495;\n                break;\n            case 'Kind.Term.chr':\n                var $6496 = self.chrx;\n                var $6497 = Kind$Term$chr$($6496);\n                var $6454 = $6497;\n                break;\n            case 'Kind.Term.str':\n                var $6498 = self.strx;\n                var $6499 = Kind$Term$str$($6498);\n                var $6454 = $6499;\n                break;\n            case 'Kind.Term.ori':\n                var $6500 = self.expr;\n                var $6501 = Kind$Term$normalize$($6500, _defs$2);\n                var $6454 = $6501;\n                break;\n            case 'Kind.Term.typ':\n                var $6502 = Kind$Term$typ;\n                var $6454 = $6502;\n                break;\n            case 'Kind.Term.cse':\n                var $6503 = _term$1;\n                var $6454 = $6503;\n                break;\n        };\n        return $6454;\n    };\n    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);\n\n    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {\n        var self = _wyth$1;\n        switch (self._) {\n            case 'List.cons':\n                var $6505 = self.head;\n                var $6506 = self.tail;\n                var self = $6505;\n                switch (self._) {\n                    case 'Kind.Ann.new':\n                        var $6508 = self.name;\n                        var $6509 = self.type;\n                        var $6510 = Kind$Term$all$(Bool$false, \"\", $6508, Maybe$default$($6509, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {\n                            var $6511 = Kind$Term$desugar_cse$motive$($6506, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));\n                            return $6511;\n                        }));\n                        var $6507 = $6510;\n                        break;\n                };\n                var $6504 = $6507;\n                break;\n            case 'List.nil':\n                var self = _moti$2;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $6513 = self.value;\n                        var $6514 = $6513;\n                        var $6512 = $6514;\n                        break;\n                    case 'Maybe.none':\n                        var self = _rtyp$6;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $6516 = self.value;\n                                var $6517 = Kind$Term$normalize$($6516, Kind$Map$new);\n                                var $6515 = $6517;\n                                break;\n                            case 'Maybe.none':\n                                var $6518 = Kind$Term$hol$(Bits$e);\n                                var $6515 = $6518;\n                                break;\n                        };\n                        var $6512 = $6515;\n                        break;\n                };\n                var $6504 = $6512;\n                break;\n        };\n        return $6504;\n    };\n    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);\n\n    function List$tail$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $6520 = self.tail;\n                var $6521 = $6520;\n                var $6519 = $6521;\n                break;\n            case 'List.nil':\n                var $6522 = List$nil;\n                var $6519 = $6522;\n                break;\n        };\n        return $6519;\n    };\n    const List$tail = x0 => List$tail$(x0);\n\n    function Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {\n        var Kind$Term$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({\n            ctr: 'TCO',\n            arg: [_expr$1, _term$2, _args$3, _defs$4]\n        });\n        var Kind$Term$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);\n        var arg = [_expr$1, _term$2, _args$3, _defs$4];\n        while (true) {\n            let [_expr$1, _term$2, _args$3, _defs$4] = arg;\n            var R = (() => {\n                var self = Kind$Term$reduce$(_term$2, _defs$4);\n                switch (self._) {\n                    case 'Kind.Term.app':\n                        var $6523 = self.func;\n                        var $6524 = self.argm;\n                        var $6525 = Kind$Term$SmartMotive$vals$cont$(_expr$1, $6523, List$cons$($6524, _args$3), _defs$4);\n                        return $6525;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.hol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                    case 'Kind.Term.ori':\n                        var $6526 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));\n                        return $6526;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Term$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$vals$cont$(x0, x1, x2, x3);\n\n    function Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {\n        var Kind$Term$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({\n            ctr: 'TCO',\n            arg: [_expr$1, _type$2, _defs$3]\n        });\n        var Kind$Term$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3);\n        var arg = [_expr$1, _type$2, _defs$3];\n        while (true) {\n            let [_expr$1, _type$2, _defs$3] = arg;\n            var R = (() => {\n                var self = Kind$Term$reduce$(_type$2, _defs$3);\n                switch (self._) {\n                    case 'Kind.Term.all':\n                        var $6527 = self.body;\n                        var $6528 = Kind$Term$SmartMotive$vals$(_expr$1, $6527(Kind$Term$typ)(Kind$Term$typ), _defs$3);\n                        return $6528;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.hol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                    case 'Kind.Term.ori':\n                        var $6529 = Kind$Term$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);\n                        return $6529;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Term$SmartMotive$vals = x0 => x1 => x2 => Kind$Term$SmartMotive$vals$(x0, x1, x2);\n\n    function Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {\n        var Kind$Term$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({\n            ctr: 'TCO',\n            arg: [_name$1, _term$2, _binds$3, _defs$4]\n        });\n        var Kind$Term$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);\n        var arg = [_name$1, _term$2, _binds$3, _defs$4];\n        while (true) {\n            let [_name$1, _term$2, _binds$3, _defs$4] = arg;\n            var R = (() => {\n                var self = Kind$Term$reduce$(_term$2, _defs$4);\n                switch (self._) {\n                    case 'Kind.Term.all':\n                        var $6530 = self.self;\n                        var $6531 = self.name;\n                        var $6532 = self.body;\n                        var $6533 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6532(Kind$Term$ref$($6530))(Kind$Term$ref$($6531)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(\".\", List$cons$($6531, List$nil)))), _binds$3), _defs$4);\n                        return $6533;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.hol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                    case 'Kind.Term.ori':\n                        var $6534 = List$cons$(_name$1, List$tail$(_binds$3));\n                        return $6534;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Term$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$nams$cont$(x0, x1, x2, x3);\n\n    function Kind$Term$SmartMotive$nams$(_name$1, _type$2, _defs$3) {\n        var self = Kind$Term$reduce$(_type$2, _defs$3);\n        switch (self._) {\n            case 'Kind.Term.all':\n                var $6536 = self.xtyp;\n                var $6537 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6536, List$nil, _defs$3);\n                var $6535 = $6537;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.ref':\n            case 'Kind.Term.typ':\n            case 'Kind.Term.lam':\n            case 'Kind.Term.app':\n            case 'Kind.Term.let':\n            case 'Kind.Term.def':\n            case 'Kind.Term.ann':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n            case 'Kind.Term.cse':\n            case 'Kind.Term.ori':\n                var $6538 = List$nil;\n                var $6535 = $6538;\n                break;\n        };\n        return $6535;\n    };\n    const Kind$Term$SmartMotive$nams = x0 => x1 => x2 => Kind$Term$SmartMotive$nams$(x0, x1, x2);\n\n    function List$zip$(_as$3, _bs$4) {\n        var self = _as$3;\n        switch (self._) {\n            case 'List.cons':\n                var $6540 = self.head;\n                var $6541 = self.tail;\n                var self = _bs$4;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6543 = self.head;\n                        var $6544 = self.tail;\n                        var $6545 = List$cons$(Pair$new$($6540, $6543), List$zip$($6541, $6544));\n                        var $6542 = $6545;\n                        break;\n                    case 'List.nil':\n                        var $6546 = List$nil;\n                        var $6542 = $6546;\n                        break;\n                };\n                var $6539 = $6542;\n                break;\n            case 'List.nil':\n                var $6547 = List$nil;\n                var $6539 = $6547;\n                break;\n        };\n        return $6539;\n    };\n    const List$zip = x0 => x1 => List$zip$(x0, x1);\n    const Nat$gte = a0 => a1 => (a0 >= a1);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function Kind$Term$serialize$go$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.var':\n                var $6549 = self.indx;\n                var self = ($6549 >= _init$3);\n                if (self) {\n                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $6549 <= 0n ? 0n : _depth$2 - $6549)))));\n                    var $6551 = (((_name$8(_x$5) + '1') + '0') + '0');\n                    var $6550 = $6551;\n                } else {\n                    var _name$8 = a1 => (a1 + (nat_to_bits($6549)));\n                    var $6552 = (((_name$8(_x$5) + '0') + '1') + '0');\n                    var $6550 = $6552;\n                };\n                var $6548 = $6550;\n                break;\n            case 'Kind.Term.ref':\n                var $6553 = self.name;\n                var _name$7 = a1 => (a1 + (kind_name_to_bits($6553)));\n                var $6554 = (((_name$7(_x$5) + '0') + '0') + '0');\n                var $6548 = $6554;\n                break;\n            case 'Kind.Term.all':\n                var $6555 = self.eras;\n                var $6556 = self.self;\n                var $6557 = self.name;\n                var $6558 = self.xtyp;\n                var $6559 = self.body;\n                var self = $6555;\n                if (self) {\n                    var $6561 = Bits$i;\n                    var _eras$11 = $6561;\n                } else {\n                    var $6562 = Bits$o;\n                    var _eras$11 = $6562;\n                };\n                var _self$12 = a1 => (a1 + (kind_name_to_bits($6556)));\n                var _xtyp$13 = Kind$Term$serialize$go($6558)(_depth$2)(_init$3)(_diff$4);\n                var _body$14 = Kind$Term$serialize$go($6559(Kind$Term$var$($6556, _depth$2))(Kind$Term$var$($6557, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);\n                var $6560 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');\n                var $6548 = $6560;\n                break;\n            case 'Kind.Term.lam':\n                var $6563 = self.name;\n                var $6564 = self.body;\n                var _body$8 = Kind$Term$serialize$go($6564(Kind$Term$var$($6563, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);\n                var $6565 = (((_body$8(_x$5) + '1') + '0') + '1');\n                var $6548 = $6565;\n                break;\n            case 'Kind.Term.app':\n                var $6566 = self.func;\n                var $6567 = self.argm;\n                var _func$8 = Kind$Term$serialize$go($6566)(_depth$2)(_init$3)(_diff$4);\n                var _argm$9 = Kind$Term$serialize$go($6567)(_depth$2)(_init$3)(_diff$4);\n                var $6568 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');\n                var $6548 = $6568;\n                break;\n            case 'Kind.Term.let':\n                var $6569 = self.name;\n                var $6570 = self.expr;\n                var $6571 = self.body;\n                var _expr$9 = Kind$Term$serialize$go($6570)(_depth$2)(_init$3)(_diff$4);\n                var _body$10 = Kind$Term$serialize$go($6571(Kind$Term$var$($6569, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);\n                var $6572 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');\n                var $6548 = $6572;\n                break;\n            case 'Kind.Term.def':\n                var $6573 = self.expr;\n                var $6574 = self.body;\n                var $6575 = Kind$Term$serialize$go$($6574($6573), _depth$2, _init$3, _diff$4, _x$5);\n                var $6548 = $6575;\n                break;\n            case 'Kind.Term.ann':\n                var $6576 = self.term;\n                var $6577 = Kind$Term$serialize$go$($6576, _depth$2, _init$3, _diff$4, _x$5);\n                var $6548 = $6577;\n                break;\n            case 'Kind.Term.gol':\n                var $6578 = self.name;\n                var _name$9 = a1 => (a1 + (kind_name_to_bits($6578)));\n                var $6579 = (((_name$9(_x$5) + '0') + '0') + '0');\n                var $6548 = $6579;\n                break;\n            case 'Kind.Term.nat':\n                var $6580 = self.natx;\n                var $6581 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($6580), _depth$2, _init$3, _diff$4, _x$5);\n                var $6548 = $6581;\n                break;\n            case 'Kind.Term.chr':\n                var $6582 = self.chrx;\n                var $6583 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($6582), _depth$2, _init$3, _diff$4, _x$5);\n                var $6548 = $6583;\n                break;\n            case 'Kind.Term.str':\n                var $6584 = self.strx;\n                var $6585 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($6584), _depth$2, _init$3, _diff$4, _x$5);\n                var $6548 = $6585;\n                break;\n            case 'Kind.Term.ori':\n                var $6586 = self.expr;\n                var $6587 = Kind$Term$serialize$go$($6586, _depth$2, _init$3, _diff$4, _x$5);\n                var $6548 = $6587;\n                break;\n            case 'Kind.Term.typ':\n                var $6588 = (((_x$5 + '1') + '1') + '0');\n                var $6548 = $6588;\n                break;\n            case 'Kind.Term.hol':\n                var $6589 = _x$5;\n                var $6548 = $6589;\n                break;\n            case 'Kind.Term.cse':\n                var $6590 = _diff$4(_x$5);\n                var $6548 = $6590;\n                break;\n        };\n        return $6548;\n    };\n    const Kind$Term$serialize$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$go$(x0, x1, x2, x3, x4);\n\n    function Kind$Term$serialize$(_term$1, _depth$2, _side$3) {\n        var self = _side$3;\n        if (self) {\n            var $6592 = Bits$o;\n            var _diff$4 = $6592;\n        } else {\n            var $6593 = Bits$i;\n            var _diff$4 = $6593;\n        };\n        var $6591 = Kind$Term$serialize$go$(_term$1, _depth$2, _depth$2, _diff$4, Bits$e);\n        return $6591;\n    };\n    const Kind$Term$serialize = x0 => x1 => x2 => Kind$Term$serialize$(x0, x1, x2);\n    const Bits$eql = a0 => a1 => (a1 === a0);\n\n    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {\n        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, Bool$false);\n        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, Bool$true);\n        var $6594 = (_bh$5 === _ah$4);\n        return $6594;\n    };\n    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);\n\n    function Kind$Term$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {\n        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);\n        if (self) {\n            var $6596 = _to$3;\n            var $6595 = $6596;\n        } else {\n            var self = _term$1;\n            switch (self._) {\n                case 'Kind.Term.var':\n                    var $6598 = self.name;\n                    var $6599 = self.indx;\n                    var $6600 = Kind$Term$var$($6598, $6599);\n                    var $6597 = $6600;\n                    break;\n                case 'Kind.Term.ref':\n                    var $6601 = self.name;\n                    var $6602 = Kind$Term$ref$($6601);\n                    var $6597 = $6602;\n                    break;\n                case 'Kind.Term.all':\n                    var $6603 = self.eras;\n                    var $6604 = self.self;\n                    var $6605 = self.name;\n                    var $6606 = self.xtyp;\n                    var $6607 = self.body;\n                    var _xtyp$10 = Kind$Term$SmartMotive$replace$($6606, _from$2, _to$3, _lv$4);\n                    var _body$11 = $6607(Kind$Term$ref$($6604))(Kind$Term$ref$($6605));\n                    var _body$12 = Kind$Term$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));\n                    var $6608 = Kind$Term$all$($6603, $6604, $6605, _xtyp$10, (_s$13 => _x$14 => {\n                        var $6609 = _body$12;\n                        return $6609;\n                    }));\n                    var $6597 = $6608;\n                    break;\n                case 'Kind.Term.lam':\n                    var $6610 = self.name;\n                    var $6611 = self.body;\n                    var _body$7 = $6611(Kind$Term$ref$($6610));\n                    var _body$8 = Kind$Term$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));\n                    var $6612 = Kind$Term$lam$($6610, (_x$9 => {\n                        var $6613 = _body$8;\n                        return $6613;\n                    }));\n                    var $6597 = $6612;\n                    break;\n                case 'Kind.Term.app':\n                    var $6614 = self.func;\n                    var $6615 = self.argm;\n                    var _func$7 = Kind$Term$SmartMotive$replace$($6614, _from$2, _to$3, _lv$4);\n                    var _argm$8 = Kind$Term$SmartMotive$replace$($6615, _from$2, _to$3, _lv$4);\n                    var $6616 = Kind$Term$app$(_func$7, _argm$8);\n                    var $6597 = $6616;\n                    break;\n                case 'Kind.Term.let':\n                    var $6617 = self.name;\n                    var $6618 = self.expr;\n                    var $6619 = self.body;\n                    var _expr$8 = Kind$Term$SmartMotive$replace$($6618, _from$2, _to$3, _lv$4);\n                    var _body$9 = $6619(Kind$Term$ref$($6617));\n                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));\n                    var $6620 = Kind$Term$let$($6617, _expr$8, (_x$11 => {\n                        var $6621 = _body$10;\n                        return $6621;\n                    }));\n                    var $6597 = $6620;\n                    break;\n                case 'Kind.Term.def':\n                    var $6622 = self.name;\n                    var $6623 = self.expr;\n                    var $6624 = self.body;\n                    var _expr$8 = Kind$Term$SmartMotive$replace$($6623, _from$2, _to$3, _lv$4);\n                    var _body$9 = $6624(Kind$Term$ref$($6622));\n                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));\n                    var $6625 = Kind$Term$def$($6622, _expr$8, (_x$11 => {\n                        var $6626 = _body$10;\n                        return $6626;\n                    }));\n                    var $6597 = $6625;\n                    break;\n                case 'Kind.Term.ann':\n                    var $6627 = self.done;\n                    var $6628 = self.term;\n                    var $6629 = self.type;\n                    var _term$8 = Kind$Term$SmartMotive$replace$($6628, _from$2, _to$3, _lv$4);\n                    var _type$9 = Kind$Term$SmartMotive$replace$($6629, _from$2, _to$3, _lv$4);\n                    var $6630 = Kind$Term$ann$($6627, _term$8, _type$9);\n                    var $6597 = $6630;\n                    break;\n                case 'Kind.Term.ori':\n                    var $6631 = self.expr;\n                    var $6632 = Kind$Term$SmartMotive$replace$($6631, _from$2, _to$3, _lv$4);\n                    var $6597 = $6632;\n                    break;\n                case 'Kind.Term.typ':\n                    var $6633 = Kind$Term$typ;\n                    var $6597 = $6633;\n                    break;\n                case 'Kind.Term.gol':\n                case 'Kind.Term.hol':\n                case 'Kind.Term.nat':\n                case 'Kind.Term.chr':\n                case 'Kind.Term.str':\n                case 'Kind.Term.cse':\n                    var $6634 = _term$1;\n                    var $6597 = $6634;\n                    break;\n            };\n            var $6595 = $6597;\n        };\n        return $6595;\n    };\n    const Kind$Term$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$replace$(x0, x1, x2, x3);\n\n    function Kind$Term$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {\n        var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2, _type$3, _defs$6);\n        var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1, _type$3, _defs$6);\n        var _subs$9 = List$zip$(_nams$8, _vals$7);\n        var $6635 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {\n            var self = _sub$10;\n            switch (self._) {\n                case 'Pair.new':\n                    var $6637 = self.fst;\n                    var $6638 = self.snd;\n                    var $6639 = Kind$Term$SmartMotive$replace$(_moti$11, $6638, Kind$Term$ref$($6637), _size$5);\n                    var $6636 = $6639;\n                    break;\n            };\n            return $6636;\n        }));\n        return $6635;\n    };\n    const Kind$Term$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$SmartMotive$make$(x0, x1, x2, x3, x4, x5);\n\n    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {\n        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);\n        var self = _moti$2;\n        switch (self._) {\n            case 'Maybe.none':\n                var $6641 = Kind$Term$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);\n                var $6640 = $6641;\n                break;\n            case 'Maybe.some':\n                var $6642 = _done$9;\n                var $6640 = $6642;\n                break;\n        };\n        return $6640;\n    };\n    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);\n\n    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {\n        var self = Kind$Term$reduce$(_type$3, _defs$5);\n        switch (self._) {\n            case 'Kind.Term.all':\n                var $6644 = self.self;\n                var $6645 = self.name;\n                var $6646 = self.body;\n                var $6647 = Kind$Term$lam$((() => {\n                    var self = String$is_empty$($6645);\n                    if (self) {\n                        var $6648 = _name$1;\n                        return $6648;\n                    } else {\n                        var $6649 = String$flatten$(List$cons$(_name$1, List$cons$(\".\", List$cons$($6645, List$nil))));\n                        return $6649;\n                    };\n                })(), (_x$11 => {\n                    var $6650 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $6646(Kind$Term$var$($6644, 0n))(Kind$Term$var$($6645, 0n)), _body$4, _defs$5);\n                    return $6650;\n                }));\n                var $6643 = $6647;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.lam':\n            case 'Kind.Term.app':\n            case 'Kind.Term.ori':\n                var self = _wyth$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6652 = self.head;\n                        var $6653 = self.tail;\n                        var self = $6652;\n                        switch (self._) {\n                            case 'Kind.Ann.new':\n                                var $6655 = self.name;\n                                var $6656 = Kind$Term$lam$($6655, (_x$13 => {\n                                    var $6657 = Kind$Term$desugar_cse$argument$(_name$1, $6653, _type$3, _body$4, _defs$5);\n                                    return $6657;\n                                }));\n                                var $6654 = $6656;\n                                break;\n                        };\n                        var $6651 = $6654;\n                        break;\n                    case 'List.nil':\n                        var $6658 = _body$4;\n                        var $6651 = $6658;\n                        break;\n                };\n                var $6643 = $6651;\n                break;\n            case 'Kind.Term.ref':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n                var self = _wyth$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6660 = self.head;\n                        var $6661 = self.tail;\n                        var self = $6660;\n                        switch (self._) {\n                            case 'Kind.Ann.new':\n                                var $6663 = self.name;\n                                var $6664 = Kind$Term$lam$($6663, (_x$12 => {\n                                    var $6665 = Kind$Term$desugar_cse$argument$(_name$1, $6661, _type$3, _body$4, _defs$5);\n                                    return $6665;\n                                }));\n                                var $6662 = $6664;\n                                break;\n                        };\n                        var $6659 = $6662;\n                        break;\n                    case 'List.nil':\n                        var $6666 = _body$4;\n                        var $6659 = $6666;\n                        break;\n                };\n                var $6643 = $6659;\n                break;\n            case 'Kind.Term.typ':\n                var self = _wyth$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6668 = self.head;\n                        var $6669 = self.tail;\n                        var self = $6668;\n                        switch (self._) {\n                            case 'Kind.Ann.new':\n                                var $6671 = self.name;\n                                var $6672 = Kind$Term$lam$($6671, (_x$11 => {\n                                    var $6673 = Kind$Term$desugar_cse$argument$(_name$1, $6669, _type$3, _body$4, _defs$5);\n                                    return $6673;\n                                }));\n                                var $6670 = $6672;\n                                break;\n                        };\n                        var $6667 = $6670;\n                        break;\n                    case 'List.nil':\n                        var $6674 = _body$4;\n                        var $6667 = $6674;\n                        break;\n                };\n                var $6643 = $6667;\n                break;\n            case 'Kind.Term.let':\n            case 'Kind.Term.def':\n            case 'Kind.Term.ann':\n            case 'Kind.Term.gol':\n                var self = _wyth$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6676 = self.head;\n                        var $6677 = self.tail;\n                        var self = $6676;\n                        switch (self._) {\n                            case 'Kind.Ann.new':\n                                var $6679 = self.name;\n                                var $6680 = Kind$Term$lam$($6679, (_x$14 => {\n                                    var $6681 = Kind$Term$desugar_cse$argument$(_name$1, $6677, _type$3, _body$4, _defs$5);\n                                    return $6681;\n                                }));\n                                var $6678 = $6680;\n                                break;\n                        };\n                        var $6675 = $6678;\n                        break;\n                    case 'List.nil':\n                        var $6682 = _body$4;\n                        var $6675 = $6682;\n                        break;\n                };\n                var $6643 = $6675;\n                break;\n            case 'Kind.Term.cse':\n                var self = _wyth$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $6684 = self.head;\n                        var $6685 = self.tail;\n                        var self = $6684;\n                        switch (self._) {\n                            case 'Kind.Ann.new':\n                                var $6687 = self.name;\n                                var $6688 = Kind$Term$lam$($6687, (_x$17 => {\n                                    var $6689 = Kind$Term$desugar_cse$argument$(_name$1, $6685, _type$3, _body$4, _defs$5);\n                                    return $6689;\n                                }));\n                                var $6686 = $6688;\n                                break;\n                        };\n                        var $6683 = $6686;\n                        break;\n                    case 'List.nil':\n                        var $6690 = _body$4;\n                        var $6683 = $6690;\n                        break;\n                };\n                var $6643 = $6683;\n                break;\n        };\n        return $6643;\n    };\n    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);\n\n    function Maybe$or$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $6692 = self.value;\n                var $6693 = Maybe$some$($6692);\n                var $6691 = $6693;\n                break;\n            case 'Maybe.none':\n                var $6694 = _b$3;\n                var $6691 = $6694;\n                break;\n        };\n        return $6691;\n    };\n    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);\n\n    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {\n        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({\n            ctr: 'TCO',\n            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]\n        });\n        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);\n        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];\n        while (true) {\n            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;\n            var R = (() => {\n                var self = Kind$Term$reduce$(_type$5, _defs$6);\n                switch (self._) {\n                    case 'Kind.Term.all':\n                        var $6695 = self.self;\n                        var $6696 = self.name;\n                        var $6697 = self.xtyp;\n                        var $6698 = self.body;\n                        var _argm$13 = Maybe$or$(Kind$Map$get$($6696, _cses$4), Kind$Map$get$(\"_\", _cses$4));\n                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + (\"_\" + ($6696 + \"_case\")))));\n                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $6697, _argm$14, _defs$6);\n                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);\n                        var _type$17 = $6698(Kind$Term$var$($6695, 0n))(Kind$Term$var$($6696, 0n));\n                        var $6699 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);\n                        return $6699;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.ori':\n                        var _expr$10 = (() => {\n                            var $6702 = _expr$1;\n                            var $6703 = _wyth$3;\n                            let _expr$11 = $6702;\n                            let _defn$10;\n                            while ($6703._ === 'List.cons') {\n                                _defn$10 = $6703.head;\n                                var $6702 = Kind$Term$app$(_expr$11, (() => {\n                                    var self = _defn$10;\n                                    switch (self._) {\n                                        case 'Kind.Ann.new':\n                                            var $6704 = self.term;\n                                            var $6705 = $6704;\n                                            return $6705;\n                                    };\n                                })());\n                                _expr$11 = $6702;\n                                $6703 = $6703.tail;\n                            }\n                            return _expr$11;\n                        })();\n                        var $6700 = _expr$10;\n                        return $6700;\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.hol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                        var _expr$9 = (() => {\n                            var $6708 = _expr$1;\n                            var $6709 = _wyth$3;\n                            let _expr$10 = $6708;\n                            let _defn$9;\n                            while ($6709._ === 'List.cons') {\n                                _defn$9 = $6709.head;\n                                var $6708 = Kind$Term$app$(_expr$10, (() => {\n                                    var self = _defn$9;\n                                    switch (self._) {\n                                        case 'Kind.Ann.new':\n                                            var $6710 = self.term;\n                                            var $6711 = $6710;\n                                            return $6711;\n                                    };\n                                })());\n                                _expr$10 = $6708;\n                                $6709 = $6709.tail;\n                            }\n                            return _expr$10;\n                        })();\n                        var $6706 = _expr$9;\n                        return $6706;\n                    case 'Kind.Term.typ':\n                        var _expr$8 = (() => {\n                            var $6714 = _expr$1;\n                            var $6715 = _wyth$3;\n                            let _expr$9 = $6714;\n                            let _defn$8;\n                            while ($6715._ === 'List.cons') {\n                                _defn$8 = $6715.head;\n                                var $6714 = Kind$Term$app$(_expr$9, (() => {\n                                    var self = _defn$8;\n                                    switch (self._) {\n                                        case 'Kind.Ann.new':\n                                            var $6716 = self.term;\n                                            var $6717 = $6716;\n                                            return $6717;\n                                    };\n                                })());\n                                _expr$9 = $6714;\n                                $6715 = $6715.tail;\n                            }\n                            return _expr$9;\n                        })();\n                        var $6712 = _expr$8;\n                        return $6712;\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                        var _expr$11 = (() => {\n                            var $6720 = _expr$1;\n                            var $6721 = _wyth$3;\n                            let _expr$12 = $6720;\n                            let _defn$11;\n                            while ($6721._ === 'List.cons') {\n                                _defn$11 = $6721.head;\n                                var $6720 = Kind$Term$app$(_expr$12, (() => {\n                                    var self = _defn$11;\n                                    switch (self._) {\n                                        case 'Kind.Ann.new':\n                                            var $6722 = self.term;\n                                            var $6723 = $6722;\n                                            return $6723;\n                                    };\n                                })());\n                                _expr$12 = $6720;\n                                $6721 = $6721.tail;\n                            }\n                            return _expr$12;\n                        })();\n                        var $6718 = _expr$11;\n                        return $6718;\n                    case 'Kind.Term.cse':\n                        var _expr$14 = (() => {\n                            var $6726 = _expr$1;\n                            var $6727 = _wyth$3;\n                            let _expr$15 = $6726;\n                            let _defn$14;\n                            while ($6727._ === 'List.cons') {\n                                _defn$14 = $6727.head;\n                                var $6726 = Kind$Term$app$(_expr$15, (() => {\n                                    var self = _defn$14;\n                                    switch (self._) {\n                                        case 'Kind.Ann.new':\n                                            var $6728 = self.term;\n                                            var $6729 = $6728;\n                                            return $6729;\n                                    };\n                                })());\n                                _expr$15 = $6726;\n                                $6727 = $6727.tail;\n                            }\n                            return _expr$15;\n                        })();\n                        var $6724 = _expr$14;\n                        return $6724;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);\n\n    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {\n        var self = Kind$Term$reduce$(_etyp$6, _defs$8);\n        switch (self._) {\n            case 'Kind.Term.all':\n                var $6731 = self.self;\n                var $6732 = self.name;\n                var $6733 = self.xtyp;\n                var $6734 = self.body;\n                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));\n                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $6733, _moti$15, _defs$8);\n                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);\n                var _type$18 = $6734(Kind$Term$var$($6731, 0n))(Kind$Term$var$($6732, 0n));\n                var $6735 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));\n                var $6730 = $6735;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.ref':\n            case 'Kind.Term.typ':\n            case 'Kind.Term.lam':\n            case 'Kind.Term.app':\n            case 'Kind.Term.let':\n            case 'Kind.Term.def':\n            case 'Kind.Term.ann':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n            case 'Kind.Term.cse':\n            case 'Kind.Term.ori':\n                var $6736 = Maybe$none;\n                var $6730 = $6736;\n                break;\n        };\n        return $6730;\n    };\n    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);\n\n    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {\n        var $6737 = ({\n            _: 'Kind.Error.cant_infer',\n            'origin': _origin$1,\n            'term': _term$2,\n            'context': _context$3\n        });\n        return $6737;\n    };\n    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);\n\n    function BitsSet$has$(_bits$1, _set$2) {\n        var self = (bitsmap_get(_bits$1, _set$2));\n        switch (self._) {\n            case 'Maybe.none':\n                var $6739 = Bool$false;\n                var $6738 = $6739;\n                break;\n            case 'Maybe.some':\n                var $6740 = Bool$true;\n                var $6738 = $6740;\n                break;\n        };\n        return $6738;\n    };\n    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);\n\n    function BitsSet$mut$has$(_bits$1, _set$2) {\n        var $6741 = BitsSet$has$(_bits$1, _set$2);\n        return $6741;\n    };\n    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);\n\n    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {\n        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({\n            ctr: 'TCO',\n            arg: [_term$1, _arity$2]\n        });\n        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);\n        var arg = [_term$1, _arity$2];\n        while (true) {\n            let [_term$1, _arity$2] = arg;\n            var R = (() => {\n                var self = _term$1;\n                switch (self._) {\n                    case 'Kind.Term.var':\n                        var $6742 = self.name;\n                        var $6743 = Maybe$some$(Pair$new$($6742, _arity$2));\n                        return $6743;\n                    case 'Kind.Term.ref':\n                        var $6744 = self.name;\n                        var $6745 = Maybe$some$(Pair$new$($6744, _arity$2));\n                        return $6745;\n                    case 'Kind.Term.app':\n                        var $6746 = self.func;\n                        var $6747 = Kind$Term$equal$extra_holes$funari$($6746, Nat$succ$(_arity$2));\n                        return $6747;\n                    case 'Kind.Term.ori':\n                        var $6748 = self.expr;\n                        var $6749 = Kind$Term$equal$extra_holes$funari$($6748, _arity$2);\n                        return $6749;\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.hol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                        var $6750 = Maybe$none;\n                        return $6750;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);\n\n    function Kind$Term$has_holes$(_term$1) {\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.all':\n                var $6752 = self.xtyp;\n                var $6753 = self.body;\n                var $6754 = (Kind$Term$has_holes$($6752) || Kind$Term$has_holes$($6753(Kind$Term$typ)(Kind$Term$typ)));\n                var $6751 = $6754;\n                break;\n            case 'Kind.Term.lam':\n                var $6755 = self.body;\n                var $6756 = Kind$Term$has_holes$($6755(Kind$Term$typ));\n                var $6751 = $6756;\n                break;\n            case 'Kind.Term.app':\n                var $6757 = self.func;\n                var $6758 = self.argm;\n                var $6759 = (Kind$Term$has_holes$($6757) || Kind$Term$has_holes$($6758));\n                var $6751 = $6759;\n                break;\n            case 'Kind.Term.let':\n                var $6760 = self.expr;\n                var $6761 = self.body;\n                var $6762 = (Kind$Term$has_holes$($6760) || Kind$Term$has_holes$($6761(Kind$Term$typ)));\n                var $6751 = $6762;\n                break;\n            case 'Kind.Term.def':\n                var $6763 = self.expr;\n                var $6764 = self.body;\n                var $6765 = (Kind$Term$has_holes$($6763) || Kind$Term$has_holes$($6764(Kind$Term$typ)));\n                var $6751 = $6765;\n                break;\n            case 'Kind.Term.ann':\n                var $6766 = self.term;\n                var $6767 = self.type;\n                var $6768 = (Kind$Term$has_holes$($6766) || Kind$Term$has_holes$($6767));\n                var $6751 = $6768;\n                break;\n            case 'Kind.Term.ori':\n                var $6769 = self.expr;\n                var $6770 = Kind$Term$has_holes$($6769);\n                var $6751 = $6770;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.ref':\n            case 'Kind.Term.typ':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n            case 'Kind.Term.cse':\n                var $6771 = Bool$false;\n                var $6751 = $6771;\n                break;\n            case 'Kind.Term.hol':\n                var $6772 = Bool$true;\n                var $6751 = $6772;\n                break;\n        };\n        return $6751;\n    };\n    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);\n\n    function Kind$Term$equal$hole$(_path$1, _term$2) {\n        var self = _term$2;\n        switch (self._) {\n            case 'Kind.Term.var':\n            case 'Kind.Term.ref':\n            case 'Kind.Term.typ':\n            case 'Kind.Term.all':\n            case 'Kind.Term.lam':\n            case 'Kind.Term.app':\n            case 'Kind.Term.let':\n            case 'Kind.Term.def':\n            case 'Kind.Term.ann':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n            case 'Kind.Term.cse':\n            case 'Kind.Term.ori':\n                var self = Kind$Term$has_holes$(_term$2);\n                if (self) {\n                    var $6775 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);\n                    var $6774 = $6775;\n                } else {\n                    var $6776 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));\n                    var $6774 = $6776;\n                };\n                var $6773 = $6774;\n                break;\n            case 'Kind.Term.hol':\n                var $6777 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);\n                var $6773 = $6777;\n                break;\n        };\n        return $6773;\n    };\n    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);\n\n    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {\n        var self = _a$1;\n        switch (self._) {\n            case 'Kind.Term.app':\n                var $6779 = self.func;\n                var $6780 = self.argm;\n                var self = _b$2;\n                switch (self._) {\n                    case 'Kind.Term.app':\n                        var $6782 = self.func;\n                        var $6783 = self.argm;\n                        var self = Kind$Term$equal$extra_holes$filler$($6779, $6782);\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $6785 = self.value;\n                                var $6786 = self.errors;\n                                var self = $6785;\n                                switch (self._) {\n                                    case 'Maybe.none':\n                                        var $6788 = Kind$Check$result$(Maybe$none, $6786);\n                                        var $6787 = $6788;\n                                        break;\n                                    case 'Maybe.some':\n                                        var self = Kind$Term$equal$extra_holes$filler$($6780, $6783);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6790 = self.value;\n                                                var $6791 = self.errors;\n                                                var $6792 = Kind$Check$result$($6790, List$concat$($6786, $6791));\n                                                var $6789 = $6792;\n                                                break;\n                                        };\n                                        var $6787 = $6789;\n                                        break;\n                                };\n                                var $6784 = $6787;\n                                break;\n                        };\n                        var $6781 = $6784;\n                        break;\n                    case 'Kind.Term.hol':\n                        var $6793 = self.path;\n                        var self = Kind$Term$equal$hole$($6793, _a$1);\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $6795 = self.value;\n                                var $6796 = self.errors;\n                                var self = $6795;\n                                switch (self._) {\n                                    case 'Maybe.none':\n                                        var $6798 = Kind$Check$result$(Maybe$none, $6796);\n                                        var $6797 = $6798;\n                                        break;\n                                    case 'Maybe.some':\n                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6800 = self.value;\n                                                var $6801 = self.errors;\n                                                var $6802 = Kind$Check$result$($6800, List$concat$($6796, $6801));\n                                                var $6799 = $6802;\n                                                break;\n                                        };\n                                        var $6797 = $6799;\n                                        break;\n                                };\n                                var $6794 = $6797;\n                                break;\n                        };\n                        var $6781 = $6794;\n                        break;\n                    case 'Kind.Term.ori':\n                        var $6803 = self.expr;\n                        var $6804 = Kind$Term$equal$extra_holes$filler$(_a$1, $6803);\n                        var $6781 = $6804;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                        var $6805 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                        var $6781 = $6805;\n                        break;\n                };\n                var $6778 = $6781;\n                break;\n            case 'Kind.Term.hol':\n                var $6806 = self.path;\n                var self = Kind$Term$equal$hole$($6806, _b$2);\n                switch (self._) {\n                    case 'Kind.Check.result':\n                        var $6808 = self.value;\n                        var $6809 = self.errors;\n                        var self = $6808;\n                        switch (self._) {\n                            case 'Maybe.none':\n                                var $6811 = Kind$Check$result$(Maybe$none, $6809);\n                                var $6810 = $6811;\n                                break;\n                            case 'Maybe.some':\n                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $6813 = self.value;\n                                        var $6814 = self.errors;\n                                        var $6815 = Kind$Check$result$($6813, List$concat$($6809, $6814));\n                                        var $6812 = $6815;\n                                        break;\n                                };\n                                var $6810 = $6812;\n                                break;\n                        };\n                        var $6807 = $6810;\n                        break;\n                };\n                var $6778 = $6807;\n                break;\n            case 'Kind.Term.ori':\n                var $6816 = self.expr;\n                var $6817 = Kind$Term$equal$extra_holes$filler$($6816, _b$2);\n                var $6778 = $6817;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.lam':\n                var self = _b$2;\n                switch (self._) {\n                    case 'Kind.Term.hol':\n                        var $6819 = self.path;\n                        var self = Kind$Term$equal$hole$($6819, _a$1);\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $6821 = self.value;\n                                var $6822 = self.errors;\n                                var self = $6821;\n                                switch (self._) {\n                                    case 'Maybe.none':\n                                        var $6824 = Kind$Check$result$(Maybe$none, $6822);\n                                        var $6823 = $6824;\n                                        break;\n                                    case 'Maybe.some':\n                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6826 = self.value;\n                                                var $6827 = self.errors;\n                                                var $6828 = Kind$Check$result$($6826, List$concat$($6822, $6827));\n                                                var $6825 = $6828;\n                                                break;\n                                        };\n                                        var $6823 = $6825;\n                                        break;\n                                };\n                                var $6820 = $6823;\n                                break;\n                        };\n                        var $6818 = $6820;\n                        break;\n                    case 'Kind.Term.ori':\n                        var $6829 = self.expr;\n                        var $6830 = Kind$Term$equal$extra_holes$filler$(_a$1, $6829);\n                        var $6818 = $6830;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                        var $6831 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                        var $6818 = $6831;\n                        break;\n                };\n                var $6778 = $6818;\n                break;\n            case 'Kind.Term.ref':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n                var self = _b$2;\n                switch (self._) {\n                    case 'Kind.Term.hol':\n                        var $6833 = self.path;\n                        var self = Kind$Term$equal$hole$($6833, _a$1);\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $6835 = self.value;\n                                var $6836 = self.errors;\n                                var self = $6835;\n                                switch (self._) {\n                                    case 'Maybe.none':\n                                        var $6838 = Kind$Check$result$(Maybe$none, $6836);\n                                        var $6837 = $6838;\n                                        break;\n                                    case 'Maybe.some':\n                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6840 = self.value;\n                                                var $6841 = self.errors;\n                                                var $6842 = Kind$Check$result$($6840, List$concat$($6836, $6841));\n                                                var $6839 = $6842;\n                                                break;\n                                        };\n                                        var $6837 = $6839;\n                                        break;\n                                };\n                                var $6834 = $6837;\n                                break;\n                        };\n                        var $6832 = $6834;\n                        break;\n                    case 'Kind.Term.ori':\n                        var $6843 = self.expr;\n                        var $6844 = Kind$Term$equal$extra_holes$filler$(_a$1, $6843);\n                        var $6832 = $6844;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                        var $6845 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                        var $6832 = $6845;\n                        break;\n                };\n                var $6778 = $6832;\n                break;\n            case 'Kind.Term.typ':\n                var self = _b$2;\n                switch (self._) {\n                    case 'Kind.Term.hol':\n                        var $6847 = self.path;\n                        var self = Kind$Term$equal$hole$($6847, _a$1);\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $6849 = self.value;\n                                var $6850 = self.errors;\n                                var self = $6849;\n                                switch (self._) {\n                                    case 'Maybe.none':\n                                        var $6852 = Kind$Check$result$(Maybe$none, $6850);\n                                        var $6851 = $6852;\n                                        break;\n                                    case 'Maybe.some':\n                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6854 = self.value;\n                                                var $6855 = self.errors;\n                                                var $6856 = Kind$Check$result$($6854, List$concat$($6850, $6855));\n                                                var $6853 = $6856;\n                                                break;\n                                        };\n                                        var $6851 = $6853;\n                                        break;\n                                };\n                                var $6848 = $6851;\n                                break;\n                        };\n                        var $6846 = $6848;\n                        break;\n                    case 'Kind.Term.ori':\n                        var $6857 = self.expr;\n                        var $6858 = Kind$Term$equal$extra_holes$filler$(_a$1, $6857);\n                        var $6846 = $6858;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                        var $6859 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                        var $6846 = $6859;\n                        break;\n                };\n                var $6778 = $6846;\n                break;\n            case 'Kind.Term.all':\n                var self = _b$2;\n                switch (self._) {\n                    case 'Kind.Term.hol':\n                        var $6861 = self.path;\n                        var self = Kind$Term$equal$hole$($6861, _a$1);\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $6863 = self.value;\n                                var $6864 = self.errors;\n                                var self = $6863;\n                                switch (self._) {\n                                    case 'Maybe.none':\n                                        var $6866 = Kind$Check$result$(Maybe$none, $6864);\n                                        var $6865 = $6866;\n                                        break;\n                                    case 'Maybe.some':\n                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6868 = self.value;\n                                                var $6869 = self.errors;\n                                                var $6870 = Kind$Check$result$($6868, List$concat$($6864, $6869));\n                                                var $6867 = $6870;\n                                                break;\n                                        };\n                                        var $6865 = $6867;\n                                        break;\n                                };\n                                var $6862 = $6865;\n                                break;\n                        };\n                        var $6860 = $6862;\n                        break;\n                    case 'Kind.Term.ori':\n                        var $6871 = self.expr;\n                        var $6872 = Kind$Term$equal$extra_holes$filler$(_a$1, $6871);\n                        var $6860 = $6872;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                        var $6873 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                        var $6860 = $6873;\n                        break;\n                };\n                var $6778 = $6860;\n                break;\n            case 'Kind.Term.let':\n            case 'Kind.Term.def':\n            case 'Kind.Term.ann':\n            case 'Kind.Term.gol':\n                var self = _b$2;\n                switch (self._) {\n                    case 'Kind.Term.hol':\n                        var $6875 = self.path;\n                        var self = Kind$Term$equal$hole$($6875, _a$1);\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $6877 = self.value;\n                                var $6878 = self.errors;\n                                var self = $6877;\n                                switch (self._) {\n                                    case 'Maybe.none':\n                                        var $6880 = Kind$Check$result$(Maybe$none, $6878);\n                                        var $6879 = $6880;\n                                        break;\n                                    case 'Maybe.some':\n                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6882 = self.value;\n                                                var $6883 = self.errors;\n                                                var $6884 = Kind$Check$result$($6882, List$concat$($6878, $6883));\n                                                var $6881 = $6884;\n                                                break;\n                                        };\n                                        var $6879 = $6881;\n                                        break;\n                                };\n                                var $6876 = $6879;\n                                break;\n                        };\n                        var $6874 = $6876;\n                        break;\n                    case 'Kind.Term.ori':\n                        var $6885 = self.expr;\n                        var $6886 = Kind$Term$equal$extra_holes$filler$(_a$1, $6885);\n                        var $6874 = $6886;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                        var $6887 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                        var $6874 = $6887;\n                        break;\n                };\n                var $6778 = $6874;\n                break;\n            case 'Kind.Term.cse':\n                var self = _b$2;\n                switch (self._) {\n                    case 'Kind.Term.hol':\n                        var $6889 = self.path;\n                        var self = Kind$Term$equal$hole$($6889, _a$1);\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $6891 = self.value;\n                                var $6892 = self.errors;\n                                var self = $6891;\n                                switch (self._) {\n                                    case 'Maybe.none':\n                                        var $6894 = Kind$Check$result$(Maybe$none, $6892);\n                                        var $6893 = $6894;\n                                        break;\n                                    case 'Maybe.some':\n                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6896 = self.value;\n                                                var $6897 = self.errors;\n                                                var $6898 = Kind$Check$result$($6896, List$concat$($6892, $6897));\n                                                var $6895 = $6898;\n                                                break;\n                                        };\n                                        var $6893 = $6895;\n                                        break;\n                                };\n                                var $6890 = $6893;\n                                break;\n                        };\n                        var $6888 = $6890;\n                        break;\n                    case 'Kind.Term.ori':\n                        var $6899 = self.expr;\n                        var $6900 = Kind$Term$equal$extra_holes$filler$(_a$1, $6899);\n                        var $6888 = $6900;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                        var $6901 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                        var $6888 = $6901;\n                        break;\n                };\n                var $6778 = $6888;\n                break;\n        };\n        return $6778;\n    };\n    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);\n\n    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {\n        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);\n        switch (self._) {\n            case 'Maybe.some':\n                var $6903 = self.value;\n                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $6905 = self.value;\n                        var self = $6903;\n                        switch (self._) {\n                            case 'Pair.new':\n                                var $6907 = self.fst;\n                                var $6908 = self.snd;\n                                var self = $6905;\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $6910 = self.fst;\n                                        var $6911 = self.snd;\n                                        var _same_fun$9 = ($6907 === $6910);\n                                        var _same_ari$10 = ($6908 === $6911);\n                                        var self = (_same_fun$9 && _same_ari$10);\n                                        if (self) {\n                                            var $6913 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);\n                                            var $6912 = $6913;\n                                        } else {\n                                            var $6914 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                            var $6912 = $6914;\n                                        };\n                                        var $6909 = $6912;\n                                        break;\n                                };\n                                var $6906 = $6909;\n                                break;\n                        };\n                        var $6904 = $6906;\n                        break;\n                    case 'Maybe.none':\n                        var $6915 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                        var $6904 = $6915;\n                        break;\n                };\n                var $6902 = $6904;\n                break;\n            case 'Maybe.none':\n                var $6916 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                var $6902 = $6916;\n                break;\n        };\n        return $6902;\n    };\n    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);\n\n    function BitsSet$set$(_bits$1, _set$2) {\n        var $6917 = (bitsmap_set(_bits$1, Unit$new, _set$2, 'set'));\n        return $6917;\n    };\n    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);\n\n    function BitsSet$mut$set$(_bits$1, _set$2) {\n        var $6918 = BitsSet$set$(_bits$1, _set$2);\n        return $6918;\n    };\n    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);\n\n    function Bool$eql$(_a$1, _b$2) {\n        var self = _a$1;\n        if (self) {\n            var $6920 = _b$2;\n            var $6919 = $6920;\n        } else {\n            var $6921 = (!_b$2);\n            var $6919 = $6921;\n        };\n        return $6919;\n    };\n    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);\n\n    function Kind$Term$equal$go$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {\n        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, Bool$false);\n        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, Bool$true);\n        var self = (_bh$7 === _ah$6);\n        if (self) {\n            var $6923 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);\n            var $6922 = $6923;\n        } else {\n            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);\n            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);\n            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, Bool$false);\n            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, Bool$true);\n            var self = (_bh$11 === _ah$10);\n            if (self) {\n                var $6925 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);\n                var $6924 = $6925;\n            } else {\n                var _id$12 = (_bh$11 + _ah$10);\n                var self = BitsSet$mut$has$(_id$12, _seen$5);\n                if (self) {\n                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);\n                    switch (self._) {\n                        case 'Kind.Check.result':\n                            var $6928 = self.value;\n                            var $6929 = self.errors;\n                            var self = $6928;\n                            switch (self._) {\n                                case 'Maybe.none':\n                                    var $6931 = Kind$Check$result$(Maybe$none, $6929);\n                                    var $6930 = $6931;\n                                    break;\n                                case 'Maybe.some':\n                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);\n                                    switch (self._) {\n                                        case 'Kind.Check.result':\n                                            var $6933 = self.value;\n                                            var $6934 = self.errors;\n                                            var $6935 = Kind$Check$result$($6933, List$concat$($6929, $6934));\n                                            var $6932 = $6935;\n                                            break;\n                                    };\n                                    var $6930 = $6932;\n                                    break;\n                            };\n                            var $6927 = $6930;\n                            break;\n                    };\n                    var $6926 = $6927;\n                } else {\n                    var self = _a1$8;\n                    switch (self._) {\n                        case 'Kind.Term.all':\n                            var $6937 = self.eras;\n                            var $6938 = self.self;\n                            var $6939 = self.name;\n                            var $6940 = self.xtyp;\n                            var $6941 = self.body;\n                            var self = _b1$9;\n                            switch (self._) {\n                                case 'Kind.Term.all':\n                                    var $6943 = self.eras;\n                                    var $6944 = self.self;\n                                    var $6945 = self.name;\n                                    var $6946 = self.xtyp;\n                                    var $6947 = self.body;\n                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);\n                                    var _a1_body$24 = $6941(Kind$Term$var$($6938, _lv$4))(Kind$Term$var$($6939, Nat$succ$(_lv$4)));\n                                    var _b1_body$25 = $6947(Kind$Term$var$($6944, _lv$4))(Kind$Term$var$($6945, Nat$succ$(_lv$4)));\n                                    var _eq_self$26 = ($6938 === $6944);\n                                    var _eq_eras$27 = Bool$eql$($6937, $6943);\n                                    var self = (_eq_self$26 && _eq_eras$27);\n                                    if (self) {\n                                        var self = Kind$Term$equal$go$($6940, $6946, _defs$3, _lv$4, _seen$23);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $6950 = self.value;\n                                                var $6951 = self.errors;\n                                                var self = $6950;\n                                                switch (self._) {\n                                                    case 'Maybe.some':\n                                                        var $6953 = self.value;\n                                                        var self = Kind$Term$equal$go$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);\n                                                        switch (self._) {\n                                                            case 'Kind.Check.result':\n                                                                var $6955 = self.value;\n                                                                var $6956 = self.errors;\n                                                                var self = $6955;\n                                                                switch (self._) {\n                                                                    case 'Maybe.some':\n                                                                        var $6958 = self.value;\n                                                                        var self = Kind$Check$result$(Maybe$some$(($6953 && $6958)), List$nil);\n                                                                        switch (self._) {\n                                                                            case 'Kind.Check.result':\n                                                                                var $6960 = self.value;\n                                                                                var $6961 = self.errors;\n                                                                                var $6962 = Kind$Check$result$($6960, List$concat$($6956, $6961));\n                                                                                var $6959 = $6962;\n                                                                                break;\n                                                                        };\n                                                                        var $6957 = $6959;\n                                                                        break;\n                                                                    case 'Maybe.none':\n                                                                        var $6963 = Kind$Check$result$(Maybe$none, $6956);\n                                                                        var $6957 = $6963;\n                                                                        break;\n                                                                };\n                                                                var self = $6957;\n                                                                break;\n                                                        };\n                                                        switch (self._) {\n                                                            case 'Kind.Check.result':\n                                                                var $6964 = self.value;\n                                                                var $6965 = self.errors;\n                                                                var $6966 = Kind$Check$result$($6964, List$concat$($6951, $6965));\n                                                                var $6954 = $6966;\n                                                                break;\n                                                        };\n                                                        var $6952 = $6954;\n                                                        break;\n                                                    case 'Maybe.none':\n                                                        var $6967 = Kind$Check$result$(Maybe$none, $6951);\n                                                        var $6952 = $6967;\n                                                        break;\n                                                };\n                                                var $6949 = $6952;\n                                                break;\n                                        };\n                                        var $6948 = $6949;\n                                    } else {\n                                        var $6968 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                        var $6948 = $6968;\n                                    };\n                                    var $6942 = $6948;\n                                    break;\n                                case 'Kind.Term.hol':\n                                    var $6969 = self.path;\n                                    var $6970 = Kind$Term$equal$hole$($6969, _a$1);\n                                    var $6942 = $6970;\n                                    break;\n                                case 'Kind.Term.var':\n                                case 'Kind.Term.ref':\n                                case 'Kind.Term.typ':\n                                case 'Kind.Term.lam':\n                                case 'Kind.Term.app':\n                                case 'Kind.Term.let':\n                                case 'Kind.Term.def':\n                                case 'Kind.Term.ann':\n                                case 'Kind.Term.gol':\n                                case 'Kind.Term.nat':\n                                case 'Kind.Term.chr':\n                                case 'Kind.Term.str':\n                                case 'Kind.Term.cse':\n                                case 'Kind.Term.ori':\n                                    var $6971 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                    var $6942 = $6971;\n                                    break;\n                            };\n                            var $6936 = $6942;\n                            break;\n                        case 'Kind.Term.lam':\n                            var $6972 = self.name;\n                            var $6973 = self.body;\n                            var self = _b1$9;\n                            switch (self._) {\n                                case 'Kind.Term.lam':\n                                    var $6975 = self.name;\n                                    var $6976 = self.body;\n                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);\n                                    var _a1_body$18 = $6973(Kind$Term$var$($6972, _lv$4));\n                                    var _b1_body$19 = $6976(Kind$Term$var$($6975, _lv$4));\n                                    var self = Kind$Term$equal$go$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);\n                                    switch (self._) {\n                                        case 'Kind.Check.result':\n                                            var $6978 = self.value;\n                                            var $6979 = self.errors;\n                                            var self = $6978;\n                                            switch (self._) {\n                                                case 'Maybe.some':\n                                                    var $6981 = self.value;\n                                                    var self = Kind$Check$result$(Maybe$some$($6981), List$nil);\n                                                    switch (self._) {\n                                                        case 'Kind.Check.result':\n                                                            var $6983 = self.value;\n                                                            var $6984 = self.errors;\n                                                            var $6985 = Kind$Check$result$($6983, List$concat$($6979, $6984));\n                                                            var $6982 = $6985;\n                                                            break;\n                                                    };\n                                                    var $6980 = $6982;\n                                                    break;\n                                                case 'Maybe.none':\n                                                    var $6986 = Kind$Check$result$(Maybe$none, $6979);\n                                                    var $6980 = $6986;\n                                                    break;\n                                            };\n                                            var $6977 = $6980;\n                                            break;\n                                    };\n                                    var $6974 = $6977;\n                                    break;\n                                case 'Kind.Term.hol':\n                                    var $6987 = self.path;\n                                    var $6988 = Kind$Term$equal$hole$($6987, _a$1);\n                                    var $6974 = $6988;\n                                    break;\n                                case 'Kind.Term.var':\n                                case 'Kind.Term.ref':\n                                case 'Kind.Term.typ':\n                                case 'Kind.Term.all':\n                                case 'Kind.Term.app':\n                                case 'Kind.Term.let':\n                                case 'Kind.Term.def':\n                                case 'Kind.Term.ann':\n                                case 'Kind.Term.gol':\n                                case 'Kind.Term.nat':\n                                case 'Kind.Term.chr':\n                                case 'Kind.Term.str':\n                                case 'Kind.Term.cse':\n                                case 'Kind.Term.ori':\n                                    var $6989 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                    var $6974 = $6989;\n                                    break;\n                            };\n                            var $6936 = $6974;\n                            break;\n                        case 'Kind.Term.app':\n                            var $6990 = self.func;\n                            var $6991 = self.argm;\n                            var self = _b1$9;\n                            switch (self._) {\n                                case 'Kind.Term.app':\n                                    var $6993 = self.func;\n                                    var $6994 = self.argm;\n                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);\n                                    var self = Kind$Term$equal$go$($6990, $6993, _defs$3, _lv$4, _seen$17);\n                                    switch (self._) {\n                                        case 'Kind.Check.result':\n                                            var $6996 = self.value;\n                                            var $6997 = self.errors;\n                                            var self = $6996;\n                                            switch (self._) {\n                                                case 'Maybe.some':\n                                                    var $6999 = self.value;\n                                                    var self = Kind$Term$equal$go$($6991, $6994, _defs$3, _lv$4, _seen$17);\n                                                    switch (self._) {\n                                                        case 'Kind.Check.result':\n                                                            var $7001 = self.value;\n                                                            var $7002 = self.errors;\n                                                            var self = $7001;\n                                                            switch (self._) {\n                                                                case 'Maybe.some':\n                                                                    var $7004 = self.value;\n                                                                    var self = Kind$Check$result$(Maybe$some$(($6999 && $7004)), List$nil);\n                                                                    switch (self._) {\n                                                                        case 'Kind.Check.result':\n                                                                            var $7006 = self.value;\n                                                                            var $7007 = self.errors;\n                                                                            var $7008 = Kind$Check$result$($7006, List$concat$($7002, $7007));\n                                                                            var $7005 = $7008;\n                                                                            break;\n                                                                    };\n                                                                    var $7003 = $7005;\n                                                                    break;\n                                                                case 'Maybe.none':\n                                                                    var $7009 = Kind$Check$result$(Maybe$none, $7002);\n                                                                    var $7003 = $7009;\n                                                                    break;\n                                                            };\n                                                            var self = $7003;\n                                                            break;\n                                                    };\n                                                    switch (self._) {\n                                                        case 'Kind.Check.result':\n                                                            var $7010 = self.value;\n                                                            var $7011 = self.errors;\n                                                            var $7012 = Kind$Check$result$($7010, List$concat$($6997, $7011));\n                                                            var $7000 = $7012;\n                                                            break;\n                                                    };\n                                                    var $6998 = $7000;\n                                                    break;\n                                                case 'Maybe.none':\n                                                    var $7013 = Kind$Check$result$(Maybe$none, $6997);\n                                                    var $6998 = $7013;\n                                                    break;\n                                            };\n                                            var $6995 = $6998;\n                                            break;\n                                    };\n                                    var $6992 = $6995;\n                                    break;\n                                case 'Kind.Term.hol':\n                                    var $7014 = self.path;\n                                    var $7015 = Kind$Term$equal$hole$($7014, _a$1);\n                                    var $6992 = $7015;\n                                    break;\n                                case 'Kind.Term.var':\n                                case 'Kind.Term.ref':\n                                case 'Kind.Term.typ':\n                                case 'Kind.Term.all':\n                                case 'Kind.Term.lam':\n                                case 'Kind.Term.let':\n                                case 'Kind.Term.def':\n                                case 'Kind.Term.ann':\n                                case 'Kind.Term.gol':\n                                case 'Kind.Term.nat':\n                                case 'Kind.Term.chr':\n                                case 'Kind.Term.str':\n                                case 'Kind.Term.cse':\n                                case 'Kind.Term.ori':\n                                    var $7016 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                    var $6992 = $7016;\n                                    break;\n                            };\n                            var $6936 = $6992;\n                            break;\n                        case 'Kind.Term.let':\n                            var $7017 = self.name;\n                            var $7018 = self.expr;\n                            var $7019 = self.body;\n                            var self = _b1$9;\n                            switch (self._) {\n                                case 'Kind.Term.let':\n                                    var $7021 = self.name;\n                                    var $7022 = self.expr;\n                                    var $7023 = self.body;\n                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);\n                                    var _a1_body$20 = $7019(Kind$Term$var$($7017, _lv$4));\n                                    var _b1_body$21 = $7023(Kind$Term$var$($7021, _lv$4));\n                                    var self = Kind$Term$equal$go$($7018, $7022, _defs$3, _lv$4, _seen$19);\n                                    switch (self._) {\n                                        case 'Kind.Check.result':\n                                            var $7025 = self.value;\n                                            var $7026 = self.errors;\n                                            var self = $7025;\n                                            switch (self._) {\n                                                case 'Maybe.some':\n                                                    var $7028 = self.value;\n                                                    var self = Kind$Term$equal$go$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);\n                                                    switch (self._) {\n                                                        case 'Kind.Check.result':\n                                                            var $7030 = self.value;\n                                                            var $7031 = self.errors;\n                                                            var self = $7030;\n                                                            switch (self._) {\n                                                                case 'Maybe.some':\n                                                                    var $7033 = self.value;\n                                                                    var self = Kind$Check$result$(Maybe$some$(($7028 && $7033)), List$nil);\n                                                                    switch (self._) {\n                                                                        case 'Kind.Check.result':\n                                                                            var $7035 = self.value;\n                                                                            var $7036 = self.errors;\n                                                                            var $7037 = Kind$Check$result$($7035, List$concat$($7031, $7036));\n                                                                            var $7034 = $7037;\n                                                                            break;\n                                                                    };\n                                                                    var $7032 = $7034;\n                                                                    break;\n                                                                case 'Maybe.none':\n                                                                    var $7038 = Kind$Check$result$(Maybe$none, $7031);\n                                                                    var $7032 = $7038;\n                                                                    break;\n                                                            };\n                                                            var self = $7032;\n                                                            break;\n                                                    };\n                                                    switch (self._) {\n                                                        case 'Kind.Check.result':\n                                                            var $7039 = self.value;\n                                                            var $7040 = self.errors;\n                                                            var $7041 = Kind$Check$result$($7039, List$concat$($7026, $7040));\n                                                            var $7029 = $7041;\n                                                            break;\n                                                    };\n                                                    var $7027 = $7029;\n                                                    break;\n                                                case 'Maybe.none':\n                                                    var $7042 = Kind$Check$result$(Maybe$none, $7026);\n                                                    var $7027 = $7042;\n                                                    break;\n                                            };\n                                            var $7024 = $7027;\n                                            break;\n                                    };\n                                    var $7020 = $7024;\n                                    break;\n                                case 'Kind.Term.hol':\n                                    var $7043 = self.path;\n                                    var $7044 = Kind$Term$equal$hole$($7043, _a$1);\n                                    var $7020 = $7044;\n                                    break;\n                                case 'Kind.Term.var':\n                                case 'Kind.Term.ref':\n                                case 'Kind.Term.typ':\n                                case 'Kind.Term.all':\n                                case 'Kind.Term.lam':\n                                case 'Kind.Term.app':\n                                case 'Kind.Term.def':\n                                case 'Kind.Term.ann':\n                                case 'Kind.Term.gol':\n                                case 'Kind.Term.nat':\n                                case 'Kind.Term.chr':\n                                case 'Kind.Term.str':\n                                case 'Kind.Term.cse':\n                                case 'Kind.Term.ori':\n                                    var $7045 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                    var $7020 = $7045;\n                                    break;\n                            };\n                            var $6936 = $7020;\n                            break;\n                        case 'Kind.Term.hol':\n                            var $7046 = self.path;\n                            var $7047 = Kind$Term$equal$hole$($7046, _b$2);\n                            var $6936 = $7047;\n                            break;\n                        case 'Kind.Term.var':\n                        case 'Kind.Term.ori':\n                            var self = _b1$9;\n                            switch (self._) {\n                                case 'Kind.Term.hol':\n                                    var $7049 = self.path;\n                                    var $7050 = Kind$Term$equal$hole$($7049, _a$1);\n                                    var $7048 = $7050;\n                                    break;\n                                case 'Kind.Term.var':\n                                case 'Kind.Term.ref':\n                                case 'Kind.Term.typ':\n                                case 'Kind.Term.all':\n                                case 'Kind.Term.lam':\n                                case 'Kind.Term.app':\n                                case 'Kind.Term.let':\n                                case 'Kind.Term.def':\n                                case 'Kind.Term.ann':\n                                case 'Kind.Term.gol':\n                                case 'Kind.Term.nat':\n                                case 'Kind.Term.chr':\n                                case 'Kind.Term.str':\n                                case 'Kind.Term.cse':\n                                case 'Kind.Term.ori':\n                                    var $7051 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                    var $7048 = $7051;\n                                    break;\n                            };\n                            var $6936 = $7048;\n                            break;\n                        case 'Kind.Term.ref':\n                        case 'Kind.Term.nat':\n                        case 'Kind.Term.chr':\n                        case 'Kind.Term.str':\n                            var self = _b1$9;\n                            switch (self._) {\n                                case 'Kind.Term.hol':\n                                    var $7053 = self.path;\n                                    var $7054 = Kind$Term$equal$hole$($7053, _a$1);\n                                    var $7052 = $7054;\n                                    break;\n                                case 'Kind.Term.var':\n                                case 'Kind.Term.ref':\n                                case 'Kind.Term.typ':\n                                case 'Kind.Term.all':\n                                case 'Kind.Term.lam':\n                                case 'Kind.Term.app':\n                                case 'Kind.Term.let':\n                                case 'Kind.Term.def':\n                                case 'Kind.Term.ann':\n                                case 'Kind.Term.gol':\n                                case 'Kind.Term.nat':\n                                case 'Kind.Term.chr':\n                                case 'Kind.Term.str':\n                                case 'Kind.Term.cse':\n                                case 'Kind.Term.ori':\n                                    var $7055 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                    var $7052 = $7055;\n                                    break;\n                            };\n                            var $6936 = $7052;\n                            break;\n                        case 'Kind.Term.typ':\n                            var self = _b1$9;\n                            switch (self._) {\n                                case 'Kind.Term.hol':\n                                    var $7057 = self.path;\n                                    var $7058 = Kind$Term$equal$hole$($7057, _a$1);\n                                    var $7056 = $7058;\n                                    break;\n                                case 'Kind.Term.var':\n                                case 'Kind.Term.ref':\n                                case 'Kind.Term.typ':\n                                case 'Kind.Term.all':\n                                case 'Kind.Term.lam':\n                                case 'Kind.Term.app':\n                                case 'Kind.Term.let':\n                                case 'Kind.Term.def':\n                                case 'Kind.Term.ann':\n                                case 'Kind.Term.gol':\n                                case 'Kind.Term.nat':\n                                case 'Kind.Term.chr':\n                                case 'Kind.Term.str':\n                                case 'Kind.Term.cse':\n                                case 'Kind.Term.ori':\n                                    var $7059 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                    var $7056 = $7059;\n                                    break;\n                            };\n                            var $6936 = $7056;\n                            break;\n                        case 'Kind.Term.def':\n                        case 'Kind.Term.ann':\n                        case 'Kind.Term.gol':\n                            var self = _b1$9;\n                            switch (self._) {\n                                case 'Kind.Term.hol':\n                                    var $7061 = self.path;\n                                    var $7062 = Kind$Term$equal$hole$($7061, _a$1);\n                                    var $7060 = $7062;\n                                    break;\n                                case 'Kind.Term.var':\n                                case 'Kind.Term.ref':\n                                case 'Kind.Term.typ':\n                                case 'Kind.Term.all':\n                                case 'Kind.Term.lam':\n                                case 'Kind.Term.app':\n                                case 'Kind.Term.let':\n                                case 'Kind.Term.def':\n                                case 'Kind.Term.ann':\n                                case 'Kind.Term.gol':\n                                case 'Kind.Term.nat':\n                                case 'Kind.Term.chr':\n                                case 'Kind.Term.str':\n                                case 'Kind.Term.cse':\n                                case 'Kind.Term.ori':\n                                    var $7063 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                    var $7060 = $7063;\n                                    break;\n                            };\n                            var $6936 = $7060;\n                            break;\n                        case 'Kind.Term.cse':\n                            var self = _b1$9;\n                            switch (self._) {\n                                case 'Kind.Term.hol':\n                                    var $7065 = self.path;\n                                    var $7066 = Kind$Term$equal$hole$($7065, _a$1);\n                                    var $7064 = $7066;\n                                    break;\n                                case 'Kind.Term.var':\n                                case 'Kind.Term.ref':\n                                case 'Kind.Term.typ':\n                                case 'Kind.Term.all':\n                                case 'Kind.Term.lam':\n                                case 'Kind.Term.app':\n                                case 'Kind.Term.let':\n                                case 'Kind.Term.def':\n                                case 'Kind.Term.ann':\n                                case 'Kind.Term.gol':\n                                case 'Kind.Term.nat':\n                                case 'Kind.Term.chr':\n                                case 'Kind.Term.str':\n                                case 'Kind.Term.cse':\n                                case 'Kind.Term.ori':\n                                    var $7067 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);\n                                    var $7064 = $7067;\n                                    break;\n                            };\n                            var $6936 = $7064;\n                            break;\n                    };\n                    var $6926 = $6936;\n                };\n                var $6924 = $6926;\n            };\n            var $6922 = $6924;\n        };\n        return $6922;\n    };\n    const Kind$Term$equal$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$go$(x0, x1, x2, x3, x4);\n    const BitsSet$new = BitsMap$new;\n\n    function BitsSet$mut$new$(_a$1) {\n        var $7068 = BitsSet$new;\n        return $7068;\n    };\n    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);\n\n    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.var':\n                var $7070 = self.name;\n                var $7071 = self.indx;\n                var self = List$at_last$($7071, _ctx$4);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $7073 = self.value;\n                        var $7074 = Kind$Check$result$(Maybe$some$((() => {\n                            var self = $7073;\n                            switch (self._) {\n                                case 'Pair.new':\n                                    var $7075 = self.snd;\n                                    var $7076 = $7075;\n                                    return $7076;\n                            };\n                        })()), List$nil);\n                        var $7072 = $7074;\n                        break;\n                    case 'Maybe.none':\n                        var $7077 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7070), List$nil));\n                        var $7072 = $7077;\n                        break;\n                };\n                var self = $7072;\n                break;\n            case 'Kind.Term.ref':\n                var $7078 = self.name;\n                var self = Kind$Map$get$($7078, _defs$3);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $7080 = self.value;\n                        var self = $7080;\n                        switch (self._) {\n                            case 'Kind.Def.new':\n                                var $7082 = self.name;\n                                var $7083 = self.term;\n                                var $7084 = self.type;\n                                var $7085 = self.stat;\n                                var _ref_name$18 = $7082;\n                                var _ref_type$19 = $7084;\n                                var _ref_term$20 = $7083;\n                                var _ref_stat$21 = $7085;\n                                var self = _ref_stat$21;\n                                switch (self._) {\n                                    case 'Kind.Status.init':\n                                        var $7087 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));\n                                        var $7086 = $7087;\n                                        break;\n                                    case 'Kind.Status.wait':\n                                    case 'Kind.Status.done':\n                                        var $7088 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);\n                                        var $7086 = $7088;\n                                        break;\n                                    case 'Kind.Status.fail':\n                                        var $7089 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));\n                                        var $7086 = $7089;\n                                        break;\n                                };\n                                var $7081 = $7086;\n                                break;\n                        };\n                        var $7079 = $7081;\n                        break;\n                    case 'Maybe.none':\n                        var $7090 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7078), List$nil));\n                        var $7079 = $7090;\n                        break;\n                };\n                var self = $7079;\n                break;\n            case 'Kind.Term.all':\n                var $7091 = self.self;\n                var $7092 = self.name;\n                var $7093 = self.xtyp;\n                var $7094 = self.body;\n                var _ctx_size$12 = (list_length(_ctx$4));\n                var _self_var$13 = Kind$Term$var$($7091, _ctx_size$12);\n                var _body_var$14 = Kind$Term$var$($7092, Nat$succ$(_ctx_size$12));\n                var _body_ctx$15 = List$cons$(Pair$new$($7092, $7093), List$cons$(Pair$new$($7091, _term$1), _ctx$4));\n                var self = Kind$Term$check$($7093, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);\n                switch (self._) {\n                    case 'Kind.Check.result':\n                        var $7096 = self.value;\n                        var $7097 = self.errors;\n                        var self = $7096;\n                        switch (self._) {\n                            case 'Maybe.none':\n                                var $7099 = Kind$Check$result$(Maybe$none, $7097);\n                                var $7098 = $7099;\n                                break;\n                            case 'Maybe.some':\n                                var self = Kind$Term$check$($7094(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7101 = self.value;\n                                        var $7102 = self.errors;\n                                        var self = $7101;\n                                        switch (self._) {\n                                            case 'Maybe.none':\n                                                var $7104 = Kind$Check$result$(Maybe$none, $7102);\n                                                var $7103 = $7104;\n                                                break;\n                                            case 'Maybe.some':\n                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);\n                                                switch (self._) {\n                                                    case 'Kind.Check.result':\n                                                        var $7106 = self.value;\n                                                        var $7107 = self.errors;\n                                                        var $7108 = Kind$Check$result$($7106, List$concat$($7102, $7107));\n                                                        var $7105 = $7108;\n                                                        break;\n                                                };\n                                                var $7103 = $7105;\n                                                break;\n                                        };\n                                        var self = $7103;\n                                        break;\n                                };\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7109 = self.value;\n                                        var $7110 = self.errors;\n                                        var $7111 = Kind$Check$result$($7109, List$concat$($7097, $7110));\n                                        var $7100 = $7111;\n                                        break;\n                                };\n                                var $7098 = $7100;\n                                break;\n                        };\n                        var $7095 = $7098;\n                        break;\n                };\n                var self = $7095;\n                break;\n            case 'Kind.Term.lam':\n                var $7112 = self.name;\n                var $7113 = self.body;\n                var self = _type$2;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $7115 = self.value;\n                        var _typv$10 = Kind$Term$reduce$($7115, _defs$3);\n                        var self = _typv$10;\n                        switch (self._) {\n                            case 'Kind.Term.all':\n                                var $7117 = self.xtyp;\n                                var $7118 = self.body;\n                                var _ctx_size$16 = (list_length(_ctx$4));\n                                var _self_var$17 = _term$1;\n                                var _body_var$18 = Kind$Term$var$($7112, _ctx_size$16);\n                                var _body_typ$19 = $7118(_self_var$17)(_body_var$18);\n                                var _body_ctx$20 = List$cons$(Pair$new$($7112, $7117), _ctx$4);\n                                var self = Kind$Term$check$($7113(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7120 = self.value;\n                                        var $7121 = self.errors;\n                                        var self = $7120;\n                                        switch (self._) {\n                                            case 'Maybe.none':\n                                                var $7123 = Kind$Check$result$(Maybe$none, $7121);\n                                                var $7122 = $7123;\n                                                break;\n                                            case 'Maybe.some':\n                                                var self = Kind$Check$result$(Maybe$some$($7115), List$nil);\n                                                switch (self._) {\n                                                    case 'Kind.Check.result':\n                                                        var $7125 = self.value;\n                                                        var $7126 = self.errors;\n                                                        var $7127 = Kind$Check$result$($7125, List$concat$($7121, $7126));\n                                                        var $7124 = $7127;\n                                                        break;\n                                                };\n                                                var $7122 = $7124;\n                                                break;\n                                        };\n                                        var $7119 = $7122;\n                                        break;\n                                };\n                                var $7116 = $7119;\n                                break;\n                            case 'Kind.Term.var':\n                            case 'Kind.Term.lam':\n                            case 'Kind.Term.app':\n                            case 'Kind.Term.ori':\n                                var _expected$13 = Either$left$(\"function\");\n                                var _detected$14 = Either$right$($7115);\n                                var $7128 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));\n                                var $7116 = $7128;\n                                break;\n                            case 'Kind.Term.ref':\n                            case 'Kind.Term.hol':\n                            case 'Kind.Term.nat':\n                            case 'Kind.Term.chr':\n                            case 'Kind.Term.str':\n                                var _expected$12 = Either$left$(\"function\");\n                                var _detected$13 = Either$right$($7115);\n                                var $7129 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));\n                                var $7116 = $7129;\n                                break;\n                            case 'Kind.Term.typ':\n                                var _expected$11 = Either$left$(\"function\");\n                                var _detected$12 = Either$right$($7115);\n                                var $7130 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));\n                                var $7116 = $7130;\n                                break;\n                            case 'Kind.Term.let':\n                            case 'Kind.Term.def':\n                            case 'Kind.Term.ann':\n                            case 'Kind.Term.gol':\n                                var _expected$14 = Either$left$(\"function\");\n                                var _detected$15 = Either$right$($7115);\n                                var $7131 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));\n                                var $7116 = $7131;\n                                break;\n                            case 'Kind.Term.cse':\n                                var _expected$17 = Either$left$(\"function\");\n                                var _detected$18 = Either$right$($7115);\n                                var $7132 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));\n                                var $7116 = $7132;\n                                break;\n                        };\n                        var $7114 = $7116;\n                        break;\n                    case 'Maybe.none':\n                        var _lam_type$9 = Kind$Term$hol$(Bits$e);\n                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);\n                        var $7133 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));\n                        var $7114 = $7133;\n                        break;\n                };\n                var self = $7114;\n                break;\n            case 'Kind.Term.app':\n                var $7134 = self.func;\n                var $7135 = self.argm;\n                var self = Kind$Term$check$($7134, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);\n                switch (self._) {\n                    case 'Kind.Check.result':\n                        var $7137 = self.value;\n                        var $7138 = self.errors;\n                        var self = $7137;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $7140 = self.value;\n                                var _func_typ$12 = Kind$Term$reduce$($7140, _defs$3);\n                                var self = _func_typ$12;\n                                switch (self._) {\n                                    case 'Kind.Term.all':\n                                        var $7142 = self.xtyp;\n                                        var $7143 = self.body;\n                                        var self = Kind$Term$check$($7135, Maybe$some$($7142), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);\n                                        switch (self._) {\n                                            case 'Kind.Check.result':\n                                                var $7145 = self.value;\n                                                var $7146 = self.errors;\n                                                var self = $7145;\n                                                switch (self._) {\n                                                    case 'Maybe.none':\n                                                        var $7148 = Kind$Check$result$(Maybe$none, $7146);\n                                                        var $7147 = $7148;\n                                                        break;\n                                                    case 'Maybe.some':\n                                                        var self = Kind$Check$result$(Maybe$some$($7143($7134)($7135)), List$nil);\n                                                        switch (self._) {\n                                                            case 'Kind.Check.result':\n                                                                var $7150 = self.value;\n                                                                var $7151 = self.errors;\n                                                                var $7152 = Kind$Check$result$($7150, List$concat$($7146, $7151));\n                                                                var $7149 = $7152;\n                                                                break;\n                                                        };\n                                                        var $7147 = $7149;\n                                                        break;\n                                                };\n                                                var $7144 = $7147;\n                                                break;\n                                        };\n                                        var self = $7144;\n                                        break;\n                                    case 'Kind.Term.var':\n                                    case 'Kind.Term.lam':\n                                    case 'Kind.Term.app':\n                                    case 'Kind.Term.ori':\n                                        var _expected$15 = Either$left$(\"function\");\n                                        var _detected$16 = Either$right$(_func_typ$12);\n                                        var self = $7134;\n                                        switch (self._) {\n                                            case 'Kind.Term.ori':\n                                                var $7154 = self.orig;\n                                                var $7155 = Maybe$some$($7154);\n                                                var _orig$17 = $7155;\n                                                break;\n                                            case 'Kind.Term.var':\n                                            case 'Kind.Term.ref':\n                                            case 'Kind.Term.typ':\n                                            case 'Kind.Term.all':\n                                            case 'Kind.Term.lam':\n                                            case 'Kind.Term.app':\n                                            case 'Kind.Term.let':\n                                            case 'Kind.Term.def':\n                                            case 'Kind.Term.ann':\n                                            case 'Kind.Term.gol':\n                                            case 'Kind.Term.hol':\n                                            case 'Kind.Term.nat':\n                                            case 'Kind.Term.chr':\n                                            case 'Kind.Term.str':\n                                            case 'Kind.Term.cse':\n                                                var $7156 = _orig$6;\n                                                var _orig$17 = $7156;\n                                                break;\n                                        };\n                                        var $7153 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$17, _expected$15, _detected$16, _ctx$4), List$nil));\n                                        var self = $7153;\n                                        break;\n                                    case 'Kind.Term.ref':\n                                    case 'Kind.Term.hol':\n                                    case 'Kind.Term.nat':\n                                    case 'Kind.Term.chr':\n                                    case 'Kind.Term.str':\n                                        var _expected$14 = Either$left$(\"function\");\n                                        var _detected$15 = Either$right$(_func_typ$12);\n                                        var self = $7134;\n                                        switch (self._) {\n                                            case 'Kind.Term.ori':\n                                                var $7158 = self.orig;\n                                                var $7159 = Maybe$some$($7158);\n                                                var _orig$16 = $7159;\n                                                break;\n                                            case 'Kind.Term.var':\n                                            case 'Kind.Term.ref':\n                                            case 'Kind.Term.typ':\n                                            case 'Kind.Term.all':\n                                            case 'Kind.Term.lam':\n                                            case 'Kind.Term.app':\n                                            case 'Kind.Term.let':\n                                            case 'Kind.Term.def':\n                                            case 'Kind.Term.ann':\n                                            case 'Kind.Term.gol':\n                                            case 'Kind.Term.hol':\n                                            case 'Kind.Term.nat':\n                                            case 'Kind.Term.chr':\n                                            case 'Kind.Term.str':\n                                            case 'Kind.Term.cse':\n                                                var $7160 = _orig$6;\n                                                var _orig$16 = $7160;\n                                                break;\n                                        };\n                                        var $7157 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$16, _expected$14, _detected$15, _ctx$4), List$nil));\n                                        var self = $7157;\n                                        break;\n                                    case 'Kind.Term.typ':\n                                        var _expected$13 = Either$left$(\"function\");\n                                        var _detected$14 = Either$right$(_func_typ$12);\n                                        var self = $7134;\n                                        switch (self._) {\n                                            case 'Kind.Term.ori':\n                                                var $7162 = self.orig;\n                                                var $7163 = Maybe$some$($7162);\n                                                var _orig$15 = $7163;\n                                                break;\n                                            case 'Kind.Term.var':\n                                            case 'Kind.Term.ref':\n                                            case 'Kind.Term.typ':\n                                            case 'Kind.Term.all':\n                                            case 'Kind.Term.lam':\n                                            case 'Kind.Term.app':\n                                            case 'Kind.Term.let':\n                                            case 'Kind.Term.def':\n                                            case 'Kind.Term.ann':\n                                            case 'Kind.Term.gol':\n                                            case 'Kind.Term.hol':\n                                            case 'Kind.Term.nat':\n                                            case 'Kind.Term.chr':\n                                            case 'Kind.Term.str':\n                                            case 'Kind.Term.cse':\n                                                var $7164 = _orig$6;\n                                                var _orig$15 = $7164;\n                                                break;\n                                        };\n                                        var $7161 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$15, _expected$13, _detected$14, _ctx$4), List$nil));\n                                        var self = $7161;\n                                        break;\n                                    case 'Kind.Term.let':\n                                    case 'Kind.Term.def':\n                                    case 'Kind.Term.ann':\n                                    case 'Kind.Term.gol':\n                                        var _expected$16 = Either$left$(\"function\");\n                                        var _detected$17 = Either$right$(_func_typ$12);\n                                        var self = $7134;\n                                        switch (self._) {\n                                            case 'Kind.Term.ori':\n                                                var $7166 = self.orig;\n                                                var $7167 = Maybe$some$($7166);\n                                                var _orig$18 = $7167;\n                                                break;\n                                            case 'Kind.Term.var':\n                                            case 'Kind.Term.ref':\n                                            case 'Kind.Term.typ':\n                                            case 'Kind.Term.all':\n                                            case 'Kind.Term.lam':\n                                            case 'Kind.Term.app':\n                                            case 'Kind.Term.let':\n                                            case 'Kind.Term.def':\n                                            case 'Kind.Term.ann':\n                                            case 'Kind.Term.gol':\n                                            case 'Kind.Term.hol':\n                                            case 'Kind.Term.nat':\n                                            case 'Kind.Term.chr':\n                                            case 'Kind.Term.str':\n                                            case 'Kind.Term.cse':\n                                                var $7168 = _orig$6;\n                                                var _orig$18 = $7168;\n                                                break;\n                                        };\n                                        var $7165 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$18, _expected$16, _detected$17, _ctx$4), List$nil));\n                                        var self = $7165;\n                                        break;\n                                    case 'Kind.Term.cse':\n                                        var _expected$19 = Either$left$(\"function\");\n                                        var _detected$20 = Either$right$(_func_typ$12);\n                                        var self = $7134;\n                                        switch (self._) {\n                                            case 'Kind.Term.ori':\n                                                var $7170 = self.orig;\n                                                var $7171 = Maybe$some$($7170);\n                                                var _orig$21 = $7171;\n                                                break;\n                                            case 'Kind.Term.var':\n                                            case 'Kind.Term.ref':\n                                            case 'Kind.Term.typ':\n                                            case 'Kind.Term.all':\n                                            case 'Kind.Term.lam':\n                                            case 'Kind.Term.app':\n                                            case 'Kind.Term.let':\n                                            case 'Kind.Term.def':\n                                            case 'Kind.Term.ann':\n                                            case 'Kind.Term.gol':\n                                            case 'Kind.Term.hol':\n                                            case 'Kind.Term.nat':\n                                            case 'Kind.Term.chr':\n                                            case 'Kind.Term.str':\n                                            case 'Kind.Term.cse':\n                                                var $7172 = _orig$6;\n                                                var _orig$21 = $7172;\n                                                break;\n                                        };\n                                        var $7169 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$21, _expected$19, _detected$20, _ctx$4), List$nil));\n                                        var self = $7169;\n                                        break;\n                                };\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7173 = self.value;\n                                        var $7174 = self.errors;\n                                        var $7175 = Kind$Check$result$($7173, List$concat$($7138, $7174));\n                                        var $7141 = $7175;\n                                        break;\n                                };\n                                var $7139 = $7141;\n                                break;\n                            case 'Maybe.none':\n                                var $7176 = Kind$Check$result$(Maybe$none, $7138);\n                                var $7139 = $7176;\n                                break;\n                        };\n                        var $7136 = $7139;\n                        break;\n                };\n                var self = $7136;\n                break;\n            case 'Kind.Term.let':\n                var $7177 = self.name;\n                var $7178 = self.expr;\n                var $7179 = self.body;\n                var _ctx_size$10 = (list_length(_ctx$4));\n                var self = Kind$Term$check$($7178, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);\n                switch (self._) {\n                    case 'Kind.Check.result':\n                        var $7181 = self.value;\n                        var $7182 = self.errors;\n                        var self = $7181;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $7184 = self.value;\n                                var _body_val$14 = $7179(Kind$Term$var$($7177, _ctx_size$10));\n                                var _body_ctx$15 = List$cons$(Pair$new$($7177, $7184), _ctx$4);\n                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7186 = self.value;\n                                        var $7187 = self.errors;\n                                        var self = $7186;\n                                        switch (self._) {\n                                            case 'Maybe.some':\n                                                var $7189 = self.value;\n                                                var self = Kind$Check$result$(Maybe$some$($7189), List$nil);\n                                                switch (self._) {\n                                                    case 'Kind.Check.result':\n                                                        var $7191 = self.value;\n                                                        var $7192 = self.errors;\n                                                        var $7193 = Kind$Check$result$($7191, List$concat$($7187, $7192));\n                                                        var $7190 = $7193;\n                                                        break;\n                                                };\n                                                var $7188 = $7190;\n                                                break;\n                                            case 'Maybe.none':\n                                                var $7194 = Kind$Check$result$(Maybe$none, $7187);\n                                                var $7188 = $7194;\n                                                break;\n                                        };\n                                        var self = $7188;\n                                        break;\n                                };\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7195 = self.value;\n                                        var $7196 = self.errors;\n                                        var $7197 = Kind$Check$result$($7195, List$concat$($7182, $7196));\n                                        var $7185 = $7197;\n                                        break;\n                                };\n                                var $7183 = $7185;\n                                break;\n                            case 'Maybe.none':\n                                var $7198 = Kind$Check$result$(Maybe$none, $7182);\n                                var $7183 = $7198;\n                                break;\n                        };\n                        var $7180 = $7183;\n                        break;\n                };\n                var self = $7180;\n                break;\n            case 'Kind.Term.def':\n                var $7199 = self.name;\n                var $7200 = self.expr;\n                var $7201 = self.body;\n                var _ctx_size$10 = (list_length(_ctx$4));\n                var self = Kind$Term$check$($7200, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);\n                switch (self._) {\n                    case 'Kind.Check.result':\n                        var $7203 = self.value;\n                        var $7204 = self.errors;\n                        var self = $7203;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $7206 = self.value;\n                                var _body_val$14 = $7201(Kind$Term$ann$(Bool$true, $7200, $7206));\n                                var _body_ctx$15 = List$cons$(Pair$new$($7199, $7206), _ctx$4);\n                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7208 = self.value;\n                                        var $7209 = self.errors;\n                                        var self = $7208;\n                                        switch (self._) {\n                                            case 'Maybe.some':\n                                                var $7211 = self.value;\n                                                var self = Kind$Check$result$(Maybe$some$($7211), List$nil);\n                                                switch (self._) {\n                                                    case 'Kind.Check.result':\n                                                        var $7213 = self.value;\n                                                        var $7214 = self.errors;\n                                                        var $7215 = Kind$Check$result$($7213, List$concat$($7209, $7214));\n                                                        var $7212 = $7215;\n                                                        break;\n                                                };\n                                                var $7210 = $7212;\n                                                break;\n                                            case 'Maybe.none':\n                                                var $7216 = Kind$Check$result$(Maybe$none, $7209);\n                                                var $7210 = $7216;\n                                                break;\n                                        };\n                                        var self = $7210;\n                                        break;\n                                };\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7217 = self.value;\n                                        var $7218 = self.errors;\n                                        var $7219 = Kind$Check$result$($7217, List$concat$($7204, $7218));\n                                        var $7207 = $7219;\n                                        break;\n                                };\n                                var $7205 = $7207;\n                                break;\n                            case 'Maybe.none':\n                                var $7220 = Kind$Check$result$(Maybe$none, $7204);\n                                var $7205 = $7220;\n                                break;\n                        };\n                        var $7202 = $7205;\n                        break;\n                };\n                var self = $7202;\n                break;\n            case 'Kind.Term.ann':\n                var $7221 = self.done;\n                var $7222 = self.term;\n                var $7223 = self.type;\n                var self = $7221;\n                if (self) {\n                    var $7225 = Kind$Check$result$(Maybe$some$($7223), List$nil);\n                    var $7224 = $7225;\n                } else {\n                    var self = Kind$Term$check$($7222, Maybe$some$($7223), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);\n                    switch (self._) {\n                        case 'Kind.Check.result':\n                            var $7227 = self.value;\n                            var $7228 = self.errors;\n                            var self = $7227;\n                            switch (self._) {\n                                case 'Maybe.none':\n                                    var $7230 = Kind$Check$result$(Maybe$none, $7228);\n                                    var $7229 = $7230;\n                                    break;\n                                case 'Maybe.some':\n                                    var self = Kind$Term$check$($7223, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);\n                                    switch (self._) {\n                                        case 'Kind.Check.result':\n                                            var $7232 = self.value;\n                                            var $7233 = self.errors;\n                                            var self = $7232;\n                                            switch (self._) {\n                                                case 'Maybe.none':\n                                                    var $7235 = Kind$Check$result$(Maybe$none, $7233);\n                                                    var $7234 = $7235;\n                                                    break;\n                                                case 'Maybe.some':\n                                                    var self = Kind$Check$result$(Maybe$some$($7223), List$nil);\n                                                    switch (self._) {\n                                                        case 'Kind.Check.result':\n                                                            var $7237 = self.value;\n                                                            var $7238 = self.errors;\n                                                            var $7239 = Kind$Check$result$($7237, List$concat$($7233, $7238));\n                                                            var $7236 = $7239;\n                                                            break;\n                                                    };\n                                                    var $7234 = $7236;\n                                                    break;\n                                            };\n                                            var self = $7234;\n                                            break;\n                                    };\n                                    switch (self._) {\n                                        case 'Kind.Check.result':\n                                            var $7240 = self.value;\n                                            var $7241 = self.errors;\n                                            var $7242 = Kind$Check$result$($7240, List$concat$($7228, $7241));\n                                            var $7231 = $7242;\n                                            break;\n                                    };\n                                    var $7229 = $7231;\n                                    break;\n                            };\n                            var $7226 = $7229;\n                            break;\n                    };\n                    var $7224 = $7226;\n                };\n                var self = $7224;\n                break;\n            case 'Kind.Term.gol':\n                var $7243 = self.name;\n                var $7244 = self.dref;\n                var $7245 = self.verb;\n                var $7246 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($7243, $7244, $7245, _type$2, _ctx$4), List$nil));\n                var self = $7246;\n                break;\n            case 'Kind.Term.cse':\n                var $7247 = self.expr;\n                var $7248 = self.name;\n                var $7249 = self.with;\n                var $7250 = self.cses;\n                var $7251 = self.moti;\n                var _expr$13 = $7247;\n                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);\n                switch (self._) {\n                    case 'Kind.Check.result':\n                        var $7253 = self.value;\n                        var $7254 = self.errors;\n                        var self = $7253;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $7256 = self.value;\n                                var self = Kind$Term$check$infer_with_types$($7249, _defs$3, _ctx$4, _path$5, _orig$6);\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7258 = self.value;\n                                        var $7259 = self.errors;\n                                        var self = $7258;\n                                        switch (self._) {\n                                            case 'Maybe.some':\n                                                var $7261 = self.value;\n                                                var _dsug$20 = Kind$Term$desugar_cse$($7247, $7248, $7261, $7250, $7251, $7256, _type$2, _defs$3, _ctx$4);\n                                                var self = _dsug$20;\n                                                switch (self._) {\n                                                    case 'Maybe.some':\n                                                        var $7263 = self.value;\n                                                        var $7264 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $7263), List$nil));\n                                                        var self = $7264;\n                                                        break;\n                                                    case 'Maybe.none':\n                                                        var $7265 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));\n                                                        var self = $7265;\n                                                        break;\n                                                };\n                                                switch (self._) {\n                                                    case 'Kind.Check.result':\n                                                        var $7266 = self.value;\n                                                        var $7267 = self.errors;\n                                                        var $7268 = Kind$Check$result$($7266, List$concat$($7259, $7267));\n                                                        var $7262 = $7268;\n                                                        break;\n                                                };\n                                                var $7260 = $7262;\n                                                break;\n                                            case 'Maybe.none':\n                                                var $7269 = Kind$Check$result$(Maybe$none, $7259);\n                                                var $7260 = $7269;\n                                                break;\n                                        };\n                                        var self = $7260;\n                                        break;\n                                };\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7270 = self.value;\n                                        var $7271 = self.errors;\n                                        var $7272 = Kind$Check$result$($7270, List$concat$($7254, $7271));\n                                        var $7257 = $7272;\n                                        break;\n                                };\n                                var $7255 = $7257;\n                                break;\n                            case 'Maybe.none':\n                                var $7273 = Kind$Check$result$(Maybe$none, $7254);\n                                var $7255 = $7273;\n                                break;\n                        };\n                        var $7252 = $7255;\n                        break;\n                };\n                var self = $7252;\n                break;\n            case 'Kind.Term.ori':\n                var $7274 = self.orig;\n                var $7275 = self.expr;\n                var $7276 = Kind$Term$check$($7275, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($7274));\n                var self = $7276;\n                break;\n            case 'Kind.Term.typ':\n                var $7277 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);\n                var self = $7277;\n                break;\n            case 'Kind.Term.hol':\n                var $7278 = Kind$Check$result$(_type$2, List$nil);\n                var self = $7278;\n                break;\n            case 'Kind.Term.nat':\n                var $7279 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$(\"Nat\")), List$nil);\n                var self = $7279;\n                break;\n            case 'Kind.Term.chr':\n                var $7280 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$(\"Char\")), List$nil);\n                var self = $7280;\n                break;\n            case 'Kind.Term.str':\n                var $7281 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$(\"String\")), List$nil);\n                var self = $7281;\n                break;\n        };\n        switch (self._) {\n            case 'Kind.Check.result':\n                var $7282 = self.value;\n                var $7283 = self.errors;\n                var self = $7282;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $7285 = self.value;\n                        var self = _type$2;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $7287 = self.value;\n                                var self = Kind$Term$equal$go$($7287, $7285, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7289 = self.value;\n                                        var $7290 = self.errors;\n                                        var self = $7289;\n                                        switch (self._) {\n                                            case 'Maybe.some':\n                                                var $7292 = self.value;\n                                                var self = $7292;\n                                                if (self) {\n                                                    var $7294 = Kind$Check$result$(Maybe$some$($7287), List$nil);\n                                                    var self = $7294;\n                                                } else {\n                                                    var $7295 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($7287), Either$right$($7285), _ctx$4), List$nil));\n                                                    var self = $7295;\n                                                };\n                                                switch (self._) {\n                                                    case 'Kind.Check.result':\n                                                        var $7296 = self.value;\n                                                        var $7297 = self.errors;\n                                                        var $7298 = Kind$Check$result$($7296, List$concat$($7290, $7297));\n                                                        var $7293 = $7298;\n                                                        break;\n                                                };\n                                                var $7291 = $7293;\n                                                break;\n                                            case 'Maybe.none':\n                                                var $7299 = Kind$Check$result$(Maybe$none, $7290);\n                                                var $7291 = $7299;\n                                                break;\n                                        };\n                                        var $7288 = $7291;\n                                        break;\n                                };\n                                var self = $7288;\n                                break;\n                            case 'Maybe.none':\n                                var $7300 = Kind$Check$result$(Maybe$some$($7285), List$nil);\n                                var self = $7300;\n                                break;\n                        };\n                        switch (self._) {\n                            case 'Kind.Check.result':\n                                var $7301 = self.value;\n                                var $7302 = self.errors;\n                                var $7303 = Kind$Check$result$($7301, List$concat$($7283, $7302));\n                                var $7286 = $7303;\n                                break;\n                        };\n                        var $7284 = $7286;\n                        break;\n                    case 'Maybe.none':\n                        var $7304 = Kind$Check$result$(Maybe$none, $7283);\n                        var $7284 = $7304;\n                        break;\n                };\n                var $7069 = $7284;\n                break;\n        };\n        return $7069;\n    };\n    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);\n\n    function Kind$Path$nil$(_x$1) {\n        var $7305 = _x$1;\n        return $7305;\n    };\n    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);\n    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);\n\n    function List$is_empty$(_list$2) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.nil':\n                var $7307 = Bool$true;\n                var $7306 = $7307;\n                break;\n            case 'List.cons':\n                var $7308 = Bool$false;\n                var $7306 = $7308;\n                break;\n        };\n        return $7306;\n    };\n    const List$is_empty = x0 => List$is_empty$(x0);\n\n    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {\n        var self = _term$2;\n        switch (self._) {\n            case 'Kind.Term.all':\n                var $7310 = self.eras;\n                var $7311 = self.self;\n                var $7312 = self.name;\n                var $7313 = self.xtyp;\n                var $7314 = self.body;\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $7316 = self.slice(0, -1);\n                        var $7317 = Kind$Term$all$($7310, $7311, $7312, Kind$Term$patch_at$($7316, $7313, _fn$3), $7314);\n                        var $7315 = $7317;\n                        break;\n                    case 'i':\n                        var $7318 = self.slice(0, -1);\n                        var $7319 = Kind$Term$all$($7310, $7311, $7312, $7313, (_s$10 => _x$11 => {\n                            var $7320 = Kind$Term$patch_at$($7318, $7314(_s$10)(_x$11), _fn$3);\n                            return $7320;\n                        }));\n                        var $7315 = $7319;\n                        break;\n                    case 'e':\n                        var $7321 = _fn$3(_term$2);\n                        var $7315 = $7321;\n                        break;\n                };\n                var $7309 = $7315;\n                break;\n            case 'Kind.Term.lam':\n                var $7322 = self.name;\n                var $7323 = self.body;\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'e':\n                        var $7325 = _fn$3(_term$2);\n                        var $7324 = $7325;\n                        break;\n                    case 'o':\n                    case 'i':\n                        var $7326 = Kind$Term$lam$($7322, (_x$7 => {\n                            var $7327 = Kind$Term$patch_at$(Bits$tail$(_path$1), $7323(_x$7), _fn$3);\n                            return $7327;\n                        }));\n                        var $7324 = $7326;\n                        break;\n                };\n                var $7309 = $7324;\n                break;\n            case 'Kind.Term.app':\n                var $7328 = self.func;\n                var $7329 = self.argm;\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $7331 = self.slice(0, -1);\n                        var $7332 = Kind$Term$app$(Kind$Term$patch_at$($7331, $7328, _fn$3), $7329);\n                        var $7330 = $7332;\n                        break;\n                    case 'i':\n                        var $7333 = self.slice(0, -1);\n                        var $7334 = Kind$Term$app$($7328, Kind$Term$patch_at$($7333, $7329, _fn$3));\n                        var $7330 = $7334;\n                        break;\n                    case 'e':\n                        var $7335 = _fn$3(_term$2);\n                        var $7330 = $7335;\n                        break;\n                };\n                var $7309 = $7330;\n                break;\n            case 'Kind.Term.let':\n                var $7336 = self.name;\n                var $7337 = self.expr;\n                var $7338 = self.body;\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $7340 = self.slice(0, -1);\n                        var $7341 = Kind$Term$let$($7336, Kind$Term$patch_at$($7340, $7337, _fn$3), $7338);\n                        var $7339 = $7341;\n                        break;\n                    case 'i':\n                        var $7342 = self.slice(0, -1);\n                        var $7343 = Kind$Term$let$($7336, $7337, (_x$8 => {\n                            var $7344 = Kind$Term$patch_at$($7342, $7338(_x$8), _fn$3);\n                            return $7344;\n                        }));\n                        var $7339 = $7343;\n                        break;\n                    case 'e':\n                        var $7345 = _fn$3(_term$2);\n                        var $7339 = $7345;\n                        break;\n                };\n                var $7309 = $7339;\n                break;\n            case 'Kind.Term.def':\n                var $7346 = self.name;\n                var $7347 = self.expr;\n                var $7348 = self.body;\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $7350 = self.slice(0, -1);\n                        var $7351 = Kind$Term$def$($7346, Kind$Term$patch_at$($7350, $7347, _fn$3), $7348);\n                        var $7349 = $7351;\n                        break;\n                    case 'i':\n                        var $7352 = self.slice(0, -1);\n                        var $7353 = Kind$Term$def$($7346, $7347, (_x$8 => {\n                            var $7354 = Kind$Term$patch_at$($7352, $7348(_x$8), _fn$3);\n                            return $7354;\n                        }));\n                        var $7349 = $7353;\n                        break;\n                    case 'e':\n                        var $7355 = _fn$3(_term$2);\n                        var $7349 = $7355;\n                        break;\n                };\n                var $7309 = $7349;\n                break;\n            case 'Kind.Term.ann':\n                var $7356 = self.done;\n                var $7357 = self.term;\n                var $7358 = self.type;\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $7360 = self.slice(0, -1);\n                        var $7361 = Kind$Term$ann$($7356, Kind$Term$patch_at$($7360, $7357, _fn$3), $7358);\n                        var $7359 = $7361;\n                        break;\n                    case 'i':\n                        var $7362 = self.slice(0, -1);\n                        var $7363 = Kind$Term$ann$($7356, $7357, Kind$Term$patch_at$($7362, $7358, _fn$3));\n                        var $7359 = $7363;\n                        break;\n                    case 'e':\n                        var $7364 = _fn$3(_term$2);\n                        var $7359 = $7364;\n                        break;\n                };\n                var $7309 = $7359;\n                break;\n            case 'Kind.Term.ori':\n                var $7365 = self.orig;\n                var $7366 = self.expr;\n                var $7367 = Kind$Term$ori$($7365, Kind$Term$patch_at$(_path$1, $7366, _fn$3));\n                var $7309 = $7367;\n                break;\n            case 'Kind.Term.var':\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'e':\n                        var $7369 = _fn$3(_term$2);\n                        var $7368 = $7369;\n                        break;\n                    case 'o':\n                    case 'i':\n                        var $7370 = _term$2;\n                        var $7368 = $7370;\n                        break;\n                };\n                var $7309 = $7368;\n                break;\n            case 'Kind.Term.ref':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'e':\n                        var $7372 = _fn$3(_term$2);\n                        var $7371 = $7372;\n                        break;\n                    case 'o':\n                    case 'i':\n                        var $7373 = _term$2;\n                        var $7371 = $7373;\n                        break;\n                };\n                var $7309 = $7371;\n                break;\n            case 'Kind.Term.typ':\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'e':\n                        var $7375 = _fn$3(_term$2);\n                        var $7374 = $7375;\n                        break;\n                    case 'o':\n                    case 'i':\n                        var $7376 = _term$2;\n                        var $7374 = $7376;\n                        break;\n                };\n                var $7309 = $7374;\n                break;\n            case 'Kind.Term.gol':\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'e':\n                        var $7378 = _fn$3(_term$2);\n                        var $7377 = $7378;\n                        break;\n                    case 'o':\n                    case 'i':\n                        var $7379 = _term$2;\n                        var $7377 = $7379;\n                        break;\n                };\n                var $7309 = $7377;\n                break;\n            case 'Kind.Term.cse':\n                var self = _path$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'e':\n                        var $7381 = _fn$3(_term$2);\n                        var $7380 = $7381;\n                        break;\n                    case 'o':\n                    case 'i':\n                        var $7382 = _term$2;\n                        var $7380 = $7382;\n                        break;\n                };\n                var $7309 = $7380;\n                break;\n        };\n        return $7309;\n    };\n    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);\n\n    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {\n        var self = _errs$10;\n        switch (self._) {\n            case 'List.cons':\n                var $7384 = self.head;\n                var $7385 = self.tail;\n                var self = $7384;\n                switch (self._) {\n                    case 'Kind.Error.waiting':\n                        var $7387 = self.name;\n                        var $7388 = IO$monad$((_m$bind$15 => _m$pure$16 => {\n                            var $7389 = _m$bind$15;\n                            return $7389;\n                        }))(Kind$Synth$one$($7387, _defs$9))((_new_defs$15 => {\n                            var self = _new_defs$15;\n                            switch (self._) {\n                                case 'Maybe.some':\n                                    var $7391 = self.value;\n                                    var $7392 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7391, $7385, Bool$true);\n                                    var $7390 = $7392;\n                                    break;\n                                case 'Maybe.none':\n                                    var $7393 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7385, _fixd$11);\n                                    var $7390 = $7393;\n                                    break;\n                            };\n                            return $7390;\n                        }));\n                        var $7386 = $7388;\n                        break;\n                    case 'Kind.Error.patch':\n                        var $7394 = self.path;\n                        var $7395 = self.term;\n                        var self = $7394;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $7397 = self.slice(0, -1);\n                                var _term$17 = Kind$Term$patch_at$($7397, _term$5, (_x$17 => {\n                                    var $7399 = $7395;\n                                    return $7399;\n                                }));\n                                var $7398 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $7385, Bool$true);\n                                var $7396 = $7398;\n                                break;\n                            case 'i':\n                                var $7400 = self.slice(0, -1);\n                                var _type$17 = Kind$Term$patch_at$($7400, _type$6, (_x$17 => {\n                                    var $7402 = $7395;\n                                    return $7402;\n                                }));\n                                var $7401 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $7385, Bool$true);\n                                var $7396 = $7401;\n                                break;\n                            case 'e':\n                                var $7403 = IO$monad$((_m$bind$16 => _m$pure$17 => {\n                                    var $7404 = _m$pure$17;\n                                    return $7404;\n                                }))(Maybe$none);\n                                var $7396 = $7403;\n                                break;\n                        };\n                        var $7386 = $7396;\n                        break;\n                    case 'Kind.Error.undefined_reference':\n                        var $7405 = self.name;\n                        var $7406 = IO$monad$((_m$bind$16 => _m$pure$17 => {\n                            var $7407 = _m$bind$16;\n                            return $7407;\n                        }))(Kind$Synth$one$($7405, _defs$9))((_new_defs$16 => {\n                            var self = _new_defs$16;\n                            switch (self._) {\n                                case 'Maybe.some':\n                                    var $7409 = self.value;\n                                    var $7410 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7409, $7385, Bool$true);\n                                    var $7408 = $7410;\n                                    break;\n                                case 'Maybe.none':\n                                    var $7411 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7385, _fixd$11);\n                                    var $7408 = $7411;\n                                    break;\n                            };\n                            return $7408;\n                        }));\n                        var $7386 = $7406;\n                        break;\n                    case 'Kind.Error.type_mismatch':\n                    case 'Kind.Error.show_goal':\n                    case 'Kind.Error.indirect':\n                    case 'Kind.Error.cant_infer':\n                        var $7412 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7385, _fixd$11);\n                        var $7386 = $7412;\n                        break;\n                };\n                var $7383 = $7386;\n                break;\n            case 'List.nil':\n                var self = _fixd$11;\n                if (self) {\n                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {\n                        var $7415 = (_x$12 + '1');\n                        return $7415;\n                    }), _type$6);\n                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {\n                        var $7416 = (_x$13 + '0');\n                        return $7416;\n                    }), _term$5);\n                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);\n                    var $7414 = IO$monad$((_m$bind$15 => _m$pure$16 => {\n                        var $7417 = _m$pure$16;\n                        return $7417;\n                    }))(Maybe$some$(_defs$14));\n                    var $7413 = $7414;\n                } else {\n                    var $7418 = IO$monad$((_m$bind$12 => _m$pure$13 => {\n                        var $7419 = _m$pure$13;\n                        return $7419;\n                    }))(Maybe$none);\n                    var $7413 = $7418;\n                };\n                var $7383 = $7413;\n                break;\n        };\n        return $7383;\n    };\n    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);\n\n    function Kind$Status$fail$(_errors$1) {\n        var $7420 = ({\n            _: 'Kind.Status.fail',\n            'errors': _errors$1\n        });\n        return $7420;\n    };\n    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);\n\n    function Kind$Synth$one$(_name$1, _defs$2) {\n        var self = Kind$Map$get$(_name$1, _defs$2);\n        switch (self._) {\n            case 'Maybe.some':\n                var $7422 = self.value;\n                var self = $7422;\n                switch (self._) {\n                    case 'Kind.Def.new':\n                        var $7424 = self.file;\n                        var $7425 = self.code;\n                        var $7426 = self.orig;\n                        var $7427 = self.name;\n                        var $7428 = self.term;\n                        var $7429 = self.type;\n                        var $7430 = self.isct;\n                        var $7431 = self.arit;\n                        var $7432 = self.stat;\n                        var _file$13 = $7424;\n                        var _code$14 = $7425;\n                        var _orig$15 = $7426;\n                        var _name$16 = $7427;\n                        var _term$17 = $7428;\n                        var _type$18 = $7429;\n                        var _isct$19 = $7430;\n                        var _arit$20 = $7431;\n                        var _stat$21 = $7432;\n                        var self = _stat$21;\n                        switch (self._) {\n                            case 'Kind.Status.init':\n                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);\n                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7435 = self.value;\n                                        var $7436 = self.errors;\n                                        var self = $7435;\n                                        switch (self._) {\n                                            case 'Maybe.none':\n                                                var $7438 = Kind$Check$result$(Maybe$none, $7436);\n                                                var $7437 = $7438;\n                                                break;\n                                            case 'Maybe.some':\n                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);\n                                                switch (self._) {\n                                                    case 'Kind.Check.result':\n                                                        var $7440 = self.value;\n                                                        var $7441 = self.errors;\n                                                        var self = $7440;\n                                                        switch (self._) {\n                                                            case 'Maybe.none':\n                                                                var $7443 = Kind$Check$result$(Maybe$none, $7441);\n                                                                var $7442 = $7443;\n                                                                break;\n                                                            case 'Maybe.some':\n                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);\n                                                                switch (self._) {\n                                                                    case 'Kind.Check.result':\n                                                                        var $7445 = self.value;\n                                                                        var $7446 = self.errors;\n                                                                        var $7447 = Kind$Check$result$($7445, List$concat$($7441, $7446));\n                                                                        var $7444 = $7447;\n                                                                        break;\n                                                                };\n                                                                var $7442 = $7444;\n                                                                break;\n                                                        };\n                                                        var self = $7442;\n                                                        break;\n                                                };\n                                                switch (self._) {\n                                                    case 'Kind.Check.result':\n                                                        var $7448 = self.value;\n                                                        var $7449 = self.errors;\n                                                        var $7450 = Kind$Check$result$($7448, List$concat$($7436, $7449));\n                                                        var $7439 = $7450;\n                                                        break;\n                                                };\n                                                var $7437 = $7439;\n                                                break;\n                                        };\n                                        var _checked$23 = $7437;\n                                        break;\n                                };\n                                var self = _checked$23;\n                                switch (self._) {\n                                    case 'Kind.Check.result':\n                                        var $7451 = self.errors;\n                                        var self = List$is_empty$($7451);\n                                        if (self) {\n                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);\n                                            var $7453 = IO$monad$((_m$bind$27 => _m$pure$28 => {\n                                                var $7454 = _m$pure$28;\n                                                return $7454;\n                                            }))(Maybe$some$(_defs$26));\n                                            var $7452 = $7453;\n                                        } else {\n                                            var $7455 = IO$monad$((_m$bind$26 => _m$pure$27 => {\n                                                var $7456 = _m$bind$26;\n                                                return $7456;\n                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $7451, Bool$false))((_fixed$26 => {\n                                                var self = _fixed$26;\n                                                switch (self._) {\n                                                    case 'Maybe.some':\n                                                        var $7458 = self.value;\n                                                        var $7459 = Kind$Synth$one$(_name$16, $7458);\n                                                        var $7457 = $7459;\n                                                        break;\n                                                    case 'Maybe.none':\n                                                        var _stat$27 = Kind$Status$fail$($7451);\n                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);\n                                                        var $7460 = IO$monad$((_m$bind$29 => _m$pure$30 => {\n                                                            var $7461 = _m$pure$30;\n                                                            return $7461;\n                                                        }))(Maybe$some$(_defs$28));\n                                                        var $7457 = $7460;\n                                                        break;\n                                                };\n                                                return $7457;\n                                            }));\n                                            var $7452 = $7455;\n                                        };\n                                        var $7434 = $7452;\n                                        break;\n                                };\n                                var $7433 = $7434;\n                                break;\n                            case 'Kind.Status.wait':\n                                var $7462 = IO$monad$((_m$bind$22 => _m$pure$23 => {\n                                    var $7463 = _m$pure$23;\n                                    return $7463;\n                                }))(Maybe$some$(_defs$2));\n                                var $7433 = $7462;\n                                break;\n                            case 'Kind.Status.done':\n                            case 'Kind.Status.fail':\n                                var $7464 = IO$monad$((_m$bind$23 => _m$pure$24 => {\n                                    var $7465 = _m$pure$24;\n                                    return $7465;\n                                }))(Maybe$some$(_defs$2));\n                                var $7433 = $7464;\n                                break;\n                        };\n                        var $7423 = $7433;\n                        break;\n                };\n                var $7421 = $7423;\n                break;\n            case 'Maybe.none':\n                var $7466 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n                    var $7467 = _m$bind$3;\n                    return $7467;\n                }))(IO$get_time)((_time_a$3 => {\n                    var $7468 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                        var $7469 = _m$bind$4;\n                        return $7469;\n                    }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$4 => {\n                        var self = _loaded$4;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $7471 = self.value;\n                                var $7472 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                                    var $7473 = _m$bind$6;\n                                    return $7473;\n                                }))(IO$get_time)((_time_b$6 => {\n                                    var $7474 = IO$monad$((_m$bind$7 => _m$pure$8 => {\n                                        var $7475 = _m$bind$7;\n                                        return $7475;\n                                    }))(Kind$Synth$one$(_name$1, $7471))((_result$7 => {\n                                        var $7476 = IO$monad$((_m$bind$8 => _m$pure$9 => {\n                                            var $7477 = _m$bind$8;\n                                            return $7477;\n                                        }))(IO$get_time)((_time_c$8 => {\n                                            var $7478 = IO$monad$((_m$bind$9 => _m$pure$10 => {\n                                                var $7479 = _m$pure$10;\n                                                return $7479;\n                                            }))(_result$7);\n                                            return $7478;\n                                        }));\n                                        return $7476;\n                                    }));\n                                    return $7474;\n                                }));\n                                var $7470 = $7472;\n                                break;\n                            case 'Maybe.none':\n                                var $7480 = IO$monad$((_m$bind$5 => _m$pure$6 => {\n                                    var $7481 = _m$pure$6;\n                                    return $7481;\n                                }))(Maybe$none);\n                                var $7470 = $7480;\n                                break;\n                        };\n                        return $7470;\n                    }));\n                    return $7468;\n                }));\n                var $7421 = $7466;\n                break;\n        };\n        return $7421;\n    };\n    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);\n\n    function BitsMap$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $7483 = self.head;\n                var $7484 = self.tail;\n                var self = $7483;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $7486 = self.fst;\n                        var $7487 = self.snd;\n                        var $7488 = (bitsmap_set($7486, $7487, BitsMap$from_list$($7484), 'set'));\n                        var $7485 = $7488;\n                        break;\n                };\n                var $7482 = $7485;\n                break;\n            case 'List.nil':\n                var $7489 = BitsMap$new;\n                var $7482 = $7489;\n                break;\n        };\n        return $7482;\n    };\n    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);\n    const Kind$Term$inline$names = (() => {\n        var _inl$1 = List$cons$(\"Monad.pure\", List$cons$(\"Monad.bind\", List$cons$(\"Monad.new\", List$cons$(\"Parser.monad\", List$cons$(\"Parser.bind\", List$cons$(\"Parser.pure\", List$cons$(\"Kind.Check.pure\", List$cons$(\"Kind.Check.bind\", List$cons$(\"Kind.Check.monad\", List$cons$(\"Kind.Check.value\", List$cons$(\"Kind.Check.none\", List$nil)))))))))));\n        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {\n            var $7491 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);\n            return $7491;\n        }));\n        var $7490 = BitsMap$from_list$(_kvs$2);\n        return $7490;\n    })();\n\n    function Kind$Term$inline$reduce$(_term$1, _defs$2) {\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.ref':\n                var $7493 = self.name;\n                var _inli$4 = BitsSet$has$((kind_name_to_bits($7493)), Kind$Term$inline$names);\n                var self = _inli$4;\n                if (self) {\n                    var self = Kind$Map$get$($7493, _defs$2);\n                    switch (self._) {\n                        case 'Maybe.some':\n                            var $7496 = self.value;\n                            var self = $7496;\n                            switch (self._) {\n                                case 'Kind.Def.new':\n                                    var $7498 = self.term;\n                                    var $7499 = Kind$Term$inline$reduce$($7498, _defs$2);\n                                    var $7497 = $7499;\n                                    break;\n                            };\n                            var $7495 = $7497;\n                            break;\n                        case 'Maybe.none':\n                            var $7500 = Kind$Term$ref$($7493);\n                            var $7495 = $7500;\n                            break;\n                    };\n                    var $7494 = $7495;\n                } else {\n                    var $7501 = _term$1;\n                    var $7494 = $7501;\n                };\n                var $7492 = $7494;\n                break;\n            case 'Kind.Term.app':\n                var $7502 = self.func;\n                var $7503 = self.argm;\n                var _func$5 = Kind$Term$inline$reduce$($7502, _defs$2);\n                var self = _func$5;\n                switch (self._) {\n                    case 'Kind.Term.lam':\n                        var $7505 = self.body;\n                        var $7506 = Kind$Term$inline$reduce$($7505($7503), _defs$2);\n                        var $7504 = $7506;\n                        break;\n                    case 'Kind.Term.let':\n                        var $7507 = self.name;\n                        var $7508 = self.expr;\n                        var $7509 = self.body;\n                        var $7510 = Kind$Term$let$($7507, $7508, (_x$9 => {\n                            var $7511 = Kind$Term$inline$reduce$(Kind$Term$app$($7509(_x$9), $7503), _defs$2);\n                            return $7511;\n                        }));\n                        var $7504 = $7510;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.hol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                    case 'Kind.Term.ori':\n                        var $7512 = _term$1;\n                        var $7504 = $7512;\n                        break;\n                };\n                var $7492 = $7504;\n                break;\n            case 'Kind.Term.ori':\n                var $7513 = self.expr;\n                var $7514 = Kind$Term$inline$reduce$($7513, _defs$2);\n                var $7492 = $7514;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.typ':\n            case 'Kind.Term.all':\n            case 'Kind.Term.lam':\n            case 'Kind.Term.let':\n            case 'Kind.Term.def':\n            case 'Kind.Term.ann':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n            case 'Kind.Term.cse':\n                var $7515 = _term$1;\n                var $7492 = $7515;\n                break;\n        };\n        return $7492;\n    };\n    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);\n\n    function Kind$Term$inline$(_term$1, _defs$2) {\n        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);\n        switch (self._) {\n            case 'Kind.Term.var':\n                var $7517 = self.name;\n                var $7518 = self.indx;\n                var $7519 = Kind$Term$var$($7517, $7518);\n                var $7516 = $7519;\n                break;\n            case 'Kind.Term.ref':\n                var $7520 = self.name;\n                var $7521 = Kind$Term$ref$($7520);\n                var $7516 = $7521;\n                break;\n            case 'Kind.Term.all':\n                var $7522 = self.eras;\n                var $7523 = self.self;\n                var $7524 = self.name;\n                var $7525 = self.xtyp;\n                var $7526 = self.body;\n                var $7527 = Kind$Term$all$($7522, $7523, $7524, Kind$Term$inline$($7525, _defs$2), (_s$8 => _x$9 => {\n                    var $7528 = Kind$Term$inline$($7526(_s$8)(_x$9), _defs$2);\n                    return $7528;\n                }));\n                var $7516 = $7527;\n                break;\n            case 'Kind.Term.lam':\n                var $7529 = self.name;\n                var $7530 = self.body;\n                var $7531 = Kind$Term$lam$($7529, (_x$5 => {\n                    var $7532 = Kind$Term$inline$($7530(_x$5), _defs$2);\n                    return $7532;\n                }));\n                var $7516 = $7531;\n                break;\n            case 'Kind.Term.app':\n                var $7533 = self.func;\n                var $7534 = self.argm;\n                var $7535 = Kind$Term$app$(Kind$Term$inline$($7533, _defs$2), Kind$Term$inline$($7534, _defs$2));\n                var $7516 = $7535;\n                break;\n            case 'Kind.Term.let':\n                var $7536 = self.name;\n                var $7537 = self.expr;\n                var $7538 = self.body;\n                var $7539 = Kind$Term$let$($7536, Kind$Term$inline$($7537, _defs$2), (_x$6 => {\n                    var $7540 = Kind$Term$inline$($7538(_x$6), _defs$2);\n                    return $7540;\n                }));\n                var $7516 = $7539;\n                break;\n            case 'Kind.Term.def':\n                var $7541 = self.name;\n                var $7542 = self.expr;\n                var $7543 = self.body;\n                var $7544 = Kind$Term$def$($7541, Kind$Term$inline$($7542, _defs$2), (_x$6 => {\n                    var $7545 = Kind$Term$inline$($7543(_x$6), _defs$2);\n                    return $7545;\n                }));\n                var $7516 = $7544;\n                break;\n            case 'Kind.Term.ann':\n                var $7546 = self.done;\n                var $7547 = self.term;\n                var $7548 = self.type;\n                var $7549 = Kind$Term$ann$($7546, Kind$Term$inline$($7547, _defs$2), Kind$Term$inline$($7548, _defs$2));\n                var $7516 = $7549;\n                break;\n            case 'Kind.Term.gol':\n                var $7550 = self.name;\n                var $7551 = self.dref;\n                var $7552 = self.verb;\n                var $7553 = Kind$Term$gol$($7550, $7551, $7552);\n                var $7516 = $7553;\n                break;\n            case 'Kind.Term.hol':\n                var $7554 = self.path;\n                var $7555 = Kind$Term$hol$($7554);\n                var $7516 = $7555;\n                break;\n            case 'Kind.Term.nat':\n                var $7556 = self.natx;\n                var $7557 = Kind$Term$nat$($7556);\n                var $7516 = $7557;\n                break;\n            case 'Kind.Term.chr':\n                var $7558 = self.chrx;\n                var $7559 = Kind$Term$chr$($7558);\n                var $7516 = $7559;\n                break;\n            case 'Kind.Term.str':\n                var $7560 = self.strx;\n                var $7561 = Kind$Term$str$($7560);\n                var $7516 = $7561;\n                break;\n            case 'Kind.Term.ori':\n                var $7562 = self.expr;\n                var $7563 = Kind$Term$inline$($7562, _defs$2);\n                var $7516 = $7563;\n                break;\n            case 'Kind.Term.typ':\n                var $7564 = Kind$Term$typ;\n                var $7516 = $7564;\n                break;\n            case 'Kind.Term.cse':\n                var $7565 = _term$1;\n                var $7516 = $7565;\n                break;\n        };\n        return $7516;\n    };\n    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);\n\n    function BitsMap$values$go$(_xs$2, _list$3) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $7567 = self.val;\n                var $7568 = self.lft;\n                var $7569 = self.rgt;\n                var self = $7567;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $7571 = self.value;\n                        var $7572 = List$cons$($7571, _list$3);\n                        var _list0$7 = $7572;\n                        break;\n                    case 'Maybe.none':\n                        var $7573 = _list$3;\n                        var _list0$7 = $7573;\n                        break;\n                };\n                var _list1$8 = BitsMap$values$go$($7568, _list0$7);\n                var _list2$9 = BitsMap$values$go$($7569, _list1$8);\n                var $7570 = _list2$9;\n                var $7566 = $7570;\n                break;\n            case 'BitsMap.new':\n                var $7574 = _list$3;\n                var $7566 = $7574;\n                break;\n        };\n        return $7566;\n    };\n    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);\n\n    function BitsMap$values$(_xs$2) {\n        var $7575 = BitsMap$values$go$(_xs$2, List$nil);\n        return $7575;\n    };\n    const BitsMap$values = x0 => BitsMap$values$(x0);\n\n    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {\n        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({\n            ctr: 'TCO',\n            arg: [_indx$1, _name$2, _brui$3, _vars$4]\n        });\n        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);\n        var arg = [_indx$1, _name$2, _brui$3, _vars$4];\n        while (true) {\n            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;\n            var R = (() => {\n                var self = _indx$1;\n                if (self === 0n) {\n                    var self = _brui$3;\n                    if (self === 0n) {\n                        var $7577 = _name$2;\n                        var $7576 = $7577;\n                    } else {\n                        var $7578 = (self - 1n);\n                        var $7579 = (_name$2 + (\"^\" + Nat$show$(_brui$3)));\n                        var $7576 = $7579;\n                    };\n                    return $7576;\n                } else {\n                    var $7580 = (self - 1n);\n                    var self = _vars$4;\n                    switch (self._) {\n                        case 'List.cons':\n                            var $7582 = self.head;\n                            var $7583 = self.tail;\n                            var self = (_name$2 === $7582);\n                            if (self) {\n                                var $7585 = Nat$succ$(_brui$3);\n                                var _brui$8 = $7585;\n                            } else {\n                                var $7586 = _brui$3;\n                                var _brui$8 = $7586;\n                            };\n                            var $7584 = Kind$Core$var_name$($7580, _name$2, _brui$8, $7583);\n                            var $7581 = $7584;\n                            break;\n                        case 'List.nil':\n                            var $7587 = \"unbound\";\n                            var $7581 = $7587;\n                            break;\n                    };\n                    return $7581;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);\n\n    function Kind$Name$show$(_name$1) {\n        var $7588 = _name$1;\n        return $7588;\n    };\n    const Kind$Name$show = x0 => Kind$Name$show$(x0);\n\n    function Bits$to_nat$(_b$1) {\n        var self = _b$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $7590 = self.slice(0, -1);\n                var $7591 = (2n * Bits$to_nat$($7590));\n                var $7589 = $7591;\n                break;\n            case 'i':\n                var $7592 = self.slice(0, -1);\n                var $7593 = Nat$succ$((2n * Bits$to_nat$($7592)));\n                var $7589 = $7593;\n                break;\n            case 'e':\n                var $7594 = 0n;\n                var $7589 = $7594;\n                break;\n        };\n        return $7589;\n    };\n    const Bits$to_nat = x0 => Bits$to_nat$(x0);\n\n    function U16$show_hex$(_a$1) {\n        var self = _a$1;\n        switch ('u16') {\n            case 'u16':\n                var $7596 = u16_to_word(self);\n                var $7597 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($7596)));\n                var $7595 = $7597;\n                break;\n        };\n        return $7595;\n    };\n    const U16$show_hex = x0 => U16$show_hex$(x0);\n\n    function Kind$Code$escape$char$(_chr$1) {\n        var self = (_chr$1 === Kind$Code$backslash);\n        if (self) {\n            var $7599 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));\n            var $7598 = $7599;\n        } else {\n            var self = (_chr$1 === 34);\n            if (self) {\n                var $7601 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));\n                var $7600 = $7601;\n            } else {\n                var self = (_chr$1 === 39);\n                if (self) {\n                    var $7603 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));\n                    var $7602 = $7603;\n                } else {\n                    var self = U16$btw$(32, _chr$1, 126);\n                    if (self) {\n                        var $7605 = String$cons$(_chr$1, String$nil);\n                        var $7604 = $7605;\n                    } else {\n                        var $7606 = (String$cons$(Kind$Code$backslash, String$nil) + (\"u{\" + (U16$show_hex$(_chr$1) + \"}\")));\n                        var $7604 = $7606;\n                    };\n                    var $7602 = $7604;\n                };\n                var $7600 = $7602;\n            };\n            var $7598 = $7600;\n        };\n        return $7598;\n    };\n    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);\n\n    function Kind$Code$escape$go$(_str$1, _result$2) {\n        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({\n            ctr: 'TCO',\n            arg: [_str$1, _result$2]\n        });\n        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);\n        var arg = [_str$1, _result$2];\n        while (true) {\n            let [_str$1, _result$2] = arg;\n            var R = (() => {\n                var self = _str$1;\n                if (self.length === 0) {\n                    var $7607 = String$reverse$(_result$2);\n                    return $7607;\n                } else {\n                    var $7608 = self.charCodeAt(0);\n                    var $7609 = self.slice(1);\n                    var $7610 = Kind$Code$escape$go$($7609, (String$reverse$(Kind$Code$escape$char$($7608)) + _result$2));\n                    return $7610;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);\n\n    function Kind$Code$escape$(_str$1) {\n        var $7611 = Kind$Code$escape$go$(_str$1, \"\");\n        return $7611;\n    };\n    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);\n\n    function Kind$Core$show$go$(_term$1, _indx$2, _vars$3) {\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.var':\n                var $7613 = self.name;\n                var $7614 = self.indx;\n                var $7615 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $7614 <= 0n ? 0n : _indx$2 - $7614)), $7613, 0n, _vars$3);\n                var $7612 = $7615;\n                break;\n            case 'Kind.Term.ref':\n                var $7616 = self.name;\n                var $7617 = Kind$Name$show$($7616);\n                var $7612 = $7617;\n                break;\n            case 'Kind.Term.all':\n                var $7618 = self.eras;\n                var $7619 = self.self;\n                var $7620 = self.name;\n                var $7621 = self.xtyp;\n                var $7622 = self.body;\n                var _eras$9 = $7618;\n                var self = _eras$9;\n                if (self) {\n                    var $7624 = \"%\";\n                    var _init$10 = $7624;\n                } else {\n                    var $7625 = \"@\";\n                    var _init$10 = $7625;\n                };\n                var _self$11 = Kind$Name$show$($7619);\n                var _name$12 = Kind$Name$show$($7620);\n                var _xtyp$13 = Kind$Core$show$go$($7621, _indx$2, _vars$3);\n                var _body$14 = Kind$Core$show$go$($7622(Kind$Term$var$($7619, _indx$2))(Kind$Term$var$($7620, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($7620, List$cons$($7619, _vars$3)));\n                var $7623 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$(\"(\", List$cons$(_name$12, List$cons$(\":\", List$cons$(_xtyp$13, List$cons$(\") \", List$cons$(_body$14, List$nil)))))))));\n                var $7612 = $7623;\n                break;\n            case 'Kind.Term.lam':\n                var $7626 = self.name;\n                var $7627 = self.body;\n                var _name$6 = Kind$Name$show$($7626);\n                var _body$7 = Kind$Core$show$go$($7627(Kind$Term$var$($7626, _indx$2)), Nat$succ$(_indx$2), List$cons$($7626, _vars$3));\n                var $7628 = String$flatten$(List$cons$(\"#\", List$cons$(_name$6, List$cons$(\" \", List$cons$(_body$7, List$nil)))));\n                var $7612 = $7628;\n                break;\n            case 'Kind.Term.app':\n                var $7629 = self.func;\n                var $7630 = self.argm;\n                var _func$6 = Kind$Core$show$go$($7629, _indx$2, _vars$3);\n                var _argm$7 = Kind$Core$show$go$($7630, _indx$2, _vars$3);\n                var $7631 = String$flatten$(List$cons$(\"(\", List$cons$(_func$6, List$cons$(\" \", List$cons$(_argm$7, List$cons$(\")\", List$nil))))));\n                var $7612 = $7631;\n                break;\n            case 'Kind.Term.let':\n                var $7632 = self.name;\n                var $7633 = self.expr;\n                var $7634 = self.body;\n                var _name$7 = Kind$Name$show$($7632);\n                var _expr$8 = Kind$Core$show$go$($7633, _indx$2, _vars$3);\n                var _body$9 = Kind$Core$show$go$($7634(Kind$Term$var$($7632, _indx$2)), Nat$succ$(_indx$2), List$cons$($7632, _vars$3));\n                var $7635 = String$flatten$(List$cons$(\"!\", List$cons$(_name$7, List$cons$(\" = \", List$cons$(_expr$8, List$cons$(\"; \", List$cons$(_body$9, List$nil)))))));\n                var $7612 = $7635;\n                break;\n            case 'Kind.Term.def':\n                var $7636 = self.name;\n                var $7637 = self.expr;\n                var $7638 = self.body;\n                var _name$7 = Kind$Name$show$($7636);\n                var _expr$8 = Kind$Core$show$go$($7637, _indx$2, _vars$3);\n                var _body$9 = Kind$Core$show$go$($7638(Kind$Term$var$($7636, _indx$2)), Nat$succ$(_indx$2), List$cons$($7636, _vars$3));\n                var $7639 = String$flatten$(List$cons$(\"$\", List$cons$(_name$7, List$cons$(\" = \", List$cons$(_expr$8, List$cons$(\"; \", List$cons$(_body$9, List$nil)))))));\n                var $7612 = $7639;\n                break;\n            case 'Kind.Term.ann':\n                var $7640 = self.term;\n                var $7641 = self.type;\n                var _term$7 = Kind$Core$show$go$($7640, _indx$2, _vars$3);\n                var _type$8 = Kind$Core$show$go$($7641, _indx$2, _vars$3);\n                var $7642 = String$flatten$(List$cons$(\"{\", List$cons$(_term$7, List$cons$(\":\", List$cons$(_type$8, List$cons$(\"}\", List$nil))))));\n                var $7612 = $7642;\n                break;\n            case 'Kind.Term.nat':\n                var $7643 = self.natx;\n                var $7644 = String$flatten$(List$cons$(\"+\", List$cons$(Nat$show$($7643), List$nil)));\n                var $7612 = $7644;\n                break;\n            case 'Kind.Term.chr':\n                var $7645 = self.chrx;\n                var $7646 = String$flatten$(List$cons$(\"\\'\", List$cons$(Kind$Code$escape$char$($7645), List$cons$(\"\\'\", List$nil))));\n                var $7612 = $7646;\n                break;\n            case 'Kind.Term.str':\n                var $7647 = self.strx;\n                var $7648 = String$flatten$(List$cons$(\"\\\"\", List$cons$(Kind$Code$escape$($7647), List$cons$(\"\\\"\", List$nil))));\n                var $7612 = $7648;\n                break;\n            case 'Kind.Term.ori':\n                var $7649 = self.expr;\n                var $7650 = Kind$Core$show$go$($7649, _indx$2, _vars$3);\n                var $7612 = $7650;\n                break;\n            case 'Kind.Term.typ':\n                var $7651 = \"*\";\n                var $7612 = $7651;\n                break;\n            case 'Kind.Term.gol':\n                var $7652 = \"<GOL>\";\n                var $7612 = $7652;\n                break;\n            case 'Kind.Term.hol':\n                var $7653 = \"<HOL>\";\n                var $7612 = $7653;\n                break;\n            case 'Kind.Term.cse':\n                var $7654 = \"<CSE>\";\n                var $7612 = $7654;\n                break;\n        };\n        return $7612;\n    };\n    const Kind$Core$show$go = x0 => x1 => x2 => Kind$Core$show$go$(x0, x1, x2);\n\n    function Kind$Core$show$(_term$1) {\n        var $7655 = Kind$Core$show$go$(_term$1, 0n, List$nil);\n        return $7655;\n    };\n    const Kind$Core$show = x0 => Kind$Core$show$(x0);\n\n    function Kind$Defs$core$(_defs$1) {\n        var _result$2 = \"\";\n        var _result$3 = (() => {\n            var $7658 = _result$2;\n            var $7659 = BitsMap$values$(_defs$1);\n            let _result$4 = $7658;\n            let _defn$3;\n            while ($7659._ === 'List.cons') {\n                _defn$3 = $7659.head;\n                var self = _defn$3;\n                switch (self._) {\n                    case 'Kind.Def.new':\n                        var $7660 = self.name;\n                        var $7661 = self.term;\n                        var $7662 = self.type;\n                        var $7663 = self.stat;\n                        var self = $7663;\n                        switch (self._) {\n                            case 'Kind.Status.init':\n                            case 'Kind.Status.wait':\n                            case 'Kind.Status.fail':\n                                var $7665 = _result$4;\n                                var $7664 = $7665;\n                                break;\n                            case 'Kind.Status.done':\n                                var _name$15 = $7660;\n                                var _term$16 = Kind$Core$show$($7661);\n                                var _type$17 = Kind$Core$show$($7662);\n                                var $7666 = String$flatten$(List$cons$(_result$4, List$cons$(_name$15, List$cons$(\" : \", List$cons$(_type$17, List$cons$(\" = \", List$cons$(_term$16, List$cons$(\";\\u{a}\", List$nil))))))));\n                                var $7664 = $7666;\n                                break;\n                        };\n                        var $7658 = $7664;\n                        break;\n                };\n                _result$4 = $7658;\n                $7659 = $7659.tail;\n            }\n            return _result$4;\n        })();\n        var $7656 = _result$3;\n        return $7656;\n    };\n    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);\n\n    function Kind$api$io$term_to_core$(_name$1) {\n        var $7667 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $7668 = _m$bind$2;\n            return $7668;\n        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {\n            var self = _new_defs$2;\n            switch (self._) {\n                case 'Maybe.some':\n                    var $7670 = self.value;\n                    var $7671 = $7670;\n                    var _defs$3 = $7671;\n                    break;\n                case 'Maybe.none':\n                    var $7672 = Kind$Map$new;\n                    var _defs$3 = $7672;\n                    break;\n            };\n            var _defs$4 = BitsMap$map$((_defn$4 => {\n                var self = _defn$4;\n                switch (self._) {\n                    case 'Kind.Def.new':\n                        var $7674 = self.file;\n                        var $7675 = self.code;\n                        var $7676 = self.orig;\n                        var $7677 = self.name;\n                        var $7678 = self.term;\n                        var $7679 = self.type;\n                        var $7680 = self.isct;\n                        var $7681 = self.arit;\n                        var $7682 = self.stat;\n                        var _term$14 = Kind$Term$inline$($7678, _defs$3);\n                        var _type$15 = Kind$Term$inline$($7679, _defs$3);\n                        var $7683 = Kind$Def$new$($7674, $7675, $7676, $7677, _term$14, _type$15, $7680, $7681, $7682);\n                        var $7673 = $7683;\n                        break;\n                };\n                return $7673;\n            }), _defs$3);\n            var $7669 = IO$monad$((_m$bind$5 => _m$pure$6 => {\n                var $7684 = _m$pure$6;\n                return $7684;\n            }))(Kind$Defs$core$(_defs$4));\n            return $7669;\n        }));\n        return $7667;\n    };\n    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);\n\n    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $7686 = self.val;\n                var $7687 = self.lft;\n                var $7688 = self.rgt;\n                var self = $7686;\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $7690 = _list$4;\n                        var _list0$8 = $7690;\n                        break;\n                    case 'Maybe.some':\n                        var $7691 = List$cons$(Bits$reverse$(_key$3), _list$4);\n                        var _list0$8 = $7691;\n                        break;\n                };\n                var _list1$9 = BitsMap$keys$go$($7687, (_key$3 + '0'), _list0$8);\n                var _list2$10 = BitsMap$keys$go$($7688, (_key$3 + '1'), _list1$9);\n                var $7689 = _list2$10;\n                var $7685 = $7689;\n                break;\n            case 'BitsMap.new':\n                var $7692 = _list$4;\n                var $7685 = $7692;\n                break;\n        };\n        return $7685;\n    };\n    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);\n\n    function BitsMap$keys$(_xs$2) {\n        var $7693 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));\n        return $7693;\n    };\n    const BitsMap$keys = x0 => BitsMap$keys$(x0);\n\n    function Kind$Synth$many$(_names$1, _defs$2) {\n        var self = _names$1;\n        switch (self._) {\n            case 'List.cons':\n                var $7695 = self.head;\n                var $7696 = self.tail;\n                var $7697 = IO$monad$((_m$bind$5 => _m$pure$6 => {\n                    var $7698 = _m$bind$5;\n                    return $7698;\n                }))(Kind$Synth$one$($7695, _defs$2))((_new_defs$5 => {\n                    var self = _new_defs$5;\n                    switch (self._) {\n                        case 'Maybe.some':\n                            var $7700 = self.value;\n                            var $7701 = Kind$Synth$many$($7696, $7700);\n                            var $7699 = $7701;\n                            break;\n                        case 'Maybe.none':\n                            var $7702 = Kind$Synth$many$($7696, _defs$2);\n                            var $7699 = $7702;\n                            break;\n                    };\n                    return $7699;\n                }));\n                var $7694 = $7697;\n                break;\n            case 'List.nil':\n                var $7703 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n                    var $7704 = _m$pure$4;\n                    return $7704;\n                }))(_defs$2);\n                var $7694 = $7703;\n                break;\n        };\n        return $7694;\n    };\n    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);\n\n    function Kind$Synth$file$(_file$1, _defs$2) {\n        var $7705 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $7706 = _m$bind$3;\n            return $7706;\n        }))(IO$get_file$(_file$1))((_code$3 => {\n            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);\n            var self = _read$4;\n            switch (self._) {\n                case 'Either.left':\n                    var $7708 = self.value;\n                    var $7709 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                        var $7710 = _m$pure$7;\n                        return $7710;\n                    }))(Either$left$($7708));\n                    var $7707 = $7709;\n                    break;\n                case 'Either.right':\n                    var $7711 = self.value;\n                    var _file_defs$6 = $7711;\n                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);\n                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);\n                    var $7712 = IO$monad$((_m$bind$9 => _m$pure$10 => {\n                        var $7713 = _m$bind$9;\n                        return $7713;\n                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {\n                        var $7714 = IO$monad$((_m$bind$10 => _m$pure$11 => {\n                            var $7715 = _m$pure$11;\n                            return $7715;\n                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));\n                        return $7714;\n                    }));\n                    var $7707 = $7712;\n                    break;\n            };\n            return $7707;\n        }));\n        return $7705;\n    };\n    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);\n\n    function IO$put_string$(_text$1) {\n        var $7716 = IO$ask$(\"put_string\", _text$1, (_skip$2 => {\n            var $7717 = IO$end$(Unit$new);\n            return $7717;\n        }));\n        return $7716;\n    };\n    const IO$put_string = x0 => IO$put_string$(x0);\n\n    function IO$print$(_text$1) {\n        var $7718 = IO$put_string$((_text$1 + \"\\u{a}\"));\n        return $7718;\n    };\n    const IO$print = x0 => IO$print$(x0);\n\n    function Kind$Term$show$as_nat$go$(_term$1) {\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.ref':\n                var $7720 = self.name;\n                var self = ($7720 === \"Nat.zero\");\n                if (self) {\n                    var $7722 = Maybe$some$(0n);\n                    var $7721 = $7722;\n                } else {\n                    var $7723 = Maybe$none;\n                    var $7721 = $7723;\n                };\n                var $7719 = $7721;\n                break;\n            case 'Kind.Term.app':\n                var $7724 = self.func;\n                var $7725 = self.argm;\n                var self = $7724;\n                switch (self._) {\n                    case 'Kind.Term.ref':\n                        var $7727 = self.name;\n                        var self = ($7727 === \"Nat.succ\");\n                        if (self) {\n                            var $7729 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {\n                                var $7730 = _m$bind$5;\n                                return $7730;\n                            }))(Kind$Term$show$as_nat$go$($7725))((_pred$5 => {\n                                var $7731 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {\n                                    var $7732 = _m$pure$7;\n                                    return $7732;\n                                }))(Nat$succ$(_pred$5));\n                                return $7731;\n                            }));\n                            var $7728 = $7729;\n                        } else {\n                            var $7733 = Maybe$none;\n                            var $7728 = $7733;\n                        };\n                        var $7726 = $7728;\n                        break;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.app':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.hol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                    case 'Kind.Term.ori':\n                        var $7734 = Maybe$none;\n                        var $7726 = $7734;\n                        break;\n                };\n                var $7719 = $7726;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.typ':\n            case 'Kind.Term.all':\n            case 'Kind.Term.lam':\n            case 'Kind.Term.let':\n            case 'Kind.Term.def':\n            case 'Kind.Term.ann':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n            case 'Kind.Term.cse':\n            case 'Kind.Term.ori':\n                var $7735 = Maybe$none;\n                var $7719 = $7735;\n                break;\n        };\n        return $7719;\n    };\n    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);\n\n    function Kind$Term$show$as_nat$(_term$1) {\n        var $7736 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);\n        return $7736;\n    };\n    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);\n\n    function Kind$Term$show$is_ref$(_term$1, _name$2) {\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.ref':\n                var $7738 = self.name;\n                var $7739 = (_name$2 === $7738);\n                var $7737 = $7739;\n                break;\n            case 'Kind.Term.var':\n            case 'Kind.Term.typ':\n            case 'Kind.Term.all':\n            case 'Kind.Term.lam':\n            case 'Kind.Term.app':\n            case 'Kind.Term.let':\n            case 'Kind.Term.def':\n            case 'Kind.Term.ann':\n            case 'Kind.Term.gol':\n            case 'Kind.Term.hol':\n            case 'Kind.Term.nat':\n            case 'Kind.Term.chr':\n            case 'Kind.Term.str':\n            case 'Kind.Term.cse':\n            case 'Kind.Term.ori':\n                var $7740 = Bool$false;\n                var $7737 = $7740;\n                break;\n        };\n        return $7737;\n    };\n    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);\n\n    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {\n        var _arity$4 = (list_length(_args$3));\n        var self = (Kind$Term$show$is_ref$(_term$1, \"Equal\") && (_arity$4 === 3n));\n        if (self) {\n            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);\n            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), \"?\");\n            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), \"?\");\n            var $7742 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(\" == \", List$cons$(_eq_rgt$7, List$nil))));\n            var $7741 = $7742;\n        } else {\n            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);\n            var self = _func$5;\n            if (self.length === 0) {\n                var $7744 = Bool$false;\n                var _wrap$6 = $7744;\n            } else {\n                var $7745 = self.charCodeAt(0);\n                var $7746 = self.slice(1);\n                var $7747 = ($7745 === 40);\n                var _wrap$6 = $7747;\n            };\n            var _args$7 = String$join$(\",\", _args$3);\n            var self = _wrap$6;\n            if (self) {\n                var $7748 = String$flatten$(List$cons$(\"(\", List$cons$(_func$5, List$cons$(\")\", List$nil))));\n                var _func$8 = $7748;\n            } else {\n                var $7749 = _func$5;\n                var _func$8 = $7749;\n            };\n            var $7743 = String$flatten$(List$cons$(_func$8, List$cons$(\"(\", List$cons$(_args$7, List$cons$(\")\", List$nil)))));\n            var $7741 = $7743;\n        };\n        return $7741;\n    };\n    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);\n\n    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {\n        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({\n            ctr: 'TCO',\n            arg: [_term$1, _path$2, _args$3]\n        });\n        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);\n        var arg = [_term$1, _path$2, _args$3];\n        while (true) {\n            let [_term$1, _path$2, _args$3] = arg;\n            var R = (() => {\n                var self = _term$1;\n                switch (self._) {\n                    case 'Kind.Term.app':\n                        var $7750 = self.func;\n                        var $7751 = self.argm;\n                        var $7752 = Kind$Term$show$app$($7750, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($7751, Kind$MPath$i$(_path$2)), _args$3));\n                        return $7752;\n                    case 'Kind.Term.ori':\n                        var $7753 = self.expr;\n                        var $7754 = Kind$Term$show$app$($7753, _path$2, _args$3);\n                        return $7754;\n                    case 'Kind.Term.var':\n                    case 'Kind.Term.ref':\n                    case 'Kind.Term.typ':\n                    case 'Kind.Term.all':\n                    case 'Kind.Term.lam':\n                    case 'Kind.Term.let':\n                    case 'Kind.Term.def':\n                    case 'Kind.Term.ann':\n                    case 'Kind.Term.gol':\n                    case 'Kind.Term.hol':\n                    case 'Kind.Term.nat':\n                    case 'Kind.Term.chr':\n                    case 'Kind.Term.str':\n                    case 'Kind.Term.cse':\n                        var $7755 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);\n                        return $7755;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);\n\n    function BitsMap$to_list$(_xs$2) {\n        var $7756 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));\n        return $7756;\n    };\n    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);\n\n    function Kind$Term$show$go$(_term$1, _path$2) {\n        var self = Kind$Term$show$as_nat$(_term$1);\n        switch (self._) {\n            case 'Maybe.some':\n                var $7758 = self.value;\n                var $7759 = $7758;\n                var $7757 = $7759;\n                break;\n            case 'Maybe.none':\n                var self = _term$1;\n                switch (self._) {\n                    case 'Kind.Term.var':\n                        var $7761 = self.name;\n                        var $7762 = Kind$Name$show$($7761);\n                        var $7760 = $7762;\n                        break;\n                    case 'Kind.Term.ref':\n                        var $7763 = self.name;\n                        var _name$4 = Kind$Name$show$($7763);\n                        var self = _path$2;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $7765 = self.value;\n                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($7765));\n                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));\n                                var $7766 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$(\"2\", (\"-\" + _path_str$7)), List$nil)));\n                                var $7764 = $7766;\n                                break;\n                            case 'Maybe.none':\n                                var $7767 = _name$4;\n                                var $7764 = $7767;\n                                break;\n                        };\n                        var $7760 = $7764;\n                        break;\n                    case 'Kind.Term.all':\n                        var $7768 = self.eras;\n                        var $7769 = self.self;\n                        var $7770 = self.name;\n                        var $7771 = self.xtyp;\n                        var $7772 = self.body;\n                        var _eras$8 = $7768;\n                        var _self$9 = Kind$Name$show$($7769);\n                        var _name$10 = Kind$Name$show$($7770);\n                        var _type$11 = Kind$Term$show$go$($7771, Kind$MPath$o$(_path$2));\n                        var self = _eras$8;\n                        if (self) {\n                            var $7774 = \"<\";\n                            var _open$12 = $7774;\n                        } else {\n                            var $7775 = \"(\";\n                            var _open$12 = $7775;\n                        };\n                        var self = _eras$8;\n                        if (self) {\n                            var $7776 = \">\";\n                            var _clos$13 = $7776;\n                        } else {\n                            var $7777 = \")\";\n                            var _clos$13 = $7777;\n                        };\n                        var _body$14 = Kind$Term$show$go$($7772(Kind$Term$var$($7769, 0n))(Kind$Term$var$($7770, 0n)), Kind$MPath$i$(_path$2));\n                        var $7773 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(\":\", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(\" \", List$cons$(_body$14, List$nil)))))))));\n                        var $7760 = $7773;\n                        break;\n                    case 'Kind.Term.lam':\n                        var $7778 = self.name;\n                        var $7779 = self.body;\n                        var _name$5 = Kind$Name$show$($7778);\n                        var _body$6 = Kind$Term$show$go$($7779(Kind$Term$var$($7778, 0n)), Kind$MPath$o$(_path$2));\n                        var $7780 = String$flatten$(List$cons$(\"(\", List$cons$(_name$5, List$cons$(\") \", List$cons$(_body$6, List$nil)))));\n                        var $7760 = $7780;\n                        break;\n                    case 'Kind.Term.let':\n                        var $7781 = self.name;\n                        var $7782 = self.expr;\n                        var $7783 = self.body;\n                        var _name$6 = Kind$Name$show$($7781);\n                        var _expr$7 = Kind$Term$show$go$($7782, Kind$MPath$o$(_path$2));\n                        var _body$8 = Kind$Term$show$go$($7783(Kind$Term$var$($7781, 0n)), Kind$MPath$i$(_path$2));\n                        var $7784 = String$flatten$(List$cons$(\"let \", List$cons$(_name$6, List$cons$(\" = \", List$cons$(_expr$7, List$cons$(\"; \", List$cons$(_body$8, List$nil)))))));\n                        var $7760 = $7784;\n                        break;\n                    case 'Kind.Term.def':\n                        var $7785 = self.name;\n                        var $7786 = self.expr;\n                        var $7787 = self.body;\n                        var _name$6 = Kind$Name$show$($7785);\n                        var _expr$7 = Kind$Term$show$go$($7786, Kind$MPath$o$(_path$2));\n                        var _body$8 = Kind$Term$show$go$($7787(Kind$Term$var$($7785, 0n)), Kind$MPath$i$(_path$2));\n                        var $7788 = String$flatten$(List$cons$(\"def \", List$cons$(_name$6, List$cons$(\" = \", List$cons$(_expr$7, List$cons$(\"; \", List$cons$(_body$8, List$nil)))))));\n                        var $7760 = $7788;\n                        break;\n                    case 'Kind.Term.ann':\n                        var $7789 = self.term;\n                        var $7790 = self.type;\n                        var _term$6 = Kind$Term$show$go$($7789, Kind$MPath$o$(_path$2));\n                        var _type$7 = Kind$Term$show$go$($7790, Kind$MPath$i$(_path$2));\n                        var $7791 = String$flatten$(List$cons$(_term$6, List$cons$(\"::\", List$cons$(_type$7, List$nil))));\n                        var $7760 = $7791;\n                        break;\n                    case 'Kind.Term.gol':\n                        var $7792 = self.name;\n                        var _name$6 = Kind$Name$show$($7792);\n                        var $7793 = String$flatten$(List$cons$(\"?\", List$cons$(_name$6, List$nil)));\n                        var $7760 = $7793;\n                        break;\n                    case 'Kind.Term.nat':\n                        var $7794 = self.natx;\n                        var $7795 = String$flatten$(List$cons$(Nat$show$($7794), List$nil));\n                        var $7760 = $7795;\n                        break;\n                    case 'Kind.Term.chr':\n                        var $7796 = self.chrx;\n                        var $7797 = String$flatten$(List$cons$(\"\\'\", List$cons$(Kind$Code$escape$char$($7796), List$cons$(\"\\'\", List$nil))));\n                        var $7760 = $7797;\n                        break;\n                    case 'Kind.Term.str':\n                        var $7798 = self.strx;\n                        var $7799 = String$flatten$(List$cons$(\"\\\"\", List$cons$(Kind$Code$escape$($7798), List$cons$(\"\\\"\", List$nil))));\n                        var $7760 = $7799;\n                        break;\n                    case 'Kind.Term.cse':\n                        var $7800 = self.expr;\n                        var $7801 = self.name;\n                        var $7802 = self.with;\n                        var $7803 = self.cses;\n                        var $7804 = self.moti;\n                        var _expr$9 = Kind$Term$show$go$($7800, Kind$MPath$o$(_path$2));\n                        var _name$10 = Kind$Name$show$($7801);\n                        var _wyth$11 = String$join$(\"; \", List$mapped$($7802, (_with_var$11 => {\n                            var self = _with_var$11;\n                            switch (self._) {\n                                case 'Kind.Ann.new':\n                                    var $7807 = self.name;\n                                    var $7808 = self.type;\n                                    var self = $7808;\n                                    switch (self._) {\n                                        case 'Maybe.some':\n                                            var $7810 = self.value;\n                                            var $7811 = ($7807 + (\": \" + Kind$Term$show$go$($7810, Maybe$none)));\n                                            var $7809 = $7811;\n                                            break;\n                                        case 'Maybe.none':\n                                            var $7812 = $7807;\n                                            var $7809 = $7812;\n                                            break;\n                                    };\n                                    var $7806 = $7809;\n                                    break;\n                            };\n                            return $7806;\n                        })));\n                        var _cses$12 = BitsMap$to_list$($7803);\n                        var _cses$13 = String$join$(\"\", List$mapped$(_cses$12, (_x$13 => {\n                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));\n                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);\n                            var $7813 = String$flatten$(List$cons$(_name$14, List$cons$(\": \", List$cons$(_term$15, List$cons$(\"; \", List$nil)))));\n                            return $7813;\n                        })));\n                        var self = $7804;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $7814 = self.value;\n                                var $7815 = String$flatten$(List$cons$(\": \", List$cons$(Kind$Term$show$go$($7814, Maybe$none), List$nil)));\n                                var _moti$14 = $7815;\n                                break;\n                            case 'Maybe.none':\n                                var $7816 = \"\";\n                                var _moti$14 = $7816;\n                                break;\n                        };\n                        var $7805 = String$flatten$(List$cons$(\"case \", List$cons$(_expr$9, List$cons$(\" as \", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(\" { \", List$cons$(_cses$13, List$cons$(\"}\", List$cons$(_moti$14, List$nil))))))))));\n                        var $7760 = $7805;\n                        break;\n                    case 'Kind.Term.ori':\n                        var $7817 = self.expr;\n                        var $7818 = Kind$Term$show$go$($7817, _path$2);\n                        var $7760 = $7818;\n                        break;\n                    case 'Kind.Term.typ':\n                        var $7819 = \"Type\";\n                        var $7760 = $7819;\n                        break;\n                    case 'Kind.Term.app':\n                        var $7820 = Kind$Term$show$app$(_term$1, _path$2, List$nil);\n                        var $7760 = $7820;\n                        break;\n                    case 'Kind.Term.hol':\n                        var $7821 = \"_\";\n                        var $7760 = $7821;\n                        break;\n                };\n                var $7757 = $7760;\n                break;\n        };\n        return $7757;\n    };\n    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);\n\n    function Kind$Term$show$(_term$1) {\n        var $7822 = Kind$Term$show$go$(_term$1, Maybe$none);\n        return $7822;\n    };\n    const Kind$Term$show = x0 => Kind$Term$show$(x0);\n\n    function Kind$Defs$report$types$(_defs$1, _names$2) {\n        var _types$3 = \"\";\n        var _types$4 = (() => {\n            var $7825 = _types$3;\n            var $7826 = _names$2;\n            let _types$5 = $7825;\n            let _name$4;\n            while ($7826._ === 'List.cons') {\n                _name$4 = $7826.head;\n                var self = Kind$Map$get$(_name$4, _defs$1);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $7827 = self.value;\n                        var self = $7827;\n                        switch (self._) {\n                            case 'Kind.Def.new':\n                                var $7829 = self.type;\n                                var $7830 = (_types$5 + (_name$4 + (\": \" + (Kind$Term$show$($7829) + \"\\u{a}\"))));\n                                var $7828 = $7830;\n                                break;\n                        };\n                        var $7825 = $7828;\n                        break;\n                    case 'Maybe.none':\n                        var $7831 = _types$5;\n                        var $7825 = $7831;\n                        break;\n                };\n                _types$5 = $7825;\n                $7826 = $7826.tail;\n            }\n            return _types$5;\n        })();\n        var $7823 = _types$4;\n        return $7823;\n    };\n    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);\n\n    function List$filter$(_f$2, _xs$3) {\n        var self = _xs$3;\n        switch (self._) {\n            case 'List.cons':\n                var $7833 = self.head;\n                var $7834 = self.tail;\n                var self = _f$2($7833);\n                if (self) {\n                    var $7836 = List$cons$($7833, List$filter$(_f$2, $7834));\n                    var $7835 = $7836;\n                } else {\n                    var $7837 = List$filter$(_f$2, $7834);\n                    var $7835 = $7837;\n                };\n                var $7832 = $7835;\n                break;\n            case 'List.nil':\n                var $7838 = List$nil;\n                var $7832 = $7838;\n                break;\n        };\n        return $7832;\n    };\n    const List$filter = x0 => x1 => List$filter$(x0, x1);\n\n    function Kind$Error$is_undef$(_error$1) {\n        var self = _error$1;\n        switch (self._) {\n            case 'Kind.Error.type_mismatch':\n            case 'Kind.Error.show_goal':\n            case 'Kind.Error.waiting':\n            case 'Kind.Error.indirect':\n            case 'Kind.Error.patch':\n            case 'Kind.Error.cant_infer':\n                var $7840 = Bool$false;\n                var $7839 = $7840;\n                break;\n            case 'Kind.Error.undefined_reference':\n                var $7841 = Bool$true;\n                var $7839 = $7841;\n                break;\n        };\n        return $7839;\n    };\n    const Kind$Error$is_undef = x0 => Kind$Error$is_undef$(x0);\n\n    function Kind$Error$is_mistake$(_error$1) {\n        var self = _error$1;\n        switch (self._) {\n            case 'Kind.Error.type_mismatch':\n            case 'Kind.Error.cant_infer':\n                var $7843 = Bool$true;\n                var $7842 = $7843;\n                break;\n            case 'Kind.Error.show_goal':\n            case 'Kind.Error.waiting':\n            case 'Kind.Error.indirect':\n            case 'Kind.Error.patch':\n            case 'Kind.Error.undefined_reference':\n                var $7844 = Bool$false;\n                var $7842 = $7844;\n                break;\n        };\n        return $7842;\n    };\n    const Kind$Error$is_mistake = x0 => Kind$Error$is_mistake$(x0);\n\n    function Kind$Error$is_goal$(_error$1) {\n        var self = _error$1;\n        switch (self._) {\n            case 'Kind.Error.type_mismatch':\n            case 'Kind.Error.waiting':\n            case 'Kind.Error.indirect':\n            case 'Kind.Error.patch':\n            case 'Kind.Error.undefined_reference':\n            case 'Kind.Error.cant_infer':\n                var $7846 = Bool$false;\n                var $7845 = $7846;\n                break;\n            case 'Kind.Error.show_goal':\n                var $7847 = Bool$true;\n                var $7845 = $7847;\n                break;\n        };\n        return $7845;\n    };\n    const Kind$Error$is_goal = x0 => Kind$Error$is_goal$(x0);\n\n    function Kind$Error$relevant$(_errors$1) {\n        var _undefs$2 = List$filter$(Kind$Error$is_undef, _errors$1);\n        var _mistakes$3 = List$filter$(Kind$Error$is_mistake, _errors$1);\n        var _goals$4 = List$filter$(Kind$Error$is_goal, _errors$1);\n        var self = _undefs$2;\n        switch (self._) {\n            case 'List.nil':\n                var self = _mistakes$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $7850 = self.head;\n                        var $7851 = List$concat$(List$cons$($7850, List$nil), _goals$4);\n                        var $7849 = $7851;\n                        break;\n                    case 'List.nil':\n                        var $7852 = _goals$4;\n                        var $7849 = $7852;\n                        break;\n                };\n                var $7848 = $7849;\n                break;\n            case 'List.cons':\n                var $7853 = List$concat$(_undefs$2, _goals$4);\n                var $7848 = $7853;\n                break;\n        };\n        return $7848;\n    };\n    const Kind$Error$relevant = x0 => Kind$Error$relevant$(x0);\n\n    function Map$(_V$1) {\n        var $7854 = null;\n        return $7854;\n    };\n    const Map = x0 => Map$(x0);\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $7856 = Bits$e;\n            var $7855 = $7856;\n        } else {\n            var $7857 = self.charCodeAt(0);\n            var $7858 = self.slice(1);\n            var $7859 = (String$to_bits$($7858) + (u16_to_bits($7857)));\n            var $7855 = $7859;\n        };\n        return $7855;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $7861 = self.head;\n                var $7862 = self.tail;\n                var self = $7861;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $7864 = self.fst;\n                        var $7865 = self.snd;\n                        var $7866 = (bitsmap_set(String$to_bits$($7864), $7865, Map$from_list$($7862), 'set'));\n                        var $7863 = $7866;\n                        break;\n                };\n                var $7860 = $7863;\n                break;\n            case 'List.nil':\n                var $7867 = BitsMap$new;\n                var $7860 = $7867;\n                break;\n        };\n        return $7860;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function Kind$Context$show$(_context$1) {\n        var self = _context$1;\n        switch (self._) {\n            case 'List.cons':\n                var $7869 = self.head;\n                var $7870 = self.tail;\n                var self = $7869;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $7872 = self.fst;\n                        var $7873 = self.snd;\n                        var _name$6 = Kind$Name$show$($7872);\n                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($7873, Kind$Map$new));\n                        var _rest$8 = Kind$Context$show$($7870);\n                        var $7874 = (_rest$8 + (\"- \" + (_name$6 + (\": \" + (_type$7 + \"\\u{a}\")))));\n                        var $7871 = $7874;\n                        break;\n                };\n                var $7868 = $7871;\n                break;\n            case 'List.nil':\n                var $7875 = \"\";\n                var $7868 = $7875;\n                break;\n        };\n        return $7868;\n    };\n    const Kind$Context$show = x0 => Kind$Context$show$(x0);\n\n    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {\n        var $7876 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {\n            var self = _term$4;\n            switch (self._) {\n                case 'Kind.Term.ref':\n                    var $7878 = self.name;\n                    var self = Kind$Map$get$($7878, _defs$3);\n                    switch (self._) {\n                        case 'Maybe.some':\n                            var $7880 = self.value;\n                            var self = $7880;\n                            switch (self._) {\n                                case 'Kind.Def.new':\n                                    var $7882 = self.term;\n                                    var $7883 = $7882;\n                                    var $7881 = $7883;\n                                    break;\n                            };\n                            var $7879 = $7881;\n                            break;\n                        case 'Maybe.none':\n                            var $7884 = Kind$Term$ref$($7878);\n                            var $7879 = $7884;\n                            break;\n                    };\n                    var $7877 = $7879;\n                    break;\n                case 'Kind.Term.var':\n                case 'Kind.Term.typ':\n                case 'Kind.Term.all':\n                case 'Kind.Term.lam':\n                case 'Kind.Term.app':\n                case 'Kind.Term.let':\n                case 'Kind.Term.def':\n                case 'Kind.Term.ann':\n                case 'Kind.Term.gol':\n                case 'Kind.Term.hol':\n                case 'Kind.Term.nat':\n                case 'Kind.Term.chr':\n                case 'Kind.Term.str':\n                case 'Kind.Term.cse':\n                case 'Kind.Term.ori':\n                    var $7885 = _term$4;\n                    var $7877 = $7885;\n                    break;\n            };\n            return $7877;\n        }));\n        return $7876;\n    };\n    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);\n\n    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {\n        var self = _term$1;\n        switch (self._) {\n            case 'Kind.Term.var':\n                var $7887 = self.name;\n                var $7888 = self.indx;\n                var $7889 = Kind$Term$var$($7887, $7888);\n                var $7886 = $7889;\n                break;\n            case 'Kind.Term.ref':\n                var $7890 = self.name;\n                var self = Kind$Map$get$($7890, _defs$2);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $7892 = self.value;\n                        var self = $7892;\n                        switch (self._) {\n                            case 'Kind.Def.new':\n                                var $7894 = self.term;\n                                var $7895 = self.isct;\n                                var $7896 = self.arit;\n                                var self = ($7895 && (_arity$3 > $7896));\n                                if (self) {\n                                    var $7898 = $7894;\n                                    var $7897 = $7898;\n                                } else {\n                                    var $7899 = Kind$Term$ref$($7890);\n                                    var $7897 = $7899;\n                                };\n                                var $7893 = $7897;\n                                break;\n                        };\n                        var $7891 = $7893;\n                        break;\n                    case 'Maybe.none':\n                        var $7900 = Kind$Term$ref$($7890);\n                        var $7891 = $7900;\n                        break;\n                };\n                var $7886 = $7891;\n                break;\n            case 'Kind.Term.all':\n                var $7901 = self.eras;\n                var $7902 = self.self;\n                var $7903 = self.name;\n                var $7904 = self.xtyp;\n                var $7905 = self.body;\n                var $7906 = Kind$Term$all$($7901, $7902, $7903, Kind$Term$expand_ct$($7904, _defs$2, 0n), (_s$9 => _x$10 => {\n                    var $7907 = Kind$Term$expand_ct$($7905(_s$9)(_x$10), _defs$2, 0n);\n                    return $7907;\n                }));\n                var $7886 = $7906;\n                break;\n            case 'Kind.Term.lam':\n                var $7908 = self.name;\n                var $7909 = self.body;\n                var $7910 = Kind$Term$lam$($7908, (_x$6 => {\n                    var $7911 = Kind$Term$expand_ct$($7909(_x$6), _defs$2, 0n);\n                    return $7911;\n                }));\n                var $7886 = $7910;\n                break;\n            case 'Kind.Term.app':\n                var $7912 = self.func;\n                var $7913 = self.argm;\n                var $7914 = Kind$Term$app$(Kind$Term$expand_ct$($7912, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($7913, _defs$2, 0n));\n                var $7886 = $7914;\n                break;\n            case 'Kind.Term.let':\n                var $7915 = self.name;\n                var $7916 = self.expr;\n                var $7917 = self.body;\n                var $7918 = Kind$Term$let$($7915, Kind$Term$expand_ct$($7916, _defs$2, 0n), (_x$7 => {\n                    var $7919 = Kind$Term$expand_ct$($7917(_x$7), _defs$2, 0n);\n                    return $7919;\n                }));\n                var $7886 = $7918;\n                break;\n            case 'Kind.Term.def':\n                var $7920 = self.name;\n                var $7921 = self.expr;\n                var $7922 = self.body;\n                var $7923 = Kind$Term$def$($7920, Kind$Term$expand_ct$($7921, _defs$2, 0n), (_x$7 => {\n                    var $7924 = Kind$Term$expand_ct$($7922(_x$7), _defs$2, 0n);\n                    return $7924;\n                }));\n                var $7886 = $7923;\n                break;\n            case 'Kind.Term.ann':\n                var $7925 = self.done;\n                var $7926 = self.term;\n                var $7927 = self.type;\n                var $7928 = Kind$Term$ann$($7925, Kind$Term$expand_ct$($7926, _defs$2, 0n), Kind$Term$expand_ct$($7927, _defs$2, 0n));\n                var $7886 = $7928;\n                break;\n            case 'Kind.Term.gol':\n                var $7929 = self.name;\n                var $7930 = self.dref;\n                var $7931 = self.verb;\n                var $7932 = Kind$Term$gol$($7929, $7930, $7931);\n                var $7886 = $7932;\n                break;\n            case 'Kind.Term.hol':\n                var $7933 = self.path;\n                var $7934 = Kind$Term$hol$($7933);\n                var $7886 = $7934;\n                break;\n            case 'Kind.Term.nat':\n                var $7935 = self.natx;\n                var $7936 = Kind$Term$nat$($7935);\n                var $7886 = $7936;\n                break;\n            case 'Kind.Term.chr':\n                var $7937 = self.chrx;\n                var $7938 = Kind$Term$chr$($7937);\n                var $7886 = $7938;\n                break;\n            case 'Kind.Term.str':\n                var $7939 = self.strx;\n                var $7940 = Kind$Term$str$($7939);\n                var $7886 = $7940;\n                break;\n            case 'Kind.Term.ori':\n                var $7941 = self.orig;\n                var $7942 = self.expr;\n                var $7943 = Kind$Term$ori$($7941, $7942);\n                var $7886 = $7943;\n                break;\n            case 'Kind.Term.typ':\n                var $7944 = Kind$Term$typ;\n                var $7886 = $7944;\n                break;\n            case 'Kind.Term.cse':\n                var $7945 = _term$1;\n                var $7886 = $7945;\n                break;\n        };\n        return $7886;\n    };\n    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);\n\n    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {\n        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);\n        var _term$5 = (() => {\n            var $7948 = _term$4;\n            var $7949 = _dref$1;\n            let _term$6 = $7948;\n            let _path$5;\n            while ($7949._ === 'List.cons') {\n                _path$5 = $7949.head;\n                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);\n                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);\n                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);\n                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);\n                var $7948 = _term$10;\n                _term$6 = $7948;\n                $7949 = $7949.tail;\n            }\n            return _term$6;\n        })();\n        var $7946 = _term$5;\n        return $7946;\n    };\n    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);\n\n    function Kind$Error$show$(_error$1, _defs$2) {\n        var self = _error$1;\n        switch (self._) {\n            case 'Kind.Error.type_mismatch':\n                var $7951 = self.expected;\n                var $7952 = self.detected;\n                var $7953 = self.context;\n                var self = $7951;\n                switch (self._) {\n                    case 'Either.left':\n                        var $7955 = self.value;\n                        var $7956 = $7955;\n                        var _expected$7 = $7956;\n                        break;\n                    case 'Either.right':\n                        var $7957 = self.value;\n                        var $7958 = Kind$Term$show$(Kind$Term$normalize$($7957, Map$from_list$(List$nil)));\n                        var _expected$7 = $7958;\n                        break;\n                };\n                var self = $7952;\n                switch (self._) {\n                    case 'Either.left':\n                        var $7959 = self.value;\n                        var $7960 = $7959;\n                        var _detected$8 = $7960;\n                        break;\n                    case 'Either.right':\n                        var $7961 = self.value;\n                        var $7962 = Kind$Term$show$(Kind$Term$normalize$($7961, Map$from_list$(List$nil)));\n                        var _detected$8 = $7962;\n                        break;\n                };\n                var $7954 = (\"Type mismatch.\\u{a}\" + (\"- Expected: \" + (_expected$7 + (\"\\u{a}\" + (\"- Detected: \" + (_detected$8 + (\"\\u{a}\" + (() => {\n                    var self = $7953;\n                    switch (self._) {\n                        case 'List.nil':\n                            var $7963 = \"\";\n                            return $7963;\n                        case 'List.cons':\n                            var $7964 = (\"With context:\\u{a}\" + Kind$Context$show$($7953));\n                            return $7964;\n                    };\n                })())))))));\n                var $7950 = $7954;\n                break;\n            case 'Kind.Error.show_goal':\n                var $7965 = self.name;\n                var $7966 = self.dref;\n                var $7967 = self.verb;\n                var $7968 = self.goal;\n                var $7969 = self.context;\n                var _goal_name$8 = (\"Goal ?\" + (Kind$Name$show$($7965) + \":\\u{a}\"));\n                var self = $7968;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $7971 = self.value;\n                        var _goal$10 = Kind$Term$expand$($7966, $7971, _defs$2);\n                        var $7972 = (\"With type: \" + ((() => {\n                            var self = $7967;\n                            if (self) {\n                                var $7973 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {\n                                    var $7974 = _x$11;\n                                    return $7974;\n                                })));\n                                return $7973;\n                            } else {\n                                var $7975 = Kind$Term$show$(_goal$10);\n                                return $7975;\n                            };\n                        })() + \"\\u{a}\"));\n                        var _with_type$9 = $7972;\n                        break;\n                    case 'Maybe.none':\n                        var $7976 = \"\";\n                        var _with_type$9 = $7976;\n                        break;\n                };\n                var self = $7969;\n                switch (self._) {\n                    case 'List.nil':\n                        var $7977 = \"\";\n                        var _with_ctxt$10 = $7977;\n                        break;\n                    case 'List.cons':\n                        var $7978 = (\"With context:\\u{a}\" + Kind$Context$show$($7969));\n                        var _with_ctxt$10 = $7978;\n                        break;\n                };\n                var $7970 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));\n                var $7950 = $7970;\n                break;\n            case 'Kind.Error.waiting':\n                var $7979 = self.name;\n                var $7980 = (\"Waiting for \\'\" + ($7979 + \"\\'.\"));\n                var $7950 = $7980;\n                break;\n            case 'Kind.Error.indirect':\n                var $7981 = self.name;\n                var $7982 = (\"Error on dependency \\'\" + ($7981 + \"\\'.\"));\n                var $7950 = $7982;\n                break;\n            case 'Kind.Error.patch':\n                var $7983 = self.term;\n                var $7984 = (\"Patching: \" + Kind$Term$show$($7983));\n                var $7950 = $7984;\n                break;\n            case 'Kind.Error.undefined_reference':\n                var $7985 = self.name;\n                var $7986 = (\"Undefined reference: \" + (Kind$Name$show$($7985) + \"\\u{a}\"));\n                var $7950 = $7986;\n                break;\n            case 'Kind.Error.cant_infer':\n                var $7987 = self.term;\n                var $7988 = self.context;\n                var _term$6 = Kind$Term$show$($7987);\n                var _context$7 = Kind$Context$show$($7988);\n                var $7989 = (\"Can\\'t infer type of: \" + (_term$6 + (\"\\u{a}\" + (\"With context:\\u{a}\" + _context$7))));\n                var $7950 = $7989;\n                break;\n        };\n        return $7950;\n    };\n    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);\n\n    function Kind$Error$origin$(_error$1) {\n        var self = _error$1;\n        switch (self._) {\n            case 'Kind.Error.type_mismatch':\n                var $7991 = self.origin;\n                var $7992 = $7991;\n                var $7990 = $7992;\n                break;\n            case 'Kind.Error.undefined_reference':\n                var $7993 = self.origin;\n                var $7994 = $7993;\n                var $7990 = $7994;\n                break;\n            case 'Kind.Error.cant_infer':\n                var $7995 = self.origin;\n                var $7996 = $7995;\n                var $7990 = $7996;\n                break;\n            case 'Kind.Error.show_goal':\n            case 'Kind.Error.waiting':\n            case 'Kind.Error.indirect':\n            case 'Kind.Error.patch':\n                var $7997 = Maybe$none;\n                var $7990 = $7997;\n                break;\n        };\n        return $7990;\n    };\n    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);\n\n    function Kind$Defs$report$errors$(_defs$1) {\n        var _errors$2 = \"\";\n        var _errors$3 = (() => {\n            var $8000 = _errors$2;\n            var $8001 = BitsMap$keys$(_defs$1);\n            let _errors$4 = $8000;\n            let _key$3;\n            while ($8001._ === 'List.cons') {\n                _key$3 = $8001.head;\n                var _name$5 = Kind$Name$from_bits$(_key$3);\n                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);\n                var self = _defn$6;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $8002 = self.value;\n                        var self = $8002;\n                        switch (self._) {\n                            case 'Kind.Def.new':\n                                var $8004 = self.file;\n                                var $8005 = self.code;\n                                var $8006 = self.name;\n                                var $8007 = self.stat;\n                                var self = $8007;\n                                switch (self._) {\n                                    case 'Kind.Status.fail':\n                                        var $8009 = self.errors;\n                                        var self = $8009;\n                                        switch (self._) {\n                                            case 'List.nil':\n                                                var $8011 = _errors$4;\n                                                var $8010 = $8011;\n                                                break;\n                                            case 'List.cons':\n                                                var _name_str$20 = $8006;\n                                                var _rel_errs$21 = Kind$Error$relevant$($8009);\n                                                var _errors$22 = (() => {\n                                                    var $8014 = _errors$4;\n                                                    var $8015 = _rel_errs$21;\n                                                    let _errors$23 = $8014;\n                                                    let _err$22;\n                                                    while ($8015._ === 'List.cons') {\n                                                        _err$22 = $8015.head;\n                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);\n                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);\n                                                        var self = _ori_val$25;\n                                                        switch (self._) {\n                                                            case 'Maybe.some':\n                                                                var $8016 = self.value;\n                                                                var self = $8016;\n                                                                switch (self._) {\n                                                                    case 'Pair.new':\n                                                                        var $8018 = self.fst;\n                                                                        var $8019 = self.snd;\n                                                                        var _inside$29 = (\"Inside \\'\" + ($8004 + \"\\':\\u{a}\"));\n                                                                        var _source$30 = Kind$Code$highlight$($8005, $8018, $8019);\n                                                                        var $8020 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + (\"\\u{a}\" + \"\\u{a}\")))));\n                                                                        var $8017 = $8020;\n                                                                        break;\n                                                                };\n                                                                var $8014 = $8017;\n                                                                break;\n                                                            case 'Maybe.none':\n                                                                var $8021 = (_errors$23 + (_err_msg$24 + \"\\u{a}\"));\n                                                                var $8014 = $8021;\n                                                                break;\n                                                        };\n                                                        _errors$23 = $8014;\n                                                        $8015 = $8015.tail;\n                                                    }\n                                                    return _errors$23;\n                                                })();\n                                                var $8012 = _errors$22;\n                                                var $8010 = $8012;\n                                                break;\n                                        };\n                                        var $8008 = $8010;\n                                        break;\n                                    case 'Kind.Status.init':\n                                    case 'Kind.Status.wait':\n                                    case 'Kind.Status.done':\n                                        var $8022 = _errors$4;\n                                        var $8008 = $8022;\n                                        break;\n                                };\n                                var $8003 = $8008;\n                                break;\n                        };\n                        var $8000 = $8003;\n                        break;\n                    case 'Maybe.none':\n                        var $8023 = _errors$4;\n                        var $8000 = $8023;\n                        break;\n                };\n                _errors$4 = $8000;\n                $8001 = $8001.tail;\n            }\n            return _errors$4;\n        })();\n        var $7998 = _errors$3;\n        return $7998;\n    };\n    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);\n\n    function Kind$Defs$report$(_defs$1, _names$2) {\n        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);\n        var _errors$4 = Kind$Defs$report$errors$(_defs$1);\n        var self = _errors$4;\n        if (self.length === 0) {\n            var $8025 = \"All terms check.\";\n            var _errors$5 = $8025;\n        } else {\n            var $8026 = self.charCodeAt(0);\n            var $8027 = self.slice(1);\n            var $8028 = _errors$4;\n            var _errors$5 = $8028;\n        };\n        var $8024 = (_types$3 + (\"\\u{a}\" + _errors$5));\n        return $8024;\n    };\n    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);\n\n    function IO$set_file$(_name$1, _content$2) {\n        var $8029 = IO$ask$(\"set_file\", (_name$1 + (\"=\" + _content$2)), (_ok$3 => {\n            var $8030 = IO$end$(Unit$new);\n            return $8030;\n        }));\n        return $8029;\n    };\n    const IO$set_file = x0 => x1 => IO$set_file$(x0, x1);\n\n    function Bool$show$(_b$1) {\n        var self = _b$1;\n        if (self) {\n            var $8032 = \"Bool.true\";\n            var $8031 = $8032;\n        } else {\n            var $8033 = \"Bool.false\";\n            var $8031 = $8033;\n        };\n        return $8031;\n    };\n    const Bool$show = x0 => Bool$show$(x0);\n\n    function Kind$Defs$cache$go$(_kvs$1) {\n        var self = _kvs$1;\n        switch (self._) {\n            case 'List.cons':\n                var $8035 = self.head;\n                var $8036 = self.tail;\n                var self = $8035;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $8038 = self.fst;\n                        var $8039 = self.snd;\n                        var self = $8039;\n                        switch (self._) {\n                            case 'Kind.Def.new':\n                                var $8041 = self.file;\n                                var $8042 = self.term;\n                                var $8043 = self.type;\n                                var $8044 = self.isct;\n                                var $8045 = self.arit;\n                                var $8046 = self.stat;\n                                var self = $8046;\n                                switch (self._) {\n                                    case 'Kind.Status.init':\n                                    case 'Kind.Status.wait':\n                                    case 'Kind.Status.fail':\n                                        var $8048 = Kind$Defs$cache$go$($8036);\n                                        var $8047 = $8048;\n                                        break;\n                                    case 'Kind.Status.done':\n                                        var $8049 = IO$monad$((_m$bind$16 => _m$pure$17 => {\n                                            var $8050 = _m$bind$16;\n                                            return $8050;\n                                        }))(IO$get_file_mtime$($8041))((_time$16 => {\n                                            var $8051 = IO$monad$((_m$bind$17 => _m$pure$18 => {\n                                                var $8052 = _m$bind$17;\n                                                return $8052;\n                                            }))(IO$set_file$((\".cache/\" + ($8038 + \".term\")), Kind$Core$show$($8042)))((_$17 => {\n                                                var $8053 = IO$monad$((_m$bind$18 => _m$pure$19 => {\n                                                    var $8054 = _m$bind$18;\n                                                    return $8054;\n                                                }))(IO$set_file$((\".cache/\" + ($8038 + \".type\")), Kind$Core$show$($8043)))((_$18 => {\n                                                    var $8055 = IO$monad$((_m$bind$19 => _m$pure$20 => {\n                                                        var $8056 = _m$bind$19;\n                                                        return $8056;\n                                                    }))(IO$set_file$((\".cache/\" + ($8038 + \".isct\")), Bool$show$($8044)))((_$19 => {\n                                                        var $8057 = IO$monad$((_m$bind$20 => _m$pure$21 => {\n                                                            var $8058 = _m$bind$20;\n                                                            return $8058;\n                                                        }))(IO$set_file$((\".cache/\" + ($8038 + \".arit\")), Nat$show$($8045)))((_$20 => {\n                                                            var $8059 = IO$monad$((_m$bind$21 => _m$pure$22 => {\n                                                                var $8060 = _m$bind$21;\n                                                                return $8060;\n                                                            }))(IO$set_file$((\".cache/\" + ($8038 + \".file\")), $8041))((_$21 => {\n                                                                var $8061 = IO$monad$((_m$bind$22 => _m$pure$23 => {\n                                                                    var $8062 = _m$bind$22;\n                                                                    return $8062;\n                                                                }))(IO$set_file$((\".cache/\" + ($8038 + \".time\")), _time$16))((_$22 => {\n                                                                    var $8063 = Kind$Defs$cache$go$($8036);\n                                                                    return $8063;\n                                                                }));\n                                                                return $8061;\n                                                            }));\n                                                            return $8059;\n                                                        }));\n                                                        return $8057;\n                                                    }));\n                                                    return $8055;\n                                                }));\n                                                return $8053;\n                                            }));\n                                            return $8051;\n                                        }));\n                                        var $8047 = $8049;\n                                        break;\n                                };\n                                var $8040 = $8047;\n                                break;\n                        };\n                        var $8037 = $8040;\n                        break;\n                };\n                var $8034 = $8037;\n                break;\n            case 'List.nil':\n                var $8064 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n                    var $8065 = _m$pure$3;\n                    return $8065;\n                }))(Unit$new);\n                var $8034 = $8064;\n                break;\n        };\n        return $8034;\n    };\n    const Kind$Defs$cache$go = x0 => Kind$Defs$cache$go$(x0);\n\n    function Kind$Defs$cache$(_defs$1) {\n        var $8066 = Kind$Defs$cache$go$(Kind$Map$to_list$(_defs$1));\n        return $8066;\n    };\n    const Kind$Defs$cache = x0 => Kind$Defs$cache$(x0);\n\n    function Kind$api$io$check_file$(_file$1) {\n        var $8067 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $8068 = _m$bind$2;\n            return $8068;\n        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {\n            var self = _loaded$2;\n            switch (self._) {\n                case 'Either.left':\n                    var $8070 = self.value;\n                    var $8071 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                        var $8072 = _m$bind$4;\n                        return $8072;\n                    }))(IO$print$(String$flatten$(List$cons$(\"On \\'\", List$cons$(_file$1, List$cons$(\"\\':\", List$nil))))))((_$4 => {\n                        var $8073 = IO$print$($8070);\n                        return $8073;\n                    }));\n                    var $8069 = $8071;\n                    break;\n                case 'Either.right':\n                    var $8074 = self.value;\n                    var self = $8074;\n                    switch (self._) {\n                        case 'Pair.new':\n                            var $8076 = self.fst;\n                            var $8077 = self.snd;\n                            var _nams$6 = $8076;\n                            var _defs$7 = $8077;\n                            var self = _nams$6;\n                            switch (self._) {\n                                case 'List.nil':\n                                    var $8079 = IO$print$((\"File not found or empty: \\'\" + (_file$1 + \"\\'.\")));\n                                    var $8078 = $8079;\n                                    break;\n                                case 'List.cons':\n                                    var $8080 = IO$monad$((_m$bind$10 => _m$pure$11 => {\n                                        var $8081 = _m$bind$10;\n                                        return $8081;\n                                    }))(IO$print$(Kind$Defs$report$(_defs$7, _nams$6)))((_$10 => {\n                                        var $8082 = Kind$Defs$cache$(_defs$7);\n                                        return $8082;\n                                    }));\n                                    var $8078 = $8080;\n                                    break;\n                            };\n                            var $8075 = $8078;\n                            break;\n                    };\n                    var $8069 = $8075;\n                    break;\n            };\n            return $8069;\n        }));\n        return $8067;\n    };\n    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);\n\n    function Kind$Synth$files$go$(_files$1, _defs$2) {\n        var self = _files$1;\n        switch (self._) {\n            case 'List.cons':\n                var $8084 = self.head;\n                var $8085 = self.tail;\n                var $8086 = IO$monad$((_m$bind$5 => _m$pure$6 => {\n                    var $8087 = _m$bind$5;\n                    return $8087;\n                }))(Kind$Synth$file$($8084, _defs$2))((_file_synth$5 => {\n                    var self = _file_synth$5;\n                    switch (self._) {\n                        case 'Either.right':\n                            var $8089 = self.value;\n                            var _nams$7 = Pair$fst$($8089);\n                            var _defs$8 = Pair$snd$($8089);\n                            var $8090 = IO$monad$((_m$bind$9 => _m$pure$10 => {\n                                var $8091 = _m$bind$9;\n                                return $8091;\n                            }))(Kind$Synth$files$go$($8085, _defs$8))((_rest$9 => {\n                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));\n                                var _defs$11 = Pair$snd$(_rest$9);\n                                var $8092 = IO$monad$((_m$bind$12 => _m$pure$13 => {\n                                    var $8093 = _m$pure$13;\n                                    return $8093;\n                                }))(Pair$new$(_nams$10, _defs$11));\n                                return $8092;\n                            }));\n                            var $8088 = $8090;\n                            break;\n                        case 'Either.left':\n                            var $8094 = Kind$Synth$files$go$($8085, _defs$2);\n                            var $8088 = $8094;\n                            break;\n                    };\n                    return $8088;\n                }));\n                var $8083 = $8086;\n                break;\n            case 'List.nil':\n                var $8095 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n                    var $8096 = _m$pure$4;\n                    return $8096;\n                }))(Pair$new$(List$nil, _defs$2));\n                var $8083 = $8095;\n                break;\n        };\n        return $8083;\n    };\n    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);\n\n    function Kind$Synth$remove_duplicate_names$(_names$1) {\n        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {\n            var $8098 = Kind$Map$set(_name$2)(Unit$new);\n            return $8098;\n        }));\n        var $8097 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);\n        return $8097;\n    };\n    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);\n\n    function Kind$Synth$files$(_files$1, _defs$2) {\n        var $8099 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $8100 = _m$bind$3;\n            return $8100;\n        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {\n            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));\n            var _defs$5 = Pair$snd$(_got$3);\n            var $8101 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                var $8102 = _m$pure$7;\n                return $8102;\n            }))(Pair$new$(_nams$4, _defs$5));\n            return $8101;\n        }));\n        return $8099;\n    };\n    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);\n\n    function Kind$api$io$check_files$(_files$1) {\n        var $8103 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $8104 = _m$bind$2;\n            return $8104;\n        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {\n            var _nams$3 = Pair$fst$(_loaded$2);\n            var _defs$4 = Pair$snd$(_loaded$2);\n            var self = _nams$3;\n            switch (self._) {\n                case 'List.nil':\n                    var $8106 = IO$print$(\"No valid Kind file found.\");\n                    var $8105 = $8106;\n                    break;\n                case 'List.cons':\n                    var $8107 = IO$monad$((_m$bind$7 => _m$pure$8 => {\n                        var $8108 = _m$bind$7;\n                        return $8108;\n                    }))(IO$print$(Kind$Defs$report$(_defs$4, _nams$3)))((_$7 => {\n                        var $8109 = Kind$Defs$cache$(_defs$4);\n                        return $8109;\n                    }));\n                    var $8105 = $8107;\n                    break;\n            };\n            return $8105;\n        }));\n        return $8103;\n    };\n    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);\n\n    function Kind$api$io$check_term$(_name$1) {\n        var $8110 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $8111 = _m$bind$2;\n            return $8111;\n        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_defs$2 => {\n            var self = _defs$2;\n            switch (self._) {\n                case 'Maybe.some':\n                    var $8113 = self.value;\n                    var $8114 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                        var $8115 = _m$bind$4;\n                        return $8115;\n                    }))(IO$print$(Kind$Defs$report$($8113, List$cons$(_name$1, List$nil))))((_$4 => {\n                        var $8116 = Kind$Defs$cache$($8113);\n                        return $8116;\n                    }));\n                    var $8112 = $8114;\n                    break;\n                case 'Maybe.none':\n                    var _notfound$3 = (\"Term not found: \\'\" + (_name$1 + \"\\'.\"));\n                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {\n                        var $8118 = (\"\\'\" + (_x$4 + \"\\'\"));\n                        return $8118;\n                    }));\n                    var _searched$5 = (\"Searched on: \" + (String$join$(\", \", _filelist$4) + \".\"));\n                    var $8117 = IO$print$((_notfound$3 + (\"\\u{a}\" + _searched$5)));\n                    var $8112 = $8117;\n                    break;\n            };\n            return $8112;\n        }));\n        return $8110;\n    };\n    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);\n\n    function Kind$api$io$show_term$(_name$1) {\n        var $8119 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $8120 = _m$bind$2;\n            return $8120;\n        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {\n            var $8121 = IO$print$((() => {\n                var self = _new_defs$2;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $8122 = self.value;\n                        var _defs$4 = $8122;\n                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);\n                        var self = _defn$5;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $8124 = self.value;\n                                var self = $8124;\n                                switch (self._) {\n                                    case 'Kind.Def.new':\n                                        var $8126 = self.term;\n                                        var _term$16 = $8126;\n                                        var $8127 = Kind$Term$show$(_term$16);\n                                        var $8125 = $8127;\n                                        break;\n                                };\n                                var $8123 = $8125;\n                                break;\n                            case 'Maybe.none':\n                                var $8128 = (\"Term not found: \\'\" + (_name$1 + \"\\'.\"));\n                                var $8123 = $8128;\n                                break;\n                        };\n                        return $8123;\n                    case 'Maybe.none':\n                        var _notfound$3 = (\"Term not found: \\'\" + (_name$1 + \"\\'.\"));\n                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {\n                            var $8130 = (\"\\'\" + (_x$4 + \"\\'\"));\n                            return $8130;\n                        }));\n                        var _searched$5 = (\"Searched on: \" + (String$join$(\", \", _filelist$4) + \".\"));\n                        var $8129 = (_notfound$3 + (\"\\u{a}\" + _searched$5));\n                        return $8129;\n                };\n            })());\n            return $8121;\n        }));\n        return $8119;\n    };\n    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);\n\n    function Kind$api$io$show_term_normal$(_name$1) {\n        var $8131 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $8132 = _m$bind$2;\n            return $8132;\n        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {\n            var $8133 = IO$print$((() => {\n                var self = _new_defs$2;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $8134 = self.value;\n                        var _defs$4 = $8134;\n                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);\n                        var self = _defn$5;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $8136 = self.value;\n                                var self = $8136;\n                                switch (self._) {\n                                    case 'Kind.Def.new':\n                                        var $8138 = self.term;\n                                        var _term$16 = $8138;\n                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);\n                                        var $8139 = Kind$Term$show$(_norm$17);\n                                        var $8137 = $8139;\n                                        break;\n                                };\n                                var $8135 = $8137;\n                                break;\n                            case 'Maybe.none':\n                                var $8140 = (\"Term not found: \\'\" + (_name$1 + \"\\'.\"));\n                                var $8135 = $8140;\n                                break;\n                        };\n                        return $8135;\n                    case 'Maybe.none':\n                        var _notfound$3 = (\"Term not found: \\'\" + (_name$1 + \"\\'.\"));\n                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {\n                            var $8142 = (\"\\'\" + (_x$4 + \"\\'\"));\n                            return $8142;\n                        }));\n                        var _searched$5 = (\"Searched on: \" + (String$join$(\", \", _filelist$4) + \".\"));\n                        var $8141 = (_notfound$3 + (\"\\u{a}\" + _searched$5));\n                        return $8141;\n                };\n            })());\n            return $8133;\n        }));\n        return $8131;\n    };\n    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);\n\n    function IO$purify$(_io$2) {\n        var IO$purify$ = (_io$2) => ({\n            ctr: 'TCO',\n            arg: [_io$2]\n        });\n        var IO$purify = _io$2 => IO$purify$(_io$2);\n        var arg = [_io$2];\n        while (true) {\n            let [_io$2] = arg;\n            var R = (() => {\n                var self = _io$2;\n                switch (self._) {\n                    case 'IO.end':\n                        var $8143 = self.value;\n                        var $8144 = $8143;\n                        return $8144;\n                    case 'IO.ask':\n                        var $8145 = self.then;\n                        var $8146 = IO$purify$($8145(\"\"));\n                        return $8146;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const IO$purify = x0 => IO$purify$(x0);\n\n    function Kind$api$check_code$(_code$1) {\n        var self = Kind$Defs$read$(\"Main.kind\", _code$1, Kind$Map$new);\n        switch (self._) {\n            case 'Either.left':\n                var $8148 = self.value;\n                var $8149 = $8148;\n                var $8147 = $8149;\n                break;\n            case 'Either.right':\n                var $8150 = self.value;\n                var $8151 = IO$purify$((() => {\n                    var _defs$3 = $8150;\n                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);\n                    var $8152 = IO$monad$((_m$bind$5 => _m$pure$6 => {\n                        var $8153 = _m$bind$5;\n                        return $8153;\n                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {\n                        var $8154 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                            var $8155 = _m$pure$7;\n                            return $8155;\n                        }))(Kind$Defs$report$(_defs$5, _nams$4));\n                        return $8154;\n                    }));\n                    return $8152;\n                })());\n                var $8147 = $8151;\n                break;\n        };\n        return $8147;\n    };\n    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);\n\n    function Kind$Term$read$(_code$1) {\n        var self = Kind$Parser$term$(0n, _code$1);\n        switch (self._) {\n            case 'Parser.Reply.value':\n                var $8157 = self.val;\n                var $8158 = Maybe$some$($8157);\n                var $8156 = $8158;\n                break;\n            case 'Parser.Reply.error':\n                var $8159 = Maybe$none;\n                var $8156 = $8159;\n                break;\n        };\n        return $8156;\n    };\n    const Kind$Term$read = x0 => Kind$Term$read$(x0);\n    const Kind$api$export = (() => {\n        var _e$1 = Kind$api$io$term_to_core;\n        var _e$2 = Kind$api$io$check_file;\n        var _e$3 = Kind$api$io$check_files;\n        var _e$4 = Kind$api$io$check_term;\n        var _e$5 = Kind$api$io$show_term;\n        var _e$6 = Kind$api$io$show_term_normal;\n        var _e$7 = Kind$api$check_code;\n        var _e$8 = Kind$Term$read;\n        var $8160 = IO$monad$((_m$bind$9 => _m$pure$10 => {\n            var $8161 = _m$pure$10;\n            return $8161;\n        }))(Unit$new);\n        return $8160;\n    })();\n    return {\n        '$main$': () => run(Kind$api$export),\n        'run': run,\n        'IO': IO,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'Maybe': Maybe,\n        'BitsMap': BitsMap,\n        'Maybe.none': Maybe$none,\n        'BitsMap.get': BitsMap$get,\n        'Bits.e': Bits$e,\n        'Bool.false': Bool$false,\n        'Bool.and': Bool$and,\n        'Bool.true': Bool$true,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.lte': Word$lte,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U16.lte': U16$lte,\n        'U16.btw': U16$btw,\n        'U16.new': U16$new,\n        'Word.e': Word$e,\n        'Word': Word,\n        'Word.i': Word$i,\n        'Word.o': Word$o,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'U16.sub': U16$sub,\n        'Nat.apply': Nat$apply,\n        'Word.inc': Word$inc,\n        'Word.zero': Word$zero,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u16': Nat$to_u16,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'U16.add': U16$add,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Word.eql': Word$eql,\n        'U16.eql': U16$eql,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Word.to_bits': Word$to_bits,\n        'Word.trim': Word$trim,\n        'Bits.concat': Bits$concat,\n        'Bits.reverse.tco': Bits$reverse$tco,\n        'Bits.reverse': Bits$reverse,\n        'Kind.Name.to_bits': Kind$Name$to_bits,\n        'Kind.Map.get': Kind$Map$get,\n        'Parser.Reply': Parser$Reply,\n        'List': List,\n        'Parser.Reply.error': Parser$Reply$error,\n        'Parser.Reply.value': Parser$Reply$value,\n        'List.nil': List$nil,\n        'List.cons': List$cons,\n        'Parser.many.go': Parser$many$go,\n        'Parser.many': Parser$many,\n        'Parser.many1': Parser$many1,\n        'Parser.digit': Parser$digit,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Nat.from_base.go': Nat$from_base$go,\n        'List.reverse.go': List$reverse$go,\n        'List.reverse': List$reverse,\n        'Nat.from_base': Nat$from_base,\n        'Parser.nat': Parser$nat,\n        'Nat.read': Nat$read,\n        'IO.get_time': IO$get_time,\n        'Maybe.some': Maybe$some,\n        'Kind.Synth.load.cached.is_loop': Kind$Synth$load$cached$is_loop,\n        'IO.get_file': IO$get_file,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'Bool.not': Bool$not,\n        'String.is_empty': String$is_empty,\n        'IO.get_file_mtime': IO$get_file_mtime,\n        'String.eql': String$eql,\n        'Pair.new': Pair$new,\n        'Maybe.bind': Maybe$bind,\n        'Maybe.monad': Maybe$monad,\n        'Pair': Pair,\n        'Unit.new': Unit$new,\n        'Bool.or': Bool$or,\n        'Kind.Core.read.spaces': Kind$Core$read$spaces,\n        'Kind.Term.ref': Kind$Term$ref,\n        'Char.eql': Char$eql,\n        'Kind.Term.typ': Kind$Term$typ,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Word.gte': Word$gte,\n        'U16.gte': U16$gte,\n        'Cmp.as_ltn': Cmp$as_ltn,\n        'Word.ltn': Word$ltn,\n        'U16.ltn': U16$ltn,\n        'Kind.Core.read.is_name': Kind$Core$read$is_name,\n        'Kind.Core.read.name': Kind$Core$read$name,\n        'Kind.Core.read.char': Kind$Core$read$char,\n        'Kind.Term.all': Kind$Term$all,\n        'Kind.Term.lam': Kind$Term$lam,\n        'Kind.Term.app': Kind$Term$app,\n        'Kind.Term.let': Kind$Term$let,\n        'Kind.Term.def': Kind$Term$def,\n        'Kind.Term.ann': Kind$Term$ann,\n        'String.starts_with': String$starts_with,\n        'String.nil': String$nil,\n        'String.drop': String$drop,\n        'Char.is_hex': Char$is_hex,\n        'Word.shift_left1.aux': Word$shift_left1$aux,\n        'Word.shift_left1': Word$shift_left1,\n        'Word.mul.go': Word$mul$go,\n        'Word.to_zero': Word$to_zero,\n        'Word.mul': Word$mul,\n        'U16.mul': U16$mul,\n        'U16.inc': U16$inc,\n        'U16.zero': U16$zero,\n        'Char.hex_value16': Char$hex_value16,\n        'Kind.Core.read.u16': Kind$Core$read$u16,\n        'Kind.Core.read.chrx': Kind$Core$read$chrx,\n        'Kind.Term.chr': Kind$Term$chr,\n        'Kind.Core.read.strx': Kind$Core$read$strx,\n        'Kind.Term.str': Kind$Term$str,\n        'Char.dec_value': Char$dec_value,\n        'Kind.Core.read.natx': Kind$Core$read$natx,\n        'Kind.Term.nat': Kind$Term$nat,\n        'Pair.fst': Pair$fst,\n        'Nat.eql': Nat$eql,\n        'Nat.pred': Nat$pred,\n        'Kind.Core.read.find': Kind$Core$read$find,\n        'Pair.snd': Pair$snd,\n        'Kind.Core.read.term': Kind$Core$read$term,\n        'Kind.Core.read': Kind$Core$read,\n        'Bool.read': Bool$read,\n        'Kind.Status.done': Kind$Status$done,\n        'Kind.Def.new': Kind$Def$new,\n        'Kind.Synth.load.cached.def': Kind$Synth$load$cached$def,\n        'BitsMap.tie': BitsMap$tie,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.set': BitsMap$set,\n        'Kind.Map.set': Kind$Map$set,\n        'Kind.Map.new': Kind$Map$new,\n        'Kind.Map': Kind$Map,\n        'Kind.Core.dependencies.go': Kind$Core$dependencies$go,\n        'List.mapped': List$mapped,\n        'BitsMap.to_list.go': BitsMap$to_list$go,\n        'Bits.chunks_of.go': Bits$chunks_of$go,\n        'Bits.chunks_of': Bits$chunks_of,\n        'List.fold': List$fold,\n        'Word.from_bits': Word$from_bits,\n        'Kind.Name.from_bits': Kind$Name$from_bits,\n        'Kind.Map.to_list': Kind$Map$to_list,\n        'Kind.Map.keys': Kind$Map$keys,\n        'Kind.Synth.load.cached': Kind$Synth$load$cached,\n        'Parser.is_eof': Parser$is_eof,\n        'Parser': Parser,\n        'Parser.ErrorAt.new': Parser$ErrorAt$new,\n        'Nat.gtn': Nat$gtn,\n        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,\n        'Parser.first_of.go': Parser$first_of$go,\n        'Parser.first_of': Parser$first_of,\n        'String.flatten.go': String$flatten$go,\n        'String.flatten': String$flatten,\n        'Parser.text.go': Parser$text$go,\n        'Parser.text': Parser$text,\n        'Parser.eof': Parser$eof,\n        'Parser.until.go': Parser$until$go,\n        'Parser.until': Parser$until,\n        'Parser.one': Parser$one,\n        'Kind.Parser.spaces': Kind$Parser$spaces,\n        'Parser.get_index': Parser$get_index,\n        'Kind.Parser.init': Kind$Parser$init,\n        'Kind.Name.is_letter': Kind$Name$is_letter,\n        'Kind.Parser.letter': Kind$Parser$letter,\n        'Kind.Parser.name1': Kind$Parser$name1,\n        'Kind.Parser.text': Kind$Parser$text,\n        'Parser.until1': Parser$until1,\n        'Parser.maybe': Parser$maybe,\n        'Kind.Parser.item': Kind$Parser$item,\n        'Kind.Parser.name': Kind$Parser$name,\n        'Kind.Parser.stop': Kind$Parser$stop,\n        'Kind.Term.ori': Kind$Term$ori,\n        'Kind.Parser.forall': Kind$Parser$forall,\n        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,\n        'Kind.Parser.lambda': Kind$Parser$lambda,\n        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,\n        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,\n        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,\n        'Kind.Term.hol': Kind$Term$hol,\n        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,\n        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,\n        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,\n        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,\n        'Kind.Parser.letforin': Kind$Parser$letforin,\n        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,\n        'Kind.Parser.letwhile': Kind$Parser$letwhile,\n        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,\n        'Kind.Parser.let': Kind$Parser$let,\n        'Kind.Parser.let.omit': Kind$Parser$let$omit,\n        'Kind.Parser.getwhile': Kind$Parser$getwhile,\n        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,\n        'Kind.Parser.get': Kind$Parser$get,\n        'Kind.Parser.get.omit': Kind$Parser$get$omit,\n        'Kind.Parser.def': Kind$Parser$def,\n        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,\n        'Kind.Parser.if': Kind$Parser$if,\n        'Kind.Code.backslash': Kind$Code$backslash,\n        'Kind.Code.escapes': Kind$Code$escapes,\n        'Kind.Parser.char.single': Kind$Parser$char$single,\n        'Kind.Parser.char': Kind$Parser$char,\n        'String.reverse.go': String$reverse$go,\n        'String.reverse': String$reverse,\n        'Kind.Parser.string.go': Kind$Parser$string$go,\n        'Kind.Parser.string': Kind$Parser$string,\n        'Kind.Parser.pair': Kind$Parser$pair,\n        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,\n        'Kind.Parser.some': Kind$Parser$some,\n        'Kind.Parser.not': Kind$Parser$not,\n        'Kind.Parser.left': Kind$Parser$left,\n        'Kind.Parser.right': Kind$Parser$right,\n        'Kind.Parser.apply': Kind$Parser$apply,\n        'Kind.Parser.chain': Kind$Parser$chain,\n        'Kind.Parser.mirror': Kind$Parser$mirror,\n        'Kind.Name.read': Kind$Name$read,\n        'Kind.Parser.list': Kind$Parser$list,\n        'Kind.Parser.map': Kind$Parser$map,\n        'Kind.Parser.log': Kind$Parser$log,\n        'Kind.Parser.do.statements': Kind$Parser$do$statements,\n        'Kind.Parser.do': Kind$Parser$do,\n        'Parser.try': Parser$try,\n        'Parser.fail': Parser$fail,\n        'Parser.avoiding': Parser$avoiding,\n        'Maybe.default': Maybe$default,\n        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,\n        'U16.to_bits': U16$to_bits,\n        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,\n        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,\n        'Kind.Term.unroll_str': Kind$Term$unroll_str,\n        'Kind.Term.reduce': Kind$Term$reduce,\n        'Kind.Term.extract_name': Kind$Term$extract_name,\n        'Kind.Ann.new': Kind$Ann$new,\n        'Kind.Parser.case.with': Kind$Parser$case$with,\n        'Kind.Parser.case.case': Kind$Parser$case$case,\n        'Debug.log': Debug$log,\n        'Kind.Parser.case.group': Kind$Parser$case$group,\n        'BitsMap.map': BitsMap$map,\n        'Kind.Map.map': Kind$Map$map,\n        'Kind.Term.cse': Kind$Term$cse,\n        'Kind.Parser.case.build': Kind$Parser$case$build,\n        'Kind.Parser.case': Kind$Parser$case,\n        'Kind.Parser.open': Kind$Parser$open,\n        'Kind.Parser.without': Kind$Parser$without,\n        'Kind.Parser.switch.case': Kind$Parser$switch$case,\n        'Kind.Parser.switch': Kind$Parser$switch,\n        'Bits.tail': Bits$tail,\n        'Bits.inc': Bits$inc,\n        'Nat.to_bits': Nat$to_bits,\n        'Maybe.is_some': Maybe$is_some,\n        'Kind.Term.gol': Kind$Term$gol,\n        'Kind.Parser.goal': Kind$Parser$goal,\n        'Kind.Parser.hole': Kind$Parser$hole,\n        'Kind.Parser.float.sign': Kind$Parser$float$sign,\n        'List.any': List$any,\n        'Kind.Parser.float.str_digit': Kind$Parser$float$str_digit,\n        'String.from_list': String$from_list,\n        'Kind.Parser.float.64': Kind$Parser$float$64,\n        'Kind.Parser.float.32': Kind$Parser$float$32,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Nat.lte': Nat$lte,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'Kind.Parser.int_pos': Kind$Parser$int_pos,\n        'Kind.Parser.int_neg': Kind$Parser$int_neg,\n        'Kind.Parser.int': Kind$Parser$int,\n        'Kind.Parser.machine_integer.signed': Kind$Parser$machine_integer$signed,\n        'Parser.hex_digit': Parser$hex_digit,\n        'Parser.hex_nat': Parser$hex_nat,\n        'Kind.Parser.nat': Kind$Parser$nat,\n        'Kind.Parser.machine_integer.unsigned': Kind$Parser$machine_integer$unsigned,\n        'Kind.Parser.u64': Kind$Parser$u64,\n        'Kind.Parser.u32': Kind$Parser$u32,\n        'Kind.Parser.u16': Kind$Parser$u16,\n        'Kind.Parser.u8': Kind$Parser$u8,\n        'Kind.Parser.reference': Kind$Parser$reference,\n        'List.for': List$for,\n        'Kind.Parser.application': Kind$Parser$application,\n        'Parser.spaces': Parser$spaces,\n        'Parser.spaces_text': Parser$spaces_text,\n        'Kind.Parser.application.erased': Kind$Parser$application$erased,\n        'Kind.Parser.list_set': Kind$Parser$list_set,\n        'Kind.Parser.list_get': Kind$Parser$list_get,\n        'Kind.Parser.map_set': Kind$Parser$map_set,\n        'Kind.Parser.map_get': Kind$Parser$map_get,\n        'Kind.Parser.arrow': Kind$Parser$arrow,\n        'Kind.Parser.op': Kind$Parser$op,\n        'Kind.Parser.add': Kind$Parser$add,\n        'Kind.Parser.sub': Kind$Parser$sub,\n        'Kind.Parser.mul': Kind$Parser$mul,\n        'Kind.Parser.div': Kind$Parser$div,\n        'Kind.Parser.mod': Kind$Parser$mod,\n        'Kind.Parser.ltn': Kind$Parser$ltn,\n        'Kind.Parser.lte': Kind$Parser$lte,\n        'Kind.Parser.eql': Kind$Parser$eql,\n        'Kind.Parser.gte': Kind$Parser$gte,\n        'Kind.Parser.gtn': Kind$Parser$gtn,\n        'Kind.Parser.and': Kind$Parser$and,\n        'Kind.Parser.or': Kind$Parser$or,\n        'Kind.Parser.default': Kind$Parser$default,\n        'Kind.Parser.cons': Kind$Parser$cons,\n        'Kind.Parser.concat': Kind$Parser$concat,\n        'Kind.Parser.string_concat': Kind$Parser$string_concat,\n        'Kind.Parser.sigma': Kind$Parser$sigma,\n        'Kind.Parser.equality': Kind$Parser$equality,\n        'Kind.Parser.inequality': Kind$Parser$inequality,\n        'Kind.Parser.rewrite': Kind$Parser$rewrite,\n        'Kind.Parser.annotation': Kind$Parser$annotation,\n        'Kind.Parser.application.hole': Kind$Parser$application$hole,\n        'Kind.Parser.suffix': Kind$Parser$suffix,\n        'Kind.Parser.term': Kind$Parser$term,\n        'Kind.Parser.name_term': Kind$Parser$name_term,\n        'Kind.Binder.new': Kind$Binder$new,\n        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,\n        'List.concat': List$concat,\n        'List.flatten': List$flatten,\n        'Kind.Parser.binder': Kind$Parser$binder,\n        'List.length': List$length,\n        'Kind.Parser.make_forall': Kind$Parser$make_forall,\n        'List.at_last': List$at_last,\n        'Kind.Term.var': Kind$Term$var,\n        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,\n        'Kind.Name.eql': Kind$Name$eql,\n        'Kind.Context.find.go': Kind$Context$find$go,\n        'Kind.Context.find': Kind$Context$find,\n        'Kind.Path.o': Kind$Path$o,\n        'Kind.Path.i': Kind$Path$i,\n        'Kind.Path.to_bits': Kind$Path$to_bits,\n        'Kind.Term.bind': Kind$Term$bind,\n        'Trampoline.call': Trampoline$call,\n        'Trampoline': Trampoline,\n        'Trampoline.wrap': Trampoline$wrap,\n        'BitsMap.set_if_empty.cps.go': BitsMap$set_if_empty$cps$go,\n        'Trampoline.done': Trampoline$done,\n        'BitsMap.set_if_empty.cps': BitsMap$set_if_empty$cps,\n        'BitsMap.set_if_empty': BitsMap$set_if_empty,\n        'Kind.Map.set_if_empty': Kind$Map$set_if_empty,\n        'Kind.Status.init': Kind$Status$init,\n        'Kind.Map.def': Kind$Map$def,\n        'Kind.Parser.file.def': Kind$Parser$file$def,\n        'Kind.Constructor.new': Kind$Constructor$new,\n        'Kind.Parser.constructor': Kind$Parser$constructor,\n        'Kind.Datatype.new': Kind$Datatype$new,\n        'Kind.Parser.datatype': Kind$Parser$datatype,\n        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,\n        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,\n        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,\n        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,\n        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,\n        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,\n        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,\n        'Kind.Datatype.build_term': Kind$Datatype$build_term,\n        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,\n        'Kind.Datatype.build_type': Kind$Datatype$build_type,\n        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,\n        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,\n        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,\n        'Kind.Constructor.build_term': Kind$Constructor$build_term,\n        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,\n        'Kind.Constructor.build_type': Kind$Constructor$build_type,\n        'Kind.Parser.file.adt': Kind$Parser$file$adt,\n        'Kind.Parser.file.end': Kind$Parser$file$end,\n        'Kind.Parser.file': Kind$Parser$file,\n        'String.join.go': String$join$go,\n        'String.join': String$join,\n        'Kind.Code.highlight.end': Kind$Code$highlight$end,\n        'Maybe.extract': Maybe$extract,\n        'Nat.is_zero': Nat$is_zero,\n        'Nat.double': Nat$double,\n        'String.pad_right': String$pad_right,\n        'String.pad_left': String$pad_left,\n        'Kind.Code.color': Kind$Code$color,\n        'List.take': List$take,\n        'Kind.Code.highlight.go': Kind$Code$highlight$go,\n        'Kind.Code.highlight': Kind$Code$highlight,\n        'Kind.Defs.read': Kind$Defs$read,\n        'Kind.Synth.load.go': Kind$Synth$load$go,\n        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,\n        'String.length.go': String$length$go,\n        'String.length': String$length,\n        'String.split.go': String$split$go,\n        'String.split': String$split,\n        'Kind.Synth.files_of': Kind$Synth$files_of,\n        'Kind.Synth.load': Kind$Synth$load,\n        'Kind.Status.wait': Kind$Status$wait,\n        'Kind.Check': Kind$Check,\n        'Kind.Check.result': Kind$Check$result,\n        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,\n        'Kind.Error.waiting': Kind$Error$waiting,\n        'Kind.Error.indirect': Kind$Error$indirect,\n        'Maybe.mapped': Maybe$mapped,\n        'Kind.MPath.o': Kind$MPath$o,\n        'Kind.MPath.i': Kind$MPath$i,\n        'Kind.Error.patch': Kind$Error$patch,\n        'Kind.MPath.to_bits': Kind$MPath$to_bits,\n        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,\n        'Kind.Error.show_goal': Kind$Error$show_goal,\n        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,\n        'Kind.Term.normalize': Kind$Term$normalize,\n        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,\n        'List.tail': List$tail,\n        'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,\n        'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,\n        'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,\n        'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,\n        'List.zip': List$zip,\n        'Nat.gte': Nat$gte,\n        'Nat.sub': Nat$sub,\n        'Kind.Term.serialize.go': Kind$Term$serialize$go,\n        'Kind.Term.serialize': Kind$Term$serialize,\n        'Bits.eql': Bits$eql,\n        'Kind.Term.identical': Kind$Term$identical,\n        'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,\n        'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,\n        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,\n        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,\n        'Maybe.or': Maybe$or,\n        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,\n        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,\n        'Kind.Error.cant_infer': Kind$Error$cant_infer,\n        'BitsSet.has': BitsSet$has,\n        'BitsSet.mut.has': BitsSet$mut$has,\n        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,\n        'Kind.Term.has_holes': Kind$Term$has_holes,\n        'Kind.Term.equal.hole': Kind$Term$equal$hole,\n        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,\n        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,\n        'BitsSet.set': BitsSet$set,\n        'BitsSet.mut.set': BitsSet$mut$set,\n        'Bool.eql': Bool$eql,\n        'Kind.Term.equal.go': Kind$Term$equal$go,\n        'BitsSet.new': BitsSet$new,\n        'BitsSet.mut.new': BitsSet$mut$new,\n        'Kind.Term.check': Kind$Term$check,\n        'Kind.Path.nil': Kind$Path$nil,\n        'Kind.MPath.nil': Kind$MPath$nil,\n        'List.is_empty': List$is_empty,\n        'Kind.Term.patch_at': Kind$Term$patch_at,\n        'Kind.Synth.fix': Kind$Synth$fix,\n        'Kind.Status.fail': Kind$Status$fail,\n        'Kind.Synth.one': Kind$Synth$one,\n        'BitsMap.from_list': BitsMap$from_list,\n        'Kind.Term.inline.names': Kind$Term$inline$names,\n        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,\n        'Kind.Term.inline': Kind$Term$inline,\n        'BitsMap.values.go': BitsMap$values$go,\n        'BitsMap.values': BitsMap$values,\n        'Kind.Core.var_name': Kind$Core$var_name,\n        'Kind.Name.show': Kind$Name$show,\n        'Bits.to_nat': Bits$to_nat,\n        'U16.show_hex': U16$show_hex,\n        'Kind.Code.escape.char': Kind$Code$escape$char,\n        'Kind.Code.escape.go': Kind$Code$escape$go,\n        'Kind.Code.escape': Kind$Code$escape,\n        'Kind.Core.show.go': Kind$Core$show$go,\n        'Kind.Core.show': Kind$Core$show,\n        'Kind.Defs.core': Kind$Defs$core,\n        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,\n        'BitsMap.keys.go': BitsMap$keys$go,\n        'BitsMap.keys': BitsMap$keys,\n        'Kind.Synth.many': Kind$Synth$many,\n        'Kind.Synth.file': Kind$Synth$file,\n        'IO.put_string': IO$put_string,\n        'IO.print': IO$print,\n        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,\n        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,\n        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,\n        'Kind.Term.show.app.done': Kind$Term$show$app$done,\n        'Kind.Term.show.app': Kind$Term$show$app,\n        'BitsMap.to_list': BitsMap$to_list,\n        'Kind.Term.show.go': Kind$Term$show$go,\n        'Kind.Term.show': Kind$Term$show,\n        'Kind.Defs.report.types': Kind$Defs$report$types,\n        'List.filter': List$filter,\n        'Kind.Error.is_undef': Kind$Error$is_undef,\n        'Kind.Error.is_mistake': Kind$Error$is_mistake,\n        'Kind.Error.is_goal': Kind$Error$is_goal,\n        'Kind.Error.relevant': Kind$Error$relevant,\n        'Map': Map,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'Kind.Context.show': Kind$Context$show,\n        'Kind.Term.expand_at': Kind$Term$expand_at,\n        'Kind.Term.expand_ct': Kind$Term$expand_ct,\n        'Kind.Term.expand': Kind$Term$expand,\n        'Kind.Error.show': Kind$Error$show,\n        'Kind.Error.origin': Kind$Error$origin,\n        'Kind.Defs.report.errors': Kind$Defs$report$errors,\n        'Kind.Defs.report': Kind$Defs$report,\n        'IO.set_file': IO$set_file,\n        'Bool.show': Bool$show,\n        'Kind.Defs.cache.go': Kind$Defs$cache$go,\n        'Kind.Defs.cache': Kind$Defs$cache,\n        'Kind.api.io.check_file': Kind$api$io$check_file,\n        'Kind.Synth.files.go': Kind$Synth$files$go,\n        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,\n        'Kind.Synth.files': Kind$Synth$files,\n        'Kind.api.io.check_files': Kind$api$io$check_files,\n        'Kind.api.io.check_term': Kind$api$io$check_term,\n        'Kind.api.io.show_term': Kind$api$io$show_term,\n        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,\n        'IO.purify': IO$purify,\n        'Kind.api.check_code': Kind$api$check_code,\n        'Kind.Term.read': Kind$Term$read,\n        'Kind.api.export': Kind$api$export,\n    };\n})();","var ma=this;function oa(q){var w=0;return function(){return w<q.length?{done:!1,value:q[w++]}:{done:!0}}}var pa=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(q,w,h){q!=Array.prototype&&q!=Object.prototype&&(q[w]=h.value)};function qa(q){q=[\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global,q];for(var w=0;w<q.length;++w){var h=q[w];if(h&&h.Math==Math)return h}throw Error(\"Cannot find global object\");}var ra=qa(this);\nfunction sa(){sa=function(){};ra.Symbol||(ra.Symbol=ta)}function ua(q,w){this.P=q;pa(this,\"description\",{configurable:!0,writable:!0,value:w})}ua.prototype.toString=function(){return this.P};var ta=function(){function q(h){if(this instanceof q)throw new TypeError(\"Symbol is not a constructor\");return new ua(\"jscomp_symbol_\"+(h||\"\")+\"_\"+w++,h)}var w=0;return q}();\nfunction Ea(q,w){if(w){var h=ra;q=q.split(\".\");for(var l=0;l<q.length-1;l++){var m=q[l];m in h||(h[m]={});h=h[m]}q=q[q.length-1];l=h[q];w=w(l);w!=l&&null!=w&&pa(h,q,{configurable:!0,writable:!0,value:w})}}Ea(\"Math.imul\",function(q){return q?q:function(w,h){w=Number(w);h=Number(h);var l=w&65535,m=h&65535;return l*m+((w>>>16&65535)*m+l*(h>>>16&65535)<<16>>>0)|0}});\nEa(\"Array.prototype.fill\",function(q){return q?q:function(w,h,l){var m=this.length||0;0>h&&(h=Math.max(0,m+h));if(null==l||l>m)l=m;l=Number(l);0>l&&(l=Math.max(0,m+l));for(h=Number(h||0);h<l;h++)this[h]=w;return this}});function Fa(q){var w=null;return function(){return w=w||q()}}\nvar Ga=Fa(function(){return function(q,w){w&&(q.fd=w,q.prototype=Object.create(w.prototype,{constructor:{value:q,enumerable:!1,writable:!0,configurable:!0}}))}}),Ha=Fa(function(){function q(a,b,g){var f=a.a,k=b.a,t=g.a,y=0,A=f[0]|0,C=A&8191,B=A>>>13,D=f[1]|0;A=D&8191;var K=D>>>13,E=f[2]|0;D=E&8191;var T=E>>>13,F=f[3]|0;E=F&8191;var X=F>>>13,G=f[4]|0;F=G&8191;var Y=G>>>13,H=f[5]|0;G=H&8191;var Z=H>>>13,I=f[6]|0;H=I&8191;var aa=I>>>13,J=f[7]|0;I=J&8191;var ba=J>>>13,U=f[8]|0;J=U&8191;U>>>=13;var V=\nf[9]|0;f=V&8191;V>>>=13;var L=k[0]|0,ca=L&8191,da=L>>>13,M=k[1]|0;L=M&8191;var ea=M>>>13,N=k[2]|0;M=N&8191;var fa=N>>>13,O=k[3]|0;N=O&8191;var ha=O>>>13,P=k[4]|0;O=P&8191;var ia=P>>>13,Q=k[5]|0;P=Q&8191;var ja=Q>>>13,R=k[6]|0;Q=R&8191;var ka=R>>>13,S=k[7]|0;R=S&8191;var la=S>>>13,W=k[8]|0;S=W&8191;W>>>=13;var na=k[9]|0;k=na&8191;na>>>=13;g.b=a.b^b.b;g.length=19;var p=c(C,ca);a=c(C,da);a=a+c(B,ca)|0;b=c(B,da);var va=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(va>>>26)|0;va&=67108863;p=c(A,ca);a=c(A,\nda);a=a+c(K,ca)|0;b=c(K,da);p=p+c(C,L)|0;a=a+c(C,ea)|0;a=a+c(B,L)|0;b=b+c(B,ea)|0;var wa=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(wa>>>26)|0;wa&=67108863;p=c(D,ca);a=c(D,da);a=a+c(T,ca)|0;b=c(T,da);p=p+c(A,L)|0;a=a+c(A,ea)|0;a=a+c(K,L)|0;b=b+c(K,ea)|0;p=p+c(C,M)|0;a=a+c(C,fa)|0;a=a+c(B,M)|0;b=b+c(B,fa)|0;var xa=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(xa>>>26)|0;xa&=67108863;p=c(E,ca);a=c(E,da);a=a+c(X,ca)|0;b=c(X,da);p=p+c(D,L)|0;a=a+c(D,ea)|0;a=a+c(T,L)|0;b=b+c(T,ea)|0;p=p+c(A,M)|0;a=a+c(A,\nfa)|0;a=a+c(K,M)|0;b=b+c(K,fa)|0;p=p+c(C,N)|0;a=a+c(C,ha)|0;a=a+c(B,N)|0;b=b+c(B,ha)|0;var ya=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(ya>>>26)|0;ya&=67108863;p=c(F,ca);a=c(F,da);a=a+c(Y,ca)|0;b=c(Y,da);p=p+c(E,L)|0;a=a+c(E,ea)|0;a=a+c(X,L)|0;b=b+c(X,ea)|0;p=p+c(D,M)|0;a=a+c(D,fa)|0;a=a+c(T,M)|0;b=b+c(T,fa)|0;p=p+c(A,N)|0;a=a+c(A,ha)|0;a=a+c(K,N)|0;b=b+c(K,ha)|0;p=p+c(C,O)|0;a=a+c(C,ia)|0;a=a+c(B,O)|0;b=b+c(B,ia)|0;var za=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(za>>>26)|0;za&=67108863;p=c(G,\nca);a=c(G,da);a=a+c(Z,ca)|0;b=c(Z,da);p=p+c(F,L)|0;a=a+c(F,ea)|0;a=a+c(Y,L)|0;b=b+c(Y,ea)|0;p=p+c(E,M)|0;a=a+c(E,fa)|0;a=a+c(X,M)|0;b=b+c(X,fa)|0;p=p+c(D,N)|0;a=a+c(D,ha)|0;a=a+c(T,N)|0;b=b+c(T,ha)|0;p=p+c(A,O)|0;a=a+c(A,ia)|0;a=a+c(K,O)|0;b=b+c(K,ia)|0;p=p+c(C,P)|0;a=a+c(C,ja)|0;a=a+c(B,P)|0;b=b+c(B,ja)|0;var Aa=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(Aa>>>26)|0;Aa&=67108863;p=c(H,ca);a=c(H,da);a=a+c(aa,ca)|0;b=c(aa,da);p=p+c(G,L)|0;a=a+c(G,ea)|0;a=a+c(Z,L)|0;b=b+c(Z,ea)|0;p=p+c(F,M)|0;a=a+c(F,\nfa)|0;a=a+c(Y,M)|0;b=b+c(Y,fa)|0;p=p+c(E,N)|0;a=a+c(E,ha)|0;a=a+c(X,N)|0;b=b+c(X,ha)|0;p=p+c(D,O)|0;a=a+c(D,ia)|0;a=a+c(T,O)|0;b=b+c(T,ia)|0;p=p+c(A,P)|0;a=a+c(A,ja)|0;a=a+c(K,P)|0;b=b+c(K,ja)|0;p=p+c(C,Q)|0;a=a+c(C,ka)|0;a=a+c(B,Q)|0;b=b+c(B,ka)|0;var Ba=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(Ba>>>26)|0;Ba&=67108863;p=c(I,ca);a=c(I,da);a=a+c(ba,ca)|0;b=c(ba,da);p=p+c(H,L)|0;a=a+c(H,ea)|0;a=a+c(aa,L)|0;b=b+c(aa,ea)|0;p=p+c(G,M)|0;a=a+c(G,fa)|0;a=a+c(Z,M)|0;b=b+c(Z,fa)|0;p=p+c(F,N)|0;a=a+c(F,ha)|\n0;a=a+c(Y,N)|0;b=b+c(Y,ha)|0;p=p+c(E,O)|0;a=a+c(E,ia)|0;a=a+c(X,O)|0;b=b+c(X,ia)|0;p=p+c(D,P)|0;a=a+c(D,ja)|0;a=a+c(T,P)|0;b=b+c(T,ja)|0;p=p+c(A,Q)|0;a=a+c(A,ka)|0;a=a+c(K,Q)|0;b=b+c(K,ka)|0;p=p+c(C,R)|0;a=a+c(C,la)|0;a=a+c(B,R)|0;b=b+c(B,la)|0;var Ca=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(Ca>>>26)|0;Ca&=67108863;p=c(J,ca);a=c(J,da);a=a+c(U,ca)|0;b=c(U,da);p=p+c(I,L)|0;a=a+c(I,ea)|0;a=a+c(ba,L)|0;b=b+c(ba,ea)|0;p=p+c(H,M)|0;a=a+c(H,fa)|0;a=a+c(aa,M)|0;b=b+c(aa,fa)|0;p=p+c(G,N)|0;a=a+c(G,ha)|0;\na=a+c(Z,N)|0;b=b+c(Z,ha)|0;p=p+c(F,O)|0;a=a+c(F,ia)|0;a=a+c(Y,O)|0;b=b+c(Y,ia)|0;p=p+c(E,P)|0;a=a+c(E,ja)|0;a=a+c(X,P)|0;b=b+c(X,ja)|0;p=p+c(D,Q)|0;a=a+c(D,ka)|0;a=a+c(T,Q)|0;b=b+c(T,ka)|0;p=p+c(A,R)|0;a=a+c(A,la)|0;a=a+c(K,R)|0;b=b+c(K,la)|0;p=p+c(C,S)|0;a=a+c(C,W)|0;a=a+c(B,S)|0;b=b+c(B,W)|0;var Da=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(Da>>>26)|0;Da&=67108863;p=c(f,ca);a=c(f,da);a=a+c(V,ca)|0;b=c(V,da);p=p+c(J,L)|0;a=a+c(J,ea)|0;a=a+c(U,L)|0;b=b+c(U,ea)|0;p=p+c(I,M)|0;a=a+c(I,fa)|0;a=a+c(ba,\nM)|0;b=b+c(ba,fa)|0;p=p+c(H,N)|0;a=a+c(H,ha)|0;a=a+c(aa,N)|0;b=b+c(aa,ha)|0;p=p+c(G,O)|0;a=a+c(G,ia)|0;a=a+c(Z,O)|0;b=b+c(Z,ia)|0;p=p+c(F,P)|0;a=a+c(F,ja)|0;a=a+c(Y,P)|0;b=b+c(Y,ja)|0;p=p+c(E,Q)|0;a=a+c(E,ka)|0;a=a+c(X,Q)|0;b=b+c(X,ka)|0;p=p+c(D,R)|0;a=a+c(D,la)|0;a=a+c(T,R)|0;b=b+c(T,la)|0;p=p+c(A,S)|0;a=a+c(A,W)|0;a=a+c(K,S)|0;b=b+c(K,W)|0;p=p+c(C,k)|0;a=a+c(C,na)|0;a=a+c(B,k)|0;b=b+c(B,na)|0;C=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(C>>>26)|0;C&=67108863;p=c(f,L);a=c(f,ea);a=a+c(V,L)|0;b=c(V,\nea);p=p+c(J,M)|0;a=a+c(J,fa)|0;a=a+c(U,M)|0;b=b+c(U,fa)|0;p=p+c(I,N)|0;a=a+c(I,ha)|0;a=a+c(ba,N)|0;b=b+c(ba,ha)|0;p=p+c(H,O)|0;a=a+c(H,ia)|0;a=a+c(aa,O)|0;b=b+c(aa,ia)|0;p=p+c(G,P)|0;a=a+c(G,ja)|0;a=a+c(Z,P)|0;b=b+c(Z,ja)|0;p=p+c(F,Q)|0;a=a+c(F,ka)|0;a=a+c(Y,Q)|0;b=b+c(Y,ka)|0;p=p+c(E,R)|0;a=a+c(E,la)|0;a=a+c(X,R)|0;b=b+c(X,la)|0;p=p+c(D,S)|0;a=a+c(D,W)|0;a=a+c(T,S)|0;b=b+c(T,W)|0;p=p+c(A,k)|0;a=a+c(A,na)|0;a=a+c(K,k)|0;b=b+c(K,na)|0;A=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(A>>>26)|0;A&=67108863;\np=c(f,M);a=c(f,fa);a=a+c(V,M)|0;b=c(V,fa);p=p+c(J,N)|0;a=a+c(J,ha)|0;a=a+c(U,N)|0;b=b+c(U,ha)|0;p=p+c(I,O)|0;a=a+c(I,ia)|0;a=a+c(ba,O)|0;b=b+c(ba,ia)|0;p=p+c(H,P)|0;a=a+c(H,ja)|0;a=a+c(aa,P)|0;b=b+c(aa,ja)|0;p=p+c(G,Q)|0;a=a+c(G,ka)|0;a=a+c(Z,Q)|0;b=b+c(Z,ka)|0;p=p+c(F,R)|0;a=a+c(F,la)|0;a=a+c(Y,R)|0;b=b+c(Y,la)|0;p=p+c(E,S)|0;a=a+c(E,W)|0;a=a+c(X,S)|0;b=b+c(X,W)|0;p=p+c(D,k)|0;a=a+c(D,na)|0;a=a+c(T,k)|0;b=b+c(T,na)|0;D=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(D>>>26)|0;D&=67108863;p=c(f,N);a=c(f,\nha);a=a+c(V,N)|0;b=c(V,ha);p=p+c(J,O)|0;a=a+c(J,ia)|0;a=a+c(U,O)|0;b=b+c(U,ia)|0;p=p+c(I,P)|0;a=a+c(I,ja)|0;a=a+c(ba,P)|0;b=b+c(ba,ja)|0;p=p+c(H,Q)|0;a=a+c(H,ka)|0;a=a+c(aa,Q)|0;b=b+c(aa,ka)|0;p=p+c(G,R)|0;a=a+c(G,la)|0;a=a+c(Z,R)|0;b=b+c(Z,la)|0;p=p+c(F,S)|0;a=a+c(F,W)|0;a=a+c(Y,S)|0;b=b+c(Y,W)|0;p=p+c(E,k)|0;a=a+c(E,na)|0;a=a+c(X,k)|0;b=b+c(X,na)|0;E=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(E>>>26)|0;E&=67108863;p=c(f,O);a=c(f,ia);a=a+c(V,O)|0;b=c(V,ia);p=p+c(J,P)|0;a=a+c(J,ja)|0;a=a+c(U,P)|0;\nb=b+c(U,ja)|0;p=p+c(I,Q)|0;a=a+c(I,ka)|0;a=a+c(ba,Q)|0;b=b+c(ba,ka)|0;p=p+c(H,R)|0;a=a+c(H,la)|0;a=a+c(aa,R)|0;b=b+c(aa,la)|0;p=p+c(G,S)|0;a=a+c(G,W)|0;a=a+c(Z,S)|0;b=b+c(Z,W)|0;p=p+c(F,k)|0;a=a+c(F,na)|0;a=a+c(Y,k)|0;b=b+c(Y,na)|0;F=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(F>>>26)|0;F&=67108863;p=c(f,P);a=c(f,ja);a=a+c(V,P)|0;b=c(V,ja);p=p+c(J,Q)|0;a=a+c(J,ka)|0;a=a+c(U,Q)|0;b=b+c(U,ka)|0;p=p+c(I,R)|0;a=a+c(I,la)|0;a=a+c(ba,R)|0;b=b+c(ba,la)|0;p=p+c(H,S)|0;a=a+c(H,W)|0;a=a+c(aa,S)|0;b=b+c(aa,W)|\n0;p=p+c(G,k)|0;a=a+c(G,na)|0;a=a+c(Z,k)|0;b=b+c(Z,na)|0;G=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(G>>>26)|0;G&=67108863;p=c(f,Q);a=c(f,ka);a=a+c(V,Q)|0;b=c(V,ka);p=p+c(J,R)|0;a=a+c(J,la)|0;a=a+c(U,R)|0;b=b+c(U,la)|0;p=p+c(I,S)|0;a=a+c(I,W)|0;a=a+c(ba,S)|0;b=b+c(ba,W)|0;p=p+c(H,k)|0;a=a+c(H,na)|0;a=a+c(aa,k)|0;b=b+c(aa,na)|0;H=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(H>>>26)|0;H&=67108863;p=c(f,R);a=c(f,la);a=a+c(V,R)|0;b=c(V,la);p=p+c(J,S)|0;a=a+c(J,W)|0;a=a+c(U,S)|0;b=b+c(U,W)|0;p=p+c(I,k)|\n0;a=a+c(I,na)|0;a=a+c(ba,k)|0;b=b+c(ba,na)|0;I=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(I>>>26)|0;I&=67108863;p=c(f,S);a=c(f,W);a=a+c(V,S)|0;b=c(V,W);p=p+c(J,k)|0;a=a+c(J,na)|0;a=a+c(U,k)|0;b=b+c(U,na)|0;J=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(J>>>26)|0;J&=67108863;p=c(f,k);a=c(f,na);a=a+c(V,k)|0;b=c(V,na);B=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(B>>>26)|0;t[0]=va;t[1]=wa;t[2]=xa;t[3]=ya;t[4]=za;t[5]=Aa;t[6]=Ba;t[7]=Ca;t[8]=Da;t[9]=C;t[10]=A;t[11]=D;t[12]=E;t[13]=F;t[14]=G;t[15]=H;t[16]=\nI;t[17]=J;t[18]=B&67108863;0!==y&&(t[19]=y,g.length++);return g}function w(a,b){if(!a)throw Error(b||\"Assertion failed\");}function h(a,b,g){if(h.vc(a))return a;this.b=0;this.a=null;this.length=0;this.red=null;if(null!==a){if(\"le\"===b||\"be\"===b)g=b,b=10;this.pa(a||0,b||10,g||\"be\")}}function l(a,b,g){var f=0;for(g=Math.min(a.length,g);b<g;b++){var k=a.charCodeAt(b)-48;f<<=4;f=49<=k&&54>=k?f|k-49+10:17<=k&&22>=k?f|k-17+10:f|k&15}return f}function m(a,b,g){g.b=b.b^a.b;var f=a.length+b.length|0;g.length=\nf;f=f-1|0;var k=a.a[0]|0,t=b.a[0]|0;k*=t;var y=k/67108864|0;g.a[0]=k&67108863;for(var A=1;A<f;A++){var C=y>>>26,B=y&67108863;y=Math.min(A,b.length-1);for(var D=Math.max(0,A-a.length+1);D<=y;D++)k=a.a[A-D|0]|0,t=b.a[D]|0,k=k*t+B,C+=k/67108864|0,B=k&67108863;g.a[A]=B|0;y=C|0}0!==y?g.a[A]=y|0:g.length--;return g.L()}function x(a,b){this.name=a;this.p=new h(b,16);this.n=this.p.U();this.k=(new h(1)).ua(this.n).i(this.p);this.Ab=this.cc()}function d(){x.call(this,\"k256\",\"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\")}\nfunction u(a){\"string\"===typeof a?(a=h.P(a),this.G=a.p,this.ja=a):(w(a.Cd(1),\"modulus must be greater than 1\"),this.G=a,this.ja=null)}var e={};\"object\"===typeof module?e=h:e.Gb=h;h.Gb=h;h.Eb=26;h.vc=function(a){return a instanceof h?!0:null!==a&&\"object\"===typeof a&&a.constructor.Eb===h.Eb&&Array.isArray(a.a)};h.prototype.pa=function(a,b,g){if(\"number\"===typeof a)this.Yb(a,g);else if(\"object\"===typeof a)this.Ia(a,g);else{\"hex\"===b&&(b=16);w(b===(b|0)&&2<=b&&36>=b);a=a.toString().replace(/\\s+/g,\"\");\nvar f=0;\"-\"===a[0]&&f++;16===b?this.bc(a,f):this.td(a,b,f);\"-\"===a[0]&&(this.b=1);this.L();\"le\"===g&&this.Ia(this.H(),g)}};h.prototype.Yb=function(a,b){0>a&&(this.b=1,a=-a);67108864>a?(this.a=[a&67108863],this.length=1):4503599627370496>a?(this.a=[a&67108863,a/67108864&67108863],this.length=2):(w(9007199254740992>a),this.a=[a&67108863,a/67108864&67108863,1],this.length=3);\"le\"===b&&this.Ia(this.H(),b)};h.prototype.Ia=function(a,b){w(\"number\"===typeof a.length);if(0>=a.length)this.a=[0],this.length=\n1;else{this.length=Math.ceil(a.length/3);this.a=Array(this.length);for(var g=0;g<this.length;g++)this.a[g]=0;var f=0;if(\"be\"===b)for(g=a.length-1,b=0;0<=g;g-=3){var k=a[g]|a[g-1]<<8|a[g-2]<<16;this.a[b]|=k<<f&67108863;this.a[b+1]=k>>>26-f&67108863;f+=24;26<=f&&(f-=26,b++)}else if(\"le\"===b)for(b=g=0;g<a.length;g+=3)k=a[g]|a[g+1]<<8|a[g+2]<<16,this.a[b]|=k<<f&67108863,this.a[b+1]=k>>>26-f&67108863,f+=24,26<=f&&(f-=26,b++);this.L()}};h.prototype.bc=function(a,b){this.length=Math.ceil((a.length-b)/6);\nthis.a=Array(this.length);for(var g=0;g<this.length;g++)this.a[g]=0;var f,k=0;g=a.length-6;for(f=0;g>=b;g-=6){var t=l(a,g,g+6);this.a[f]|=t<<k&67108863;this.a[f+1]|=t>>>26-k&4194303;k+=24;26<=k&&(k-=26,f++)}g+6!==b&&(t=l(a,b,g+6),this.a[f]|=t<<k&67108863,this.a[f+1]|=t>>>26-k&4194303);this.L()};h.prototype.qc=function(a){a.a=Array(this.length);for(var b=0;b<this.length;b++)a.a[b]=this.a[b];a.length=this.length;a.b=this.b;a.red=this.red};h.prototype.clone=function(){var a=new h(null);this.qc(a);return a};\nh.prototype.Rb=function(a){for(;this.length<a;)this.a[this.length++]=0};h.prototype.L=function(){for(;1<this.length&&0===this.a[this.length-1];)this.length--;return this.qa()};h.prototype.qa=function(){1===this.length&&0===this.a[0]&&(this.b=0);return this};var n=\" 0 00 000 0000 00000 000000 0000000 00000000 000000000 0000000000 00000000000 000000000000 0000000000000 00000000000000 000000000000000 0000000000000000 00000000000000000 000000000000000000 0000000000000000000 00000000000000000000 000000000000000000000 0000000000000000000000 00000000000000000000000 000000000000000000000000 0000000000000000000000000\".split(\" \"),\nv=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],r=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1E7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64E6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243E5,28629151,33554432,39135393,45435424,52521875,60466176];h.prototype.toString=function(a,b){a=a||10;b=b|0||1;if(16===a||\"hex\"===a){var g=\"\";for(var f=a=0,k=0;k<this.length;k++){var t=\nthis.a[k],y=((t<<a|f)&16777215).toString(16);f=t>>>24-a&16777215;g=0!==f||k!==this.length-1?n[6-y.length]+y+g:y+g;a+=2;26<=a&&(a-=26,k--)}for(0!==f&&(g=f.toString(16)+g);0!==g.length%b;)g=\"0\"+g;0!==this.b&&(g=\"-\"+g);return g}if(a===(a|0)&&2<=a&&36>=a){f=v[a];k=r[a];g=\"\";t=this.clone();for(t.b=0;!t.w();)y=t.Da(k).toString(a),t=t.Dd(k),g=t.w()?y+g:n[f-y.length]+y+g;for(this.w()&&(g=\"0\"+g);0!==g.length%b;)g=\"0\"+g;0!==this.b&&(g=\"-\"+g);return g}w(!1,\"Base should be between 2 and 36\")};h.prototype.H=function(a,\nb){return this.hd(a,b)};h.prototype.hd=function(a,b){var g=Array,f=this.byteLength();b=b||Math.max(1,f);w(f<=b,\"byte array longer than desired length\");w(0<b,\"Requested array length <= 0\");this.L();var k=\"le\"===a;g=new g(b);a=this.clone();if(k){for(k=0;!a.w();k++)f=a.T(255),a.j(8),g[k]=f;for(;k<b;k++)g[k]=0}else{for(k=0;k<b-f;k++)g[k]=0;for(k=0;!a.w();k++)f=a.T(255),a.j(8),g[b-k-1]=f}return g};h.prototype.fb=Math.clz32?function(a){return 32-Math.clz32(a)}:function(a){var b=0;4096<=a&&(b+=13,a>>>=\n13);64<=a&&(b+=7,a>>>=7);8<=a&&(b+=4,a>>>=4);2<=a&&(b+=2,a>>>=2);return b+a};h.prototype.U=function(){return 26*(this.length-1)+this.fb(this.a[this.length-1])};h.prototype.byteLength=function(){return Math.ceil(this.U()/8)};h.prototype.l=function(){return this.clone().Pa()};h.prototype.Pa=function(){this.w()||(this.b^=1);return this};h.prototype.B=function(a){if(0!==this.b&&0===a.b)return this.b=0,this.i(a),this.b^=1,this.qa();if(0===this.b&&0!==a.b){a.b=0;var b=this.i(a);a.b=1;return b.qa()}if(this.length>\na.length)var g=this;else g=a,a=this;for(var f=b=0;f<a.length;f++)b=(g.a[f]|0)+(a.a[f]|0)+b,this.a[f]=b&67108863,b>>>=26;for(;0!==b&&f<g.length;f++)b=(g.a[f]|0)+b,this.a[f]=b&67108863,b>>>=26;this.length=g.length;if(0!==b)this.a[this.length]=b,this.length++;else if(g!==this)for(;f<g.length;f++)this.a[f]=g.a[f];return this};h.prototype.add=function(a){if(0!==a.b&&0===this.b){a.b=0;var b=this.sub(a);a.b^=1;return b}return 0===a.b&&0!==this.b?(this.b=0,b=a.sub(this),this.b=1,b):this.length>a.length?this.clone().B(a):\na.clone().B(this)};h.prototype.i=function(a){if(0!==a.b){a.b=0;var b=this.B(a);a.b=1;return b.qa()}if(0!==this.b)return this.b=0,this.B(a),this.b=1,this.qa();b=this.cmp(a);if(0===b)return this.b=0,this.length=1,this.a[0]=0,this;if(0<b)var g=this;else g=a,a=this;for(var f=0,k=0;k<a.length;k++)b=(g.a[k]|0)-(a.a[k]|0)+f,f=b>>26,this.a[k]=b&67108863;for(;0!==f&&k<g.length;k++)b=(g.a[k]|0)+f,f=b>>26,this.a[k]=b&67108863;if(0===f&&k<g.length&&g!==this)for(;k<g.length;k++)this.a[k]=g.a[k];this.length=Math.max(this.length,\nk);g!==this&&(this.b=1);return this.L()};h.prototype.sub=function(a){return this.clone().i(a)};var c=Math.imul;Math.imul||(q=m);h.prototype.Oc=function(a,b){var g=this.length+a.length;if(10===this.length&&10===a.length)a=q(this,a,b);else if(63>g)a=m(this,a,b);else throw\"removed\";return a};h.prototype.o=function(a){var b=new h(null);b.a=Array(this.length+a.length);return this.Oc(a,b)};h.prototype.ua=function(a){w(\"number\"===typeof a&&0<=a);var b=a%26;a=(a-b)/26;var g=67108863>>>26-b<<26-b,f;if(0!==\nb){var k=0;for(f=0;f<this.length;f++){var t=this.a[f]&g;this.a[f]=(this.a[f]|0)-t<<b|k;k=t>>>26-b}k&&(this.a[f]=k,this.length++)}if(0!==a){for(f=this.length-1;0<=f;f--)this.a[f+a]=this.a[f];for(f=0;f<a;f++)this.a[f]=0;this.length+=a}return this.L()};h.prototype.j=function(a){w(\"number\"===typeof a&&0<=a);var b=a%26,g=Math.min((a-b)/26,this.length),f=67108863^67108863>>>b<<b;var k=Math.max(0,-g);if(0!==g)if(this.length>g)for(this.length-=g,a=0;a<this.length;a++)this.a[a]=this.a[a+g];else this.a[0]=\n0,this.length=1;g=0;for(a=this.length-1;0<=a&&(0!==g||a>=k);a--){var t=this.a[a]|0;this.a[a]=g<<26-b|t>>>b;g=t&f}0===this.length&&(this.a[0]=0,this.length=1);return this.L()};h.prototype.ld=function(a){return this.clone().ua(a)};h.prototype.ab=function(a){return this.clone().j(a)};h.prototype.Na=function(a){w(\"number\"===typeof a);w(67108864>a);if(0>a)return this.Ca(-a);if(0!==this.b){if(1===this.length&&(this.a[0]|0)<a)return this.a[0]=a-(this.a[0]|0),this.b=0,this;this.b=0;this.Ca(a);this.b=1;return this}return this.Wb(a)};\nh.prototype.Wb=function(a){this.a[0]+=a;for(a=0;a<this.length&&67108864<=this.a[a];a++)this.a[a]-=67108864,a===this.length-1?this.a[a+1]=1:this.a[a+1]++;this.length=Math.max(this.length,a+1);return this};h.prototype.Ca=function(a){w(\"number\"===typeof a);w(67108864>a);if(0>a)return this.Na(-a);if(0!==this.b)return this.b=0,this.Na(a),this.b=1,this;this.a[0]-=a;if(1===this.length&&0>this.a[0])this.a[0]=-this.a[0],this.b=1;else for(a=0;a<this.length&&0>this.a[a];a++)this.a[a]+=67108864,--this.a[a+1];\nreturn this.L()};h.prototype.Ja=function(a,b,g){var f;this.Rb(a.length+g);var k=0;for(f=0;f<a.length;f++){var t=(this.a[f+g]|0)+k;k=(a.a[f]|0)*b;t-=k&67108863;k=(t>>26)-(k/67108864|0);this.a[f+g]=t&67108863}for(;f<this.length-g;f++)t=(this.a[f+g]|0)+k,k=t>>26,this.a[f+g]=t&67108863;if(0===k)return this.L();w(-1===k);for(f=k=0;f<this.length;f++)t=-(this.a[f]|0)+k,k=t>>26,this.a[f]=t&67108863;this.b=1;return this.L()};h.prototype.ic=function(a,b){var g=this.clone(),f=a,k=f.a[f.length-1]|0;a=26-this.fb(k);\n0!==a&&(f=f.ld(a),g.ua(a),k=f.a[f.length-1]|0);var t=g.length-f.length;if(\"mod\"!==b){var y=new h(null);y.length=t+1;y.a=Array(y.length);for(var A=0;A<y.length;A++)y.a[A]=0}A=g.clone().Ja(f,1,t);0===A.b&&(g=A,y&&(y.a[t]=1));for(--t;0<=t;t--){A=67108864*(g.a[f.length+t]|0)+(g.a[f.length+t-1]|0);A=Math.min(A/k|0,67108863);for(g.Ja(f,A,t);0!==g.b;)A--,g.b=0,g.Ja(f,1,t),g.w()||(g.b^=1);y&&(y.a[t]=A)}y&&y.L();g.L();\"div\"!==b&&0!==a&&g.j(a);return{u:y||null,J:g}};h.prototype.ga=function(a,b,g){w(!a.w());\nif(this.w())return{u:new h(0),J:new h(0)};var f;if(0!==this.b&&0===a.b){var k=this.l().ga(a,b);\"mod\"!==b&&(f=k.u.l());if(\"div\"!==b){var t=k.J.l();g&&0!==t.b&&t.B(a)}return{u:f,J:t}}return 0===this.b&&0!==a.b?(k=this.ga(a.l(),b),\"mod\"!==b&&(f=k.u.l()),{u:f,J:k.J}):0!==(this.b&a.b)?(k=this.l().ga(a.l(),b),\"div\"!==b&&(t=k.J.l(),g&&0!==t.b&&t.i(a)),{u:k.u,J:t}):a.length>this.length||0>this.cmp(a)?{u:new h(0),J:this}:1===a.length?\"div\"===b?{u:this.sc(a.a[0]),J:null}:\"mod\"===b?{u:null,J:new h(this.Da(a.a[0]))}:\n{u:this.sc(a.a[0]),J:new h(this.Da(a.a[0]))}:this.ic(a,b)};h.prototype.u=function(a){return this.ga(a,\"div\",!1).u};h.prototype.S=function(a){return this.ga(a,\"mod\",!0).J};h.prototype.mb=function(a){var b=this.ga(a);if(b.J.w())return b.u;var g=0!==b.u.b?b.J.i(a):b.J,f=a.ab(1);a=a.T(1);g=g.cmp(f);return 0>g||1===a&&0===g?b.u:0!==b.u.b?b.u.Ca(1):b.u.Na(1)};h.prototype.Da=function(a){w(67108863>=a);for(var b=67108864%a,g=0,f=this.length-1;0<=f;f--)g=(b*g+(this.a[f]|0))%a;return g};h.prototype.tc=function(a){w(0===\na.b);w(!a.w());var b=this,g=a.clone();b=0!==b.b?b.S(a):b.clone();a=new h(1);for(var f=new h(0),k=new h(0),t=new h(1),y=0;b.Ra()&&g.Ra();)b.j(1),g.j(1),++y;for(var A=g.clone(),C=b.clone();!b.w();){for(var B=0,D=1;0===(b.a[0]&D)&&26>B;++B,D<<=1);if(0<B)for(b.j(B);0<B--;){if(a.Y()||f.Y())a.B(A),f.i(C);a.j(1);f.j(1)}B=0;for(D=1;0===(g.a[0]&D)&&26>B;++B,D<<=1);if(0<B)for(g.j(B);0<B--;){if(k.Y()||t.Y())k.B(A),t.i(C);k.j(1);t.j(1)}0<=b.cmp(g)?(b.i(g),a.i(k),f.i(t)):(g.i(b),k.i(a),t.i(f))}return{I:k,M:t,\nBd:g.ua(y)}};h.prototype.Zb=function(a){w(0===a.b);w(!a.w());var b=this,g=a.clone();b=0!==b.b?b.S(a):b.clone();for(var f=new h(1),k=new h(0),t=g.clone();0<b.m(1)&&0<g.m(1);){for(var y=0,A=1;0===(b.a[0]&A)&&26>y;++y,A<<=1);if(0<y)for(b.j(y);0<y--;)f.Y()&&f.B(t),f.j(1);y=0;for(A=1;0===(g.a[0]&A)&&26>y;++y,A<<=1);if(0<y)for(g.j(y);0<y--;)k.Y()&&k.B(t),k.j(1);0<=b.cmp(g)?(b.i(g),f.i(k)):(g.i(b),k.i(f))}b=0===b.m(1)?f:k;0>b.m(0)&&b.B(a);return b};h.prototype.Ba=function(a){return this.tc(a).I.S(a)};h.prototype.Ra=\nfunction(){return 0===(this.a[0]&1)};h.prototype.Y=function(){return 1===(this.a[0]&1)};h.prototype.T=function(a){return this.a[0]&a};h.prototype.w=function(){return 1===this.length&&0===this.a[0]};h.prototype.m=function(a){var b=0>a;if(0!==this.b&&!b)return-1;if(0===this.b&&b)return 1;this.L();1<this.length?a=1:(b&&(a=-a),w(67108863>=a,\"Number is too big\"),b=this.a[0]|0,a=b===a?0:b<a?-1:1);return 0!==this.b?-a|0:a};h.prototype.cmp=function(a){if(0!==this.b&&0===a.b)return-1;if(0===this.b&&0!==a.b)return 1;\na=this.Db(a);return 0!==this.b?-a|0:a};h.prototype.Db=function(a){if(this.length>a.length)return 1;if(this.length<a.length)return-1;for(var b=0,g=this.length-1;0<=g;g--){var f=this.a[g]|0,k=a.a[g]|0;if(f!==k){f<k?b=-1:f>k&&(b=1);break}}return b};h.red=function(a){return new u(a)};h.prototype.A=function(a){w(!this.red,\"Already a number in reduction context\");w(0===this.b,\"red works only with positives\");return a.pc(this).ea(a)};h.prototype.ta=function(){w(this.red,\"fromRed works only with numbers in reduction context\");\nreturn this.red.oc(this)};h.prototype.ea=function(a){this.red=a;return this};h.prototype.$=function(a){w(this.red,\"redAdd works only with red numbers\");return this.red.add(this,a)};h.prototype.s=function(a){w(this.red,\"redIAdd works only with red numbers\");return this.red.B(this,a)};h.prototype.aa=function(a){w(this.red,\"redSub works only with red numbers\");return this.red.sub(this,a)};h.prototype.h=function(a){w(this.red,\"redISub works only with red numbers\");return this.red.i(this,a)};h.prototype.c=\nfunction(a){w(this.red,\"redMul works only with red numbers\");this.red.fa(this,a);return this.red.o(this,a)};h.prototype.f=function(){w(this.red,\"redSqr works only with red numbers\");this.red.za(this);return this.red.yb(this)};h.prototype.Uc=function(){w(this.red,\"redSqrt works only with red numbers\");this.red.za(this);return this.red.sqrt(this)};h.prototype.Za=function(){w(this.red,\"redInvm works only with red numbers\");this.red.za(this);return this.red.Ba(this)};h.prototype.la=function(){w(this.red,\n\"redNeg works only with red numbers\");this.red.za(this);return this.red.l(this)};var z={Fd:null,Kd:null,Jd:null,Ld:null};x.prototype.cc=function(){var a=new h(null);a.a=Array(Math.ceil(this.n/13));return a};x.prototype.Kc=function(a){do{this.split(a,this.Ab);a=this.Ic(a);a=a.B(this.Ab);var b=a.U()}while(b>this.n);b=b<this.n?-1:a.Db(this.p);0===b?(a.a[0]=0,a.length=1):0<b?a.i(this.p):a.L();return a};(function(a,b){function g(){}a.fd=b;g.prototype=b.prototype;a.prototype=new g;a.prototype.constructor=\na})(d,x);d.prototype.split=function(a,b){for(var g=Math.min(a.length,9),f=0;f<g;f++)b.a[f]=a.a[f];b.length=g;if(9>=a.length)a.a[0]=0,a.length=1;else{g=a.a[9];b.a[b.length++]=g&4194303;for(f=10;f<a.length;f++)b=a.a[f]|0,a.a[f-10]=(b&4194303)<<4|g>>>22,g=b;g>>>=22;a.a[f-10]=g;a.length=0===g&&10<a.length?a.length-10:a.length-9}};d.prototype.Ic=function(a){a.a[a.length]=0;a.a[a.length+1]=0;a.length+=2;for(var b=0,g=0;g<a.length;g++){var f=a.a[g]|0;b+=977*f;a.a[g]=b&67108863;b=64*f+(b/67108864|0)}0===\na.a[a.length-1]&&(a.length--,0===a.a[a.length-1]&&a.length--);return a};h.P=function(a){if(z[a])return z[a];var b=new d;return z[a]=b};u.prototype.za=function(a){w(0===a.b,\"red works only with positives\");w(a.red,\"red works only with red numbers\")};u.prototype.fa=function(a,b){w(0===(a.b|b.b),\"red works only with positives\");w(a.red&&a.red===b.red,\"red works only with red numbers\")};u.prototype.Oa=function(a){return this.ja?this.ja.Kc(a).ea(this):a.S(this.G).ea(this)};u.prototype.l=function(a){return a.w()?\na.clone():this.G.sub(a).ea(this)};u.prototype.add=function(a,b){this.fa(a,b);a=a.add(b);0<=a.cmp(this.G)&&a.i(this.G);return a.ea(this)};u.prototype.B=function(a,b){this.fa(a,b);a=a.B(b);0<=a.cmp(this.G)&&a.i(this.G);return a};u.prototype.sub=function(a,b){this.fa(a,b);a=a.sub(b);0>a.m(0)&&a.B(this.G);return a.ea(this)};u.prototype.i=function(a,b){this.fa(a,b);a=a.i(b);0>a.m(0)&&a.B(this.G);return a};u.prototype.o=function(a,b){this.fa(a,b);return this.Oa(a.o(b))};u.prototype.yb=function(a){return this.o(a,\na)};u.prototype.sqrt=function(a){if(a.w())return a.clone();var b=this.G.T(3);w(1===b%2);if(3===b)return b=this.G.add(new h(1)).j(2),this.pow(a,b);for(var g=this.G.bd(1),f=0;!g.w()&&0===g.T(1);)f++,g.j(1);w(!g.w());b=(new h(1)).A(this);var k=b.la(),t=this.G.bd(1).j(1),y=this.G.U();for(y=(new h(2*y*y)).A(this);0!==this.pow(y,t).cmp(k);)y.s(k);t=this.pow(y,g);k=this.pow(a,g.wd(1).j(1));a=this.pow(a,g);for(g=f;0!==a.cmp(b);){y=a;for(f=0;0!==y.cmp(b);f++)y=y.f();w(f<g);t=this.pow(t,(new h(1)).ua(g-f-1));\nk=k.c(t);t=t.f();a=a.c(t);g=f}return k};u.prototype.Ba=function(a){a=a.Zb(this.G);return 0!==a.b?(a.b=0,this.Oa(a).la()):this.Oa(a)};u.prototype.pow=function(a,b){if(b.w())return(new h(1)).A(this);if(0===b.m(1))return a.clone();var g=Array(16);g[0]=(new h(1)).A(this);g[1]=a;for(var f=2;f<g.length;f++)g[f]=this.o(g[f-1],a);a=g[0];var k=0,t=0,y=b.U()%26;0===y&&(y=26);for(f=b.length-1;0<=f;f--){var A=b.a[f];for(--y;0<=y;y--){var C=A>>y&1;a!==g[0]&&(a=this.yb(a));if(0===C&&0===k)t=0;else if(k<<=1,k|=\nC,t++,4===t||0===f&&0===y)a=this.o(a,g[k]),k=t=0}y=26}return a};u.prototype.pc=function(a){var b=a.S(this.G);return b===a?b.clone():b};u.prototype.oc=function(a){a=a.clone();a.red=null;return a};return e}),Ia=Fa(function(){function q(){}function w(l){return l.length>>>1}var h={};h.Ib=q;h.pd=50;q.P=!0;h.Gd=q.P?2147483647:1073741823;q.from=function(l,m){var x=null,d=w(l,m)|0;if((q.P?2147483647:1073741823)<d)throw new RangeError(\"Invalid typed array length\");q.P?(x=new Uint8Array(d),x.__proto__=q.prototype):\n(null===x&&(x=new q(d)),x.length=d);l=x.write(l,m);l!==d&&(x=x.slice(0,l));return x};q.P&&(q.prototype.__proto__=Uint8Array.prototype,q.__proto__=Uint8Array,sa(),sa(),sa(),\"undefined\"!==typeof Symbol&&Symbol.species&&q[Symbol.species]===q&&(sa(),Object.defineProperty(q,Symbol.species,{value:null,configurable:!0})));q.isBuffer=function(l){return!(null==l||!l.$b)};q.byteLength=w;q.prototype.$b=!0;q.prototype.write=function(l){var m=this.length;var x=Number(0)||0;var d=this.length-x;m?(m=Number(m),m>\nd&&(m=d)):m=d;d=l.length;if(0!==d%2)throw new TypeError(\"Invalid hex string\");m>d/2&&(m=d/2);for(d=0;d<m;++d){var u=parseInt(l.substr(2*d,2),16);if(isNaN(u))break;this[x+d]=u}return d};return h}),Ja=Fa(function(){function q(w,h){if(!w)throw Error(h||\"Assertion failed\");}q.P=function(){};return q}),La=Fa(function(){var q={};Ha();var w=Ja(),h=Ka();q.assert=w;q.H=h.H;q.Fb=h.Fb;q.Bb=h.Bb;q.encode=h.encode;q.Fc=function(l,m,x){x=Array(Math.max(l.U(),x)+1);x.fill(0);m=1<<m+1;l=l.clone();for(var d=0;d<x.length;d++){var u,\ne=l.T(m-1);l.Y()?(e>(m>>1)-1?u=(m>>1)-e:u=e,l.Ca(u)):u=0;x[d]=u;l.j(1)}return x};q.Ec=function(l,m){var x=[[],[]];l=l.clone();m=m.clone();for(var d=0,u=0;0<l.m(-d)||0<m.m(-u);){var e=l.T(3)+d&3,n=m.T(3)+u&3;3===e&&(e=-1);3===n&&(n=-1);if(0===(e&1))var v=0;else{var r=l.T(7)+d&7;v=3!==r&&5!==r||2!==n?e:-e}x[0].push(v);0===(n&1)?e=0:(r=m.T(7)+u&7,e=3!==r&&5!==r||2!==e?n:-n);x[1].push(e);2*d===v+1&&(d=1-d);2*u===e+1&&(u=1-u);l.j(1);m.j(1)}return x};q.Nd=function(){};q.Ed=function(){};return q}),Ma=Fa(function(){var q=\n{},w=Ja(),h=Ga();q.Jc=h;q.H=function(l,m){if(Array.isArray(l))return l.slice();if(!l)return[];var x=[];if(\"string\"===typeof l)if(!m)for(var d=m=0;d<l.length;d++){var u=l.charCodeAt(d);128>u?x[m++]=u:(2048>u?x[m++]=u>>6|192:(x[m++]=u>>12|224,x[m++]=u>>6&63|128),x[m++]=u&63|128)}else{if(\"hex\"===m)for(l=l.replace(/[^a-z0-9]+/ig,\"\"),0!==l.length%2&&(l=\"0\"+l),d=0;d<l.length;d+=2)x.push(parseInt(l[d]+l[d+1],16))}else for(d=0;d<l.length;d++)x[d]=l[d]|0;return x};q.Lc=function(l,m,x){m-=0;w(0===m%4);m=Array(m/\n4);for(var d=0,u=0;d<m.length;d++,u+=4)m[d]=(\"big\"===x?l[u]<<24|l[u+1]<<16|l[u+2]<<8|l[u+3]:l[u+3]<<24|l[u+2]<<16|l[u+1]<<8|l[u])>>>0;return m};q.ad=function(l){for(var m=Array(4*l.length),x=0,d=0;x<l.length;x++,d+=4){var u=l[x];m[d]=u>>>24;m[d+1]=u>>>16&255;m[d+2]=u>>>8&255;m[d+3]=u&255}return m};q.Vc=function(l,m){return l>>>m|l<<32-m};q.cd=function(l,m){return l+m>>>0};q.dd=function(l,m,x,d){return l+m+x+d>>>0};q.ed=function(l,m,x,d,u){return l+m+x+d+u>>>0};return q}),Na=Fa(function(){function q(h,\nl){return l.length===2*h+2?l:q(h,\"0x0\"+l.slice(2))}var w={};return w={length:function(h){return(h.length-2)/2},flatten:function(h){return\"0x\"+h.reduce(function(l,m){return l+m.slice(2)},\"\")},slice:function(h,l,m){return\"0x\"+m.slice(2*h+2,2*l+2)},tb:q,xc:function(h){h=h.toString(16);return 0===h.length%2?\"0x\"+h:\"0x0\"+h},jd:function(h){return parseInt(h.slice(2),16)},pb:function(h){return\"0x0\"===h?\"0x\":0===h.length%2?h:\"0x0\"+h.slice(2)},Qd:function(h){return\"0\"===h[2]?\"0x\"+h.slice(3):h}}}),Oa=Fa(function(){function q(){this.pending=\nnull;this.Ya=0;this.X=this.constructor.X;this.va=this.constructor.va;this.Ma=this.constructor.Ma;this.ia=this.constructor.ia/8;this.nb=\"big\";this.Ha=this.X/8;this.Lb=this.X/32}var w={},h=Ma(),l=Ja();w.Hb=q;q.prototype.update=function(m,x){m=h.H(m,x);this.pending?this.pending=this.pending.concat(m):this.pending=m;this.Ya+=m.length;if(this.pending.length>=this.Ha)for(m=this.pending,x=m.length%this.Ha,this.pending=m.slice(m.length-x,m.length),0===this.pending.length&&(this.pending=null),m=h.Lc(m,m.length-\nx,this.nb),x=0;x<m.length;x+=this.Lb)this.ra(m,x);return this};q.prototype.digest=function(m){this.update(this.ac());l(null===this.pending);return this.Mb(m)};q.prototype.ac=function(){var m=this.Ya,x=this.Ha,d=x-(m+this.ia)%x;x=Array(d+this.ia);x[0]=128;for(var u=1;u<d;u++)x[u]=0;m<<=3;if(\"big\"===this.nb){for(d=8;d<this.ia;d++)x[u++]=0;x[u++]=0;x[u++]=0;x[u++]=0;x[u++]=0;x[u++]=m>>>24&255;x[u++]=m>>>16&255;x[u++]=m>>>8&255;x[u++]=m&255}else for(x[u++]=m&255,x[u++]=m>>>8&255,x[u++]=m>>>16&255,x[u++]=\nm>>>24&255,x[u++]=0,x[u++]=0,x[u++]=0,x[u++]=0,d=8;d<this.ia;d++)x[u++]=0;return x};return w}),Pa=Fa(function(){function q(d){var u;for(u=0;48>u;u+=2){var e=d[0]^d[10]^d[20]^d[30]^d[40];var n=d[1]^d[11]^d[21]^d[31]^d[41];var v=d[2]^d[12]^d[22]^d[32]^d[42];var r=d[3]^d[13]^d[23]^d[33]^d[43];var c=d[4]^d[14]^d[24]^d[34]^d[44];var z=d[5]^d[15]^d[25]^d[35]^d[45];var a=d[6]^d[16]^d[26]^d[36]^d[46];var b=d[7]^d[17]^d[27]^d[37]^d[47];var g=d[8]^d[18]^d[28]^d[38]^d[48];var f=d[9]^d[19]^d[29]^d[39]^d[49];\nvar k=g^(v<<1|r>>>31);var t=f^(r<<1|v>>>31);d[0]^=k;d[1]^=t;d[10]^=k;d[11]^=t;d[20]^=k;d[21]^=t;d[30]^=k;d[31]^=t;d[40]^=k;d[41]^=t;k=e^(c<<1|z>>>31);t=n^(z<<1|c>>>31);d[2]^=k;d[3]^=t;d[12]^=k;d[13]^=t;d[22]^=k;d[23]^=t;d[32]^=k;d[33]^=t;d[42]^=k;d[43]^=t;k=v^(a<<1|b>>>31);t=r^(b<<1|a>>>31);d[4]^=k;d[5]^=t;d[14]^=k;d[15]^=t;d[24]^=k;d[25]^=t;d[34]^=k;d[35]^=t;d[44]^=k;d[45]^=t;k=c^(g<<1|f>>>31);t=z^(f<<1|g>>>31);d[6]^=k;d[7]^=t;d[16]^=k;d[17]^=t;d[26]^=k;d[27]^=t;d[36]^=k;d[37]^=t;d[46]^=k;d[47]^=\nt;k=a^(e<<1|n>>>31);t=b^(n<<1|e>>>31);d[8]^=k;d[9]^=t;d[18]^=k;d[19]^=t;d[28]^=k;d[29]^=t;d[38]^=k;d[39]^=t;d[48]^=k;d[49]^=t;k=d[0];t=d[1];var y=d[11]<<4|d[10]>>>28;var A=d[10]<<4|d[11]>>>28;var C=d[20]<<3|d[21]>>>29;var B=d[21]<<3|d[20]>>>29;var D=d[31]<<9|d[30]>>>23;var K=d[30]<<9|d[31]>>>23;var E=d[40]<<18|d[41]>>>14;var T=d[41]<<18|d[40]>>>14;var F=d[2]<<1|d[3]>>>31;var X=d[3]<<1|d[2]>>>31;e=d[13]<<12|d[12]>>>20;n=d[12]<<12|d[13]>>>20;var G=d[22]<<10|d[23]>>>22;var Y=d[23]<<10|d[22]>>>22;var H=\nd[33]<<13|d[32]>>>19;var Z=d[32]<<13|d[33]>>>19;var I=d[42]<<2|d[43]>>>30;var aa=d[43]<<2|d[42]>>>30;var J=d[5]<<30|d[4]>>>2;var ba=d[4]<<30|d[5]>>>2;var U=d[14]<<6|d[15]>>>26;var V=d[15]<<6|d[14]>>>26;v=d[25]<<11|d[24]>>>21;r=d[24]<<11|d[25]>>>21;var L=d[34]<<15|d[35]>>>17;var ca=d[35]<<15|d[34]>>>17;var da=d[45]<<29|d[44]>>>3;var M=d[44]<<29|d[45]>>>3;g=d[6]<<28|d[7]>>>4;f=d[7]<<28|d[6]>>>4;var ea=d[17]<<23|d[16]>>>9;var N=d[16]<<23|d[17]>>>9;var fa=d[26]<<25|d[27]>>>7;var O=d[27]<<25|d[26]>>>7;\nc=d[36]<<21|d[37]>>>11;z=d[37]<<21|d[36]>>>11;var ha=d[47]<<24|d[46]>>>8;var P=d[46]<<24|d[47]>>>8;var ia=d[8]<<27|d[9]>>>5;var Q=d[9]<<27|d[8]>>>5;var ja=d[18]<<20|d[19]>>>12;var R=d[19]<<20|d[18]>>>12;var ka=d[29]<<7|d[28]>>>25;var S=d[28]<<7|d[29]>>>25;var la=d[38]<<8|d[39]>>>24;var W=d[39]<<8|d[38]>>>24;a=d[48]<<14|d[49]>>>18;b=d[49]<<14|d[48]>>>18;d[0]=k^~e&v;d[1]=t^~n&r;d[10]=g^~ja&C;d[11]=f^~R&B;d[20]=F^~U&fa;d[21]=X^~V&O;d[30]=ia^~y&G;d[31]=Q^~A&Y;d[40]=J^~ea&ka;d[41]=ba^~N&S;d[2]=e^~v&c;\nd[3]=n^~r&z;d[12]=ja^~C&H;d[13]=R^~B&Z;d[22]=U^~fa&la;d[23]=V^~O&W;d[32]=y^~G&L;d[33]=A^~Y&ca;d[42]=ea^~ka&D;d[43]=N^~S&K;d[4]=v^~c&a;d[5]=r^~z&b;d[14]=C^~H&da;d[15]=B^~Z&M;d[24]=fa^~la&E;d[25]=O^~W&T;d[34]=G^~L&ha;d[35]=Y^~ca&P;d[44]=ka^~D&I;d[45]=S^~K&aa;d[6]=c^~a&k;d[7]=z^~b&t;d[16]=H^~da&g;d[17]=Z^~M&f;d[26]=la^~E&F;d[27]=W^~T&X;d[36]=L^~ha&ia;d[37]=ca^~P&Q;d[46]=D^~I&J;d[47]=K^~aa&ba;d[8]=a^~k&e;d[9]=b^~t&n;d[18]=da^~g&ja;d[19]=M^~f&R;d[28]=E^~F&U;d[29]=T^~X&V;d[38]=ha^~ia&y;d[39]=P^~Q&A;d[48]=\nI^~J&ea;d[49]=aa^~ba&N;d[0]^=x[u];d[1]^=x[u+1]}}var w={},h=\"0123456789abcdef\".split(\"\"),l=[1,256,65536,16777216],m=[0,8,16,24],x=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648];return w={rb:function(d){return function(u,\ne){var n,v;if(\"0x\"!==u.slice(0,2)||(void 0===e?0:e))var r=u;else for(r=[],e=2,v=u.length;e<v;e+=2)r.push(parseInt(u.slice(e,e+2),16));v=[0,0,0,0,0,0,0,0,0,0];var c=!0;var z=n=0;u=1600-(d<<1)>>5;e=d>>5;v=v.concat(v,v,v,v);var a=void 0;for(var b=r,g=b.length,f=[],k=u<<2,t=0;t<g;){if(c)for(c=!1,f[0]=n,r=1;r<u+1;++r)f[r]=0;if(\"string\"!==typeof b)for(r=z;t<g&&r<k;++t)f[r>>2]|=b[t]<<m[r++&3];else for(r=z;t<g&&r<k;++t)z=b.charCodeAt(t),128>z?f[r>>2]|=z<<m[r++&3]:(2048>z?f[r>>2]|=(192|z>>6)<<m[r++&3]:(55296>\nz||57344<=z?f[r>>2]|=(224|z>>12)<<m[r++&3]:(z=65536+((z&1023)<<10|b.charCodeAt(++t)&1023),f[r>>2]|=(240|z>>18)<<m[r++&3],f[r>>2]|=(128|z>>12&63)<<m[r++&3]),f[r>>2]|=(128|z>>6&63)<<m[r++&3]),f[r>>2]|=(128|z&63)<<m[r++&3]);a=r;if(r>=k){z=r-k;n=f[u];for(r=0;r<u;++r)v[r]^=f[r];q(v);c=!0}else z=r}r=a;f[r>>2]|=l[r&3];if(a===k)for(f[0]=f[u],r=1;r<u+1;++r)f[r]=0;f[u-1]|=2147483648;for(r=0;r<u;++r)v[r]^=f[r];q(v);c=\"\";for(n=0;n<e;){for(r=0;r<u&&n<e;++r,++n)z=v[r],c+=h[z>>4&15]+h[z&15]+h[z>>12&15]+h[z>>8&15]+\nh[z>>20&15]+h[z>>16&15]+h[z>>28&15]+h[z>>24&15];0===n%u&&q(v)}return\"0x\"+c}}(256)}}),Sa=Fa(function(){var q={};q.md=La();q.yd=Qa();q.sa=Ra();return q}),Ta=Fa(function(){function q(u,e){this.type=u;this.p=new h(e.p,16);this.red=e.ja?h.red(e.ja):h.Hd(this.p);this.od=(new h(0)).A(this.red);this.Ea=(new h(1)).A(this.red);this.kd=(new h(2)).A(this.red);this.n=e.n&&new h(e.n,16);this.v=e.v&&this.Qc(e.v,e.Cc);this.dc=Array(4);this.ec=Array(4);this.fc=Array(4);this.hc=Array(4);this.Ga=this.n?this.n.U():0;\nu=this.n&&this.p.u(this.n);!u||0<u.m(100)||this.n.A(this.red)}function w(u,e){this.curve=u;this.type=e;this.D=null}var h=Ha(),l=La(),m=l.Fc,x=l.Ec,d=l.assert;q.prototype.Sb=function(u,e){d(u.D);u=u.ib();var n=m(e,1,this.Ga),v=(1<<u.step+1)-(0===u.step%2?2:1);v/=3;for(var r=[],c=0;c<n.length;c+=u.step){for(var z=0,a=c+u.step-1;e>=c;e--)z=(z<<1)+n[a];r.push(z)}e=this.O(null,null,null);for(n=this.O(null,null,null);0<v;v--){for(c=0;c<r.length;c++)z=r[c],z===v?n=n.ca(u.C[c]):z===-v&&(n=n.ca(u.C[c].l()));\ne=e.add(n)}return e.Cb()};q.prototype.lb=function(u,e,n,v){for(var r=this.dc,c=this.ec,z=this.fc,a=0,b=0;b<n;b++){var g=u[b],f=g.jb(1);r[b]=f.da;c[b]=f.C}for(b=n-1;1<=b;b-=2){var k=b-1,t=b;if(1!==r[k]||1!==r[t])z[k]=m(e[k],r[k],this.Ga),z[t]=m(e[t],r[t],this.Ga),a=Math.max(z[k].length,a),a=Math.max(z[t].length,a);else{var y=[u[k],null,null,u[t]];0===u[k].y.cmp(u[t].y)?(y[1]=u[k].add(u[t]),y[2]=u[k].xa().ca(u[t].l())):0===u[k].y.cmp(u[t].y.la())?(y[1]=u[k].xa().ca(u[t]),y[2]=u[k].add(u[t].l())):(y[1]=\nu[k].xa().ca(u[t]),y[2]=u[k].xa().ca(u[t].l()));var A=[-3,-1,-5,-7,0,7,5,1,3],C=x(e[k],e[t]);a=Math.max(C[0].length,a);z[k]=Array(a);z[t]=Array(a);for(f=0;f<a;f++)z[k][f]=A[3*((C[0][f]|0)+1)+((C[1][f]|0)+1)],z[t][f]=0,c[k]=y}}u=this.O(null,null,null);e=this.hc;for(b=a;0<=b;b--){for(a=0;0<=b;){r=!0;for(f=0;f<n;f++)e[f]=z[f][b]|0,0!==e[f]&&(r=!1);if(!r)break;a++;b--}0<=b&&a++;u=u.rc(a);if(0>b)break;for(f=0;f<n;f++)a=e[f],0!==a&&(0<a?g=c[f][a-1>>1]:0>a&&(g=c[f][-a-1>>1].l()),u=\"affine\"===g.type?u.ca(g):\nu.add(g))}for(b=0;b<n;b++)c[b]=null;return v?u:u.Cb()};q.ya=w;w.prototype.cb=function(){return this.curve.cb(this)};w.prototype.Nb=function(u){var e=this.curve.p.byteLength(),n=this.qb().H(\"be\",e);return u?[this.La().Ra()?2:3].concat(n):[4].concat(n,this.La().H(\"be\",e))};w.prototype.encode=function(u,e){return l.encode(this.Nb(e),u)};w.prototype.Rc=function(u){if(!this.D){var e={F:null,K:null,beta:null};e.K=this.jb(8);e.F=this.ib(4,u);e.beta=this.hb();this.D=e}};w.prototype.Vb=function(u){if(!this.D)return!1;\nvar e=this.D.F;return e?e.C.length>=Math.ceil((u.U()+1)/e.step):!1};w.prototype.ib=function(u,e){if(this.D&&this.D.F)return this.D.F;for(var n=[this],v=this,r=0;r<e;r+=u){for(var c=0;c<u;c++)v=v.ba();n.push(v)}return{step:u,C:n}};w.prototype.jb=function(u){if(this.D&&this.D.K)return this.D.K;for(var e=[this],n=(1<<u)-1,v=1===n?null:this.ba(),r=1;r<n;r++)e[r]=e[r-1].add(v);return{da:u,C:e}};return q}),Qa=Fa(function(){function q(m){this.curve=new (Ua())(m);this.v=this.curve.v;this.n=this.curve.n;this.hash=\nm.hash;l(this.v.cb(),\"Invalid curve\");l(this.v.o(this.n).R(),\"Invalid curve, G*N != O\")}var w={},h=Va(),l=La().assert;w.Jb=q;(function(m,x){Object.defineProperty(w,m,{configurable:!0,enumerable:!0,get:function(){var d=new q(x);Object.defineProperty(w,m,{configurable:!0,enumerable:!0,value:d});return d}})})(\"secp256k1\",{type:\"short\",ja:\"k256\",p:\"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",I:\"0\",M:\"7\",n:\"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\ng:\"1\",hash:h.$a,beta:\"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",Va:\"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",Aa:[{I:\"3086d221a7d46bcde86c90e49284eb15\",M:\"-e4437ed6010e88286f547fa90abfe4c3\"},{I:\"114ca50f7a8e2f3f657c1108d9d44cfd8\",M:\"3086d221a7d46bcde86c90e49284eb15\"}],Cc:!1,v:[\"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",{}]});return w}),Va=Fa(function(){var q={};\nq.md=Ma();q.xd=Oa();q.Yc={$a:Wa()};q.Hc=Xa();q.$a=q.Yc.$a;return q}),Ka=Fa(function(){function q(l){return 1===l.length?\"0\"+l:l}function w(l){for(var m=\"\",x=0;x<l.length;x++)m+=q(l[x].toString(16));return m}var h={H:function(l,m){if(Array.isArray(l))return l.slice();if(!l)return[];var x=[];if(\"string\"!==typeof l){for(m=0;m<l.length;m++)x[m]=l[m]|0;return x}if(\"hex\"===m)for(l=l.replace(/[^a-z0-9]+/ig,\"\"),0!==l.length%2&&(l=\"0\"+l),m=0;m<l.length;m+=2)x.push(parseInt(l[m]+l[m+1],16));else for(m=0;m<\nl.length;m++){var d=l.charCodeAt(m),u=d>>8;d&=255;u?x.push(u,d):x.push(d)}return x}};h.Fb=q;h.Bb=w;h.encode=function(l,m){return\"hex\"===m?w(l):l};return h}),Ya=Fa(function(){var q={},w=Ma().Vc;q.Ad=function(){};q.nc=function(h,l,m){return h&l^~h&m};q.Mc=function(h,l,m){return h&l^h&m^l&m};q.Md=function(){};q.Wc=function(h){return w(h,2)^w(h,13)^w(h,22)};q.Xc=function(h){return w(h,6)^w(h,11)^w(h,25)};q.Ac=function(h){return w(h,7)^w(h,18)^h>>>3};q.Bc=function(h){return w(h,17)^w(h,19)^h>>>10};return q}),\nWa=Fa(function(){function q(){if(!(this instanceof q))return new q;a.call(this);this.g=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];this.k=b;this.Kb=Array(64)}var w=Ma(),h=Oa(),l=Ya(),m=Ja(),x=w.cd,d=w.dd,u=w.ed,e=l.nc,n=l.Mc,v=l.Wc,r=l.Xc,c=l.Ac,z=l.Bc,a=h.Hb,b=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,\n264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];w.Jc(q,\na);q.X=512;q.va=256;q.Ma=192;q.ia=64;q.prototype.ra=function(g,f){for(var k=this.Kb,t=0;16>t;t++)k[t]=g[f+t];for(;t<k.length;t++)k[t]=d(z(k[t-2]),k[t-7],c(k[t-15]),k[t-16]);g=this.g[0];f=this.g[1];var y=this.g[2],A=this.g[3],C=this.g[4],B=this.g[5],D=this.g[6],K=this.g[7];m(this.k.length===k.length);for(t=0;t<k.length;t++){var E=u(K,r(C),e(C,B,D),this.k[t],k[t]),T=x(v(g),n(g,f,y));K=D;D=B;B=C;C=x(A,E);A=y;y=f;f=g;g=x(E,T)}this.g[0]=x(this.g[0],g);this.g[1]=x(this.g[1],f);this.g[2]=x(this.g[2],y);\nthis.g[3]=x(this.g[3],A);this.g[4]=x(this.g[4],C);this.g[5]=x(this.g[5],B);this.g[6]=x(this.g[6],D);this.g[7]=x(this.g[7],K)};q.prototype.Mb=function(g){return\"hex\"===g?w.Pd(this.g,\"big\"):w.ad(this.g)};return q}),Ua=Fa(function(){function q(e){d.call(this,\"short\",e);this.I=(new m(e.I,16)).A(this.red);this.M=(new m(e.M,16)).A(this.red);this.gd=this.kd.Za();this.eb=0===this.I.ta().m(0);this.zb=0===this.I.ta().sub(this.p).m(-3);this.ha=this.Ub(e);this.Pb=Array(4);this.Qb=Array(4)}function w(e,n,v,r){d.ya.call(this,\ne,\"affine\");null===n&&null===v?(this.y=this.x=null,this.V=!0):(this.x=new m(n,16),this.y=new m(v,16),r&&(this.x.wc(this.curve.red),this.y.wc(this.curve.red)),this.x.red||(this.x=this.x.A(this.curve.red)),this.y.red||(this.y=this.y.A(this.curve.red)),this.V=!1)}function h(e,n,v,r){d.ya.call(this,e,\"jacobian\");null===n&&null===v&&null===r?(this.y=this.x=this.curve.Ea,this.z=new m(0)):(this.x=new m(n,16),this.y=new m(v,16),this.z=new m(r,16));this.x.red||(this.x=this.x.A(this.curve.red));this.y.red||\n(this.y=this.y.A(this.curve.red));this.z.red||(this.z=this.z.A(this.curve.red));this.nd=this.z===this.curve.Ea}var l={};l=La();var m=Ha(),x=Ga(),d=Ta(),u=l.assert;x(q,d);l=q;q.prototype.Ub=function(e){if(this.eb&&this.v&&this.n&&1===this.p.Da(3)){if(e.beta)var n=(new m(e.beta,16)).A(this.red);else n=this.Tb(this.p),n=0>n[0].cmp(n[1])?n[0]:n[1],n=n.A(this.red);if(e.Va)var v=new m(e.Va,16);else v=this.Tb(this.n),0===this.v.o(v[0]).x.cmp(this.v.x.c(n))?v=v[0]:(v=v[1],u(0===this.v.o(v).x.cmp(this.v.x.c(n))));\nvar r;e.Aa?r=e.Aa.map(function(c){return{I:new m(c.I,16),M:new m(c.M,16)}}):r=this.rd(v);return{beta:n,Va:v,Aa:r}}};q.prototype.Ob=function(e){var n=this.ha.Aa,v=n[0],r=n[1],c=r.M.o(e).mb(this.n),z=v.M.l().o(e).mb(this.n);n=c.o(v.I);var a=z.o(r.I);v=c.o(v.M);r=z.o(r.M);e=e.sub(n).sub(a);n=v.add(r).l();return{Sa:e,Ta:n}};q.prototype.wb=function(e,n){e=new m(e,16);e.red||(e=e.A(this.red));var v=e.f().c(e).s(e.c(this.I)).s(this.M),r=v.Uc();if(0!==r.f().aa(v).cmp(this.od))throw Error(\"invalid point\");\nv=r.ta().Y();if(n&&!v||!n&&v)r=r.la();return this.W(e,r)};q.prototype.cb=function(e){if(e.V)return!0;var n=e.x;e=e.y;var v=this.I.c(n);n=n.f().c(n).s(v).s(this.M);return 0===e.f().h(n).m(0)};q.prototype.gb=function(e,n){for(var v=this.Pb,r=this.Qb,c=0;c<e.length;c++){var z=this.Ob(n[c]),a=e[c],b=a.hb();z.Sa.b&&(z.Sa.Pa(),a=a.l(!0));z.Ta.b&&(z.Ta.Pa(),b=b.l(!0));v[2*c]=a;v[2*c+1]=b;r[2*c]=z.Sa;r[2*c+1]=z.Ta}e=this.lb(v,r,2*c,void 0);for(n=0;n<2*c;n++)v[n]=null,r[n]=null;return e};x(w,d.ya);q.prototype.W=\nfunction(e,n,v){return new w(this,e,n,v)};q.prototype.Qc=function(e,n){return w.P(this,e,n)};w.prototype.hb=function(){if(this.curve.ha){var e=this.D;if(e&&e.beta)return e.beta;var n=this.curve.W(this.x.c(this.curve.ha.beta),this.y);if(e){var v=this.curve,r=function(c){return v.W(c.x.c(v.ha.beta),c.y)};e.beta=n;n.D={beta:null,K:e.K&&{da:e.K.da,C:e.K.C.map(r)},F:e.F&&{step:e.F.step,C:e.F.C.map(r)}}}return n}};w.prototype.toJSON=function(){};w.P=function(e,n,v){function r(z){return e.W(z[0],z[1],v)}\n\"string\"===typeof n&&(n=JSON.parse(n));var c=e.W(n[0],n[1],v);if(!n[2])return c;n=n[2];c.D={beta:null,F:n.F&&{step:n.F.step,C:[c].concat(n.F.C.map(r))},K:n.K&&{da:n.K.da,C:[c].concat(n.K.C.map(r))}};return c};w.prototype.R=function(){return this.V};w.prototype.add=function(e){if(this.V)return e;if(e.V)return this;if(this.ob(e))return this.ba();if(this.l().ob(e)||0===this.x.cmp(e.x))return this.curve.W(null,null);var n=this.y.aa(e.y);0!==n.m(0)&&(n=n.c(this.x.aa(e.x).Za()));e=n.f().h(this.x).h(e.x);\nn=n.c(this.x.aa(e)).h(this.y);return this.curve.W(e,n)};w.prototype.qb=function(){return this.x.ta()};w.prototype.La=function(){return this.y.ta()};w.prototype.o=function(e){e=new m(e,16);return this.R()?this:this.Vb(e)?this.curve.Sb(this,e):this.curve.ha?this.curve.gb([this],[e]):this.curve.vd(this,e)};w.prototype.Nc=function(e,n,v){n=[this,n];e=[e,v];return this.curve.ha?this.curve.gb(n,e):this.curve.lb(n,e,2)};w.prototype.ob=function(e){return this===e||this.V===e.V&&(this.V||0===this.x.cmp(e.x)&&\n0===this.y.cmp(e.y))};w.prototype.l=function(e){if(this.V)return this;var n=this.curve.W(this.x,this.y.la());if(e&&this.D){e=this.D;var v=function(r){return r.l()};n.D={K:e.K&&{da:e.K.da,C:e.K.C.map(v)},F:e.F&&{step:e.F.step,C:e.F.C.map(v)}}}return n};w.prototype.xa=function(){return this.V?this.curve.O(null,null,null):this.curve.O(this.x,this.y,this.curve.Ea)};x(h,d.ya);q.prototype.O=function(e,n,v){return new h(this,e,n,v)};h.prototype.Cb=function(){if(this.R())return this.curve.W(null,null);var e=\nthis.z.Za(),n=e.f(),v=this.x.c(n);e=this.y.c(n).c(e);return this.curve.W(v,e)};h.prototype.l=function(){return this.curve.O(this.x,this.y.la(),this.z)};h.prototype.add=function(e){if(this.R())return e;if(e.R())return this;var n=e.z.f(),v=this.z.f(),r=this.x.c(n),c=e.x.c(v);n=this.y.c(n.c(e.z));v=e.y.c(v.c(this.z));c=r.aa(c);v=n.aa(v);if(0===c.m(0))return 0!==v.m(0)?this.curve.O(null,null,null):this.ba();var z=c.f(),a=z.c(c);z=r.c(z);r=v.f().s(a).h(z).h(z);n=v.c(z.h(r)).h(n.c(a));e=this.z.c(e.z).c(c);\nreturn this.curve.O(r,n,e)};h.prototype.ca=function(e){if(this.R())return e.xa();if(e.R())return this;var n=this.z.f(),v=this.x,r=e.x.c(n),c=this.y;e=e.y.c(n).c(this.z);r=v.aa(r);e=c.aa(e);if(0===r.m(0))return 0!==e.m(0)?this.curve.O(null,null,null):this.ba();var z=r.f();n=z.c(r);z=v.c(z);v=e.f().s(n).h(z).h(z);c=e.c(z.h(v)).h(c.c(n));r=this.z.c(r);return this.curve.O(v,c,r)};h.prototype.rc=function(e){if(0===e||this.R())return this;if(!e)return this.ba();if(this.curve.eb||this.curve.zb){for(var n=\nthis,v=0;v<e;v++)n=n.ba();return n}n=this.curve.I;var r=this.curve.gd,c=this.x;v=this.y;var z=this.z,a=z.f().f(),b=v.$(v);for(v=0;v<e;v++){var g=c.f(),f=b.f(),k=f.f();g=g.$(g).s(g).s(n.c(a));f=c.c(f);c=g.f().h(f.$(f));f=f.h(c);g=g.c(f);g=g.s(g).h(k);z=b.c(z);v+1<e&&(a=a.c(k));b=g}return this.curve.O(c,b.c(r),z)};h.prototype.ba=function(){return this.R()?this:this.curve.eb?this.jc():this.curve.zb?this.ud():this.qd()};h.prototype.jc=function(){if(this.nd){var e=this.x.f();var n=this.y.f();var v=n.f();\nn=this.x.$(n).f().h(e).h(v);n=n.s(n);e=e.$(e).s(e);var r=e.f().h(n).h(n),c=v.s(v);c=c.s(c);c=c.s(c);v=r;n=e.c(n.h(r)).h(c);e=this.y.$(this.y)}else e=this.x.f(),n=this.y.f(),v=n.f(),n=this.x.$(n).f().h(e).h(v),n=n.s(n),e=e.$(e).s(e),r=e.f(),c=v.s(v),c=c.s(c),c=c.s(c),v=r.h(n).h(n),n=e.c(n.h(v)).h(c),e=this.y.c(this.z),e=e.s(e);return this.curve.O(v,n,e)};h.prototype.R=function(){return 0===this.z.m(0)};return l}),Xa=Fa(function(){function q(l,m,x){if(!(this instanceof q))return new q(l,m,x);this.Fa=\nl;this.X=l.X/8;this.va=l.va/8;this.Xa=this.Qa=null;this.pa(w.H(m,x))}var w=Ma(),h=Ja();q.prototype.pa=function(l){l.length>this.X&&(l=(new this.Fa).update(l).digest());h(l.length<=this.X);for(var m=l.length;m<this.X;m++)l.push(0);for(m=0;m<l.length;m++)l[m]^=54;this.Qa=(new this.Fa).update(l);for(m=0;m<l.length;m++)l[m]^=106;this.Xa=(new this.Fa).update(l)};q.prototype.update=function(l,m){this.Qa.update(l,m);return this};q.prototype.digest=function(l){this.Xa.update(this.Qa.digest());return this.Xa.digest(l)};\nreturn q}),Ra=Fa(function(){function q(e){if(!(this instanceof q))return new q(e);\"string\"===typeof e&&(x(m.hasOwnProperty(e),\"Unknown curve \"+e),e=m[e]);e instanceof m.Jb&&(e={curve:e});this.curve=e.curve.curve;this.n=this.curve.n;this.Pc=this.n.ab(1);this.v=this.curve.v;this.v=e.curve.v;this.v.Rc(e.curve.n.U()+1);this.hash=e.hash||e.curve.hash}var w=Ha(),h=Za(),l=La(),m=Qa(),x=l.assert,d=$a(),u=ab();q.prototype.Ua=function(e,n){return d.yc(this,e,n)};q.prototype.kb=function(e,n){var v=8*e.byteLength()-\nthis.n.U();0<v&&(e=e.ab(v));return!n&&0<=e.cmp(this.n)?e.sub(this.n):e};q.prototype.sign=function(e,n,v,r){\"object\"===typeof v&&(r=v,v=null);r||(r={});n=this.Ua(n,v);e=this.kb(new w(e,16));var c=this.n.byteLength();v=n.Z.H(\"be\",c);c=e.H(\"be\",c);c=new h({hash:this.hash,uc:v,nonce:c,ub:r.ub,vb:r.vb||\"utf8\"});for(var z=this.n.sub(new w(1)),a=0;;a++){var b=r.k?r.k(a):new w(c.Dc(this.n.byteLength()));b=this.kb(b,!0);if(!(0>=b.m(1)||0<=b.cmp(z))){var g=this.v.o(b);if(!g.R()){var f=g.qb();v=f.S(this.n);\nif(0!==v.m(0)&&(b=b.Ba(this.n).o(v.o(n.Z).B(e)),b=b.S(this.n),0!==b.m(0)))return e=(g.La().Y()?1:0)|(0!==f.cmp(v)?2:0),r.mc&&0<b.cmp(this.Pc)&&(b=this.n.sub(b),e^=1),new u({r:v,ma:b,wa:e})}}}};q.prototype.Tc=function(e,n,v){x((3&v)===v,\"The recovery param is more than two bits\");n=new u(n,void 0);var r=this.n,c=new w(e);e=n.r;var z=n.ma,a=v&1;v>>=1;if(0<=e.cmp(this.curve.p.S(this.curve.n))&&v)throw Error(\"Unable to find sencond key candinate\");e=v?this.curve.wb(e.add(this.curve.n),a):this.curve.wb(e,\na);n=n.r.Ba(r);c=r.sub(c).o(n).S(r);r=z.o(n).S(r);return this.v.Nc(c,e,r)};return q}),Za=Fa(function(){function q(m){if(!(this instanceof q))return new q(m);this.hash=m.hash;this.sb=this.hash.va;this.Wa=m.Wa||this.hash.Ma;this.N=this.na=this.xb=this.Ka=null;var x=h.H(m.uc,m.zd||\"hex\"),d=h.H(m.nonce,m.Id||\"hex\");m=h.H(m.ub,m.vb||\"hex\");l(x.length>=this.Wa/8,\"Not enough entropy. Minimum is: \"+this.Wa+\" bits\");this.pa(x,d,m)}var w=Va(),h=Ka(),l=Ja();q.prototype.pa=function(m,x,d){m=m.concat(x).concat(d);\nthis.na=Array(this.sb/8);this.N=Array(this.sb/8);for(x=0;x<this.N.length;x++)this.na[x]=0,this.N[x]=1;this.ra(m);this.Ka=1;this.xb=281474976710656};q.prototype.oa=function(){return new w.Hc(this.hash,this.na)};q.prototype.ra=function(m){var x=this.oa().update(this.N).update([0]);m&&(x=x.update(m));this.na=x.digest();this.N=this.oa().update(this.N).digest();m&&(this.na=this.oa().update(this.N).update([1]).update(m).digest(),this.N=this.oa().update(this.N).digest())};q.prototype.Dc=function(m){if(this.Ka>\nthis.xb)throw Error(\"Reseed is required\");if(\"string\"!==typeof u){var x=d;var d=u;var u=null}d&&(d=h.H(d,x||\"hex\"),this.ra(d));for(x=[];x.length<m;)this.N=this.oa().update(this.N).digest(),x=x.concat(this.N);m=x.slice(0,m);this.ra(d);this.Ka++;return h.encode(m,u)};return q}),$a=Fa(function(){function q(h,l){this.sa=h;this.ka=this.Z=null;l.Z&&this.Xb(l.Z,l.Sc);l.ka&&this.sd(l.ka,l.Od)}var w=Ha();La();q.yc=function(h,l,m){return l instanceof q?l:new q(h,{Z:l,Sc:m})};q.prototype.Gc=function(){var h=\n!1,l=\"hex\";\"string\"===typeof h&&(l=h,h=null);this.ka||(this.ka=this.sa.v.o(this.Z));return l?this.ka.encode(l,h):this.ka};q.prototype.Xb=function(h,l){this.Z=new w(h,l||16);this.Z=this.Z.S(this.sa.curve.n)};q.prototype.sign=function(h,l,m){return this.sa.sign(h,this,l,m)};return q}),ab=Fa(function(){function q(l){if(l instanceof q)return l;h(l.r&&l.ma,\"Signature without r or s\");this.r=new w(l.r,16);this.ma=new w(l.ma,16);void 0===l.wa?this.wa=null:this.wa=l.wa}var w=Ha(),h=La().assert;return q}),\nbb=Fa(function(){var q={};(function(w){function h(e){for(var n=d(e.slice(2)),v=\"0x\",r=0;40>r;r++)v+=7<parseInt(n[r+2],16)?e[r+2].toUpperCase():e[r+2];return v}var l=Na(),m=Ha(),x=new (Sa().sa)(\"secp256k1\"),d=Pa().rb,u={zc:function(e){e=\"0x\"+(\"0x\"===e.slice(0,2)?new m(e.slice(2),16):new m(e,10)).toString(\"hex\");return\"0x0\"===e?\"0x\":e}};q={kc:h,lc:function(e){e=w.from(e.slice(2),\"hex\");e=\"0x\"+x.Ua(e).Gc().slice(2);e=d(e);return h(\"0x\"+e.slice(-40))},Zc:function(e,n,v){v=void 0===v?27:v;e=x.Ua(w.from(n.slice(2),\n\"hex\")).sign(w.from(e.slice(2),\"hex\"),{mc:!0});v=[u.zc(l.xc(v+e.wa)),l.tb(32,l.pb(\"0x\"+e.r.toString(16))),l.tb(32,l.pb(\"0x\"+e.ma.toString(16)))];n=(e=\"undefined\"!=typeof Symbol&&Symbol.iterator&&v[Symbol.iterator])?e.call(v):{next:oa(v)};v=n.next().value;e=n.next().value;n=n.next().value;return l.flatten([e,n,v])},$c:function(e,n){n=[l.slice(64,l.length(n),n),l.slice(0,32,n),l.slice(32,64,n)];n={bb:l.jd(n[0]),r:n[1].slice(2),ma:n[2].slice(2)};e=\"0x\"+x.Tc(w.from(e.slice(2),\"hex\"),n,2>n.bb?n.bb:1-n.bb%\n2).encode(\"hex\",!1).slice(2);e=d(e);return h(\"0x\"+e.slice(-40))}}}).call(ma,Ia().Ib);return q})();module.exports.addressChecksum=bb.kc;module.exports.addressFromKey=bb.lc;module.exports.signMessage=bb.Zc;module.exports.signerAddress=bb.$c;module.exports.keccak=Pa().rb;\n","const {Component, render} = require(\"inferno\");\nconst h = require(\"inferno-hyperscript\").h;\nconst apps = require(\"./apps/index.js\");\n\nmodule.exports = class AppList extends Component {\n  render() {\n    var list = Object.keys(apps).map(app => {\n      return h(\"div\", {}, [\n        h(\"span\", {}, \"- \"),\n        h(\"a\", {\n          style: {\n            \"text-decoration\": \"underline\",\n            \"cursor\": \"pointer\",\n          },\n          onClick: () => {\n            window.location = \"/\"+app;\n          },\n        }, app),\n      ]);\n    });\n    return h(\"pre\", {\n      style: {\n        \"padding\": \"6px\",\n        \"font-size\": \"16px\",\n        \"font-family\": \"monospace\",\n      }\n    }, [\n      h(\"div\", {}, [h(\"pre\", {}, [\"Select an application:\"])]),\n      list,\n    ]);\n  }\n}\n","const { Component, render } = require(\"inferno\");\nconst h = require(\"inferno-hyperscript\").h;\nconst apps = require(\"./apps/index.js\");\nconst sign = require(\"nano-ethereum-signer\");\nconst utils = require(\"./utils.js\");\nconst kind = require(\"kind-lang\");\n\nmodule.exports = class AppPlay extends Component {\n\n  // Sets up internal variables\n  constructor(props) {\n    super(props);\n\n    this.name = props.name; // name of this application\n    this.app = null; // application module, compiled from Kind\n    this.app_state = null; // the state of the application\n\n    this.intervals = {}; // timed intervals\n    this.listeners = {}; // event listeners\n    this.mouse_pos = { _: \"Pair.new\", fst: 0, snd: 0 };\n    this.rendered = null; // document rendered by app, coming from Kind\n    this.container = null; // container that holds rendered app\n    this.canvas = {}; // canvas that holds rendered pixel-art apps\n  }\n\n  // Initializes everything\n  async componentDidMount() {\n    await this.init_app();\n    await this.init_input_events();\n    await this.init_renderer();\n  }\n\n  // Clear up intervals and event listeners\n  async componentWillUnmount() {\n    for (var key in this.intervals) {\n      clearInterval(this.intervals[key]);\n    }\n    for (var key in this.listeners) {\n      document.body.removeEventListener(key, this.listeners[key]);\n    };\n  }\n\n  // Loads the application from Moonad, which was pre-compiled to JavaScript\n  async init_app() {\n    if (!this.app && apps[this.name]) {\n      //console.log(\"loading app...\");\n      this.app = (await apps[this.name])[this.name];\n      this.app_state = this.app.init;\n      //console.log(\"loaded: \", this.app);\n    }\n  }\n\n  // Initializes the input event listeners\n  async init_input_events() {\n    //this.events = []; // this application's events\n\n    // Init event\n    this.register_event({\n      _: \"App.Event.init\",\n      time: BigInt(0),\n      user: sign.addressFromKey(KEY).toLowerCase(),\n      info: {\n        _: \"App.EnvInfo.new\",\n        screen_size: {\n          _: \"Pair.new\",\n          fst: window.innerWidth, // this.container ? this.container.offsetWidth : 0,\n          snd: window.innerHeight // this.container ? this.container.offsetHeight : 0,\n        },\n        mouse_pos: this.mouse_pos,\n      }\n    });\n\n   // Mouse movement event\n    this.listeners.mousemove = (e) => {\n      this.mouse_pos = {_ : \"Pair.new\", fst: e.offsetX, snd : e.offsetY}\n    }\n\n    document.body.addEventListener(\"mousemove\", this.listeners.mousemove);\n\n    // Mouse down event\n    this.listeners.mousedown = (e) => {\n      this.register_event({\n        _: \"App.Event.mouse_down\",\n        time: BigInt(Date.now()),\n      });\n    };\n    document.body.addEventListener(\"mousedown\", this.listeners.mousedown);\n\n    this.listeners.mouseover = (e) => {\n      this.register_event({\n        _: \"App.Event.mouse_over\",\n        time: BigInt(Date.now()),\n        id: e.target.id\n      });\n    };\n    document.body.addEventListener(\"mouseover\", this.listeners.mouseover); \n\n    this.listeners.mouseover = (e) => {\n      this.register_event({\n        _: \"App.Event.mouse_out\",\n        time: BigInt(Date.now()),\n        id: e.target.id\n      });\n    };\n    document.body.addEventListener(\"mouseout\", this.listeners.mouseout);\n\n    this.listeners.click = (e) => {\n      this.register_event({\n        _: \"App.Event.mouse_click\",\n        time: BigInt(Date.now()),\n        id: e.target.id\n      });\n    };\n    document.body.addEventListener(\"click\", this.listeners.click); \n\n    // Mouse up event\n    this.listeners.mouseup = (e) => {\n      this.register_event({\n        _: \"App.Event.mouse_up\",\n        time: BigInt(Date.now()),\n      });\n    };\n    document.body.addEventListener(\"mouseup\", this.listeners.mouseup);\n\n    // Key down event\n    this.listeners.keydown = (e) => {\n      if (!e.repeat) {\n        this.register_event({\n          _: \"App.Event.key_down\",\n          time: BigInt(Date.now()),\n          code: e.keyCode,\n        });\n      }\n    };\n    document.body.addEventListener(\"keydown\", this.listeners.keydown);\n\n    // Key up event\n    this.listeners.keyup = (e) => {\n      this.register_event({\n        _: \"App.Event.key_up\",\n        time: BigInt(Date.now()),\n        code: e.keyCode,\n      });\n    };\n    document.body.addEventListener(\"keyup\", this.listeners.keyup);\n\n    // Resize event\n    // TODO: remove it\n    this.listeners.resize = (e) => {\n      this.register_event({\n        _: \"App.Event.resize\",\n        time: BigInt(Date.now()),\n        info: {\n          _: \"App.EnvInfo.new\",\n          screen_size: {\n            _: \"Pair.new\",\n            fst: e.target.innerWidth,\n            snd: e.target.innerHeight,\n          },\n          mouse_pos: this.mouse_pos,\n        }\n      });\n    };\n    window.addEventListener(\"resize\", this.listeners.resize);\n\n    this.listeners.submit = (e) => {\n      e.preventDefault(); // prevents page to reload on submit\n      this.register_event({\n        _: \"App.Event.onsubmit\",\n        time: BigInt(Date.now()),\n        value: event.target[0].value\n      });\n    };\n    document.body.addEventListener(\"submit\", this.listeners.submit);\n\n    //Tick event\n    this.intervals.tick = () => {\n      let time = performance.now()\n      let frame = 1000/16\n      let self = (mileseconds) => {\n        if (mileseconds-time > frame) {\n          this.register_event({\n            _: \"App.Event.tick\",\n            time: BigInt(Date.now()),\n            info: {\n              _: \"App.EnvInfo.new\",\n              screen_size: {\n                _: \"Pair.new\",\n                fst: this.container ? this.container.offsetWidth : 0,\n                snd: this.container ? this.container.offsetHeight : 0,\n              },\n              mouse_pos: this.mouse_pos,\n            }\n          })\n          time = performance.now()\n        }\n        window.requestAnimationFrame(self)\n      }\n      return window.requestAnimationFrame(self)\n    }\n\n    this.intervals.tick()\n  }\n  \n  // Initializes the main render loop\n  async init_renderer() {\n    //console.log(\"to aqui!\");\n    this.intervals.renderer = setInterval(() => {\n      if (this.app) {\n        this.rendered = this.app.draw(this.app_state);\n        this.forceUpdate();\n      }\n    }, 1000 / 32);\n  }\n\n  // Adds an event to the list of events\n  register_event(ev) {\n    if (this.app) {\n      this.run_io(this.app.when(ev)(this.app_state));\n    }\n  }\n\n  // Performs an IO computation\n  run_io(io) {\n    //console.log(\"Run IO\", io);\n    switch (io._) {\n      case \"IO.end\":\n        if (io.value.value !== null) {\n          this.app_state = io.value.value;\n          return Promise.resolve(io.value.value);\n        }\n        return Promise.resolve(null);\n      case \"IO.ask\":\n        //console.log(\"IO.ask\", io.param);\n        return new Promise((res, err) => {\n          switch (io.query) {\n            case \"print\":\n              alert(io.param);\n              return this.run_io(io.then(\"\")).then(res).catch(err);\n            case \"put_string\":\n              alert(io.param);\n              return this.run_io(io.then(\"\")).then(res).catch(err);\n            case \"get_time\":\n              return this.run_io(io.then(String(Date.now()))).then(res).catch(err);\n            case \"get_line\":\n              var answer = prompt(io.param) || \"\";\n              return this.run_io(io.then(answer)).then(res).catch(err);\n            case \"get_file\":\n              var data = localStorage.getItem(io.param) || \"\";\n              return this.run_io(io.then(data)).then(res).catch(err);\n            case \"set_file\":\n              var path = '';\n              for (var i = 0; i < io.param.length && io.param[i] !== '='; ++i) {\n                path += param[i];\n              };\n              var data = io.param.slice(i + 1);\n              localStorage.setItem(path, data);\n              return this.run_io(io.then(\"\")).then(res).catch(err);\n            case \"del_file\":\n              localStorage.removeItem(io.param);\n              return this.run_io(io.then(\"\")).then(res).catch(err);\n            case \"watch\":\n              if (utils.is_valid_hex(48, io.param)) {\n                window.KindEvents.watch_room(io.param);\n                window.KindEvents.on_post(({ room, time, addr, data }) => {\n                  var time = BigInt(parseInt(time.slice(2), 16));\n                  this.register_event({ _: \"App.Event.post\", time, room, addr : addr.toLowerCase(), data });\n                });\n              } else {\n                console.log(\"Error: invalid input on App.Action.watch\");\n              }\n              return this.run_io(io.then(\"\")).then(res).catch(err);\n            case \"post\":\n              var [room, data] = io.param.split(\";\");\n              if (utils.is_valid_hex(48, room) && utils.is_valid_hex(256, data)) {\n                console.log(\"Posting: \", room, data);\n                window.KindEvents.send_post(room, data);\n              } else {\n                console.log(\"Error: invalid input on App.Action.post\");\n              }\n              return this.run_io(io.then(\"\")).then(res).catch(err);\n          }\n        });\n    }\n  }\n\n  // Renders a document\n  render_dom(elem) {\n    //console.log(\"render_dom\", elem);\n    switch (elem._) {\n      // Renders a HTML element\n      case \"DOM.node\":\n        let props = utils.map_to_object(elem.props);\n        let style = utils.map_to_object(elem.style);\n        return h(elem.tag, {\n          ...props,\n          style: style\n        }, utils.list_to_array(elem.children).map(x => this.render_dom(x)));\n      // Renders a VoxBox using a canvas\n      case \"DOM.vbox\":\n        var id = elem.props ? elem.props.id || \"\" : \"\";\n        var width = Number(elem.props.width) || 256;\n        var height = Number(elem.props.height) || 256;\n        var canvas = this.get_canvas(id, width, height);\n        var length = elem.value.length;\n        var capacity = elem.value.capacity;\n        var buffer = elem.value.buffer;\n        // Renders pixels to buffers\n        for (var i = 0; i < length; ++i) {\n          var pos = buffer[i * 2 + 0];\n          var col = buffer[i * 2 + 1];\n          var p_x = (pos >>> 0) & 0xFFF;\n          var p_y = (pos >>> 12) & 0xFFF;\n          var p_z = (pos >>> 24) & 0xFF;\n          var idx = p_y * canvas.width + p_x;\n          var dep = canvas.depth_u8[idx];\n          if (p_x >= 0 && p_x < width && p_y >= 0 && p_y < height && p_z >= dep) {\n            canvas.image_u32[idx] = col;\n            canvas.depth_u8[idx] = p_z;\n            canvas.clear.data[canvas.clear.length++] = idx;\n          }\n        }\n        // Renders buffers to canvas\n        canvas.image_data.data.set(canvas.image_u8);\n        canvas.context.putImageData(canvas.image_data, 0, 0);\n        // Erases pixels from buffers\n        for (var i = 0; i < canvas.clear.length; ++i) {\n          var idx = canvas.clear.data[i];\n          canvas.image_u32[idx] = 0;\n          canvas.depth_u8[idx] = 0;\n        }\n        canvas.clear.length = 0;\n        // Mutably resets the length of the VoxBox\n        elem.value.length = 0;\n        return h(\"div\", {\n          ref: function (x) { if (x) { x.appendChild(canvas) } }\n        });\n      // Renders plain text\n      case \"DOM.text\":\n        return elem.value;\n    }\n  }\n\n  // Component's render function\n  render() {\n    if (!this.app) {\n      return \"Loading app...\";\n    } else if (!this.rendered) {\n      return \"Rendering app...\";\n    } else {\n      var element = this.render_dom(this.rendered);\n      var container = h(\"div\", {\n        id: \"container\",\n        style: {\n          \"width\": \"100%\",\n          \"height\": \"100%\",\n        },\n      }, element);\n      return container;\n    }\n  }\n\n  // Gets a pixel-art canvas\n  get_canvas(id, width, height) {\n    if (!this.canvas[id] || this.canvas[id].width !== width || this.canvas[id].height !== height) {\n      console.log(\"creating canvas\", id, width, height);\n      this.canvas[id] = document.createElement(\"canvas\");\n      this.canvas[id].style[\"image-rendering\"] = \"pixelated\";\n      this.canvas[id].width = width;\n      this.canvas[id].height = height;\n      this.canvas[id].style.width = width + \"px\";\n      this.canvas[id].style.height = height + \"px\";\n      this.canvas[id].clear = { length: 0, data: new Uint32Array(width * height * 32) };\n      this.canvas[id].style.border = \"1px solid black\";\n      this.canvas[id].context = this.canvas[id].getContext(\"2d\");\n      this.canvas[id].image_data = this.canvas[id].context.getImageData(0, 0, this.canvas[id].width, this.canvas[id].height)\n      this.canvas[id].image_buf = new ArrayBuffer(this.canvas[id].image_data.data.length);\n      this.canvas[id].image_u8 = new Uint8ClampedArray(this.canvas[id].image_buf);\n      this.canvas[id].image_u32 = new Uint32Array(this.canvas[id].image_buf);\n      this.canvas[id].depth_buf = new ArrayBuffer(this.canvas[id].image_u32.length);\n      this.canvas[id].depth_u8 = new Uint8Array(this.canvas[id].depth_buf);\n    }\n    return this.canvas[id];\n  }\n\n}\n\n","module.exports = {\n  'Web.Playground': import('./Web.Playground.js'),\n}\n","function is_valid_hex(bits, hex) {\n  return new RegExp(\"^0x[0-9A-Fa-f]{\"+Math.floor(bits/4)+\"}$\").test(hex)\n}\n\nfunction list_to_array(list) {\n  var arr = [];\n  while (list._ === \"List.cons\") {\n    arr.push(list.head);\n    list = list.tail;\n  }\n  return arr;\n}\n\nfunction map_to_object(map, key = \"\", obj = {}) {\n  switch (map._) {\n    case \"BitsMap.tie\":\n      switch (map.val._) {\n        case \"Maybe.none\": break;\n        case \"Maybe.some\": obj[bits_to_string(key)] = map.val.value; break;\n      }\n      map_to_object(map.lft, key + \"0\", obj);\n      map_to_object(map.rgt, key + \"1\", obj);\n      break;\n    case \"BitsMap.new\":\n      break;\n  }\n  return obj;\n}\n\nfunction bits_to_string(bits) {\n  var str = \"\";\n  for (var i = 0; i < bits.length; i += 16) {\n    var binary = bits.slice(i, i + 16).split(\"\").reverse().join(\"\");\n    str += String.fromCharCode(parseInt(binary, 2));\n  }\n  return str;\n}\n\n\nmodule.exports = {\n  is_valid_hex,\n  list_to_array,\n  map_to_object,\n  bits_to_string,\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".index.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"kind-web:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) var result = runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkkind_web\"] = self[\"webpackChunkkind_web\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","require(\"./assets/moonad_logo.png\").default;\n\nconst {Component, render} = require(\"inferno\");\nconst h = require(\"inferno-hyperscript\").h;\n\nconst EthSign = require(\"nano-ethereum-signer\");\nconst AppPlay = require(\"./AppPlay.js\");\nconst AppList = require(\"./AppList.js\");\nconst KindEventsClient = require(\"./../events/client.js\");\n\nfunction random_hex(bits_len) {\n  var bytes = crypto.getRandomValues(new Uint8Array((bits_len/8)>>>0));\n  var chars = Array.from(bytes).map(b => (\"00\" + b.toString(16)).slice(-2));\n  return \"0x\" + chars.join(\"\");\n}\n\nfunction get_from_storage(key, init) {\n  var value = localStorage.getItem(key);\n  if (!value) {\n    value = init();\n    localStorage.setItem(key, value);\n  }\n  return value;\n}\n\nwindow.KEY = get_from_storage(\"KEY\", () => random_hex(256));\nwindow.KindEvents = KindEventsClient({url: \"ws://uwu.tech:7171\", key: window.KEY});\nconsole.log(\"KEY: \", window.KEY);\nconsole.log(\"ADDRESS: \", EthSign.addressFromKey(window.KEY));\n\nclass Moonad extends Component {\n  constructor(props) {\n    super(props);\n  }\n  async componentDidMount() {\n    window.addEventListener('popstate', (event) => {\n      this.forceUpdate();\n    });\n  }\n  render() {\n    var path = window.location.pathname.slice(1);\n    if (path === \"\") {\n      return h(AppList);\n    } else {\n      return h(AppPlay, {name: path});\n    }\n  }\n};\n\nwindow.onload = () => render(h(Moonad), document.getElementById(\"main\"));\n"],"sourceRoot":""}