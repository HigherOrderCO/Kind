{"version":3,"sources":["webpack://kind-web/./src/apps/Web.JogoStats.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"149.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $2 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $0 = c2;\n                return $0;\n            } else {\n                var $1 = c2;\n                return $1;\n            };\n        })();\n        return $2;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $6 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $3 = c2;\n                return $3;\n            } else {\n                var $4 = (self - 1n);\n                var $5 = c2($4);\n                return $5;\n            };\n        })();\n        return $6;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $9 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $7 = u16_to_word(self);\n                    var $8 = c0($7);\n                    return $8;\n            };\n        })();\n        return $9;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $12 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $10 = u32_to_word(self);\n                    var $11 = c0($10);\n                    return $11;\n            };\n        })();\n        return $12;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $15 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $13 = u64_to_word(self);\n                    var $14 = c0($13);\n                    return $14;\n            };\n        })();\n        return $15;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $20 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $16 = c2;\n                return $16;\n            } else {\n                var $17 = self.charCodeAt(0);\n                var $18 = self.slice(1);\n                var $19 = c2($17)($18);\n                return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $24 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $21 = buffer32_to_depth(self);\n                    var $22 = buffer32_to_u32array(self);\n                    var $23 = c0($21)($22);\n                    return $23;\n            };\n        })();\n        return $24;\n    });\n\n    function App$Render$txt$(_text$1) {\n        var $25 = ({\n            _: 'App.Render.txt',\n            'text': _text$1\n        });\n        return $25;\n    };\n    const App$Render$txt = x0 => App$Render$txt$(x0);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $26 = (String.fromCharCode(_head$1) + _tail$2);\n        return $26;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $28 = self.head;\n                var $29 = self.tail;\n                var $30 = _cons$5($28)(List$fold$($29, _nil$4, _cons$5));\n                var $27 = $30;\n                break;\n            case 'List.nil':\n                var $31 = _nil$4;\n                var $27 = $31;\n                break;\n        };\n        return $27;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $32 = null;\n        return $32;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $33 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $33;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $34 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $34;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $35 = 1n + _pred$1;\n        return $35;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $36 = Either$left$(_n$1);\n                    return $36;\n                } else {\n                    var $37 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $39 = Either$right$(Nat$succ$($37));\n                        var $38 = $39;\n                    } else {\n                        var $40 = (self - 1n);\n                        var $41 = Nat$sub_rem$($40, $37);\n                        var $38 = $41;\n                    };\n                    return $38;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Pair$(_A$1, _B$2) {\n        var $42 = null;\n        return $42;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $43 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $43;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $44 = self.value;\n                        var $45 = Nat$div_mod$go$($44, _m$2, Nat$succ$(_d$3));\n                        return $45;\n                    case 'Either.right':\n                        var $46 = Pair$new$(_d$3, _n$1);\n                        return $46;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$zero = 0n;\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function List$(_A$1) {\n        var $47 = null;\n        return $47;\n    };\n    const List = x0 => List$(x0);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $48 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $48;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $49 = self.fst;\n                        var $50 = self.snd;\n                        var self = $49;\n                        if (self === 0n) {\n                            var $52 = List$cons$($50, _res$3);\n                            var $51 = $52;\n                        } else {\n                            var $53 = (self - 1n);\n                            var $54 = Nat$to_base$go$(_base$1, $49, List$cons$($50, _res$3));\n                            var $51 = $54;\n                        };\n                        return $51;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $55 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $55;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $56 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $56;\n                } else {\n                    var $57 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $59 = _r$3;\n                        var $58 = $59;\n                    } else {\n                        var $60 = (self - 1n);\n                        var $61 = Nat$mod$go$($60, $57, Nat$succ$(_r$3));\n                        var $58 = $61;\n                    };\n                    return $58;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n\n    function Nat$mod$(_n$1, _m$2) {\n        var $62 = Nat$mod$go$(_n$1, _m$2, 0n);\n        return $62;\n    };\n    const Nat$mod = x0 => x1 => Nat$mod$(x0, x1);\n    const Bool$false = false;\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Bool$true = true;\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function Maybe$(_A$1) {\n        var $63 = null;\n        return $63;\n    };\n    const Maybe = x0 => Maybe$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function Maybe$some$(_value$2) {\n        var $64 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $64;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $65 = self.head;\n                        var $66 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $68 = Maybe$some$($65);\n                            var $67 = $68;\n                        } else {\n                            var $69 = (self - 1n);\n                            var $70 = List$at$($69, $66);\n                            var $67 = $70;\n                        };\n                        return $67;\n                    case 'List.nil':\n                        var $71 = Maybe$none;\n                        return $71;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = Nat$mod$(_n$2, _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $74 = self.value;\n                    var $75 = $74;\n                    var $73 = $75;\n                    break;\n                case 'Maybe.none':\n                    var $76 = 35;\n                    var $73 = $76;\n                    break;\n            };\n            var $72 = $73;\n        } else {\n            var $77 = 35;\n            var $72 = $77;\n        };\n        return $72;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $78 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $79 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $79;\n        }));\n        return $78;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $80 = Nat$to_string_base$(10n, _n$1);\n        return $80;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n\n    function App$Action$(_S$1) {\n        var $81 = null;\n        return $81;\n    };\n    const App$Action = x0 => App$Action$(x0);\n\n    function App$Action$watch$(_room$2) {\n        var $82 = ({\n            _: 'App.Action.watch',\n            'room': _room$2\n        });\n        return $82;\n    };\n    const App$Action$watch = x0 => App$Action$watch$(x0);\n    const Web$Jogo$room = \"0x196581625482\";\n\n    function App$Action$state$(_value$2) {\n        var $83 = ({\n            _: 'App.Action.state',\n            'value': _value$2\n        });\n        return $83;\n    };\n    const App$Action$state = x0 => App$Action$state$(x0);\n    const Nat$add = a0 => a1 => (a0 + a1);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $84 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $84;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$JogoStats = App$new$(0n, (_state$1 => {\n        var $85 = App$Render$txt$((\"foram feitos \" + (Nat$show$(_state$1) + \" posts no jogo\")));\n        return $85;\n    }), (_event$1 => _state$2 => {\n        var self = _event$1;\n        switch (self._) {\n            case 'App.Event.init':\n                var $87 = List$cons$(App$Action$watch$(Web$Jogo$room), List$nil);\n                var $86 = $87;\n                break;\n            case 'App.Event.tick':\n            case 'App.Event.xkey':\n                var $88 = List$nil;\n                var $86 = $88;\n                break;\n            case 'App.Event.post':\n                var $89 = List$cons$(App$Action$state$((_state$2 + 1n)), List$nil);\n                var $86 = $89;\n                break;\n        };\n        return $86;\n    }));\n    return {\n        'App.Render.txt': App$Render$txt,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.succ': Nat$succ,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Pair': Pair,\n        'Pair.new': Pair$new,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.zero': Nat$zero,\n        'Nat.div_mod': Nat$div_mod,\n        'List': List,\n        'List.cons': List$cons,\n        'Nat.to_base.go': Nat$to_base$go,\n        'List.nil': List$nil,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Bool.false': Bool$false,\n        'Bool.and': Bool$and,\n        'Bool.true': Bool$true,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'Maybe': Maybe,\n        'Maybe.none': Maybe$none,\n        'Maybe.some': Maybe$some,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'App.Action': App$Action,\n        'App.Action.watch': App$Action$watch,\n        'Web.Jogo.room': Web$Jogo$room,\n        'App.Action.state': App$Action$state,\n        'Nat.add': Nat$add,\n        'App.new': App$new,\n        'Web.JogoStats': Web$JogoStats,\n    };\n})();"],"sourceRoot":""}