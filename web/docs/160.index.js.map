{"version":3,"sources":["webpack://kind-web/./src/apps/Web.Jogo.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"160.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    const inst_unit = x => x(1);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c2;\n                return $2;\n            } else {\n                var $3 = c2;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c2;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c2($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c2;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c2($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $33 = u32array_to_buffer32(_array$2);\n        return $33;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $34 = null;\n        return $34;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $35 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $35;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $36 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $36;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $38 = Array$tip$(_x$3);\n            var $37 = $38;\n        } else {\n            var $39 = (self - 1n);\n            var _half$5 = Array$alloc$($39, _x$3);\n            var $40 = Array$tie$(_half$5, _half$5);\n            var $37 = $40;\n        };\n        return $37;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $41 = word_to_u32(_value$1);\n        return $41;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $42 = null;\n        return $42;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $43 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $43;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $45 = Word$e;\n            var $44 = $45;\n        } else {\n            var $46 = (self - 1n);\n            var $47 = Word$o$(Word$zero$($46));\n            var $44 = $47;\n        };\n        return $44;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n    const U32$zero = U32$new$(Word$zero$(32n));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $49 = Bool$false;\n                var $48 = $49;\n                break;\n            case 'Cmp.eql':\n                var $50 = Bool$true;\n                var $48 = $50;\n                break;\n        };\n        return $48;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $52 = self.pred;\n                var $53 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $55 = self.pred;\n                            var $56 = (_a$pred$10 => {\n                                var $57 = Word$cmp$go$(_a$pred$10, $55, _c$4);\n                                return $57;\n                            });\n                            var $54 = $56;\n                            break;\n                        case 'Word.i':\n                            var $58 = self.pred;\n                            var $59 = (_a$pred$10 => {\n                                var $60 = Word$cmp$go$(_a$pred$10, $58, Cmp$ltn);\n                                return $60;\n                            });\n                            var $54 = $59;\n                            break;\n                        case 'Word.e':\n                            var $61 = (_a$pred$8 => {\n                                var $62 = _c$4;\n                                return $62;\n                            });\n                            var $54 = $61;\n                            break;\n                    };\n                    var $54 = $54($52);\n                    return $54;\n                });\n                var $51 = $53;\n                break;\n            case 'Word.i':\n                var $63 = self.pred;\n                var $64 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $66 = self.pred;\n                            var $67 = (_a$pred$10 => {\n                                var $68 = Word$cmp$go$(_a$pred$10, $66, Cmp$gtn);\n                                return $68;\n                            });\n                            var $65 = $67;\n                            break;\n                        case 'Word.i':\n                            var $69 = self.pred;\n                            var $70 = (_a$pred$10 => {\n                                var $71 = Word$cmp$go$(_a$pred$10, $69, _c$4);\n                                return $71;\n                            });\n                            var $65 = $70;\n                            break;\n                        case 'Word.e':\n                            var $72 = (_a$pred$8 => {\n                                var $73 = _c$4;\n                                return $73;\n                            });\n                            var $65 = $72;\n                            break;\n                    };\n                    var $65 = $65($63);\n                    return $65;\n                });\n                var $51 = $64;\n                break;\n            case 'Word.e':\n                var $74 = (_b$5 => {\n                    var $75 = _c$4;\n                    return $75;\n                });\n                var $51 = $74;\n                break;\n        };\n        var $51 = $51(_b$3);\n        return $51;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $76 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $76;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $77 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $77;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n\n    function Nat$succ$(_pred$1) {\n        var $78 = 1n + _pred$1;\n        return $78;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$eql = a0 => a1 => (a0 === a1);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $79 = _x$4;\n                    return $79;\n                } else {\n                    var $80 = (self - 1n);\n                    var $81 = Nat$apply$($80, _f$3, _f$3(_x$4));\n                    return $81;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$i$(_pred$2) {\n        var $82 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $82;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $84 = self.pred;\n                var $85 = Word$i$($84);\n                var $83 = $85;\n                break;\n            case 'Word.i':\n                var $86 = self.pred;\n                var $87 = Word$o$(Word$inc$($86));\n                var $83 = $87;\n                break;\n            case 'Word.e':\n                var $88 = Word$e;\n                var $83 = $88;\n                break;\n        };\n        return $83;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function U32$inc$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $90 = u32_to_word(self);\n                var $91 = U32$new$(Word$inc$($90));\n                var $89 = $91;\n                break;\n        };\n        return $89;\n    };\n    const U32$inc = x0 => U32$inc$(x0);\n    const Nat$to_u32 = a0 => (Number(a0));\n    const U32$shr = a0 => a1 => (a0 >>> a1);\n\n    function U32$needed_depth$go$(_n$1) {\n        var self = (_n$1 === 0);\n        if (self) {\n            var $93 = 0n;\n            var $92 = $93;\n        } else {\n            var $94 = Nat$succ$(U32$needed_depth$go$((_n$1 >>> 1)));\n            var $92 = $94;\n        };\n        return $92;\n    };\n    const U32$needed_depth$go = x0 => U32$needed_depth$go$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $96 = self.pred;\n                var $97 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $99 = self.pred;\n                            var $100 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $102 = Word$i$(Word$subber$(_a$pred$10, $99, Bool$true));\n                                    var $101 = $102;\n                                } else {\n                                    var $103 = Word$o$(Word$subber$(_a$pred$10, $99, Bool$false));\n                                    var $101 = $103;\n                                };\n                                return $101;\n                            });\n                            var $98 = $100;\n                            break;\n                        case 'Word.i':\n                            var $104 = self.pred;\n                            var $105 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $107 = Word$o$(Word$subber$(_a$pred$10, $104, Bool$true));\n                                    var $106 = $107;\n                                } else {\n                                    var $108 = Word$i$(Word$subber$(_a$pred$10, $104, Bool$true));\n                                    var $106 = $108;\n                                };\n                                return $106;\n                            });\n                            var $98 = $105;\n                            break;\n                        case 'Word.e':\n                            var $109 = (_a$pred$8 => {\n                                var $110 = Word$e;\n                                return $110;\n                            });\n                            var $98 = $109;\n                            break;\n                    };\n                    var $98 = $98($96);\n                    return $98;\n                });\n                var $95 = $97;\n                break;\n            case 'Word.i':\n                var $111 = self.pred;\n                var $112 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $114 = self.pred;\n                            var $115 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $117 = Word$o$(Word$subber$(_a$pred$10, $114, Bool$false));\n                                    var $116 = $117;\n                                } else {\n                                    var $118 = Word$i$(Word$subber$(_a$pred$10, $114, Bool$false));\n                                    var $116 = $118;\n                                };\n                                return $116;\n                            });\n                            var $113 = $115;\n                            break;\n                        case 'Word.i':\n                            var $119 = self.pred;\n                            var $120 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $122 = Word$i$(Word$subber$(_a$pred$10, $119, Bool$true));\n                                    var $121 = $122;\n                                } else {\n                                    var $123 = Word$o$(Word$subber$(_a$pred$10, $119, Bool$false));\n                                    var $121 = $123;\n                                };\n                                return $121;\n                            });\n                            var $113 = $120;\n                            break;\n                        case 'Word.e':\n                            var $124 = (_a$pred$8 => {\n                                var $125 = Word$e;\n                                return $125;\n                            });\n                            var $113 = $124;\n                            break;\n                    };\n                    var $113 = $113($111);\n                    return $113;\n                });\n                var $95 = $112;\n                break;\n            case 'Word.e':\n                var $126 = (_b$5 => {\n                    var $127 = Word$e;\n                    return $127;\n                });\n                var $95 = $126;\n                break;\n        };\n        var $95 = $95(_b$3);\n        return $95;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $128 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $128;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U32$sub = a0 => a1 => (Math.max(a0 - a1, 0));\n\n    function U32$needed_depth$(_size$1) {\n        var $129 = U32$needed_depth$go$((Math.max(_size$1 - 1, 0)));\n        return $129;\n    };\n    const U32$needed_depth = x0 => U32$needed_depth$(x0);\n\n    function Word$shift_left1$aux$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $131 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $133 = Word$i$(Word$shift_left1$aux$($131, Bool$false));\n                    var $132 = $133;\n                } else {\n                    var $134 = Word$o$(Word$shift_left1$aux$($131, Bool$false));\n                    var $132 = $134;\n                };\n                var $130 = $132;\n                break;\n            case 'Word.i':\n                var $135 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $137 = Word$i$(Word$shift_left1$aux$($135, Bool$true));\n                    var $136 = $137;\n                } else {\n                    var $138 = Word$o$(Word$shift_left1$aux$($135, Bool$true));\n                    var $136 = $138;\n                };\n                var $130 = $136;\n                break;\n            case 'Word.e':\n                var $139 = Word$e;\n                var $130 = $139;\n                break;\n        };\n        return $130;\n    };\n    const Word$shift_left1$aux = x0 => x1 => Word$shift_left1$aux$(x0, x1);\n\n    function Word$shift_left1$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $141 = self.pred;\n                var $142 = Word$o$(Word$shift_left1$aux$($141, Bool$false));\n                var $140 = $142;\n                break;\n            case 'Word.i':\n                var $143 = self.pred;\n                var $144 = Word$o$(Word$shift_left1$aux$($143, Bool$true));\n                var $140 = $144;\n                break;\n            case 'Word.e':\n                var $145 = Word$e;\n                var $140 = $145;\n                break;\n        };\n        return $140;\n    };\n    const Word$shift_left1 = x0 => Word$shift_left1$(x0);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $147 = self.pred;\n                var $148 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $150 = self.pred;\n                            var $151 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $153 = Word$i$(Word$adder$(_a$pred$10, $150, Bool$false));\n                                    var $152 = $153;\n                                } else {\n                                    var $154 = Word$o$(Word$adder$(_a$pred$10, $150, Bool$false));\n                                    var $152 = $154;\n                                };\n                                return $152;\n                            });\n                            var $149 = $151;\n                            break;\n                        case 'Word.i':\n                            var $155 = self.pred;\n                            var $156 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $158 = Word$o$(Word$adder$(_a$pred$10, $155, Bool$true));\n                                    var $157 = $158;\n                                } else {\n                                    var $159 = Word$i$(Word$adder$(_a$pred$10, $155, Bool$false));\n                                    var $157 = $159;\n                                };\n                                return $157;\n                            });\n                            var $149 = $156;\n                            break;\n                        case 'Word.e':\n                            var $160 = (_a$pred$8 => {\n                                var $161 = Word$e;\n                                return $161;\n                            });\n                            var $149 = $160;\n                            break;\n                    };\n                    var $149 = $149($147);\n                    return $149;\n                });\n                var $146 = $148;\n                break;\n            case 'Word.i':\n                var $162 = self.pred;\n                var $163 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $165 = self.pred;\n                            var $166 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $168 = Word$o$(Word$adder$(_a$pred$10, $165, Bool$true));\n                                    var $167 = $168;\n                                } else {\n                                    var $169 = Word$i$(Word$adder$(_a$pred$10, $165, Bool$false));\n                                    var $167 = $169;\n                                };\n                                return $167;\n                            });\n                            var $164 = $166;\n                            break;\n                        case 'Word.i':\n                            var $170 = self.pred;\n                            var $171 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $173 = Word$i$(Word$adder$(_a$pred$10, $170, Bool$true));\n                                    var $172 = $173;\n                                } else {\n                                    var $174 = Word$o$(Word$adder$(_a$pred$10, $170, Bool$true));\n                                    var $172 = $174;\n                                };\n                                return $172;\n                            });\n                            var $164 = $171;\n                            break;\n                        case 'Word.e':\n                            var $175 = (_a$pred$8 => {\n                                var $176 = Word$e;\n                                return $176;\n                            });\n                            var $164 = $175;\n                            break;\n                    };\n                    var $164 = $164($162);\n                    return $164;\n                });\n                var $146 = $163;\n                break;\n            case 'Word.e':\n                var $177 = (_b$5 => {\n                    var $178 = Word$e;\n                    return $178;\n                });\n                var $146 = $177;\n                break;\n        };\n        var $146 = $146(_b$3);\n        return $146;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $179 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $179;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $180 = self.pred;\n                        var $181 = Word$mul$go$($180, Word$shift_left1$(_b$4), _acc$5);\n                        return $181;\n                    case 'Word.i':\n                        var $182 = self.pred;\n                        var $183 = Word$mul$go$($182, Word$shift_left1$(_b$4), Word$add$(_b$4, _acc$5));\n                        return $183;\n                    case 'Word.e':\n                        var $184 = _acc$5;\n                        return $184;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$mul$(_size$1, _a$2, _b$3) {\n        var $185 = Word$mul$go$(_a$2, _b$3, Word$zero$(_size$1));\n        return $185;\n    };\n    const Word$mul = x0 => x1 => x2 => Word$mul$(x0, x1, x2);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Image3D$new$(_length$1, _capacity$2, _buffer$3) {\n        var $186 = ({\n            _: 'Image3D.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $186;\n    };\n    const Image3D$new = x0 => x1 => x2 => Image3D$new$(x0, x1, x2);\n\n    function Image3D$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$needed_depth$(((2 * _capacity$1) >>> 0)))));\n        var $187 = Image3D$new$(0, _capacity$1, _buffer$2);\n        return $187;\n    };\n    const Image3D$alloc_capacity = x0 => Image3D$alloc_capacity$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function Pair$(_A$1, _B$2) {\n        var $188 = null;\n        return $188;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Image3D$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'Image3D.new':\n                var $190 = self.capacity;\n                var $191 = self.buffer;\n                var $192 = Image3D$new$(_length$1, $190, $191);\n                var $189 = $192;\n                break;\n        };\n        return $189;\n    };\n    const Image3D$set_length = x0 => x1 => Image3D$set_length$(x0, x1);\n\n    function Image3D$clear$(_img$1) {\n        var $193 = Image3D$set_length$(0, _img$1);\n        return $193;\n    };\n    const Image3D$clear = x0 => Image3D$clear$(x0);\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function List$(_A$1) {\n        var $194 = null;\n        return $194;\n    };\n    const List = x0 => List$(x0);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $195 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $195;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function BitsMap$values$go$(_xs$2, _list$3) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $197 = self.val;\n                var $198 = self.lft;\n                var $199 = self.rgt;\n                var self = $197;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $201 = self.value;\n                        var $202 = List$cons$($201, _list$3);\n                        var _list0$7 = $202;\n                        break;\n                    case 'Maybe.none':\n                        var $203 = _list$3;\n                        var _list0$7 = $203;\n                        break;\n                };\n                var _list1$8 = BitsMap$values$go$($198, _list0$7);\n                var _list2$9 = BitsMap$values$go$($199, _list1$8);\n                var $200 = _list2$9;\n                var $196 = $200;\n                break;\n            case 'BitsMap.new':\n                var $204 = _list$3;\n                var $196 = $204;\n                break;\n        };\n        return $196;\n    };\n    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function BitsMap$values$(_xs$2) {\n        var $205 = BitsMap$values$go$(_xs$2, List$nil);\n        return $205;\n    };\n    const BitsMap$values = x0 => BitsMap$values$(x0);\n\n    function Image3D$get_len$(_img$1) {\n        var self = _img$1;\n        switch (self._) {\n            case 'Image3D.new':\n                var $207 = self.length;\n                var $208 = $207;\n                var $206 = $208;\n                break;\n        };\n        return $206;\n    };\n    const Image3D$get_len = x0 => Image3D$get_len$(x0);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $210 = Word$e;\n            var $209 = $210;\n        } else {\n            var $211 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $213 = self.pred;\n                    var $214 = Word$o$(Word$trim$($211, $213));\n                    var $212 = $214;\n                    break;\n                case 'Word.i':\n                    var $215 = self.pred;\n                    var $216 = Word$i$(Word$trim$($211, $215));\n                    var $212 = $216;\n                    break;\n                case 'Word.e':\n                    var $217 = Word$o$(Word$trim$($211, Word$e));\n                    var $212 = $217;\n                    break;\n            };\n            var $209 = $212;\n        };\n        return $209;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = 1;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $219 = self.value;\n                var $220 = $219;\n                var $218 = $220;\n                break;\n            case 'Array.tie':\n                var $221 = Unit$new;\n                var $218 = $221;\n                break;\n        };\n        return $218;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $222 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $222;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $224 = self.lft;\n                var $225 = self.rgt;\n                var $226 = Pair$new$($224, $225);\n                var $223 = $226;\n                break;\n            case 'Array.tip':\n                var $227 = Unit$new;\n                var $223 = $227;\n                break;\n        };\n        return $223;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $228 = self.pred;\n                        var $229 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $228);\n                        return $229;\n                    case 'Word.i':\n                        var $230 = self.pred;\n                        var $231 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $230);\n                        return $231;\n                    case 'Word.e':\n                        var $232 = _nil$3;\n                        return $232;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$get$(_idx$3, _arr$4) {\n        var $233 = Word$foldl$(Array$extract_tip, (_rec$6 => _arr$7 => {\n            var _arr_l$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_l$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $235 = self.fst;\n                    var $236 = _rec$6($235);\n                    var $234 = $236;\n                    break;\n            };\n            return $234;\n        }), (_rec$6 => _arr$7 => {\n            var _arr_r$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_r$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $238 = self.snd;\n                    var $239 = _rec$6($238);\n                    var $237 = $239;\n                    break;\n            };\n            return $237;\n        }), _idx$3)(_arr$4);\n        return $233;\n    };\n    const Array$get = x0 => x1 => Array$get$(x0, x1);\n    const Buffer32$get = a0 => a1 => ((a1[a0]));\n    const Image3D$get_pos = a0 => a1 => ((a1.buffer[a0 * 2]));\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n    const Image3D$get_col = a0 => a1 => ((a1.buffer[a0 * 2 + 1]));\n\n    function Word$and$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $241 = self.pred;\n                var $242 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $244 = self.pred;\n                            var $245 = (_a$pred$9 => {\n                                var $246 = Word$o$(Word$and$(_a$pred$9, $244));\n                                return $246;\n                            });\n                            var $243 = $245;\n                            break;\n                        case 'Word.i':\n                            var $247 = self.pred;\n                            var $248 = (_a$pred$9 => {\n                                var $249 = Word$o$(Word$and$(_a$pred$9, $247));\n                                return $249;\n                            });\n                            var $243 = $248;\n                            break;\n                        case 'Word.e':\n                            var $250 = (_a$pred$7 => {\n                                var $251 = Word$e;\n                                return $251;\n                            });\n                            var $243 = $250;\n                            break;\n                    };\n                    var $243 = $243($241);\n                    return $243;\n                });\n                var $240 = $242;\n                break;\n            case 'Word.i':\n                var $252 = self.pred;\n                var $253 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $255 = self.pred;\n                            var $256 = (_a$pred$9 => {\n                                var $257 = Word$o$(Word$and$(_a$pred$9, $255));\n                                return $257;\n                            });\n                            var $254 = $256;\n                            break;\n                        case 'Word.i':\n                            var $258 = self.pred;\n                            var $259 = (_a$pred$9 => {\n                                var $260 = Word$i$(Word$and$(_a$pred$9, $258));\n                                return $260;\n                            });\n                            var $254 = $259;\n                            break;\n                        case 'Word.e':\n                            var $261 = (_a$pred$7 => {\n                                var $262 = Word$e;\n                                return $262;\n                            });\n                            var $254 = $261;\n                            break;\n                    };\n                    var $254 = $254($252);\n                    return $254;\n                });\n                var $240 = $253;\n                break;\n            case 'Word.e':\n                var $263 = (_b$4 => {\n                    var $264 = Word$e;\n                    return $264;\n                });\n                var $240 = $263;\n                break;\n        };\n        var $240 = $240(_b$3);\n        return $240;\n    };\n    const Word$and = x0 => x1 => Word$and$(x0, x1);\n    const U32$and = a0 => a1 => (a0 & a1);\n\n    function Word$or$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $266 = self.pred;\n                var $267 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $269 = self.pred;\n                            var $270 = (_a$pred$9 => {\n                                var $271 = Word$o$(Word$or$(_a$pred$9, $269));\n                                return $271;\n                            });\n                            var $268 = $270;\n                            break;\n                        case 'Word.i':\n                            var $272 = self.pred;\n                            var $273 = (_a$pred$9 => {\n                                var $274 = Word$i$(Word$or$(_a$pred$9, $272));\n                                return $274;\n                            });\n                            var $268 = $273;\n                            break;\n                        case 'Word.e':\n                            var $275 = (_a$pred$7 => {\n                                var $276 = Word$e;\n                                return $276;\n                            });\n                            var $268 = $275;\n                            break;\n                    };\n                    var $268 = $268($266);\n                    return $268;\n                });\n                var $265 = $267;\n                break;\n            case 'Word.i':\n                var $277 = self.pred;\n                var $278 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $280 = self.pred;\n                            var $281 = (_a$pred$9 => {\n                                var $282 = Word$i$(Word$or$(_a$pred$9, $280));\n                                return $282;\n                            });\n                            var $279 = $281;\n                            break;\n                        case 'Word.i':\n                            var $283 = self.pred;\n                            var $284 = (_a$pred$9 => {\n                                var $285 = Word$i$(Word$or$(_a$pred$9, $283));\n                                return $285;\n                            });\n                            var $279 = $284;\n                            break;\n                        case 'Word.e':\n                            var $286 = (_a$pred$7 => {\n                                var $287 = Word$e;\n                                return $287;\n                            });\n                            var $279 = $286;\n                            break;\n                    };\n                    var $279 = $279($277);\n                    return $279;\n                });\n                var $265 = $278;\n                break;\n            case 'Word.e':\n                var $288 = (_b$4 => {\n                    var $289 = Word$e;\n                    return $289;\n                });\n                var $265 = $288;\n                break;\n        };\n        var $265 = $265(_b$3);\n        return $265;\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n    const U32$shl = a0 => a1 => (a0 << a1);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $290 = Word$foldl$((_arr$6 => {\n            var $291 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $291;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $293 = self.fst;\n                    var $294 = self.snd;\n                    var $295 = Array$tie$(_rec$7($293), $294);\n                    var $292 = $295;\n                    break;\n            };\n            return $292;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $297 = self.fst;\n                    var $298 = self.snd;\n                    var $299 = Array$tie$($297, _rec$7($298));\n                    var $296 = $299;\n                    break;\n            };\n            return $296;\n        }), _idx$3)(_arr$5);\n        return $290;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $300 = Array$mut$(_idx$3, (_x$6 => {\n            var $301 = _val$4;\n            return $301;\n        }), _arr$5);\n        return $300;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const Image3D$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const Image3D$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n    const Image3D$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function Image3D$Draw$image$(_x$1, _y$2, _z$3, _src$4, _img$5) {\n        var _len$6 = Image3D$get_len$(_src$4);\n        var _img$7 = (() => {\n            var $303 = _img$5;\n            var $304 = 0;\n            var $305 = _len$6;\n            let _img$8 = $303;\n            for (let _i$7 = $304; _i$7 < $305; ++_i$7) {\n                var _pos$9 = ((_src$4.buffer[_i$7 * 2]));\n                var _col$10 = ((_src$4.buffer[_i$7 * 2 + 1]));\n                var _p_x$11 = (_pos$9 & 4095);\n                var _p_y$12 = ((_pos$9 & 16773120) >>> 12);\n                var _p_z$13 = ((_pos$9 & 4278190080) >>> 24);\n                var _p_x$14 = ((_p_x$11 + _x$1) >>> 0);\n                var _p_y$15 = ((_p_y$12 + _y$2) >>> 0);\n                var _p_z$16 = ((_p_z$13 + _z$3) >>> 0);\n                var _pos$17 = ((0 | _p_x$14 | (_p_y$15 << 12) | (_p_z$16 << 24)));\n                var $303 = ((_img$8.buffer[_img$8.length * 2] = _pos$17, _img$8.buffer[_img$8.length * 2 + 1] = _col$10, _img$8.length++, _img$8));\n                _img$8 = $303;\n            };\n            return _img$8;\n        })();\n        var $302 = _img$7;\n        return $302;\n    };\n    const Image3D$Draw$image = x0 => x1 => x2 => x3 => x4 => Image3D$Draw$image$(x0, x1, x2, x3, x4);\n\n    function Word$div$(_a$2, _b$3) {\n        var Word$div$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$div = _a$2 => _b$3 => Word$div$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$div$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n    const U32$length = a0 => (a0.length);\n    const U32$slice = a0 => a1 => a2 => (a2.slice(a0, a1));\n    const U32$read_base = a0 => a1 => (parseInt(a1, a0));\n\n    function Image3D$parse_byte$(_idx$1, _voxdata$2) {\n        var _chr$3 = (_voxdata$2.slice(((_idx$1 * 2) >>> 0), ((((_idx$1 * 2) >>> 0) + 2) >>> 0)));\n        var $306 = (parseInt(_chr$3, 16));\n        return $306;\n    };\n    const Image3D$parse_byte = x0 => x1 => Image3D$parse_byte$(x0, x1);\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function Image3D$parse$(_voxdata$1) {\n        var _siz$2 = (((_voxdata$1.length) / 12) >>> 0);\n        var _img$3 = Image3D$alloc_capacity$(_siz$2);\n        var _img$4 = (() => {\n            var $308 = _img$3;\n            var $309 = 0;\n            var $310 = _siz$2;\n            let _img$5 = $308;\n            for (let _i$4 = $309; _i$4 < $310; ++_i$4) {\n                var _x$6 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 0) >>> 0), _voxdata$1);\n                var _y$7 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 1) >>> 0), _voxdata$1);\n                var _z$8 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 2) >>> 0), _voxdata$1);\n                var _r$9 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 3) >>> 0), _voxdata$1);\n                var _g$10 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 4) >>> 0), _voxdata$1);\n                var _b$11 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 5) >>> 0), _voxdata$1);\n                var _pos$12 = ((0 | _x$6 | (_y$7 << 12) | (_z$8 << 24)));\n                var _col$13 = ((0 | _r$9 | (_g$10 << 8) | (_b$11 << 16) | (255 << 24)));\n                var $308 = ((_img$5.buffer[_img$5.length * 2] = _pos$12, _img$5.buffer[_img$5.length * 2 + 1] = _col$13, _img$5.length++, _img$5));\n                _img$5 = $308;\n            };\n            return _img$5;\n        })();\n        var $307 = _img$4;\n        return $307;\n    };\n    const Image3D$parse = x0 => Image3D$parse$(x0);\n    const Web$Jogo$hero$hex = \"0d00000000000e00000000000f00000000001000000000001100000000000c01000000000d01000000001101000000000b02000000000c02000000001202000000000b03000000001203000000000b04000000000c04000000001104000000000c05000000000d05000000000e05000000001005000000001105000000000e06000000000f06000000000e07000000000e08000000000f08000000000d09000000000e09000000000f09000000000c0a000000000d0a000000000e0a000000000f0a00000000100a000000000c0b000000000e0b00000000100b000000000b0c000000000c0c000000000e0c00000000100c00000000110c000000000b0d000000000e0d00000000110d000000000a0e000000000b0e000000000e0e00000000110e00000000120e000000000a0f000000000e0f00000000120f000000000910000000000a10000000000e10000000001210000000001310000000000911000000000e11000000001311000000000e12000000000d13000000000e13000000000f13000000000d14000000000f14000000000d15000000000f15000000000c16000000000d16000000000f16000000000c17000000000f17000000000c18000000000f18000000000c19000000001019000000000c1a00000000101a000000000b1b000000000c1b00000000101b000000000b1c00000000101c000000000b1d00000000101d00000000111d000000000b1e00000000111e000000000a1f000000000b1f00000000111f00000000\";\n    const Web$Jogo$hero = Image3D$parse$(Web$Jogo$hero$hex);\n\n    function App$Render$pix$(_pixs$1) {\n        var $311 = ({\n            _: 'App.Render.pix',\n            'pixs': _pixs$1\n        });\n        return $311;\n    };\n    const App$Render$pix = x0 => App$Render$pix$(x0);\n\n    function App$Action$(_S$1) {\n        var $312 = null;\n        return $312;\n    };\n    const App$Action = x0 => App$Action$(x0);\n\n    function BitsMap$(_A$1) {\n        var $313 = null;\n        return $313;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function App$Action$print$(_text$2) {\n        var $314 = ({\n            _: 'App.Action.print',\n            'text': _text$2\n        });\n        return $314;\n    };\n    const App$Action$print = x0 => App$Action$print$(x0);\n\n    function App$Action$watch$(_room$2) {\n        var $315 = ({\n            _: 'App.Action.watch',\n            'room': _room$2\n        });\n        return $315;\n    };\n    const App$Action$watch = x0 => App$Action$watch$(x0);\n    const Web$Jogo$room = \"0x196581625482\";\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function App$Action$post$(_room$2, _data$3) {\n        var $316 = ({\n            _: 'App.Action.post',\n            'room': _room$2,\n            'data': _data$3\n        });\n        return $316;\n    };\n    const App$Action$post = x0 => x1 => App$Action$post$(x0, x1);\n    const Web$Jogo$command$A = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n    const Web$Jogo$command$D = \"0x0000000000000000000000000000000000000000000000000000000000000001\";\n    const Web$Jogo$command$W = \"0x0000000000000000000000000000000000000000000000000000000000000003\";\n    const Web$Jogo$command$S = \"0x0000000000000000000000000000000000000000000000000000000000000002\";\n\n    function String$cons$(_head$1, _tail$2) {\n        var $317 = (String.fromCharCode(_head$1) + _tail$2);\n        return $317;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function App$Action$state$(_value$2) {\n        var $318 = ({\n            _: 'App.Action.state',\n            'value': _value$2\n        });\n        return $318;\n    };\n    const App$Action$state = x0 => App$Action$state$(x0);\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $320 = self.pred;\n                var $321 = (Word$to_bits$($320) + '0');\n                var $319 = $321;\n                break;\n            case 'Word.i':\n                var $322 = self.pred;\n                var $323 = (Word$to_bits$($322) + '1');\n                var $319 = $323;\n                break;\n            case 'Word.e':\n                var $324 = Bits$e;\n                var $319 = $324;\n                break;\n        };\n        return $319;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $326 = Bits$e;\n            var $325 = $326;\n        } else {\n            var $327 = self.charCodeAt(0);\n            var $328 = self.slice(1);\n            var $329 = (String$to_bits$($328) + (u16_to_bits($327)));\n            var $325 = $329;\n        };\n        return $325;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Maybe$(_A$1) {\n        var $330 = null;\n        return $330;\n    };\n    const Maybe = x0 => Maybe$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function BitsMap$get$(_bits$2, _map$3) {\n        var BitsMap$get$ = (_bits$2, _map$3) => ({\n            ctr: 'TCO',\n            arg: [_bits$2, _map$3]\n        });\n        var BitsMap$get = _bits$2 => _map$3 => BitsMap$get$(_bits$2, _map$3);\n        var arg = [_bits$2, _map$3];\n        while (true) {\n            let [_bits$2, _map$3] = arg;\n            var R = (() => {\n                var self = _bits$2;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $331 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $333 = self.lft;\n                                var $334 = BitsMap$get$($331, $333);\n                                var $332 = $334;\n                                break;\n                            case 'BitsMap.new':\n                                var $335 = Maybe$none;\n                                var $332 = $335;\n                                break;\n                        };\n                        return $332;\n                    case 'i':\n                        var $336 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $338 = self.rgt;\n                                var $339 = BitsMap$get$($336, $338);\n                                var $337 = $339;\n                                break;\n                            case 'BitsMap.new':\n                                var $340 = Maybe$none;\n                                var $337 = $340;\n                                break;\n                        };\n                        return $337;\n                    case 'e':\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $342 = self.val;\n                                var $343 = $342;\n                                var $341 = $343;\n                                break;\n                            case 'BitsMap.new':\n                                var $344 = Maybe$none;\n                                var $341 = $344;\n                                break;\n                        };\n                        return $341;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const BitsMap$get = x0 => x1 => BitsMap$get$(x0, x1);\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $345 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $345;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $346 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $346;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n\n    function BitsMap$set$(_bits$2, _val$3, _map$4) {\n        var self = _bits$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $348 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $350 = self.val;\n                        var $351 = self.lft;\n                        var $352 = self.rgt;\n                        var $353 = BitsMap$tie$($350, BitsMap$set$($348, _val$3, $351), $352);\n                        var $349 = $353;\n                        break;\n                    case 'BitsMap.new':\n                        var $354 = BitsMap$tie$(Maybe$none, BitsMap$set$($348, _val$3, BitsMap$new), BitsMap$new);\n                        var $349 = $354;\n                        break;\n                };\n                var $347 = $349;\n                break;\n            case 'i':\n                var $355 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $357 = self.val;\n                        var $358 = self.lft;\n                        var $359 = self.rgt;\n                        var $360 = BitsMap$tie$($357, $358, BitsMap$set$($355, _val$3, $359));\n                        var $356 = $360;\n                        break;\n                    case 'BitsMap.new':\n                        var $361 = BitsMap$tie$(Maybe$none, BitsMap$new, BitsMap$set$($355, _val$3, BitsMap$new));\n                        var $356 = $361;\n                        break;\n                };\n                var $347 = $356;\n                break;\n            case 'e':\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $363 = self.lft;\n                        var $364 = self.rgt;\n                        var $365 = BitsMap$tie$(Maybe$some$(_val$3), $363, $364);\n                        var $362 = $365;\n                        break;\n                    case 'BitsMap.new':\n                        var $366 = BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new);\n                        var $362 = $366;\n                        break;\n                };\n                var $347 = $362;\n                break;\n        };\n        return $347;\n    };\n    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const String$eql = a0 => a1 => (a0 === a1);\n\n    function Web$Jogo$command$(_user$1, _cmd$2, _state$3) {\n        var _key$4 = String$to_bits$(_user$1);\n        var self = BitsMap$get$(_key$4, _state$3);\n        switch (self._) {\n            case 'Maybe.some':\n                var $368 = self.value;\n                var self = $368;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $370 = self.fst;\n                        var $371 = self.snd;\n                        var _spd$8 = 3;\n                        var _p_x$9 = $370;\n                        var _p_y$10 = $371;\n                        var self = (_cmd$2 === Web$Jogo$command$A);\n                        if (self) {\n                            var $373 = BitsMap$set$(_key$4, Pair$new$((Math.max(_p_x$9 - _spd$8, 0)), _p_y$10), _state$3);\n                            var $372 = $373;\n                        } else {\n                            var self = (_cmd$2 === Web$Jogo$command$D);\n                            if (self) {\n                                var $375 = BitsMap$set$(_key$4, Pair$new$(((_p_x$9 + _spd$8) >>> 0), _p_y$10), _state$3);\n                                var $374 = $375;\n                            } else {\n                                var self = (_cmd$2 === Web$Jogo$command$W);\n                                if (self) {\n                                    var $377 = BitsMap$set$(_key$4, Pair$new$(_p_x$9, (Math.max(_p_y$10 - _spd$8, 0))), _state$3);\n                                    var $376 = $377;\n                                } else {\n                                    var self = (_cmd$2 === Web$Jogo$command$S);\n                                    if (self) {\n                                        var $379 = BitsMap$set$(_key$4, Pair$new$(_p_x$9, ((_p_y$10 + _spd$8) >>> 0)), _state$3);\n                                        var $378 = $379;\n                                    } else {\n                                        var $380 = _state$3;\n                                        var $378 = $380;\n                                    };\n                                    var $376 = $378;\n                                };\n                                var $374 = $376;\n                            };\n                            var $372 = $374;\n                        };\n                        var $369 = $372;\n                        break;\n                };\n                var $367 = $369;\n                break;\n            case 'Maybe.none':\n                var $381 = BitsMap$set$(_key$4, Pair$new$(128, 128), _state$3);\n                var $367 = $381;\n                break;\n        };\n        return $367;\n    };\n    const Web$Jogo$command = x0 => x1 => x2 => Web$Jogo$command$(x0, x1, x2);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $382 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $382;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$Jogo = (() => {\n        var _img$1 = Image3D$alloc_capacity$(3200);\n        var _init$2 = BitsMap$new;\n        var _draw$3 = (_state$3 => {\n            var _img$4 = Image3D$clear$(_img$1);\n            var _img$5 = (() => {\n                var $386 = _img$4;\n                var $387 = BitsMap$values$(_state$3);\n                let _img$6 = $386;\n                let _pos$5;\n                while ($387._ === 'List.cons') {\n                    _pos$5 = $387.head;\n                    var self = _pos$5;\n                    switch (self._) {\n                        case 'Pair.new':\n                            var $388 = self.fst;\n                            var $389 = self.snd;\n                            var $390 = Image3D$Draw$image$($388, $389, 0, Web$Jogo$hero, _img$6);\n                            var $386 = $390;\n                            break;\n                    };\n                    _img$6 = $386;\n                    $387 = $387.tail;\n                }\n                return _img$6;\n            })();\n            var $384 = App$Render$pix$(_img$5);\n            return $384;\n        });\n        var _when$4 = (_event$4 => _state$5 => {\n            var self = _event$4;\n            switch (self._) {\n                case 'App.Event.xkey':\n                    var $392 = self.down;\n                    var $393 = self.code;\n                    var self = $392;\n                    if (self) {\n                        var self = ($393 === 65);\n                        if (self) {\n                            var $396 = List$cons$(App$Action$post$(Web$Jogo$room, Web$Jogo$command$A), List$nil);\n                            var $395 = $396;\n                        } else {\n                            var self = ($393 === 68);\n                            if (self) {\n                                var $398 = List$cons$(App$Action$post$(Web$Jogo$room, Web$Jogo$command$D), List$nil);\n                                var $397 = $398;\n                            } else {\n                                var self = ($393 === 87);\n                                if (self) {\n                                    var $400 = List$cons$(App$Action$post$(Web$Jogo$room, Web$Jogo$command$W), List$nil);\n                                    var $399 = $400;\n                                } else {\n                                    var self = ($393 === 83);\n                                    if (self) {\n                                        var $402 = List$cons$(App$Action$post$(Web$Jogo$room, Web$Jogo$command$S), List$nil);\n                                        var $401 = $402;\n                                    } else {\n                                        var $403 = List$nil;\n                                        var $401 = $403;\n                                    };\n                                    var $399 = $401;\n                                };\n                                var $397 = $399;\n                            };\n                            var $395 = $397;\n                        };\n                        var $394 = $395;\n                    } else {\n                        var $404 = List$nil;\n                        var $394 = $404;\n                    };\n                    var $391 = $394;\n                    break;\n                case 'App.Event.post':\n                    var $405 = self.addr;\n                    var $406 = self.data;\n                    var $407 = List$cons$(App$Action$print$((\">> received post by \" + ($405 + (\": \" + $406)))), List$cons$(App$Action$state$(Web$Jogo$command$($405, $406, _state$5)), List$nil));\n                    var $391 = $407;\n                    break;\n                case 'App.Event.init':\n                    var $408 = List$cons$(App$Action$print$(\">> started app\"), List$cons$(App$Action$watch$(Web$Jogo$room), List$nil));\n                    var $391 = $408;\n                    break;\n                case 'App.Event.tick':\n                    var $409 = List$nil;\n                    var $391 = $409;\n                    break;\n            };\n            return $391;\n        });\n        var $383 = App$new$(_init$2, _draw$3, _when$4);\n        return $383;\n    })();\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.eql': U32$eql,\n        'Nat.apply': Nat$apply,\n        'Word.i': Word$i,\n        'Word.inc': Word$inc,\n        'U32.inc': U32$inc,\n        'Nat.to_u32': Nat$to_u32,\n        'U32.shr': U32$shr,\n        'U32.needed_depth.go': U32$needed_depth$go,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'U32.sub': U32$sub,\n        'U32.needed_depth': U32$needed_depth,\n        'Word.shift_left1.aux': Word$shift_left1$aux,\n        'Word.shift_left1': Word$shift_left1,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'Word.mul.go': Word$mul$go,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Image3D.new': Image3D$new,\n        'Image3D.alloc_capacity': Image3D$alloc_capacity,\n        'BitsMap.new': BitsMap$new,\n        'Pair': Pair,\n        'Image3D.set_length': Image3D$set_length,\n        'Image3D.clear': Image3D$clear,\n        'List.for': List$for,\n        'List': List,\n        'List.cons': List$cons,\n        'BitsMap.values.go': BitsMap$values$go,\n        'List.nil': List$nil,\n        'BitsMap.values': BitsMap$values,\n        'Image3D.get_len': Image3D$get_len,\n        'U32.for': U32$for,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Pair.new': Pair$new,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.get': Array$get,\n        'Buffer32.get': Buffer32$get,\n        'Image3D.get_pos': Image3D$get_pos,\n        'U32.add': U32$add,\n        'Image3D.get_col': Image3D$get_col,\n        'Word.and': Word$and,\n        'U32.and': U32$and,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'U32.shl': U32$shl,\n        'Pos32.new': Pos32$new,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'Image3D.set_pos': Image3D$set_pos,\n        'Image3D.set_col': Image3D$set_col,\n        'Image3D.push': Image3D$push,\n        'Image3D.Draw.image': Image3D$Draw$image,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'U32.length': U32$length,\n        'U32.slice': U32$slice,\n        'U32.read_base': U32$read_base,\n        'Image3D.parse_byte': Image3D$parse_byte,\n        'Col32.new': Col32$new,\n        'Image3D.parse': Image3D$parse,\n        'Web.Jogo.hero.hex': Web$Jogo$hero$hex,\n        'Web.Jogo.hero': Web$Jogo$hero,\n        'App.Render.pix': App$Render$pix,\n        'App.Action': App$Action,\n        'BitsMap': BitsMap,\n        'App.Action.print': App$Action$print,\n        'App.Action.watch': App$Action$watch,\n        'Web.Jogo.room': Web$Jogo$room,\n        'U16.eql': U16$eql,\n        'App.Action.post': App$Action$post,\n        'Web.Jogo.command.A': Web$Jogo$command$A,\n        'Web.Jogo.command.D': Web$Jogo$command$D,\n        'Web.Jogo.command.W': Web$Jogo$command$W,\n        'Web.Jogo.command.S': Web$Jogo$command$S,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'App.Action.state': App$Action$state,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Maybe': Maybe,\n        'Maybe.none': Maybe$none,\n        'BitsMap.get': BitsMap$get,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'BitsMap.set': BitsMap$set,\n        'Bool.and': Bool$and,\n        'String.eql': String$eql,\n        'Web.Jogo.command': Web$Jogo$command,\n        'App.new': App$new,\n        'Web.Jogo': Web$Jogo,\n    };\n})();"],"sourceRoot":""}