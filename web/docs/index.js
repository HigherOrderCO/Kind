/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 596:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var lib = __webpack_require__(746);
var sig = __webpack_require__(216);
var WebSocket = __webpack_require__(792);

module.exports = function client({url = "ws://localhost:7171", key = "0x0000000000000000000000000000000000000000000000000000000000000001"} = {}) {
  var ws = new WebSocket(url);
  var Posts = {};
  var watching = {};

  // Waits ws to be ready and then sends buffer to server
  function ws_send(buffer) {
    if (ws.readyState === 1) {
      ws.send(buffer);
    } else {
      setTimeout(() => ws_send(buffer), 20);
    }
  }

  var on_init_callback = null;
  var on_post_callback = null;

  // Sets the on_init callback
  function on_init(callback) {
    on_init_callback = callback;
  }

  // Sets the on_post callback
  function on_post(callback) {
    on_post_callback = callback;
  }

  // Sends a signed post to a room on the server
  function send_post(post_room, post_data, priv_key = key) {
    var priv_key = lib.check_hex(256, priv_key);
    var post_room = lib.check_hex(48, post_room);
    var post_data = lib.check_hex(256, post_data);
    var post_hash = sig.keccak(lib.hexs_to_bytes([post_room, post_data]));
    var post_sign = sig.signMessage(post_hash, priv_key);

    var msge_buff = lib.hexs_to_bytes([
      lib.u8_to_hex(lib.POST),
      post_room,
      post_data,
      post_sign,
    ]);
    ws_send(msge_buff);
  };

  // Starts watching a room
  function watch_room(room_name) {
    if (!watching[room_name]) {
      watching[room_name] = true;
      var room_name = lib.check_hex(48, room_name);
      var msge_buff = lib.hexs_to_bytes([
        lib.u8_to_hex(lib.WATCH),
        room_name,
      ]);
      Posts[room_name] = [];
      ws_send(msge_buff); 
    }
  };

  // Stops watching a room
  function unwatch_room(room_name) {
    if (watching[room_name]) {
      watching[room_name] = false;
      var room_name = lib.check_hex(48, room_name);
      var msge_buff = lib.hexs_to_bytes([
        lib.u8_to_hex(lib.UNWATCH),
        room_name,
      ]);
      ws_send(msge_buff);
    }
  };

  ws.binaryType = "arraybuffer";

  ws.onopen = function() {
    if (on_init_callback) {
      on_init_callback();
    }
  };

  ws.onmessage = (msge) => {
    var msge = new Uint8Array(msge.data);
    if (msge[0] === lib.SHOW) {
      var room = lib.bytes_to_hex(msge.slice(1, 7));
      var time = lib.bytes_to_hex(msge.slice(7, 13));
      var addr = lib.bytes_to_hex(msge.slice(13, 33));
      var data = lib.bytes_to_hex(msge.slice(33, 65));
      Posts[room].push({time, addr, data});
      if (on_post_callback) {
        on_post_callback({room, time, addr, data}, Posts);
      }
    };
  };

  return {
    on_init,
    on_post,
    send_post,
    watch_room,
    unwatch_room,
    lib,
  };
};



/***/ }),

/***/ 746:
/***/ ((module) => {

const WATCH = 0;
const UNWATCH = 1;
const POST = 2;
const SHOW = 3;

// type RoomID    = U48
// type PostID    = U48
// type Time      = U48
// type Address   = U160
// type PostData  = U304
// type Signature = U520
//
// type Method
//   = WATCH(rmid: U48)                                   -- value = 00
//   | UNWATCH(rmid: U48)                                 -- value = 01
//   | POST(rmid: U48, data: U304, sign: U520)            -- value = 10
//   | SHOW(rmid: U48, time: U48, addr: U160, data: U304) -- value = 11

function hex_to_bytes(hex) {
  var arr = [];
  for (var i = 0; i < (hex.length-2)/2; ++i) {
    arr.push((parseInt(hex[2+i*2+0],16)<<4)|parseInt(hex[2+i*2+1],16));
  };
  return new Uint8Array(arr);
};

const hex_char = "0123456789abcdef".split("");
function bytes_to_hex(buf) {
  var hex = "0x";
  for (var i = 0; i < buf.length; ++i) {
    hex += hex_char[buf[i]>>>4] + hex_char[buf[i]&0xF];
  };
  return hex;
};

function hex_join(arr) {
  var res = "0x";
  for (var i = 0; i < arr.length; ++i) {
    res += arr[i].slice(2);
  }
  return res;
};

function hexs_to_bytes(arr) {
  return hex_to_bytes(hex_join(arr));
};

function u8_to_hex(num) {
  return "0x" + ("00" + num.toString(16)).slice(-2);
};

function hex_to_u8(hex) {
  return parseInt(hex.slice(2), 16);
};

function hex_to_u48(hex) {
  return parseInt(hex.slice(-48), 16);
};

function u48_to_hex(num) {
  var hex = "0x";
  for (var i = 0; i < 12; ++i) {
    hex += hex_char[(num / (2**((12-i-1)*4))) & 0xF];
  };
  return hex;
};

function check_hex(bits, hex) {
  if (typeof hex !== "string" || !/^0x[a-fA-F0-9]*$/.test(hex)) {
    return null;
  };
  while ((hex.length - 2) * 4 < bits) {
    hex = "0x0" + hex.slice(2);
  };
  if ((hex.length - 2) * 4 > bits) {
    hex = hex.slice(0, Math.floor(bits / 4) + 2);
  }
  return hex;
};

var utf8_encoder = new TextEncoder("utf-8");
function string_to_bytes(str) {
  return utf8_encoder.encode(str);
};

var utf8_decoder = new TextDecoder("utf-8");
function bytes_to_string(buf) {
  return utf8_decoder.decode(buf);
};

function string_to_hex(str) {
  return bytes_to_hex(string_to_bytes(str));
};

function hex_to_string(hex) {
  return bytes_to_string(hex_to_bytes(hex));
};

module.exports = {
  WATCH,
  UNWATCH,
  POST,
  SHOW,
  hex_to_bytes,
  bytes_to_hex,
  hexs_to_bytes,
  hex_join,
  u8_to_hex,
  hex_to_u8,
  u48_to_hex,
  hex_to_u48,
  string_to_hex,
  hex_to_string,
  check_hex,
};


/***/ }),

/***/ 787:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "237db229f1e6a224797029452b2c75f0.png");

/***/ }),

/***/ 86:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => (/* binding */ h)
/* harmony export */ });
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(285);


var isArray = Array.isArray;
function isStringOrNumber(o) {
    var type = typeof o;
    return type === 'string' || type === 'number';
}
function isString(o) {
    return typeof o === 'string';
}
function isUndefined(o) {
    return o === void 0;
}

var classIdSplit = /([.#]?[a-zA-Z0-9_:-]+)/;
var notClassId = /^\.|#/;
function parseTag(tag, props) {
    if (!tag) {
        return 'div';
    }
    if (tag === inferno__WEBPACK_IMPORTED_MODULE_0__.Fragment) {
        return tag;
    }
    var noId = props && isUndefined(props.id);
    var tagParts = tag.split(classIdSplit);
    var tagName = null;
    if (notClassId.test(tagParts[1])) {
        tagName = 'div';
    }
    var classes;
    for (var i = 0, len = tagParts.length; i < len; ++i) {
        var part = tagParts[i];
        if (!part) {
            continue;
        }
        var type = part.charAt(0);
        if (!tagName) {
            tagName = part;
        }
        else if (type === '.') {
            if (classes === void 0) {
                classes = [];
            }
            classes.push(part.substring(1, part.length));
        }
        else if (type === '#' && noId) {
            props.id = part.substring(1, part.length);
        }
    }
    if (classes) {
        if (props.className) {
            classes.push(props.className);
        }
        props.className = classes.join(' ');
    }
    return tagName || 'div';
}
function isChildren(x) {
    return isStringOrNumber(x) || (x && isArray(x));
}
/**
 * Creates virtual node
 * @param {string|VNode|Function} _tag Name for virtual node
 * @param {object=} _props Additional properties for virtual node
 * @param {string|number|VNode|Array<string|number|VNode>|null=} _children Optional children for virtual node
 * @returns {VNode} returns new virtual node
 */
function h(_tag, _props, _children) {
    // If a child array or text node are passed as the second argument, shift them
    if (!_children && isChildren(_props)) {
        _children = _props;
        _props = {};
    }
    var isElement = isString(_tag);
    _props = _props || {};
    var tag = isElement ? parseTag(_tag, _props) : _tag;
    var newProps = {};
    var key = null;
    var ref = null;
    var children = null;
    var className = null;
    for (var prop in _props) {
        if (isElement && (prop === 'className' || prop === 'class')) {
            className = _props[prop];
        }
        else if (prop === 'key') {
            key = _props[prop];
        }
        else if (prop === 'ref') {
            ref = _props[prop];
        }
        else if (prop === 'hooks') {
            ref = _props[prop];
        }
        else if (prop === 'children') {
            children = _props[prop];
        }
        else if (!isElement && prop.substr(0, 11) === 'onComponent') {
            if (!ref) {
                ref = {};
            }
            ref[prop] = _props[prop];
        }
        else {
            newProps[prop] = _props[prop];
        }
    }
    if (isElement) {
        var flags = (0,inferno__WEBPACK_IMPORTED_MODULE_0__.getFlagsForElementVnode)(tag);
        if (flags & 8192 /* Fragment */) {
            return (0,inferno__WEBPACK_IMPORTED_MODULE_0__.createFragment)(_children || children, 0 /* UnknownChildren */, key);
        }
        if (newProps.contenteditable !== void 0) {
            flags |= 4096 /* ContentEditable */;
        }
        return (0,inferno__WEBPACK_IMPORTED_MODULE_0__.createVNode)(flags, tag, className, _children || children, 0 /* UnknownChildren */, newProps, key, ref);
    }
    if (children || _children) {
        newProps.children = children || _children;
    }
    return (0,inferno__WEBPACK_IMPORTED_MODULE_0__.createComponentVNode)(2 /* ComponentUnknown */, tag, newProps, key, ref);
}




/***/ }),

/***/ 285:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Component": () => (/* reexport */ Component),
  "EMPTY_OBJ": () => (/* reexport */ EMPTY_OBJ),
  "Fragment": () => (/* reexport */ Fragment),
  "_CI": () => (/* reexport */ createClassComponentInstance),
  "_HI": () => (/* reexport */ normalizeRoot),
  "_M": () => (/* reexport */ mount),
  "_MCCC": () => (/* reexport */ mountClassComponentCallbacks),
  "_ME": () => (/* reexport */ mountElement),
  "_MFCC": () => (/* reexport */ mountFunctionalComponentCallbacks),
  "_MP": () => (/* reexport */ mountProps),
  "_MR": () => (/* reexport */ mountRef),
  "_RFC": () => (/* reexport */ renderFunctionalComponent),
  "__render": () => (/* reexport */ __render),
  "createComponentVNode": () => (/* reexport */ createComponentVNode),
  "createFragment": () => (/* reexport */ createFragment),
  "createPortal": () => (/* reexport */ createPortal),
  "createRef": () => (/* reexport */ createRef),
  "createRenderer": () => (/* reexport */ createRenderer),
  "createTextVNode": () => (/* reexport */ createTextVNode),
  "createVNode": () => (/* reexport */ createVNode),
  "directClone": () => (/* reexport */ directClone),
  "findDOMfromVNode": () => (/* reexport */ findDOMfromVNode),
  "forwardRef": () => (/* reexport */ forwardRef),
  "getFlagsForElementVnode": () => (/* reexport */ getFlagsForElementVnode),
  "linkEvent": () => (/* reexport */ linkEvent),
  "normalizeProps": () => (/* reexport */ normalizeProps),
  "options": () => (/* reexport */ options),
  "render": () => (/* reexport */ render),
  "rerender": () => (/* reexport */ rerender),
  "version": () => (/* reexport */ version)
});

;// CONCATENATED MODULE: ./node_modules/inferno/dist/index.esm.js
var isArray = Array.isArray;
function isStringOrNumber(o) {
    var type = typeof o;
    return type === 'string' || type === 'number';
}
function isNullOrUndef(o) {
    return o === void 0 || o === null;
}
function isInvalid(o) {
    return o === null || o === false || o === true || o === void 0;
}
function isFunction(o) {
    return typeof o === 'function';
}
function isString(o) {
    return typeof o === 'string';
}
function isNumber(o) {
    return typeof o === 'number';
}
function isNull(o) {
    return o === null;
}
function isUndefined(o) {
    return o === void 0;
}
function combineFrom(first, second) {
    var out = {};
    if (first) {
        for (var key in first) {
            out[key] = first[key];
        }
    }
    if (second) {
        for (var key$1 in second) {
            out[key$1] = second[key$1];
        }
    }
    return out;
}

/**
 * Links given data to event as first parameter
 * @param {*} data data to be linked, it will be available in function as first parameter
 * @param {Function} event Function to be called when event occurs
 * @returns {{data: *, event: Function}}
 */
function linkEvent(data, event) {
    if (isFunction(event)) {
        return { data: data, event: event };
    }
    return null; // Return null when event is invalid, to avoid creating unnecessary event handlers
}
// object.event should always be function, otherwise its badly created object.
function isLinkEventObject(o) {
    return !isNull(o) && typeof o === 'object';
}

// We need EMPTY_OBJ defined in one place.
// Its used for comparison so we cant inline it into shared
var EMPTY_OBJ = {};
var Fragment = '$F';
function normalizeEventName(name) {
    return name.substr(2).toLowerCase();
}
function appendChild(parentDOM, dom) {
    parentDOM.appendChild(dom);
}
function insertOrAppend(parentDOM, newNode, nextNode) {
    if (isNull(nextNode)) {
        appendChild(parentDOM, newNode);
    }
    else {
        parentDOM.insertBefore(newNode, nextNode);
    }
}
function documentCreateElement(tag, isSVG) {
    if (isSVG) {
        return document.createElementNS('http://www.w3.org/2000/svg', tag);
    }
    return document.createElement(tag);
}
function replaceChild(parentDOM, newDom, lastDom) {
    parentDOM.replaceChild(newDom, lastDom);
}
function removeChild(parentDOM, childNode) {
    parentDOM.removeChild(childNode);
}
function callAll(arrayFn) {
    for (var i = 0; i < arrayFn.length; i++) {
        arrayFn[i]();
    }
}
function findChildVNode(vNode, startEdge, flags) {
    var children = vNode.children;
    if (flags & 4 /* ComponentClass */) {
        return children.$LI;
    }
    if (flags & 8192 /* Fragment */) {
        return vNode.childFlags === 2 /* HasVNodeChildren */ ? children : children[startEdge ? 0 : children.length - 1];
    }
    return children;
}
function findDOMfromVNode(vNode, startEdge) {
    var flags;
    while (vNode) {
        flags = vNode.flags;
        if (flags & 2033 /* DOMRef */) {
            return vNode.dom;
        }
        vNode = findChildVNode(vNode, startEdge, flags);
    }
    return null;
}
function removeVNodeDOM(vNode, parentDOM) {
    do {
        var flags = vNode.flags;
        if (flags & 2033 /* DOMRef */) {
            removeChild(parentDOM, vNode.dom);
            return;
        }
        var children = vNode.children;
        if (flags & 4 /* ComponentClass */) {
            vNode = children.$LI;
        }
        if (flags & 8 /* ComponentFunction */) {
            vNode = children;
        }
        if (flags & 8192 /* Fragment */) {
            if (vNode.childFlags === 2 /* HasVNodeChildren */) {
                vNode = children;
            }
            else {
                for (var i = 0, len = children.length; i < len; ++i) {
                    removeVNodeDOM(children[i], parentDOM);
                }
                return;
            }
        }
    } while (vNode);
}
function moveVNodeDOM(vNode, parentDOM, nextNode) {
    do {
        var flags = vNode.flags;
        if (flags & 2033 /* DOMRef */) {
            insertOrAppend(parentDOM, vNode.dom, nextNode);
            return;
        }
        var children = vNode.children;
        if (flags & 4 /* ComponentClass */) {
            vNode = children.$LI;
        }
        if (flags & 8 /* ComponentFunction */) {
            vNode = children;
        }
        if (flags & 8192 /* Fragment */) {
            if (vNode.childFlags === 2 /* HasVNodeChildren */) {
                vNode = children;
            }
            else {
                for (var i = 0, len = children.length; i < len; ++i) {
                    moveVNodeDOM(children[i], parentDOM, nextNode);
                }
                return;
            }
        }
    } while (vNode);
}
function createDerivedState(instance, nextProps, state) {
    if (instance.constructor.getDerivedStateFromProps) {
        return combineFrom(state, instance.constructor.getDerivedStateFromProps(nextProps, state));
    }
    return state;
}
var renderCheck = {
    v: false
};
var options = {
    componentComparator: null,
    createVNode: null,
    renderComplete: null
};
function setTextContent(dom, children) {
    dom.textContent = children;
}
// Calling this function assumes, nextValue is linkEvent
function isLastValueSameLinkEvent(lastValue, nextValue) {
    return (isLinkEventObject(lastValue) &&
        lastValue.event === nextValue.event &&
        lastValue.data === nextValue.data);
}
function mergeUnsetProperties(to, from) {
    for (var propName in from) {
        if (isUndefined(to[propName])) {
            to[propName] = from[propName];
        }
    }
    return to;
}
function safeCall1(method, arg1) {
    return !!isFunction(method) && (method(arg1), true);
}

var keyPrefix = '$';
function V(childFlags, children, className, flags, key, props, ref, type) {
    this.childFlags = childFlags;
    this.children = children;
    this.className = className;
    this.dom = null;
    this.flags = flags;
    this.key = key === void 0 ? null : key;
    this.props = props === void 0 ? null : props;
    this.ref = ref === void 0 ? null : ref;
    this.type = type;
}
function createVNode(flags, type, className, children, childFlags, props, key, ref) {
    var childFlag = childFlags === void 0 ? 1 /* HasInvalidChildren */ : childFlags;
    var vNode = new V(childFlag, children, className, flags, key, props, ref, type);
    if (options.createVNode) {
        options.createVNode(vNode);
    }
    if (childFlag === 0 /* UnknownChildren */) {
        normalizeChildren(vNode, vNode.children);
    }
    return vNode;
}
function mergeDefaultHooks(flags, type, ref) {
    if (flags & 4 /* ComponentClass */) {
        return ref;
    }
    var defaultHooks = (flags & 32768 /* ForwardRef */ ? type.render : type).defaultHooks;
    if (isNullOrUndef(defaultHooks)) {
        return ref;
    }
    if (isNullOrUndef(ref)) {
        return defaultHooks;
    }
    return mergeUnsetProperties(ref, defaultHooks);
}
function mergeDefaultProps(flags, type, props) {
    // set default props
    var defaultProps = (flags & 32768 /* ForwardRef */ ? type.render : type).defaultProps;
    if (isNullOrUndef(defaultProps)) {
        return props;
    }
    if (isNullOrUndef(props)) {
        return combineFrom(defaultProps, null);
    }
    return mergeUnsetProperties(props, defaultProps);
}
function resolveComponentFlags(flags, type) {
    if (flags & 12 /* ComponentKnown */) {
        return flags;
    }
    if (type.prototype && type.prototype.render) {
        return 4 /* ComponentClass */;
    }
    if (type.render) {
        return 32776 /* ForwardRefComponent */;
    }
    return 8 /* ComponentFunction */;
}
function createComponentVNode(flags, type, props, key, ref) {
    flags = resolveComponentFlags(flags, type);
    var vNode = new V(1 /* HasInvalidChildren */, null, null, flags, key, mergeDefaultProps(flags, type, props), mergeDefaultHooks(flags, type, ref), type);
    if (options.createVNode) {
        options.createVNode(vNode);
    }
    return vNode;
}
function createTextVNode(text, key) {
    return new V(1 /* HasInvalidChildren */, isNullOrUndef(text) || text === true || text === false ? '' : text, null, 16 /* Text */, key, null, null, null);
}
function createFragment(children, childFlags, key) {
    var fragment = createVNode(8192 /* Fragment */, 8192 /* Fragment */, null, children, childFlags, null, key, null);
    switch (fragment.childFlags) {
        case 1 /* HasInvalidChildren */:
            fragment.children = createVoidVNode();
            fragment.childFlags = 2 /* HasVNodeChildren */;
            break;
        case 16 /* HasTextChildren */:
            fragment.children = [createTextVNode(children)];
            fragment.childFlags = 4 /* HasNonKeyedChildren */;
            break;
    }
    return fragment;
}
function normalizeProps(vNode) {
    var props = vNode.props;
    if (props) {
        var flags = vNode.flags;
        if (flags & 481 /* Element */) {
            if (props.children !== void 0 && isNullOrUndef(vNode.children)) {
                normalizeChildren(vNode, props.children);
            }
            if (props.className !== void 0) {
                vNode.className = props.className || null;
                props.className = undefined;
            }
        }
        if (props.key !== void 0) {
            vNode.key = props.key;
            props.key = undefined;
        }
        if (props.ref !== void 0) {
            if (flags & 8 /* ComponentFunction */) {
                vNode.ref = combineFrom(vNode.ref, props.ref);
            }
            else {
                vNode.ref = props.ref;
            }
            props.ref = undefined;
        }
    }
    return vNode;
}
/*
 * Fragment is different than normal vNode,
 * because when it needs to be cloned we need to clone its children too
 * But not normalize, because otherwise those possibly get KEY and re-mount
 */
function cloneFragment(vNodeToClone) {
    var oldChildren = vNodeToClone.children;
    var childFlags = vNodeToClone.childFlags;
    return createFragment(childFlags === 2 /* HasVNodeChildren */ ? directClone(oldChildren) : oldChildren.map(directClone), childFlags, vNodeToClone.key);
}
function directClone(vNodeToClone) {
    var flags = vNodeToClone.flags & -16385 /* ClearInUse */;
    var props = vNodeToClone.props;
    if (flags & 14 /* Component */) {
        if (!isNull(props)) {
            var propsToClone = props;
            props = {};
            for (var key in propsToClone) {
                props[key] = propsToClone[key];
            }
        }
    }
    if ((flags & 8192 /* Fragment */) === 0) {
        return new V(vNodeToClone.childFlags, vNodeToClone.children, vNodeToClone.className, flags, vNodeToClone.key, props, vNodeToClone.ref, vNodeToClone.type);
    }
    return cloneFragment(vNodeToClone);
}
function createVoidVNode() {
    return createTextVNode('', null);
}
function createPortal(children, container) {
    var normalizedRoot = normalizeRoot(children);
    return createVNode(1024 /* Portal */, 1024 /* Portal */, null, normalizedRoot, 0 /* UnknownChildren */, null, normalizedRoot.key, container);
}
function _normalizeVNodes(nodes, result, index, currentKey) {
    for (var len = nodes.length; index < len; index++) {
        var n = nodes[index];
        if (!isInvalid(n)) {
            var newKey = currentKey + keyPrefix + index;
            if (isArray(n)) {
                _normalizeVNodes(n, result, 0, newKey);
            }
            else {
                if (isStringOrNumber(n)) {
                    n = createTextVNode(n, newKey);
                }
                else {
                    var oldKey = n.key;
                    var isPrefixedKey = isString(oldKey) && oldKey[0] === keyPrefix;
                    if (n.flags & 81920 /* InUseOrNormalized */ || isPrefixedKey) {
                        n = directClone(n);
                    }
                    n.flags |= 65536 /* Normalized */;
                    if (!isPrefixedKey) {
                        if (isNull(oldKey)) {
                            n.key = newKey;
                        }
                        else {
                            n.key = currentKey + oldKey;
                        }
                    }
                    else if (oldKey.substring(0, currentKey.length) !== currentKey) {
                        n.key = currentKey + oldKey;
                    }
                }
                result.push(n);
            }
        }
    }
}
function getFlagsForElementVnode(type) {
    switch (type) {
        case 'svg':
            return 32 /* SvgElement */;
        case 'input':
            return 64 /* InputElement */;
        case 'select':
            return 256 /* SelectElement */;
        case 'textarea':
            return 128 /* TextareaElement */;
        case Fragment:
            return 8192 /* Fragment */;
        default:
            return 1 /* HtmlElement */;
    }
}
function normalizeChildren(vNode, children) {
    var newChildren;
    var newChildFlags = 1 /* HasInvalidChildren */;
    // Don't change children to match strict equal (===) true in patching
    if (isInvalid(children)) {
        newChildren = children;
    }
    else if (isStringOrNumber(children)) {
        newChildFlags = 16 /* HasTextChildren */;
        newChildren = children;
    }
    else if (isArray(children)) {
        var len = children.length;
        for (var i = 0; i < len; ++i) {
            var n = children[i];
            if (isInvalid(n) || isArray(n)) {
                newChildren = newChildren || children.slice(0, i);
                _normalizeVNodes(children, newChildren, i, '');
                break;
            }
            else if (isStringOrNumber(n)) {
                newChildren = newChildren || children.slice(0, i);
                newChildren.push(createTextVNode(n, keyPrefix + i));
            }
            else {
                var key = n.key;
                var needsCloning = (n.flags & 81920 /* InUseOrNormalized */) > 0;
                var isNullKey = isNull(key);
                var isPrefixed = isString(key) && key[0] === keyPrefix;
                if (needsCloning || isNullKey || isPrefixed) {
                    newChildren = newChildren || children.slice(0, i);
                    if (needsCloning || isPrefixed) {
                        n = directClone(n);
                    }
                    if (isNullKey || isPrefixed) {
                        n.key = keyPrefix + i;
                    }
                    newChildren.push(n);
                }
                else if (newChildren) {
                    newChildren.push(n);
                }
                n.flags |= 65536 /* Normalized */;
            }
        }
        newChildren = newChildren || children;
        if (newChildren.length === 0) {
            newChildFlags = 1 /* HasInvalidChildren */;
        }
        else {
            newChildFlags = 8 /* HasKeyedChildren */;
        }
    }
    else {
        newChildren = children;
        newChildren.flags |= 65536 /* Normalized */;
        if (children.flags & 81920 /* InUseOrNormalized */) {
            newChildren = directClone(children);
        }
        newChildFlags = 2 /* HasVNodeChildren */;
    }
    vNode.children = newChildren;
    vNode.childFlags = newChildFlags;
    return vNode;
}
function normalizeRoot(input) {
    if (isInvalid(input) || isStringOrNumber(input)) {
        return createTextVNode(input, null);
    }
    if (isArray(input)) {
        return createFragment(input, 0 /* UnknownChildren */, null);
    }
    return input.flags & 16384 /* InUse */ ? directClone(input) : input;
}

var xlinkNS = 'http://www.w3.org/1999/xlink';
var xmlNS = 'http://www.w3.org/XML/1998/namespace';
var namespaces = {
    'xlink:actuate': xlinkNS,
    'xlink:arcrole': xlinkNS,
    'xlink:href': xlinkNS,
    'xlink:role': xlinkNS,
    'xlink:show': xlinkNS,
    'xlink:title': xlinkNS,
    'xlink:type': xlinkNS,
    'xml:base': xmlNS,
    'xml:lang': xmlNS,
    'xml:space': xmlNS
};

function getDelegatedEventObject(v) {
    return {
        onClick: v,
        onDblClick: v,
        onFocusIn: v,
        onFocusOut: v,
        onKeyDown: v,
        onKeyPress: v,
        onKeyUp: v,
        onMouseDown: v,
        onMouseMove: v,
        onMouseUp: v,
        onTouchEnd: v,
        onTouchMove: v,
        onTouchStart: v
    };
}
var attachedEventCounts = getDelegatedEventObject(0);
var attachedEvents = getDelegatedEventObject(null);
var syntheticEvents = getDelegatedEventObject(true);
function updateOrAddSyntheticEvent(name, dom) {
    var eventsObject = dom.$EV;
    if (!eventsObject) {
        eventsObject = dom.$EV = getDelegatedEventObject(null);
    }
    if (!eventsObject[name]) {
        if (++attachedEventCounts[name] === 1) {
            attachedEvents[name] = attachEventToDocument(name);
        }
    }
    return eventsObject;
}
function unmountSyntheticEvent(name, dom) {
    var eventsObject = dom.$EV;
    if (eventsObject && eventsObject[name]) {
        if (--attachedEventCounts[name] === 0) {
            document.removeEventListener(normalizeEventName(name), attachedEvents[name]);
            attachedEvents[name] = null;
        }
        eventsObject[name] = null;
    }
}
function handleSyntheticEvent(name, lastEvent, nextEvent, dom) {
    if (isFunction(nextEvent)) {
        updateOrAddSyntheticEvent(name, dom)[name] = nextEvent;
    }
    else if (isLinkEventObject(nextEvent)) {
        if (isLastValueSameLinkEvent(lastEvent, nextEvent)) {
            return;
        }
        updateOrAddSyntheticEvent(name, dom)[name] = nextEvent;
    }
    else {
        unmountSyntheticEvent(name, dom);
    }
}
// When browsers fully support event.composedPath we could loop it through instead of using parentNode property
function getTargetNode(event) {
    return isFunction(event.composedPath) ? event.composedPath()[0] : event.target;
}
function dispatchEvents(event, isClick, name, eventData) {
    var dom = getTargetNode(event);
    do {
        // Html Nodes can be nested fe: span inside button in that scenario browser does not handle disabled attribute on parent,
        // because the event listener is on document.body
        // Don't process clicks on disabled elements
        if (isClick && dom.disabled) {
            return;
        }
        var eventsObject = dom.$EV;
        if (eventsObject) {
            var currentEvent = eventsObject[name];
            if (currentEvent) {
                // linkEvent object
                eventData.dom = dom;
                currentEvent.event ? currentEvent.event(currentEvent.data, event) : currentEvent(event);
                if (event.cancelBubble) {
                    return;
                }
            }
        }
        dom = dom.parentNode;
    } while (!isNull(dom));
}
function stopPropagation() {
    this.cancelBubble = true;
    if (!this.immediatePropagationStopped) {
        this.stopImmediatePropagation();
    }
}
function isDefaultPrevented() {
    return this.defaultPrevented;
}
function isPropagationStopped() {
    return this.cancelBubble;
}
function extendEventProperties(event) {
    // Event data needs to be object to save reference to currentTarget getter
    var eventData = {
        dom: document
    };
    event.isDefaultPrevented = isDefaultPrevented;
    event.isPropagationStopped = isPropagationStopped;
    event.stopPropagation = stopPropagation;
    Object.defineProperty(event, 'currentTarget', {
        configurable: true,
        get: function get() {
            return eventData.dom;
        }
    });
    return eventData;
}
function rootClickEvent(name) {
    return function (event) {
        if (event.button !== 0) {
            // Firefox incorrectly triggers click event for mid/right mouse buttons.
            // This bug has been active for 17 years.
            // https://bugzilla.mozilla.org/show_bug.cgi?id=184051
            event.stopPropagation();
            return;
        }
        dispatchEvents(event, true, name, extendEventProperties(event));
    };
}
function rootEvent(name) {
    return function (event) {
        dispatchEvents(event, false, name, extendEventProperties(event));
    };
}
function attachEventToDocument(name) {
    var attachedEvent = name === 'onClick' || name === 'onDblClick' ? rootClickEvent(name) : rootEvent(name);
    document.addEventListener(normalizeEventName(name), attachedEvent);
    return attachedEvent;
}

function isSameInnerHTML(dom, innerHTML) {
    var tempdom = document.createElement('i');
    tempdom.innerHTML = innerHTML;
    return tempdom.innerHTML === dom.innerHTML;
}

function triggerEventListener(props, methodName, e) {
    if (props[methodName]) {
        var listener = props[methodName];
        if (listener.event) {
            listener.event(listener.data, e);
        }
        else {
            listener(e);
        }
    }
    else {
        var nativeListenerName = methodName.toLowerCase();
        if (props[nativeListenerName]) {
            props[nativeListenerName](e);
        }
    }
}
function createWrappedFunction(methodName, applyValue) {
    var fnMethod = function (e) {
        var vNode = this.$V;
        // If vNode is gone by the time event fires, no-op
        if (!vNode) {
            return;
        }
        var props = vNode.props || EMPTY_OBJ;
        var dom = vNode.dom;
        if (isString(methodName)) {
            triggerEventListener(props, methodName, e);
        }
        else {
            for (var i = 0; i < methodName.length; ++i) {
                triggerEventListener(props, methodName[i], e);
            }
        }
        if (isFunction(applyValue)) {
            var newVNode = this.$V;
            var newProps = newVNode.props || EMPTY_OBJ;
            applyValue(newProps, dom, false, newVNode);
        }
    };
    Object.defineProperty(fnMethod, 'wrapped', {
        configurable: false,
        enumerable: false,
        value: true,
        writable: false
    });
    return fnMethod;
}

function attachEvent(dom, eventName, handler) {
    var previousKey = "$" + eventName;
    var previousArgs = dom[previousKey];
    if (previousArgs) {
        if (previousArgs[1].wrapped) {
            return;
        }
        dom.removeEventListener(previousArgs[0], previousArgs[1]);
        dom[previousKey] = null;
    }
    if (isFunction(handler)) {
        dom.addEventListener(eventName, handler);
        dom[previousKey] = [eventName, handler];
    }
}

function isCheckedType(type) {
    return type === 'checkbox' || type === 'radio';
}
var onTextInputChange = createWrappedFunction('onInput', applyValueInput);
var wrappedOnChange = createWrappedFunction(['onClick', 'onChange'], applyValueInput);
/* tslint:disable-next-line:no-empty */
function emptywrapper(event) {
    event.stopPropagation();
}
emptywrapper.wrapped = true;
function inputEvents(dom, nextPropsOrEmpty) {
    if (isCheckedType(nextPropsOrEmpty.type)) {
        attachEvent(dom, 'change', wrappedOnChange);
        attachEvent(dom, 'click', emptywrapper);
    }
    else {
        attachEvent(dom, 'input', onTextInputChange);
    }
}
function applyValueInput(nextPropsOrEmpty, dom) {
    var type = nextPropsOrEmpty.type;
    var value = nextPropsOrEmpty.value;
    var checked = nextPropsOrEmpty.checked;
    var multiple = nextPropsOrEmpty.multiple;
    var defaultValue = nextPropsOrEmpty.defaultValue;
    var hasValue = !isNullOrUndef(value);
    if (type && type !== dom.type) {
        dom.setAttribute('type', type);
    }
    if (!isNullOrUndef(multiple) && multiple !== dom.multiple) {
        dom.multiple = multiple;
    }
    if (!isNullOrUndef(defaultValue) && !hasValue) {
        dom.defaultValue = defaultValue + '';
    }
    if (isCheckedType(type)) {
        if (hasValue) {
            dom.value = value;
        }
        if (!isNullOrUndef(checked)) {
            dom.checked = checked;
        }
    }
    else {
        if (hasValue && dom.value !== value) {
            dom.defaultValue = value;
            dom.value = value;
        }
        else if (!isNullOrUndef(checked)) {
            dom.checked = checked;
        }
    }
}

function updateChildOptions(vNode, value) {
    if (vNode.type === 'option') {
        updateChildOption(vNode, value);
    }
    else {
        var children = vNode.children;
        var flags = vNode.flags;
        if (flags & 4 /* ComponentClass */) {
            updateChildOptions(children.$LI, value);
        }
        else if (flags & 8 /* ComponentFunction */) {
            updateChildOptions(children, value);
        }
        else if (vNode.childFlags === 2 /* HasVNodeChildren */) {
            updateChildOptions(children, value);
        }
        else if (vNode.childFlags & 12 /* MultipleChildren */) {
            for (var i = 0, len = children.length; i < len; ++i) {
                updateChildOptions(children[i], value);
            }
        }
    }
}
function updateChildOption(vNode, value) {
    var props = vNode.props || EMPTY_OBJ;
    var dom = vNode.dom;
    // we do this as multiple may have changed
    dom.value = props.value;
    if (props.value === value || (isArray(value) && value.indexOf(props.value) !== -1)) {
        dom.selected = true;
    }
    else if (!isNullOrUndef(value) || !isNullOrUndef(props.selected)) {
        dom.selected = props.selected || false;
    }
}
var onSelectChange = createWrappedFunction('onChange', applyValueSelect);
function selectEvents(dom) {
    attachEvent(dom, 'change', onSelectChange);
}
function applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode) {
    var multiplePropInBoolean = Boolean(nextPropsOrEmpty.multiple);
    if (!isNullOrUndef(nextPropsOrEmpty.multiple) && multiplePropInBoolean !== dom.multiple) {
        dom.multiple = multiplePropInBoolean;
    }
    var index = nextPropsOrEmpty.selectedIndex;
    if (index === -1) {
        dom.selectedIndex = -1;
    }
    var childFlags = vNode.childFlags;
    if (childFlags !== 1 /* HasInvalidChildren */) {
        var value = nextPropsOrEmpty.value;
        if (isNumber(index) && index > -1 && dom.options[index]) {
            value = dom.options[index].value;
        }
        if (mounting && isNullOrUndef(value)) {
            value = nextPropsOrEmpty.defaultValue;
        }
        updateChildOptions(vNode, value);
    }
}

var onTextareaInputChange = createWrappedFunction('onInput', applyValueTextArea);
var wrappedOnChange$1 = createWrappedFunction('onChange');
function textAreaEvents(dom, nextPropsOrEmpty) {
    attachEvent(dom, 'input', onTextareaInputChange);
    if (nextPropsOrEmpty.onChange) {
        attachEvent(dom, 'change', wrappedOnChange$1);
    }
}
function applyValueTextArea(nextPropsOrEmpty, dom, mounting) {
    var value = nextPropsOrEmpty.value;
    var domValue = dom.value;
    if (isNullOrUndef(value)) {
        if (mounting) {
            var defaultValue = nextPropsOrEmpty.defaultValue;
            if (!isNullOrUndef(defaultValue) && defaultValue !== domValue) {
                dom.defaultValue = defaultValue;
                dom.value = defaultValue;
            }
        }
    }
    else if (domValue !== value) {
        /* There is value so keep it controlled */
        dom.defaultValue = value;
        dom.value = value;
    }
}

function processElement(flags, vNode, dom, nextPropsOrEmpty, mounting, isControlled) {
    if (flags & 64 /* InputElement */) {
        applyValueInput(nextPropsOrEmpty, dom);
    }
    else if (flags & 256 /* SelectElement */) {
        applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode);
    }
    else if (flags & 128 /* TextareaElement */) {
        applyValueTextArea(nextPropsOrEmpty, dom, mounting);
    }
    if (isControlled) {
        dom.$V = vNode;
    }
}
function addFormElementEventHandlers(flags, dom, nextPropsOrEmpty) {
    if (flags & 64 /* InputElement */) {
        inputEvents(dom, nextPropsOrEmpty);
    }
    else if (flags & 256 /* SelectElement */) {
        selectEvents(dom);
    }
    else if (flags & 128 /* TextareaElement */) {
        textAreaEvents(dom, nextPropsOrEmpty);
    }
}
function isControlledFormElement(nextPropsOrEmpty) {
    return nextPropsOrEmpty.type && isCheckedType(nextPropsOrEmpty.type) ? !isNullOrUndef(nextPropsOrEmpty.checked) : !isNullOrUndef(nextPropsOrEmpty.value);
}

function createRef() {
    return {
        current: null
    };
}
function forwardRef(render) {
    // @ts-ignore
    return {
        render: render
    };
}
function unmountRef(ref) {
    if (ref) {
        if (!safeCall1(ref, null) && ref.current) {
            ref.current = null;
        }
    }
}
function mountRef(ref, value, lifecycle) {
    if (ref && (isFunction(ref) || ref.current !== void 0)) {
        lifecycle.push(function () {
            if (!safeCall1(ref, value) && ref.current !== void 0) {
                ref.current = value;
            }
        });
    }
}

function remove(vNode, parentDOM) {
    unmount(vNode);
    removeVNodeDOM(vNode, parentDOM);
}
function unmount(vNode) {
    var flags = vNode.flags;
    var children = vNode.children;
    var ref;
    if (flags & 481 /* Element */) {
        ref = vNode.ref;
        var props = vNode.props;
        unmountRef(ref);
        var childFlags = vNode.childFlags;
        if (!isNull(props)) {
            var keys = Object.keys(props);
            for (var i = 0, len = keys.length; i < len; i++) {
                var key = keys[i];
                if (syntheticEvents[key]) {
                    unmountSyntheticEvent(key, vNode.dom);
                }
            }
        }
        if (childFlags & 12 /* MultipleChildren */) {
            unmountAllChildren(children);
        }
        else if (childFlags === 2 /* HasVNodeChildren */) {
            unmount(children);
        }
    }
    else if (children) {
        if (flags & 4 /* ComponentClass */) {
            if (isFunction(children.componentWillUnmount)) {
                children.componentWillUnmount();
            }
            unmountRef(vNode.ref);
            children.$UN = true;
            unmount(children.$LI);
        }
        else if (flags & 8 /* ComponentFunction */) {
            ref = vNode.ref;
            if (!isNullOrUndef(ref) && isFunction(ref.onComponentWillUnmount)) {
                ref.onComponentWillUnmount(findDOMfromVNode(vNode, true), vNode.props || EMPTY_OBJ);
            }
            unmount(children);
        }
        else if (flags & 1024 /* Portal */) {
            remove(children, vNode.ref);
        }
        else if (flags & 8192 /* Fragment */) {
            if (vNode.childFlags & 12 /* MultipleChildren */) {
                unmountAllChildren(children);
            }
        }
    }
}
function unmountAllChildren(children) {
    for (var i = 0, len = children.length; i < len; ++i) {
        unmount(children[i]);
    }
}
function clearDOM(dom) {
    // Optimization for clearing dom
    dom.textContent = '';
}
function removeAllChildren(dom, vNode, children) {
    unmountAllChildren(children);
    if (vNode.flags & 8192 /* Fragment */) {
        removeVNodeDOM(vNode, dom);
    }
    else {
        clearDOM(dom);
    }
}

function wrapLinkEvent(nextValue) {
    // This variable makes sure there is no "this" context in callback
    var ev = nextValue.event;
    return function (e) {
        ev(nextValue.data, e);
    };
}
function patchEvent(name, lastValue, nextValue, dom) {
    if (isLinkEventObject(nextValue)) {
        if (isLastValueSameLinkEvent(lastValue, nextValue)) {
            return;
        }
        nextValue = wrapLinkEvent(nextValue);
    }
    attachEvent(dom, normalizeEventName(name), nextValue);
}
// We are assuming here that we come from patchProp routine
// -nextAttrValue cannot be null or undefined
function patchStyle(lastAttrValue, nextAttrValue, dom) {
    if (isNullOrUndef(nextAttrValue)) {
        dom.removeAttribute('style');
        return;
    }
    var domStyle = dom.style;
    var style;
    var value;
    if (isString(nextAttrValue)) {
        domStyle.cssText = nextAttrValue;
        return;
    }
    if (!isNullOrUndef(lastAttrValue) && !isString(lastAttrValue)) {
        for (style in nextAttrValue) {
            // do not add a hasOwnProperty check here, it affects performance
            value = nextAttrValue[style];
            if (value !== lastAttrValue[style]) {
                domStyle.setProperty(style, value);
            }
        }
        for (style in lastAttrValue) {
            if (isNullOrUndef(nextAttrValue[style])) {
                domStyle.removeProperty(style);
            }
        }
    }
    else {
        for (style in nextAttrValue) {
            value = nextAttrValue[style];
            domStyle.setProperty(style, value);
        }
    }
}
function patchDangerInnerHTML(lastValue, nextValue, lastVNode, dom) {
    var lastHtml = (lastValue && lastValue.__html) || '';
    var nextHtml = (nextValue && nextValue.__html) || '';
    if (lastHtml !== nextHtml) {
        if (!isNullOrUndef(nextHtml) && !isSameInnerHTML(dom, nextHtml)) {
            if (!isNull(lastVNode)) {
                if (lastVNode.childFlags & 12 /* MultipleChildren */) {
                    unmountAllChildren(lastVNode.children);
                }
                else if (lastVNode.childFlags === 2 /* HasVNodeChildren */) {
                    unmount(lastVNode.children);
                }
                lastVNode.children = null;
                lastVNode.childFlags = 1 /* HasInvalidChildren */;
            }
            dom.innerHTML = nextHtml;
        }
    }
}
function patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode) {
    switch (prop) {
        case 'children':
        case 'childrenType':
        case 'className':
        case 'defaultValue':
        case 'key':
        case 'multiple':
        case 'ref':
        case 'selectedIndex':
            break;
        case 'autoFocus':
            dom.autofocus = !!nextValue;
            break;
        case 'allowfullscreen':
        case 'autoplay':
        case 'capture':
        case 'checked':
        case 'controls':
        case 'default':
        case 'disabled':
        case 'hidden':
        case 'indeterminate':
        case 'loop':
        case 'muted':
        case 'novalidate':
        case 'open':
        case 'readOnly':
        case 'required':
        case 'reversed':
        case 'scoped':
        case 'seamless':
        case 'selected':
            dom[prop] = !!nextValue;
            break;
        case 'defaultChecked':
        case 'value':
        case 'volume':
            if (hasControlledValue && prop === 'value') {
                break;
            }
            var value = isNullOrUndef(nextValue) ? '' : nextValue;
            if (dom[prop] !== value) {
                dom[prop] = value;
            }
            break;
        case 'style':
            patchStyle(lastValue, nextValue, dom);
            break;
        case 'dangerouslySetInnerHTML':
            patchDangerInnerHTML(lastValue, nextValue, lastVNode, dom);
            break;
        default:
            if (syntheticEvents[prop]) {
                handleSyntheticEvent(prop, lastValue, nextValue, dom);
            }
            else if (prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110) {
                patchEvent(prop, lastValue, nextValue, dom);
            }
            else if (isNullOrUndef(nextValue)) {
                dom.removeAttribute(prop);
            }
            else if (isSVG && namespaces[prop]) {
                // We optimize for isSVG being false
                // If we end up in this path we can read property again
                dom.setAttributeNS(namespaces[prop], prop, nextValue);
            }
            else {
                dom.setAttribute(prop, nextValue);
            }
            break;
    }
}
function mountProps(vNode, flags, props, dom, isSVG) {
    var hasControlledValue = false;
    var isFormElement = (flags & 448 /* FormElement */) > 0;
    if (isFormElement) {
        hasControlledValue = isControlledFormElement(props);
        if (hasControlledValue) {
            addFormElementEventHandlers(flags, dom, props);
        }
    }
    for (var prop in props) {
        // do not add a hasOwnProperty check here, it affects performance
        patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue, null);
    }
    if (isFormElement) {
        processElement(flags, vNode, dom, props, true, hasControlledValue);
    }
}

function renderNewInput(instance, props, context) {
    var nextInput = normalizeRoot(instance.render(props, instance.state, context));
    var childContext = context;
    if (isFunction(instance.getChildContext)) {
        childContext = combineFrom(context, instance.getChildContext());
    }
    instance.$CX = childContext;
    return nextInput;
}
function createClassComponentInstance(vNode, Component, props, context, isSVG, lifecycle) {
    var instance = new Component(props, context);
    var usesNewAPI = (instance.$N = Boolean(Component.getDerivedStateFromProps || instance.getSnapshotBeforeUpdate));
    instance.$SVG = isSVG;
    instance.$L = lifecycle;
    vNode.children = instance;
    instance.$BS = false;
    instance.context = context;
    if (instance.props === EMPTY_OBJ) {
        instance.props = props;
    }
    if (!usesNewAPI) {
        if (isFunction(instance.componentWillMount)) {
            instance.$BR = true;
            instance.componentWillMount();
            var pending = instance.$PS;
            if (!isNull(pending)) {
                var state = instance.state;
                if (isNull(state)) {
                    instance.state = pending;
                }
                else {
                    for (var key in pending) {
                        state[key] = pending[key];
                    }
                }
                instance.$PS = null;
            }
            instance.$BR = false;
        }
    }
    else {
        instance.state = createDerivedState(instance, props, instance.state);
    }
    instance.$LI = renderNewInput(instance, props, context);
    return instance;
}
function renderFunctionalComponent(vNode, context) {
    var props = vNode.props || EMPTY_OBJ;
    return vNode.flags & 32768 /* ForwardRef */ ? vNode.type.render(props, vNode.ref, context) : vNode.type(props, context);
}

function mount(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {
    var flags = (vNode.flags |= 16384 /* InUse */);
    if (flags & 481 /* Element */) {
        mountElement(vNode, parentDOM, context, isSVG, nextNode, lifecycle);
    }
    else if (flags & 4 /* ComponentClass */) {
        mountClassComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle);
    }
    else if (flags & 8 /* ComponentFunction */) {
        mountFunctionalComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle);
        mountFunctionalComponentCallbacks(vNode, lifecycle);
    }
    else if (flags & 512 /* Void */ || flags & 16 /* Text */) {
        mountText(vNode, parentDOM, nextNode);
    }
    else if (flags & 8192 /* Fragment */) {
        mountFragment(vNode, context, parentDOM, isSVG, nextNode, lifecycle);
    }
    else if (flags & 1024 /* Portal */) {
        mountPortal(vNode, context, parentDOM, nextNode, lifecycle);
    }
    else ;
}
function mountPortal(vNode, context, parentDOM, nextNode, lifecycle) {
    mount(vNode.children, vNode.ref, context, false, null, lifecycle);
    var placeHolderVNode = createVoidVNode();
    mountText(placeHolderVNode, parentDOM, nextNode);
    vNode.dom = placeHolderVNode.dom;
}
function mountFragment(vNode, context, parentDOM, isSVG, nextNode, lifecycle) {
    var children = vNode.children;
    var childFlags = vNode.childFlags;
    // When fragment is optimized for multiple children, check if there is no children and change flag to invalid
    // This is the only normalization always done, to keep optimization flags API same for fragments and regular elements
    if (childFlags & 12 /* MultipleChildren */ && children.length === 0) {
        childFlags = vNode.childFlags = 2 /* HasVNodeChildren */;
        children = vNode.children = createVoidVNode();
    }
    if (childFlags === 2 /* HasVNodeChildren */) {
        mount(children, parentDOM, nextNode, isSVG, nextNode, lifecycle);
    }
    else {
        mountArrayChildren(children, parentDOM, context, isSVG, nextNode, lifecycle);
    }
}
function mountText(vNode, parentDOM, nextNode) {
    var dom = (vNode.dom = document.createTextNode(vNode.children));
    if (!isNull(parentDOM)) {
        insertOrAppend(parentDOM, dom, nextNode);
    }
}
function mountElement(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {
    var flags = vNode.flags;
    var props = vNode.props;
    var className = vNode.className;
    var childFlags = vNode.childFlags;
    var dom = (vNode.dom = documentCreateElement(vNode.type, (isSVG = isSVG || (flags & 32 /* SvgElement */) > 0)));
    var children = vNode.children;
    if (!isNullOrUndef(className) && className !== '') {
        if (isSVG) {
            dom.setAttribute('class', className);
        }
        else {
            dom.className = className;
        }
    }
    if (childFlags === 16 /* HasTextChildren */) {
        setTextContent(dom, children);
    }
    else if (childFlags !== 1 /* HasInvalidChildren */) {
        var childrenIsSVG = isSVG && vNode.type !== 'foreignObject';
        if (childFlags === 2 /* HasVNodeChildren */) {
            if (children.flags & 16384 /* InUse */) {
                vNode.children = children = directClone(children);
            }
            mount(children, dom, context, childrenIsSVG, null, lifecycle);
        }
        else if (childFlags === 8 /* HasKeyedChildren */ || childFlags === 4 /* HasNonKeyedChildren */) {
            mountArrayChildren(children, dom, context, childrenIsSVG, null, lifecycle);
        }
    }
    if (!isNull(parentDOM)) {
        insertOrAppend(parentDOM, dom, nextNode);
    }
    if (!isNull(props)) {
        mountProps(vNode, flags, props, dom, isSVG);
    }
    mountRef(vNode.ref, dom, lifecycle);
}
function mountArrayChildren(children, dom, context, isSVG, nextNode, lifecycle) {
    for (var i = 0; i < children.length; ++i) {
        var child = children[i];
        if (child.flags & 16384 /* InUse */) {
            children[i] = child = directClone(child);
        }
        mount(child, dom, context, isSVG, nextNode, lifecycle);
    }
}
function mountClassComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {
    var instance = createClassComponentInstance(vNode, vNode.type, vNode.props || EMPTY_OBJ, context, isSVG, lifecycle);
    mount(instance.$LI, parentDOM, instance.$CX, isSVG, nextNode, lifecycle);
    mountClassComponentCallbacks(vNode.ref, instance, lifecycle);
}
function mountFunctionalComponent(vNode, parentDOM, context, isSVG, nextNode, lifecycle) {
    mount((vNode.children = normalizeRoot(renderFunctionalComponent(vNode, context))), parentDOM, context, isSVG, nextNode, lifecycle);
}
function createClassMountCallback(instance) {
    return function () {
        instance.componentDidMount();
    };
}
function mountClassComponentCallbacks(ref, instance, lifecycle) {
    mountRef(ref, instance, lifecycle);
    if (isFunction(instance.componentDidMount)) {
        lifecycle.push(createClassMountCallback(instance));
    }
}
function createOnMountCallback(ref, vNode) {
    return function () {
        ref.onComponentDidMount(findDOMfromVNode(vNode, true), vNode.props || EMPTY_OBJ);
    };
}
function mountFunctionalComponentCallbacks(vNode, lifecycle) {
    var ref = vNode.ref;
    if (!isNullOrUndef(ref)) {
        safeCall1(ref.onComponentWillMount, vNode.props || EMPTY_OBJ);
        if (isFunction(ref.onComponentDidMount)) {
            lifecycle.push(createOnMountCallback(ref, vNode));
        }
    }
}

function replaceWithNewNode(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle) {
    unmount(lastVNode);
    if ((nextVNode.flags & lastVNode.flags & 2033 /* DOMRef */) !== 0) {
        mount(nextVNode, null, context, isSVG, null, lifecycle);
        // Single DOM operation, when we have dom references available
        replaceChild(parentDOM, nextVNode.dom, lastVNode.dom);
    }
    else {
        mount(nextVNode, parentDOM, context, isSVG, findDOMfromVNode(lastVNode, true), lifecycle);
        removeVNodeDOM(lastVNode, parentDOM);
    }
}
function patch(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle) {
    var nextFlags = (nextVNode.flags |= 16384 /* InUse */);
    if (lastVNode.flags !== nextFlags || lastVNode.type !== nextVNode.type || lastVNode.key !== nextVNode.key || nextFlags & 2048 /* ReCreate */) {
        if (lastVNode.flags & 16384 /* InUse */) {
            replaceWithNewNode(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle);
        }
        else {
            // Last vNode is not in use, it has crashed at application level. Just mount nextVNode and ignore last one
            mount(nextVNode, parentDOM, context, isSVG, nextNode, lifecycle);
        }
    }
    else if (nextFlags & 481 /* Element */) {
        patchElement(lastVNode, nextVNode, context, isSVG, nextFlags, lifecycle);
    }
    else if (nextFlags & 4 /* ComponentClass */) {
        patchClassComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle);
    }
    else if (nextFlags & 8 /* ComponentFunction */) {
        patchFunctionalComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle);
    }
    else if (nextFlags & 16 /* Text */) {
        patchText(lastVNode, nextVNode);
    }
    else if (nextFlags & 512 /* Void */) {
        nextVNode.dom = lastVNode.dom;
    }
    else if (nextFlags & 8192 /* Fragment */) {
        patchFragment(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle);
    }
    else {
        patchPortal(lastVNode, nextVNode, context, lifecycle);
    }
}
function patchSingleTextChild(lastChildren, nextChildren, parentDOM) {
    if (lastChildren !== nextChildren) {
        if (lastChildren !== '') {
            parentDOM.firstChild.nodeValue = nextChildren;
        }
        else {
            setTextContent(parentDOM, nextChildren);
        }
    }
}
function patchContentEditableChildren(dom, nextChildren) {
    if (dom.textContent !== nextChildren) {
        dom.textContent = nextChildren;
    }
}
function patchFragment(lastVNode, nextVNode, parentDOM, context, isSVG, lifecycle) {
    var lastChildren = lastVNode.children;
    var nextChildren = nextVNode.children;
    var lastChildFlags = lastVNode.childFlags;
    var nextChildFlags = nextVNode.childFlags;
    var nextNode = null;
    // When fragment is optimized for multiple children, check if there is no children and change flag to invalid
    // This is the only normalization always done, to keep optimization flags API same for fragments and regular elements
    if (nextChildFlags & 12 /* MultipleChildren */ && nextChildren.length === 0) {
        nextChildFlags = nextVNode.childFlags = 2 /* HasVNodeChildren */;
        nextChildren = nextVNode.children = createVoidVNode();
    }
    var nextIsSingle = (nextChildFlags & 2 /* HasVNodeChildren */) !== 0;
    if (lastChildFlags & 12 /* MultipleChildren */) {
        var lastLen = lastChildren.length;
        // We need to know Fragment's edge node when
        if (
        // It uses keyed algorithm
        (lastChildFlags & 8 /* HasKeyedChildren */ && nextChildFlags & 8 /* HasKeyedChildren */) ||
            // It transforms from many to single
            nextIsSingle ||
            // It will append more nodes
            (!nextIsSingle && nextChildren.length > lastLen)) {
            // When fragment has multiple children there is always at least one vNode
            nextNode = findDOMfromVNode(lastChildren[lastLen - 1], false).nextSibling;
        }
    }
    patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context, isSVG, nextNode, lastVNode, lifecycle);
}
function patchPortal(lastVNode, nextVNode, context, lifecycle) {
    var lastContainer = lastVNode.ref;
    var nextContainer = nextVNode.ref;
    var nextChildren = nextVNode.children;
    patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, lastContainer, context, false, null, lastVNode, lifecycle);
    nextVNode.dom = lastVNode.dom;
    if (lastContainer !== nextContainer && !isInvalid(nextChildren)) {
        var node = nextChildren.dom;
        removeChild(lastContainer, node);
        appendChild(nextContainer, node);
    }
}
function patchElement(lastVNode, nextVNode, context, isSVG, nextFlags, lifecycle) {
    var dom = (nextVNode.dom = lastVNode.dom);
    var lastProps = lastVNode.props;
    var nextProps = nextVNode.props;
    var isFormElement = false;
    var hasControlledValue = false;
    var nextPropsOrEmpty;
    isSVG = isSVG || (nextFlags & 32 /* SvgElement */) > 0;
    // inlined patchProps  -- starts --
    if (lastProps !== nextProps) {
        var lastPropsOrEmpty = lastProps || EMPTY_OBJ;
        nextPropsOrEmpty = nextProps || EMPTY_OBJ;
        if (nextPropsOrEmpty !== EMPTY_OBJ) {
            isFormElement = (nextFlags & 448 /* FormElement */) > 0;
            if (isFormElement) {
                hasControlledValue = isControlledFormElement(nextPropsOrEmpty);
            }
            for (var prop in nextPropsOrEmpty) {
                var lastValue = lastPropsOrEmpty[prop];
                var nextValue = nextPropsOrEmpty[prop];
                if (lastValue !== nextValue) {
                    patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode);
                }
            }
        }
        if (lastPropsOrEmpty !== EMPTY_OBJ) {
            for (var prop$1 in lastPropsOrEmpty) {
                if (isNullOrUndef(nextPropsOrEmpty[prop$1]) && !isNullOrUndef(lastPropsOrEmpty[prop$1])) {
                    patchProp(prop$1, lastPropsOrEmpty[prop$1], null, dom, isSVG, hasControlledValue, lastVNode);
                }
            }
        }
    }
    var nextChildren = nextVNode.children;
    var nextClassName = nextVNode.className;
    // inlined patchProps  -- ends --
    if (lastVNode.className !== nextClassName) {
        if (isNullOrUndef(nextClassName)) {
            dom.removeAttribute('class');
        }
        else if (isSVG) {
            dom.setAttribute('class', nextClassName);
        }
        else {
            dom.className = nextClassName;
        }
    }
    if (nextFlags & 4096 /* ContentEditable */) {
        patchContentEditableChildren(dom, nextChildren);
    }
    else {
        patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, dom, context, isSVG && nextVNode.type !== 'foreignObject', null, lastVNode, lifecycle);
    }
    if (isFormElement) {
        processElement(nextFlags, nextVNode, dom, nextPropsOrEmpty, false, hasControlledValue);
    }
    var nextRef = nextVNode.ref;
    var lastRef = lastVNode.ref;
    if (lastRef !== nextRef) {
        unmountRef(lastRef);
        mountRef(nextRef, dom, lifecycle);
    }
}
function replaceOneVNodeWithMultipleVNodes(lastChildren, nextChildren, parentDOM, context, isSVG, lifecycle) {
    unmount(lastChildren);
    mountArrayChildren(nextChildren, parentDOM, context, isSVG, findDOMfromVNode(lastChildren, true), lifecycle);
    removeVNodeDOM(lastChildren, parentDOM);
}
function patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context, isSVG, nextNode, parentVNode, lifecycle) {
    switch (lastChildFlags) {
        case 2 /* HasVNodeChildren */:
            switch (nextChildFlags) {
                case 2 /* HasVNodeChildren */:
                    patch(lastChildren, nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);
                    break;
                case 1 /* HasInvalidChildren */:
                    remove(lastChildren, parentDOM);
                    break;
                case 16 /* HasTextChildren */:
                    unmount(lastChildren);
                    setTextContent(parentDOM, nextChildren);
                    break;
                default:
                    replaceOneVNodeWithMultipleVNodes(lastChildren, nextChildren, parentDOM, context, isSVG, lifecycle);
                    break;
            }
            break;
        case 1 /* HasInvalidChildren */:
            switch (nextChildFlags) {
                case 2 /* HasVNodeChildren */:
                    mount(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);
                    break;
                case 1 /* HasInvalidChildren */:
                    break;
                case 16 /* HasTextChildren */:
                    setTextContent(parentDOM, nextChildren);
                    break;
                default:
                    mountArrayChildren(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);
                    break;
            }
            break;
        case 16 /* HasTextChildren */:
            switch (nextChildFlags) {
                case 16 /* HasTextChildren */:
                    patchSingleTextChild(lastChildren, nextChildren, parentDOM);
                    break;
                case 2 /* HasVNodeChildren */:
                    clearDOM(parentDOM);
                    mount(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);
                    break;
                case 1 /* HasInvalidChildren */:
                    clearDOM(parentDOM);
                    break;
                default:
                    clearDOM(parentDOM);
                    mountArrayChildren(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);
                    break;
            }
            break;
        default:
            switch (nextChildFlags) {
                case 16 /* HasTextChildren */:
                    unmountAllChildren(lastChildren);
                    setTextContent(parentDOM, nextChildren);
                    break;
                case 2 /* HasVNodeChildren */:
                    removeAllChildren(parentDOM, parentVNode, lastChildren);
                    mount(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);
                    break;
                case 1 /* HasInvalidChildren */:
                    removeAllChildren(parentDOM, parentVNode, lastChildren);
                    break;
                default:
                    var lastLength = lastChildren.length | 0;
                    var nextLength = nextChildren.length | 0;
                    // Fast path's for both algorithms
                    if (lastLength === 0) {
                        if (nextLength > 0) {
                            mountArrayChildren(nextChildren, parentDOM, context, isSVG, nextNode, lifecycle);
                        }
                    }
                    else if (nextLength === 0) {
                        removeAllChildren(parentDOM, parentVNode, lastChildren);
                    }
                    else if (nextChildFlags === 8 /* HasKeyedChildren */ && lastChildFlags === 8 /* HasKeyedChildren */) {
                        patchKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength, nextNode, parentVNode, lifecycle);
                    }
                    else {
                        patchNonKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength, nextNode, lifecycle);
                    }
                    break;
            }
            break;
    }
}
function createDidUpdate(instance, lastProps, lastState, snapshot, lifecycle) {
    lifecycle.push(function () {
        instance.componentDidUpdate(lastProps, lastState, snapshot);
    });
}
function updateClassComponent(instance, nextState, nextProps, parentDOM, context, isSVG, force, nextNode, lifecycle) {
    var lastState = instance.state;
    var lastProps = instance.props;
    var usesNewAPI = Boolean(instance.$N);
    var hasSCU = isFunction(instance.shouldComponentUpdate);
    if (usesNewAPI) {
        nextState = createDerivedState(instance, nextProps, nextState !== lastState ? combineFrom(lastState, nextState) : nextState);
    }
    if (force || !hasSCU || (hasSCU && instance.shouldComponentUpdate(nextProps, nextState, context))) {
        if (!usesNewAPI && isFunction(instance.componentWillUpdate)) {
            instance.componentWillUpdate(nextProps, nextState, context);
        }
        instance.props = nextProps;
        instance.state = nextState;
        instance.context = context;
        var snapshot = null;
        var nextInput = renderNewInput(instance, nextProps, context);
        if (usesNewAPI && isFunction(instance.getSnapshotBeforeUpdate)) {
            snapshot = instance.getSnapshotBeforeUpdate(lastProps, lastState);
        }
        patch(instance.$LI, nextInput, parentDOM, instance.$CX, isSVG, nextNode, lifecycle);
        // Dont update Last input, until patch has been succesfully executed
        instance.$LI = nextInput;
        if (isFunction(instance.componentDidUpdate)) {
            createDidUpdate(instance, lastProps, lastState, snapshot, lifecycle);
        }
    }
    else {
        instance.props = nextProps;
        instance.state = nextState;
        instance.context = context;
    }
}
function patchClassComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle) {
    var instance = (nextVNode.children = lastVNode.children);
    // If Component has crashed, ignore it to stay functional
    if (isNull(instance)) {
        return;
    }
    instance.$L = lifecycle;
    var nextProps = nextVNode.props || EMPTY_OBJ;
    var nextRef = nextVNode.ref;
    var lastRef = lastVNode.ref;
    var nextState = instance.state;
    if (!instance.$N) {
        if (isFunction(instance.componentWillReceiveProps)) {
            instance.$BR = true;
            instance.componentWillReceiveProps(nextProps, context);
            // If instance component was removed during its own update do nothing.
            if (instance.$UN) {
                return;
            }
            instance.$BR = false;
        }
        if (!isNull(instance.$PS)) {
            nextState = combineFrom(nextState, instance.$PS);
            instance.$PS = null;
        }
    }
    updateClassComponent(instance, nextState, nextProps, parentDOM, context, isSVG, false, nextNode, lifecycle);
    if (lastRef !== nextRef) {
        unmountRef(lastRef);
        mountRef(nextRef, instance, lifecycle);
    }
}
function patchFunctionalComponent(lastVNode, nextVNode, parentDOM, context, isSVG, nextNode, lifecycle) {
    var shouldUpdate = true;
    var nextProps = nextVNode.props || EMPTY_OBJ;
    var nextRef = nextVNode.ref;
    var lastProps = lastVNode.props;
    var nextHooksDefined = !isNullOrUndef(nextRef);
    var lastInput = lastVNode.children;
    if (nextHooksDefined && isFunction(nextRef.onComponentShouldUpdate)) {
        shouldUpdate = nextRef.onComponentShouldUpdate(lastProps, nextProps);
    }
    if (shouldUpdate !== false) {
        if (nextHooksDefined && isFunction(nextRef.onComponentWillUpdate)) {
            nextRef.onComponentWillUpdate(lastProps, nextProps);
        }
        var nextInput = normalizeRoot(renderFunctionalComponent(nextVNode, context));
        patch(lastInput, nextInput, parentDOM, context, isSVG, nextNode, lifecycle);
        nextVNode.children = nextInput;
        if (nextHooksDefined && isFunction(nextRef.onComponentDidUpdate)) {
            nextRef.onComponentDidUpdate(lastProps, nextProps);
        }
    }
    else {
        nextVNode.children = lastInput;
    }
}
function patchText(lastVNode, nextVNode) {
    var nextText = nextVNode.children;
    var dom = (nextVNode.dom = lastVNode.dom);
    if (nextText !== lastVNode.children) {
        dom.nodeValue = nextText;
    }
}
function patchNonKeyedChildren(lastChildren, nextChildren, dom, context, isSVG, lastChildrenLength, nextChildrenLength, nextNode, lifecycle) {
    var commonLength = lastChildrenLength > nextChildrenLength ? nextChildrenLength : lastChildrenLength;
    var i = 0;
    var nextChild;
    var lastChild;
    for (; i < commonLength; ++i) {
        nextChild = nextChildren[i];
        lastChild = lastChildren[i];
        if (nextChild.flags & 16384 /* InUse */) {
            nextChild = nextChildren[i] = directClone(nextChild);
        }
        patch(lastChild, nextChild, dom, context, isSVG, nextNode, lifecycle);
        lastChildren[i] = nextChild;
    }
    if (lastChildrenLength < nextChildrenLength) {
        for (i = commonLength; i < nextChildrenLength; ++i) {
            nextChild = nextChildren[i];
            if (nextChild.flags & 16384 /* InUse */) {
                nextChild = nextChildren[i] = directClone(nextChild);
            }
            mount(nextChild, dom, context, isSVG, nextNode, lifecycle);
        }
    }
    else if (lastChildrenLength > nextChildrenLength) {
        for (i = commonLength; i < lastChildrenLength; ++i) {
            remove(lastChildren[i], dom);
        }
    }
}
function patchKeyedChildren(a, b, dom, context, isSVG, aLength, bLength, outerEdge, parentVNode, lifecycle) {
    var aEnd = aLength - 1;
    var bEnd = bLength - 1;
    var j = 0;
    var aNode = a[j];
    var bNode = b[j];
    var nextPos;
    var nextNode;
    // Step 1
    // tslint:disable-next-line
    outer: {
        // Sync nodes with the same key at the beginning.
        while (aNode.key === bNode.key) {
            if (bNode.flags & 16384 /* InUse */) {
                b[j] = bNode = directClone(bNode);
            }
            patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);
            a[j] = bNode;
            ++j;
            if (j > aEnd || j > bEnd) {
                break outer;
            }
            aNode = a[j];
            bNode = b[j];
        }
        aNode = a[aEnd];
        bNode = b[bEnd];
        // Sync nodes with the same key at the end.
        while (aNode.key === bNode.key) {
            if (bNode.flags & 16384 /* InUse */) {
                b[bEnd] = bNode = directClone(bNode);
            }
            patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);
            a[aEnd] = bNode;
            aEnd--;
            bEnd--;
            if (j > aEnd || j > bEnd) {
                break outer;
            }
            aNode = a[aEnd];
            bNode = b[bEnd];
        }
    }
    if (j > aEnd) {
        if (j <= bEnd) {
            nextPos = bEnd + 1;
            nextNode = nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge;
            while (j <= bEnd) {
                bNode = b[j];
                if (bNode.flags & 16384 /* InUse */) {
                    b[j] = bNode = directClone(bNode);
                }
                ++j;
                mount(bNode, dom, context, isSVG, nextNode, lifecycle);
            }
        }
    }
    else if (j > bEnd) {
        while (j <= aEnd) {
            remove(a[j++], dom);
        }
    }
    else {
        patchKeyedChildrenComplex(a, b, context, aLength, bLength, aEnd, bEnd, j, dom, isSVG, outerEdge, parentVNode, lifecycle);
    }
}
function patchKeyedChildrenComplex(a, b, context, aLength, bLength, aEnd, bEnd, j, dom, isSVG, outerEdge, parentVNode, lifecycle) {
    var aNode;
    var bNode;
    var nextPos;
    var i = 0;
    var aStart = j;
    var bStart = j;
    var aLeft = aEnd - j + 1;
    var bLeft = bEnd - j + 1;
    var sources = new Int32Array(bLeft + 1);
    // Keep track if its possible to remove whole DOM using textContent = '';
    var canRemoveWholeContent = aLeft === aLength;
    var moved = false;
    var pos = 0;
    var patched = 0;
    // When sizes are small, just loop them through
    if (bLength < 4 || (aLeft | bLeft) < 32) {
        for (i = aStart; i <= aEnd; ++i) {
            aNode = a[i];
            if (patched < bLeft) {
                for (j = bStart; j <= bEnd; j++) {
                    bNode = b[j];
                    if (aNode.key === bNode.key) {
                        sources[j - bStart] = i + 1;
                        if (canRemoveWholeContent) {
                            canRemoveWholeContent = false;
                            while (aStart < i) {
                                remove(a[aStart++], dom);
                            }
                        }
                        if (pos > j) {
                            moved = true;
                        }
                        else {
                            pos = j;
                        }
                        if (bNode.flags & 16384 /* InUse */) {
                            b[j] = bNode = directClone(bNode);
                        }
                        patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);
                        ++patched;
                        break;
                    }
                }
                if (!canRemoveWholeContent && j > bEnd) {
                    remove(aNode, dom);
                }
            }
            else if (!canRemoveWholeContent) {
                remove(aNode, dom);
            }
        }
    }
    else {
        var keyIndex = {};
        // Map keys by their index
        for (i = bStart; i <= bEnd; ++i) {
            keyIndex[b[i].key] = i;
        }
        // Try to patch same keys
        for (i = aStart; i <= aEnd; ++i) {
            aNode = a[i];
            if (patched < bLeft) {
                j = keyIndex[aNode.key];
                if (j !== void 0) {
                    if (canRemoveWholeContent) {
                        canRemoveWholeContent = false;
                        while (i > aStart) {
                            remove(a[aStart++], dom);
                        }
                    }
                    sources[j - bStart] = i + 1;
                    if (pos > j) {
                        moved = true;
                    }
                    else {
                        pos = j;
                    }
                    bNode = b[j];
                    if (bNode.flags & 16384 /* InUse */) {
                        b[j] = bNode = directClone(bNode);
                    }
                    patch(aNode, bNode, dom, context, isSVG, outerEdge, lifecycle);
                    ++patched;
                }
                else if (!canRemoveWholeContent) {
                    remove(aNode, dom);
                }
            }
            else if (!canRemoveWholeContent) {
                remove(aNode, dom);
            }
        }
    }
    // fast-path: if nothing patched remove all old and add all new
    if (canRemoveWholeContent) {
        removeAllChildren(dom, parentVNode, a);
        mountArrayChildren(b, dom, context, isSVG, outerEdge, lifecycle);
    }
    else if (moved) {
        var seq = lis_algorithm(sources);
        j = seq.length - 1;
        for (i = bLeft - 1; i >= 0; i--) {
            if (sources[i] === 0) {
                pos = i + bStart;
                bNode = b[pos];
                if (bNode.flags & 16384 /* InUse */) {
                    b[pos] = bNode = directClone(bNode);
                }
                nextPos = pos + 1;
                mount(bNode, dom, context, isSVG, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge, lifecycle);
            }
            else if (j < 0 || i !== seq[j]) {
                pos = i + bStart;
                bNode = b[pos];
                nextPos = pos + 1;
                moveVNodeDOM(bNode, dom, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge);
            }
            else {
                j--;
            }
        }
    }
    else if (patched !== bLeft) {
        // when patched count doesn't match b length we need to insert those new ones
        // loop backwards so we can use insertBefore
        for (i = bLeft - 1; i >= 0; i--) {
            if (sources[i] === 0) {
                pos = i + bStart;
                bNode = b[pos];
                if (bNode.flags & 16384 /* InUse */) {
                    b[pos] = bNode = directClone(bNode);
                }
                nextPos = pos + 1;
                mount(bNode, dom, context, isSVG, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge, lifecycle);
            }
        }
    }
}
var result;
var p;
var maxLen = 0;
// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
function lis_algorithm(arr) {
    var arrI = 0;
    var i = 0;
    var j = 0;
    var k = 0;
    var u = 0;
    var v = 0;
    var c = 0;
    var len = arr.length;
    if (len > maxLen) {
        maxLen = len;
        result = new Int32Array(len);
        p = new Int32Array(len);
    }
    for (; i < len; ++i) {
        arrI = arr[i];
        if (arrI !== 0) {
            j = result[k];
            if (arr[j] < arrI) {
                p[i] = j;
                result[++k] = i;
                continue;
            }
            u = 0;
            v = k;
            while (u < v) {
                c = (u + v) >> 1;
                if (arr[result[c]] < arrI) {
                    u = c + 1;
                }
                else {
                    v = c;
                }
            }
            if (arrI < arr[result[u]]) {
                if (u > 0) {
                    p[i] = result[u - 1];
                }
                result[u] = i;
            }
        }
    }
    u = k + 1;
    var seq = new Int32Array(u);
    v = result[u - 1];
    while (u-- > 0) {
        seq[u] = v;
        v = p[v];
        result[u] = 0;
    }
    return seq;
}

var hasDocumentAvailable = typeof document !== 'undefined';
if (hasDocumentAvailable) {
    /*
     * Defining $EV and $V properties on Node.prototype
     * fixes v8 "wrong map" de-optimization
     */
    if (window.Node) {
        Node.prototype.$EV = null;
        Node.prototype.$V = null;
    }
}
function __render(input, parentDOM, callback, context) {
    var lifecycle = [];
    var rootInput = parentDOM.$V;
    renderCheck.v = true;
    if (isNullOrUndef(rootInput)) {
        if (!isNullOrUndef(input)) {
            if (input.flags & 16384 /* InUse */) {
                input = directClone(input);
            }
            mount(input, parentDOM, context, false, null, lifecycle);
            parentDOM.$V = input;
            rootInput = input;
        }
    }
    else {
        if (isNullOrUndef(input)) {
            remove(rootInput, parentDOM);
            parentDOM.$V = null;
        }
        else {
            if (input.flags & 16384 /* InUse */) {
                input = directClone(input);
            }
            patch(rootInput, input, parentDOM, context, false, null, lifecycle);
            rootInput = parentDOM.$V = input;
        }
    }
    callAll(lifecycle);
    renderCheck.v = false;
    if (isFunction(callback)) {
        callback();
    }
    if (isFunction(options.renderComplete)) {
        options.renderComplete(rootInput, parentDOM);
    }
}
function render(input, parentDOM, callback, context) {
    if ( callback === void 0 ) callback = null;
    if ( context === void 0 ) context = EMPTY_OBJ;

    __render(input, parentDOM, callback, context);
}
function createRenderer(parentDOM) {
    return function renderer(lastInput, nextInput, callback, context) {
        if (!parentDOM) {
            parentDOM = lastInput;
        }
        render(nextInput, parentDOM, callback, context);
    };
}

var QUEUE = [];
var nextTick = typeof Promise !== 'undefined'
    ? Promise.resolve().then.bind(Promise.resolve())
    : function (a) {
        window.setTimeout(a, 0);
    };
var microTaskPending = false;
function queueStateChanges(component, newState, callback, force) {
    var pending = component.$PS;
    if (isFunction(newState)) {
        newState = newState(pending ? combineFrom(component.state, pending) : component.state, component.props, component.context);
    }
    if (isNullOrUndef(pending)) {
        component.$PS = newState;
    }
    else {
        for (var stateKey in newState) {
            pending[stateKey] = newState[stateKey];
        }
    }
    if (!component.$BR) {
        if (!renderCheck.v) {
            if (QUEUE.length === 0) {
                applyState(component, force);
                if (isFunction(callback)) {
                    callback.call(component);
                }
                return;
            }
        }
        if (QUEUE.indexOf(component) === -1) {
            QUEUE.push(component);
        }
        if (force) {
            component.$F = true;
        }
        if (!microTaskPending) {
            microTaskPending = true;
            nextTick(rerender);
        }
        if (isFunction(callback)) {
            var QU = component.$QU;
            if (!QU) {
                QU = component.$QU = [];
            }
            QU.push(callback);
        }
    }
    else if (isFunction(callback)) {
        component.$L.push(callback.bind(component));
    }
}
function callSetStateCallbacks(component) {
    var queue = component.$QU;
    for (var i = 0; i < queue.length; ++i) {
        queue[i].call(component);
    }
    component.$QU = null;
}
function rerender() {
    var component;
    microTaskPending = false;
    while ((component = QUEUE.shift())) {
        if (!component.$UN) {
            var force = component.$F;
            component.$F = false;
            applyState(component, force);
            if (component.$QU) {
                callSetStateCallbacks(component);
            }
        }
    }
}
function applyState(component, force) {
    if (force || !component.$BR) {
        var pendingState = component.$PS;
        component.$PS = null;
        var lifecycle = [];
        renderCheck.v = true;
        updateClassComponent(component, combineFrom(component.state, pendingState), component.props, findDOMfromVNode(component.$LI, true).parentNode, component.context, component.$SVG, force, null, lifecycle);
        callAll(lifecycle);
        renderCheck.v = false;
    }
    else {
        component.state = component.$PS;
        component.$PS = null;
    }
}
var Component = function Component(props, context) {
    // Public
    this.state = null;
    // Internal properties
    this.$BR = false; // BLOCK RENDER
    this.$BS = true; // BLOCK STATE
    this.$PS = null; // PENDING STATE (PARTIAL or FULL)
    this.$LI = null; // LAST INPUT
    this.$UN = false; // UNMOUNTED
    this.$CX = null; // CHILDCONTEXT
    this.$QU = null; // QUEUE
    this.$N = false; // Uses new lifecycle API Flag
    this.$L = null; // Current lifecycle of this component
    this.$SVG = false; // Flag to keep track if component is inside SVG tree
    this.$F = false; // Force update flag
    this.props = props || EMPTY_OBJ;
    this.context = context || EMPTY_OBJ; // context should not be mutable
};
Component.prototype.forceUpdate = function forceUpdate (callback) {
    if (this.$UN) {
        return;
    }
    // Do not allow double render during force update
    queueStateChanges(this, {}, callback, true);
};
Component.prototype.setState = function setState (newState, callback) {
    if (this.$UN) {
        return;
    }
    if (!this.$BS) {
        queueStateChanges(this, newState, callback, false);
    }
};
Component.prototype.render = function render (_nextProps, _nextState, _nextContext) {
    return null;
};

var version = "7.4.8";



;// CONCATENATED MODULE: ./node_modules/inferno/index.esm.js


if (false) {}


/***/ }),

/***/ 792:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js

var ws = null

if (typeof WebSocket !== 'undefined') {
  ws = WebSocket
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket
} else if (typeof __webpack_require__.g !== 'undefined') {
  ws = __webpack_require__.g.WebSocket || __webpack_require__.g.MozWebSocket
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket
} else if (typeof self !== 'undefined') {
  ws = self.WebSocket || self.MozWebSocket
}

module.exports = ws


/***/ }),

/***/ 806:
/***/ ((module) => {

module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var bitsmap_new = {
        _: 'BitsMap.new'
    };
    var bitsmap_tie = function(val, lft, rgt) {
        return {
            _: 'BitsMap.tip',
            val,
            lft,
            rgt
        };
    }
    var maybe_none = {
        _: 'Maybe.none'
    };
    var maybe_some = function(value) {
        return {
            _: 'Maybe.some',
            value
        };
    }
    var bitsmap_get = function(bits, map) {
        for (var i = bits.length - 1; i >= 0; --i) {
            if (map._ !== 'BitsMap.new') {
                map = bits[i] === '0' ? map.lft : map.rgt;
            }
        }
        return map._ === 'BitsMap.new' ? maybe_none : map.val;
    }
    var bitsmap_set = function(bits, val, map, mode) {
        var res = {
            value: map
        };
        var key = 'value';
        var obj = res;
        for (var i = bits.length - 1; i >= 0; --i) {
            var map = obj[key];
            if (map._ === 'BitsMap.new') {
                obj[key] = {
                    _: 'BitsMap.tie',
                    val: maybe_none,
                    lft: bitsmap_new,
                    rgt: bitsmap_new
                };
            } else {
                obj[key] = {
                    _: 'BitsMap.tie',
                    val: map.val,
                    lft: map.lft,
                    rgt: map.rgt
                };
            }
            obj = obj[key];
            key = bits[i] === '0' ? 'lft' : 'rgt';
        }
        var map = obj[key];
        if (map._ === 'BitsMap.new') {
            var x = mode === 'del' ? maybe_none : {
                _: 'Maybe.some',
                value: val
            };
            obj[key] = {
                _: 'BitsMap.tie',
                val: x,
                lft: bitsmap_new,
                rgt: bitsmap_new
            };
        } else {
            var x = mode === 'set' ? {
                _: 'Maybe.some',
                value: val
            } : mode === 'del' ? maybe_none : map.val;
            obj[key] = {
                _: 'BitsMap.tie',
                val: x,
                lft: map.lft,
                rgt: map.rgt
            };
        }
        return res.value;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var kind_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(null);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c0;
                return $2;
            } else {
                var $3 = c1;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c0;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c1($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $9 = self.slice(0, -1);
                    var $10 = c1($9);
                    return $10;
                case 'i':
                    var $11 = self.slice(0, -1);
                    var $12 = c2($11);
                    return $12;
                case 'e':
                    var $13 = c0;
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c0;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c1($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
            var ht = eval("require('http')");
            var hs = eval("require('https')");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
            var ht = null;
            var hs = null;
        };
        return run_io({
            rl,
            fs,
            pc,
            ht,
            hs
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var get_file_mtime = (lib, param) => {
        return String(lib.fs.statSync(param).mtime.getTime());
    };
    var request = (lib, param) => {
        if (typeof fetch === 'undefined') {
            return new Promise((res, err) => {
                (/^https/.test(param) ? lib.hs : lib.ht).get(param, r => {
                    let data = '';
                    r.on('data', chunk => {
                        data += chunk;
                    });
                    r.on('end', () => res(data));
                }).on('error', e => res(''));
            });
        } else {
            return fetch(param).then(res => res.text()).catch(e => '');
        }
    }
    var file_error = e => {
        if (e.message.indexOf('NOENT') !== -1) {
            return '';
        } else {
            throw e;
        }
    };
    var io_action = {
        print: async (lib, param) => {
            console.log(param);
            return '';
        },
        put_string: async (lib, param) => {
            process.stdout.write(param);
            return '';
        },
        get_file: async (lib, param) => {
            try {
                return get_file(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        set_file: async (lib, param) => {
            try {
                return set_file(lib, param)
            } catch (e) {
                return file_error(e);
            }
        },
        del_file: async (lib, param) => {
            try {
                return del_file(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        get_dir: async (lib, param) => {
            try {
                return get_dir(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        get_file_mtime: async (lib, param) => {
            try {
                return get_file_mtime(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        get_time: async (lib, param) => {
            return String(Date.now());
        },
        exit: async (lib, param) => {
            lib.pc.exit();
            return '';
        },
        request: async (lib, param) => {
            return request(lib, param);
        },
        get_time: async (lib, param) => {
            return String(Date.now());
        },
        get_line: async (lib, param) => {
            return await new Promise((res, err) => {
                lib.rl.question(p.param, (line) => res(line));
            });
        },
        get_args: async (lib, param) => {
            return lib.pc.argv[2] || '';
        },
    };
    var run_io = async (lib, io, depth = 0) => {
        switch (io._) {
            case 'IO.end':
                return Promise.resolve(io.value);
            case 'IO.ask':
                var action = io_action[io.query];
                var answer = await action(lib, io.param);
                return await run_io(lib, io.then(answer), depth + 1);
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function BitsMap$(_A$1) {
        var $36 = null;
        return $36;
    };
    const BitsMap = x0 => BitsMap$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });
    const BitsMap$get = a0 => a1 => (bitsmap_get(a0, a1));
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.eql':
                var $38 = Bool$true;
                var $37 = $38;
                break;
            case 'Cmp.gtn':
                var $39 = Bool$false;
                var $37 = $39;
                break;
        };
        return $37;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $41 = self.pred;
                var $42 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $44 = self.pred;
                            var $45 = (_a$pred$10 => {
                                var $46 = Word$cmp$go$(_a$pred$10, $44, _c$4);
                                return $46;
                            });
                            var $43 = $45;
                            break;
                        case 'Word.i':
                            var $47 = self.pred;
                            var $48 = (_a$pred$10 => {
                                var $49 = Word$cmp$go$(_a$pred$10, $47, Cmp$ltn);
                                return $49;
                            });
                            var $43 = $48;
                            break;
                        case 'Word.e':
                            var $50 = (_a$pred$8 => {
                                var $51 = _c$4;
                                return $51;
                            });
                            var $43 = $50;
                            break;
                    };
                    var $43 = $43($41);
                    return $43;
                });
                var $40 = $42;
                break;
            case 'Word.i':
                var $52 = self.pred;
                var $53 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $55 = self.pred;
                            var $56 = (_a$pred$10 => {
                                var $57 = Word$cmp$go$(_a$pred$10, $55, Cmp$gtn);
                                return $57;
                            });
                            var $54 = $56;
                            break;
                        case 'Word.i':
                            var $58 = self.pred;
                            var $59 = (_a$pred$10 => {
                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);
                                return $60;
                            });
                            var $54 = $59;
                            break;
                        case 'Word.e':
                            var $61 = (_a$pred$8 => {
                                var $62 = _c$4;
                                return $62;
                            });
                            var $54 = $61;
                            break;
                    };
                    var $54 = $54($52);
                    return $54;
                });
                var $40 = $53;
                break;
            case 'Word.e':
                var $63 = (_b$5 => {
                    var $64 = _c$4;
                    return $64;
                });
                var $40 = $63;
                break;
        };
        var $40 = $40(_b$3);
        return $40;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $65 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $65;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $66 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $66;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $67 = 1n + _pred$1;
        return $67;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $68 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $68;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $69 = word_to_u16(_value$1);
        return $69;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $70 = null;
        return $70;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $71 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $71;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $72 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $72;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $74 = self.pred;
                var $75 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $77 = self.pred;
                            var $78 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $80 = Word$i$(Word$subber$(_a$pred$10, $77, Bool$true));
                                    var $79 = $80;
                                } else {
                                    var $81 = Word$o$(Word$subber$(_a$pred$10, $77, Bool$false));
                                    var $79 = $81;
                                };
                                return $79;
                            });
                            var $76 = $78;
                            break;
                        case 'Word.i':
                            var $82 = self.pred;
                            var $83 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $85 = Word$o$(Word$subber$(_a$pred$10, $82, Bool$true));
                                    var $84 = $85;
                                } else {
                                    var $86 = Word$i$(Word$subber$(_a$pred$10, $82, Bool$true));
                                    var $84 = $86;
                                };
                                return $84;
                            });
                            var $76 = $83;
                            break;
                        case 'Word.e':
                            var $87 = (_a$pred$8 => {
                                var $88 = Word$e;
                                return $88;
                            });
                            var $76 = $87;
                            break;
                    };
                    var $76 = $76($74);
                    return $76;
                });
                var $73 = $75;
                break;
            case 'Word.i':
                var $89 = self.pred;
                var $90 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $92 = self.pred;
                            var $93 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $95 = Word$o$(Word$subber$(_a$pred$10, $92, Bool$false));
                                    var $94 = $95;
                                } else {
                                    var $96 = Word$i$(Word$subber$(_a$pred$10, $92, Bool$false));
                                    var $94 = $96;
                                };
                                return $94;
                            });
                            var $91 = $93;
                            break;
                        case 'Word.i':
                            var $97 = self.pred;
                            var $98 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $100 = Word$i$(Word$subber$(_a$pred$10, $97, Bool$true));
                                    var $99 = $100;
                                } else {
                                    var $101 = Word$o$(Word$subber$(_a$pred$10, $97, Bool$false));
                                    var $99 = $101;
                                };
                                return $99;
                            });
                            var $91 = $98;
                            break;
                        case 'Word.e':
                            var $102 = (_a$pred$8 => {
                                var $103 = Word$e;
                                return $103;
                            });
                            var $91 = $102;
                            break;
                    };
                    var $91 = $91($89);
                    return $91;
                });
                var $73 = $90;
                break;
            case 'Word.e':
                var $104 = (_b$5 => {
                    var $105 = Word$e;
                    return $105;
                });
                var $73 = $104;
                break;
        };
        var $73 = $73(_b$3);
        return $73;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $106 = Word$subber$(_a$2, _b$3, Bool$false);
        return $106;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => ((a0 - a1) & 0xFFFF);

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $107 = _x$4;
                    return $107;
                } else {
                    var $108 = (self - 1n);
                    var $109 = Nat$apply$($108, _f$3, _f$3(_x$4));
                    return $109;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $111 = self.pred;
                var $112 = Word$i$($111);
                var $110 = $112;
                break;
            case 'Word.i':
                var $113 = self.pred;
                var $114 = Word$o$(Word$inc$($113));
                var $110 = $114;
                break;
            case 'Word.e':
                var $115 = Word$e;
                var $110 = $115;
                break;
        };
        return $110;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $117 = Word$e;
            var $116 = $117;
        } else {
            var $118 = (self - 1n);
            var $119 = Word$o$(Word$zero$($118));
            var $116 = $119;
        };
        return $116;
    };
    const Word$zero = x0 => Word$zero$(x0);

    function Nat$to_word$(_size$1, _n$2) {
        var $120 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));
        return $120;
    };
    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);
    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $122 = self.pred;
                var $123 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $125 = self.pred;
                            var $126 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $128 = Word$i$(Word$adder$(_a$pred$10, $125, Bool$false));
                                    var $127 = $128;
                                } else {
                                    var $129 = Word$o$(Word$adder$(_a$pred$10, $125, Bool$false));
                                    var $127 = $129;
                                };
                                return $127;
                            });
                            var $124 = $126;
                            break;
                        case 'Word.i':
                            var $130 = self.pred;
                            var $131 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $133 = Word$o$(Word$adder$(_a$pred$10, $130, Bool$true));
                                    var $132 = $133;
                                } else {
                                    var $134 = Word$i$(Word$adder$(_a$pred$10, $130, Bool$false));
                                    var $132 = $134;
                                };
                                return $132;
                            });
                            var $124 = $131;
                            break;
                        case 'Word.e':
                            var $135 = (_a$pred$8 => {
                                var $136 = Word$e;
                                return $136;
                            });
                            var $124 = $135;
                            break;
                    };
                    var $124 = $124($122);
                    return $124;
                });
                var $121 = $123;
                break;
            case 'Word.i':
                var $137 = self.pred;
                var $138 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $140 = self.pred;
                            var $141 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $143 = Word$o$(Word$adder$(_a$pred$10, $140, Bool$true));
                                    var $142 = $143;
                                } else {
                                    var $144 = Word$i$(Word$adder$(_a$pred$10, $140, Bool$false));
                                    var $142 = $144;
                                };
                                return $142;
                            });
                            var $139 = $141;
                            break;
                        case 'Word.i':
                            var $145 = self.pred;
                            var $146 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $148 = Word$i$(Word$adder$(_a$pred$10, $145, Bool$true));
                                    var $147 = $148;
                                } else {
                                    var $149 = Word$o$(Word$adder$(_a$pred$10, $145, Bool$true));
                                    var $147 = $149;
                                };
                                return $147;
                            });
                            var $139 = $146;
                            break;
                        case 'Word.e':
                            var $150 = (_a$pred$8 => {
                                var $151 = Word$e;
                                return $151;
                            });
                            var $139 = $150;
                            break;
                    };
                    var $139 = $139($137);
                    return $139;
                });
                var $121 = $138;
                break;
            case 'Word.e':
                var $152 = (_b$5 => {
                    var $153 = Word$e;
                    return $153;
                });
                var $121 = $152;
                break;
        };
        var $121 = $121(_b$3);
        return $121;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $154 = Word$adder$(_a$2, _b$3, Bool$false);
        return $154;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.gtn':
                var $156 = Bool$false;
                var $155 = $156;
                break;
            case 'Cmp.eql':
                var $157 = Bool$true;
                var $155 = $157;
                break;
        };
        return $155;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $158 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $158;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $160 = self.pred;
                var $161 = (Word$to_bits$($160) + '0');
                var $159 = $161;
                break;
            case 'Word.i':
                var $162 = self.pred;
                var $163 = (Word$to_bits$($162) + '1');
                var $159 = $163;
                break;
            case 'Word.e':
                var $164 = Bits$e;
                var $159 = $164;
                break;
        };
        return $159;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $166 = Word$e;
            var $165 = $166;
        } else {
            var $167 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.o':
                    var $169 = self.pred;
                    var $170 = Word$o$(Word$trim$($167, $169));
                    var $168 = $170;
                    break;
                case 'Word.i':
                    var $171 = self.pred;
                    var $172 = Word$i$(Word$trim$($167, $171));
                    var $168 = $172;
                    break;
                case 'Word.e':
                    var $173 = Word$o$(Word$trim$($167, Word$e));
                    var $168 = $173;
                    break;
            };
            var $165 = $168;
        };
        return $165;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $174 = self.slice(0, -1);
                        var $175 = Bits$reverse$tco$($174, (_r$2 + '0'));
                        return $175;
                    case 'i':
                        var $176 = self.slice(0, -1);
                        var $177 = Bits$reverse$tco$($176, (_r$2 + '1'));
                        return $177;
                    case 'e':
                        var $178 = _r$2;
                        return $178;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $179 = Bits$reverse$tco$(_a$1, Bits$e);
        return $179;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));

    function Kind$Map$get$(_name$2, _map$3) {
        var $180 = (bitsmap_get((kind_name_to_bits(_name$2)), _map$3));
        return $180;
    };
    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);

    function Parser$Reply$(_V$1) {
        var $181 = null;
        return $181;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function List$(_A$1) {
        var $182 = null;
        return $182;
    };
    const List = x0 => List$(x0);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $183 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $183;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $184 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $184;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);
    const List$nil = ({
        _: 'List.nil'
    });

    function List$cons$(_head$2, _tail$3) {
        var $185 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $185;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $186 = self.idx;
                        var $187 = self.code;
                        var $188 = self.val;
                        var $189 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $190 = _values$3(List$cons$($188, _xs$9));
                            return $190;
                        }), $186, $187);
                        return $189;
                    case 'Parser.Reply.error':
                        var $191 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $191;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $192 = Parser$many$go(_parser$2)((_x$3 => {
            var $193 = _x$3;
            return $193;
        }));
        return $192;
    };
    const Parser$many = x0 => Parser$many$(x0);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $195 = self.idx;
                var $196 = self.code;
                var $197 = self.err;
                var $198 = Parser$Reply$error$($195, $196, $197);
                var $194 = $198;
                break;
            case 'Parser.Reply.value':
                var $199 = self.idx;
                var $200 = self.code;
                var $201 = self.val;
                var self = Parser$many$(_parser$2)($199)($200);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $203 = self.idx;
                        var $204 = self.code;
                        var $205 = self.err;
                        var $206 = Parser$Reply$error$($203, $204, $205);
                        var $202 = $206;
                        break;
                    case 'Parser.Reply.value':
                        var $207 = self.idx;
                        var $208 = self.code;
                        var $209 = self.val;
                        var $210 = Parser$Reply$value$($207, $208, List$cons$($201, $209));
                        var $202 = $210;
                        break;
                };
                var $194 = $202;
                break;
        };
        return $194;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $212 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $211 = $212;
        } else {
            var $213 = self.charCodeAt(0);
            var $214 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($213 === 48);
            if (self) {
                var $216 = Parser$Reply$value$(_sidx$5, $214, 0n);
                var $215 = $216;
            } else {
                var self = ($213 === 49);
                if (self) {
                    var $218 = Parser$Reply$value$(_sidx$5, $214, 1n);
                    var $217 = $218;
                } else {
                    var self = ($213 === 50);
                    if (self) {
                        var $220 = Parser$Reply$value$(_sidx$5, $214, 2n);
                        var $219 = $220;
                    } else {
                        var self = ($213 === 51);
                        if (self) {
                            var $222 = Parser$Reply$value$(_sidx$5, $214, 3n);
                            var $221 = $222;
                        } else {
                            var self = ($213 === 52);
                            if (self) {
                                var $224 = Parser$Reply$value$(_sidx$5, $214, 4n);
                                var $223 = $224;
                            } else {
                                var self = ($213 === 53);
                                if (self) {
                                    var $226 = Parser$Reply$value$(_sidx$5, $214, 5n);
                                    var $225 = $226;
                                } else {
                                    var self = ($213 === 54);
                                    if (self) {
                                        var $228 = Parser$Reply$value$(_sidx$5, $214, 6n);
                                        var $227 = $228;
                                    } else {
                                        var self = ($213 === 55);
                                        if (self) {
                                            var $230 = Parser$Reply$value$(_sidx$5, $214, 7n);
                                            var $229 = $230;
                                        } else {
                                            var self = ($213 === 56);
                                            if (self) {
                                                var $232 = Parser$Reply$value$(_sidx$5, $214, 8n);
                                                var $231 = $232;
                                            } else {
                                                var self = ($213 === 57);
                                                if (self) {
                                                    var $234 = Parser$Reply$value$(_sidx$5, $214, 9n);
                                                    var $233 = $234;
                                                } else {
                                                    var $235 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $233 = $235;
                                                };
                                                var $231 = $233;
                                            };
                                            var $229 = $231;
                                        };
                                        var $227 = $229;
                                    };
                                    var $225 = $227;
                                };
                                var $223 = $225;
                            };
                            var $221 = $223;
                        };
                        var $219 = $221;
                    };
                    var $217 = $219;
                };
                var $215 = $217;
            };
            var $211 = $215;
        };
        return $211;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.cons':
                        var $236 = self.head;
                        var $237 = self.tail;
                        var $238 = Nat$from_base$go$(_b$1, $237, (_b$1 * _p$3), (($236 * _p$3) + _res$4));
                        return $238;
                    case 'List.nil':
                        var $239 = _res$4;
                        return $239;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.cons':
                        var $240 = self.head;
                        var $241 = self.tail;
                        var $242 = List$reverse$go$($241, List$cons$($240, _res$3));
                        return $242;
                    case 'List.nil':
                        var $243 = _res$3;
                        return $243;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $244 = List$reverse$go$(_xs$2, List$nil);
        return $244;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Nat$from_base$(_base$1, _ds$2) {
        var $245 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $245;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $247 = self.idx;
                var $248 = self.code;
                var $249 = self.err;
                var $250 = Parser$Reply$error$($247, $248, $249);
                var $246 = $250;
                break;
            case 'Parser.Reply.value':
                var $251 = self.idx;
                var $252 = self.code;
                var $253 = self.val;
                var $254 = Parser$Reply$value$($251, $252, Nat$from_base$(10n, $253));
                var $246 = $254;
                break;
        };
        return $246;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Nat$read$(_str$1) {
        var _p$2 = Parser$nat$(0n, _str$1);
        var self = _p$2;
        switch (self._) {
            case 'Parser.Reply.value':
                var $256 = self.val;
                var $257 = $256;
                var $255 = $257;
                break;
            case 'Parser.Reply.error':
                var $258 = 0n;
                var $255 = $258;
                break;
        };
        return $255;
    };
    const Nat$read = x0 => Nat$read$(x0);
    const IO$get_time = IO$ask$("get_time", "", (_time$1 => {
        var $259 = IO$end$(Nat$read$(_time$1));
        return $259;
    }));

    function Maybe$some$(_value$2) {
        var $260 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $260;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Kind$Synth$load$cached$is_loop$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $262 = self.value;
                var self = $262;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $264 = self.stat;
                        var self = $264;
                        switch (self._) {
                            case 'Kind.Status.done':
                                var $266 = self.cached;
                                var $267 = $266;
                                var $265 = $267;
                                break;
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $268 = Bool$false;
                                var $265 = $268;
                                break;
                        };
                        var $263 = $265;
                        break;
                };
                var $261 = $263;
                break;
            case 'Maybe.none':
                var $269 = Bool$false;
                var $261 = $269;
                break;
        };
        return $261;
    };
    const Kind$Synth$load$cached$is_loop = x0 => x1 => Kind$Synth$load$cached$is_loop$(x0, x1);

    function IO$get_file$(_name$1) {
        var $270 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $271 = IO$end$(_file$2);
            return $271;
        }));
        return $270;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function String$cons$(_head$1, _tail$2) {
        var $272 = (String.fromCharCode(_head$1) + _tail$2);
        return $272;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);
    const Bool$not = a0 => (!a0);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $274 = Bool$true;
            var $273 = $274;
        } else {
            var $275 = self.charCodeAt(0);
            var $276 = self.slice(1);
            var $277 = Bool$false;
            var $273 = $277;
        };
        return $273;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function IO$get_file_mtime$(_name$1) {
        var $278 = IO$ask$("get_file_mtime", _name$1, (_file$2 => {
            var $279 = IO$end$(_file$2);
            return $279;
        }));
        return $278;
    };
    const IO$get_file_mtime = x0 => IO$get_file_mtime$(x0);
    const String$eql = a0 => a1 => (a0 === a1);

    function Pair$new$(_fst$3, _snd$4) {
        var $280 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $280;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.some':
                var $282 = self.value;
                var $283 = _f$4($282);
                var $281 = $283;
                break;
            case 'Maybe.none':
                var $284 = Maybe$none;
                var $281 = $284;
                break;
        };
        return $281;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $285 = _new$2(Maybe$bind)(Maybe$some);
        return $285;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Pair$(_A$1, _B$2) {
        var $286 = null;
        return $286;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);
    const Unit$new = null;
    const Bool$or = a0 => a1 => (a0 || a1);

    function Kind$Core$read$spaces$(_code$1) {
        var Kind$Core$read$spaces$ = (_code$1) => ({
            ctr: 'TCO',
            arg: [_code$1]
        });
        var Kind$Core$read$spaces = _code$1 => Kind$Core$read$spaces$(_code$1);
        var arg = [_code$1];
        while (true) {
            let [_code$1] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $287 = Pair$new$(_code$1, Unit$new);
                    return $287;
                } else {
                    var $288 = self.charCodeAt(0);
                    var $289 = self.slice(1);
                    var _is_space$4 = (($288 === 32) || (($288 === 10) || (($288 === 13) || (($288 === 9) || (($288 === 11) || (($288 === 12) || Bool$false))))));
                    var self = _is_space$4;
                    if (self) {
                        var $291 = Kind$Core$read$spaces$($289);
                        var $290 = $291;
                    } else {
                        var $292 = Pair$new$(_code$1, Unit$new);
                        var $290 = $292;
                    };
                    return $290;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$spaces = x0 => Kind$Core$read$spaces$(x0);

    function Kind$Term$ref$(_name$1) {
        var $293 = ({
            _: 'Kind.Term.ref',
            'name': _name$1
        });
        return $293;
    };
    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);

    function Char$eql$(_a$1, _b$2) {
        var $294 = (_a$1 === _b$2);
        return $294;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);
    const Kind$Term$typ = ({
        _: 'Kind.Term.typ'
    });

    function Cmp$as_gte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $296 = Bool$false;
                var $295 = $296;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $297 = Bool$true;
                var $295 = $297;
                break;
        };
        return $295;
    };
    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);

    function Word$gte$(_a$2, _b$3) {
        var $298 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));
        return $298;
    };
    const Word$gte = x0 => x1 => Word$gte$(x0, x1);
    const U16$gte = a0 => a1 => (a0 >= a1);

    function Cmp$as_ltn$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $300 = Bool$true;
                var $299 = $300;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $301 = Bool$false;
                var $299 = $301;
                break;
        };
        return $299;
    };
    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);

    function Word$ltn$(_a$2, _b$3) {
        var $302 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));
        return $302;
    };
    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);
    const U16$ltn = a0 => a1 => (a0 < a1);

    function Kind$Core$read$is_name$(_chr$1) {
        var $303 = (((_chr$1 >= 46) && (_chr$1 <= 47)) || (((_chr$1 >= 48) && (_chr$1 < 58)) || (((_chr$1 >= 65) && (_chr$1 < 91)) || (((_chr$1 >= 95) && (_chr$1 < 96)) || (((_chr$1 >= 97) && (_chr$1 < 123)) || Bool$false)))));
        return $303;
    };
    const Kind$Core$read$is_name = x0 => Kind$Core$read$is_name$(x0);

    function Kind$Core$read$name$(_code$1) {
        var self = _code$1;
        if (self.length === 0) {
            var $305 = Pair$new$(_code$1, "");
            var $304 = $305;
        } else {
            var $306 = self.charCodeAt(0);
            var $307 = self.slice(1);
            var self = Kind$Core$read$is_name$($306);
            if (self) {
                var self = Kind$Core$read$name$($307);
                switch (self._) {
                    case 'Pair.new':
                        var $310 = self.fst;
                        var $311 = self.snd;
                        var $312 = Pair$new$($310, String$cons$($306, $311));
                        var $309 = $312;
                        break;
                };
                var $308 = $309;
            } else {
                var $313 = Pair$new$(_code$1, "");
                var $308 = $313;
            };
            var $304 = $308;
        };
        return $304;
    };
    const Kind$Core$read$name = x0 => Kind$Core$read$name$(x0);

    function Kind$Core$read$char$(_code$1, _chr$2) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $315 = self.fst;
                var self = $315;
                if (self.length === 0) {
                    var $317 = Pair$new$("", Unit$new);
                    var $316 = $317;
                } else {
                    var $318 = self.charCodeAt(0);
                    var $319 = self.slice(1);
                    var self = ($318 === _chr$2);
                    if (self) {
                        var $321 = Pair$new$($319, Unit$new);
                        var $320 = $321;
                    } else {
                        var $322 = Pair$new$("", Unit$new);
                        var $320 = $322;
                    };
                    var $316 = $320;
                };
                var $314 = $316;
                break;
        };
        return $314;
    };
    const Kind$Core$read$char = x0 => x1 => Kind$Core$read$char$(x0, x1);

    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $323 = ({
            _: 'Kind.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $323;
    };
    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);

    function Kind$Term$lam$(_name$1, _body$2) {
        var $324 = ({
            _: 'Kind.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $324;
    };
    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);

    function Kind$Term$app$(_func$1, _argm$2) {
        var $325 = ({
            _: 'Kind.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $325;
    };
    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);

    function Kind$Term$let$(_name$1, _expr$2, _body$3) {
        var $326 = ({
            _: 'Kind.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $326;
    };
    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);

    function Kind$Term$def$(_name$1, _expr$2, _body$3) {
        var $327 = ({
            _: 'Kind.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $327;
    };
    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);

    function Kind$Term$ann$(_done$1, _term$2, _type$3) {
        var $328 = ({
            _: 'Kind.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $328;
    };
    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $329 = Bool$true;
                    return $329;
                } else {
                    var $330 = self.charCodeAt(0);
                    var $331 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $333 = Bool$false;
                        var $332 = $333;
                    } else {
                        var $334 = self.charCodeAt(0);
                        var $335 = self.slice(1);
                        var self = Char$eql$($330, $334);
                        if (self) {
                            var $337 = String$starts_with$($335, $331);
                            var $336 = $337;
                        } else {
                            var $338 = Bool$false;
                            var $336 = $338;
                        };
                        var $332 = $336;
                    };
                    return $332;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);
    const String$nil = '';

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $339 = _xs$2;
                    return $339;
                } else {
                    var $340 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $342 = String$nil;
                        var $341 = $342;
                    } else {
                        var $343 = self.charCodeAt(0);
                        var $344 = self.slice(1);
                        var $345 = String$drop$($340, $344);
                        var $341 = $345;
                    };
                    return $341;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function Char$is_hex$(_chr$1) {
        var $346 = (((_chr$1 >= 48) && (_chr$1 <= 57)) || (((_chr$1 >= 97) && (_chr$1 <= 102)) || (((_chr$1 >= 65) && (_chr$1 <= 70)) || Bool$false)));
        return $346;
    };
    const Char$is_hex = x0 => Char$is_hex$(x0);

    function Word$shift_left1$aux$(_word$2, _prev$3) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $348 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $350 = Word$i$(Word$shift_left1$aux$($348, Bool$false));
                    var $349 = $350;
                } else {
                    var $351 = Word$o$(Word$shift_left1$aux$($348, Bool$false));
                    var $349 = $351;
                };
                var $347 = $349;
                break;
            case 'Word.i':
                var $352 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $354 = Word$i$(Word$shift_left1$aux$($352, Bool$true));
                    var $353 = $354;
                } else {
                    var $355 = Word$o$(Word$shift_left1$aux$($352, Bool$true));
                    var $353 = $355;
                };
                var $347 = $353;
                break;
            case 'Word.e':
                var $356 = Word$e;
                var $347 = $356;
                break;
        };
        return $347;
    };
    const Word$shift_left1$aux = x0 => x1 => Word$shift_left1$aux$(x0, x1);

    function Word$shift_left1$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $358 = self.pred;
                var $359 = Word$o$(Word$shift_left1$aux$($358, Bool$false));
                var $357 = $359;
                break;
            case 'Word.i':
                var $360 = self.pred;
                var $361 = Word$o$(Word$shift_left1$aux$($360, Bool$true));
                var $357 = $361;
                break;
            case 'Word.e':
                var $362 = Word$e;
                var $357 = $362;
                break;
        };
        return $357;
    };
    const Word$shift_left1 = x0 => Word$shift_left1$(x0);

    function Word$mul$go$(_a$3, _b$4, _acc$5) {
        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({
            ctr: 'TCO',
            arg: [_a$3, _b$4, _acc$5]
        });
        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);
        var arg = [_a$3, _b$4, _acc$5];
        while (true) {
            let [_a$3, _b$4, _acc$5] = arg;
            var R = (() => {
                var self = _a$3;
                switch (self._) {
                    case 'Word.o':
                        var $363 = self.pred;
                        var $364 = Word$mul$go$($363, Word$shift_left1$(_b$4), _acc$5);
                        return $364;
                    case 'Word.i':
                        var $365 = self.pred;
                        var $366 = Word$mul$go$($365, Word$shift_left1$(_b$4), Word$add$(_b$4, _acc$5));
                        return $366;
                    case 'Word.e':
                        var $367 = _acc$5;
                        return $367;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);

    function Word$to_zero$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $369 = self.pred;
                var $370 = Word$o$(Word$to_zero$($369));
                var $368 = $370;
                break;
            case 'Word.i':
                var $371 = self.pred;
                var $372 = Word$o$(Word$to_zero$($371));
                var $368 = $372;
                break;
            case 'Word.e':
                var $373 = Word$e;
                var $368 = $373;
                break;
        };
        return $368;
    };
    const Word$to_zero = x0 => Word$to_zero$(x0);

    function Word$mul$(_a$2, _b$3) {
        var $374 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));
        return $374;
    };
    const Word$mul = x0 => x1 => Word$mul$(x0, x1);
    const U16$mul = a0 => a1 => ((a0 * a1) & 0xFFFF);
    const U16$inc = a0 => ((a0 + 1) & 0xFFFF);
    const U16$zero = U16$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))));

    function Char$hex_value16$(_chr$1) {
        var self = ((_chr$1 >= 48) && (_chr$1 <= 57));
        if (self) {
            var $376 = ((_chr$1 - 48) & 0xFFFF);
            var $375 = $376;
        } else {
            var self = ((_chr$1 >= 97) && (_chr$1 <= 102));
            if (self) {
                var $378 = (_x0$2 => {
                    var $379 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                    return $379;
                })(((_chr$1 - 97) & 0xFFFF));
                var $377 = $378;
            } else {
                var self = ((_chr$1 >= 65) && (_chr$1 <= 70));
                if (self) {
                    var $381 = (_x0$2 => {
                        var $382 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                        return $382;
                    })(((_chr$1 - 65) & 0xFFFF));
                    var $380 = $381;
                } else {
                    var $383 = U16$zero;
                    var $380 = $383;
                };
                var $377 = $380;
            };
            var $375 = $377;
        };
        return $375;
    };
    const Char$hex_value16 = x0 => Char$hex_value16$(x0);

    function Kind$Core$read$u16$(_code$1, _u16$2) {
        var Kind$Core$read$u16$ = (_code$1, _u16$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _u16$2]
        });
        var Kind$Core$read$u16 = _code$1 => _u16$2 => Kind$Core$read$u16$(_code$1, _u16$2);
        var arg = [_code$1, _u16$2];
        while (true) {
            let [_code$1, _u16$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $384 = Pair$new$(_code$1, _u16$2);
                    return $384;
                } else {
                    var $385 = self.charCodeAt(0);
                    var $386 = self.slice(1);
                    var self = Char$is_hex$($385);
                    if (self) {
                        var _u16$5 = ((((_u16$2 * 16) & 0xFFFF) + Char$hex_value16$($385)) & 0xFFFF);
                        var $388 = Kind$Core$read$u16$($386, _u16$5);
                        var $387 = $388;
                    } else {
                        var $389 = Pair$new$(_code$1, _u16$2);
                        var $387 = $389;
                    };
                    return $387;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$u16 = x0 => x1 => Kind$Core$read$u16$(x0, x1);

    function Kind$Core$read$chrx$(_code$1) {
        var self = String$starts_with$(_code$1, "\\u{");
        if (self) {
            var _code$2 = String$drop$(3n, _code$1);
            var self = Kind$Core$read$u16$(_code$2, 0);
            switch (self._) {
                case 'Pair.new':
                    var $392 = self.fst;
                    var $393 = self.snd;
                    var self = String$starts_with$($392, "}");
                    if (self) {
                        var $395 = Pair$new$(String$drop$(1n, $392), $393);
                        var $394 = $395;
                    } else {
                        var $396 = Pair$new$("", 63);
                        var $394 = $396;
                    };
                    var $391 = $394;
                    break;
            };
            var $390 = $391;
        } else {
            var self = String$starts_with$(_code$1, "\\\'");
            if (self) {
                var $398 = Pair$new$(String$drop$(2n, _code$1), 39);
                var $397 = $398;
            } else {
                var self = String$starts_with$(_code$1, "\\\"");
                if (self) {
                    var $400 = Pair$new$(String$drop$(2n, _code$1), 34);
                    var $399 = $400;
                } else {
                    var self = String$starts_with$(_code$1, "\\\\");
                    if (self) {
                        var $402 = Pair$new$(String$drop$(2n, _code$1), 92);
                        var $401 = $402;
                    } else {
                        var self = _code$1;
                        if (self.length === 0) {
                            var $404 = Pair$new$("", 63);
                            var $403 = $404;
                        } else {
                            var $405 = self.charCodeAt(0);
                            var $406 = self.slice(1);
                            var $407 = Pair$new$($406, $405);
                            var $403 = $407;
                        };
                        var $401 = $403;
                    };
                    var $399 = $401;
                };
                var $397 = $399;
            };
            var $390 = $397;
        };
        return $390;
    };
    const Kind$Core$read$chrx = x0 => Kind$Core$read$chrx$(x0);

    function Kind$Term$chr$(_chrx$1) {
        var $408 = ({
            _: 'Kind.Term.chr',
            'chrx': _chrx$1
        });
        return $408;
    };
    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);

    function Kind$Core$read$strx$(_code$1) {
        var self = String$starts_with$(_code$1, "\"");
        if (self) {
            var $410 = Pair$new$(_code$1, "");
            var $409 = $410;
        } else {
            var self = Kind$Core$read$chrx$(_code$1);
            switch (self._) {
                case 'Pair.new':
                    var $412 = self.fst;
                    var $413 = self.snd;
                    var self = Kind$Core$read$strx$($412);
                    switch (self._) {
                        case 'Pair.new':
                            var $415 = self.fst;
                            var $416 = self.snd;
                            var $417 = Pair$new$($415, String$cons$($413, $416));
                            var $414 = $417;
                            break;
                    };
                    var $411 = $414;
                    break;
            };
            var $409 = $411;
        };
        return $409;
    };
    const Kind$Core$read$strx = x0 => Kind$Core$read$strx$(x0);

    function Kind$Term$str$(_strx$1) {
        var $418 = ({
            _: 'Kind.Term.str',
            'strx': _strx$1
        });
        return $418;
    };
    const Kind$Term$str = x0 => Kind$Term$str$(x0);

    function Char$dec_value$(_chr$1) {
        var self = (_chr$1 === 48);
        if (self) {
            var $420 = 0n;
            var $419 = $420;
        } else {
            var self = (_chr$1 === 49);
            if (self) {
                var $422 = 1n;
                var $421 = $422;
            } else {
                var self = (_chr$1 === 50);
                if (self) {
                    var $424 = 2n;
                    var $423 = $424;
                } else {
                    var self = (_chr$1 === 51);
                    if (self) {
                        var $426 = 3n;
                        var $425 = $426;
                    } else {
                        var self = (_chr$1 === 52);
                        if (self) {
                            var $428 = 4n;
                            var $427 = $428;
                        } else {
                            var self = (_chr$1 === 53);
                            if (self) {
                                var $430 = 5n;
                                var $429 = $430;
                            } else {
                                var self = (_chr$1 === 54);
                                if (self) {
                                    var $432 = 6n;
                                    var $431 = $432;
                                } else {
                                    var self = (_chr$1 === 55);
                                    if (self) {
                                        var $434 = 7n;
                                        var $433 = $434;
                                    } else {
                                        var self = (_chr$1 === 56);
                                        if (self) {
                                            var $436 = 8n;
                                            var $435 = $436;
                                        } else {
                                            var self = (_chr$1 === 57);
                                            if (self) {
                                                var $438 = 9n;
                                                var $437 = $438;
                                            } else {
                                                var $439 = 0n;
                                                var $437 = $439;
                                            };
                                            var $435 = $437;
                                        };
                                        var $433 = $435;
                                    };
                                    var $431 = $433;
                                };
                                var $429 = $431;
                            };
                            var $427 = $429;
                        };
                        var $425 = $427;
                    };
                    var $423 = $425;
                };
                var $421 = $423;
            };
            var $419 = $421;
        };
        return $419;
    };
    const Char$dec_value = x0 => Char$dec_value$(x0);

    function Kind$Core$read$natx$(_code$1, _nat$2) {
        var Kind$Core$read$natx$ = (_code$1, _nat$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _nat$2]
        });
        var Kind$Core$read$natx = _code$1 => _nat$2 => Kind$Core$read$natx$(_code$1, _nat$2);
        var arg = [_code$1, _nat$2];
        while (true) {
            let [_code$1, _nat$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $440 = Pair$new$(_code$1, _nat$2);
                    return $440;
                } else {
                    var $441 = self.charCodeAt(0);
                    var $442 = self.slice(1);
                    var self = Char$is_hex$($441);
                    if (self) {
                        var _nat$5 = ((_nat$2 * 10n) + Char$dec_value$($441));
                        var $444 = Kind$Core$read$natx$($442, _nat$5);
                        var $443 = $444;
                    } else {
                        var $445 = Pair$new$(_code$1, _nat$2);
                        var $443 = $445;
                    };
                    return $443;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$natx = x0 => x1 => Kind$Core$read$natx$(x0, x1);

    function Kind$Term$nat$(_natx$1) {
        var $446 = ({
            _: 'Kind.Term.nat',
            'natx': _natx$1
        });
        return $446;
    };
    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $448 = self.fst;
                var $449 = $448;
                var $447 = $449;
                break;
        };
        return $447;
    };
    const Pair$fst = x0 => Pair$fst$(x0);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $451 = Nat$zero;
            var $450 = $451;
        } else {
            var $452 = (self - 1n);
            var $453 = $452;
            var $450 = $453;
        };
        return $450;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5) {
        var Kind$Core$read$find$ = (_list$2, _cond$3, _indx$4, _skip$5) => ({
            ctr: 'TCO',
            arg: [_list$2, _cond$3, _indx$4, _skip$5]
        });
        var Kind$Core$read$find = _list$2 => _cond$3 => _indx$4 => _skip$5 => Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5);
        var arg = [_list$2, _cond$3, _indx$4, _skip$5];
        while (true) {
            let [_list$2, _cond$3, _indx$4, _skip$5] = arg;
            var R = (() => {
                var self = _list$2;
                switch (self._) {
                    case 'List.cons':
                        var $454 = self.head;
                        var $455 = self.tail;
                        var self = _cond$3($454)(_indx$4);
                        if (self) {
                            var self = (_skip$5 === 0n);
                            if (self) {
                                var $458 = Maybe$some$(Pair$new$($454, _indx$4));
                                var $457 = $458;
                            } else {
                                var $459 = Kind$Core$read$find$($455, _cond$3, Nat$succ$(_indx$4), Nat$pred$(_skip$5));
                                var $457 = $459;
                            };
                            var $456 = $457;
                        } else {
                            var $460 = Kind$Core$read$find$($455, _cond$3, Nat$succ$(_indx$4), _skip$5);
                            var $456 = $460;
                        };
                        return $456;
                    case 'List.nil':
                        var $461 = Maybe$none;
                        return $461;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$find = x0 => x1 => x2 => x3 => Kind$Core$read$find$(x0, x1, x2, x3);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $463 = self.snd;
                var $464 = $463;
                var $462 = $464;
                break;
        };
        return $462;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Kind$Core$read$term$(_code$1) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $466 = self.fst;
                var self = $466;
                if (self.length === 0) {
                    var $468 = Pair$new$("", (_ctx$4 => {
                        var $469 = Kind$Term$ref$("error");
                        return $469;
                    }));
                    var $467 = $468;
                } else {
                    var $470 = self.charCodeAt(0);
                    var $471 = self.slice(1);
                    var _head$6 = $470;
                    var _code$7 = $471;
                    var self = Char$eql$(_head$6, 42);
                    if (self) {
                        var $473 = Pair$new$(_code$7, (_ctx$8 => {
                            var $474 = Kind$Term$typ;
                            return $474;
                        }));
                        var $472 = $473;
                    } else {
                        var self = (_head$6 === 64);
                        if (self) {
                            var self = Kind$Core$read$name$(_code$7);
                            switch (self._) {
                                case 'Pair.new':
                                    var $477 = self.fst;
                                    var $478 = self.snd;
                                    var self = Kind$Core$read$char$($477, 40);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $480 = self.fst;
                                            var self = Kind$Core$read$name$($480);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $482 = self.fst;
                                                    var $483 = self.snd;
                                                    var self = Kind$Core$read$char$($482, 58);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $485 = self.fst;
                                                            var self = Kind$Core$read$term$($485);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $487 = self.fst;
                                                                    var $488 = self.snd;
                                                                    var self = Kind$Core$read$char$($487, 41);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $490 = self.fst;
                                                                            var self = Kind$Core$read$term$($490);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $492 = self.fst;
                                                                                    var $493 = self.snd;
                                                                                    var $494 = Pair$new$($492, (_ctx$22 => {
                                                                                        var $495 = Kind$Term$all$(Bool$false, $478, $483, $488(_ctx$22), (_s$23 => _x$24 => {
                                                                                            var $496 = $493(List$cons$(Pair$new$($483, _x$24), List$cons$(Pair$new$($478, _s$23), _ctx$22)));
                                                                                            return $496;
                                                                                        }));
                                                                                        return $495;
                                                                                    }));
                                                                                    var $491 = $494;
                                                                                    break;
                                                                            };
                                                                            var $489 = $491;
                                                                            break;
                                                                    };
                                                                    var $486 = $489;
                                                                    break;
                                                            };
                                                            var $484 = $486;
                                                            break;
                                                    };
                                                    var $481 = $484;
                                                    break;
                                            };
                                            var $479 = $481;
                                            break;
                                    };
                                    var $476 = $479;
                                    break;
                            };
                            var $475 = $476;
                        } else {
                            var self = (_head$6 === 37);
                            if (self) {
                                var self = Kind$Core$read$name$(_code$7);
                                switch (self._) {
                                    case 'Pair.new':
                                        var $499 = self.fst;
                                        var $500 = self.snd;
                                        var self = Kind$Core$read$char$($499, 40);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $502 = self.fst;
                                                var self = Kind$Core$read$name$($502);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $504 = self.fst;
                                                        var $505 = self.snd;
                                                        var self = Kind$Core$read$char$($504, 58);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $507 = self.fst;
                                                                var self = Kind$Core$read$term$($507);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $509 = self.fst;
                                                                        var $510 = self.snd;
                                                                        var self = Kind$Core$read$char$($509, 41);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $512 = self.fst;
                                                                                var self = Kind$Core$read$term$($512);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $514 = self.fst;
                                                                                        var $515 = self.snd;
                                                                                        var $516 = Pair$new$($514, (_ctx$22 => {
                                                                                            var $517 = Kind$Term$all$(Bool$true, $500, $505, $510(_ctx$22), (_s$23 => _x$24 => {
                                                                                                var $518 = $515(List$cons$(Pair$new$($505, _x$24), List$cons$(Pair$new$($500, _s$23), _ctx$22)));
                                                                                                return $518;
                                                                                            }));
                                                                                            return $517;
                                                                                        }));
                                                                                        var $513 = $516;
                                                                                        break;
                                                                                };
                                                                                var $511 = $513;
                                                                                break;
                                                                        };
                                                                        var $508 = $511;
                                                                        break;
                                                                };
                                                                var $506 = $508;
                                                                break;
                                                        };
                                                        var $503 = $506;
                                                        break;
                                                };
                                                var $501 = $503;
                                                break;
                                        };
                                        var $498 = $501;
                                        break;
                                };
                                var $497 = $498;
                            } else {
                                var self = (_head$6 === 35);
                                if (self) {
                                    var self = Kind$Core$read$name$(_code$7);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $521 = self.fst;
                                            var $522 = self.snd;
                                            var self = Kind$Core$read$term$($521);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $524 = self.fst;
                                                    var $525 = self.snd;
                                                    var $526 = Pair$new$($524, (_ctx$12 => {
                                                        var $527 = Kind$Term$lam$($522, (_x$13 => {
                                                            var $528 = $525(List$cons$(Pair$new$($522, _x$13), _ctx$12));
                                                            return $528;
                                                        }));
                                                        return $527;
                                                    }));
                                                    var $523 = $526;
                                                    break;
                                            };
                                            var $520 = $523;
                                            break;
                                    };
                                    var $519 = $520;
                                } else {
                                    var self = (_head$6 === 40);
                                    if (self) {
                                        var self = Kind$Core$read$term$(_code$7);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $531 = self.fst;
                                                var $532 = self.snd;
                                                var self = Kind$Core$read$term$($531);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $534 = self.fst;
                                                        var $535 = self.snd;
                                                        var self = Kind$Core$read$char$($534, 41);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $537 = self.fst;
                                                                var $538 = Pair$new$($537, (_ctx$14 => {
                                                                    var $539 = Kind$Term$app$($532(_ctx$14), $535(_ctx$14));
                                                                    return $539;
                                                                }));
                                                                var $536 = $538;
                                                                break;
                                                        };
                                                        var $533 = $536;
                                                        break;
                                                };
                                                var $530 = $533;
                                                break;
                                        };
                                        var $529 = $530;
                                    } else {
                                        var self = (_head$6 === 33);
                                        if (self) {
                                            var self = Kind$Core$read$name$(_code$7);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $542 = self.fst;
                                                    var $543 = self.snd;
                                                    var self = Kind$Core$read$char$($542, 61);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $545 = self.fst;
                                                            var self = Kind$Core$read$term$($545);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $547 = self.fst;
                                                                    var $548 = self.snd;
                                                                    var self = Kind$Core$read$char$($547, 59);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $550 = self.fst;
                                                                            var self = Kind$Core$read$term$($550);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $552 = self.fst;
                                                                                    var $553 = self.snd;
                                                                                    var $554 = Pair$new$($552, (_ctx$18 => {
                                                                                        var $555 = Kind$Term$let$($543, $548(_ctx$18), (_x$19 => {
                                                                                            var $556 = $553(List$cons$(Pair$new$($543, _x$19), _ctx$18));
                                                                                            return $556;
                                                                                        }));
                                                                                        return $555;
                                                                                    }));
                                                                                    var $551 = $554;
                                                                                    break;
                                                                            };
                                                                            var $549 = $551;
                                                                            break;
                                                                    };
                                                                    var $546 = $549;
                                                                    break;
                                                            };
                                                            var $544 = $546;
                                                            break;
                                                    };
                                                    var $541 = $544;
                                                    break;
                                            };
                                            var $540 = $541;
                                        } else {
                                            var self = (_head$6 === 36);
                                            if (self) {
                                                var self = Kind$Core$read$name$(_code$7);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $559 = self.fst;
                                                        var $560 = self.snd;
                                                        var self = Kind$Core$read$char$($559, 61);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $562 = self.fst;
                                                                var self = Kind$Core$read$term$($562);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $564 = self.fst;
                                                                        var $565 = self.snd;
                                                                        var self = Kind$Core$read$char$($564, 59);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $567 = self.fst;
                                                                                var self = Kind$Core$read$term$($567);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $569 = self.fst;
                                                                                        var $570 = self.snd;
                                                                                        var $571 = Pair$new$($569, (_ctx$18 => {
                                                                                            var $572 = Kind$Term$def$($560, $565(_ctx$18), (_x$19 => {
                                                                                                var $573 = $570(List$cons$(Pair$new$($560, _x$19), _ctx$18));
                                                                                                return $573;
                                                                                            }));
                                                                                            return $572;
                                                                                        }));
                                                                                        var $568 = $571;
                                                                                        break;
                                                                                };
                                                                                var $566 = $568;
                                                                                break;
                                                                        };
                                                                        var $563 = $566;
                                                                        break;
                                                                };
                                                                var $561 = $563;
                                                                break;
                                                        };
                                                        var $558 = $561;
                                                        break;
                                                };
                                                var $557 = $558;
                                            } else {
                                                var self = (_head$6 === 123);
                                                if (self) {
                                                    var self = Kind$Core$read$term$(_code$7);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $576 = self.fst;
                                                            var $577 = self.snd;
                                                            var self = Kind$Core$read$char$($576, 58);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $579 = self.fst;
                                                                    var self = Kind$Core$read$term$($579);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $581 = self.fst;
                                                                            var $582 = self.snd;
                                                                            var self = Kind$Core$read$char$($581, 125);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $584 = self.fst;
                                                                                    var $585 = Pair$new$($584, (_ctx$16 => {
                                                                                        var $586 = Kind$Term$ann$(Bool$false, $577(_ctx$16), $582(_ctx$16));
                                                                                        return $586;
                                                                                    }));
                                                                                    var $583 = $585;
                                                                                    break;
                                                                            };
                                                                            var $580 = $583;
                                                                            break;
                                                                    };
                                                                    var $578 = $580;
                                                                    break;
                                                            };
                                                            var $575 = $578;
                                                            break;
                                                    };
                                                    var $574 = $575;
                                                } else {
                                                    var self = (_head$6 === 39);
                                                    if (self) {
                                                        var self = Kind$Core$read$chrx$(_code$7);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $589 = self.fst;
                                                                var $590 = self.snd;
                                                                var self = Kind$Core$read$char$($589, 39);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $592 = self.fst;
                                                                        var $593 = Pair$new$($592, (_ctx$12 => {
                                                                            var $594 = Kind$Term$chr$($590);
                                                                            return $594;
                                                                        }));
                                                                        var $591 = $593;
                                                                        break;
                                                                };
                                                                var $588 = $591;
                                                                break;
                                                        };
                                                        var $587 = $588;
                                                    } else {
                                                        var self = (_head$6 === 34);
                                                        if (self) {
                                                            var self = Kind$Core$read$strx$(_code$7);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $597 = self.fst;
                                                                    var $598 = self.snd;
                                                                    var self = Kind$Core$read$char$($597, 34);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $600 = self.fst;
                                                                            var $601 = Pair$new$($600, (_ctx$12 => {
                                                                                var $602 = Kind$Term$str$($598);
                                                                                return $602;
                                                                            }));
                                                                            var $599 = $601;
                                                                            break;
                                                                    };
                                                                    var $596 = $599;
                                                                    break;
                                                            };
                                                            var $595 = $596;
                                                        } else {
                                                            var self = (_head$6 === 43);
                                                            if (self) {
                                                                var self = Kind$Core$read$natx$(_code$7, 0n);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $605 = self.fst;
                                                                        var $606 = self.snd;
                                                                        var $607 = Pair$new$($605, (_ctx$10 => {
                                                                            var $608 = Kind$Term$nat$($606);
                                                                            return $608;
                                                                        }));
                                                                        var $604 = $607;
                                                                        break;
                                                                };
                                                                var $603 = $604;
                                                            } else {
                                                                var self = Kind$Core$read$is_name$(_head$6);
                                                                if (self) {
                                                                    var self = Kind$Core$read$name$(_code$7);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $611 = self.fst;
                                                                            var $612 = self.snd;
                                                                            var _name$10 = String$cons$(_head$6, $612);
                                                                            var self = $611;
                                                                            if (self.length === 0) {
                                                                                var $614 = Pair$new$("", 0n);
                                                                                var self = $614;
                                                                            } else {
                                                                                var $615 = self.charCodeAt(0);
                                                                                var $616 = self.slice(1);
                                                                                var self = ($615 === 94);
                                                                                if (self) {
                                                                                    var $618 = Kind$Core$read$natx$($616, 0n);
                                                                                    var $617 = $618;
                                                                                } else {
                                                                                    var $619 = Pair$new$($611, 0n);
                                                                                    var $617 = $619;
                                                                                };
                                                                                var self = $617;
                                                                            };
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $620 = self.fst;
                                                                                    var $621 = self.snd;
                                                                                    var $622 = Pair$new$($620, (_ctx$13 => {
                                                                                        var _got$14 = Kind$Core$read$find$(_ctx$13, (_x$14 => _i$15 => {
                                                                                            var $624 = (Pair$fst$(_x$14) === _name$10);
                                                                                            return $624;
                                                                                        }), 0n, $621);
                                                                                        var self = _got$14;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.some':
                                                                                                var $625 = self.value;
                                                                                                var $626 = Pair$snd$(Pair$fst$($625));
                                                                                                var $623 = $626;
                                                                                                break;
                                                                                            case 'Maybe.none':
                                                                                                var $627 = Kind$Term$ref$(_name$10);
                                                                                                var $623 = $627;
                                                                                                break;
                                                                                        };
                                                                                        return $623;
                                                                                    }));
                                                                                    var $613 = $622;
                                                                                    break;
                                                                            };
                                                                            var $610 = $613;
                                                                            break;
                                                                    };
                                                                    var $609 = $610;
                                                                } else {
                                                                    var $628 = Pair$new$("", (_ctx$8 => {
                                                                        var $629 = Kind$Term$ref$("error");
                                                                        return $629;
                                                                    }));
                                                                    var $609 = $628;
                                                                };
                                                                var $603 = $609;
                                                            };
                                                            var $595 = $603;
                                                        };
                                                        var $587 = $595;
                                                    };
                                                    var $574 = $587;
                                                };
                                                var $557 = $574;
                                            };
                                            var $540 = $557;
                                        };
                                        var $529 = $540;
                                    };
                                    var $519 = $529;
                                };
                                var $497 = $519;
                            };
                            var $475 = $497;
                        };
                        var $472 = $475;
                    };
                    var $467 = $472;
                };
                var $465 = $467;
                break;
        };
        return $465;
    };
    const Kind$Core$read$term = x0 => Kind$Core$read$term$(x0);

    function Kind$Core$read$(_code$1) {
        var self = Kind$Core$read$term$((_code$1 + ";"));
        switch (self._) {
            case 'Pair.new':
                var $631 = self.fst;
                var $632 = self.snd;
                var self = $631;
                if (self.length === 0) {
                    var $634 = Maybe$none;
                    var $633 = $634;
                } else {
                    var $635 = self.charCodeAt(0);
                    var $636 = self.slice(1);
                    var $637 = Maybe$some$($632(List$nil));
                    var $633 = $637;
                };
                var $630 = $633;
                break;
        };
        return $630;
    };
    const Kind$Core$read = x0 => Kind$Core$read$(x0);

    function Bool$read$(_code$1) {
        var self = (_code$1 === "Bool.true");
        if (self) {
            var $639 = Maybe$some$(Bool$true);
            var $638 = $639;
        } else {
            var self = (_code$1 === "Bool.false");
            if (self) {
                var $641 = Maybe$some$(Bool$false);
                var $640 = $641;
            } else {
                var $642 = Maybe$none;
                var $640 = $642;
            };
            var $638 = $640;
        };
        return $638;
    };
    const Bool$read = x0 => Bool$read$(x0);

    function Kind$Status$done$(_cached$1) {
        var $643 = ({
            _: 'Kind.Status.done',
            'cached': _cached$1
        });
        return $643;
    };
    const Kind$Status$done = x0 => Kind$Status$done$(x0);

    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $644 = ({
            _: 'Kind.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $644;
    };
    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Synth$load$cached$def$(_name$1) {
        var $645 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $646 = _m$bind$2;
            return $646;
        }))(IO$get_file$((".cache/" + (_name$1 + ".file"))))((_cache_file$2 => {
            var self = (!String$is_empty$(_cache_file$2));
            if (self) {
                var $648 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $649 = _m$bind$3;
                    return $649;
                }))(IO$get_file$((".cache/" + (_name$1 + ".time"))))((_cache_time$3 => {
                    var $650 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $651 = _m$bind$4;
                        return $651;
                    }))(IO$get_file_mtime$(_cache_file$2))((_cache_file_time$4 => {
                        var self = (_cache_time$3 === _cache_file_time$4);
                        if (self) {
                            var $653 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $654 = _m$bind$5;
                                return $654;
                            }))(IO$get_file$((".cache/" + (_name$1 + ".term"))))((_cache_term$5 => {
                                var $655 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $656 = _m$bind$6;
                                    return $656;
                                }))(IO$get_file$((".cache/" + (_name$1 + ".type"))))((_cache_type$6 => {
                                    var $657 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $658 = _m$bind$7;
                                        return $658;
                                    }))(IO$get_file$((".cache/" + (_name$1 + ".isct"))))((_cache_isct$7 => {
                                        var $659 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $660 = _m$bind$8;
                                            return $660;
                                        }))(IO$get_file$((".cache/" + (_name$1 + ".arit"))))((_cache_arit$8 => {
                                            var $661 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $662 = _m$pure$10;
                                                return $662;
                                            }))((() => {
                                                var _file$9 = _cache_file$2;
                                                var _code$10 = "<cached>";
                                                var _orig$11 = Pair$new$(0n, 0n);
                                                var $663 = Maybe$monad$((_m$bind$12 => _m$pure$13 => {
                                                    var $664 = _m$bind$12;
                                                    return $664;
                                                }))(Kind$Core$read$(_cache_term$5))((_term$12 => {
                                                    var $665 = Maybe$monad$((_m$bind$13 => _m$pure$14 => {
                                                        var $666 = _m$bind$13;
                                                        return $666;
                                                    }))(Kind$Core$read$(_cache_type$6))((_type$13 => {
                                                        var $667 = Maybe$monad$((_m$bind$14 => _m$pure$15 => {
                                                            var $668 = _m$bind$14;
                                                            return $668;
                                                        }))(Bool$read$(_cache_isct$7))((_isct$14 => {
                                                            var $669 = Maybe$monad$((_m$bind$15 => _m$pure$16 => {
                                                                var $670 = _m$bind$15;
                                                                return $670;
                                                            }))(Maybe$some$(Nat$read$(_cache_arit$8)))((_arit$15 => {
                                                                var _stat$16 = Kind$Status$done$(Bool$true);
                                                                var $671 = Maybe$monad$((_m$bind$17 => _m$pure$18 => {
                                                                    var $672 = _m$pure$18;
                                                                    return $672;
                                                                }))(Kind$Def$new$(_file$9, _code$10, _orig$11, _name$1, _term$12, _type$13, _isct$14, _arit$15, _stat$16));
                                                                return $671;
                                                            }));
                                                            return $669;
                                                        }));
                                                        return $667;
                                                    }));
                                                    return $665;
                                                }));
                                                return $663;
                                            })());
                                            return $661;
                                        }));
                                        return $659;
                                    }));
                                    return $657;
                                }));
                                return $655;
                            }));
                            var $652 = $653;
                        } else {
                            var $673 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $674 = _m$pure$6;
                                return $674;
                            }))(Maybe$none);
                            var $652 = $673;
                        };
                        return $652;
                    }));
                    return $650;
                }));
                var $647 = $648;
            } else {
                var $675 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $676 = _m$pure$4;
                    return $676;
                }))(Maybe$none);
                var $647 = $675;
            };
            return $647;
        }));
        return $645;
    };
    const Kind$Synth$load$cached$def = x0 => Kind$Synth$load$cached$def$(x0);

    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {
        var $677 = ({
            _: 'BitsMap.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $677;
    };
    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);
    const BitsMap$new = ({
        _: 'BitsMap.new'
    });
    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));

    function Kind$Map$set$(_name$2, _val$3, _map$4) {
        var $678 = (bitsmap_set((kind_name_to_bits(_name$2)), _val$3, _map$4, 'set'));
        return $678;
    };
    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);
    const Kind$Map$new = BitsMap$new;
    const Kind$Map = null;

    function Kind$Core$dependencies$go$(_term$1, _deps$2) {
        var _nil$3 = Kind$Term$typ;
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $680 = self.name;
                var $681 = Kind$Map$set$($680, Unit$new, _deps$2);
                var $679 = $681;
                break;
            case 'Kind.Term.all':
                var $682 = self.xtyp;
                var $683 = self.body;
                var _deps$9 = Kind$Core$dependencies$go$($682, _deps$2);
                var _deps$10 = Kind$Core$dependencies$go$($683(_nil$3)(_nil$3), _deps$9);
                var $684 = _deps$10;
                var $679 = $684;
                break;
            case 'Kind.Term.lam':
                var $685 = self.body;
                var _deps$6 = Kind$Core$dependencies$go$($685(_nil$3), _deps$2);
                var $686 = _deps$6;
                var $679 = $686;
                break;
            case 'Kind.Term.app':
                var $687 = self.func;
                var $688 = self.argm;
                var _deps$6 = Kind$Core$dependencies$go$($687, _deps$2);
                var _deps$7 = Kind$Core$dependencies$go$($688, _deps$6);
                var $689 = _deps$7;
                var $679 = $689;
                break;
            case 'Kind.Term.let':
                var $690 = self.expr;
                var $691 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($690, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($691(_nil$3), _deps$7);
                var $692 = _deps$8;
                var $679 = $692;
                break;
            case 'Kind.Term.def':
                var $693 = self.expr;
                var $694 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($693, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($694(_nil$3), _deps$7);
                var $695 = _deps$8;
                var $679 = $695;
                break;
            case 'Kind.Term.ann':
                var $696 = self.term;
                var $697 = self.type;
                var _deps$7 = Kind$Core$dependencies$go$($696, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($697, _deps$7);
                var $698 = _deps$8;
                var $679 = $698;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $699 = _deps$2;
                var $679 = $699;
                break;
        };
        return $679;
    };
    const Kind$Core$dependencies$go = x0 => x1 => Kind$Core$dependencies$go$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $701 = self.head;
                var $702 = self.tail;
                var $703 = List$cons$(_f$4($701), List$mapped$($702, _f$4));
                var $700 = $703;
                break;
            case 'List.nil':
                var $704 = List$nil;
                var $700 = $704;
                break;
        };
        return $700;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);

    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $706 = self.val;
                var $707 = self.lft;
                var $708 = self.rgt;
                var self = $706;
                switch (self._) {
                    case 'Maybe.some':
                        var $710 = self.value;
                        var $711 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $710), _list$4);
                        var _list0$8 = $711;
                        break;
                    case 'Maybe.none':
                        var $712 = _list$4;
                        var _list0$8 = $712;
                        break;
                };
                var _list1$9 = BitsMap$to_list$go$($707, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$to_list$go$($708, (_key$3 + '1'), _list1$9);
                var $709 = _list2$10;
                var $705 = $709;
                break;
            case 'BitsMap.new':
                var $713 = _list$4;
                var $705 = $713;
                break;
        };
        return $705;
    };
    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $715 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $717 = List$cons$(_head$6, _tail$7);
                    var $716 = $717;
                } else {
                    var $718 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $719 = Bits$chunks_of$go$(_len$1, $715, $718, _chunk$7);
                    var $716 = $719;
                };
                var $714 = $716;
                break;
            case 'i':
                var $720 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $722 = List$cons$(_head$6, _tail$7);
                    var $721 = $722;
                } else {
                    var $723 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $724 = Bits$chunks_of$go$(_len$1, $720, $723, _chunk$7);
                    var $721 = $724;
                };
                var $714 = $721;
                break;
            case 'e':
                var $725 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $714 = $725;
                break;
        };
        return $714;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $726 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $726;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $728 = self.head;
                var $729 = self.tail;
                var $730 = _cons$5($728)(List$fold$($729, _nil$4, _cons$5));
                var $727 = $730;
                break;
            case 'List.nil':
                var $731 = _nil$4;
                var $727 = $731;
                break;
        };
        return $727;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $733 = Word$e;
            var $732 = $733;
        } else {
            var $734 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $736 = self.slice(0, -1);
                    var $737 = Word$o$(Word$from_bits$($734, $736));
                    var $735 = $737;
                    break;
                case 'i':
                    var $738 = self.slice(0, -1);
                    var $739 = Word$i$(Word$from_bits$($734, $738));
                    var $735 = $739;
                    break;
                case 'e':
                    var $740 = Word$o$(Word$from_bits$($734, Bits$e));
                    var $735 = $740;
                    break;
            };
            var $732 = $735;
        };
        return $732;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Kind$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $743 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $743;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $745 = ((_u16$5 + 71) & 0xFFFF);
                    var $744 = $745;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $747 = ((_u16$5 - 4) & 0xFFFF);
                        var $746 = $747;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $749 = 46;
                            var $748 = $749;
                        } else {
                            var $750 = 95;
                            var $748 = $750;
                        };
                        var $746 = $748;
                    };
                    var $744 = $746;
                };
                var _chr$6 = $744;
            };
            var $742 = String$cons$(_chr$6, _name$4);
            return $742;
        }));
        var $741 = _name$3;
        return $741;
    };
    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);

    function Kind$Map$to_list$(_xs$2) {
        var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        var $751 = List$mapped$(_kvs$3, (_kv$4 => {
            var self = _kv$4;
            switch (self._) {
                case 'Pair.new':
                    var $753 = self.fst;
                    var $754 = self.snd;
                    var $755 = Pair$new$(Kind$Name$from_bits$($753), $754);
                    var $752 = $755;
                    break;
            };
            return $752;
        }));
        return $751;
    };
    const Kind$Map$to_list = x0 => Kind$Map$to_list$(x0);

    function Kind$Map$keys$(_xs$2) {
        var $756 = List$mapped$(Kind$Map$to_list$(_xs$2), Pair$fst);
        return $756;
    };
    const Kind$Map$keys = x0 => Kind$Map$keys$(x0);

    function Kind$Synth$load$cached$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $758 = self.head;
                var $759 = self.tail;
                var self = Kind$Synth$load$cached$is_loop$($758, _defs$2);
                if (self) {
                    var $761 = Kind$Synth$load$cached$($759, _defs$2);
                    var $760 = $761;
                } else {
                    var _name$5 = $758;
                    var $762 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $763 = _m$bind$6;
                        return $763;
                    }))(Kind$Synth$load$cached$def$(_name$5))((_defn$6 => {
                        var self = _defn$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $765 = self.value;
                                var self = $765;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $767 = self.term;
                                        var $768 = self.type;
                                        var _defs$17 = Kind$Map$set$(_name$5, $765, _defs$2);
                                        var _deps$18 = Kind$Map$new;
                                        var _deps$19 = Kind$Core$dependencies$go$($767, _deps$18);
                                        var _deps$20 = Kind$Core$dependencies$go$($768, _deps$19);
                                        var _deps$21 = Kind$Map$keys$(_deps$20);
                                        var $769 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                            var $770 = _m$bind$22;
                                            return $770;
                                        }))(Kind$Synth$load$cached$(_deps$21, _defs$17))((_defs$22 => {
                                            var self = _defs$22;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $772 = self.value;
                                                    var $773 = Kind$Synth$load$cached$($759, $772);
                                                    var $771 = $773;
                                                    break;
                                                case 'Maybe.none':
                                                    var $774 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                                        var $775 = _m$pure$24;
                                                        return $775;
                                                    }))(Maybe$none);
                                                    var $771 = $774;
                                                    break;
                                            };
                                            return $771;
                                        }));
                                        var $766 = $769;
                                        break;
                                };
                                var $764 = $766;
                                break;
                            case 'Maybe.none':
                                var $776 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                    var $777 = _m$pure$8;
                                    return $777;
                                }))(Maybe$none);
                                var $764 = $776;
                                break;
                        };
                        return $764;
                    }));
                    var $760 = $762;
                };
                var $757 = $760;
                break;
            case 'List.nil':
                var $778 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $779 = _m$pure$4;
                    return $779;
                }))(Maybe$some$(_defs$2));
                var $757 = $778;
                break;
        };
        return $757;
    };
    const Kind$Synth$load$cached = x0 => x1 => Kind$Synth$load$cached$(x0, x1);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $781 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $780 = $781;
        } else {
            var $782 = self.charCodeAt(0);
            var $783 = self.slice(1);
            var $784 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $780 = $784;
        };
        return $780;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$(_V$1) {
        var $785 = null;
        return $785;
    };
    const Parser = x0 => Parser$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $786 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $786;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.some':
                var $788 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $790 = self.value;
                        var self = $788;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $792 = self.idx;
                                var self = $790;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $794 = self.idx;
                                        var self = ($792 > $794);
                                        if (self) {
                                            var $796 = _a$1;
                                            var $795 = $796;
                                        } else {
                                            var $797 = _b$2;
                                            var $795 = $797;
                                        };
                                        var $793 = $795;
                                        break;
                                };
                                var $791 = $793;
                                break;
                        };
                        var $789 = $791;
                        break;
                    case 'Maybe.none':
                        var $798 = _a$1;
                        var $789 = $798;
                        break;
                };
                var $787 = $789;
                break;
            case 'Maybe.none':
                var $799 = _b$2;
                var $787 = $799;
                break;
        };
        return $787;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.cons':
                        var $800 = self.head;
                        var $801 = self.tail;
                        var _parsed$8 = $800(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $803 = self.idx;
                                var $804 = self.code;
                                var $805 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($803, $804, $805));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $806 = Parser$first_of$go$($801, _err$13, _idx$4, _code$5);
                                var $802 = $806;
                                break;
                            case 'Parser.Reply.value':
                                var $807 = self.idx;
                                var $808 = self.code;
                                var $809 = self.val;
                                var $810 = Parser$Reply$value$($807, $808, $809);
                                var $802 = $810;
                                break;
                        };
                        return $802;
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.some':
                                var $812 = self.value;
                                var self = $812;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $814 = self.idx;
                                        var $815 = self.code;
                                        var $816 = self.err;
                                        var $817 = Parser$Reply$error$($814, $815, $816);
                                        var $813 = $817;
                                        break;
                                };
                                var $811 = $813;
                                break;
                            case 'Maybe.none':
                                var $818 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $811 = $818;
                                break;
                        };
                        return $811;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $819 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $819;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.cons':
                        var $820 = self.head;
                        var $821 = self.tail;
                        var $822 = String$flatten$go$($821, (_res$2 + $820));
                        return $822;
                    case 'List.nil':
                        var $823 = _res$2;
                        return $823;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $824 = String$flatten$go$(_xs$1, "");
        return $824;
    };
    const String$flatten = x0 => String$flatten$(x0);

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $826 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $825 = $826;
        } else {
            var $827 = self.charCodeAt(0);
            var $828 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $830 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $829 = $830;
            } else {
                var $831 = self.charCodeAt(0);
                var $832 = self.slice(1);
                var self = ($827 === $831);
                if (self) {
                    var $834 = Parser$text$($828, Nat$succ$(_idx$2), $832);
                    var $833 = $834;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($831, String$nil), List$cons$("\'.", List$nil))))));
                    var $835 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $833 = $835;
                };
                var $829 = $833;
            };
            var $825 = $829;
        };
        return $825;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $837 = self.err;
                var $838 = Parser$Reply$error$(_idx$2, _code$3, $837);
                var $836 = $838;
                break;
            case 'Parser.Reply.value':
                var $839 = self.idx;
                var $840 = self.code;
                var $841 = self.val;
                var $842 = Parser$Reply$value$($839, $840, $841);
                var $836 = $842;
                break;
        };
        return $836;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $844 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $843 = $844;
        } else {
            var $845 = self.charCodeAt(0);
            var $846 = self.slice(1);
            var $847 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $843 = $847;
        };
        return $843;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $849 = self.idx;
                        var $850 = self.code;
                        var $851 = Parser$Reply$value$($849, $850, List$reverse$(_values$4));
                        var $848 = $851;
                        break;
                    case 'Parser.Reply.error':
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $853 = self.idx;
                                var $854 = self.code;
                                var $855 = self.err;
                                var $856 = Parser$Reply$error$($853, $854, $855);
                                var $852 = $856;
                                break;
                            case 'Parser.Reply.value':
                                var $857 = self.idx;
                                var $858 = self.code;
                                var $859 = self.val;
                                var $860 = Parser$until$go$(_until$2, _parse$3, List$cons$($859, _values$4), $857, $858);
                                var $852 = $860;
                                break;
                        };
                        var $848 = $852;
                        break;
                };
                return $848;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $861 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $861;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $863 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $862 = $863;
        } else {
            var $864 = self.charCodeAt(0);
            var $865 = self.slice(1);
            var $866 = Parser$Reply$value$(Nat$succ$(_idx$1), $865, $864);
            var $862 = $866;
        };
        return $862;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $868 = self.idx;
                var $869 = self.code;
                var $870 = self.err;
                var $871 = Parser$Reply$error$($868, $869, $870);
                var $867 = $871;
                break;
            case 'Parser.Reply.value':
                var $872 = self.idx;
                var $873 = self.code;
                var _endl_or_eof$6 = Parser$first_of$(List$cons$(Parser$text("\u{a}"), List$cons$(Parser$eof, List$nil)));
                var self = Parser$until$(_endl_or_eof$6, Parser$one)($872)($873);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $875 = self.idx;
                        var $876 = self.code;
                        var $877 = self.err;
                        var $878 = Parser$Reply$error$($875, $876, $877);
                        var $874 = $878;
                        break;
                    case 'Parser.Reply.value':
                        var $879 = self.idx;
                        var $880 = self.code;
                        var $881 = Parser$Reply$value$($879, $880, Unit$new);
                        var $874 = $881;
                        break;
                };
                var $867 = $874;
                break;
        };
        return $867;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $882 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $882;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Kind$Parser$init$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $884 = self.idx;
                var $885 = self.code;
                var $886 = self.err;
                var $887 = Parser$Reply$error$($884, $885, $886);
                var $883 = $887;
                break;
            case 'Parser.Reply.value':
                var $888 = self.idx;
                var $889 = self.code;
                var self = Parser$get_index$($888, $889);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $891 = self.idx;
                        var $892 = self.code;
                        var $893 = self.err;
                        var $894 = Parser$Reply$error$($891, $892, $893);
                        var $890 = $894;
                        break;
                    case 'Parser.Reply.value':
                        var $895 = self.idx;
                        var $896 = self.code;
                        var $897 = self.val;
                        var $898 = Parser$Reply$value$($895, $896, $897);
                        var $890 = $898;
                        break;
                };
                var $883 = $890;
                break;
        };
        return $883;
    };
    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);

    function Kind$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $900 = Bool$true;
            var $899 = $900;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $902 = Bool$true;
                var $901 = $902;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $904 = Bool$true;
                    var $903 = $904;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $906 = Bool$true;
                        var $905 = $906;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $908 = Bool$true;
                            var $907 = $908;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $910 = Bool$true;
                                var $909 = $910;
                            } else {
                                var $911 = Bool$false;
                                var $909 = $911;
                            };
                            var $907 = $909;
                        };
                        var $905 = $907;
                    };
                    var $903 = $905;
                };
                var $901 = $903;
            };
            var $899 = $901;
        };
        return $899;
    };
    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);

    function Kind$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $913 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $912 = $913;
        } else {
            var $914 = self.charCodeAt(0);
            var $915 = self.slice(1);
            var self = Kind$Name$is_letter$($914);
            if (self) {
                var $917 = Parser$Reply$value$(Nat$succ$(_idx$1), $915, $914);
                var $916 = $917;
            } else {
                var $918 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $916 = $918;
            };
            var $912 = $916;
        };
        return $912;
    };
    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);

    function Kind$Parser$name1$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $920 = self.idx;
                var $921 = self.code;
                var $922 = self.err;
                var $923 = Parser$Reply$error$($920, $921, $922);
                var $919 = $923;
                break;
            case 'Parser.Reply.value':
                var $924 = self.idx;
                var $925 = self.code;
                var self = Parser$many1$(Kind$Parser$letter, $924, $925);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $927 = self.idx;
                        var $928 = self.code;
                        var $929 = self.err;
                        var $930 = Parser$Reply$error$($927, $928, $929);
                        var $926 = $930;
                        break;
                    case 'Parser.Reply.value':
                        var $931 = self.idx;
                        var $932 = self.code;
                        var $933 = self.val;
                        var $934 = Parser$Reply$value$($931, $932, List$fold$($933, String$nil, String$cons));
                        var $926 = $934;
                        break;
                };
                var $919 = $926;
                break;
        };
        return $919;
    };
    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);

    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Kind$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $936 = self.idx;
                var $937 = self.code;
                var $938 = self.err;
                var $939 = Parser$Reply$error$($936, $937, $938);
                var $935 = $939;
                break;
            case 'Parser.Reply.value':
                var $940 = self.idx;
                var $941 = self.code;
                var $942 = Parser$text$(_text$1, $940, $941);
                var $935 = $942;
                break;
        };
        return $935;
    };
    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $944 = self.idx;
                var $945 = self.code;
                var $946 = self.err;
                var $947 = Parser$Reply$error$($944, $945, $946);
                var $943 = $947;
                break;
            case 'Parser.Reply.value':
                var $948 = self.idx;
                var $949 = self.code;
                var $950 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($948)($949);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $952 = self.idx;
                        var $953 = self.code;
                        var $954 = self.err;
                        var $955 = Parser$Reply$error$($952, $953, $954);
                        var $951 = $955;
                        break;
                    case 'Parser.Reply.value':
                        var $956 = self.idx;
                        var $957 = self.code;
                        var $958 = self.val;
                        var $959 = Parser$Reply$value$($956, $957, List$cons$($950, $958));
                        var $951 = $959;
                        break;
                };
                var $943 = $951;
                break;
        };
        return $943;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.value':
                var $961 = self.idx;
                var $962 = self.code;
                var $963 = self.val;
                var $964 = Parser$Reply$value$($961, $962, Maybe$some$($963));
                var $960 = $964;
                break;
            case 'Parser.Reply.error':
                var $965 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $960 = $965;
                break;
        };
        return $960;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Kind$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $967 = self.idx;
                var $968 = self.code;
                var $969 = self.err;
                var $970 = Parser$Reply$error$($967, $968, $969);
                var $966 = $970;
                break;
            case 'Parser.Reply.value':
                var $971 = self.idx;
                var $972 = self.code;
                var self = _parser$2($971)($972);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $974 = self.idx;
                        var $975 = self.code;
                        var $976 = self.err;
                        var $977 = Parser$Reply$error$($974, $975, $976);
                        var $973 = $977;
                        break;
                    case 'Parser.Reply.value':
                        var $978 = self.idx;
                        var $979 = self.code;
                        var $980 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $978, $979);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $982 = self.idx;
                                var $983 = self.code;
                                var $984 = self.err;
                                var $985 = Parser$Reply$error$($982, $983, $984);
                                var $981 = $985;
                                break;
                            case 'Parser.Reply.value':
                                var $986 = self.idx;
                                var $987 = self.code;
                                var $988 = Parser$Reply$value$($986, $987, $980);
                                var $981 = $988;
                                break;
                        };
                        var $973 = $981;
                        break;
                };
                var $966 = $973;
                break;
        };
        return $966;
    };
    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);

    function Kind$Parser$name$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $990 = self.idx;
                var $991 = self.code;
                var $992 = self.err;
                var $993 = Parser$Reply$error$($990, $991, $992);
                var $989 = $993;
                break;
            case 'Parser.Reply.value':
                var $994 = self.idx;
                var $995 = self.code;
                var self = Parser$many$(Kind$Parser$letter)($994)($995);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $997 = self.idx;
                        var $998 = self.code;
                        var $999 = self.err;
                        var $1000 = Parser$Reply$error$($997, $998, $999);
                        var $996 = $1000;
                        break;
                    case 'Parser.Reply.value':
                        var $1001 = self.idx;
                        var $1002 = self.code;
                        var $1003 = self.val;
                        var $1004 = Parser$Reply$value$($1001, $1002, List$fold$($1003, String$nil, String$cons));
                        var $996 = $1004;
                        break;
                };
                var $989 = $996;
                break;
        };
        return $989;
    };
    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);

    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1006 = self.idx;
                var $1007 = self.code;
                var $1008 = self.err;
                var $1009 = Parser$Reply$error$($1006, $1007, $1008);
                var $1005 = $1009;
                break;
            case 'Parser.Reply.value':
                var $1010 = self.idx;
                var $1011 = self.code;
                var $1012 = self.val;
                var _orig$7 = Pair$new$(_from$1, $1012);
                var $1013 = Parser$Reply$value$($1010, $1011, _orig$7);
                var $1005 = $1013;
                break;
        };
        return $1005;
    };
    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);

    function Kind$Term$ori$(_orig$1, _expr$2) {
        var $1014 = ({
            _: 'Kind.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $1014;
    };
    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);

    function Kind$Parser$forall$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1016 = self.idx;
                var $1017 = self.code;
                var $1018 = self.err;
                var $1019 = Parser$Reply$error$($1016, $1017, $1018);
                var $1015 = $1019;
                break;
            case 'Parser.Reply.value':
                var $1020 = self.idx;
                var $1021 = self.code;
                var $1022 = self.val;
                var self = Kind$Parser$name$($1020, $1021);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1024 = self.idx;
                        var $1025 = self.code;
                        var $1026 = self.err;
                        var $1027 = Parser$Reply$error$($1024, $1025, $1026);
                        var $1023 = $1027;
                        break;
                    case 'Parser.Reply.value':
                        var $1028 = self.idx;
                        var $1029 = self.code;
                        var $1030 = self.val;
                        var self = Kind$Parser$binder$(":", $1028, $1029);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1032 = self.idx;
                                var $1033 = self.code;
                                var $1034 = self.err;
                                var $1035 = Parser$Reply$error$($1032, $1033, $1034);
                                var $1031 = $1035;
                                break;
                            case 'Parser.Reply.value':
                                var $1036 = self.idx;
                                var $1037 = self.code;
                                var $1038 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text("->"), $1036, $1037);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1040 = self.idx;
                                        var $1041 = self.code;
                                        var $1042 = self.err;
                                        var $1043 = Parser$Reply$error$($1040, $1041, $1042);
                                        var $1039 = $1043;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1044 = self.idx;
                                        var $1045 = self.code;
                                        var self = Kind$Parser$term$($1044, $1045);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1047 = self.idx;
                                                var $1048 = self.code;
                                                var $1049 = self.err;
                                                var $1050 = Parser$Reply$error$($1047, $1048, $1049);
                                                var $1046 = $1050;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1051 = self.idx;
                                                var $1052 = self.code;
                                                var $1053 = self.val;
                                                var _term$18 = List$fold$($1038, $1053, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $1056 = self.eras;
                                                            var $1057 = self.name;
                                                            var $1058 = self.term;
                                                            var $1059 = Kind$Term$all$($1056, "", $1057, $1058, (_s$23 => _x$24 => {
                                                                var $1060 = _t$19;
                                                                return $1060;
                                                            }));
                                                            var $1055 = $1059;
                                                            break;
                                                    };
                                                    return $1055;
                                                }));
                                                var self = Kind$Parser$stop$($1022, $1051, $1052);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1061 = self.idx;
                                                        var $1062 = self.code;
                                                        var $1063 = self.err;
                                                        var $1064 = Parser$Reply$error$($1061, $1062, $1063);
                                                        var $1054 = $1064;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1065 = self.idx;
                                                        var $1066 = self.code;
                                                        var $1067 = self.val;
                                                        var $1068 = Parser$Reply$value$($1065, $1066, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Kind.Term.all':
                                                                    var $1069 = self.eras;
                                                                    var $1070 = self.name;
                                                                    var $1071 = self.xtyp;
                                                                    var $1072 = self.body;
                                                                    var $1073 = Kind$Term$ori$($1067, Kind$Term$all$($1069, $1030, $1070, $1071, $1072));
                                                                    return $1073;
                                                                case 'Kind.Term.var':
                                                                case 'Kind.Term.ref':
                                                                case 'Kind.Term.typ':
                                                                case 'Kind.Term.lam':
                                                                case 'Kind.Term.app':
                                                                case 'Kind.Term.let':
                                                                case 'Kind.Term.def':
                                                                case 'Kind.Term.ann':
                                                                case 'Kind.Term.gol':
                                                                case 'Kind.Term.hol':
                                                                case 'Kind.Term.nat':
                                                                case 'Kind.Term.chr':
                                                                case 'Kind.Term.str':
                                                                case 'Kind.Term.cse':
                                                                case 'Kind.Term.ori':
                                                                    var $1074 = _term$18;
                                                                    return $1074;
                                                            };
                                                        })());
                                                        var $1054 = $1068;
                                                        break;
                                                };
                                                var $1046 = $1054;
                                                break;
                                        };
                                        var $1039 = $1046;
                                        break;
                                };
                                var $1031 = $1039;
                                break;
                        };
                        var $1023 = $1031;
                        break;
                };
                var $1015 = $1023;
                break;
        };
        return $1015;
    };
    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);

    function Kind$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $1076 = self.head;
                var $1077 = self.tail;
                var $1078 = Kind$Term$lam$($1076, (_x$5 => {
                    var $1079 = Kind$Parser$make_lambda$($1077, _body$2);
                    return $1079;
                }));
                var $1075 = $1078;
                break;
            case 'List.nil':
                var $1080 = _body$2;
                var $1075 = $1080;
                break;
        };
        return $1075;
    };
    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);

    function Kind$Parser$lambda$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1082 = self.idx;
                var $1083 = self.code;
                var $1084 = self.err;
                var $1085 = Parser$Reply$error$($1082, $1083, $1084);
                var $1081 = $1085;
                break;
            case 'Parser.Reply.value':
                var $1086 = self.idx;
                var $1087 = self.code;
                var $1088 = self.val;
                var self = Kind$Parser$text$("(", $1086, $1087);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1090 = self.idx;
                        var $1091 = self.code;
                        var $1092 = self.err;
                        var $1093 = Parser$Reply$error$($1090, $1091, $1092);
                        var $1089 = $1093;
                        break;
                    case 'Parser.Reply.value':
                        var $1094 = self.idx;
                        var $1095 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$name1), $1094, $1095);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1097 = self.idx;
                                var $1098 = self.code;
                                var $1099 = self.err;
                                var $1100 = Parser$Reply$error$($1097, $1098, $1099);
                                var $1096 = $1100;
                                break;
                            case 'Parser.Reply.value':
                                var $1101 = self.idx;
                                var $1102 = self.code;
                                var $1103 = self.val;
                                var self = Kind$Parser$term$($1101, $1102);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1105 = self.idx;
                                        var $1106 = self.code;
                                        var $1107 = self.err;
                                        var $1108 = Parser$Reply$error$($1105, $1106, $1107);
                                        var $1104 = $1108;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1109 = self.idx;
                                        var $1110 = self.code;
                                        var $1111 = self.val;
                                        var self = Kind$Parser$stop$($1088, $1109, $1110);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1113 = self.idx;
                                                var $1114 = self.code;
                                                var $1115 = self.err;
                                                var $1116 = Parser$Reply$error$($1113, $1114, $1115);
                                                var $1112 = $1116;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1117 = self.idx;
                                                var $1118 = self.code;
                                                var $1119 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1103, $1111);
                                                var $1120 = Parser$Reply$value$($1117, $1118, Kind$Term$ori$($1119, _expr$18));
                                                var $1112 = $1120;
                                                break;
                                        };
                                        var $1104 = $1112;
                                        break;
                                };
                                var $1096 = $1104;
                                break;
                        };
                        var $1089 = $1096;
                        break;
                };
                var $1081 = $1089;
                break;
        };
        return $1081;
    };
    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);

    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1122 = self.idx;
                var $1123 = self.code;
                var $1124 = self.err;
                var $1125 = Parser$Reply$error$($1122, $1123, $1124);
                var $1121 = $1125;
                break;
            case 'Parser.Reply.value':
                var $1126 = self.idx;
                var $1127 = self.code;
                var $1128 = self.val;
                var self = Kind$Parser$text$("<", $1126, $1127);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1130 = self.idx;
                        var $1131 = self.code;
                        var $1132 = self.err;
                        var $1133 = Parser$Reply$error$($1130, $1131, $1132);
                        var $1129 = $1133;
                        break;
                    case 'Parser.Reply.value':
                        var $1134 = self.idx;
                        var $1135 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(">"), Kind$Parser$item(Kind$Parser$name1), $1134, $1135);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1137 = self.idx;
                                var $1138 = self.code;
                                var $1139 = self.err;
                                var $1140 = Parser$Reply$error$($1137, $1138, $1139);
                                var $1136 = $1140;
                                break;
                            case 'Parser.Reply.value':
                                var $1141 = self.idx;
                                var $1142 = self.code;
                                var $1143 = self.val;
                                var self = Kind$Parser$term$($1141, $1142);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1145 = self.idx;
                                        var $1146 = self.code;
                                        var $1147 = self.err;
                                        var $1148 = Parser$Reply$error$($1145, $1146, $1147);
                                        var $1144 = $1148;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1149 = self.idx;
                                        var $1150 = self.code;
                                        var $1151 = self.val;
                                        var self = Kind$Parser$stop$($1128, $1149, $1150);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1153 = self.idx;
                                                var $1154 = self.code;
                                                var $1155 = self.err;
                                                var $1156 = Parser$Reply$error$($1153, $1154, $1155);
                                                var $1152 = $1156;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1157 = self.idx;
                                                var $1158 = self.code;
                                                var $1159 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1143, $1151);
                                                var $1160 = Parser$Reply$value$($1157, $1158, Kind$Term$ori$($1159, _expr$18));
                                                var $1152 = $1160;
                                                break;
                                        };
                                        var $1144 = $1152;
                                        break;
                                };
                                var $1136 = $1144;
                                break;
                        };
                        var $1129 = $1136;
                        break;
                };
                var $1121 = $1129;
                break;
        };
        return $1121;
    };
    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);

    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1162 = self.idx;
                var $1163 = self.code;
                var $1164 = self.err;
                var $1165 = Parser$Reply$error$($1162, $1163, $1164);
                var $1161 = $1165;
                break;
            case 'Parser.Reply.value':
                var $1166 = self.idx;
                var $1167 = self.code;
                var $1168 = self.val;
                var self = Kind$Parser$text$("()", $1166, $1167);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1170 = self.idx;
                        var $1171 = self.code;
                        var $1172 = self.err;
                        var $1173 = Parser$Reply$error$($1170, $1171, $1172);
                        var $1169 = $1173;
                        break;
                    case 'Parser.Reply.value':
                        var $1174 = self.idx;
                        var $1175 = self.code;
                        var self = Kind$Parser$term$($1174, $1175);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1177 = self.idx;
                                var $1178 = self.code;
                                var $1179 = self.err;
                                var $1180 = Parser$Reply$error$($1177, $1178, $1179);
                                var $1176 = $1180;
                                break;
                            case 'Parser.Reply.value':
                                var $1181 = self.idx;
                                var $1182 = self.code;
                                var $1183 = self.val;
                                var self = Kind$Parser$stop$($1168, $1181, $1182);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1185 = self.idx;
                                        var $1186 = self.code;
                                        var $1187 = self.err;
                                        var $1188 = Parser$Reply$error$($1185, $1186, $1187);
                                        var $1184 = $1188;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1189 = self.idx;
                                        var $1190 = self.code;
                                        var $1191 = self.val;
                                        var _expr$15 = Kind$Term$lam$("", (_x$15 => {
                                            var $1193 = $1183;
                                            return $1193;
                                        }));
                                        var $1192 = Parser$Reply$value$($1189, $1190, Kind$Term$ori$($1191, _expr$15));
                                        var $1184 = $1192;
                                        break;
                                };
                                var $1176 = $1184;
                                break;
                        };
                        var $1169 = $1176;
                        break;
                };
                var $1161 = $1169;
                break;
        };
        return $1161;
    };
    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);

    function Kind$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1195 = self.idx;
                var $1196 = self.code;
                var $1197 = self.err;
                var $1198 = Parser$Reply$error$($1195, $1196, $1197);
                var $1194 = $1198;
                break;
            case 'Parser.Reply.value':
                var $1199 = self.idx;
                var $1200 = self.code;
                var $1201 = self.val;
                var self = Kind$Parser$text$("(", $1199, $1200);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1203 = self.idx;
                        var $1204 = self.code;
                        var $1205 = self.err;
                        var $1206 = Parser$Reply$error$($1203, $1204, $1205);
                        var $1202 = $1206;
                        break;
                    case 'Parser.Reply.value':
                        var $1207 = self.idx;
                        var $1208 = self.code;
                        var self = Kind$Parser$term$($1207, $1208);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1210 = self.idx;
                                var $1211 = self.code;
                                var $1212 = self.err;
                                var $1213 = Parser$Reply$error$($1210, $1211, $1212);
                                var $1209 = $1213;
                                break;
                            case 'Parser.Reply.value':
                                var $1214 = self.idx;
                                var $1215 = self.code;
                                var $1216 = self.val;
                                var self = Kind$Parser$text$(")", $1214, $1215);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1218 = self.idx;
                                        var $1219 = self.code;
                                        var $1220 = self.err;
                                        var $1221 = Parser$Reply$error$($1218, $1219, $1220);
                                        var $1217 = $1221;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1222 = self.idx;
                                        var $1223 = self.code;
                                        var self = Kind$Parser$stop$($1201, $1222, $1223);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1225 = self.idx;
                                                var $1226 = self.code;
                                                var $1227 = self.err;
                                                var $1228 = Parser$Reply$error$($1225, $1226, $1227);
                                                var $1224 = $1228;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1229 = self.idx;
                                                var $1230 = self.code;
                                                var $1231 = self.val;
                                                var $1232 = Parser$Reply$value$($1229, $1230, Kind$Term$ori$($1231, $1216));
                                                var $1224 = $1232;
                                                break;
                                        };
                                        var $1217 = $1224;
                                        break;
                                };
                                var $1209 = $1217;
                                break;
                        };
                        var $1202 = $1209;
                        break;
                };
                var $1194 = $1202;
                break;
        };
        return $1194;
    };
    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);

    function Kind$Term$hol$(_path$1) {
        var $1233 = ({
            _: 'Kind.Term.hol',
            'path': _path$1
        });
        return $1233;
    };
    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);

    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1235 = self.idx;
                var $1236 = self.code;
                var $1237 = self.err;
                var $1238 = Parser$Reply$error$($1235, $1236, $1237);
                var $1234 = $1238;
                break;
            case 'Parser.Reply.value':
                var $1239 = self.idx;
                var $1240 = self.code;
                var $1241 = self.val;
                var self = Kind$Parser$text$("let ", $1239, $1240);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1243 = self.idx;
                        var $1244 = self.code;
                        var $1245 = self.err;
                        var $1246 = Parser$Reply$error$($1243, $1244, $1245);
                        var $1242 = $1246;
                        break;
                    case 'Parser.Reply.value':
                        var $1247 = self.idx;
                        var $1248 = self.code;
                        var self = Kind$Parser$name1$($1247, $1248);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1250 = self.idx;
                                var $1251 = self.code;
                                var $1252 = self.err;
                                var $1253 = Parser$Reply$error$($1250, $1251, $1252);
                                var $1249 = $1253;
                                break;
                            case 'Parser.Reply.value':
                                var $1254 = self.idx;
                                var $1255 = self.code;
                                var $1256 = self.val;
                                var self = Kind$Parser$text$("=", $1254, $1255);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1258 = self.idx;
                                        var $1259 = self.code;
                                        var $1260 = self.err;
                                        var $1261 = Parser$Reply$error$($1258, $1259, $1260);
                                        var $1257 = $1261;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1262 = self.idx;
                                        var $1263 = self.code;
                                        var self = Kind$Parser$text$("for ", $1262, $1263);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1265 = self.idx;
                                                var $1266 = self.code;
                                                var $1267 = self.err;
                                                var $1268 = Parser$Reply$error$($1265, $1266, $1267);
                                                var $1264 = $1268;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1269 = self.idx;
                                                var $1270 = self.code;
                                                var self = Kind$Parser$name1$($1269, $1270);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1272 = self.idx;
                                                        var $1273 = self.code;
                                                        var $1274 = self.err;
                                                        var $1275 = Parser$Reply$error$($1272, $1273, $1274);
                                                        var $1271 = $1275;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1276 = self.idx;
                                                        var $1277 = self.code;
                                                        var $1278 = self.val;
                                                        var self = Kind$Parser$text$(":", $1276, $1277);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1280 = self.idx;
                                                                var $1281 = self.code;
                                                                var $1282 = self.err;
                                                                var $1283 = Parser$Reply$error$($1280, $1281, $1282);
                                                                var $1279 = $1283;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1284 = self.idx;
                                                                var $1285 = self.code;
                                                                var self = Kind$Parser$text$("U32", $1284, $1285);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1287 = self.idx;
                                                                        var $1288 = self.code;
                                                                        var $1289 = self.err;
                                                                        var $1290 = Parser$Reply$error$($1287, $1288, $1289);
                                                                        var $1286 = $1290;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1291 = self.idx;
                                                                        var $1292 = self.code;
                                                                        var self = Kind$Parser$text$("from", $1291, $1292);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1294 = self.idx;
                                                                                var $1295 = self.code;
                                                                                var $1296 = self.err;
                                                                                var $1297 = Parser$Reply$error$($1294, $1295, $1296);
                                                                                var $1293 = $1297;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1298 = self.idx;
                                                                                var $1299 = self.code;
                                                                                var self = Kind$Parser$term$($1298, $1299);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1301 = self.idx;
                                                                                        var $1302 = self.code;
                                                                                        var $1303 = self.err;
                                                                                        var $1304 = Parser$Reply$error$($1301, $1302, $1303);
                                                                                        var $1300 = $1304;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1305 = self.idx;
                                                                                        var $1306 = self.code;
                                                                                        var $1307 = self.val;
                                                                                        var self = Kind$Parser$text$("to", $1305, $1306);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1309 = self.idx;
                                                                                                var $1310 = self.code;
                                                                                                var $1311 = self.err;
                                                                                                var $1312 = Parser$Reply$error$($1309, $1310, $1311);
                                                                                                var $1308 = $1312;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1313 = self.idx;
                                                                                                var $1314 = self.code;
                                                                                                var self = Kind$Parser$term$($1313, $1314);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1316 = self.idx;
                                                                                                        var $1317 = self.code;
                                                                                                        var $1318 = self.err;
                                                                                                        var $1319 = Parser$Reply$error$($1316, $1317, $1318);
                                                                                                        var $1315 = $1319;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1320 = self.idx;
                                                                                                        var $1321 = self.code;
                                                                                                        var $1322 = self.val;
                                                                                                        var self = Kind$Parser$text$(":", $1320, $1321);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1324 = self.idx;
                                                                                                                var $1325 = self.code;
                                                                                                                var $1326 = self.err;
                                                                                                                var $1327 = Parser$Reply$error$($1324, $1325, $1326);
                                                                                                                var $1323 = $1327;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1328 = self.idx;
                                                                                                                var $1329 = self.code;
                                                                                                                var self = Kind$Parser$term$($1328, $1329);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1331 = self.idx;
                                                                                                                        var $1332 = self.code;
                                                                                                                        var $1333 = self.err;
                                                                                                                        var $1334 = Parser$Reply$error$($1331, $1332, $1333);
                                                                                                                        var $1330 = $1334;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1335 = self.idx;
                                                                                                                        var $1336 = self.code;
                                                                                                                        var $1337 = self.val;
                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1335, $1336);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1339 = self.idx;
                                                                                                                                var $1340 = self.code;
                                                                                                                                var $1341 = self.err;
                                                                                                                                var $1342 = Parser$Reply$error$($1339, $1340, $1341);
                                                                                                                                var $1338 = $1342;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1343 = self.idx;
                                                                                                                                var $1344 = self.code;
                                                                                                                                var self = Kind$Parser$term$($1343, $1344);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1346 = self.idx;
                                                                                                                                        var $1347 = self.code;
                                                                                                                                        var $1348 = self.err;
                                                                                                                                        var $1349 = Parser$Reply$error$($1346, $1347, $1348);
                                                                                                                                        var $1345 = $1349;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1350 = self.idx;
                                                                                                                                        var $1351 = self.code;
                                                                                                                                        var $1352 = self.val;
                                                                                                                                        var self = Kind$Parser$stop$($1241, $1350, $1351);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $1354 = self.idx;
                                                                                                                                                var $1355 = self.code;
                                                                                                                                                var $1356 = self.err;
                                                                                                                                                var $1357 = Parser$Reply$error$($1354, $1355, $1356);
                                                                                                                                                var $1353 = $1357;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $1358 = self.idx;
                                                                                                                                                var $1359 = self.code;
                                                                                                                                                var $1360 = self.val;
                                                                                                                                                var _term$54 = Kind$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($1256));
                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $1307);
                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $1322);
                                                                                                                                                var _lamb$59 = Kind$Term$lam$($1278, (_e$59 => {
                                                                                                                                                    var $1362 = Kind$Term$lam$($1256, (_s$60 => {
                                                                                                                                                        var $1363 = $1337;
                                                                                                                                                        return $1363;
                                                                                                                                                    }));
                                                                                                                                                    return $1362;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Kind$Term$let$($1256, _term$60, (_x$61 => {
                                                                                                                                                    var $1364 = $1352;
                                                                                                                                                    return $1364;
                                                                                                                                                }));
                                                                                                                                                var $1361 = Parser$Reply$value$($1358, $1359, Kind$Term$ori$($1360, _term$61));
                                                                                                                                                var $1353 = $1361;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $1345 = $1353;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1338 = $1345;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1330 = $1338;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1323 = $1330;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1315 = $1323;
                                                                                                        break;
                                                                                                };
                                                                                                var $1308 = $1315;
                                                                                                break;
                                                                                        };
                                                                                        var $1300 = $1308;
                                                                                        break;
                                                                                };
                                                                                var $1293 = $1300;
                                                                                break;
                                                                        };
                                                                        var $1286 = $1293;
                                                                        break;
                                                                };
                                                                var $1279 = $1286;
                                                                break;
                                                        };
                                                        var $1271 = $1279;
                                                        break;
                                                };
                                                var $1264 = $1271;
                                                break;
                                        };
                                        var $1257 = $1264;
                                        break;
                                };
                                var $1249 = $1257;
                                break;
                        };
                        var $1242 = $1249;
                        break;
                };
                var $1234 = $1242;
                break;
        };
        return $1234;
    };
    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);

    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1366 = self.idx;
                var $1367 = self.code;
                var $1368 = self.err;
                var $1369 = Parser$Reply$error$($1366, $1367, $1368);
                var $1365 = $1369;
                break;
            case 'Parser.Reply.value':
                var $1370 = self.idx;
                var $1371 = self.code;
                var $1372 = self.val;
                var self = Kind$Parser$text$("for ", $1370, $1371);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1374 = self.idx;
                        var $1375 = self.code;
                        var $1376 = self.err;
                        var $1377 = Parser$Reply$error$($1374, $1375, $1376);
                        var $1373 = $1377;
                        break;
                    case 'Parser.Reply.value':
                        var $1378 = self.idx;
                        var $1379 = self.code;
                        var self = Kind$Parser$name1$($1378, $1379);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1381 = self.idx;
                                var $1382 = self.code;
                                var $1383 = self.err;
                                var $1384 = Parser$Reply$error$($1381, $1382, $1383);
                                var $1380 = $1384;
                                break;
                            case 'Parser.Reply.value':
                                var $1385 = self.idx;
                                var $1386 = self.code;
                                var $1387 = self.val;
                                var self = Kind$Parser$text$(":", $1385, $1386);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1389 = self.idx;
                                        var $1390 = self.code;
                                        var $1391 = self.err;
                                        var $1392 = Parser$Reply$error$($1389, $1390, $1391);
                                        var $1388 = $1392;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1393 = self.idx;
                                        var $1394 = self.code;
                                        var self = Kind$Parser$text$("U32", $1393, $1394);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1396 = self.idx;
                                                var $1397 = self.code;
                                                var $1398 = self.err;
                                                var $1399 = Parser$Reply$error$($1396, $1397, $1398);
                                                var $1395 = $1399;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1400 = self.idx;
                                                var $1401 = self.code;
                                                var self = Kind$Parser$text$("from", $1400, $1401);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1403 = self.idx;
                                                        var $1404 = self.code;
                                                        var $1405 = self.err;
                                                        var $1406 = Parser$Reply$error$($1403, $1404, $1405);
                                                        var $1402 = $1406;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1407 = self.idx;
                                                        var $1408 = self.code;
                                                        var self = Kind$Parser$term$($1407, $1408);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1410 = self.idx;
                                                                var $1411 = self.code;
                                                                var $1412 = self.err;
                                                                var $1413 = Parser$Reply$error$($1410, $1411, $1412);
                                                                var $1409 = $1413;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1414 = self.idx;
                                                                var $1415 = self.code;
                                                                var $1416 = self.val;
                                                                var self = Kind$Parser$text$("to", $1414, $1415);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1418 = self.idx;
                                                                        var $1419 = self.code;
                                                                        var $1420 = self.err;
                                                                        var $1421 = Parser$Reply$error$($1418, $1419, $1420);
                                                                        var $1417 = $1421;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1422 = self.idx;
                                                                        var $1423 = self.code;
                                                                        var self = Kind$Parser$term$($1422, $1423);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1425 = self.idx;
                                                                                var $1426 = self.code;
                                                                                var $1427 = self.err;
                                                                                var $1428 = Parser$Reply$error$($1425, $1426, $1427);
                                                                                var $1424 = $1428;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1429 = self.idx;
                                                                                var $1430 = self.code;
                                                                                var $1431 = self.val;
                                                                                var self = Kind$Parser$text$("with ", $1429, $1430);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1433 = self.idx;
                                                                                        var $1434 = self.code;
                                                                                        var $1435 = self.err;
                                                                                        var $1436 = Parser$Reply$error$($1433, $1434, $1435);
                                                                                        var $1432 = $1436;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1437 = self.idx;
                                                                                        var $1438 = self.code;
                                                                                        var self = Kind$Parser$name1$($1437, $1438);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1440 = self.idx;
                                                                                                var $1441 = self.code;
                                                                                                var $1442 = self.err;
                                                                                                var $1443 = Parser$Reply$error$($1440, $1441, $1442);
                                                                                                var $1439 = $1443;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1444 = self.idx;
                                                                                                var $1445 = self.code;
                                                                                                var $1446 = self.val;
                                                                                                var self = Kind$Parser$text$(":", $1444, $1445);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1448 = self.idx;
                                                                                                        var $1449 = self.code;
                                                                                                        var $1450 = self.err;
                                                                                                        var $1451 = Parser$Reply$error$($1448, $1449, $1450);
                                                                                                        var $1447 = $1451;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1452 = self.idx;
                                                                                                        var $1453 = self.code;
                                                                                                        var self = Kind$Parser$term$($1452, $1453);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1455 = self.idx;
                                                                                                                var $1456 = self.code;
                                                                                                                var $1457 = self.err;
                                                                                                                var $1458 = Parser$Reply$error$($1455, $1456, $1457);
                                                                                                                var $1454 = $1458;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1459 = self.idx;
                                                                                                                var $1460 = self.code;
                                                                                                                var $1461 = self.val;
                                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1459, $1460);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1463 = self.idx;
                                                                                                                        var $1464 = self.code;
                                                                                                                        var $1465 = self.err;
                                                                                                                        var $1466 = Parser$Reply$error$($1463, $1464, $1465);
                                                                                                                        var $1462 = $1466;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1467 = self.idx;
                                                                                                                        var $1468 = self.code;
                                                                                                                        var self = Kind$Parser$term$($1467, $1468);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1470 = self.idx;
                                                                                                                                var $1471 = self.code;
                                                                                                                                var $1472 = self.err;
                                                                                                                                var $1473 = Parser$Reply$error$($1470, $1471, $1472);
                                                                                                                                var $1469 = $1473;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1474 = self.idx;
                                                                                                                                var $1475 = self.code;
                                                                                                                                var $1476 = self.val;
                                                                                                                                var self = Kind$Parser$stop$($1372, $1474, $1475);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1478 = self.idx;
                                                                                                                                        var $1479 = self.code;
                                                                                                                                        var $1480 = self.err;
                                                                                                                                        var $1481 = Parser$Reply$error$($1478, $1479, $1480);
                                                                                                                                        var $1477 = $1481;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1482 = self.idx;
                                                                                                                                        var $1483 = self.code;
                                                                                                                                        var $1484 = self.val;
                                                                                                                                        var _term$51 = Kind$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($1446));
                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $1416);
                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $1431);
                                                                                                                                        var _lamb$56 = Kind$Term$lam$($1387, (_e$56 => {
                                                                                                                                            var $1486 = Kind$Term$lam$($1446, (_s$57 => {
                                                                                                                                                var $1487 = $1461;
                                                                                                                                                return $1487;
                                                                                                                                            }));
                                                                                                                                            return $1486;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Kind$Term$let$($1446, _term$57, (_x$58 => {
                                                                                                                                            var $1488 = $1476;
                                                                                                                                            return $1488;
                                                                                                                                        }));
                                                                                                                                        var $1485 = Parser$Reply$value$($1482, $1483, Kind$Term$ori$($1484, _term$58));
                                                                                                                                        var $1477 = $1485;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1469 = $1477;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1462 = $1469;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1454 = $1462;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1447 = $1454;
                                                                                                        break;
                                                                                                };
                                                                                                var $1439 = $1447;
                                                                                                break;
                                                                                        };
                                                                                        var $1432 = $1439;
                                                                                        break;
                                                                                };
                                                                                var $1424 = $1432;
                                                                                break;
                                                                        };
                                                                        var $1417 = $1424;
                                                                        break;
                                                                };
                                                                var $1409 = $1417;
                                                                break;
                                                        };
                                                        var $1402 = $1409;
                                                        break;
                                                };
                                                var $1395 = $1402;
                                                break;
                                        };
                                        var $1388 = $1395;
                                        break;
                                };
                                var $1380 = $1388;
                                break;
                        };
                        var $1373 = $1380;
                        break;
                };
                var $1365 = $1373;
                break;
        };
        return $1365;
    };
    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);

    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1490 = self.idx;
                var $1491 = self.code;
                var $1492 = self.err;
                var $1493 = Parser$Reply$error$($1490, $1491, $1492);
                var $1489 = $1493;
                break;
            case 'Parser.Reply.value':
                var $1494 = self.idx;
                var $1495 = self.code;
                var $1496 = self.val;
                var self = Kind$Parser$text$("let ", $1494, $1495);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1498 = self.idx;
                        var $1499 = self.code;
                        var $1500 = self.err;
                        var $1501 = Parser$Reply$error$($1498, $1499, $1500);
                        var $1497 = $1501;
                        break;
                    case 'Parser.Reply.value':
                        var $1502 = self.idx;
                        var $1503 = self.code;
                        var self = Kind$Parser$name1$($1502, $1503);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1505 = self.idx;
                                var $1506 = self.code;
                                var $1507 = self.err;
                                var $1508 = Parser$Reply$error$($1505, $1506, $1507);
                                var $1504 = $1508;
                                break;
                            case 'Parser.Reply.value':
                                var $1509 = self.idx;
                                var $1510 = self.code;
                                var $1511 = self.val;
                                var self = Kind$Parser$text$("=", $1509, $1510);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1513 = self.idx;
                                        var $1514 = self.code;
                                        var $1515 = self.err;
                                        var $1516 = Parser$Reply$error$($1513, $1514, $1515);
                                        var $1512 = $1516;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1517 = self.idx;
                                        var $1518 = self.code;
                                        var self = Kind$Parser$text$("for ", $1517, $1518);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1520 = self.idx;
                                                var $1521 = self.code;
                                                var $1522 = self.err;
                                                var $1523 = Parser$Reply$error$($1520, $1521, $1522);
                                                var $1519 = $1523;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1524 = self.idx;
                                                var $1525 = self.code;
                                                var self = Kind$Parser$name1$($1524, $1525);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1527 = self.idx;
                                                        var $1528 = self.code;
                                                        var $1529 = self.err;
                                                        var $1530 = Parser$Reply$error$($1527, $1528, $1529);
                                                        var $1526 = $1530;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1531 = self.idx;
                                                        var $1532 = self.code;
                                                        var $1533 = self.val;
                                                        var self = Kind$Parser$text$("from", $1531, $1532);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1535 = self.idx;
                                                                var $1536 = self.code;
                                                                var $1537 = self.err;
                                                                var $1538 = Parser$Reply$error$($1535, $1536, $1537);
                                                                var $1534 = $1538;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1539 = self.idx;
                                                                var $1540 = self.code;
                                                                var self = Kind$Parser$term$($1539, $1540);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1542 = self.idx;
                                                                        var $1543 = self.code;
                                                                        var $1544 = self.err;
                                                                        var $1545 = Parser$Reply$error$($1542, $1543, $1544);
                                                                        var $1541 = $1545;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1546 = self.idx;
                                                                        var $1547 = self.code;
                                                                        var $1548 = self.val;
                                                                        var self = Kind$Parser$text$("to", $1546, $1547);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1550 = self.idx;
                                                                                var $1551 = self.code;
                                                                                var $1552 = self.err;
                                                                                var $1553 = Parser$Reply$error$($1550, $1551, $1552);
                                                                                var $1549 = $1553;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1554 = self.idx;
                                                                                var $1555 = self.code;
                                                                                var self = Kind$Parser$term$($1554, $1555);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1557 = self.idx;
                                                                                        var $1558 = self.code;
                                                                                        var $1559 = self.err;
                                                                                        var $1560 = Parser$Reply$error$($1557, $1558, $1559);
                                                                                        var $1556 = $1560;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1561 = self.idx;
                                                                                        var $1562 = self.code;
                                                                                        var $1563 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1561, $1562);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1565 = self.idx;
                                                                                                var $1566 = self.code;
                                                                                                var $1567 = self.err;
                                                                                                var $1568 = Parser$Reply$error$($1565, $1566, $1567);
                                                                                                var $1564 = $1568;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1569 = self.idx;
                                                                                                var $1570 = self.code;
                                                                                                var self = Kind$Parser$term$($1569, $1570);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1572 = self.idx;
                                                                                                        var $1573 = self.code;
                                                                                                        var $1574 = self.err;
                                                                                                        var $1575 = Parser$Reply$error$($1572, $1573, $1574);
                                                                                                        var $1571 = $1575;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1576 = self.idx;
                                                                                                        var $1577 = self.code;
                                                                                                        var $1578 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1576, $1577);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1580 = self.idx;
                                                                                                                var $1581 = self.code;
                                                                                                                var $1582 = self.err;
                                                                                                                var $1583 = Parser$Reply$error$($1580, $1581, $1582);
                                                                                                                var $1579 = $1583;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1584 = self.idx;
                                                                                                                var $1585 = self.code;
                                                                                                                var self = Kind$Parser$term$($1584, $1585);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1587 = self.idx;
                                                                                                                        var $1588 = self.code;
                                                                                                                        var $1589 = self.err;
                                                                                                                        var $1590 = Parser$Reply$error$($1587, $1588, $1589);
                                                                                                                        var $1586 = $1590;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1591 = self.idx;
                                                                                                                        var $1592 = self.code;
                                                                                                                        var $1593 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($1496, $1591, $1592);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1595 = self.idx;
                                                                                                                                var $1596 = self.code;
                                                                                                                                var $1597 = self.err;
                                                                                                                                var $1598 = Parser$Reply$error$($1595, $1596, $1597);
                                                                                                                                var $1594 = $1598;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1599 = self.idx;
                                                                                                                                var $1600 = self.code;
                                                                                                                                var $1601 = self.val;
                                                                                                                                var _term$48 = Kind$Term$ref$("Nat.for");
                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($1511));
                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $1548);
                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1563);
                                                                                                                                var _lamb$53 = Kind$Term$lam$($1533, (_e$53 => {
                                                                                                                                    var $1603 = Kind$Term$lam$($1511, (_s$54 => {
                                                                                                                                        var $1604 = $1578;
                                                                                                                                        return $1604;
                                                                                                                                    }));
                                                                                                                                    return $1603;
                                                                                                                                }));
                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);
                                                                                                                                var _term$55 = Kind$Term$let$($1511, _term$54, (_x$55 => {
                                                                                                                                    var $1605 = $1593;
                                                                                                                                    return $1605;
                                                                                                                                }));
                                                                                                                                var $1602 = Parser$Reply$value$($1599, $1600, Kind$Term$ori$($1601, _term$55));
                                                                                                                                var $1594 = $1602;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1586 = $1594;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1579 = $1586;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1571 = $1579;
                                                                                                        break;
                                                                                                };
                                                                                                var $1564 = $1571;
                                                                                                break;
                                                                                        };
                                                                                        var $1556 = $1564;
                                                                                        break;
                                                                                };
                                                                                var $1549 = $1556;
                                                                                break;
                                                                        };
                                                                        var $1541 = $1549;
                                                                        break;
                                                                };
                                                                var $1534 = $1541;
                                                                break;
                                                        };
                                                        var $1526 = $1534;
                                                        break;
                                                };
                                                var $1519 = $1526;
                                                break;
                                        };
                                        var $1512 = $1519;
                                        break;
                                };
                                var $1504 = $1512;
                                break;
                        };
                        var $1497 = $1504;
                        break;
                };
                var $1489 = $1497;
                break;
        };
        return $1489;
    };
    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);

    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1607 = self.idx;
                var $1608 = self.code;
                var $1609 = self.err;
                var $1610 = Parser$Reply$error$($1607, $1608, $1609);
                var $1606 = $1610;
                break;
            case 'Parser.Reply.value':
                var $1611 = self.idx;
                var $1612 = self.code;
                var $1613 = self.val;
                var self = Kind$Parser$text$("for ", $1611, $1612);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1615 = self.idx;
                        var $1616 = self.code;
                        var $1617 = self.err;
                        var $1618 = Parser$Reply$error$($1615, $1616, $1617);
                        var $1614 = $1618;
                        break;
                    case 'Parser.Reply.value':
                        var $1619 = self.idx;
                        var $1620 = self.code;
                        var self = Kind$Parser$name1$($1619, $1620);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1622 = self.idx;
                                var $1623 = self.code;
                                var $1624 = self.err;
                                var $1625 = Parser$Reply$error$($1622, $1623, $1624);
                                var $1621 = $1625;
                                break;
                            case 'Parser.Reply.value':
                                var $1626 = self.idx;
                                var $1627 = self.code;
                                var $1628 = self.val;
                                var self = Kind$Parser$text$("from", $1626, $1627);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1630 = self.idx;
                                        var $1631 = self.code;
                                        var $1632 = self.err;
                                        var $1633 = Parser$Reply$error$($1630, $1631, $1632);
                                        var $1629 = $1633;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1634 = self.idx;
                                        var $1635 = self.code;
                                        var self = Kind$Parser$term$($1634, $1635);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1637 = self.idx;
                                                var $1638 = self.code;
                                                var $1639 = self.err;
                                                var $1640 = Parser$Reply$error$($1637, $1638, $1639);
                                                var $1636 = $1640;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1641 = self.idx;
                                                var $1642 = self.code;
                                                var $1643 = self.val;
                                                var self = Kind$Parser$text$("to", $1641, $1642);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1645 = self.idx;
                                                        var $1646 = self.code;
                                                        var $1647 = self.err;
                                                        var $1648 = Parser$Reply$error$($1645, $1646, $1647);
                                                        var $1644 = $1648;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1649 = self.idx;
                                                        var $1650 = self.code;
                                                        var self = Kind$Parser$term$($1649, $1650);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1652 = self.idx;
                                                                var $1653 = self.code;
                                                                var $1654 = self.err;
                                                                var $1655 = Parser$Reply$error$($1652, $1653, $1654);
                                                                var $1651 = $1655;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1656 = self.idx;
                                                                var $1657 = self.code;
                                                                var $1658 = self.val;
                                                                var self = Kind$Parser$text$("with ", $1656, $1657);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1660 = self.idx;
                                                                        var $1661 = self.code;
                                                                        var $1662 = self.err;
                                                                        var $1663 = Parser$Reply$error$($1660, $1661, $1662);
                                                                        var $1659 = $1663;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1664 = self.idx;
                                                                        var $1665 = self.code;
                                                                        var self = Kind$Parser$name1$($1664, $1665);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1667 = self.idx;
                                                                                var $1668 = self.code;
                                                                                var $1669 = self.err;
                                                                                var $1670 = Parser$Reply$error$($1667, $1668, $1669);
                                                                                var $1666 = $1670;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1671 = self.idx;
                                                                                var $1672 = self.code;
                                                                                var $1673 = self.val;
                                                                                var self = Kind$Parser$text$(":", $1671, $1672);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1675 = self.idx;
                                                                                        var $1676 = self.code;
                                                                                        var $1677 = self.err;
                                                                                        var $1678 = Parser$Reply$error$($1675, $1676, $1677);
                                                                                        var $1674 = $1678;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1679 = self.idx;
                                                                                        var $1680 = self.code;
                                                                                        var self = Kind$Parser$term$($1679, $1680);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1682 = self.idx;
                                                                                                var $1683 = self.code;
                                                                                                var $1684 = self.err;
                                                                                                var $1685 = Parser$Reply$error$($1682, $1683, $1684);
                                                                                                var $1681 = $1685;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1686 = self.idx;
                                                                                                var $1687 = self.code;
                                                                                                var $1688 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1686, $1687);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1690 = self.idx;
                                                                                                        var $1691 = self.code;
                                                                                                        var $1692 = self.err;
                                                                                                        var $1693 = Parser$Reply$error$($1690, $1691, $1692);
                                                                                                        var $1689 = $1693;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1694 = self.idx;
                                                                                                        var $1695 = self.code;
                                                                                                        var self = Kind$Parser$term$($1694, $1695);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1697 = self.idx;
                                                                                                                var $1698 = self.code;
                                                                                                                var $1699 = self.err;
                                                                                                                var $1700 = Parser$Reply$error$($1697, $1698, $1699);
                                                                                                                var $1696 = $1700;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1701 = self.idx;
                                                                                                                var $1702 = self.code;
                                                                                                                var $1703 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1613, $1701, $1702);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1705 = self.idx;
                                                                                                                        var $1706 = self.code;
                                                                                                                        var $1707 = self.err;
                                                                                                                        var $1708 = Parser$Reply$error$($1705, $1706, $1707);
                                                                                                                        var $1704 = $1708;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1709 = self.idx;
                                                                                                                        var $1710 = self.code;
                                                                                                                        var $1711 = self.val;
                                                                                                                        var _term$45 = Kind$Term$ref$("Nat.for");
                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1673));
                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1643);
                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1658);
                                                                                                                        var _lamb$50 = Kind$Term$lam$($1628, (_e$50 => {
                                                                                                                            var $1713 = Kind$Term$lam$($1673, (_s$51 => {
                                                                                                                                var $1714 = $1688;
                                                                                                                                return $1714;
                                                                                                                            }));
                                                                                                                            return $1713;
                                                                                                                        }));
                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Kind$Term$let$($1673, _term$51, (_x$52 => {
                                                                                                                            var $1715 = $1703;
                                                                                                                            return $1715;
                                                                                                                        }));
                                                                                                                        var $1712 = Parser$Reply$value$($1709, $1710, Kind$Term$ori$($1711, _term$52));
                                                                                                                        var $1704 = $1712;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1696 = $1704;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1689 = $1696;
                                                                                                        break;
                                                                                                };
                                                                                                var $1681 = $1689;
                                                                                                break;
                                                                                        };
                                                                                        var $1674 = $1681;
                                                                                        break;
                                                                                };
                                                                                var $1666 = $1674;
                                                                                break;
                                                                        };
                                                                        var $1659 = $1666;
                                                                        break;
                                                                };
                                                                var $1651 = $1659;
                                                                break;
                                                        };
                                                        var $1644 = $1651;
                                                        break;
                                                };
                                                var $1636 = $1644;
                                                break;
                                        };
                                        var $1629 = $1636;
                                        break;
                                };
                                var $1621 = $1629;
                                break;
                        };
                        var $1614 = $1621;
                        break;
                };
                var $1606 = $1614;
                break;
        };
        return $1606;
    };
    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);

    function Kind$Parser$letforin$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1717 = self.idx;
                var $1718 = self.code;
                var $1719 = self.err;
                var $1720 = Parser$Reply$error$($1717, $1718, $1719);
                var $1716 = $1720;
                break;
            case 'Parser.Reply.value':
                var $1721 = self.idx;
                var $1722 = self.code;
                var $1723 = self.val;
                var self = Kind$Parser$text$("let ", $1721, $1722);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1725 = self.idx;
                        var $1726 = self.code;
                        var $1727 = self.err;
                        var $1728 = Parser$Reply$error$($1725, $1726, $1727);
                        var $1724 = $1728;
                        break;
                    case 'Parser.Reply.value':
                        var $1729 = self.idx;
                        var $1730 = self.code;
                        var self = Kind$Parser$name1$($1729, $1730);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1732 = self.idx;
                                var $1733 = self.code;
                                var $1734 = self.err;
                                var $1735 = Parser$Reply$error$($1732, $1733, $1734);
                                var $1731 = $1735;
                                break;
                            case 'Parser.Reply.value':
                                var $1736 = self.idx;
                                var $1737 = self.code;
                                var $1738 = self.val;
                                var self = Kind$Parser$text$("=", $1736, $1737);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1740 = self.idx;
                                        var $1741 = self.code;
                                        var $1742 = self.err;
                                        var $1743 = Parser$Reply$error$($1740, $1741, $1742);
                                        var $1739 = $1743;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1744 = self.idx;
                                        var $1745 = self.code;
                                        var self = Kind$Parser$text$("for ", $1744, $1745);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1747 = self.idx;
                                                var $1748 = self.code;
                                                var $1749 = self.err;
                                                var $1750 = Parser$Reply$error$($1747, $1748, $1749);
                                                var $1746 = $1750;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1751 = self.idx;
                                                var $1752 = self.code;
                                                var self = Kind$Parser$name1$($1751, $1752);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1754 = self.idx;
                                                        var $1755 = self.code;
                                                        var $1756 = self.err;
                                                        var $1757 = Parser$Reply$error$($1754, $1755, $1756);
                                                        var $1753 = $1757;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1758 = self.idx;
                                                        var $1759 = self.code;
                                                        var $1760 = self.val;
                                                        var self = Kind$Parser$text$("in", $1758, $1759);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1762 = self.idx;
                                                                var $1763 = self.code;
                                                                var $1764 = self.err;
                                                                var $1765 = Parser$Reply$error$($1762, $1763, $1764);
                                                                var $1761 = $1765;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1766 = self.idx;
                                                                var $1767 = self.code;
                                                                var self = Kind$Parser$term$($1766, $1767);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1769 = self.idx;
                                                                        var $1770 = self.code;
                                                                        var $1771 = self.err;
                                                                        var $1772 = Parser$Reply$error$($1769, $1770, $1771);
                                                                        var $1768 = $1772;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1773 = self.idx;
                                                                        var $1774 = self.code;
                                                                        var $1775 = self.val;
                                                                        var self = Kind$Parser$text$(":", $1773, $1774);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1777 = self.idx;
                                                                                var $1778 = self.code;
                                                                                var $1779 = self.err;
                                                                                var $1780 = Parser$Reply$error$($1777, $1778, $1779);
                                                                                var $1776 = $1780;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1781 = self.idx;
                                                                                var $1782 = self.code;
                                                                                var self = Kind$Parser$term$($1781, $1782);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1784 = self.idx;
                                                                                        var $1785 = self.code;
                                                                                        var $1786 = self.err;
                                                                                        var $1787 = Parser$Reply$error$($1784, $1785, $1786);
                                                                                        var $1783 = $1787;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1788 = self.idx;
                                                                                        var $1789 = self.code;
                                                                                        var $1790 = self.val;
                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1788, $1789);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1792 = self.idx;
                                                                                                var $1793 = self.code;
                                                                                                var $1794 = self.err;
                                                                                                var $1795 = Parser$Reply$error$($1792, $1793, $1794);
                                                                                                var $1791 = $1795;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1796 = self.idx;
                                                                                                var $1797 = self.code;
                                                                                                var self = Kind$Parser$term$($1796, $1797);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1799 = self.idx;
                                                                                                        var $1800 = self.code;
                                                                                                        var $1801 = self.err;
                                                                                                        var $1802 = Parser$Reply$error$($1799, $1800, $1801);
                                                                                                        var $1798 = $1802;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1803 = self.idx;
                                                                                                        var $1804 = self.code;
                                                                                                        var $1805 = self.val;
                                                                                                        var self = Kind$Parser$stop$($1723, $1803, $1804);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1807 = self.idx;
                                                                                                                var $1808 = self.code;
                                                                                                                var $1809 = self.err;
                                                                                                                var $1810 = Parser$Reply$error$($1807, $1808, $1809);
                                                                                                                var $1806 = $1810;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1811 = self.idx;
                                                                                                                var $1812 = self.code;
                                                                                                                var $1813 = self.val;
                                                                                                                var _term$42 = Kind$Term$ref$("List.for");
                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $1775);
                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($1738));
                                                                                                                var _lamb$47 = Kind$Term$lam$($1760, (_i$47 => {
                                                                                                                    var $1815 = Kind$Term$lam$($1738, (_x$48 => {
                                                                                                                        var $1816 = $1790;
                                                                                                                        return $1816;
                                                                                                                    }));
                                                                                                                    return $1815;
                                                                                                                }));
                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Kind$Term$let$($1738, _term$48, (_x$49 => {
                                                                                                                    var $1817 = $1805;
                                                                                                                    return $1817;
                                                                                                                }));
                                                                                                                var $1814 = Parser$Reply$value$($1811, $1812, Kind$Term$ori$($1813, _term$49));
                                                                                                                var $1806 = $1814;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1798 = $1806;
                                                                                                        break;
                                                                                                };
                                                                                                var $1791 = $1798;
                                                                                                break;
                                                                                        };
                                                                                        var $1783 = $1791;
                                                                                        break;
                                                                                };
                                                                                var $1776 = $1783;
                                                                                break;
                                                                        };
                                                                        var $1768 = $1776;
                                                                        break;
                                                                };
                                                                var $1761 = $1768;
                                                                break;
                                                        };
                                                        var $1753 = $1761;
                                                        break;
                                                };
                                                var $1746 = $1753;
                                                break;
                                        };
                                        var $1739 = $1746;
                                        break;
                                };
                                var $1731 = $1739;
                                break;
                        };
                        var $1724 = $1731;
                        break;
                };
                var $1716 = $1724;
                break;
        };
        return $1716;
    };
    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);

    function Kind$Parser$letforin$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1819 = self.idx;
                var $1820 = self.code;
                var $1821 = self.err;
                var $1822 = Parser$Reply$error$($1819, $1820, $1821);
                var $1818 = $1822;
                break;
            case 'Parser.Reply.value':
                var $1823 = self.idx;
                var $1824 = self.code;
                var $1825 = self.val;
                var self = Kind$Parser$text$("for ", $1823, $1824);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1827 = self.idx;
                        var $1828 = self.code;
                        var $1829 = self.err;
                        var $1830 = Parser$Reply$error$($1827, $1828, $1829);
                        var $1826 = $1830;
                        break;
                    case 'Parser.Reply.value':
                        var $1831 = self.idx;
                        var $1832 = self.code;
                        var self = Kind$Parser$name1$($1831, $1832);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1834 = self.idx;
                                var $1835 = self.code;
                                var $1836 = self.err;
                                var $1837 = Parser$Reply$error$($1834, $1835, $1836);
                                var $1833 = $1837;
                                break;
                            case 'Parser.Reply.value':
                                var $1838 = self.idx;
                                var $1839 = self.code;
                                var $1840 = self.val;
                                var self = Kind$Parser$text$("in", $1838, $1839);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1842 = self.idx;
                                        var $1843 = self.code;
                                        var $1844 = self.err;
                                        var $1845 = Parser$Reply$error$($1842, $1843, $1844);
                                        var $1841 = $1845;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1846 = self.idx;
                                        var $1847 = self.code;
                                        var self = Kind$Parser$term$($1846, $1847);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1849 = self.idx;
                                                var $1850 = self.code;
                                                var $1851 = self.err;
                                                var $1852 = Parser$Reply$error$($1849, $1850, $1851);
                                                var $1848 = $1852;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1853 = self.idx;
                                                var $1854 = self.code;
                                                var $1855 = self.val;
                                                var self = Kind$Parser$text$("with ", $1853, $1854);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1857 = self.idx;
                                                        var $1858 = self.code;
                                                        var $1859 = self.err;
                                                        var $1860 = Parser$Reply$error$($1857, $1858, $1859);
                                                        var $1856 = $1860;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1861 = self.idx;
                                                        var $1862 = self.code;
                                                        var self = Kind$Parser$name1$($1861, $1862);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1864 = self.idx;
                                                                var $1865 = self.code;
                                                                var $1866 = self.err;
                                                                var $1867 = Parser$Reply$error$($1864, $1865, $1866);
                                                                var $1863 = $1867;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1868 = self.idx;
                                                                var $1869 = self.code;
                                                                var $1870 = self.val;
                                                                var self = Kind$Parser$text$(":", $1868, $1869);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1872 = self.idx;
                                                                        var $1873 = self.code;
                                                                        var $1874 = self.err;
                                                                        var $1875 = Parser$Reply$error$($1872, $1873, $1874);
                                                                        var $1871 = $1875;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1876 = self.idx;
                                                                        var $1877 = self.code;
                                                                        var self = Kind$Parser$term$($1876, $1877);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1879 = self.idx;
                                                                                var $1880 = self.code;
                                                                                var $1881 = self.err;
                                                                                var $1882 = Parser$Reply$error$($1879, $1880, $1881);
                                                                                var $1878 = $1882;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1883 = self.idx;
                                                                                var $1884 = self.code;
                                                                                var $1885 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1883, $1884);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1887 = self.idx;
                                                                                        var $1888 = self.code;
                                                                                        var $1889 = self.err;
                                                                                        var $1890 = Parser$Reply$error$($1887, $1888, $1889);
                                                                                        var $1886 = $1890;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1891 = self.idx;
                                                                                        var $1892 = self.code;
                                                                                        var self = Kind$Parser$term$($1891, $1892);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1894 = self.idx;
                                                                                                var $1895 = self.code;
                                                                                                var $1896 = self.err;
                                                                                                var $1897 = Parser$Reply$error$($1894, $1895, $1896);
                                                                                                var $1893 = $1897;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1898 = self.idx;
                                                                                                var $1899 = self.code;
                                                                                                var $1900 = self.val;
                                                                                                var self = Kind$Parser$stop$($1825, $1898, $1899);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1902 = self.idx;
                                                                                                        var $1903 = self.code;
                                                                                                        var $1904 = self.err;
                                                                                                        var $1905 = Parser$Reply$error$($1902, $1903, $1904);
                                                                                                        var $1901 = $1905;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1906 = self.idx;
                                                                                                        var $1907 = self.code;
                                                                                                        var $1908 = self.val;
                                                                                                        var _term$39 = Kind$Term$ref$("List.for");
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $1855);
                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($1870));
                                                                                                        var _lamb$44 = Kind$Term$lam$($1840, (_i$44 => {
                                                                                                            var $1910 = Kind$Term$lam$($1870, (_x$45 => {
                                                                                                                var $1911 = $1885;
                                                                                                                return $1911;
                                                                                                            }));
                                                                                                            return $1910;
                                                                                                        }));
                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Kind$Term$let$($1870, _term$45, (_x$46 => {
                                                                                                            var $1912 = $1900;
                                                                                                            return $1912;
                                                                                                        }));
                                                                                                        var $1909 = Parser$Reply$value$($1906, $1907, Kind$Term$ori$($1908, _term$46));
                                                                                                        var $1901 = $1909;
                                                                                                        break;
                                                                                                };
                                                                                                var $1893 = $1901;
                                                                                                break;
                                                                                        };
                                                                                        var $1886 = $1893;
                                                                                        break;
                                                                                };
                                                                                var $1878 = $1886;
                                                                                break;
                                                                        };
                                                                        var $1871 = $1878;
                                                                        break;
                                                                };
                                                                var $1863 = $1871;
                                                                break;
                                                        };
                                                        var $1856 = $1863;
                                                        break;
                                                };
                                                var $1848 = $1856;
                                                break;
                                        };
                                        var $1841 = $1848;
                                        break;
                                };
                                var $1833 = $1841;
                                break;
                        };
                        var $1826 = $1833;
                        break;
                };
                var $1818 = $1826;
                break;
        };
        return $1818;
    };
    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);

    function Kind$Parser$letwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1914 = self.idx;
                var $1915 = self.code;
                var $1916 = self.err;
                var $1917 = Parser$Reply$error$($1914, $1915, $1916);
                var $1913 = $1917;
                break;
            case 'Parser.Reply.value':
                var $1918 = self.idx;
                var $1919 = self.code;
                var $1920 = self.val;
                var self = Kind$Parser$text$("let ", $1918, $1919);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1922 = self.idx;
                        var $1923 = self.code;
                        var $1924 = self.err;
                        var $1925 = Parser$Reply$error$($1922, $1923, $1924);
                        var $1921 = $1925;
                        break;
                    case 'Parser.Reply.value':
                        var $1926 = self.idx;
                        var $1927 = self.code;
                        var self = Kind$Parser$name1$($1926, $1927);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1929 = self.idx;
                                var $1930 = self.code;
                                var $1931 = self.err;
                                var $1932 = Parser$Reply$error$($1929, $1930, $1931);
                                var $1928 = $1932;
                                break;
                            case 'Parser.Reply.value':
                                var $1933 = self.idx;
                                var $1934 = self.code;
                                var $1935 = self.val;
                                var self = Kind$Parser$text$("=", $1933, $1934);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1937 = self.idx;
                                        var $1938 = self.code;
                                        var $1939 = self.err;
                                        var $1940 = Parser$Reply$error$($1937, $1938, $1939);
                                        var $1936 = $1940;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1941 = self.idx;
                                        var $1942 = self.code;
                                        var self = Kind$Parser$text$("while ", $1941, $1942);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1944 = self.idx;
                                                var $1945 = self.code;
                                                var $1946 = self.err;
                                                var $1947 = Parser$Reply$error$($1944, $1945, $1946);
                                                var $1943 = $1947;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1948 = self.idx;
                                                var $1949 = self.code;
                                                var self = Kind$Parser$term$($1948, $1949);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1951 = self.idx;
                                                        var $1952 = self.code;
                                                        var $1953 = self.err;
                                                        var $1954 = Parser$Reply$error$($1951, $1952, $1953);
                                                        var $1950 = $1954;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1955 = self.idx;
                                                        var $1956 = self.code;
                                                        var $1957 = self.val;
                                                        var self = Kind$Parser$text$(":", $1955, $1956);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1959 = self.idx;
                                                                var $1960 = self.code;
                                                                var $1961 = self.err;
                                                                var $1962 = Parser$Reply$error$($1959, $1960, $1961);
                                                                var $1958 = $1962;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1963 = self.idx;
                                                                var $1964 = self.code;
                                                                var self = Kind$Parser$term$($1963, $1964);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1966 = self.idx;
                                                                        var $1967 = self.code;
                                                                        var $1968 = self.err;
                                                                        var $1969 = Parser$Reply$error$($1966, $1967, $1968);
                                                                        var $1965 = $1969;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1970 = self.idx;
                                                                        var $1971 = self.code;
                                                                        var $1972 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1970, $1971);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1974 = self.idx;
                                                                                var $1975 = self.code;
                                                                                var $1976 = self.err;
                                                                                var $1977 = Parser$Reply$error$($1974, $1975, $1976);
                                                                                var $1973 = $1977;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1978 = self.idx;
                                                                                var $1979 = self.code;
                                                                                var self = Kind$Parser$term$($1978, $1979);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1981 = self.idx;
                                                                                        var $1982 = self.code;
                                                                                        var $1983 = self.err;
                                                                                        var $1984 = Parser$Reply$error$($1981, $1982, $1983);
                                                                                        var $1980 = $1984;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1985 = self.idx;
                                                                                        var $1986 = self.code;
                                                                                        var $1987 = self.val;
                                                                                        var self = Kind$Parser$stop$($1920, $1985, $1986);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1989 = self.idx;
                                                                                                var $1990 = self.code;
                                                                                                var $1991 = self.err;
                                                                                                var $1992 = Parser$Reply$error$($1989, $1990, $1991);
                                                                                                var $1988 = $1992;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1993 = self.idx;
                                                                                                var $1994 = self.code;
                                                                                                var $1995 = self.val;
                                                                                                var _term$36 = Kind$Term$ref$("Function.while");
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($1935));
                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($1935, (_s$39 => {
                                                                                                    var $1997 = $1957;
                                                                                                    return $1997;
                                                                                                })));
                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($1935, (_s$40 => {
                                                                                                    var $1998 = $1972;
                                                                                                    return $1998;
                                                                                                })));
                                                                                                var _term$41 = Kind$Term$let$($1935, _term$40, (_x$41 => {
                                                                                                    var $1999 = $1987;
                                                                                                    return $1999;
                                                                                                }));
                                                                                                var $1996 = Parser$Reply$value$($1993, $1994, Kind$Term$ori$($1995, _term$41));
                                                                                                var $1988 = $1996;
                                                                                                break;
                                                                                        };
                                                                                        var $1980 = $1988;
                                                                                        break;
                                                                                };
                                                                                var $1973 = $1980;
                                                                                break;
                                                                        };
                                                                        var $1965 = $1973;
                                                                        break;
                                                                };
                                                                var $1958 = $1965;
                                                                break;
                                                        };
                                                        var $1950 = $1958;
                                                        break;
                                                };
                                                var $1943 = $1950;
                                                break;
                                        };
                                        var $1936 = $1943;
                                        break;
                                };
                                var $1928 = $1936;
                                break;
                        };
                        var $1921 = $1928;
                        break;
                };
                var $1913 = $1921;
                break;
        };
        return $1913;
    };
    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);

    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2001 = self.idx;
                var $2002 = self.code;
                var $2003 = self.err;
                var $2004 = Parser$Reply$error$($2001, $2002, $2003);
                var $2000 = $2004;
                break;
            case 'Parser.Reply.value':
                var $2005 = self.idx;
                var $2006 = self.code;
                var $2007 = self.val;
                var self = Kind$Parser$text$("while ", $2005, $2006);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2009 = self.idx;
                        var $2010 = self.code;
                        var $2011 = self.err;
                        var $2012 = Parser$Reply$error$($2009, $2010, $2011);
                        var $2008 = $2012;
                        break;
                    case 'Parser.Reply.value':
                        var $2013 = self.idx;
                        var $2014 = self.code;
                        var self = Kind$Parser$term$($2013, $2014);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2016 = self.idx;
                                var $2017 = self.code;
                                var $2018 = self.err;
                                var $2019 = Parser$Reply$error$($2016, $2017, $2018);
                                var $2015 = $2019;
                                break;
                            case 'Parser.Reply.value':
                                var $2020 = self.idx;
                                var $2021 = self.code;
                                var $2022 = self.val;
                                var self = Kind$Parser$text$("with ", $2020, $2021);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2024 = self.idx;
                                        var $2025 = self.code;
                                        var $2026 = self.err;
                                        var $2027 = Parser$Reply$error$($2024, $2025, $2026);
                                        var $2023 = $2027;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2028 = self.idx;
                                        var $2029 = self.code;
                                        var self = Kind$Parser$name1$($2028, $2029);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2031 = self.idx;
                                                var $2032 = self.code;
                                                var $2033 = self.err;
                                                var $2034 = Parser$Reply$error$($2031, $2032, $2033);
                                                var $2030 = $2034;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2035 = self.idx;
                                                var $2036 = self.code;
                                                var $2037 = self.val;
                                                var self = Kind$Parser$text$(":", $2035, $2036);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2039 = self.idx;
                                                        var $2040 = self.code;
                                                        var $2041 = self.err;
                                                        var $2042 = Parser$Reply$error$($2039, $2040, $2041);
                                                        var $2038 = $2042;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2043 = self.idx;
                                                        var $2044 = self.code;
                                                        var self = Kind$Parser$term$($2043, $2044);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2046 = self.idx;
                                                                var $2047 = self.code;
                                                                var $2048 = self.err;
                                                                var $2049 = Parser$Reply$error$($2046, $2047, $2048);
                                                                var $2045 = $2049;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2050 = self.idx;
                                                                var $2051 = self.code;
                                                                var $2052 = self.val;
                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2050, $2051);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2054 = self.idx;
                                                                        var $2055 = self.code;
                                                                        var $2056 = self.err;
                                                                        var $2057 = Parser$Reply$error$($2054, $2055, $2056);
                                                                        var $2053 = $2057;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2058 = self.idx;
                                                                        var $2059 = self.code;
                                                                        var self = Kind$Parser$term$($2058, $2059);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2061 = self.idx;
                                                                                var $2062 = self.code;
                                                                                var $2063 = self.err;
                                                                                var $2064 = Parser$Reply$error$($2061, $2062, $2063);
                                                                                var $2060 = $2064;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2065 = self.idx;
                                                                                var $2066 = self.code;
                                                                                var $2067 = self.val;
                                                                                var self = Kind$Parser$stop$($2007, $2065, $2066);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2069 = self.idx;
                                                                                        var $2070 = self.code;
                                                                                        var $2071 = self.err;
                                                                                        var $2072 = Parser$Reply$error$($2069, $2070, $2071);
                                                                                        var $2068 = $2072;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2073 = self.idx;
                                                                                        var $2074 = self.code;
                                                                                        var $2075 = self.val;
                                                                                        var _term$33 = Kind$Term$ref$("Function.while");
                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($2037));
                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($2037, (_s$36 => {
                                                                                            var $2077 = $2022;
                                                                                            return $2077;
                                                                                        })));
                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($2037, (_s$37 => {
                                                                                            var $2078 = $2052;
                                                                                            return $2078;
                                                                                        })));
                                                                                        var _term$38 = Kind$Term$let$($2037, _term$37, (_x$38 => {
                                                                                            var $2079 = $2067;
                                                                                            return $2079;
                                                                                        }));
                                                                                        var $2076 = Parser$Reply$value$($2073, $2074, Kind$Term$ori$($2075, _term$38));
                                                                                        var $2068 = $2076;
                                                                                        break;
                                                                                };
                                                                                var $2060 = $2068;
                                                                                break;
                                                                        };
                                                                        var $2053 = $2060;
                                                                        break;
                                                                };
                                                                var $2045 = $2053;
                                                                break;
                                                        };
                                                        var $2038 = $2045;
                                                        break;
                                                };
                                                var $2030 = $2038;
                                                break;
                                        };
                                        var $2023 = $2030;
                                        break;
                                };
                                var $2015 = $2023;
                                break;
                        };
                        var $2008 = $2015;
                        break;
                };
                var $2000 = $2008;
                break;
        };
        return $2000;
    };
    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);

    function Kind$Parser$let$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2081 = self.idx;
                var $2082 = self.code;
                var $2083 = self.err;
                var $2084 = Parser$Reply$error$($2081, $2082, $2083);
                var $2080 = $2084;
                break;
            case 'Parser.Reply.value':
                var $2085 = self.idx;
                var $2086 = self.code;
                var $2087 = self.val;
                var self = Kind$Parser$text$("let ", $2085, $2086);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2089 = self.idx;
                        var $2090 = self.code;
                        var $2091 = self.err;
                        var $2092 = Parser$Reply$error$($2089, $2090, $2091);
                        var $2088 = $2092;
                        break;
                    case 'Parser.Reply.value':
                        var $2093 = self.idx;
                        var $2094 = self.code;
                        var self = Kind$Parser$name$($2093, $2094);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2096 = self.idx;
                                var $2097 = self.code;
                                var $2098 = self.err;
                                var $2099 = Parser$Reply$error$($2096, $2097, $2098);
                                var $2095 = $2099;
                                break;
                            case 'Parser.Reply.value':
                                var $2100 = self.idx;
                                var $2101 = self.code;
                                var $2102 = self.val;
                                var self = Kind$Parser$text$("=", $2100, $2101);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2104 = self.idx;
                                        var $2105 = self.code;
                                        var $2106 = self.err;
                                        var $2107 = Parser$Reply$error$($2104, $2105, $2106);
                                        var $2103 = $2107;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2108 = self.idx;
                                        var $2109 = self.code;
                                        var self = Kind$Parser$term$($2108, $2109);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2111 = self.idx;
                                                var $2112 = self.code;
                                                var $2113 = self.err;
                                                var $2114 = Parser$Reply$error$($2111, $2112, $2113);
                                                var $2110 = $2114;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2115 = self.idx;
                                                var $2116 = self.code;
                                                var $2117 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2115, $2116);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2119 = self.idx;
                                                        var $2120 = self.code;
                                                        var $2121 = self.err;
                                                        var $2122 = Parser$Reply$error$($2119, $2120, $2121);
                                                        var $2118 = $2122;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2123 = self.idx;
                                                        var $2124 = self.code;
                                                        var self = Kind$Parser$term$($2123, $2124);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2126 = self.idx;
                                                                var $2127 = self.code;
                                                                var $2128 = self.err;
                                                                var $2129 = Parser$Reply$error$($2126, $2127, $2128);
                                                                var $2125 = $2129;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2130 = self.idx;
                                                                var $2131 = self.code;
                                                                var $2132 = self.val;
                                                                var self = Kind$Parser$stop$($2087, $2130, $2131);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2134 = self.idx;
                                                                        var $2135 = self.code;
                                                                        var $2136 = self.err;
                                                                        var $2137 = Parser$Reply$error$($2134, $2135, $2136);
                                                                        var $2133 = $2137;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2138 = self.idx;
                                                                        var $2139 = self.code;
                                                                        var $2140 = self.val;
                                                                        var $2141 = Parser$Reply$value$($2138, $2139, Kind$Term$ori$($2140, Kind$Term$let$($2102, $2117, (_x$27 => {
                                                                            var $2142 = $2132;
                                                                            return $2142;
                                                                        }))));
                                                                        var $2133 = $2141;
                                                                        break;
                                                                };
                                                                var $2125 = $2133;
                                                                break;
                                                        };
                                                        var $2118 = $2125;
                                                        break;
                                                };
                                                var $2110 = $2118;
                                                break;
                                        };
                                        var $2103 = $2110;
                                        break;
                                };
                                var $2095 = $2103;
                                break;
                        };
                        var $2088 = $2095;
                        break;
                };
                var $2080 = $2088;
                break;
        };
        return $2080;
    };
    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);

    function Kind$Parser$let$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2144 = self.idx;
                var $2145 = self.code;
                var $2146 = self.err;
                var $2147 = Parser$Reply$error$($2144, $2145, $2146);
                var $2143 = $2147;
                break;
            case 'Parser.Reply.value':
                var $2148 = self.idx;
                var $2149 = self.code;
                var $2150 = self.val;
                var self = Kind$Parser$name$($2148, $2149);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2152 = self.idx;
                        var $2153 = self.code;
                        var $2154 = self.err;
                        var $2155 = Parser$Reply$error$($2152, $2153, $2154);
                        var $2151 = $2155;
                        break;
                    case 'Parser.Reply.value':
                        var $2156 = self.idx;
                        var $2157 = self.code;
                        var $2158 = self.val;
                        var self = Kind$Parser$text$("= ", $2156, $2157);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2160 = self.idx;
                                var $2161 = self.code;
                                var $2162 = self.err;
                                var $2163 = Parser$Reply$error$($2160, $2161, $2162);
                                var $2159 = $2163;
                                break;
                            case 'Parser.Reply.value':
                                var $2164 = self.idx;
                                var $2165 = self.code;
                                var self = Kind$Parser$term$($2164, $2165);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2167 = self.idx;
                                        var $2168 = self.code;
                                        var $2169 = self.err;
                                        var $2170 = Parser$Reply$error$($2167, $2168, $2169);
                                        var $2166 = $2170;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2171 = self.idx;
                                        var $2172 = self.code;
                                        var $2173 = self.val;
                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2171, $2172);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2175 = self.idx;
                                                var $2176 = self.code;
                                                var $2177 = self.err;
                                                var $2178 = Parser$Reply$error$($2175, $2176, $2177);
                                                var $2174 = $2178;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2179 = self.idx;
                                                var $2180 = self.code;
                                                var self = Kind$Parser$term$($2179, $2180);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2182 = self.idx;
                                                        var $2183 = self.code;
                                                        var $2184 = self.err;
                                                        var $2185 = Parser$Reply$error$($2182, $2183, $2184);
                                                        var $2181 = $2185;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2186 = self.idx;
                                                        var $2187 = self.code;
                                                        var $2188 = self.val;
                                                        var self = Kind$Parser$stop$($2150, $2186, $2187);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2190 = self.idx;
                                                                var $2191 = self.code;
                                                                var $2192 = self.err;
                                                                var $2193 = Parser$Reply$error$($2190, $2191, $2192);
                                                                var $2189 = $2193;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2194 = self.idx;
                                                                var $2195 = self.code;
                                                                var $2196 = self.val;
                                                                var $2197 = Parser$Reply$value$($2194, $2195, Kind$Term$ori$($2196, Kind$Term$let$($2158, $2173, (_x$24 => {
                                                                    var $2198 = $2188;
                                                                    return $2198;
                                                                }))));
                                                                var $2189 = $2197;
                                                                break;
                                                        };
                                                        var $2181 = $2189;
                                                        break;
                                                };
                                                var $2174 = $2181;
                                                break;
                                        };
                                        var $2166 = $2174;
                                        break;
                                };
                                var $2159 = $2166;
                                break;
                        };
                        var $2151 = $2159;
                        break;
                };
                var $2143 = $2151;
                break;
        };
        return $2143;
    };
    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);

    function Kind$Parser$getwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2200 = self.idx;
                var $2201 = self.code;
                var $2202 = self.err;
                var $2203 = Parser$Reply$error$($2200, $2201, $2202);
                var $2199 = $2203;
                break;
            case 'Parser.Reply.value':
                var $2204 = self.idx;
                var $2205 = self.code;
                var $2206 = self.val;
                var self = Parser$maybe$(Kind$Parser$text("let "), $2204, $2205);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2208 = self.idx;
                        var $2209 = self.code;
                        var $2210 = self.err;
                        var $2211 = Parser$Reply$error$($2208, $2209, $2210);
                        var $2207 = $2211;
                        break;
                    case 'Parser.Reply.value':
                        var $2212 = self.idx;
                        var $2213 = self.code;
                        var self = Kind$Parser$text$("{", $2212, $2213);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2215 = self.idx;
                                var $2216 = self.code;
                                var $2217 = self.err;
                                var $2218 = Parser$Reply$error$($2215, $2216, $2217);
                                var $2214 = $2218;
                                break;
                            case 'Parser.Reply.value':
                                var $2219 = self.idx;
                                var $2220 = self.code;
                                var self = Kind$Parser$name$($2219, $2220);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2222 = self.idx;
                                        var $2223 = self.code;
                                        var $2224 = self.err;
                                        var $2225 = Parser$Reply$error$($2222, $2223, $2224);
                                        var $2221 = $2225;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2226 = self.idx;
                                        var $2227 = self.code;
                                        var $2228 = self.val;
                                        var self = Kind$Parser$text$(",", $2226, $2227);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2230 = self.idx;
                                                var $2231 = self.code;
                                                var $2232 = self.err;
                                                var $2233 = Parser$Reply$error$($2230, $2231, $2232);
                                                var $2229 = $2233;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2234 = self.idx;
                                                var $2235 = self.code;
                                                var self = Kind$Parser$name$($2234, $2235);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2237 = self.idx;
                                                        var $2238 = self.code;
                                                        var $2239 = self.err;
                                                        var $2240 = Parser$Reply$error$($2237, $2238, $2239);
                                                        var $2236 = $2240;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2241 = self.idx;
                                                        var $2242 = self.code;
                                                        var $2243 = self.val;
                                                        var self = Kind$Parser$text$("}", $2241, $2242);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2245 = self.idx;
                                                                var $2246 = self.code;
                                                                var $2247 = self.err;
                                                                var $2248 = Parser$Reply$error$($2245, $2246, $2247);
                                                                var $2244 = $2248;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2249 = self.idx;
                                                                var $2250 = self.code;
                                                                var self = Kind$Parser$text$("=", $2249, $2250);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2252 = self.idx;
                                                                        var $2253 = self.code;
                                                                        var $2254 = self.err;
                                                                        var $2255 = Parser$Reply$error$($2252, $2253, $2254);
                                                                        var $2251 = $2255;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2256 = self.idx;
                                                                        var $2257 = self.code;
                                                                        var self = Kind$Parser$text$("while ", $2256, $2257);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2259 = self.idx;
                                                                                var $2260 = self.code;
                                                                                var $2261 = self.err;
                                                                                var $2262 = Parser$Reply$error$($2259, $2260, $2261);
                                                                                var $2258 = $2262;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2263 = self.idx;
                                                                                var $2264 = self.code;
                                                                                var self = Kind$Parser$term$($2263, $2264);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2266 = self.idx;
                                                                                        var $2267 = self.code;
                                                                                        var $2268 = self.err;
                                                                                        var $2269 = Parser$Reply$error$($2266, $2267, $2268);
                                                                                        var $2265 = $2269;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2270 = self.idx;
                                                                                        var $2271 = self.code;
                                                                                        var $2272 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $2270, $2271);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2274 = self.idx;
                                                                                                var $2275 = self.code;
                                                                                                var $2276 = self.err;
                                                                                                var $2277 = Parser$Reply$error$($2274, $2275, $2276);
                                                                                                var $2273 = $2277;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2278 = self.idx;
                                                                                                var $2279 = self.code;
                                                                                                var self = Kind$Parser$term$($2278, $2279);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2281 = self.idx;
                                                                                                        var $2282 = self.code;
                                                                                                        var $2283 = self.err;
                                                                                                        var $2284 = Parser$Reply$error$($2281, $2282, $2283);
                                                                                                        var $2280 = $2284;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2285 = self.idx;
                                                                                                        var $2286 = self.code;
                                                                                                        var $2287 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2285, $2286);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2289 = self.idx;
                                                                                                                var $2290 = self.code;
                                                                                                                var $2291 = self.err;
                                                                                                                var $2292 = Parser$Reply$error$($2289, $2290, $2291);
                                                                                                                var $2288 = $2292;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2293 = self.idx;
                                                                                                                var $2294 = self.code;
                                                                                                                var self = Kind$Parser$term$($2293, $2294);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2296 = self.idx;
                                                                                                                        var $2297 = self.code;
                                                                                                                        var $2298 = self.err;
                                                                                                                        var $2299 = Parser$Reply$error$($2296, $2297, $2298);
                                                                                                                        var $2295 = $2299;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2300 = self.idx;
                                                                                                                        var $2301 = self.code;
                                                                                                                        var $2302 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($2206, $2300, $2301);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $2304 = self.idx;
                                                                                                                                var $2305 = self.code;
                                                                                                                                var $2306 = self.err;
                                                                                                                                var $2307 = Parser$Reply$error$($2304, $2305, $2306);
                                                                                                                                var $2303 = $2307;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $2308 = self.idx;
                                                                                                                                var $2309 = self.code;
                                                                                                                                var $2310 = self.val;
                                                                                                                                var _moti$48 = Kind$Term$lam$("", (_x$48 => {
                                                                                                                                    var $2312 = Kind$Term$hol$(Bits$e);
                                                                                                                                    return $2312;
                                                                                                                                }));
                                                                                                                                var _term$49 = Kind$Term$ref$("Function.while");
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$51 = Kind$Term$ref$("Pair.new");
                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($2228));
                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($2243));
                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);
                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$("s", (_s$57 => {
                                                                                                                                    var $2313 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($2228, (_x$58 => {
                                                                                                                                        var $2314 = Kind$Term$lam$($2243, (_y$59 => {
                                                                                                                                            var $2315 = $2272;
                                                                                                                                            return $2315;
                                                                                                                                        }));
                                                                                                                                        return $2314;
                                                                                                                                    })));
                                                                                                                                    return $2313;
                                                                                                                                })));
                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$("s", (_s$58 => {
                                                                                                                                    var $2316 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($2228, (_x$59 => {
                                                                                                                                        var $2317 = Kind$Term$lam$($2243, (_y$60 => {
                                                                                                                                            var $2318 = $2287;
                                                                                                                                            return $2318;
                                                                                                                                        }));
                                                                                                                                        return $2317;
                                                                                                                                    })));
                                                                                                                                    return $2316;
                                                                                                                                })));
                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($2228, (_x$59 => {
                                                                                                                                    var $2319 = Kind$Term$lam$($2243, (_y$60 => {
                                                                                                                                        var $2320 = $2302;
                                                                                                                                        return $2320;
                                                                                                                                    }));
                                                                                                                                    return $2319;
                                                                                                                                })));
                                                                                                                                var $2311 = Parser$Reply$value$($2308, $2309, Kind$Term$ori$($2310, _term$59));
                                                                                                                                var $2303 = $2311;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $2295 = $2303;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2288 = $2295;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2280 = $2288;
                                                                                                        break;
                                                                                                };
                                                                                                var $2273 = $2280;
                                                                                                break;
                                                                                        };
                                                                                        var $2265 = $2273;
                                                                                        break;
                                                                                };
                                                                                var $2258 = $2265;
                                                                                break;
                                                                        };
                                                                        var $2251 = $2258;
                                                                        break;
                                                                };
                                                                var $2244 = $2251;
                                                                break;
                                                        };
                                                        var $2236 = $2244;
                                                        break;
                                                };
                                                var $2229 = $2236;
                                                break;
                                        };
                                        var $2221 = $2229;
                                        break;
                                };
                                var $2214 = $2221;
                                break;
                        };
                        var $2207 = $2214;
                        break;
                };
                var $2199 = $2207;
                break;
        };
        return $2199;
    };
    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);

    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2322 = self.idx;
                var $2323 = self.code;
                var $2324 = self.err;
                var $2325 = Parser$Reply$error$($2322, $2323, $2324);
                var $2321 = $2325;
                break;
            case 'Parser.Reply.value':
                var $2326 = self.idx;
                var $2327 = self.code;
                var $2328 = self.val;
                var self = Kind$Parser$text$("while ", $2326, $2327);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2330 = self.idx;
                        var $2331 = self.code;
                        var $2332 = self.err;
                        var $2333 = Parser$Reply$error$($2330, $2331, $2332);
                        var $2329 = $2333;
                        break;
                    case 'Parser.Reply.value':
                        var $2334 = self.idx;
                        var $2335 = self.code;
                        var self = Kind$Parser$term$($2334, $2335);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2337 = self.idx;
                                var $2338 = self.code;
                                var $2339 = self.err;
                                var $2340 = Parser$Reply$error$($2337, $2338, $2339);
                                var $2336 = $2340;
                                break;
                            case 'Parser.Reply.value':
                                var $2341 = self.idx;
                                var $2342 = self.code;
                                var $2343 = self.val;
                                var self = Kind$Parser$text$("with ", $2341, $2342);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2345 = self.idx;
                                        var $2346 = self.code;
                                        var $2347 = self.err;
                                        var $2348 = Parser$Reply$error$($2345, $2346, $2347);
                                        var $2344 = $2348;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2349 = self.idx;
                                        var $2350 = self.code;
                                        var self = Kind$Parser$text$("{", $2349, $2350);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2352 = self.idx;
                                                var $2353 = self.code;
                                                var $2354 = self.err;
                                                var $2355 = Parser$Reply$error$($2352, $2353, $2354);
                                                var $2351 = $2355;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2356 = self.idx;
                                                var $2357 = self.code;
                                                var self = Kind$Parser$name$($2356, $2357);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2359 = self.idx;
                                                        var $2360 = self.code;
                                                        var $2361 = self.err;
                                                        var $2362 = Parser$Reply$error$($2359, $2360, $2361);
                                                        var $2358 = $2362;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2363 = self.idx;
                                                        var $2364 = self.code;
                                                        var $2365 = self.val;
                                                        var self = Kind$Parser$text$(",", $2363, $2364);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2367 = self.idx;
                                                                var $2368 = self.code;
                                                                var $2369 = self.err;
                                                                var $2370 = Parser$Reply$error$($2367, $2368, $2369);
                                                                var $2366 = $2370;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2371 = self.idx;
                                                                var $2372 = self.code;
                                                                var self = Kind$Parser$name$($2371, $2372);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2374 = self.idx;
                                                                        var $2375 = self.code;
                                                                        var $2376 = self.err;
                                                                        var $2377 = Parser$Reply$error$($2374, $2375, $2376);
                                                                        var $2373 = $2377;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2378 = self.idx;
                                                                        var $2379 = self.code;
                                                                        var $2380 = self.val;
                                                                        var self = Kind$Parser$text$("}", $2378, $2379);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2382 = self.idx;
                                                                                var $2383 = self.code;
                                                                                var $2384 = self.err;
                                                                                var $2385 = Parser$Reply$error$($2382, $2383, $2384);
                                                                                var $2381 = $2385;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2386 = self.idx;
                                                                                var $2387 = self.code;
                                                                                var self = Kind$Parser$text$(":", $2386, $2387);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2389 = self.idx;
                                                                                        var $2390 = self.code;
                                                                                        var $2391 = self.err;
                                                                                        var $2392 = Parser$Reply$error$($2389, $2390, $2391);
                                                                                        var $2388 = $2392;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2393 = self.idx;
                                                                                        var $2394 = self.code;
                                                                                        var self = Kind$Parser$term$($2393, $2394);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2396 = self.idx;
                                                                                                var $2397 = self.code;
                                                                                                var $2398 = self.err;
                                                                                                var $2399 = Parser$Reply$error$($2396, $2397, $2398);
                                                                                                var $2395 = $2399;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2400 = self.idx;
                                                                                                var $2401 = self.code;
                                                                                                var $2402 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2400, $2401);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2404 = self.idx;
                                                                                                        var $2405 = self.code;
                                                                                                        var $2406 = self.err;
                                                                                                        var $2407 = Parser$Reply$error$($2404, $2405, $2406);
                                                                                                        var $2403 = $2407;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2408 = self.idx;
                                                                                                        var $2409 = self.code;
                                                                                                        var self = Kind$Parser$term$($2408, $2409);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2411 = self.idx;
                                                                                                                var $2412 = self.code;
                                                                                                                var $2413 = self.err;
                                                                                                                var $2414 = Parser$Reply$error$($2411, $2412, $2413);
                                                                                                                var $2410 = $2414;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2415 = self.idx;
                                                                                                                var $2416 = self.code;
                                                                                                                var $2417 = self.val;
                                                                                                                var self = Kind$Parser$stop$($2328, $2415, $2416);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2419 = self.idx;
                                                                                                                        var $2420 = self.code;
                                                                                                                        var $2421 = self.err;
                                                                                                                        var $2422 = Parser$Reply$error$($2419, $2420, $2421);
                                                                                                                        var $2418 = $2422;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2423 = self.idx;
                                                                                                                        var $2424 = self.code;
                                                                                                                        var $2425 = self.val;
                                                                                                                        var _moti$45 = Kind$Term$lam$("", (_x$45 => {
                                                                                                                            var $2427 = Kind$Term$hol$(Bits$e);
                                                                                                                            return $2427;
                                                                                                                        }));
                                                                                                                        var _term$46 = Kind$Term$ref$("Function.while");
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$48 = Kind$Term$ref$("Pair.new");
                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($2365));
                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($2380));
                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);
                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$("s", (_s$54 => {
                                                                                                                            var $2428 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($2365, (_x$55 => {
                                                                                                                                var $2429 = Kind$Term$lam$($2380, (_y$56 => {
                                                                                                                                    var $2430 = $2343;
                                                                                                                                    return $2430;
                                                                                                                                }));
                                                                                                                                return $2429;
                                                                                                                            })));
                                                                                                                            return $2428;
                                                                                                                        })));
                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$("s", (_s$55 => {
                                                                                                                            var $2431 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($2365, (_x$56 => {
                                                                                                                                var $2432 = Kind$Term$lam$($2380, (_y$57 => {
                                                                                                                                    var $2433 = $2402;
                                                                                                                                    return $2433;
                                                                                                                                }));
                                                                                                                                return $2432;
                                                                                                                            })));
                                                                                                                            return $2431;
                                                                                                                        })));
                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($2365, (_x$56 => {
                                                                                                                            var $2434 = Kind$Term$lam$($2380, (_y$57 => {
                                                                                                                                var $2435 = $2417;
                                                                                                                                return $2435;
                                                                                                                            }));
                                                                                                                            return $2434;
                                                                                                                        })));
                                                                                                                        var $2426 = Parser$Reply$value$($2423, $2424, Kind$Term$ori$($2425, _term$56));
                                                                                                                        var $2418 = $2426;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2410 = $2418;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2403 = $2410;
                                                                                                        break;
                                                                                                };
                                                                                                var $2395 = $2403;
                                                                                                break;
                                                                                        };
                                                                                        var $2388 = $2395;
                                                                                        break;
                                                                                };
                                                                                var $2381 = $2388;
                                                                                break;
                                                                        };
                                                                        var $2373 = $2381;
                                                                        break;
                                                                };
                                                                var $2366 = $2373;
                                                                break;
                                                        };
                                                        var $2358 = $2366;
                                                        break;
                                                };
                                                var $2351 = $2358;
                                                break;
                                        };
                                        var $2344 = $2351;
                                        break;
                                };
                                var $2336 = $2344;
                                break;
                        };
                        var $2329 = $2336;
                        break;
                };
                var $2321 = $2329;
                break;
        };
        return $2321;
    };
    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);

    function Kind$Parser$get$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2437 = self.idx;
                var $2438 = self.code;
                var $2439 = self.err;
                var $2440 = Parser$Reply$error$($2437, $2438, $2439);
                var $2436 = $2440;
                break;
            case 'Parser.Reply.value':
                var $2441 = self.idx;
                var $2442 = self.code;
                var $2443 = self.val;
                var self = Kind$Parser$text$("let ", $2441, $2442);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2445 = self.idx;
                        var $2446 = self.code;
                        var $2447 = self.err;
                        var $2448 = Parser$Reply$error$($2445, $2446, $2447);
                        var $2444 = $2448;
                        break;
                    case 'Parser.Reply.value':
                        var $2449 = self.idx;
                        var $2450 = self.code;
                        var self = Kind$Parser$text$("{", $2449, $2450);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2452 = self.idx;
                                var $2453 = self.code;
                                var $2454 = self.err;
                                var $2455 = Parser$Reply$error$($2452, $2453, $2454);
                                var $2451 = $2455;
                                break;
                            case 'Parser.Reply.value':
                                var $2456 = self.idx;
                                var $2457 = self.code;
                                var self = Kind$Parser$name$($2456, $2457);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2459 = self.idx;
                                        var $2460 = self.code;
                                        var $2461 = self.err;
                                        var $2462 = Parser$Reply$error$($2459, $2460, $2461);
                                        var $2458 = $2462;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2463 = self.idx;
                                        var $2464 = self.code;
                                        var $2465 = self.val;
                                        var self = Kind$Parser$text$(",", $2463, $2464);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2467 = self.idx;
                                                var $2468 = self.code;
                                                var $2469 = self.err;
                                                var $2470 = Parser$Reply$error$($2467, $2468, $2469);
                                                var $2466 = $2470;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2471 = self.idx;
                                                var $2472 = self.code;
                                                var self = Kind$Parser$name$($2471, $2472);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2474 = self.idx;
                                                        var $2475 = self.code;
                                                        var $2476 = self.err;
                                                        var $2477 = Parser$Reply$error$($2474, $2475, $2476);
                                                        var $2473 = $2477;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2478 = self.idx;
                                                        var $2479 = self.code;
                                                        var $2480 = self.val;
                                                        var self = Kind$Parser$text$("}", $2478, $2479);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2482 = self.idx;
                                                                var $2483 = self.code;
                                                                var $2484 = self.err;
                                                                var $2485 = Parser$Reply$error$($2482, $2483, $2484);
                                                                var $2481 = $2485;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2486 = self.idx;
                                                                var $2487 = self.code;
                                                                var self = Kind$Parser$text$("=", $2486, $2487);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2489 = self.idx;
                                                                        var $2490 = self.code;
                                                                        var $2491 = self.err;
                                                                        var $2492 = Parser$Reply$error$($2489, $2490, $2491);
                                                                        var $2488 = $2492;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2493 = self.idx;
                                                                        var $2494 = self.code;
                                                                        var self = Kind$Parser$term$($2493, $2494);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2496 = self.idx;
                                                                                var $2497 = self.code;
                                                                                var $2498 = self.err;
                                                                                var $2499 = Parser$Reply$error$($2496, $2497, $2498);
                                                                                var $2495 = $2499;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2500 = self.idx;
                                                                                var $2501 = self.code;
                                                                                var $2502 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2500, $2501);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2504 = self.idx;
                                                                                        var $2505 = self.code;
                                                                                        var $2506 = self.err;
                                                                                        var $2507 = Parser$Reply$error$($2504, $2505, $2506);
                                                                                        var $2503 = $2507;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2508 = self.idx;
                                                                                        var $2509 = self.code;
                                                                                        var self = Kind$Parser$term$($2508, $2509);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2511 = self.idx;
                                                                                                var $2512 = self.code;
                                                                                                var $2513 = self.err;
                                                                                                var $2514 = Parser$Reply$error$($2511, $2512, $2513);
                                                                                                var $2510 = $2514;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2515 = self.idx;
                                                                                                var $2516 = self.code;
                                                                                                var $2517 = self.val;
                                                                                                var self = Kind$Parser$stop$($2443, $2515, $2516);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2519 = self.idx;
                                                                                                        var $2520 = self.code;
                                                                                                        var $2521 = self.err;
                                                                                                        var $2522 = Parser$Reply$error$($2519, $2520, $2521);
                                                                                                        var $2518 = $2522;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2523 = self.idx;
                                                                                                        var $2524 = self.code;
                                                                                                        var $2525 = self.val;
                                                                                                        var _term$39 = $2502;
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$("", (_x$40 => {
                                                                                                            var $2527 = Kind$Term$hol$(Bits$e);
                                                                                                            return $2527;
                                                                                                        })));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($2465, (_x$41 => {
                                                                                                            var $2528 = Kind$Term$lam$($2480, (_y$42 => {
                                                                                                                var $2529 = $2517;
                                                                                                                return $2529;
                                                                                                            }));
                                                                                                            return $2528;
                                                                                                        })));
                                                                                                        var $2526 = Parser$Reply$value$($2523, $2524, Kind$Term$ori$($2525, _term$41));
                                                                                                        var $2518 = $2526;
                                                                                                        break;
                                                                                                };
                                                                                                var $2510 = $2518;
                                                                                                break;
                                                                                        };
                                                                                        var $2503 = $2510;
                                                                                        break;
                                                                                };
                                                                                var $2495 = $2503;
                                                                                break;
                                                                        };
                                                                        var $2488 = $2495;
                                                                        break;
                                                                };
                                                                var $2481 = $2488;
                                                                break;
                                                        };
                                                        var $2473 = $2481;
                                                        break;
                                                };
                                                var $2466 = $2473;
                                                break;
                                        };
                                        var $2458 = $2466;
                                        break;
                                };
                                var $2451 = $2458;
                                break;
                        };
                        var $2444 = $2451;
                        break;
                };
                var $2436 = $2444;
                break;
        };
        return $2436;
    };
    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);

    function Kind$Parser$get$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2531 = self.idx;
                var $2532 = self.code;
                var $2533 = self.err;
                var $2534 = Parser$Reply$error$($2531, $2532, $2533);
                var $2530 = $2534;
                break;
            case 'Parser.Reply.value':
                var $2535 = self.idx;
                var $2536 = self.code;
                var $2537 = self.val;
                var self = Kind$Parser$text$("{", $2535, $2536);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2539 = self.idx;
                        var $2540 = self.code;
                        var $2541 = self.err;
                        var $2542 = Parser$Reply$error$($2539, $2540, $2541);
                        var $2538 = $2542;
                        break;
                    case 'Parser.Reply.value':
                        var $2543 = self.idx;
                        var $2544 = self.code;
                        var self = Kind$Parser$name$($2543, $2544);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2546 = self.idx;
                                var $2547 = self.code;
                                var $2548 = self.err;
                                var $2549 = Parser$Reply$error$($2546, $2547, $2548);
                                var $2545 = $2549;
                                break;
                            case 'Parser.Reply.value':
                                var $2550 = self.idx;
                                var $2551 = self.code;
                                var $2552 = self.val;
                                var self = Kind$Parser$text$(",", $2550, $2551);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2554 = self.idx;
                                        var $2555 = self.code;
                                        var $2556 = self.err;
                                        var $2557 = Parser$Reply$error$($2554, $2555, $2556);
                                        var $2553 = $2557;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2558 = self.idx;
                                        var $2559 = self.code;
                                        var self = Kind$Parser$name$($2558, $2559);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2561 = self.idx;
                                                var $2562 = self.code;
                                                var $2563 = self.err;
                                                var $2564 = Parser$Reply$error$($2561, $2562, $2563);
                                                var $2560 = $2564;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2565 = self.idx;
                                                var $2566 = self.code;
                                                var $2567 = self.val;
                                                var self = Kind$Parser$text$("}", $2565, $2566);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2569 = self.idx;
                                                        var $2570 = self.code;
                                                        var $2571 = self.err;
                                                        var $2572 = Parser$Reply$error$($2569, $2570, $2571);
                                                        var $2568 = $2572;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2573 = self.idx;
                                                        var $2574 = self.code;
                                                        var self = Kind$Parser$text$("= ", $2573, $2574);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2576 = self.idx;
                                                                var $2577 = self.code;
                                                                var $2578 = self.err;
                                                                var $2579 = Parser$Reply$error$($2576, $2577, $2578);
                                                                var $2575 = $2579;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2580 = self.idx;
                                                                var $2581 = self.code;
                                                                var self = Kind$Parser$term$($2580, $2581);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2583 = self.idx;
                                                                        var $2584 = self.code;
                                                                        var $2585 = self.err;
                                                                        var $2586 = Parser$Reply$error$($2583, $2584, $2585);
                                                                        var $2582 = $2586;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2587 = self.idx;
                                                                        var $2588 = self.code;
                                                                        var $2589 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2587, $2588);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2591 = self.idx;
                                                                                var $2592 = self.code;
                                                                                var $2593 = self.err;
                                                                                var $2594 = Parser$Reply$error$($2591, $2592, $2593);
                                                                                var $2590 = $2594;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2595 = self.idx;
                                                                                var $2596 = self.code;
                                                                                var self = Kind$Parser$term$($2595, $2596);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2598 = self.idx;
                                                                                        var $2599 = self.code;
                                                                                        var $2600 = self.err;
                                                                                        var $2601 = Parser$Reply$error$($2598, $2599, $2600);
                                                                                        var $2597 = $2601;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2602 = self.idx;
                                                                                        var $2603 = self.code;
                                                                                        var $2604 = self.val;
                                                                                        var self = Kind$Parser$stop$($2537, $2602, $2603);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2606 = self.idx;
                                                                                                var $2607 = self.code;
                                                                                                var $2608 = self.err;
                                                                                                var $2609 = Parser$Reply$error$($2606, $2607, $2608);
                                                                                                var $2605 = $2609;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2610 = self.idx;
                                                                                                var $2611 = self.code;
                                                                                                var $2612 = self.val;
                                                                                                var _term$36 = $2589;
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$("", (_x$37 => {
                                                                                                    var $2614 = Kind$Term$hol$(Bits$e);
                                                                                                    return $2614;
                                                                                                })));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($2552, (_x$38 => {
                                                                                                    var $2615 = Kind$Term$lam$($2567, (_y$39 => {
                                                                                                        var $2616 = $2604;
                                                                                                        return $2616;
                                                                                                    }));
                                                                                                    return $2615;
                                                                                                })));
                                                                                                var $2613 = Parser$Reply$value$($2610, $2611, Kind$Term$ori$($2612, _term$38));
                                                                                                var $2605 = $2613;
                                                                                                break;
                                                                                        };
                                                                                        var $2597 = $2605;
                                                                                        break;
                                                                                };
                                                                                var $2590 = $2597;
                                                                                break;
                                                                        };
                                                                        var $2582 = $2590;
                                                                        break;
                                                                };
                                                                var $2575 = $2582;
                                                                break;
                                                        };
                                                        var $2568 = $2575;
                                                        break;
                                                };
                                                var $2560 = $2568;
                                                break;
                                        };
                                        var $2553 = $2560;
                                        break;
                                };
                                var $2545 = $2553;
                                break;
                        };
                        var $2538 = $2545;
                        break;
                };
                var $2530 = $2538;
                break;
        };
        return $2530;
    };
    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);

    function Kind$Parser$def$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2618 = self.idx;
                var $2619 = self.code;
                var $2620 = self.err;
                var $2621 = Parser$Reply$error$($2618, $2619, $2620);
                var $2617 = $2621;
                break;
            case 'Parser.Reply.value':
                var $2622 = self.idx;
                var $2623 = self.code;
                var $2624 = self.val;
                var self = Kind$Parser$text$("def ", $2622, $2623);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2626 = self.idx;
                        var $2627 = self.code;
                        var $2628 = self.err;
                        var $2629 = Parser$Reply$error$($2626, $2627, $2628);
                        var $2625 = $2629;
                        break;
                    case 'Parser.Reply.value':
                        var $2630 = self.idx;
                        var $2631 = self.code;
                        var self = Kind$Parser$name$($2630, $2631);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2633 = self.idx;
                                var $2634 = self.code;
                                var $2635 = self.err;
                                var $2636 = Parser$Reply$error$($2633, $2634, $2635);
                                var $2632 = $2636;
                                break;
                            case 'Parser.Reply.value':
                                var $2637 = self.idx;
                                var $2638 = self.code;
                                var $2639 = self.val;
                                var self = Kind$Parser$text$("=", $2637, $2638);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2641 = self.idx;
                                        var $2642 = self.code;
                                        var $2643 = self.err;
                                        var $2644 = Parser$Reply$error$($2641, $2642, $2643);
                                        var $2640 = $2644;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2645 = self.idx;
                                        var $2646 = self.code;
                                        var self = Kind$Parser$term$($2645, $2646);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2648 = self.idx;
                                                var $2649 = self.code;
                                                var $2650 = self.err;
                                                var $2651 = Parser$Reply$error$($2648, $2649, $2650);
                                                var $2647 = $2651;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2652 = self.idx;
                                                var $2653 = self.code;
                                                var $2654 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2652, $2653);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2656 = self.idx;
                                                        var $2657 = self.code;
                                                        var $2658 = self.err;
                                                        var $2659 = Parser$Reply$error$($2656, $2657, $2658);
                                                        var $2655 = $2659;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2660 = self.idx;
                                                        var $2661 = self.code;
                                                        var self = Kind$Parser$term$($2660, $2661);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2663 = self.idx;
                                                                var $2664 = self.code;
                                                                var $2665 = self.err;
                                                                var $2666 = Parser$Reply$error$($2663, $2664, $2665);
                                                                var $2662 = $2666;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2667 = self.idx;
                                                                var $2668 = self.code;
                                                                var $2669 = self.val;
                                                                var self = Kind$Parser$stop$($2624, $2667, $2668);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2671 = self.idx;
                                                                        var $2672 = self.code;
                                                                        var $2673 = self.err;
                                                                        var $2674 = Parser$Reply$error$($2671, $2672, $2673);
                                                                        var $2670 = $2674;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2675 = self.idx;
                                                                        var $2676 = self.code;
                                                                        var $2677 = self.val;
                                                                        var $2678 = Parser$Reply$value$($2675, $2676, Kind$Term$ori$($2677, Kind$Term$def$($2639, $2654, (_x$27 => {
                                                                            var $2679 = $2669;
                                                                            return $2679;
                                                                        }))));
                                                                        var $2670 = $2678;
                                                                        break;
                                                                };
                                                                var $2662 = $2670;
                                                                break;
                                                        };
                                                        var $2655 = $2662;
                                                        break;
                                                };
                                                var $2647 = $2655;
                                                break;
                                        };
                                        var $2640 = $2647;
                                        break;
                                };
                                var $2632 = $2640;
                                break;
                        };
                        var $2625 = $2632;
                        break;
                };
                var $2617 = $2625;
                break;
        };
        return $2617;
    };
    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);

    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2681 = self.idx;
                var $2682 = self.code;
                var $2683 = self.err;
                var $2684 = Parser$Reply$error$($2681, $2682, $2683);
                var $2680 = $2684;
                break;
            case 'Parser.Reply.value':
                var $2685 = self.idx;
                var $2686 = self.code;
                var $2687 = self.val;
                var self = Kind$Parser$text$("rewrite ", $2685, $2686);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2689 = self.idx;
                        var $2690 = self.code;
                        var $2691 = self.err;
                        var $2692 = Parser$Reply$error$($2689, $2690, $2691);
                        var $2688 = $2692;
                        break;
                    case 'Parser.Reply.value':
                        var $2693 = self.idx;
                        var $2694 = self.code;
                        var self = Kind$Parser$name1$($2693, $2694);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2696 = self.idx;
                                var $2697 = self.code;
                                var $2698 = self.err;
                                var $2699 = Parser$Reply$error$($2696, $2697, $2698);
                                var $2695 = $2699;
                                break;
                            case 'Parser.Reply.value':
                                var $2700 = self.idx;
                                var $2701 = self.code;
                                var $2702 = self.val;
                                var self = Kind$Parser$text$("in", $2700, $2701);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2704 = self.idx;
                                        var $2705 = self.code;
                                        var $2706 = self.err;
                                        var $2707 = Parser$Reply$error$($2704, $2705, $2706);
                                        var $2703 = $2707;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2708 = self.idx;
                                        var $2709 = self.code;
                                        var self = Kind$Parser$term$($2708, $2709);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2711 = self.idx;
                                                var $2712 = self.code;
                                                var $2713 = self.err;
                                                var $2714 = Parser$Reply$error$($2711, $2712, $2713);
                                                var $2710 = $2714;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2715 = self.idx;
                                                var $2716 = self.code;
                                                var $2717 = self.val;
                                                var self = Kind$Parser$text$("with", $2715, $2716);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2719 = self.idx;
                                                        var $2720 = self.code;
                                                        var $2721 = self.err;
                                                        var $2722 = Parser$Reply$error$($2719, $2720, $2721);
                                                        var $2718 = $2722;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2723 = self.idx;
                                                        var $2724 = self.code;
                                                        var self = Kind$Parser$term$($2723, $2724);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2726 = self.idx;
                                                                var $2727 = self.code;
                                                                var $2728 = self.err;
                                                                var $2729 = Parser$Reply$error$($2726, $2727, $2728);
                                                                var $2725 = $2729;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2730 = self.idx;
                                                                var $2731 = self.code;
                                                                var $2732 = self.val;
                                                                var self = Kind$Parser$term$($2730, $2731);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2734 = self.idx;
                                                                        var $2735 = self.code;
                                                                        var $2736 = self.err;
                                                                        var $2737 = Parser$Reply$error$($2734, $2735, $2736);
                                                                        var $2733 = $2737;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2738 = self.idx;
                                                                        var $2739 = self.code;
                                                                        var $2740 = self.val;
                                                                        var self = Kind$Parser$stop$($2687, $2738, $2739);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2742 = self.idx;
                                                                                var $2743 = self.code;
                                                                                var $2744 = self.err;
                                                                                var $2745 = Parser$Reply$error$($2742, $2743, $2744);
                                                                                var $2741 = $2745;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2746 = self.idx;
                                                                                var $2747 = self.code;
                                                                                var $2748 = self.val;
                                                                                var _moti$30 = Kind$Term$lam$($2702, (_s$30 => {
                                                                                    var $2750 = Kind$Term$lam$("", (_x$31 => {
                                                                                        var $2751 = $2717;
                                                                                        return $2751;
                                                                                    }));
                                                                                    return $2750;
                                                                                }));
                                                                                var _term$31 = Kind$Term$ref$("Equal.mirror");
                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));
                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                var _term$35 = Kind$Term$app$(_term$34, $2732);
                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);
                                                                                var _term$37 = Kind$Term$app$(_term$36, $2740);
                                                                                var $2749 = Parser$Reply$value$($2746, $2747, Kind$Term$ori$($2748, _term$37));
                                                                                var $2741 = $2749;
                                                                                break;
                                                                        };
                                                                        var $2733 = $2741;
                                                                        break;
                                                                };
                                                                var $2725 = $2733;
                                                                break;
                                                        };
                                                        var $2718 = $2725;
                                                        break;
                                                };
                                                var $2710 = $2718;
                                                break;
                                        };
                                        var $2703 = $2710;
                                        break;
                                };
                                var $2695 = $2703;
                                break;
                        };
                        var $2688 = $2695;
                        break;
                };
                var $2680 = $2688;
                break;
        };
        return $2680;
    };
    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);

    function Kind$Parser$if$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2753 = self.idx;
                var $2754 = self.code;
                var $2755 = self.err;
                var $2756 = Parser$Reply$error$($2753, $2754, $2755);
                var $2752 = $2756;
                break;
            case 'Parser.Reply.value':
                var $2757 = self.idx;
                var $2758 = self.code;
                var $2759 = self.val;
                var self = Kind$Parser$text$("if ", $2757, $2758);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2761 = self.idx;
                        var $2762 = self.code;
                        var $2763 = self.err;
                        var $2764 = Parser$Reply$error$($2761, $2762, $2763);
                        var $2760 = $2764;
                        break;
                    case 'Parser.Reply.value':
                        var $2765 = self.idx;
                        var $2766 = self.code;
                        var self = Kind$Parser$term$($2765, $2766);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2768 = self.idx;
                                var $2769 = self.code;
                                var $2770 = self.err;
                                var $2771 = Parser$Reply$error$($2768, $2769, $2770);
                                var $2767 = $2771;
                                break;
                            case 'Parser.Reply.value':
                                var $2772 = self.idx;
                                var $2773 = self.code;
                                var $2774 = self.val;
                                var self = Kind$Parser$text$("then", $2772, $2773);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2776 = self.idx;
                                        var $2777 = self.code;
                                        var $2778 = self.err;
                                        var $2779 = Parser$Reply$error$($2776, $2777, $2778);
                                        var $2775 = $2779;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2780 = self.idx;
                                        var $2781 = self.code;
                                        var self = Kind$Parser$term$($2780, $2781);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2783 = self.idx;
                                                var $2784 = self.code;
                                                var $2785 = self.err;
                                                var $2786 = Parser$Reply$error$($2783, $2784, $2785);
                                                var $2782 = $2786;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2787 = self.idx;
                                                var $2788 = self.code;
                                                var $2789 = self.val;
                                                var self = Kind$Parser$text$("else", $2787, $2788);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2791 = self.idx;
                                                        var $2792 = self.code;
                                                        var $2793 = self.err;
                                                        var $2794 = Parser$Reply$error$($2791, $2792, $2793);
                                                        var $2790 = $2794;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2795 = self.idx;
                                                        var $2796 = self.code;
                                                        var self = Kind$Parser$term$($2795, $2796);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2798 = self.idx;
                                                                var $2799 = self.code;
                                                                var $2800 = self.err;
                                                                var $2801 = Parser$Reply$error$($2798, $2799, $2800);
                                                                var $2797 = $2801;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2802 = self.idx;
                                                                var $2803 = self.code;
                                                                var $2804 = self.val;
                                                                var self = Kind$Parser$stop$($2759, $2802, $2803);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2806 = self.idx;
                                                                        var $2807 = self.code;
                                                                        var $2808 = self.err;
                                                                        var $2809 = Parser$Reply$error$($2806, $2807, $2808);
                                                                        var $2805 = $2809;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2810 = self.idx;
                                                                        var $2811 = self.code;
                                                                        var $2812 = self.val;
                                                                        var _term$27 = $2774;
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$("", (_x$28 => {
                                                                            var $2814 = Kind$Term$hol$(Bits$e);
                                                                            return $2814;
                                                                        })));
                                                                        var _term$29 = Kind$Term$app$(_term$28, $2789);
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2804);
                                                                        var $2813 = Parser$Reply$value$($2810, $2811, Kind$Term$ori$($2812, _term$30));
                                                                        var $2805 = $2813;
                                                                        break;
                                                                };
                                                                var $2797 = $2805;
                                                                break;
                                                        };
                                                        var $2790 = $2797;
                                                        break;
                                                };
                                                var $2782 = $2790;
                                                break;
                                        };
                                        var $2775 = $2782;
                                        break;
                                };
                                var $2767 = $2775;
                                break;
                        };
                        var $2760 = $2767;
                        break;
                };
                var $2752 = $2760;
                break;
        };
        return $2752;
    };
    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);
    const Kind$Code$backslash = 92;
    const Kind$Code$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $2816 = self.fst;
                var $2817 = self.snd;
                var $2818 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($2816, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2820 = self.idx;
                            var $2821 = self.code;
                            var $2822 = self.err;
                            var $2823 = Parser$Reply$error$($2820, $2821, $2822);
                            var $2819 = $2823;
                            break;
                        case 'Parser.Reply.value':
                            var $2824 = self.idx;
                            var $2825 = self.code;
                            var $2826 = Parser$Reply$value$($2824, $2825, $2817);
                            var $2819 = $2826;
                            break;
                    };
                    return $2819;
                });
                var $2815 = $2818;
                break;
        };
        return $2815;
    }))), List$cons$(Parser$one, List$nil)));

    function Kind$Parser$char$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2828 = self.idx;
                var $2829 = self.code;
                var $2830 = self.err;
                var $2831 = Parser$Reply$error$($2828, $2829, $2830);
                var $2827 = $2831;
                break;
            case 'Parser.Reply.value':
                var $2832 = self.idx;
                var $2833 = self.code;
                var $2834 = self.val;
                var self = Kind$Parser$text$("\'", $2832, $2833);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2836 = self.idx;
                        var $2837 = self.code;
                        var $2838 = self.err;
                        var $2839 = Parser$Reply$error$($2836, $2837, $2838);
                        var $2835 = $2839;
                        break;
                    case 'Parser.Reply.value':
                        var $2840 = self.idx;
                        var $2841 = self.code;
                        var self = Kind$Parser$char$single($2840)($2841);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2843 = self.idx;
                                var $2844 = self.code;
                                var $2845 = self.err;
                                var $2846 = Parser$Reply$error$($2843, $2844, $2845);
                                var $2842 = $2846;
                                break;
                            case 'Parser.Reply.value':
                                var $2847 = self.idx;
                                var $2848 = self.code;
                                var $2849 = self.val;
                                var self = Parser$text$("\'", $2847, $2848);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2851 = self.idx;
                                        var $2852 = self.code;
                                        var $2853 = self.err;
                                        var $2854 = Parser$Reply$error$($2851, $2852, $2853);
                                        var $2850 = $2854;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2855 = self.idx;
                                        var $2856 = self.code;
                                        var self = Kind$Parser$stop$($2834, $2855, $2856);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2858 = self.idx;
                                                var $2859 = self.code;
                                                var $2860 = self.err;
                                                var $2861 = Parser$Reply$error$($2858, $2859, $2860);
                                                var $2857 = $2861;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2862 = self.idx;
                                                var $2863 = self.code;
                                                var $2864 = self.val;
                                                var $2865 = Parser$Reply$value$($2862, $2863, Kind$Term$ori$($2864, Kind$Term$chr$($2849)));
                                                var $2857 = $2865;
                                                break;
                                        };
                                        var $2850 = $2857;
                                        break;
                                };
                                var $2842 = $2850;
                                break;
                        };
                        var $2835 = $2842;
                        break;
                };
                var $2827 = $2835;
                break;
        };
        return $2827;
    };
    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $2866 = _res$2;
                    return $2866;
                } else {
                    var $2867 = self.charCodeAt(0);
                    var $2868 = self.slice(1);
                    var $2869 = String$reverse$go$($2868, String$cons$($2867, _res$2));
                    return $2869;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $2870 = String$reverse$go$(_xs$1, String$nil);
        return $2870;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Kind$Parser$string$go$(_delim$1, _str$2, _idx$3, _code$4) {
        var Kind$Parser$string$go$ = (_delim$1, _str$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_delim$1, _str$2, _idx$3, _code$4]
        });
        var Kind$Parser$string$go = _delim$1 => _str$2 => _idx$3 => _code$4 => Kind$Parser$string$go$(_delim$1, _str$2, _idx$3, _code$4);
        var arg = [_delim$1, _str$2, _idx$3, _code$4];
        while (true) {
            let [_delim$1, _str$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var self = _code$4;
                if (self.length === 0) {
                    var $2871 = Parser$Reply$error$(_idx$3, _code$4, "Non-terminating string.");
                    return $2871;
                } else {
                    var $2872 = self.charCodeAt(0);
                    var $2873 = self.slice(1);
                    var self = ($2872 === _delim$1);
                    if (self) {
                        var $2875 = Parser$Reply$value$(Nat$succ$(_idx$3), $2873, String$reverse$(_str$2));
                        var $2874 = $2875;
                    } else {
                        var self = Kind$Parser$char$single(_idx$3)(_code$4);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2877 = self.idx;
                                var $2878 = self.code;
                                var $2879 = self.err;
                                var $2880 = Parser$Reply$error$($2877, $2878, $2879);
                                var $2876 = $2880;
                                break;
                            case 'Parser.Reply.value':
                                var $2881 = self.idx;
                                var $2882 = self.code;
                                var $2883 = self.val;
                                var $2884 = Kind$Parser$string$go$(_delim$1, String$cons$($2883, _str$2), $2881, $2882);
                                var $2876 = $2884;
                                break;
                        };
                        var $2874 = $2876;
                    };
                    return $2874;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$string$go = x0 => x1 => x2 => x3 => Kind$Parser$string$go$(x0, x1, x2, x3);

    function Kind$Parser$string$(_delim$1, _idx$2, _code$3) {
        var self = Kind$Parser$init$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2886 = self.idx;
                var $2887 = self.code;
                var $2888 = self.err;
                var $2889 = Parser$Reply$error$($2886, $2887, $2888);
                var $2885 = $2889;
                break;
            case 'Parser.Reply.value':
                var $2890 = self.idx;
                var $2891 = self.code;
                var $2892 = self.val;
                var self = Kind$Parser$text$(String$cons$(_delim$1, String$nil), $2890, $2891);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2894 = self.idx;
                        var $2895 = self.code;
                        var $2896 = self.err;
                        var $2897 = Parser$Reply$error$($2894, $2895, $2896);
                        var $2893 = $2897;
                        break;
                    case 'Parser.Reply.value':
                        var $2898 = self.idx;
                        var $2899 = self.code;
                        var self = Kind$Parser$string$go$(_delim$1, "", $2898, $2899);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2901 = self.idx;
                                var $2902 = self.code;
                                var $2903 = self.err;
                                var $2904 = Parser$Reply$error$($2901, $2902, $2903);
                                var $2900 = $2904;
                                break;
                            case 'Parser.Reply.value':
                                var $2905 = self.idx;
                                var $2906 = self.code;
                                var $2907 = self.val;
                                var self = Kind$Parser$stop$($2892, $2905, $2906);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2909 = self.idx;
                                        var $2910 = self.code;
                                        var $2911 = self.err;
                                        var $2912 = Parser$Reply$error$($2909, $2910, $2911);
                                        var $2908 = $2912;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2913 = self.idx;
                                        var $2914 = self.code;
                                        var $2915 = self.val;
                                        var $2916 = Parser$Reply$value$($2913, $2914, Kind$Term$ori$($2915, Kind$Term$str$($2907)));
                                        var $2908 = $2916;
                                        break;
                                };
                                var $2900 = $2908;
                                break;
                        };
                        var $2893 = $2900;
                        break;
                };
                var $2885 = $2893;
                break;
        };
        return $2885;
    };
    const Kind$Parser$string = x0 => x1 => x2 => Kind$Parser$string$(x0, x1, x2);

    function Kind$Parser$pair$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2918 = self.idx;
                var $2919 = self.code;
                var $2920 = self.err;
                var $2921 = Parser$Reply$error$($2918, $2919, $2920);
                var $2917 = $2921;
                break;
            case 'Parser.Reply.value':
                var $2922 = self.idx;
                var $2923 = self.code;
                var $2924 = self.val;
                var self = Kind$Parser$text$("{", $2922, $2923);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2926 = self.idx;
                        var $2927 = self.code;
                        var $2928 = self.err;
                        var $2929 = Parser$Reply$error$($2926, $2927, $2928);
                        var $2925 = $2929;
                        break;
                    case 'Parser.Reply.value':
                        var $2930 = self.idx;
                        var $2931 = self.code;
                        var self = Kind$Parser$term$($2930, $2931);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2933 = self.idx;
                                var $2934 = self.code;
                                var $2935 = self.err;
                                var $2936 = Parser$Reply$error$($2933, $2934, $2935);
                                var $2932 = $2936;
                                break;
                            case 'Parser.Reply.value':
                                var $2937 = self.idx;
                                var $2938 = self.code;
                                var $2939 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text(","), $2937, $2938);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2941 = self.idx;
                                        var $2942 = self.code;
                                        var $2943 = self.err;
                                        var $2944 = Parser$Reply$error$($2941, $2942, $2943);
                                        var $2940 = $2944;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2945 = self.idx;
                                        var $2946 = self.code;
                                        var self = Kind$Parser$term$($2945, $2946);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2948 = self.idx;
                                                var $2949 = self.code;
                                                var $2950 = self.err;
                                                var $2951 = Parser$Reply$error$($2948, $2949, $2950);
                                                var $2947 = $2951;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2952 = self.idx;
                                                var $2953 = self.code;
                                                var $2954 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(","), $2952, $2953);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2956 = self.idx;
                                                        var $2957 = self.code;
                                                        var $2958 = self.err;
                                                        var $2959 = Parser$Reply$error$($2956, $2957, $2958);
                                                        var $2955 = $2959;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2960 = self.idx;
                                                        var $2961 = self.code;
                                                        var self = Kind$Parser$text$("}", $2960, $2961);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2963 = self.idx;
                                                                var $2964 = self.code;
                                                                var $2965 = self.err;
                                                                var $2966 = Parser$Reply$error$($2963, $2964, $2965);
                                                                var $2962 = $2966;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2967 = self.idx;
                                                                var $2968 = self.code;
                                                                var self = Kind$Parser$stop$($2924, $2967, $2968);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2970 = self.idx;
                                                                        var $2971 = self.code;
                                                                        var $2972 = self.err;
                                                                        var $2973 = Parser$Reply$error$($2970, $2971, $2972);
                                                                        var $2969 = $2973;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2974 = self.idx;
                                                                        var $2975 = self.code;
                                                                        var $2976 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Pair.new");
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2939);
                                                                        var _term$31 = Kind$Term$app$(_term$30, $2954);
                                                                        var $2977 = Parser$Reply$value$($2974, $2975, Kind$Term$ori$($2976, _term$31));
                                                                        var $2969 = $2977;
                                                                        break;
                                                                };
                                                                var $2962 = $2969;
                                                                break;
                                                        };
                                                        var $2955 = $2962;
                                                        break;
                                                };
                                                var $2947 = $2955;
                                                break;
                                        };
                                        var $2940 = $2947;
                                        break;
                                };
                                var $2932 = $2940;
                                break;
                        };
                        var $2925 = $2932;
                        break;
                };
                var $2917 = $2925;
                break;
        };
        return $2917;
    };
    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);

    function Kind$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2979 = self.idx;
                var $2980 = self.code;
                var $2981 = self.err;
                var $2982 = Parser$Reply$error$($2979, $2980, $2981);
                var $2978 = $2982;
                break;
            case 'Parser.Reply.value':
                var $2983 = self.idx;
                var $2984 = self.code;
                var $2985 = self.val;
                var self = Kind$Parser$text$("[", $2983, $2984);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2987 = self.idx;
                        var $2988 = self.code;
                        var $2989 = self.err;
                        var $2990 = Parser$Reply$error$($2987, $2988, $2989);
                        var $2986 = $2990;
                        break;
                    case 'Parser.Reply.value':
                        var $2991 = self.idx;
                        var $2992 = self.code;
                        var self = Kind$Parser$name1$($2991, $2992);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2994 = self.idx;
                                var $2995 = self.code;
                                var $2996 = self.err;
                                var $2997 = Parser$Reply$error$($2994, $2995, $2996);
                                var $2993 = $2997;
                                break;
                            case 'Parser.Reply.value':
                                var $2998 = self.idx;
                                var $2999 = self.code;
                                var $3000 = self.val;
                                var self = Kind$Parser$text$(":", $2998, $2999);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3002 = self.idx;
                                        var $3003 = self.code;
                                        var $3004 = self.err;
                                        var $3005 = Parser$Reply$error$($3002, $3003, $3004);
                                        var $3001 = $3005;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3006 = self.idx;
                                        var $3007 = self.code;
                                        var self = Kind$Parser$term$($3006, $3007);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3009 = self.idx;
                                                var $3010 = self.code;
                                                var $3011 = self.err;
                                                var $3012 = Parser$Reply$error$($3009, $3010, $3011);
                                                var $3008 = $3012;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3013 = self.idx;
                                                var $3014 = self.code;
                                                var $3015 = self.val;
                                                var self = Kind$Parser$text$("]", $3013, $3014);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3017 = self.idx;
                                                        var $3018 = self.code;
                                                        var $3019 = self.err;
                                                        var $3020 = Parser$Reply$error$($3017, $3018, $3019);
                                                        var $3016 = $3020;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3021 = self.idx;
                                                        var $3022 = self.code;
                                                        var self = Kind$Parser$term$($3021, $3022);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3024 = self.idx;
                                                                var $3025 = self.code;
                                                                var $3026 = self.err;
                                                                var $3027 = Parser$Reply$error$($3024, $3025, $3026);
                                                                var $3023 = $3027;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3028 = self.idx;
                                                                var $3029 = self.code;
                                                                var $3030 = self.val;
                                                                var self = Kind$Parser$stop$($2985, $3028, $3029);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3032 = self.idx;
                                                                        var $3033 = self.code;
                                                                        var $3034 = self.err;
                                                                        var $3035 = Parser$Reply$error$($3032, $3033, $3034);
                                                                        var $3031 = $3035;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3036 = self.idx;
                                                                        var $3037 = self.code;
                                                                        var $3038 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Sigma");
                                                                        var _term$28 = Kind$Term$app$(_term$27, $3015);
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($3000, (_x$29 => {
                                                                            var $3040 = $3030;
                                                                            return $3040;
                                                                        })));
                                                                        var $3039 = Parser$Reply$value$($3036, $3037, Kind$Term$ori$($3038, _term$29));
                                                                        var $3031 = $3039;
                                                                        break;
                                                                };
                                                                var $3023 = $3031;
                                                                break;
                                                        };
                                                        var $3016 = $3023;
                                                        break;
                                                };
                                                var $3008 = $3016;
                                                break;
                                        };
                                        var $3001 = $3008;
                                        break;
                                };
                                var $2993 = $3001;
                                break;
                        };
                        var $2986 = $2993;
                        break;
                };
                var $2978 = $2986;
                break;
        };
        return $2978;
    };
    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);

    function Kind$Parser$some$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3042 = self.idx;
                var $3043 = self.code;
                var $3044 = self.err;
                var $3045 = Parser$Reply$error$($3042, $3043, $3044);
                var $3041 = $3045;
                break;
            case 'Parser.Reply.value':
                var $3046 = self.idx;
                var $3047 = self.code;
                var $3048 = self.val;
                var self = Kind$Parser$text$("some(", $3046, $3047);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3050 = self.idx;
                        var $3051 = self.code;
                        var $3052 = self.err;
                        var $3053 = Parser$Reply$error$($3050, $3051, $3052);
                        var $3049 = $3053;
                        break;
                    case 'Parser.Reply.value':
                        var $3054 = self.idx;
                        var $3055 = self.code;
                        var self = Kind$Parser$term$($3054, $3055);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3057 = self.idx;
                                var $3058 = self.code;
                                var $3059 = self.err;
                                var $3060 = Parser$Reply$error$($3057, $3058, $3059);
                                var $3056 = $3060;
                                break;
                            case 'Parser.Reply.value':
                                var $3061 = self.idx;
                                var $3062 = self.code;
                                var $3063 = self.val;
                                var self = Kind$Parser$text$(")", $3061, $3062);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3065 = self.idx;
                                        var $3066 = self.code;
                                        var $3067 = self.err;
                                        var $3068 = Parser$Reply$error$($3065, $3066, $3067);
                                        var $3064 = $3068;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3069 = self.idx;
                                        var $3070 = self.code;
                                        var self = Kind$Parser$stop$($3048, $3069, $3070);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3072 = self.idx;
                                                var $3073 = self.code;
                                                var $3074 = self.err;
                                                var $3075 = Parser$Reply$error$($3072, $3073, $3074);
                                                var $3071 = $3075;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3076 = self.idx;
                                                var $3077 = self.code;
                                                var $3078 = self.val;
                                                var _term$18 = Kind$Term$ref$("Maybe.some");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, $3063);
                                                var $3079 = Parser$Reply$value$($3076, $3077, Kind$Term$ori$($3078, _term$20));
                                                var $3071 = $3079;
                                                break;
                                        };
                                        var $3064 = $3071;
                                        break;
                                };
                                var $3056 = $3064;
                                break;
                        };
                        var $3049 = $3056;
                        break;
                };
                var $3041 = $3049;
                break;
        };
        return $3041;
    };
    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);

    function Kind$Parser$not$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3081 = self.idx;
                var $3082 = self.code;
                var $3083 = self.err;
                var $3084 = Parser$Reply$error$($3081, $3082, $3083);
                var $3080 = $3084;
                break;
            case 'Parser.Reply.value':
                var $3085 = self.idx;
                var $3086 = self.code;
                var $3087 = self.val;
                var self = Kind$Parser$text$("not(", $3085, $3086);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3089 = self.idx;
                        var $3090 = self.code;
                        var $3091 = self.err;
                        var $3092 = Parser$Reply$error$($3089, $3090, $3091);
                        var $3088 = $3092;
                        break;
                    case 'Parser.Reply.value':
                        var $3093 = self.idx;
                        var $3094 = self.code;
                        var self = Kind$Parser$term$($3093, $3094);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3096 = self.idx;
                                var $3097 = self.code;
                                var $3098 = self.err;
                                var $3099 = Parser$Reply$error$($3096, $3097, $3098);
                                var $3095 = $3099;
                                break;
                            case 'Parser.Reply.value':
                                var $3100 = self.idx;
                                var $3101 = self.code;
                                var $3102 = self.val;
                                var self = Kind$Parser$text$(")", $3100, $3101);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3104 = self.idx;
                                        var $3105 = self.code;
                                        var $3106 = self.err;
                                        var $3107 = Parser$Reply$error$($3104, $3105, $3106);
                                        var $3103 = $3107;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3108 = self.idx;
                                        var $3109 = self.code;
                                        var self = Kind$Parser$stop$($3087, $3108, $3109);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3111 = self.idx;
                                                var $3112 = self.code;
                                                var $3113 = self.err;
                                                var $3114 = Parser$Reply$error$($3111, $3112, $3113);
                                                var $3110 = $3114;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3115 = self.idx;
                                                var $3116 = self.code;
                                                var $3117 = self.val;
                                                var _term$18 = Kind$Term$ref$("Bool.not");
                                                var _term$19 = Kind$Term$app$(_term$18, $3102);
                                                var $3118 = Parser$Reply$value$($3115, $3116, Kind$Term$ori$($3117, _term$19));
                                                var $3110 = $3118;
                                                break;
                                        };
                                        var $3103 = $3110;
                                        break;
                                };
                                var $3095 = $3103;
                                break;
                        };
                        var $3088 = $3095;
                        break;
                };
                var $3080 = $3088;
                break;
        };
        return $3080;
    };
    const Kind$Parser$not = x0 => x1 => Kind$Parser$not$(x0, x1);

    function Kind$Parser$left$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3120 = self.idx;
                var $3121 = self.code;
                var $3122 = self.err;
                var $3123 = Parser$Reply$error$($3120, $3121, $3122);
                var $3119 = $3123;
                break;
            case 'Parser.Reply.value':
                var $3124 = self.idx;
                var $3125 = self.code;
                var $3126 = self.val;
                var self = Kind$Parser$text$("left(", $3124, $3125);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3128 = self.idx;
                        var $3129 = self.code;
                        var $3130 = self.err;
                        var $3131 = Parser$Reply$error$($3128, $3129, $3130);
                        var $3127 = $3131;
                        break;
                    case 'Parser.Reply.value':
                        var $3132 = self.idx;
                        var $3133 = self.code;
                        var self = Kind$Parser$term$($3132, $3133);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3135 = self.idx;
                                var $3136 = self.code;
                                var $3137 = self.err;
                                var $3138 = Parser$Reply$error$($3135, $3136, $3137);
                                var $3134 = $3138;
                                break;
                            case 'Parser.Reply.value':
                                var $3139 = self.idx;
                                var $3140 = self.code;
                                var $3141 = self.val;
                                var self = Kind$Parser$text$(")", $3139, $3140);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3143 = self.idx;
                                        var $3144 = self.code;
                                        var $3145 = self.err;
                                        var $3146 = Parser$Reply$error$($3143, $3144, $3145);
                                        var $3142 = $3146;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3147 = self.idx;
                                        var $3148 = self.code;
                                        var self = Kind$Parser$stop$($3126, $3147, $3148);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3150 = self.idx;
                                                var $3151 = self.code;
                                                var $3152 = self.err;
                                                var $3153 = Parser$Reply$error$($3150, $3151, $3152);
                                                var $3149 = $3153;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3154 = self.idx;
                                                var $3155 = self.code;
                                                var $3156 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.left");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3141);
                                                var $3157 = Parser$Reply$value$($3154, $3155, Kind$Term$ori$($3156, _term$21));
                                                var $3149 = $3157;
                                                break;
                                        };
                                        var $3142 = $3149;
                                        break;
                                };
                                var $3134 = $3142;
                                break;
                        };
                        var $3127 = $3134;
                        break;
                };
                var $3119 = $3127;
                break;
        };
        return $3119;
    };
    const Kind$Parser$left = x0 => x1 => Kind$Parser$left$(x0, x1);

    function Kind$Parser$right$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3159 = self.idx;
                var $3160 = self.code;
                var $3161 = self.err;
                var $3162 = Parser$Reply$error$($3159, $3160, $3161);
                var $3158 = $3162;
                break;
            case 'Parser.Reply.value':
                var $3163 = self.idx;
                var $3164 = self.code;
                var $3165 = self.val;
                var self = Kind$Parser$text$("right(", $3163, $3164);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3167 = self.idx;
                        var $3168 = self.code;
                        var $3169 = self.err;
                        var $3170 = Parser$Reply$error$($3167, $3168, $3169);
                        var $3166 = $3170;
                        break;
                    case 'Parser.Reply.value':
                        var $3171 = self.idx;
                        var $3172 = self.code;
                        var self = Kind$Parser$term$($3171, $3172);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3174 = self.idx;
                                var $3175 = self.code;
                                var $3176 = self.err;
                                var $3177 = Parser$Reply$error$($3174, $3175, $3176);
                                var $3173 = $3177;
                                break;
                            case 'Parser.Reply.value':
                                var $3178 = self.idx;
                                var $3179 = self.code;
                                var $3180 = self.val;
                                var self = Kind$Parser$text$(")", $3178, $3179);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3182 = self.idx;
                                        var $3183 = self.code;
                                        var $3184 = self.err;
                                        var $3185 = Parser$Reply$error$($3182, $3183, $3184);
                                        var $3181 = $3185;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3186 = self.idx;
                                        var $3187 = self.code;
                                        var self = Kind$Parser$stop$($3165, $3186, $3187);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3189 = self.idx;
                                                var $3190 = self.code;
                                                var $3191 = self.err;
                                                var $3192 = Parser$Reply$error$($3189, $3190, $3191);
                                                var $3188 = $3192;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3193 = self.idx;
                                                var $3194 = self.code;
                                                var $3195 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.right");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3180);
                                                var $3196 = Parser$Reply$value$($3193, $3194, Kind$Term$ori$($3195, _term$21));
                                                var $3188 = $3196;
                                                break;
                                        };
                                        var $3181 = $3188;
                                        break;
                                };
                                var $3173 = $3181;
                                break;
                        };
                        var $3166 = $3173;
                        break;
                };
                var $3158 = $3166;
                break;
        };
        return $3158;
    };
    const Kind$Parser$right = x0 => x1 => Kind$Parser$right$(x0, x1);

    function Kind$Parser$apply$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3198 = self.idx;
                var $3199 = self.code;
                var $3200 = self.err;
                var $3201 = Parser$Reply$error$($3198, $3199, $3200);
                var $3197 = $3201;
                break;
            case 'Parser.Reply.value':
                var $3202 = self.idx;
                var $3203 = self.code;
                var $3204 = self.val;
                var self = Kind$Parser$text$("apply(", $3202, $3203);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3206 = self.idx;
                        var $3207 = self.code;
                        var $3208 = self.err;
                        var $3209 = Parser$Reply$error$($3206, $3207, $3208);
                        var $3205 = $3209;
                        break;
                    case 'Parser.Reply.value':
                        var $3210 = self.idx;
                        var $3211 = self.code;
                        var self = Kind$Parser$term$($3210, $3211);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3213 = self.idx;
                                var $3214 = self.code;
                                var $3215 = self.err;
                                var $3216 = Parser$Reply$error$($3213, $3214, $3215);
                                var $3212 = $3216;
                                break;
                            case 'Parser.Reply.value':
                                var $3217 = self.idx;
                                var $3218 = self.code;
                                var $3219 = self.val;
                                var self = Kind$Parser$text$(",", $3217, $3218);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3221 = self.idx;
                                        var $3222 = self.code;
                                        var $3223 = self.err;
                                        var $3224 = Parser$Reply$error$($3221, $3222, $3223);
                                        var $3220 = $3224;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3225 = self.idx;
                                        var $3226 = self.code;
                                        var self = Kind$Parser$term$($3225, $3226);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3228 = self.idx;
                                                var $3229 = self.code;
                                                var $3230 = self.err;
                                                var $3231 = Parser$Reply$error$($3228, $3229, $3230);
                                                var $3227 = $3231;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3232 = self.idx;
                                                var $3233 = self.code;
                                                var $3234 = self.val;
                                                var self = Kind$Parser$text$(")", $3232, $3233);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3236 = self.idx;
                                                        var $3237 = self.code;
                                                        var $3238 = self.err;
                                                        var $3239 = Parser$Reply$error$($3236, $3237, $3238);
                                                        var $3235 = $3239;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3240 = self.idx;
                                                        var $3241 = self.code;
                                                        var self = Kind$Parser$stop$($3204, $3240, $3241);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3243 = self.idx;
                                                                var $3244 = self.code;
                                                                var $3245 = self.err;
                                                                var $3246 = Parser$Reply$error$($3243, $3244, $3245);
                                                                var $3242 = $3246;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3247 = self.idx;
                                                                var $3248 = self.code;
                                                                var $3249 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.apply");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3219);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3234);
                                                                var $3250 = Parser$Reply$value$($3247, $3248, Kind$Term$ori$($3249, _term$30));
                                                                var $3242 = $3250;
                                                                break;
                                                        };
                                                        var $3235 = $3242;
                                                        break;
                                                };
                                                var $3227 = $3235;
                                                break;
                                        };
                                        var $3220 = $3227;
                                        break;
                                };
                                var $3212 = $3220;
                                break;
                        };
                        var $3205 = $3212;
                        break;
                };
                var $3197 = $3205;
                break;
        };
        return $3197;
    };
    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);

    function Kind$Parser$chain$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3252 = self.idx;
                var $3253 = self.code;
                var $3254 = self.err;
                var $3255 = Parser$Reply$error$($3252, $3253, $3254);
                var $3251 = $3255;
                break;
            case 'Parser.Reply.value':
                var $3256 = self.idx;
                var $3257 = self.code;
                var $3258 = self.val;
                var self = Kind$Parser$text$("chain(", $3256, $3257);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3260 = self.idx;
                        var $3261 = self.code;
                        var $3262 = self.err;
                        var $3263 = Parser$Reply$error$($3260, $3261, $3262);
                        var $3259 = $3263;
                        break;
                    case 'Parser.Reply.value':
                        var $3264 = self.idx;
                        var $3265 = self.code;
                        var self = Kind$Parser$term$($3264, $3265);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3267 = self.idx;
                                var $3268 = self.code;
                                var $3269 = self.err;
                                var $3270 = Parser$Reply$error$($3267, $3268, $3269);
                                var $3266 = $3270;
                                break;
                            case 'Parser.Reply.value':
                                var $3271 = self.idx;
                                var $3272 = self.code;
                                var $3273 = self.val;
                                var self = Kind$Parser$text$(",", $3271, $3272);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3275 = self.idx;
                                        var $3276 = self.code;
                                        var $3277 = self.err;
                                        var $3278 = Parser$Reply$error$($3275, $3276, $3277);
                                        var $3274 = $3278;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3279 = self.idx;
                                        var $3280 = self.code;
                                        var self = Kind$Parser$term$($3279, $3280);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3282 = self.idx;
                                                var $3283 = self.code;
                                                var $3284 = self.err;
                                                var $3285 = Parser$Reply$error$($3282, $3283, $3284);
                                                var $3281 = $3285;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3286 = self.idx;
                                                var $3287 = self.code;
                                                var $3288 = self.val;
                                                var self = Kind$Parser$text$(")", $3286, $3287);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3290 = self.idx;
                                                        var $3291 = self.code;
                                                        var $3292 = self.err;
                                                        var $3293 = Parser$Reply$error$($3290, $3291, $3292);
                                                        var $3289 = $3293;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3294 = self.idx;
                                                        var $3295 = self.code;
                                                        var self = Kind$Parser$stop$($3258, $3294, $3295);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3297 = self.idx;
                                                                var $3298 = self.code;
                                                                var $3299 = self.err;
                                                                var $3300 = Parser$Reply$error$($3297, $3298, $3299);
                                                                var $3296 = $3300;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3301 = self.idx;
                                                                var $3302 = self.code;
                                                                var $3303 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.chain");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3273);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3288);
                                                                var $3304 = Parser$Reply$value$($3301, $3302, Kind$Term$ori$($3303, _term$30));
                                                                var $3296 = $3304;
                                                                break;
                                                        };
                                                        var $3289 = $3296;
                                                        break;
                                                };
                                                var $3281 = $3289;
                                                break;
                                        };
                                        var $3274 = $3281;
                                        break;
                                };
                                var $3266 = $3274;
                                break;
                        };
                        var $3259 = $3266;
                        break;
                };
                var $3251 = $3259;
                break;
        };
        return $3251;
    };
    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);

    function Kind$Parser$mirror$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3306 = self.idx;
                var $3307 = self.code;
                var $3308 = self.err;
                var $3309 = Parser$Reply$error$($3306, $3307, $3308);
                var $3305 = $3309;
                break;
            case 'Parser.Reply.value':
                var $3310 = self.idx;
                var $3311 = self.code;
                var $3312 = self.val;
                var self = Kind$Parser$text$("mirror(", $3310, $3311);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3314 = self.idx;
                        var $3315 = self.code;
                        var $3316 = self.err;
                        var $3317 = Parser$Reply$error$($3314, $3315, $3316);
                        var $3313 = $3317;
                        break;
                    case 'Parser.Reply.value':
                        var $3318 = self.idx;
                        var $3319 = self.code;
                        var self = Kind$Parser$term$($3318, $3319);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3321 = self.idx;
                                var $3322 = self.code;
                                var $3323 = self.err;
                                var $3324 = Parser$Reply$error$($3321, $3322, $3323);
                                var $3320 = $3324;
                                break;
                            case 'Parser.Reply.value':
                                var $3325 = self.idx;
                                var $3326 = self.code;
                                var $3327 = self.val;
                                var self = Kind$Parser$text$(")", $3325, $3326);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3329 = self.idx;
                                        var $3330 = self.code;
                                        var $3331 = self.err;
                                        var $3332 = Parser$Reply$error$($3329, $3330, $3331);
                                        var $3328 = $3332;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3333 = self.idx;
                                        var $3334 = self.code;
                                        var self = Kind$Parser$stop$($3312, $3333, $3334);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3336 = self.idx;
                                                var $3337 = self.code;
                                                var $3338 = self.err;
                                                var $3339 = Parser$Reply$error$($3336, $3337, $3338);
                                                var $3335 = $3339;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3340 = self.idx;
                                                var $3341 = self.code;
                                                var $3342 = self.val;
                                                var _term$18 = Kind$Term$ref$("Equal.mirror");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                var _term$22 = Kind$Term$app$(_term$21, $3327);
                                                var $3343 = Parser$Reply$value$($3340, $3341, Kind$Term$ori$($3342, _term$22));
                                                var $3335 = $3343;
                                                break;
                                        };
                                        var $3328 = $3335;
                                        break;
                                };
                                var $3320 = $3328;
                                break;
                        };
                        var $3313 = $3320;
                        break;
                };
                var $3305 = $3313;
                break;
        };
        return $3305;
    };
    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);

    function Kind$Name$read$(_str$1) {
        var $3344 = _str$1;
        return $3344;
    };
    const Kind$Name$read = x0 => Kind$Name$read$(x0);

    function Kind$Parser$list$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3346 = self.idx;
                var $3347 = self.code;
                var $3348 = self.err;
                var $3349 = Parser$Reply$error$($3346, $3347, $3348);
                var $3345 = $3349;
                break;
            case 'Parser.Reply.value':
                var $3350 = self.idx;
                var $3351 = self.code;
                var $3352 = self.val;
                var self = Kind$Parser$text$("[", $3350, $3351);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3354 = self.idx;
                        var $3355 = self.code;
                        var $3356 = self.err;
                        var $3357 = Parser$Reply$error$($3354, $3355, $3356);
                        var $3353 = $3357;
                        break;
                    case 'Parser.Reply.value':
                        var $3358 = self.idx;
                        var $3359 = self.code;
                        var self = Parser$until$(Kind$Parser$text("]"), Kind$Parser$item(Kind$Parser$term))($3358)($3359);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3361 = self.idx;
                                var $3362 = self.code;
                                var $3363 = self.err;
                                var $3364 = Parser$Reply$error$($3361, $3362, $3363);
                                var $3360 = $3364;
                                break;
                            case 'Parser.Reply.value':
                                var $3365 = self.idx;
                                var $3366 = self.code;
                                var $3367 = self.val;
                                var self = Kind$Parser$stop$($3352, $3365, $3366);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3369 = self.idx;
                                        var $3370 = self.code;
                                        var $3371 = self.err;
                                        var $3372 = Parser$Reply$error$($3369, $3370, $3371);
                                        var $3368 = $3372;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3373 = self.idx;
                                        var $3374 = self.code;
                                        var $3375 = self.val;
                                        var $3376 = Parser$Reply$value$($3373, $3374, List$fold$($3367, Kind$Term$ori$($3375, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")), Kind$Term$hol$(Bits$e))), (_x$15 => _xs$16 => {
                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));
                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);
                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);
                                            var $3377 = Kind$Term$ori$($3375, _term$20);
                                            return $3377;
                                        })));
                                        var $3368 = $3376;
                                        break;
                                };
                                var $3360 = $3368;
                                break;
                        };
                        var $3353 = $3360;
                        break;
                };
                var $3345 = $3353;
                break;
        };
        return $3345;
    };
    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);

    function Kind$Parser$map$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3379 = self.idx;
                var $3380 = self.code;
                var $3381 = self.err;
                var $3382 = Parser$Reply$error$($3379, $3380, $3381);
                var $3378 = $3382;
                break;
            case 'Parser.Reply.value':
                var $3383 = self.idx;
                var $3384 = self.code;
                var $3385 = self.val;
                var self = Kind$Parser$text$("{", $3383, $3384);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3387 = self.idx;
                        var $3388 = self.code;
                        var $3389 = self.err;
                        var $3390 = Parser$Reply$error$($3387, $3388, $3389);
                        var $3386 = $3390;
                        break;
                    case 'Parser.Reply.value':
                        var $3391 = self.idx;
                        var $3392 = self.code;
                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item((_idx$9 => _code$10 => {
                            var self = Kind$Parser$term$(_idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3395 = self.idx;
                                    var $3396 = self.code;
                                    var $3397 = self.err;
                                    var $3398 = Parser$Reply$error$($3395, $3396, $3397);
                                    var $3394 = $3398;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3399 = self.idx;
                                    var $3400 = self.code;
                                    var $3401 = self.val;
                                    var self = Kind$Parser$text$(":", $3399, $3400);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3403 = self.idx;
                                            var $3404 = self.code;
                                            var $3405 = self.err;
                                            var $3406 = Parser$Reply$error$($3403, $3404, $3405);
                                            var $3402 = $3406;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3407 = self.idx;
                                            var $3408 = self.code;
                                            var self = Kind$Parser$term$($3407, $3408);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3410 = self.idx;
                                                    var $3411 = self.code;
                                                    var $3412 = self.err;
                                                    var $3413 = Parser$Reply$error$($3410, $3411, $3412);
                                                    var $3409 = $3413;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3414 = self.idx;
                                                    var $3415 = self.code;
                                                    var $3416 = self.val;
                                                    var $3417 = Parser$Reply$value$($3414, $3415, Pair$new$($3401, $3416));
                                                    var $3409 = $3417;
                                                    break;
                                            };
                                            var $3402 = $3409;
                                            break;
                                    };
                                    var $3394 = $3402;
                                    break;
                            };
                            return $3394;
                        })))($3391)($3392);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3418 = self.idx;
                                var $3419 = self.code;
                                var $3420 = self.err;
                                var $3421 = Parser$Reply$error$($3418, $3419, $3420);
                                var $3393 = $3421;
                                break;
                            case 'Parser.Reply.value':
                                var $3422 = self.idx;
                                var $3423 = self.code;
                                var $3424 = self.val;
                                var self = Kind$Parser$stop$($3385, $3422, $3423);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3426 = self.idx;
                                        var $3427 = self.code;
                                        var $3428 = self.err;
                                        var $3429 = Parser$Reply$error$($3426, $3427, $3428);
                                        var $3425 = $3429;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3430 = self.idx;
                                        var $3431 = self.code;
                                        var $3432 = self.val;
                                        var _list$15 = List$fold$($3424, Kind$Term$ori$($3432, Kind$Term$app$(Kind$Term$ref$("List.nil"), Kind$Term$hol$(Bits$e))), (_kv$15 => _xs$16 => {
                                            var self = _kv$15;
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $3435 = self.fst;
                                                    var $3436 = self.snd;
                                                    var _pair$19 = Kind$Term$ref$("Pair.new");
                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));
                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));
                                                    var _pair$22 = Kind$Term$app$(_pair$21, $3435);
                                                    var _pair$23 = Kind$Term$app$(_pair$22, $3436);
                                                    var _term$24 = Kind$Term$ref$("List.cons");
                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);
                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);
                                                    var $3437 = Kind$Term$ori$($3432, _term$27);
                                                    var $3434 = $3437;
                                                    break;
                                            };
                                            return $3434;
                                        }));
                                        var _term$16 = Kind$Term$ref$("Map.from_list");
                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));
                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);
                                        var $3433 = Parser$Reply$value$($3430, $3431, Kind$Term$ori$($3432, _term$18));
                                        var $3425 = $3433;
                                        break;
                                };
                                var $3393 = $3425;
                                break;
                        };
                        var $3386 = $3393;
                        break;
                };
                var $3378 = $3386;
                break;
        };
        return $3378;
    };
    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);

    function Kind$Parser$log$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3439 = self.idx;
                var $3440 = self.code;
                var $3441 = self.err;
                var $3442 = Parser$Reply$error$($3439, $3440, $3441);
                var $3438 = $3442;
                break;
            case 'Parser.Reply.value':
                var $3443 = self.idx;
                var $3444 = self.code;
                var $3445 = self.val;
                var self = Kind$Parser$text$("log(", $3443, $3444);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3447 = self.idx;
                        var $3448 = self.code;
                        var $3449 = self.err;
                        var $3450 = Parser$Reply$error$($3447, $3448, $3449);
                        var $3446 = $3450;
                        break;
                    case 'Parser.Reply.value':
                        var $3451 = self.idx;
                        var $3452 = self.code;
                        var self = Parser$until$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term))($3451)($3452);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3454 = self.idx;
                                var $3455 = self.code;
                                var $3456 = self.err;
                                var $3457 = Parser$Reply$error$($3454, $3455, $3456);
                                var $3453 = $3457;
                                break;
                            case 'Parser.Reply.value':
                                var $3458 = self.idx;
                                var $3459 = self.code;
                                var $3460 = self.val;
                                var self = Kind$Parser$term$($3458, $3459);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3462 = self.idx;
                                        var $3463 = self.code;
                                        var $3464 = self.err;
                                        var $3465 = Parser$Reply$error$($3462, $3463, $3464);
                                        var $3461 = $3465;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3466 = self.idx;
                                        var $3467 = self.code;
                                        var $3468 = self.val;
                                        var _term$15 = Kind$Term$ref$("Debug.log");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($3460, Kind$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Kind$Term$ref$("String.concat");
                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);
                                            var $3470 = _arg$21;
                                            return $3470;
                                        }));
                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);
                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$("", (_x$19 => {
                                            var $3471 = $3468;
                                            return $3471;
                                        })));
                                        var self = Kind$Parser$stop$($3445, $3466, $3467);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3472 = self.idx;
                                                var $3473 = self.code;
                                                var $3474 = self.err;
                                                var $3475 = Parser$Reply$error$($3472, $3473, $3474);
                                                var $3469 = $3475;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3476 = self.idx;
                                                var $3477 = self.code;
                                                var $3478 = self.val;
                                                var $3479 = Parser$Reply$value$($3476, $3477, Kind$Term$ori$($3478, _term$19));
                                                var $3469 = $3479;
                                                break;
                                        };
                                        var $3461 = $3469;
                                        break;
                                };
                                var $3453 = $3461;
                                break;
                        };
                        var $3446 = $3453;
                        break;
                };
                var $3438 = $3446;
                break;
        };
        return $3438;
    };
    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);

    function Kind$Parser$do$statements$(_monad_name$1) {
        var $3480 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3482 = self.idx;
                    var $3483 = self.code;
                    var $3484 = self.err;
                    var $3485 = Parser$Reply$error$($3482, $3483, $3484);
                    var $3481 = $3485;
                    break;
                case 'Parser.Reply.value':
                    var $3486 = self.idx;
                    var $3487 = self.code;
                    var $3488 = self.val;
                    var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "), List$cons$(Kind$Parser$text("get "), List$nil)))($3486)($3487);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3490 = self.idx;
                            var $3491 = self.code;
                            var $3492 = self.err;
                            var $3493 = Parser$Reply$error$($3490, $3491, $3492);
                            var $3489 = $3493;
                            break;
                        case 'Parser.Reply.value':
                            var $3494 = self.idx;
                            var $3495 = self.code;
                            var self = Kind$Parser$name1$($3494, $3495);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3497 = self.idx;
                                    var $3498 = self.code;
                                    var $3499 = self.err;
                                    var $3500 = Parser$Reply$error$($3497, $3498, $3499);
                                    var $3496 = $3500;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3501 = self.idx;
                                    var $3502 = self.code;
                                    var $3503 = self.val;
                                    var self = Kind$Parser$text$("=", $3501, $3502);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3505 = self.idx;
                                            var $3506 = self.code;
                                            var $3507 = self.err;
                                            var $3508 = Parser$Reply$error$($3505, $3506, $3507);
                                            var $3504 = $3508;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3509 = self.idx;
                                            var $3510 = self.code;
                                            var self = Kind$Parser$term$($3509, $3510);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3512 = self.idx;
                                                    var $3513 = self.code;
                                                    var $3514 = self.err;
                                                    var $3515 = Parser$Reply$error$($3512, $3513, $3514);
                                                    var $3511 = $3515;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3516 = self.idx;
                                                    var $3517 = self.code;
                                                    var $3518 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3516, $3517);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3520 = self.idx;
                                                            var $3521 = self.code;
                                                            var $3522 = self.err;
                                                            var $3523 = Parser$Reply$error$($3520, $3521, $3522);
                                                            var $3519 = $3523;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3524 = self.idx;
                                                            var $3525 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3524)($3525);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3527 = self.idx;
                                                                    var $3528 = self.code;
                                                                    var $3529 = self.err;
                                                                    var $3530 = Parser$Reply$error$($3527, $3528, $3529);
                                                                    var $3526 = $3530;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3531 = self.idx;
                                                                    var $3532 = self.code;
                                                                    var $3533 = self.val;
                                                                    var self = Kind$Parser$stop$($3488, $3531, $3532);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3535 = self.idx;
                                                                            var $3536 = self.code;
                                                                            var $3537 = self.err;
                                                                            var $3538 = Parser$Reply$error$($3535, $3536, $3537);
                                                                            var $3534 = $3538;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3539 = self.idx;
                                                                            var $3540 = self.code;
                                                                            var $3541 = self.val;
                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                            var _term$32 = Kind$Term$app$(_term$31, $3518);
                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($3503, (_x$33 => {
                                                                                var $3543 = $3533;
                                                                                return $3543;
                                                                            })));
                                                                            var $3542 = Parser$Reply$value$($3539, $3540, Kind$Term$ori$($3541, _term$33));
                                                                            var $3534 = $3542;
                                                                            break;
                                                                    };
                                                                    var $3526 = $3534;
                                                                    break;
                                                            };
                                                            var $3519 = $3526;
                                                            break;
                                                    };
                                                    var $3511 = $3519;
                                                    break;
                                            };
                                            var $3504 = $3511;
                                            break;
                                    };
                                    var $3496 = $3504;
                                    break;
                            };
                            var $3489 = $3496;
                            break;
                    };
                    var $3481 = $3489;
                    break;
            };
            return $3481;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3545 = self.idx;
                    var $3546 = self.code;
                    var $3547 = self.err;
                    var $3548 = Parser$Reply$error$($3545, $3546, $3547);
                    var $3544 = $3548;
                    break;
                case 'Parser.Reply.value':
                    var $3549 = self.idx;
                    var $3550 = self.code;
                    var $3551 = self.val;
                    var self = Kind$Parser$text$("let ", $3549, $3550);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3553 = self.idx;
                            var $3554 = self.code;
                            var $3555 = self.err;
                            var $3556 = Parser$Reply$error$($3553, $3554, $3555);
                            var $3552 = $3556;
                            break;
                        case 'Parser.Reply.value':
                            var $3557 = self.idx;
                            var $3558 = self.code;
                            var self = Kind$Parser$name1$($3557, $3558);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3560 = self.idx;
                                    var $3561 = self.code;
                                    var $3562 = self.err;
                                    var $3563 = Parser$Reply$error$($3560, $3561, $3562);
                                    var $3559 = $3563;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3564 = self.idx;
                                    var $3565 = self.code;
                                    var $3566 = self.val;
                                    var self = Kind$Parser$text$("=", $3564, $3565);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3568 = self.idx;
                                            var $3569 = self.code;
                                            var $3570 = self.err;
                                            var $3571 = Parser$Reply$error$($3568, $3569, $3570);
                                            var $3567 = $3571;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3572 = self.idx;
                                            var $3573 = self.code;
                                            var self = Kind$Parser$term$($3572, $3573);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3575 = self.idx;
                                                    var $3576 = self.code;
                                                    var $3577 = self.err;
                                                    var $3578 = Parser$Reply$error$($3575, $3576, $3577);
                                                    var $3574 = $3578;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3579 = self.idx;
                                                    var $3580 = self.code;
                                                    var $3581 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3579, $3580);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3583 = self.idx;
                                                            var $3584 = self.code;
                                                            var $3585 = self.err;
                                                            var $3586 = Parser$Reply$error$($3583, $3584, $3585);
                                                            var $3582 = $3586;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3587 = self.idx;
                                                            var $3588 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3587)($3588);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3590 = self.idx;
                                                                    var $3591 = self.code;
                                                                    var $3592 = self.err;
                                                                    var $3593 = Parser$Reply$error$($3590, $3591, $3592);
                                                                    var $3589 = $3593;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3594 = self.idx;
                                                                    var $3595 = self.code;
                                                                    var $3596 = self.val;
                                                                    var self = Kind$Parser$stop$($3551, $3594, $3595);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3598 = self.idx;
                                                                            var $3599 = self.code;
                                                                            var $3600 = self.err;
                                                                            var $3601 = Parser$Reply$error$($3598, $3599, $3600);
                                                                            var $3597 = $3601;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3602 = self.idx;
                                                                            var $3603 = self.code;
                                                                            var $3604 = self.val;
                                                                            var $3605 = Parser$Reply$value$($3602, $3603, Kind$Term$ori$($3604, Kind$Term$let$($3566, $3581, (_x$28 => {
                                                                                var $3606 = $3596;
                                                                                return $3606;
                                                                            }))));
                                                                            var $3597 = $3605;
                                                                            break;
                                                                    };
                                                                    var $3589 = $3597;
                                                                    break;
                                                            };
                                                            var $3582 = $3589;
                                                            break;
                                                    };
                                                    var $3574 = $3582;
                                                    break;
                                            };
                                            var $3567 = $3574;
                                            break;
                                    };
                                    var $3559 = $3567;
                                    break;
                            };
                            var $3552 = $3559;
                            break;
                    };
                    var $3544 = $3552;
                    break;
            };
            return $3544;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3608 = self.idx;
                    var $3609 = self.code;
                    var $3610 = self.err;
                    var $3611 = Parser$Reply$error$($3608, $3609, $3610);
                    var $3607 = $3611;
                    break;
                case 'Parser.Reply.value':
                    var $3612 = self.idx;
                    var $3613 = self.code;
                    var $3614 = self.val;
                    var self = Kind$Parser$text$("return ", $3612, $3613);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3616 = self.idx;
                            var $3617 = self.code;
                            var $3618 = self.err;
                            var $3619 = Parser$Reply$error$($3616, $3617, $3618);
                            var $3615 = $3619;
                            break;
                        case 'Parser.Reply.value':
                            var $3620 = self.idx;
                            var $3621 = self.code;
                            var self = Kind$Parser$term$($3620, $3621);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3623 = self.idx;
                                    var $3624 = self.code;
                                    var $3625 = self.err;
                                    var $3626 = Parser$Reply$error$($3623, $3624, $3625);
                                    var $3622 = $3626;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3627 = self.idx;
                                    var $3628 = self.code;
                                    var $3629 = self.val;
                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3627, $3628);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3631 = self.idx;
                                            var $3632 = self.code;
                                            var $3633 = self.err;
                                            var $3634 = Parser$Reply$error$($3631, $3632, $3633);
                                            var $3630 = $3634;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3635 = self.idx;
                                            var $3636 = self.code;
                                            var self = Kind$Parser$stop$($3614, $3635, $3636);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3638 = self.idx;
                                                    var $3639 = self.code;
                                                    var $3640 = self.err;
                                                    var $3641 = Parser$Reply$error$($3638, $3639, $3640);
                                                    var $3637 = $3641;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3642 = self.idx;
                                                    var $3643 = self.code;
                                                    var $3644 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, $3629);
                                                    var $3645 = Parser$Reply$value$($3642, $3643, Kind$Term$ori$($3644, _term$22));
                                                    var $3637 = $3645;
                                                    break;
                                            };
                                            var $3630 = $3637;
                                            break;
                                    };
                                    var $3622 = $3630;
                                    break;
                            };
                            var $3615 = $3622;
                            break;
                    };
                    var $3607 = $3615;
                    break;
            };
            return $3607;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3647 = self.idx;
                    var $3648 = self.code;
                    var $3649 = self.err;
                    var $3650 = Parser$Reply$error$($3647, $3648, $3649);
                    var $3646 = $3650;
                    break;
                case 'Parser.Reply.value':
                    var $3651 = self.idx;
                    var $3652 = self.code;
                    var $3653 = self.val;
                    var self = Kind$Parser$term$($3651, $3652);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3655 = self.idx;
                            var $3656 = self.code;
                            var $3657 = self.err;
                            var $3658 = Parser$Reply$error$($3655, $3656, $3657);
                            var $3654 = $3658;
                            break;
                        case 'Parser.Reply.value':
                            var $3659 = self.idx;
                            var $3660 = self.code;
                            var $3661 = self.val;
                            var self = Parser$maybe$(Kind$Parser$text(";"), $3659, $3660);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3663 = self.idx;
                                    var $3664 = self.code;
                                    var $3665 = self.err;
                                    var $3666 = Parser$Reply$error$($3663, $3664, $3665);
                                    var $3662 = $3666;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3667 = self.idx;
                                    var $3668 = self.code;
                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3667)($3668);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3670 = self.idx;
                                            var $3671 = self.code;
                                            var $3672 = self.err;
                                            var $3673 = Parser$Reply$error$($3670, $3671, $3672);
                                            var $3669 = $3673;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3674 = self.idx;
                                            var $3675 = self.code;
                                            var $3676 = self.val;
                                            var self = Kind$Parser$stop$($3653, $3674, $3675);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3678 = self.idx;
                                                    var $3679 = self.code;
                                                    var $3680 = self.err;
                                                    var $3681 = Parser$Reply$error$($3678, $3679, $3680);
                                                    var $3677 = $3681;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3682 = self.idx;
                                                    var $3683 = self.code;
                                                    var $3684 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));
                                                    var _term$23 = Kind$Term$app$(_term$22, $3661);
                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$("", (_x$24 => {
                                                        var $3686 = $3676;
                                                        return $3686;
                                                    })));
                                                    var $3685 = Parser$Reply$value$($3682, $3683, Kind$Term$ori$($3684, _term$24));
                                                    var $3677 = $3685;
                                                    break;
                                            };
                                            var $3669 = $3677;
                                            break;
                                    };
                                    var $3662 = $3669;
                                    break;
                            };
                            var $3654 = $3662;
                            break;
                    };
                    var $3646 = $3654;
                    break;
            };
            return $3646;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3688 = self.idx;
                    var $3689 = self.code;
                    var $3690 = self.err;
                    var $3691 = Parser$Reply$error$($3688, $3689, $3690);
                    var $3687 = $3691;
                    break;
                case 'Parser.Reply.value':
                    var $3692 = self.idx;
                    var $3693 = self.code;
                    var $3694 = self.val;
                    var self = Parser$maybe$(Kind$Parser$text(";"), $3692, $3693);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3696 = self.idx;
                            var $3697 = self.code;
                            var $3698 = self.err;
                            var $3699 = Parser$Reply$error$($3696, $3697, $3698);
                            var $3695 = $3699;
                            break;
                        case 'Parser.Reply.value':
                            var $3700 = self.idx;
                            var $3701 = self.code;
                            var $3702 = Parser$Reply$value$($3700, $3701, $3694);
                            var $3695 = $3702;
                            break;
                    };
                    var $3687 = $3695;
                    break;
            };
            return $3687;
        }), List$nil))))));
        return $3480;
    };
    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);

    function Kind$Parser$do$(_idx$1, _code$2) {
        var self = Parser$maybe$(Kind$Parser$text("do "), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3704 = self.idx;
                var $3705 = self.code;
                var $3706 = self.err;
                var $3707 = Parser$Reply$error$($3704, $3705, $3706);
                var $3703 = $3707;
                break;
            case 'Parser.Reply.value':
                var $3708 = self.idx;
                var $3709 = self.code;
                var self = Kind$Parser$name1$($3708, $3709);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3711 = self.idx;
                        var $3712 = self.code;
                        var $3713 = self.err;
                        var $3714 = Parser$Reply$error$($3711, $3712, $3713);
                        var $3710 = $3714;
                        break;
                    case 'Parser.Reply.value':
                        var $3715 = self.idx;
                        var $3716 = self.code;
                        var $3717 = self.val;
                        var self = Parser$text$(" {", $3715, $3716);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3719 = self.idx;
                                var $3720 = self.code;
                                var $3721 = self.err;
                                var $3722 = Parser$Reply$error$($3719, $3720, $3721);
                                var $3718 = $3722;
                                break;
                            case 'Parser.Reply.value':
                                var $3723 = self.idx;
                                var $3724 = self.code;
                                var self = Kind$Parser$do$statements$($3717)($3723)($3724);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3726 = self.idx;
                                        var $3727 = self.code;
                                        var $3728 = self.err;
                                        var $3729 = Parser$Reply$error$($3726, $3727, $3728);
                                        var $3725 = $3729;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3730 = self.idx;
                                        var $3731 = self.code;
                                        var $3732 = self.val;
                                        var self = Kind$Parser$text$("}", $3730, $3731);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3734 = self.idx;
                                                var $3735 = self.code;
                                                var $3736 = self.err;
                                                var $3737 = Parser$Reply$error$($3734, $3735, $3736);
                                                var $3733 = $3737;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3738 = self.idx;
                                                var $3739 = self.code;
                                                var $3740 = Parser$Reply$value$($3738, $3739, $3732);
                                                var $3733 = $3740;
                                                break;
                                        };
                                        var $3725 = $3733;
                                        break;
                                };
                                var $3718 = $3725;
                                break;
                        };
                        var $3710 = $3718;
                        break;
                };
                var $3703 = $3710;
                break;
        };
        return $3703;
    };
    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);

    function Parser$try$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3742 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);
                var $3741 = $3742;
                break;
            case 'Parser.Reply.value':
                var $3743 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);
                var $3741 = $3743;
                break;
        };
        return $3741;
    };
    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3744 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3744;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {
        var self = Parser$try$(_test$2, _idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3746 = self.idx;
                var $3747 = self.code;
                var $3748 = self.err;
                var $3749 = Parser$Reply$error$($3746, $3747, $3748);
                var $3745 = $3749;
                break;
            case 'Parser.Reply.value':
                var $3750 = self.idx;
                var $3751 = self.code;
                var $3752 = self.val;
                var self = $3752;
                if (self) {
                    var $3754 = Parser$fail("Avoided.");
                    var $3753 = $3754;
                } else {
                    var $3755 = _parse$3;
                    var $3753 = $3755;
                };
                var $3753 = $3753($3750)($3751);
                var $3745 = $3753;
                break;
        };
        return $3745;
    };
    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);

    function Maybe$default$(_m$2, _a$3) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $3757 = self.value;
                var $3758 = $3757;
                var $3756 = $3758;
                break;
            case 'Maybe.none':
                var $3759 = _a$3;
                var $3756 = $3759;
                break;
        };
        return $3756;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Kind$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $3761 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));
            var $3760 = $3761;
        } else {
            var $3762 = (self - 1n);
            var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));
            var _argm$4 = Kind$Term$nat$($3762);
            var $3763 = Kind$Term$app$(_func$3, _argm$4);
            var $3760 = $3763;
        };
        return $3760;
    };
    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Kind$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3765 = self.slice(0, -1);
                var $3766 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")), Kind$Term$unroll_chr$bits$($3765));
                var $3764 = $3766;
                break;
            case 'i':
                var $3767 = self.slice(0, -1);
                var $3768 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")), Kind$Term$unroll_chr$bits$($3767));
                var $3764 = $3768;
                break;
            case 'e':
                var $3769 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));
                var $3764 = $3769;
                break;
        };
        return $3764;
    };
    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);

    function Kind$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));
        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));
        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")), _term$5);
        var $3770 = _term$6;
        return $3770;
    };
    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);

    function Kind$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $3772 = Kind$Term$ref$(Kind$Name$read$("String.nil"));
            var $3771 = $3772;
        } else {
            var $3773 = self.charCodeAt(0);
            var $3774 = self.slice(1);
            var _char$4 = Kind$Term$chr$($3773);
            var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));
            var _term$6 = Kind$Term$app$(_term$5, _char$4);
            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($3774));
            var $3775 = _term$7;
            var $3771 = $3775;
        };
        return $3771;
    };
    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);

    function Kind$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $3777 = self.name;
                var self = Kind$Map$get$($3777, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $3779 = self.value;
                        var self = $3779;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $3781 = self.term;
                                var $3782 = Kind$Term$reduce$($3781, _defs$2);
                                var $3780 = $3782;
                                break;
                        };
                        var $3778 = $3780;
                        break;
                    case 'Maybe.none':
                        var $3783 = Kind$Term$ref$($3777);
                        var $3778 = $3783;
                        break;
                };
                var $3776 = $3778;
                break;
            case 'Kind.Term.app':
                var $3784 = self.func;
                var $3785 = self.argm;
                var _func$5 = Kind$Term$reduce$($3784, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $3787 = self.body;
                        var $3788 = Kind$Term$reduce$($3787($3785), _defs$2);
                        var $3786 = $3788;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $3789 = _term$1;
                        var $3786 = $3789;
                        break;
                };
                var $3776 = $3786;
                break;
            case 'Kind.Term.let':
                var $3790 = self.expr;
                var $3791 = self.body;
                var $3792 = Kind$Term$reduce$($3791($3790), _defs$2);
                var $3776 = $3792;
                break;
            case 'Kind.Term.def':
                var $3793 = self.expr;
                var $3794 = self.body;
                var $3795 = Kind$Term$reduce$($3794($3793), _defs$2);
                var $3776 = $3795;
                break;
            case 'Kind.Term.ann':
                var $3796 = self.term;
                var $3797 = Kind$Term$reduce$($3796, _defs$2);
                var $3776 = $3797;
                break;
            case 'Kind.Term.nat':
                var $3798 = self.natx;
                var $3799 = Kind$Term$reduce$(Kind$Term$unroll_nat$($3798), _defs$2);
                var $3776 = $3799;
                break;
            case 'Kind.Term.chr':
                var $3800 = self.chrx;
                var $3801 = Kind$Term$reduce$(Kind$Term$unroll_chr$($3800), _defs$2);
                var $3776 = $3801;
                break;
            case 'Kind.Term.str':
                var $3802 = self.strx;
                var $3803 = Kind$Term$reduce$(Kind$Term$unroll_str$($3802), _defs$2);
                var $3776 = $3803;
                break;
            case 'Kind.Term.ori':
                var $3804 = self.expr;
                var $3805 = Kind$Term$reduce$($3804, _defs$2);
                var $3776 = $3805;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.cse':
                var $3806 = _term$1;
                var $3776 = $3806;
                break;
        };
        return $3776;
    };
    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);

    function Kind$Term$extract_name$(_term$1) {
        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
                var $3808 = self.name;
                var $3809 = $3808;
                var $3807 = $3809;
                break;
            case 'Kind.Term.ref':
                var $3810 = self.name;
                var $3811 = $3810;
                var $3807 = $3811;
                break;
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $3812 = "self";
                var $3807 = $3812;
                break;
        };
        return $3807;
    };
    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);

    function Kind$Ann$new$(_name$1, _term$2, _type$3) {
        var $3813 = ({
            _: 'Kind.Ann.new',
            'name': _name$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3813;
    };
    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);
    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {
        var self = Kind$Parser$text$("with ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3815 = self.idx;
                var $3816 = self.code;
                var $3817 = self.err;
                var $3818 = Parser$Reply$error$($3815, $3816, $3817);
                var $3814 = $3818;
                break;
            case 'Parser.Reply.value':
                var $3819 = self.idx;
                var $3820 = self.code;
                var $3821 = Parser$many$((_idx$6 => _code$7 => {
                    var self = Kind$Parser$name1$(_idx$6, _code$7);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3823 = self.idx;
                            var $3824 = self.code;
                            var $3825 = self.err;
                            var $3826 = Parser$Reply$error$($3823, $3824, $3825);
                            var $3822 = $3826;
                            break;
                        case 'Parser.Reply.value':
                            var $3827 = self.idx;
                            var $3828 = self.code;
                            var $3829 = self.val;
                            var self = Parser$maybe$((_idx$11 => _code$12 => {
                                var self = Kind$Parser$text$(":", _idx$11, _code$12);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3832 = self.idx;
                                        var $3833 = self.code;
                                        var $3834 = self.err;
                                        var $3835 = Parser$Reply$error$($3832, $3833, $3834);
                                        var $3831 = $3835;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3836 = self.idx;
                                        var $3837 = self.code;
                                        var self = Kind$Parser$term$($3836, $3837);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3839 = self.idx;
                                                var $3840 = self.code;
                                                var $3841 = self.err;
                                                var $3842 = Parser$Reply$error$($3839, $3840, $3841);
                                                var $3838 = $3842;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3843 = self.idx;
                                                var $3844 = self.code;
                                                var $3845 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3843, $3844);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3847 = self.idx;
                                                        var $3848 = self.code;
                                                        var $3849 = self.err;
                                                        var $3850 = Parser$Reply$error$($3847, $3848, $3849);
                                                        var $3846 = $3850;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3851 = self.idx;
                                                        var $3852 = self.code;
                                                        var $3853 = Parser$Reply$value$($3851, $3852, $3845);
                                                        var $3846 = $3853;
                                                        break;
                                                };
                                                var $3838 = $3846;
                                                break;
                                        };
                                        var $3831 = $3838;
                                        break;
                                };
                                return $3831;
                            }), $3827, $3828);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3854 = self.idx;
                                    var $3855 = self.code;
                                    var $3856 = self.err;
                                    var $3857 = Parser$Reply$error$($3854, $3855, $3856);
                                    var $3830 = $3857;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3858 = self.idx;
                                    var $3859 = self.code;
                                    var $3860 = self.val;
                                    var $3861 = Parser$Reply$value$($3858, $3859, Kind$Ann$new$($3829, Kind$Term$ref$($3829), $3860));
                                    var $3830 = $3861;
                                    break;
                            };
                            var $3822 = $3830;
                            break;
                    };
                    return $3822;
                }))($3819)($3820);
                var $3814 = $3821;
                break;
        };
        return $3814;
    }), List$cons$((_idx$1 => _code$2 => {
        var $3862 = Parser$Reply$value$(_idx$1, _code$2, List$nil);
        return $3862;
    }), List$nil)));

    function Kind$Parser$case$case$(_idx$1, _code$2) {
        var self = Parser$until$(Kind$Parser$text(":"), Kind$Parser$name1)(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3864 = self.idx;
                var $3865 = self.code;
                var $3866 = self.err;
                var $3867 = Parser$Reply$error$($3864, $3865, $3866);
                var $3863 = $3867;
                break;
            case 'Parser.Reply.value':
                var $3868 = self.idx;
                var $3869 = self.code;
                var $3870 = self.val;
                var self = Kind$Parser$term$($3868, $3869);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3872 = self.idx;
                        var $3873 = self.code;
                        var $3874 = self.err;
                        var $3875 = Parser$Reply$error$($3872, $3873, $3874);
                        var $3871 = $3875;
                        break;
                    case 'Parser.Reply.value':
                        var $3876 = self.idx;
                        var $3877 = self.code;
                        var $3878 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $3876, $3877);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3880 = self.idx;
                                var $3881 = self.code;
                                var $3882 = self.err;
                                var $3883 = Parser$Reply$error$($3880, $3881, $3882);
                                var $3879 = $3883;
                                break;
                            case 'Parser.Reply.value':
                                var $3884 = self.idx;
                                var $3885 = self.code;
                                var $3886 = Parser$Reply$value$($3884, $3885, Pair$new$($3870, $3878));
                                var $3879 = $3886;
                                break;
                        };
                        var $3871 = $3879;
                        break;
                };
                var $3863 = $3871;
                break;
        };
        return $3863;
    };
    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);
    const Debug$log = a0 => a1 => ((console.log(a0), a1()));

    function Kind$Parser$case$group$(_dflt$1, _cses$2) {
        var self = _cses$2;
        switch (self._) {
            case 'List.cons':
                var $3888 = self.head;
                var $3889 = self.tail;
                var _map$5 = Kind$Parser$case$group$(_dflt$1, $3889);
                var self = $3888;
                switch (self._) {
                    case 'Pair.new':
                        var $3891 = self.fst;
                        var $3892 = self.snd;
                        var self = $3891;
                        switch (self._) {
                            case 'List.cons':
                                var $3894 = self.head;
                                var $3895 = self.tail;
                                var _rest$10 = Maybe$default$(Kind$Map$get$($3894, _map$5), List$nil);
                                var $3896 = Kind$Map$set$($3894, List$cons$(Pair$new$($3895, $3892), _rest$10), _map$5);
                                var $3893 = $3896;
                                break;
                            case 'List.nil':
                                var $3897 = _map$5;
                                var $3893 = $3897;
                                break;
                        };
                        var $3890 = $3893;
                        break;
                };
                var $3887 = $3890;
                break;
            case 'List.nil':
                var self = _dflt$1;
                switch (self._) {
                    case 'Maybe.some':
                        var $3899 = self.value;
                        var $3900 = Kind$Map$set$("_", List$cons$(Pair$new$(List$nil, $3899), List$nil), Kind$Map$new);
                        var $3898 = $3900;
                        break;
                    case 'Maybe.none':
                        var $3901 = Kind$Map$new;
                        var $3898 = $3901;
                        break;
                };
                var $3887 = $3898;
                break;
        };
        return $3887;
    };
    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);

    function BitsMap$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'BitsMap.tie':
                var $3903 = self.val;
                var $3904 = self.lft;
                var $3905 = self.rgt;
                var self = $3903;
                switch (self._) {
                    case 'Maybe.some':
                        var $3907 = self.value;
                        var $3908 = Maybe$some$(_fn$3($3907));
                        var _val$8 = $3908;
                        break;
                    case 'Maybe.none':
                        var $3909 = Maybe$none;
                        var _val$8 = $3909;
                        break;
                };
                var _lft$9 = BitsMap$map$(_fn$3, $3904);
                var _rgt$10 = BitsMap$map$(_fn$3, $3905);
                var $3906 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);
                var $3902 = $3906;
                break;
            case 'BitsMap.new':
                var $3910 = BitsMap$new;
                var $3902 = $3910;
                break;
        };
        return $3902;
    };
    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);

    function Kind$Map$map$(_fn$3, _map$4) {
        var $3911 = BitsMap$map$(_fn$3, _map$4);
        return $3911;
    };
    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);

    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $3912 = ({
            _: 'Kind.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $3912;
    };
    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {
        var self = _vals$1;
        switch (self._) {
            case 'List.cons':
                var $3914 = self.head;
                var $3915 = self.tail;
                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);
                var _name$10 = Pair$fst$($3914);
                var _expr$11 = Pair$snd$($3914);
                var _cses$12 = Kind$Map$map$((_cses$12 => {
                    var $3917 = Kind$Parser$case$build$($3915, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);
                    return $3917;
                }), _group$9);
                var $3916 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));
                var $3913 = $3916;
                break;
            case 'List.nil':
                var self = _cses$3;
                switch (self._) {
                    case 'List.cons':
                        var $3919 = self.head;
                        var $3920 = Pair$snd$($3919);
                        var $3918 = $3920;
                        break;
                    case 'List.nil':
                        var $3921 = ((console.log(("MISSING CASE" + String$nil)), (_$7 => {
                            var $3922 = Kind$Term$ref$("missing_case");
                            return $3922;
                        })()));
                        var $3918 = $3921;
                        break;
                };
                var $3913 = $3918;
                break;
        };
        return $3913;
    };
    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3924 = self.idx;
                var $3925 = self.code;
                var $3926 = self.err;
                var $3927 = Parser$Reply$error$($3924, $3925, $3926);
                var $3923 = $3927;
                break;
            case 'Parser.Reply.value':
                var $3928 = self.idx;
                var $3929 = self.code;
                var $3930 = self.val;
                var self = Kind$Parser$text$("case ", $3928, $3929);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3932 = self.idx;
                        var $3933 = self.code;
                        var $3934 = self.err;
                        var $3935 = Parser$Reply$error$($3932, $3933, $3934);
                        var $3931 = $3935;
                        break;
                    case 'Parser.Reply.value':
                        var $3936 = self.idx;
                        var $3937 = self.code;
                        var self = Parser$many1$((_idx$9 => _code$10 => {
                            var self = Parser$avoiding$(Kind$Parser$text("{"), Kind$Parser$term, _idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3940 = self.idx;
                                    var $3941 = self.code;
                                    var $3942 = self.err;
                                    var $3943 = Parser$Reply$error$($3940, $3941, $3942);
                                    var $3939 = $3943;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3944 = self.idx;
                                    var $3945 = self.code;
                                    var $3946 = self.val;
                                    var self = Parser$maybe$((_idx$14 => _code$15 => {
                                        var self = Kind$Parser$text$("as", _idx$14, _code$15);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3949 = self.idx;
                                                var $3950 = self.code;
                                                var $3951 = self.err;
                                                var $3952 = Parser$Reply$error$($3949, $3950, $3951);
                                                var $3948 = $3952;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3953 = self.idx;
                                                var $3954 = self.code;
                                                var self = Kind$Parser$name1$($3953, $3954);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3956 = self.idx;
                                                        var $3957 = self.code;
                                                        var $3958 = self.err;
                                                        var $3959 = Parser$Reply$error$($3956, $3957, $3958);
                                                        var $3955 = $3959;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3960 = self.idx;
                                                        var $3961 = self.code;
                                                        var $3962 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $3960, $3961);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3964 = self.idx;
                                                                var $3965 = self.code;
                                                                var $3966 = self.err;
                                                                var $3967 = Parser$Reply$error$($3964, $3965, $3966);
                                                                var $3963 = $3967;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3968 = self.idx;
                                                                var $3969 = self.code;
                                                                var $3970 = Parser$Reply$value$($3968, $3969, $3962);
                                                                var $3963 = $3970;
                                                                break;
                                                        };
                                                        var $3955 = $3963;
                                                        break;
                                                };
                                                var $3948 = $3955;
                                                break;
                                        };
                                        return $3948;
                                    }), $3944, $3945);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3971 = self.idx;
                                            var $3972 = self.code;
                                            var $3973 = self.err;
                                            var $3974 = Parser$Reply$error$($3971, $3972, $3973);
                                            var $3947 = $3974;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3975 = self.idx;
                                            var $3976 = self.code;
                                            var $3977 = self.val;
                                            var _name$17 = Maybe$default$($3977, Kind$Term$extract_name$($3946));
                                            var $3978 = Parser$Reply$value$($3975, $3976, Pair$new$(_name$17, $3946));
                                            var $3947 = $3978;
                                            break;
                                    };
                                    var $3939 = $3947;
                                    break;
                            };
                            return $3939;
                        }), $3936, $3937);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3979 = self.idx;
                                var $3980 = self.code;
                                var $3981 = self.err;
                                var $3982 = Parser$Reply$error$($3979, $3980, $3981);
                                var $3938 = $3982;
                                break;
                            case 'Parser.Reply.value':
                                var $3983 = self.idx;
                                var $3984 = self.code;
                                var $3985 = self.val;
                                var self = Kind$Parser$case$with($3983)($3984);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3987 = self.idx;
                                        var $3988 = self.code;
                                        var $3989 = self.err;
                                        var $3990 = Parser$Reply$error$($3987, $3988, $3989);
                                        var $3986 = $3990;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3991 = self.idx;
                                        var $3992 = self.code;
                                        var $3993 = self.val;
                                        var self = Kind$Parser$text$("{", $3991, $3992);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3995 = self.idx;
                                                var $3996 = self.code;
                                                var $3997 = self.err;
                                                var $3998 = Parser$Reply$error$($3995, $3996, $3997);
                                                var $3994 = $3998;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3999 = self.idx;
                                                var $4000 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$case$case)($3999)($4000);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4002 = self.idx;
                                                        var $4003 = self.code;
                                                        var $4004 = self.err;
                                                        var $4005 = Parser$Reply$error$($4002, $4003, $4004);
                                                        var $4001 = $4005;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4006 = self.idx;
                                                        var $4007 = self.code;
                                                        var $4008 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text("!"), $4006, $4007);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4010 = self.idx;
                                                                var $4011 = self.code;
                                                                var $4012 = self.err;
                                                                var $4013 = Parser$Reply$error$($4010, $4011, $4012);
                                                                var $4009 = $4013;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4014 = self.idx;
                                                                var $4015 = self.code;
                                                                var $4016 = self.val;
                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {
                                                                    var self = Kind$Parser$text$("default", _idx$24, _code$25);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $4019 = self.idx;
                                                                            var $4020 = self.code;
                                                                            var $4021 = self.err;
                                                                            var $4022 = Parser$Reply$error$($4019, $4020, $4021);
                                                                            var $4018 = $4022;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $4023 = self.idx;
                                                                            var $4024 = self.code;
                                                                            var self = Kind$Parser$term$($4023, $4024);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4026 = self.idx;
                                                                                    var $4027 = self.code;
                                                                                    var $4028 = self.err;
                                                                                    var $4029 = Parser$Reply$error$($4026, $4027, $4028);
                                                                                    var $4025 = $4029;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4030 = self.idx;
                                                                                    var $4031 = self.code;
                                                                                    var $4032 = self.val;
                                                                                    var $4033 = Parser$Reply$value$($4030, $4031, $4032);
                                                                                    var $4025 = $4033;
                                                                                    break;
                                                                            };
                                                                            var $4018 = $4025;
                                                                            break;
                                                                    };
                                                                    return $4018;
                                                                }), $4014, $4015);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4034 = self.idx;
                                                                        var $4035 = self.code;
                                                                        var $4036 = self.err;
                                                                        var $4037 = Parser$Reply$error$($4034, $4035, $4036);
                                                                        var $4017 = $4037;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4038 = self.idx;
                                                                        var $4039 = self.code;
                                                                        var $4040 = self.val;
                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {
                                                                            var self = Kind$Parser$text$(":", _idx$27, _code$28);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4043 = self.idx;
                                                                                    var $4044 = self.code;
                                                                                    var $4045 = self.err;
                                                                                    var $4046 = Parser$Reply$error$($4043, $4044, $4045);
                                                                                    var $4042 = $4046;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4047 = self.idx;
                                                                                    var $4048 = self.code;
                                                                                    var $4049 = Kind$Parser$term$($4047, $4048);
                                                                                    var $4042 = $4049;
                                                                                    break;
                                                                            };
                                                                            return $4042;
                                                                        }), $4038, $4039);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $4050 = self.idx;
                                                                                var $4051 = self.code;
                                                                                var $4052 = self.err;
                                                                                var $4053 = Parser$Reply$error$($4050, $4051, $4052);
                                                                                var $4041 = $4053;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $4054 = self.idx;
                                                                                var $4055 = self.code;
                                                                                var $4056 = self.val;
                                                                                var self = $4056;
                                                                                switch (self._) {
                                                                                    case 'Maybe.some':
                                                                                        var $4058 = self.value;
                                                                                        var $4059 = Maybe$some$($4058);
                                                                                        var _moti$30 = $4059;
                                                                                        break;
                                                                                    case 'Maybe.none':
                                                                                        var self = $4016;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.none':
                                                                                                var $4061 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                                                var $4060 = $4061;
                                                                                                break;
                                                                                            case 'Maybe.some':
                                                                                                var $4062 = Maybe$none;
                                                                                                var $4060 = $4062;
                                                                                                break;
                                                                                        };
                                                                                        var _moti$30 = $4060;
                                                                                        break;
                                                                                };
                                                                                var self = Kind$Parser$stop$($3930, $4054, $4055);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $4063 = self.idx;
                                                                                        var $4064 = self.code;
                                                                                        var $4065 = self.err;
                                                                                        var $4066 = Parser$Reply$error$($4063, $4064, $4065);
                                                                                        var $4057 = $4066;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $4067 = self.idx;
                                                                                        var $4068 = self.code;
                                                                                        var $4069 = self.val;
                                                                                        var $4070 = Parser$Reply$value$($4067, $4068, Kind$Parser$case$build$($3985, $3993, $4008, $4040, _moti$30, $4069));
                                                                                        var $4057 = $4070;
                                                                                        break;
                                                                                };
                                                                                var $4041 = $4057;
                                                                                break;
                                                                        };
                                                                        var $4017 = $4041;
                                                                        break;
                                                                };
                                                                var $4009 = $4017;
                                                                break;
                                                        };
                                                        var $4001 = $4009;
                                                        break;
                                                };
                                                var $3994 = $4001;
                                                break;
                                        };
                                        var $3986 = $3994;
                                        break;
                                };
                                var $3938 = $3986;
                                break;
                        };
                        var $3931 = $3938;
                        break;
                };
                var $3923 = $3931;
                break;
        };
        return $3923;
    };
    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);

    function Kind$Parser$open$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4072 = self.idx;
                var $4073 = self.code;
                var $4074 = self.err;
                var $4075 = Parser$Reply$error$($4072, $4073, $4074);
                var $4071 = $4075;
                break;
            case 'Parser.Reply.value':
                var $4076 = self.idx;
                var $4077 = self.code;
                var $4078 = self.val;
                var self = Kind$Parser$text$("open ", $4076, $4077);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4080 = self.idx;
                        var $4081 = self.code;
                        var $4082 = self.err;
                        var $4083 = Parser$Reply$error$($4080, $4081, $4082);
                        var $4079 = $4083;
                        break;
                    case 'Parser.Reply.value':
                        var $4084 = self.idx;
                        var $4085 = self.code;
                        var self = Kind$Parser$spaces($4084)($4085);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4087 = self.idx;
                                var $4088 = self.code;
                                var $4089 = self.err;
                                var $4090 = Parser$Reply$error$($4087, $4088, $4089);
                                var $4086 = $4090;
                                break;
                            case 'Parser.Reply.value':
                                var $4091 = self.idx;
                                var $4092 = self.code;
                                var self = Kind$Parser$term$($4091, $4092);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4094 = self.idx;
                                        var $4095 = self.code;
                                        var $4096 = self.err;
                                        var $4097 = Parser$Reply$error$($4094, $4095, $4096);
                                        var $4093 = $4097;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4098 = self.idx;
                                        var $4099 = self.code;
                                        var $4100 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Kind$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4103 = self.idx;
                                                    var $4104 = self.code;
                                                    var $4105 = self.err;
                                                    var $4106 = Parser$Reply$error$($4103, $4104, $4105);
                                                    var $4102 = $4106;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4107 = self.idx;
                                                    var $4108 = self.code;
                                                    var $4109 = Kind$Parser$name1$($4107, $4108);
                                                    var $4102 = $4109;
                                                    break;
                                            };
                                            return $4102;
                                        }), $4098, $4099);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4110 = self.idx;
                                                var $4111 = self.code;
                                                var $4112 = self.err;
                                                var $4113 = Parser$Reply$error$($4110, $4111, $4112);
                                                var $4101 = $4113;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4114 = self.idx;
                                                var $4115 = self.code;
                                                var $4116 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $4114, $4115);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4118 = self.idx;
                                                        var $4119 = self.code;
                                                        var $4120 = self.err;
                                                        var $4121 = Parser$Reply$error$($4118, $4119, $4120);
                                                        var $4117 = $4121;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4122 = self.idx;
                                                        var $4123 = self.code;
                                                        var self = $4116;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $4125 = self.value;
                                                                var $4126 = $4125;
                                                                var _name$21 = $4126;
                                                                break;
                                                            case 'Maybe.none':
                                                                var self = Kind$Term$reduce$($4100, Kind$Map$new);
                                                                switch (self._) {
                                                                    case 'Kind.Term.var':
                                                                        var $4128 = self.name;
                                                                        var $4129 = $4128;
                                                                        var $4127 = $4129;
                                                                        break;
                                                                    case 'Kind.Term.ref':
                                                                        var $4130 = self.name;
                                                                        var $4131 = $4130;
                                                                        var $4127 = $4131;
                                                                        break;
                                                                    case 'Kind.Term.typ':
                                                                    case 'Kind.Term.all':
                                                                    case 'Kind.Term.lam':
                                                                    case 'Kind.Term.app':
                                                                    case 'Kind.Term.let':
                                                                    case 'Kind.Term.def':
                                                                    case 'Kind.Term.ann':
                                                                    case 'Kind.Term.gol':
                                                                    case 'Kind.Term.hol':
                                                                    case 'Kind.Term.nat':
                                                                    case 'Kind.Term.chr':
                                                                    case 'Kind.Term.str':
                                                                    case 'Kind.Term.cse':
                                                                    case 'Kind.Term.ori':
                                                                        var $4132 = Kind$Name$read$("self");
                                                                        var $4127 = $4132;
                                                                        break;
                                                                };
                                                                var _name$21 = $4127;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Kind$Parser$term$($4122, $4123);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4133 = self.idx;
                                                                var $4134 = self.code;
                                                                var $4135 = self.err;
                                                                var $4136 = Parser$Reply$error$($4133, $4134, $4135);
                                                                var $4124 = $4136;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4137 = self.idx;
                                                                var $4138 = self.code;
                                                                var $4139 = self.val;
                                                                var _cses$26 = Kind$Map$set$("_", $4139, Kind$Map$new);
                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                var self = Kind$Parser$stop$($4078, $4137, $4138);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4141 = self.idx;
                                                                        var $4142 = self.code;
                                                                        var $4143 = self.err;
                                                                        var $4144 = Parser$Reply$error$($4141, $4142, $4143);
                                                                        var $4140 = $4144;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4145 = self.idx;
                                                                        var $4146 = self.code;
                                                                        var $4147 = self.val;
                                                                        var $4148 = Parser$Reply$value$($4145, $4146, Kind$Term$ori$($4147, Kind$Term$cse$(Bits$e, $4100, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $4140 = $4148;
                                                                        break;
                                                                };
                                                                var $4124 = $4140;
                                                                break;
                                                        };
                                                        var $4117 = $4124;
                                                        break;
                                                };
                                                var $4101 = $4117;
                                                break;
                                        };
                                        var $4093 = $4101;
                                        break;
                                };
                                var $4086 = $4093;
                                break;
                        };
                        var $4079 = $4086;
                        break;
                };
                var $4071 = $4079;
                break;
        };
        return $4071;
    };
    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);

    function Kind$Parser$without$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4150 = self.idx;
                var $4151 = self.code;
                var $4152 = self.err;
                var $4153 = Parser$Reply$error$($4150, $4151, $4152);
                var $4149 = $4153;
                break;
            case 'Parser.Reply.value':
                var $4154 = self.idx;
                var $4155 = self.code;
                var $4156 = self.val;
                var self = Kind$Parser$text$("without ", $4154, $4155);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4158 = self.idx;
                        var $4159 = self.code;
                        var $4160 = self.err;
                        var $4161 = Parser$Reply$error$($4158, $4159, $4160);
                        var $4157 = $4161;
                        break;
                    case 'Parser.Reply.value':
                        var $4162 = self.idx;
                        var $4163 = self.code;
                        var self = Kind$Parser$name1$($4162, $4163);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4165 = self.idx;
                                var $4166 = self.code;
                                var $4167 = self.err;
                                var $4168 = Parser$Reply$error$($4165, $4166, $4167);
                                var $4164 = $4168;
                                break;
                            case 'Parser.Reply.value':
                                var $4169 = self.idx;
                                var $4170 = self.code;
                                var $4171 = self.val;
                                var self = Kind$Parser$text$(":", $4169, $4170);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4173 = self.idx;
                                        var $4174 = self.code;
                                        var $4175 = self.err;
                                        var $4176 = Parser$Reply$error$($4173, $4174, $4175);
                                        var $4172 = $4176;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4177 = self.idx;
                                        var $4178 = self.code;
                                        var self = Kind$Parser$term$($4177, $4178);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4180 = self.idx;
                                                var $4181 = self.code;
                                                var $4182 = self.err;
                                                var $4183 = Parser$Reply$error$($4180, $4181, $4182);
                                                var $4179 = $4183;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4184 = self.idx;
                                                var $4185 = self.code;
                                                var $4186 = self.val;
                                                var self = Kind$Parser$term$($4184, $4185);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4188 = self.idx;
                                                        var $4189 = self.code;
                                                        var $4190 = self.err;
                                                        var $4191 = Parser$Reply$error$($4188, $4189, $4190);
                                                        var $4187 = $4191;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4192 = self.idx;
                                                        var $4193 = self.code;
                                                        var $4194 = self.val;
                                                        var self = Kind$Parser$stop$($4156, $4192, $4193);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4196 = self.idx;
                                                                var $4197 = self.code;
                                                                var $4198 = self.err;
                                                                var $4199 = Parser$Reply$error$($4196, $4197, $4198);
                                                                var $4195 = $4199;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4200 = self.idx;
                                                                var $4201 = self.code;
                                                                var $4202 = self.val;
                                                                var _term$24 = Kind$Term$ref$($4171);
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$("", (_x$25 => {
                                                                    var $4204 = Kind$Term$hol$(Bits$e);
                                                                    return $4204;
                                                                })));
                                                                var _term$26 = Kind$Term$app$(_term$25, $4186);
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($4171, (_x$27 => {
                                                                    var $4205 = $4194;
                                                                    return $4205;
                                                                })));
                                                                var $4203 = Parser$Reply$value$($4200, $4201, Kind$Term$ori$($4202, _term$27));
                                                                var $4195 = $4203;
                                                                break;
                                                        };
                                                        var $4187 = $4195;
                                                        break;
                                                };
                                                var $4179 = $4187;
                                                break;
                                        };
                                        var $4172 = $4179;
                                        break;
                                };
                                var $4164 = $4172;
                                break;
                        };
                        var $4157 = $4164;
                        break;
                };
                var $4149 = $4157;
                break;
        };
        return $4149;
    };
    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);

    function Kind$Parser$switch$case$(_idx$1, _code$2) {
        var self = Kind$Parser$term$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4207 = self.idx;
                var $4208 = self.code;
                var $4209 = self.err;
                var $4210 = Parser$Reply$error$($4207, $4208, $4209);
                var $4206 = $4210;
                break;
            case 'Parser.Reply.value':
                var $4211 = self.idx;
                var $4212 = self.code;
                var $4213 = self.val;
                var self = Kind$Parser$text$(":", $4211, $4212);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4215 = self.idx;
                        var $4216 = self.code;
                        var $4217 = self.err;
                        var $4218 = Parser$Reply$error$($4215, $4216, $4217);
                        var $4214 = $4218;
                        break;
                    case 'Parser.Reply.value':
                        var $4219 = self.idx;
                        var $4220 = self.code;
                        var self = Kind$Parser$term$($4219, $4220);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4222 = self.idx;
                                var $4223 = self.code;
                                var $4224 = self.err;
                                var $4225 = Parser$Reply$error$($4222, $4223, $4224);
                                var $4221 = $4225;
                                break;
                            case 'Parser.Reply.value':
                                var $4226 = self.idx;
                                var $4227 = self.code;
                                var $4228 = self.val;
                                var $4229 = Parser$Reply$value$($4226, $4227, Pair$new$($4213, $4228));
                                var $4221 = $4229;
                                break;
                        };
                        var $4214 = $4221;
                        break;
                };
                var $4206 = $4214;
                break;
        };
        return $4206;
    };
    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);

    function Kind$Parser$switch$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4231 = self.idx;
                var $4232 = self.code;
                var $4233 = self.err;
                var $4234 = Parser$Reply$error$($4231, $4232, $4233);
                var $4230 = $4234;
                break;
            case 'Parser.Reply.value':
                var $4235 = self.idx;
                var $4236 = self.code;
                var $4237 = self.val;
                var self = Kind$Parser$text$("switch ", $4235, $4236);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4239 = self.idx;
                        var $4240 = self.code;
                        var $4241 = self.err;
                        var $4242 = Parser$Reply$error$($4239, $4240, $4241);
                        var $4238 = $4242;
                        break;
                    case 'Parser.Reply.value':
                        var $4243 = self.idx;
                        var $4244 = self.code;
                        var self = Kind$Parser$term$($4243, $4244);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4246 = self.idx;
                                var $4247 = self.code;
                                var $4248 = self.err;
                                var $4249 = Parser$Reply$error$($4246, $4247, $4248);
                                var $4245 = $4249;
                                break;
                            case 'Parser.Reply.value':
                                var $4250 = self.idx;
                                var $4251 = self.code;
                                var $4252 = self.val;
                                var self = Kind$Parser$text$("{", $4250, $4251);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4254 = self.idx;
                                        var $4255 = self.code;
                                        var $4256 = self.err;
                                        var $4257 = Parser$Reply$error$($4254, $4255, $4256);
                                        var $4253 = $4257;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4258 = self.idx;
                                        var $4259 = self.code;
                                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$switch$case)($4258)($4259);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4261 = self.idx;
                                                var $4262 = self.code;
                                                var $4263 = self.err;
                                                var $4264 = Parser$Reply$error$($4261, $4262, $4263);
                                                var $4260 = $4264;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4265 = self.idx;
                                                var $4266 = self.code;
                                                var $4267 = self.val;
                                                var self = Kind$Parser$text$("default ", $4265, $4266);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4269 = self.idx;
                                                        var $4270 = self.code;
                                                        var $4271 = self.err;
                                                        var $4272 = Parser$Reply$error$($4269, $4270, $4271);
                                                        var $4268 = $4272;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4273 = self.idx;
                                                        var $4274 = self.code;
                                                        var self = Kind$Parser$term$($4273, $4274);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4276 = self.idx;
                                                                var $4277 = self.code;
                                                                var $4278 = self.err;
                                                                var $4279 = Parser$Reply$error$($4276, $4277, $4278);
                                                                var $4275 = $4279;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4280 = self.idx;
                                                                var $4281 = self.code;
                                                                var $4282 = self.val;
                                                                var self = Kind$Parser$stop$($4237, $4280, $4281);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4284 = self.idx;
                                                                        var $4285 = self.code;
                                                                        var $4286 = self.err;
                                                                        var $4287 = Parser$Reply$error$($4284, $4285, $4286);
                                                                        var $4283 = $4287;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4288 = self.idx;
                                                                        var $4289 = self.code;
                                                                        var $4290 = self.val;
                                                                        var _term$27 = List$fold$($4267, $4282, (_cse$27 => _rest$28 => {
                                                                            var self = _cse$27;
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $4293 = self.fst;
                                                                                    var $4294 = self.snd;
                                                                                    var _term$31 = Kind$Term$app$($4252, $4293);
                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$("", (_x$32 => {
                                                                                        var $4296 = Kind$Term$hol$(Bits$e);
                                                                                        return $4296;
                                                                                    })));
                                                                                    var _term$33 = Kind$Term$app$(_term$32, $4294);
                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);
                                                                                    var $4295 = _term$34;
                                                                                    var $4292 = $4295;
                                                                                    break;
                                                                            };
                                                                            return $4292;
                                                                        }));
                                                                        var $4291 = Parser$Reply$value$($4288, $4289, Kind$Term$ori$($4290, _term$27));
                                                                        var $4283 = $4291;
                                                                        break;
                                                                };
                                                                var $4275 = $4283;
                                                                break;
                                                        };
                                                        var $4268 = $4275;
                                                        break;
                                                };
                                                var $4260 = $4268;
                                                break;
                                        };
                                        var $4253 = $4260;
                                        break;
                                };
                                var $4245 = $4253;
                                break;
                        };
                        var $4238 = $4245;
                        break;
                };
                var $4230 = $4238;
                break;
        };
        return $4230;
    };
    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4298 = self.slice(0, -1);
                var $4299 = $4298;
                var $4297 = $4299;
                break;
            case 'i':
                var $4300 = self.slice(0, -1);
                var $4301 = $4300;
                var $4297 = $4301;
                break;
            case 'e':
                var $4302 = Bits$e;
                var $4297 = $4302;
                break;
        };
        return $4297;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4304 = self.slice(0, -1);
                var $4305 = ($4304 + '1');
                var $4303 = $4305;
                break;
            case 'i':
                var $4306 = self.slice(0, -1);
                var $4307 = (Bits$inc$($4306) + '0');
                var $4303 = $4307;
                break;
            case 'e':
                var $4308 = (Bits$e + '1');
                var $4303 = $4308;
                break;
        };
        return $4303;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$is_some$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4310 = Bool$false;
                var $4309 = $4310;
                break;
            case 'Maybe.some':
                var $4311 = Bool$true;
                var $4309 = $4311;
                break;
        };
        return $4309;
    };
    const Maybe$is_some = x0 => Maybe$is_some$(x0);

    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $4312 = ({
            _: 'Kind.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $4312;
    };
    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);

    function Kind$Parser$goal$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4314 = self.idx;
                var $4315 = self.code;
                var $4316 = self.err;
                var $4317 = Parser$Reply$error$($4314, $4315, $4316);
                var $4313 = $4317;
                break;
            case 'Parser.Reply.value':
                var $4318 = self.idx;
                var $4319 = self.code;
                var $4320 = self.val;
                var self = Kind$Parser$text$("?", $4318, $4319);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4322 = self.idx;
                        var $4323 = self.code;
                        var $4324 = self.err;
                        var $4325 = Parser$Reply$error$($4322, $4323, $4324);
                        var $4321 = $4325;
                        break;
                    case 'Parser.Reply.value':
                        var $4326 = self.idx;
                        var $4327 = self.code;
                        var self = Kind$Parser$name$($4326, $4327);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4329 = self.idx;
                                var $4330 = self.code;
                                var $4331 = self.err;
                                var $4332 = Parser$Reply$error$($4329, $4330, $4331);
                                var $4328 = $4332;
                                break;
                            case 'Parser.Reply.value':
                                var $4333 = self.idx;
                                var $4334 = self.code;
                                var $4335 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4338 = self.idx;
                                            var $4339 = self.code;
                                            var $4340 = self.err;
                                            var $4341 = Parser$Reply$error$($4338, $4339, $4340);
                                            var $4337 = $4341;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4342 = self.idx;
                                            var $4343 = self.code;
                                            var self = Parser$nat$($4342, $4343);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4345 = self.idx;
                                                    var $4346 = self.code;
                                                    var $4347 = self.err;
                                                    var $4348 = Parser$Reply$error$($4345, $4346, $4347);
                                                    var $4344 = $4348;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4349 = self.idx;
                                                    var $4350 = self.code;
                                                    var $4351 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($4351)))));
                                                    var $4352 = Parser$Reply$value$($4349, $4350, _bits$20);
                                                    var $4344 = $4352;
                                                    break;
                                            };
                                            var $4337 = $4344;
                                            break;
                                    };
                                    return $4337;
                                }))($4333)($4334);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4353 = self.idx;
                                        var $4354 = self.code;
                                        var $4355 = self.err;
                                        var $4356 = Parser$Reply$error$($4353, $4354, $4355);
                                        var $4336 = $4356;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4357 = self.idx;
                                        var $4358 = self.code;
                                        var $4359 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $4357, $4358);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4361 = self.idx;
                                                var $4362 = self.code;
                                                var $4363 = self.err;
                                                var $4364 = Parser$Reply$error$($4361, $4362, $4363);
                                                var self = $4364;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4365 = self.idx;
                                                var $4366 = self.code;
                                                var $4367 = self.val;
                                                var $4368 = Parser$Reply$value$($4365, $4366, Maybe$is_some$($4367));
                                                var self = $4368;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4369 = self.idx;
                                                var $4370 = self.code;
                                                var $4371 = self.err;
                                                var $4372 = Parser$Reply$error$($4369, $4370, $4371);
                                                var $4360 = $4372;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4373 = self.idx;
                                                var $4374 = self.code;
                                                var $4375 = self.val;
                                                var self = Kind$Parser$stop$($4320, $4373, $4374);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4377 = self.idx;
                                                        var $4378 = self.code;
                                                        var $4379 = self.err;
                                                        var $4380 = Parser$Reply$error$($4377, $4378, $4379);
                                                        var $4376 = $4380;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4381 = self.idx;
                                                        var $4382 = self.code;
                                                        var $4383 = self.val;
                                                        var $4384 = Parser$Reply$value$($4381, $4382, Kind$Term$ori$($4383, Kind$Term$gol$($4335, $4359, $4375)));
                                                        var $4376 = $4384;
                                                        break;
                                                };
                                                var $4360 = $4376;
                                                break;
                                        };
                                        var $4336 = $4360;
                                        break;
                                };
                                var $4328 = $4336;
                                break;
                        };
                        var $4321 = $4328;
                        break;
                };
                var $4313 = $4321;
                break;
        };
        return $4313;
    };
    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);

    function Kind$Parser$hole$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4386 = self.idx;
                var $4387 = self.code;
                var $4388 = self.err;
                var $4389 = Parser$Reply$error$($4386, $4387, $4388);
                var $4385 = $4389;
                break;
            case 'Parser.Reply.value':
                var $4390 = self.idx;
                var $4391 = self.code;
                var $4392 = self.val;
                var self = Kind$Parser$text$("_", $4390, $4391);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4394 = self.idx;
                        var $4395 = self.code;
                        var $4396 = self.err;
                        var $4397 = Parser$Reply$error$($4394, $4395, $4396);
                        var $4393 = $4397;
                        break;
                    case 'Parser.Reply.value':
                        var $4398 = self.idx;
                        var $4399 = self.code;
                        var self = Kind$Parser$stop$($4392, $4398, $4399);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4401 = self.idx;
                                var $4402 = self.code;
                                var $4403 = self.err;
                                var $4404 = Parser$Reply$error$($4401, $4402, $4403);
                                var $4400 = $4404;
                                break;
                            case 'Parser.Reply.value':
                                var $4405 = self.idx;
                                var $4406 = self.code;
                                var $4407 = self.val;
                                var $4408 = Parser$Reply$value$($4405, $4406, Kind$Term$ori$($4407, Kind$Term$hol$(Bits$e)));
                                var $4400 = $4408;
                                break;
                        };
                        var $4393 = $4400;
                        break;
                };
                var $4385 = $4393;
                break;
        };
        return $4385;
    };
    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);

    function Kind$Parser$float$sign$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4410 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' or \'-\'.");
            var $4409 = $4410;
        } else {
            var $4411 = self.charCodeAt(0);
            var $4412 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = (($4411 === 43) || ($4411 === 45));
            if (self) {
                var $4414 = Parser$Reply$value$(_sidx$5, $4412, $4411);
                var $4413 = $4414;
            } else {
                var $4415 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' ou \'-\'.");
                var $4413 = $4415;
            };
            var $4409 = $4413;
        };
        return $4409;
    };
    const Kind$Parser$float$sign = x0 => x1 => Kind$Parser$float$sign$(x0, x1);

    function List$any$(_cond$2, _list$3) {
        var List$any$ = (_cond$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_cond$2, _list$3]
        });
        var List$any = _cond$2 => _list$3 => List$any$(_cond$2, _list$3);
        var arg = [_cond$2, _list$3];
        while (true) {
            let [_cond$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4416 = self.head;
                        var $4417 = self.tail;
                        var self = _cond$2($4416);
                        if (self) {
                            var $4419 = Bool$true;
                            var $4418 = $4419;
                        } else {
                            var $4420 = List$any$(_cond$2, $4417);
                            var $4418 = $4420;
                        };
                        return $4418;
                    case 'List.nil':
                        var $4421 = Bool$false;
                        return $4421;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$any = x0 => x1 => List$any$(x0, x1);

    function Kind$Parser$float$str_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4423 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4422 = $4423;
        } else {
            var $4424 = self.charCodeAt(0);
            var $4425 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var _digits$6 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$nil)))))))))));
            var self = List$any$(a1 => ($4424 === a1), _digits$6);
            if (self) {
                var $4427 = Parser$Reply$value$(_sidx$5, $4425, $4424);
                var $4426 = $4427;
            } else {
                var $4428 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                var $4426 = $4428;
            };
            var $4422 = $4426;
        };
        return $4422;
    };
    const Kind$Parser$float$str_digit = x0 => x1 => Kind$Parser$float$str_digit$(x0, x1);

    function String$from_list$(_xs$1) {
        var self = _xs$1;
        switch (self._) {
            case 'List.cons':
                var $4430 = self.head;
                var $4431 = self.tail;
                var $4432 = String$cons$($4430, String$from_list$($4431));
                var $4429 = $4432;
                break;
            case 'List.nil':
                var $4433 = String$nil;
                var $4429 = $4433;
                break;
        };
        return $4429;
    };
    const String$from_list = x0 => String$from_list$(x0);

    function Kind$Parser$float$64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4435 = self.idx;
                var $4436 = self.code;
                var $4437 = self.err;
                var $4438 = Parser$Reply$error$($4435, $4436, $4437);
                var $4434 = $4438;
                break;
            case 'Parser.Reply.value':
                var $4439 = self.idx;
                var $4440 = self.code;
                var $4441 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4439, $4440);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4443 = self.idx;
                        var $4444 = self.code;
                        var $4445 = self.err;
                        var $4446 = Parser$Reply$error$($4443, $4444, $4445);
                        var $4442 = $4446;
                        break;
                    case 'Parser.Reply.value':
                        var $4447 = self.idx;
                        var $4448 = self.code;
                        var $4449 = self.val;
                        var _sign$9 = Maybe$default$($4449, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4447, $4448);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4451 = self.idx;
                                var $4452 = self.code;
                                var $4453 = self.err;
                                var $4454 = Parser$Reply$error$($4451, $4452, $4453);
                                var $4450 = $4454;
                                break;
                            case 'Parser.Reply.value':
                                var $4455 = self.idx;
                                var $4456 = self.code;
                                var $4457 = self.val;
                                var self = Parser$text$(".", $4455, $4456);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4459 = self.idx;
                                        var $4460 = self.code;
                                        var $4461 = self.err;
                                        var $4462 = Parser$Reply$error$($4459, $4460, $4461);
                                        var $4458 = $4462;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4463 = self.idx;
                                        var $4464 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4463, $4464);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4466 = self.idx;
                                                var $4467 = self.code;
                                                var $4468 = self.err;
                                                var $4469 = Parser$Reply$error$($4466, $4467, $4468);
                                                var $4465 = $4469;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4470 = self.idx;
                                                var $4471 = self.code;
                                                var $4472 = self.val;
                                                var self = Parser$text$("#64", $4470, $4471);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4474 = self.idx;
                                                        var $4475 = self.code;
                                                        var $4476 = self.err;
                                                        var $4477 = Parser$Reply$error$($4474, $4475, $4476);
                                                        var $4473 = $4477;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4478 = self.idx;
                                                        var $4479 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4457)) + ("." + String$from_list$($4472))));
                                                        var _conv$23 = Kind$Term$ref$("F64.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4441, $4478, $4479);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4481 = self.idx;
                                                                var $4482 = self.code;
                                                                var $4483 = self.err;
                                                                var $4484 = Parser$Reply$error$($4481, $4482, $4483);
                                                                var $4480 = $4484;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4485 = self.idx;
                                                                var $4486 = self.code;
                                                                var $4487 = self.val;
                                                                var $4488 = Parser$Reply$value$($4485, $4486, Kind$Term$ori$($4487, _term$24));
                                                                var $4480 = $4488;
                                                                break;
                                                        };
                                                        var $4473 = $4480;
                                                        break;
                                                };
                                                var $4465 = $4473;
                                                break;
                                        };
                                        var $4458 = $4465;
                                        break;
                                };
                                var $4450 = $4458;
                                break;
                        };
                        var $4442 = $4450;
                        break;
                };
                var $4434 = $4442;
                break;
        };
        return $4434;
    };
    const Kind$Parser$float$64 = x0 => x1 => Kind$Parser$float$64$(x0, x1);

    function Kind$Parser$float$32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4490 = self.idx;
                var $4491 = self.code;
                var $4492 = self.err;
                var $4493 = Parser$Reply$error$($4490, $4491, $4492);
                var $4489 = $4493;
                break;
            case 'Parser.Reply.value':
                var $4494 = self.idx;
                var $4495 = self.code;
                var $4496 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4494, $4495);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4498 = self.idx;
                        var $4499 = self.code;
                        var $4500 = self.err;
                        var $4501 = Parser$Reply$error$($4498, $4499, $4500);
                        var $4497 = $4501;
                        break;
                    case 'Parser.Reply.value':
                        var $4502 = self.idx;
                        var $4503 = self.code;
                        var $4504 = self.val;
                        var _sign$9 = Maybe$default$($4504, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4502, $4503);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4506 = self.idx;
                                var $4507 = self.code;
                                var $4508 = self.err;
                                var $4509 = Parser$Reply$error$($4506, $4507, $4508);
                                var $4505 = $4509;
                                break;
                            case 'Parser.Reply.value':
                                var $4510 = self.idx;
                                var $4511 = self.code;
                                var $4512 = self.val;
                                var self = Parser$text$(".", $4510, $4511);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4514 = self.idx;
                                        var $4515 = self.code;
                                        var $4516 = self.err;
                                        var $4517 = Parser$Reply$error$($4514, $4515, $4516);
                                        var $4513 = $4517;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4518 = self.idx;
                                        var $4519 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4518, $4519);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4521 = self.idx;
                                                var $4522 = self.code;
                                                var $4523 = self.err;
                                                var $4524 = Parser$Reply$error$($4521, $4522, $4523);
                                                var $4520 = $4524;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4525 = self.idx;
                                                var $4526 = self.code;
                                                var $4527 = self.val;
                                                var self = Parser$text$("#32", $4525, $4526);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4529 = self.idx;
                                                        var $4530 = self.code;
                                                        var $4531 = self.err;
                                                        var $4532 = Parser$Reply$error$($4529, $4530, $4531);
                                                        var $4528 = $4532;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4533 = self.idx;
                                                        var $4534 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4512)) + ("." + String$from_list$($4527))));
                                                        var _conv$23 = Kind$Term$ref$("F32.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4496, $4533, $4534);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4536 = self.idx;
                                                                var $4537 = self.code;
                                                                var $4538 = self.err;
                                                                var $4539 = Parser$Reply$error$($4536, $4537, $4538);
                                                                var $4535 = $4539;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4540 = self.idx;
                                                                var $4541 = self.code;
                                                                var $4542 = self.val;
                                                                var $4543 = Parser$Reply$value$($4540, $4541, Kind$Term$ori$($4542, _term$24));
                                                                var $4535 = $4543;
                                                                break;
                                                        };
                                                        var $4528 = $4535;
                                                        break;
                                                };
                                                var $4520 = $4528;
                                                break;
                                        };
                                        var $4513 = $4520;
                                        break;
                                };
                                var $4505 = $4513;
                                break;
                        };
                        var $4497 = $4505;
                        break;
                };
                var $4489 = $4497;
                break;
        };
        return $4489;
    };
    const Kind$Parser$float$32 = x0 => x1 => Kind$Parser$float$32$(x0, x1);

    function Either$(_A$1, _B$2) {
        var $4544 = null;
        return $4544;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function Either$left$(_value$3) {
        var $4545 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4545;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4546 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4546;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4547 = Either$left$(_n$1);
                    return $4547;
                } else {
                    var $4548 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4550 = Either$right$(Nat$succ$($4548));
                        var $4549 = $4550;
                    } else {
                        var $4551 = (self - 1n);
                        var $4552 = Nat$sub_rem$($4551, $4548);
                        var $4549 = $4552;
                    };
                    return $4549;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4553 = self.value;
                        var $4554 = Nat$div_mod$go$($4553, _m$2, Nat$succ$(_d$3));
                        return $4554;
                    case 'Either.right':
                        var $4555 = Pair$new$(_d$3, _n$1);
                        return $4555;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4556 = self.fst;
                        var $4557 = self.snd;
                        var self = $4556;
                        if (self === 0n) {
                            var $4559 = List$cons$($4557, _res$3);
                            var $4558 = $4559;
                        } else {
                            var $4560 = (self - 1n);
                            var $4561 = Nat$to_base$go$(_base$1, $4556, List$cons$($4557, _res$3));
                            var $4558 = $4561;
                        };
                        return $4558;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4562 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4562;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4563 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4563;
                } else {
                    var $4564 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4566 = _r$3;
                        var $4565 = $4566;
                    } else {
                        var $4567 = (self - 1n);
                        var $4568 = Nat$mod$go$($4567, $4564, Nat$succ$(_r$3));
                        var $4565 = $4568;
                    };
                    return $4565;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);
    const Nat$mod = a0 => a1 => (a0 % a1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4569 = self.head;
                        var $4570 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $4572 = Maybe$some$($4569);
                            var $4571 = $4572;
                        } else {
                            var $4573 = (self - 1n);
                            var $4574 = List$at$($4573, $4570);
                            var $4571 = $4574;
                        };
                        return $4571;
                    case 'List.nil':
                        var $4575 = Maybe$none;
                        return $4575;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = (_n$2 % _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.some':
                    var $4578 = self.value;
                    var $4579 = $4578;
                    var $4577 = $4579;
                    break;
                case 'Maybe.none':
                    var $4580 = 35;
                    var $4577 = $4580;
                    break;
            };
            var $4576 = $4577;
        } else {
            var $4581 = 35;
            var $4576 = $4581;
        };
        return $4576;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4582 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4583 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4583;
        }));
        return $4582;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4584 = Nat$to_string_base$(10n, _n$1);
        return $4584;
    };
    const Nat$show = x0 => Nat$show$(x0);

    function Kind$Parser$int_pos$(_idx$1, _code$2) {
        var self = Parser$text$("+", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4586 = self.idx;
                var $4587 = self.code;
                var $4588 = self.err;
                var $4589 = Parser$Reply$error$($4586, $4587, $4588);
                var $4585 = $4589;
                break;
            case 'Parser.Reply.value':
                var $4590 = self.idx;
                var $4591 = self.code;
                var self = Parser$many1$(Parser$digit, $4590, $4591);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4593 = self.idx;
                        var $4594 = self.code;
                        var $4595 = self.err;
                        var $4596 = Parser$Reply$error$($4593, $4594, $4595);
                        var $4592 = $4596;
                        break;
                    case 'Parser.Reply.value':
                        var $4597 = self.idx;
                        var $4598 = self.code;
                        var $4599 = self.val;
                        var $4600 = Parser$Reply$value$($4597, $4598, Pair$new$(Bool$true, Nat$from_base$(10n, $4599)));
                        var $4592 = $4600;
                        break;
                };
                var $4585 = $4592;
                break;
        };
        return $4585;
    };
    const Kind$Parser$int_pos = x0 => x1 => Kind$Parser$int_pos$(x0, x1);

    function Kind$Parser$int_neg$(_idx$1, _code$2) {
        var self = Parser$text$("-", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4602 = self.idx;
                var $4603 = self.code;
                var $4604 = self.err;
                var $4605 = Parser$Reply$error$($4602, $4603, $4604);
                var $4601 = $4605;
                break;
            case 'Parser.Reply.value':
                var $4606 = self.idx;
                var $4607 = self.code;
                var self = Parser$many1$(Parser$digit, $4606, $4607);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4609 = self.idx;
                        var $4610 = self.code;
                        var $4611 = self.err;
                        var $4612 = Parser$Reply$error$($4609, $4610, $4611);
                        var $4608 = $4612;
                        break;
                    case 'Parser.Reply.value':
                        var $4613 = self.idx;
                        var $4614 = self.code;
                        var $4615 = self.val;
                        var $4616 = Parser$Reply$value$($4613, $4614, Pair$new$(Bool$false, Nat$from_base$(10n, $4615)));
                        var $4608 = $4616;
                        break;
                };
                var $4601 = $4608;
                break;
        };
        return $4601;
    };
    const Kind$Parser$int_neg = x0 => x1 => Kind$Parser$int_neg$(x0, x1);

    function Kind$Parser$int$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4618 = self.idx;
                var $4619 = self.code;
                var $4620 = self.err;
                var $4621 = Parser$Reply$error$($4618, $4619, $4620);
                var $4617 = $4621;
                break;
            case 'Parser.Reply.value':
                var $4622 = self.idx;
                var $4623 = self.code;
                var $4624 = self.val;
                var self = Kind$Parser$spaces($4622)($4623);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4626 = self.idx;
                        var $4627 = self.code;
                        var $4628 = self.err;
                        var $4629 = Parser$Reply$error$($4626, $4627, $4628);
                        var $4625 = $4629;
                        break;
                    case 'Parser.Reply.value':
                        var $4630 = self.idx;
                        var $4631 = self.code;
                        var self = Parser$first_of$(List$cons$(Kind$Parser$int_pos, List$cons$(Kind$Parser$int_neg, List$nil)))($4630)($4631);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4633 = self.idx;
                                var $4634 = self.code;
                                var $4635 = self.err;
                                var $4636 = Parser$Reply$error$($4633, $4634, $4635);
                                var $4632 = $4636;
                                break;
                            case 'Parser.Reply.value':
                                var $4637 = self.idx;
                                var $4638 = self.code;
                                var $4639 = self.val;
                                var self = $4639;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $4641 = self.fst;
                                        var $4642 = self.snd;
                                        var _ret$14 = Kind$Term$ref$("Int.from_nat");
                                        var _ret$15 = Kind$Term$app$(_ret$14, Kind$Term$nat$($4642));
                                        var self = $4641;
                                        if (self) {
                                            var $4644 = _ret$15;
                                            var $4643 = $4644;
                                        } else {
                                            var _inv$16 = Kind$Term$ref$("Int.neg");
                                            var $4645 = Kind$Term$app$(_inv$16, _ret$15);
                                            var $4643 = $4645;
                                        };
                                        var _term$12 = $4643;
                                        break;
                                };
                                var self = Kind$Parser$stop$($4624, $4637, $4638);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4646 = self.idx;
                                        var $4647 = self.code;
                                        var $4648 = self.err;
                                        var $4649 = Parser$Reply$error$($4646, $4647, $4648);
                                        var $4640 = $4649;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4650 = self.idx;
                                        var $4651 = self.code;
                                        var $4652 = self.val;
                                        var $4653 = Parser$Reply$value$($4650, $4651, Kind$Term$ori$($4652, _term$12));
                                        var $4640 = $4653;
                                        break;
                                };
                                var $4632 = $4640;
                                break;
                        };
                        var $4625 = $4632;
                        break;
                };
                var $4617 = $4625;
                break;
        };
        return $4617;
    };
    const Kind$Parser$int = x0 => x1 => Kind$Parser$int$(x0, x1);

    function Kind$Parser$machine_integer$signed$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4654 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4656 = self.idx;
                    var $4657 = self.code;
                    var $4658 = self.err;
                    var $4659 = Parser$Reply$error$($4656, $4657, $4658);
                    var $4655 = $4659;
                    break;
                case 'Parser.Reply.value':
                    var $4660 = self.idx;
                    var $4661 = self.code;
                    var $4662 = self.val;
                    var self = Kind$Parser$spaces($4660)($4661);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4664 = self.idx;
                            var $4665 = self.code;
                            var $4666 = self.err;
                            var $4667 = Parser$Reply$error$($4664, $4665, $4666);
                            var $4663 = $4667;
                            break;
                        case 'Parser.Reply.value':
                            var $4668 = self.idx;
                            var $4669 = self.code;
                            var self = Kind$Parser$int$($4668, $4669);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4671 = self.idx;
                                    var $4672 = self.code;
                                    var $4673 = self.err;
                                    var $4674 = Parser$Reply$error$($4671, $4672, $4673);
                                    var $4670 = $4674;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4675 = self.idx;
                                    var $4676 = self.code;
                                    var $4677 = self.val;
                                    var self = Parser$text$(("#" + _size_str$2), $4675, $4676);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4679 = self.idx;
                                            var $4680 = self.code;
                                            var $4681 = self.err;
                                            var $4682 = Parser$Reply$error$($4679, $4680, $4681);
                                            var $4678 = $4682;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4683 = self.idx;
                                            var $4684 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Int.to_i" + _size_str$2));
                                            var _term$18 = Kind$Term$app$(_term$17, $4677);
                                            var self = Kind$Parser$stop$($4662, $4683, $4684);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4686 = self.idx;
                                                    var $4687 = self.code;
                                                    var $4688 = self.err;
                                                    var $4689 = Parser$Reply$error$($4686, $4687, $4688);
                                                    var $4685 = $4689;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4690 = self.idx;
                                                    var $4691 = self.code;
                                                    var $4692 = self.val;
                                                    var $4693 = Parser$Reply$value$($4690, $4691, Kind$Term$ori$($4692, _term$18));
                                                    var $4685 = $4693;
                                                    break;
                                            };
                                            var $4678 = $4685;
                                            break;
                                    };
                                    var $4670 = $4678;
                                    break;
                            };
                            var $4663 = $4670;
                            break;
                    };
                    var $4655 = $4663;
                    break;
            };
            return $4655;
        });
        return $4654;
    };
    const Kind$Parser$machine_integer$signed = x0 => Kind$Parser$machine_integer$signed$(x0);

    function Parser$hex_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4695 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4694 = $4695;
        } else {
            var $4696 = self.charCodeAt(0);
            var $4697 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($4696 === 48);
            if (self) {
                var $4699 = Parser$Reply$value$(_sidx$5, $4697, 0n);
                var $4698 = $4699;
            } else {
                var self = ($4696 === 49);
                if (self) {
                    var $4701 = Parser$Reply$value$(_sidx$5, $4697, 1n);
                    var $4700 = $4701;
                } else {
                    var self = ($4696 === 50);
                    if (self) {
                        var $4703 = Parser$Reply$value$(_sidx$5, $4697, 2n);
                        var $4702 = $4703;
                    } else {
                        var self = ($4696 === 51);
                        if (self) {
                            var $4705 = Parser$Reply$value$(_sidx$5, $4697, 3n);
                            var $4704 = $4705;
                        } else {
                            var self = ($4696 === 52);
                            if (self) {
                                var $4707 = Parser$Reply$value$(_sidx$5, $4697, 4n);
                                var $4706 = $4707;
                            } else {
                                var self = ($4696 === 53);
                                if (self) {
                                    var $4709 = Parser$Reply$value$(_sidx$5, $4697, 5n);
                                    var $4708 = $4709;
                                } else {
                                    var self = ($4696 === 54);
                                    if (self) {
                                        var $4711 = Parser$Reply$value$(_sidx$5, $4697, 6n);
                                        var $4710 = $4711;
                                    } else {
                                        var self = ($4696 === 55);
                                        if (self) {
                                            var $4713 = Parser$Reply$value$(_sidx$5, $4697, 7n);
                                            var $4712 = $4713;
                                        } else {
                                            var self = ($4696 === 56);
                                            if (self) {
                                                var $4715 = Parser$Reply$value$(_sidx$5, $4697, 8n);
                                                var $4714 = $4715;
                                            } else {
                                                var self = ($4696 === 57);
                                                if (self) {
                                                    var $4717 = Parser$Reply$value$(_sidx$5, $4697, 9n);
                                                    var $4716 = $4717;
                                                } else {
                                                    var self = ($4696 === 97);
                                                    if (self) {
                                                        var $4719 = Parser$Reply$value$(_sidx$5, $4697, 10n);
                                                        var $4718 = $4719;
                                                    } else {
                                                        var self = ($4696 === 98);
                                                        if (self) {
                                                            var $4721 = Parser$Reply$value$(_sidx$5, $4697, 11n);
                                                            var $4720 = $4721;
                                                        } else {
                                                            var self = ($4696 === 99);
                                                            if (self) {
                                                                var $4723 = Parser$Reply$value$(_sidx$5, $4697, 12n);
                                                                var $4722 = $4723;
                                                            } else {
                                                                var self = ($4696 === 100);
                                                                if (self) {
                                                                    var $4725 = Parser$Reply$value$(_sidx$5, $4697, 13n);
                                                                    var $4724 = $4725;
                                                                } else {
                                                                    var self = ($4696 === 101);
                                                                    if (self) {
                                                                        var $4727 = Parser$Reply$value$(_sidx$5, $4697, 14n);
                                                                        var $4726 = $4727;
                                                                    } else {
                                                                        var self = ($4696 === 102);
                                                                        if (self) {
                                                                            var $4729 = Parser$Reply$value$(_sidx$5, $4697, 15n);
                                                                            var $4728 = $4729;
                                                                        } else {
                                                                            var self = ($4696 === 65);
                                                                            if (self) {
                                                                                var $4731 = Parser$Reply$value$(_sidx$5, $4697, 10n);
                                                                                var $4730 = $4731;
                                                                            } else {
                                                                                var self = ($4696 === 66);
                                                                                if (self) {
                                                                                    var $4733 = Parser$Reply$value$(_sidx$5, $4697, 11n);
                                                                                    var $4732 = $4733;
                                                                                } else {
                                                                                    var self = ($4696 === 67);
                                                                                    if (self) {
                                                                                        var $4735 = Parser$Reply$value$(_sidx$5, $4697, 12n);
                                                                                        var $4734 = $4735;
                                                                                    } else {
                                                                                        var self = ($4696 === 68);
                                                                                        if (self) {
                                                                                            var $4737 = Parser$Reply$value$(_sidx$5, $4697, 13n);
                                                                                            var $4736 = $4737;
                                                                                        } else {
                                                                                            var self = ($4696 === 69);
                                                                                            if (self) {
                                                                                                var $4739 = Parser$Reply$value$(_sidx$5, $4697, 14n);
                                                                                                var $4738 = $4739;
                                                                                            } else {
                                                                                                var self = ($4696 === 70);
                                                                                                if (self) {
                                                                                                    var $4741 = Parser$Reply$value$(_sidx$5, $4697, 15n);
                                                                                                    var $4740 = $4741;
                                                                                                } else {
                                                                                                    var $4742 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                                                                    var $4740 = $4742;
                                                                                                };
                                                                                                var $4738 = $4740;
                                                                                            };
                                                                                            var $4736 = $4738;
                                                                                        };
                                                                                        var $4734 = $4736;
                                                                                    };
                                                                                    var $4732 = $4734;
                                                                                };
                                                                                var $4730 = $4732;
                                                                            };
                                                                            var $4728 = $4730;
                                                                        };
                                                                        var $4726 = $4728;
                                                                    };
                                                                    var $4724 = $4726;
                                                                };
                                                                var $4722 = $4724;
                                                            };
                                                            var $4720 = $4722;
                                                        };
                                                        var $4718 = $4720;
                                                    };
                                                    var $4716 = $4718;
                                                };
                                                var $4714 = $4716;
                                            };
                                            var $4712 = $4714;
                                        };
                                        var $4710 = $4712;
                                    };
                                    var $4708 = $4710;
                                };
                                var $4706 = $4708;
                            };
                            var $4704 = $4706;
                        };
                        var $4702 = $4704;
                    };
                    var $4700 = $4702;
                };
                var $4698 = $4700;
            };
            var $4694 = $4698;
        };
        return $4694;
    };
    const Parser$hex_digit = x0 => x1 => Parser$hex_digit$(x0, x1);

    function Parser$hex_nat$(_idx$1, _code$2) {
        var self = Parser$text$("0x", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4744 = self.idx;
                var $4745 = self.code;
                var $4746 = self.err;
                var $4747 = Parser$Reply$error$($4744, $4745, $4746);
                var $4743 = $4747;
                break;
            case 'Parser.Reply.value':
                var $4748 = self.idx;
                var $4749 = self.code;
                var self = Parser$many1$(Parser$hex_digit, $4748, $4749);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4751 = self.idx;
                        var $4752 = self.code;
                        var $4753 = self.err;
                        var $4754 = Parser$Reply$error$($4751, $4752, $4753);
                        var $4750 = $4754;
                        break;
                    case 'Parser.Reply.value':
                        var $4755 = self.idx;
                        var $4756 = self.code;
                        var $4757 = self.val;
                        var $4758 = Parser$Reply$value$($4755, $4756, Nat$from_base$(16n, $4757));
                        var $4750 = $4758;
                        break;
                };
                var $4743 = $4750;
                break;
        };
        return $4743;
    };
    const Parser$hex_nat = x0 => x1 => Parser$hex_nat$(x0, x1);

    function Kind$Parser$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4760 = self.idx;
                var $4761 = self.code;
                var $4762 = self.err;
                var $4763 = Parser$Reply$error$($4760, $4761, $4762);
                var $4759 = $4763;
                break;
            case 'Parser.Reply.value':
                var $4764 = self.idx;
                var $4765 = self.code;
                var $4766 = self.val;
                var self = Kind$Parser$spaces($4764)($4765);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4768 = self.idx;
                        var $4769 = self.code;
                        var $4770 = self.err;
                        var $4771 = Parser$Reply$error$($4768, $4769, $4770);
                        var $4767 = $4771;
                        break;
                    case 'Parser.Reply.value':
                        var $4772 = self.idx;
                        var $4773 = self.code;
                        var self = Parser$first_of$(List$cons$(Parser$hex_nat, List$cons$(Parser$nat, List$nil)))($4772)($4773);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4775 = self.idx;
                                var $4776 = self.code;
                                var $4777 = self.err;
                                var $4778 = Parser$Reply$error$($4775, $4776, $4777);
                                var $4774 = $4778;
                                break;
                            case 'Parser.Reply.value':
                                var $4779 = self.idx;
                                var $4780 = self.code;
                                var $4781 = self.val;
                                var self = Kind$Parser$stop$($4766, $4779, $4780);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4783 = self.idx;
                                        var $4784 = self.code;
                                        var $4785 = self.err;
                                        var $4786 = Parser$Reply$error$($4783, $4784, $4785);
                                        var $4782 = $4786;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4787 = self.idx;
                                        var $4788 = self.code;
                                        var $4789 = self.val;
                                        var $4790 = Parser$Reply$value$($4787, $4788, Kind$Term$ori$($4789, Kind$Term$nat$($4781)));
                                        var $4782 = $4790;
                                        break;
                                };
                                var $4774 = $4782;
                                break;
                        };
                        var $4767 = $4774;
                        break;
                };
                var $4759 = $4767;
                break;
        };
        return $4759;
    };
    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);

    function Kind$Parser$machine_integer$unsigned$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4791 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4793 = self.idx;
                    var $4794 = self.code;
                    var $4795 = self.err;
                    var $4796 = Parser$Reply$error$($4793, $4794, $4795);
                    var $4792 = $4796;
                    break;
                case 'Parser.Reply.value':
                    var $4797 = self.idx;
                    var $4798 = self.code;
                    var $4799 = self.val;
                    var self = Kind$Parser$spaces($4797)($4798);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4801 = self.idx;
                            var $4802 = self.code;
                            var $4803 = self.err;
                            var $4804 = Parser$Reply$error$($4801, $4802, $4803);
                            var $4800 = $4804;
                            break;
                        case 'Parser.Reply.value':
                            var $4805 = self.idx;
                            var $4806 = self.code;
                            var self = Kind$Parser$nat$($4805, $4806);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4808 = self.idx;
                                    var $4809 = self.code;
                                    var $4810 = self.err;
                                    var $4811 = Parser$Reply$error$($4808, $4809, $4810);
                                    var $4807 = $4811;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4812 = self.idx;
                                    var $4813 = self.code;
                                    var $4814 = self.val;
                                    var self = Parser$text$(("#" + Nat$show$(_size$1)), $4812, $4813);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4816 = self.idx;
                                            var $4817 = self.code;
                                            var $4818 = self.err;
                                            var $4819 = Parser$Reply$error$($4816, $4817, $4818);
                                            var $4815 = $4819;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4820 = self.idx;
                                            var $4821 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Nat.to_u" + Nat$show$(_size$1)));
                                            var _term$18 = Kind$Term$app$(_term$17, $4814);
                                            var self = Kind$Parser$stop$($4799, $4820, $4821);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4823 = self.idx;
                                                    var $4824 = self.code;
                                                    var $4825 = self.err;
                                                    var $4826 = Parser$Reply$error$($4823, $4824, $4825);
                                                    var $4822 = $4826;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4827 = self.idx;
                                                    var $4828 = self.code;
                                                    var $4829 = self.val;
                                                    var $4830 = Parser$Reply$value$($4827, $4828, Kind$Term$ori$($4829, _term$18));
                                                    var $4822 = $4830;
                                                    break;
                                            };
                                            var $4815 = $4822;
                                            break;
                                    };
                                    var $4807 = $4815;
                                    break;
                            };
                            var $4800 = $4807;
                            break;
                    };
                    var $4792 = $4800;
                    break;
            };
            return $4792;
        });
        return $4791;
    };
    const Kind$Parser$machine_integer$unsigned = x0 => Kind$Parser$machine_integer$unsigned$(x0);

    function Kind$Parser$u64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4832 = self.idx;
                var $4833 = self.code;
                var $4834 = self.err;
                var $4835 = Parser$Reply$error$($4832, $4833, $4834);
                var $4831 = $4835;
                break;
            case 'Parser.Reply.value':
                var $4836 = self.idx;
                var $4837 = self.code;
                var $4838 = self.val;
                var self = Kind$Parser$spaces($4836)($4837);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4840 = self.idx;
                        var $4841 = self.code;
                        var $4842 = self.err;
                        var $4843 = Parser$Reply$error$($4840, $4841, $4842);
                        var $4839 = $4843;
                        break;
                    case 'Parser.Reply.value':
                        var $4844 = self.idx;
                        var $4845 = self.code;
                        var self = Parser$nat$($4844, $4845);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4847 = self.idx;
                                var $4848 = self.code;
                                var $4849 = self.err;
                                var $4850 = Parser$Reply$error$($4847, $4848, $4849);
                                var $4846 = $4850;
                                break;
                            case 'Parser.Reply.value':
                                var $4851 = self.idx;
                                var $4852 = self.code;
                                var $4853 = self.val;
                                var self = Parser$text$("l", $4851, $4852);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4855 = self.idx;
                                        var $4856 = self.code;
                                        var $4857 = self.err;
                                        var $4858 = Parser$Reply$error$($4855, $4856, $4857);
                                        var $4854 = $4858;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4859 = self.idx;
                                        var $4860 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u64");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4853));
                                        var self = Kind$Parser$stop$($4838, $4859, $4860);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4862 = self.idx;
                                                var $4863 = self.code;
                                                var $4864 = self.err;
                                                var $4865 = Parser$Reply$error$($4862, $4863, $4864);
                                                var $4861 = $4865;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4866 = self.idx;
                                                var $4867 = self.code;
                                                var $4868 = self.val;
                                                var $4869 = Parser$Reply$value$($4866, $4867, Kind$Term$ori$($4868, _term$16));
                                                var $4861 = $4869;
                                                break;
                                        };
                                        var $4854 = $4861;
                                        break;
                                };
                                var $4846 = $4854;
                                break;
                        };
                        var $4839 = $4846;
                        break;
                };
                var $4831 = $4839;
                break;
        };
        return $4831;
    };
    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);

    function Kind$Parser$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4871 = self.idx;
                var $4872 = self.code;
                var $4873 = self.err;
                var $4874 = Parser$Reply$error$($4871, $4872, $4873);
                var $4870 = $4874;
                break;
            case 'Parser.Reply.value':
                var $4875 = self.idx;
                var $4876 = self.code;
                var $4877 = self.val;
                var self = Kind$Parser$spaces($4875)($4876);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4879 = self.idx;
                        var $4880 = self.code;
                        var $4881 = self.err;
                        var $4882 = Parser$Reply$error$($4879, $4880, $4881);
                        var $4878 = $4882;
                        break;
                    case 'Parser.Reply.value':
                        var $4883 = self.idx;
                        var $4884 = self.code;
                        var self = Parser$nat$($4883, $4884);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4886 = self.idx;
                                var $4887 = self.code;
                                var $4888 = self.err;
                                var $4889 = Parser$Reply$error$($4886, $4887, $4888);
                                var $4885 = $4889;
                                break;
                            case 'Parser.Reply.value':
                                var $4890 = self.idx;
                                var $4891 = self.code;
                                var $4892 = self.val;
                                var self = Parser$text$("u", $4890, $4891);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4894 = self.idx;
                                        var $4895 = self.code;
                                        var $4896 = self.err;
                                        var $4897 = Parser$Reply$error$($4894, $4895, $4896);
                                        var $4893 = $4897;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4898 = self.idx;
                                        var $4899 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u32");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4892));
                                        var self = Kind$Parser$stop$($4877, $4898, $4899);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4901 = self.idx;
                                                var $4902 = self.code;
                                                var $4903 = self.err;
                                                var $4904 = Parser$Reply$error$($4901, $4902, $4903);
                                                var $4900 = $4904;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4905 = self.idx;
                                                var $4906 = self.code;
                                                var $4907 = self.val;
                                                var $4908 = Parser$Reply$value$($4905, $4906, Kind$Term$ori$($4907, _term$16));
                                                var $4900 = $4908;
                                                break;
                                        };
                                        var $4893 = $4900;
                                        break;
                                };
                                var $4885 = $4893;
                                break;
                        };
                        var $4878 = $4885;
                        break;
                };
                var $4870 = $4878;
                break;
        };
        return $4870;
    };
    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);

    function Kind$Parser$u16$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4910 = self.idx;
                var $4911 = self.code;
                var $4912 = self.err;
                var $4913 = Parser$Reply$error$($4910, $4911, $4912);
                var $4909 = $4913;
                break;
            case 'Parser.Reply.value':
                var $4914 = self.idx;
                var $4915 = self.code;
                var $4916 = self.val;
                var self = Kind$Parser$spaces($4914)($4915);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4918 = self.idx;
                        var $4919 = self.code;
                        var $4920 = self.err;
                        var $4921 = Parser$Reply$error$($4918, $4919, $4920);
                        var $4917 = $4921;
                        break;
                    case 'Parser.Reply.value':
                        var $4922 = self.idx;
                        var $4923 = self.code;
                        var self = Parser$nat$($4922, $4923);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4925 = self.idx;
                                var $4926 = self.code;
                                var $4927 = self.err;
                                var $4928 = Parser$Reply$error$($4925, $4926, $4927);
                                var $4924 = $4928;
                                break;
                            case 'Parser.Reply.value':
                                var $4929 = self.idx;
                                var $4930 = self.code;
                                var $4931 = self.val;
                                var self = Parser$text$("s", $4929, $4930);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4933 = self.idx;
                                        var $4934 = self.code;
                                        var $4935 = self.err;
                                        var $4936 = Parser$Reply$error$($4933, $4934, $4935);
                                        var $4932 = $4936;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4937 = self.idx;
                                        var $4938 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u16");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4931));
                                        var self = Kind$Parser$stop$($4916, $4937, $4938);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4940 = self.idx;
                                                var $4941 = self.code;
                                                var $4942 = self.err;
                                                var $4943 = Parser$Reply$error$($4940, $4941, $4942);
                                                var $4939 = $4943;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4944 = self.idx;
                                                var $4945 = self.code;
                                                var $4946 = self.val;
                                                var $4947 = Parser$Reply$value$($4944, $4945, Kind$Term$ori$($4946, _term$16));
                                                var $4939 = $4947;
                                                break;
                                        };
                                        var $4932 = $4939;
                                        break;
                                };
                                var $4924 = $4932;
                                break;
                        };
                        var $4917 = $4924;
                        break;
                };
                var $4909 = $4917;
                break;
        };
        return $4909;
    };
    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);

    function Kind$Parser$u8$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4949 = self.idx;
                var $4950 = self.code;
                var $4951 = self.err;
                var $4952 = Parser$Reply$error$($4949, $4950, $4951);
                var $4948 = $4952;
                break;
            case 'Parser.Reply.value':
                var $4953 = self.idx;
                var $4954 = self.code;
                var $4955 = self.val;
                var self = Kind$Parser$spaces($4953)($4954);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4957 = self.idx;
                        var $4958 = self.code;
                        var $4959 = self.err;
                        var $4960 = Parser$Reply$error$($4957, $4958, $4959);
                        var $4956 = $4960;
                        break;
                    case 'Parser.Reply.value':
                        var $4961 = self.idx;
                        var $4962 = self.code;
                        var self = Parser$nat$($4961, $4962);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4964 = self.idx;
                                var $4965 = self.code;
                                var $4966 = self.err;
                                var $4967 = Parser$Reply$error$($4964, $4965, $4966);
                                var $4963 = $4967;
                                break;
                            case 'Parser.Reply.value':
                                var $4968 = self.idx;
                                var $4969 = self.code;
                                var $4970 = self.val;
                                var self = Parser$text$("b", $4968, $4969);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4972 = self.idx;
                                        var $4973 = self.code;
                                        var $4974 = self.err;
                                        var $4975 = Parser$Reply$error$($4972, $4973, $4974);
                                        var $4971 = $4975;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4976 = self.idx;
                                        var $4977 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u8");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4970));
                                        var self = Kind$Parser$stop$($4955, $4976, $4977);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4979 = self.idx;
                                                var $4980 = self.code;
                                                var $4981 = self.err;
                                                var $4982 = Parser$Reply$error$($4979, $4980, $4981);
                                                var $4978 = $4982;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4983 = self.idx;
                                                var $4984 = self.code;
                                                var $4985 = self.val;
                                                var $4986 = Parser$Reply$value$($4983, $4984, Kind$Term$ori$($4985, _term$16));
                                                var $4978 = $4986;
                                                break;
                                        };
                                        var $4971 = $4978;
                                        break;
                                };
                                var $4963 = $4971;
                                break;
                        };
                        var $4956 = $4963;
                        break;
                };
                var $4948 = $4956;
                break;
        };
        return $4948;
    };
    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);

    function Kind$Parser$reference$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4988 = self.idx;
                var $4989 = self.code;
                var $4990 = self.err;
                var $4991 = Parser$Reply$error$($4988, $4989, $4990);
                var $4987 = $4991;
                break;
            case 'Parser.Reply.value':
                var $4992 = self.idx;
                var $4993 = self.code;
                var $4994 = self.val;
                var self = Kind$Parser$name1$($4992, $4993);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4996 = self.idx;
                        var $4997 = self.code;
                        var $4998 = self.err;
                        var $4999 = Parser$Reply$error$($4996, $4997, $4998);
                        var $4995 = $4999;
                        break;
                    case 'Parser.Reply.value':
                        var $5000 = self.idx;
                        var $5001 = self.code;
                        var $5002 = self.val;
                        var self = Kind$Parser$stop$($4994, $5000, $5001);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5004 = self.idx;
                                var $5005 = self.code;
                                var $5006 = self.err;
                                var $5007 = Parser$Reply$error$($5004, $5005, $5006);
                                var $5003 = $5007;
                                break;
                            case 'Parser.Reply.value':
                                var $5008 = self.idx;
                                var $5009 = self.code;
                                var $5010 = self.val;
                                var self = ($5002 === "case");
                                if (self) {
                                    var $5012 = Parser$fail("Reserved keyword.");
                                    var $5011 = $5012;
                                } else {
                                    var self = ($5002 === "do");
                                    if (self) {
                                        var $5014 = Parser$fail("Reserved keyword.");
                                        var $5013 = $5014;
                                    } else {
                                        var self = ($5002 === "if");
                                        if (self) {
                                            var $5016 = Parser$fail("Reserved keyword.");
                                            var $5015 = $5016;
                                        } else {
                                            var self = ($5002 === "with");
                                            if (self) {
                                                var $5018 = Parser$fail("Reserved keyword.");
                                                var $5017 = $5018;
                                            } else {
                                                var self = ($5002 === "let");
                                                if (self) {
                                                    var $5020 = Parser$fail("Reserved keyword.");
                                                    var $5019 = $5020;
                                                } else {
                                                    var self = ($5002 === "def");
                                                    if (self) {
                                                        var $5022 = Parser$fail("Reserved keyword.");
                                                        var $5021 = $5022;
                                                    } else {
                                                        var self = ($5002 === "Type");
                                                        if (self) {
                                                            var $5024 = (_idx$12 => _code$13 => {
                                                                var $5025 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$typ));
                                                                return $5025;
                                                            });
                                                            var $5023 = $5024;
                                                        } else {
                                                            var self = ($5002 === "true");
                                                            if (self) {
                                                                var $5027 = (_idx$12 => _code$13 => {
                                                                    var $5028 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$ref$("Bool.true")));
                                                                    return $5028;
                                                                });
                                                                var $5026 = $5027;
                                                            } else {
                                                                var self = ($5002 === "false");
                                                                if (self) {
                                                                    var $5030 = (_idx$12 => _code$13 => {
                                                                        var $5031 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$ref$("Bool.false")));
                                                                        return $5031;
                                                                    });
                                                                    var $5029 = $5030;
                                                                } else {
                                                                    var self = ($5002 === "unit");
                                                                    if (self) {
                                                                        var $5033 = (_idx$12 => _code$13 => {
                                                                            var $5034 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$ref$("Unit.new")));
                                                                            return $5034;
                                                                        });
                                                                        var $5032 = $5033;
                                                                    } else {
                                                                        var self = ($5002 === "none");
                                                                        if (self) {
                                                                            var _term$12 = Kind$Term$ref$("Maybe.none");
                                                                            var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                            var $5036 = (_idx$14 => _code$15 => {
                                                                                var $5037 = Parser$Reply$value$(_idx$14, _code$15, Kind$Term$ori$($5010, _term$13));
                                                                                return $5037;
                                                                            });
                                                                            var $5035 = $5036;
                                                                        } else {
                                                                            var self = ($5002 === "refl");
                                                                            if (self) {
                                                                                var _term$12 = Kind$Term$ref$("Equal.refl");
                                                                                var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                                var _term$14 = Kind$Term$app$(_term$13, Kind$Term$hol$(Bits$e));
                                                                                var $5039 = (_idx$15 => _code$16 => {
                                                                                    var $5040 = Parser$Reply$value$(_idx$15, _code$16, Kind$Term$ori$($5010, _term$14));
                                                                                    return $5040;
                                                                                });
                                                                                var $5038 = $5039;
                                                                            } else {
                                                                                var $5041 = (_idx$12 => _code$13 => {
                                                                                    var $5042 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5010, Kind$Term$ref$($5002)));
                                                                                    return $5042;
                                                                                });
                                                                                var $5038 = $5041;
                                                                            };
                                                                            var $5035 = $5038;
                                                                        };
                                                                        var $5032 = $5035;
                                                                    };
                                                                    var $5029 = $5032;
                                                                };
                                                                var $5026 = $5029;
                                                            };
                                                            var $5023 = $5026;
                                                        };
                                                        var $5021 = $5023;
                                                    };
                                                    var $5019 = $5021;
                                                };
                                                var $5017 = $5019;
                                            };
                                            var $5015 = $5017;
                                        };
                                        var $5013 = $5015;
                                    };
                                    var $5011 = $5013;
                                };
                                var $5011 = $5011($5008)($5009);
                                var $5003 = $5011;
                                break;
                        };
                        var $4995 = $5003;
                        break;
                };
                var $4987 = $4995;
                break;
        };
        return $4987;
    };
    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5044 = self.idx;
                var $5045 = self.code;
                var $5046 = self.err;
                var $5047 = Parser$Reply$error$($5044, $5045, $5046);
                var $5043 = $5047;
                break;
            case 'Parser.Reply.value':
                var $5048 = self.idx;
                var $5049 = self.code;
                var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term), $5048, $5049);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5051 = self.idx;
                        var $5052 = self.code;
                        var $5053 = self.err;
                        var $5054 = Parser$Reply$error$($5051, $5052, $5053);
                        var $5050 = $5054;
                        break;
                    case 'Parser.Reply.value':
                        var $5055 = self.idx;
                        var $5056 = self.code;
                        var $5057 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5055, $5056);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5059 = self.idx;
                                var $5060 = self.code;
                                var $5061 = self.err;
                                var $5062 = Parser$Reply$error$($5059, $5060, $5061);
                                var $5058 = $5062;
                                break;
                            case 'Parser.Reply.value':
                                var $5063 = self.idx;
                                var $5064 = self.code;
                                var $5065 = self.val;
                                var _expr$14 = (() => {
                                    var $5068 = _func$2;
                                    var $5069 = $5057;
                                    let _f$15 = $5068;
                                    let _x$14;
                                    while ($5069._ === 'List.cons') {
                                        _x$14 = $5069.head;
                                        var $5068 = Kind$Term$app$(_f$15, _x$14);
                                        _f$15 = $5068;
                                        $5069 = $5069.tail;
                                    }
                                    return _f$15;
                                })();
                                var $5066 = Parser$Reply$value$($5063, $5064, Kind$Term$ori$($5065, _expr$14));
                                var $5058 = $5066;
                                break;
                        };
                        var $5050 = $5058;
                        break;
                };
                var $5043 = $5050;
                break;
        };
        return $5043;
    };
    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5071 = self.idx;
                var $5072 = self.code;
                var $5073 = self.err;
                var $5074 = Parser$Reply$error$($5071, $5072, $5073);
                var $5070 = $5074;
                break;
            case 'Parser.Reply.value':
                var $5075 = self.idx;
                var $5076 = self.code;
                var $5077 = Parser$text$(_text$1, $5075, $5076);
                var $5070 = $5077;
                break;
        };
        return $5070;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5079 = self.idx;
                var $5080 = self.code;
                var $5081 = self.err;
                var $5082 = Parser$Reply$error$($5079, $5080, $5081);
                var $5078 = $5082;
                break;
            case 'Parser.Reply.value':
                var $5083 = self.idx;
                var $5084 = self.code;
                var $5085 = self.val;
                var self = Parser$text$("<", $5083, $5084);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5087 = self.idx;
                        var $5088 = self.code;
                        var $5089 = self.err;
                        var $5090 = Parser$Reply$error$($5087, $5088, $5089);
                        var $5086 = $5090;
                        break;
                    case 'Parser.Reply.value':
                        var $5091 = self.idx;
                        var $5092 = self.code;
                        var self = Parser$until1$(Parser$spaces_text(">"), Kind$Parser$item(Kind$Parser$term), $5091, $5092);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5094 = self.idx;
                                var $5095 = self.code;
                                var $5096 = self.err;
                                var $5097 = Parser$Reply$error$($5094, $5095, $5096);
                                var $5093 = $5097;
                                break;
                            case 'Parser.Reply.value':
                                var $5098 = self.idx;
                                var $5099 = self.code;
                                var $5100 = self.val;
                                var self = Kind$Parser$stop$($5085, $5098, $5099);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5102 = self.idx;
                                        var $5103 = self.code;
                                        var $5104 = self.err;
                                        var $5105 = Parser$Reply$error$($5102, $5103, $5104);
                                        var $5101 = $5105;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5106 = self.idx;
                                        var $5107 = self.code;
                                        var $5108 = self.val;
                                        var _expr$17 = (() => {
                                            var $5111 = _func$2;
                                            var $5112 = $5100;
                                            let _f$18 = $5111;
                                            let _x$17;
                                            while ($5112._ === 'List.cons') {
                                                _x$17 = $5112.head;
                                                var $5111 = Kind$Term$app$(_f$18, _x$17);
                                                _f$18 = $5111;
                                                $5112 = $5112.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $5109 = Parser$Reply$value$($5106, $5107, Kind$Term$ori$($5108, _expr$17));
                                        var $5101 = $5109;
                                        break;
                                };
                                var $5093 = $5101;
                                break;
                        };
                        var $5086 = $5093;
                        break;
                };
                var $5078 = $5086;
                break;
        };
        return $5078;
    };
    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);

    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5114 = self.idx;
                var $5115 = self.code;
                var $5116 = self.err;
                var $5117 = Parser$Reply$error$($5114, $5115, $5116);
                var $5113 = $5117;
                break;
            case 'Parser.Reply.value':
                var $5118 = self.idx;
                var $5119 = self.code;
                var self = Kind$Parser$term$($5118, $5119);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5121 = self.idx;
                        var $5122 = self.code;
                        var $5123 = self.err;
                        var $5124 = Parser$Reply$error$($5121, $5122, $5123);
                        var $5120 = $5124;
                        break;
                    case 'Parser.Reply.value':
                        var $5125 = self.idx;
                        var $5126 = self.code;
                        var $5127 = self.val;
                        var self = Kind$Parser$text$("]", $5125, $5126);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5129 = self.idx;
                                var $5130 = self.code;
                                var $5131 = self.err;
                                var $5132 = Parser$Reply$error$($5129, $5130, $5131);
                                var $5128 = $5132;
                                break;
                            case 'Parser.Reply.value':
                                var $5133 = self.idx;
                                var $5134 = self.code;
                                var self = Kind$Parser$text$("<-", $5133, $5134);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5136 = self.idx;
                                        var $5137 = self.code;
                                        var $5138 = self.err;
                                        var $5139 = Parser$Reply$error$($5136, $5137, $5138);
                                        var $5135 = $5139;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5140 = self.idx;
                                        var $5141 = self.code;
                                        var self = Kind$Parser$term$($5140, $5141);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5143 = self.idx;
                                                var $5144 = self.code;
                                                var $5145 = self.err;
                                                var $5146 = Parser$Reply$error$($5143, $5144, $5145);
                                                var $5142 = $5146;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5147 = self.idx;
                                                var $5148 = self.code;
                                                var $5149 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5147, $5148);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5151 = self.idx;
                                                        var $5152 = self.code;
                                                        var $5153 = self.err;
                                                        var $5154 = Parser$Reply$error$($5151, $5152, $5153);
                                                        var $5150 = $5154;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5155 = self.idx;
                                                        var $5156 = self.code;
                                                        var $5157 = self.val;
                                                        var _term$23 = Kind$Term$ref$("List.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5127);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5149);
                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);
                                                        var $5158 = Parser$Reply$value$($5155, $5156, Kind$Term$ori$($5157, _term$27));
                                                        var $5150 = $5158;
                                                        break;
                                                };
                                                var $5142 = $5150;
                                                break;
                                        };
                                        var $5135 = $5142;
                                        break;
                                };
                                var $5128 = $5135;
                                break;
                        };
                        var $5120 = $5128;
                        break;
                };
                var $5113 = $5120;
                break;
        };
        return $5113;
    };
    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);

    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5160 = self.idx;
                var $5161 = self.code;
                var $5162 = self.err;
                var $5163 = Parser$Reply$error$($5160, $5161, $5162);
                var $5159 = $5163;
                break;
            case 'Parser.Reply.value':
                var $5164 = self.idx;
                var $5165 = self.code;
                var self = Kind$Parser$term$($5164, $5165);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5167 = self.idx;
                        var $5168 = self.code;
                        var $5169 = self.err;
                        var $5170 = Parser$Reply$error$($5167, $5168, $5169);
                        var $5166 = $5170;
                        break;
                    case 'Parser.Reply.value':
                        var $5171 = self.idx;
                        var $5172 = self.code;
                        var $5173 = self.val;
                        var self = Kind$Parser$text$("]", $5171, $5172);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5175 = self.idx;
                                var $5176 = self.code;
                                var $5177 = self.err;
                                var $5178 = Parser$Reply$error$($5175, $5176, $5177);
                                var $5174 = $5178;
                                break;
                            case 'Parser.Reply.value':
                                var $5179 = self.idx;
                                var $5180 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5179, $5180);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5182 = self.idx;
                                        var $5183 = self.code;
                                        var $5184 = self.err;
                                        var $5185 = Parser$Reply$error$($5182, $5183, $5184);
                                        var $5181 = $5185;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5186 = self.idx;
                                        var $5187 = self.code;
                                        var $5188 = self.val;
                                        var _term$17 = Kind$Term$ref$("List.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5173);
                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);
                                        var $5189 = Parser$Reply$value$($5186, $5187, Kind$Term$ori$($5188, _term$20));
                                        var $5181 = $5189;
                                        break;
                                };
                                var $5174 = $5181;
                                break;
                        };
                        var $5166 = $5174;
                        break;
                };
                var $5159 = $5166;
                break;
        };
        return $5159;
    };
    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);

    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5191 = self.idx;
                var $5192 = self.code;
                var $5193 = self.err;
                var $5194 = Parser$Reply$error$($5191, $5192, $5193);
                var $5190 = $5194;
                break;
            case 'Parser.Reply.value':
                var $5195 = self.idx;
                var $5196 = self.code;
                var self = Kind$Parser$term$($5195, $5196);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5198 = self.idx;
                        var $5199 = self.code;
                        var $5200 = self.err;
                        var $5201 = Parser$Reply$error$($5198, $5199, $5200);
                        var $5197 = $5201;
                        break;
                    case 'Parser.Reply.value':
                        var $5202 = self.idx;
                        var $5203 = self.code;
                        var $5204 = self.val;
                        var self = Kind$Parser$text$("}", $5202, $5203);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5206 = self.idx;
                                var $5207 = self.code;
                                var $5208 = self.err;
                                var $5209 = Parser$Reply$error$($5206, $5207, $5208);
                                var $5205 = $5209;
                                break;
                            case 'Parser.Reply.value':
                                var $5210 = self.idx;
                                var $5211 = self.code;
                                var self = Kind$Parser$text$("<-", $5210, $5211);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5213 = self.idx;
                                        var $5214 = self.code;
                                        var $5215 = self.err;
                                        var $5216 = Parser$Reply$error$($5213, $5214, $5215);
                                        var $5212 = $5216;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5217 = self.idx;
                                        var $5218 = self.code;
                                        var self = Kind$Parser$term$($5217, $5218);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5220 = self.idx;
                                                var $5221 = self.code;
                                                var $5222 = self.err;
                                                var $5223 = Parser$Reply$error$($5220, $5221, $5222);
                                                var $5219 = $5223;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5224 = self.idx;
                                                var $5225 = self.code;
                                                var $5226 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5224, $5225);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5228 = self.idx;
                                                        var $5229 = self.code;
                                                        var $5230 = self.err;
                                                        var $5231 = Parser$Reply$error$($5228, $5229, $5230);
                                                        var $5227 = $5231;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5232 = self.idx;
                                                        var $5233 = self.code;
                                                        var $5234 = self.val;
                                                        var _term$23 = Kind$Term$ref$("Map.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5204);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5226);
                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);
                                                        var $5235 = Parser$Reply$value$($5232, $5233, Kind$Term$ori$($5234, _term$27));
                                                        var $5227 = $5235;
                                                        break;
                                                };
                                                var $5219 = $5227;
                                                break;
                                        };
                                        var $5212 = $5219;
                                        break;
                                };
                                var $5205 = $5212;
                                break;
                        };
                        var $5197 = $5205;
                        break;
                };
                var $5190 = $5197;
                break;
        };
        return $5190;
    };
    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);

    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5237 = self.idx;
                var $5238 = self.code;
                var $5239 = self.err;
                var $5240 = Parser$Reply$error$($5237, $5238, $5239);
                var $5236 = $5240;
                break;
            case 'Parser.Reply.value':
                var $5241 = self.idx;
                var $5242 = self.code;
                var self = Kind$Parser$term$($5241, $5242);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5244 = self.idx;
                        var $5245 = self.code;
                        var $5246 = self.err;
                        var $5247 = Parser$Reply$error$($5244, $5245, $5246);
                        var $5243 = $5247;
                        break;
                    case 'Parser.Reply.value':
                        var $5248 = self.idx;
                        var $5249 = self.code;
                        var $5250 = self.val;
                        var self = Kind$Parser$text$("}", $5248, $5249);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5252 = self.idx;
                                var $5253 = self.code;
                                var $5254 = self.err;
                                var $5255 = Parser$Reply$error$($5252, $5253, $5254);
                                var $5251 = $5255;
                                break;
                            case 'Parser.Reply.value':
                                var $5256 = self.idx;
                                var $5257 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5256, $5257);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5259 = self.idx;
                                        var $5260 = self.code;
                                        var $5261 = self.err;
                                        var $5262 = Parser$Reply$error$($5259, $5260, $5261);
                                        var $5258 = $5262;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5263 = self.idx;
                                        var $5264 = self.code;
                                        var $5265 = self.val;
                                        var _term$17 = Kind$Term$ref$("Map.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5250);
                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);
                                        var $5266 = Parser$Reply$value$($5263, $5264, Kind$Term$ori$($5265, _term$20));
                                        var $5258 = $5266;
                                        break;
                                };
                                var $5251 = $5258;
                                break;
                        };
                        var $5243 = $5251;
                        break;
                };
                var $5236 = $5243;
                break;
        };
        return $5236;
    };
    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);

    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5268 = self.idx;
                var $5269 = self.code;
                var $5270 = self.err;
                var $5271 = Parser$Reply$error$($5268, $5269, $5270);
                var $5267 = $5271;
                break;
            case 'Parser.Reply.value':
                var $5272 = self.idx;
                var $5273 = self.code;
                var self = Kind$Parser$term$($5272, $5273);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5275 = self.idx;
                        var $5276 = self.code;
                        var $5277 = self.err;
                        var $5278 = Parser$Reply$error$($5275, $5276, $5277);
                        var $5274 = $5278;
                        break;
                    case 'Parser.Reply.value':
                        var $5279 = self.idx;
                        var $5280 = self.code;
                        var $5281 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5279, $5280);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5283 = self.idx;
                                var $5284 = self.code;
                                var $5285 = self.err;
                                var $5286 = Parser$Reply$error$($5283, $5284, $5285);
                                var $5282 = $5286;
                                break;
                            case 'Parser.Reply.value':
                                var $5287 = self.idx;
                                var $5288 = self.code;
                                var $5289 = self.val;
                                var $5290 = Parser$Reply$value$($5287, $5288, Kind$Term$ori$($5289, Kind$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $5291 = $5281;
                                    return $5291;
                                }))));
                                var $5282 = $5290;
                                break;
                        };
                        var $5274 = $5282;
                        break;
                };
                var $5267 = $5274;
                break;
        };
        return $5267;
    };
    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);

    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5293 = self.idx;
                var $5294 = self.code;
                var $5295 = self.err;
                var $5296 = Parser$Reply$error$($5293, $5294, $5295);
                var $5292 = $5296;
                break;
            case 'Parser.Reply.value':
                var $5297 = self.idx;
                var $5298 = self.code;
                var self = Parser$text$(" ", $5297, $5298);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5300 = self.idx;
                        var $5301 = self.code;
                        var $5302 = self.err;
                        var $5303 = Parser$Reply$error$($5300, $5301, $5302);
                        var $5299 = $5303;
                        break;
                    case 'Parser.Reply.value':
                        var $5304 = self.idx;
                        var $5305 = self.code;
                        var self = Kind$Parser$term$($5304, $5305);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5307 = self.idx;
                                var $5308 = self.code;
                                var $5309 = self.err;
                                var $5310 = Parser$Reply$error$($5307, $5308, $5309);
                                var $5306 = $5310;
                                break;
                            case 'Parser.Reply.value':
                                var $5311 = self.idx;
                                var $5312 = self.code;
                                var $5313 = self.val;
                                var self = Kind$Parser$stop$(_init$3, $5311, $5312);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5315 = self.idx;
                                        var $5316 = self.code;
                                        var $5317 = self.err;
                                        var $5318 = Parser$Reply$error$($5315, $5316, $5317);
                                        var $5314 = $5318;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5319 = self.idx;
                                        var $5320 = self.code;
                                        var $5321 = self.val;
                                        var _term$19 = Kind$Term$ref$(_ref$2);
                                        var _term$20 = Kind$Term$app$(_term$19, _val0$4);
                                        var _term$21 = Kind$Term$app$(_term$20, $5313);
                                        var $5322 = Parser$Reply$value$($5319, $5320, Kind$Term$ori$($5321, _term$21));
                                        var $5314 = $5322;
                                        break;
                                };
                                var $5306 = $5314;
                                break;
                        };
                        var $5299 = $5306;
                        break;
                };
                var $5292 = $5299;
                break;
        };
        return $5292;
    };
    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
    const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
    const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
    const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
    const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
    const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
    const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
    const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
    const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
    const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
    const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
    const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");

    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("<>", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5324 = self.idx;
                var $5325 = self.code;
                var $5326 = self.err;
                var $5327 = Parser$Reply$error$($5324, $5325, $5326);
                var $5323 = $5327;
                break;
            case 'Parser.Reply.value':
                var $5328 = self.idx;
                var $5329 = self.code;
                var self = Kind$Parser$term$($5328, $5329);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5331 = self.idx;
                        var $5332 = self.code;
                        var $5333 = self.err;
                        var $5334 = Parser$Reply$error$($5331, $5332, $5333);
                        var $5330 = $5334;
                        break;
                    case 'Parser.Reply.value':
                        var $5335 = self.idx;
                        var $5336 = self.code;
                        var $5337 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5335, $5336);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5339 = self.idx;
                                var $5340 = self.code;
                                var $5341 = self.err;
                                var $5342 = Parser$Reply$error$($5339, $5340, $5341);
                                var $5338 = $5342;
                                break;
                            case 'Parser.Reply.value':
                                var $5343 = self.idx;
                                var $5344 = self.code;
                                var $5345 = self.val;
                                var _term$14 = Kind$Term$ref$("Maybe.default");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5337);
                                var $5346 = Parser$Reply$value$($5343, $5344, Kind$Term$ori$($5345, _term$17));
                                var $5338 = $5346;
                                break;
                        };
                        var $5330 = $5338;
                        break;
                };
                var $5323 = $5330;
                break;
        };
        return $5323;
    };
    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);

    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5348 = self.idx;
                var $5349 = self.code;
                var $5350 = self.err;
                var $5351 = Parser$Reply$error$($5348, $5349, $5350);
                var $5347 = $5351;
                break;
            case 'Parser.Reply.value':
                var $5352 = self.idx;
                var $5353 = self.code;
                var self = Kind$Parser$term$($5352, $5353);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5355 = self.idx;
                        var $5356 = self.code;
                        var $5357 = self.err;
                        var $5358 = Parser$Reply$error$($5355, $5356, $5357);
                        var $5354 = $5358;
                        break;
                    case 'Parser.Reply.value':
                        var $5359 = self.idx;
                        var $5360 = self.code;
                        var $5361 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5359, $5360);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5363 = self.idx;
                                var $5364 = self.code;
                                var $5365 = self.err;
                                var $5366 = Parser$Reply$error$($5363, $5364, $5365);
                                var $5362 = $5366;
                                break;
                            case 'Parser.Reply.value':
                                var $5367 = self.idx;
                                var $5368 = self.code;
                                var _term$14 = Kind$Term$ref$("List.cons");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _head$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5361);
                                var self = Kind$Parser$stop$(_init$1, $5367, $5368);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5370 = self.idx;
                                        var $5371 = self.code;
                                        var $5372 = self.err;
                                        var $5373 = Parser$Reply$error$($5370, $5371, $5372);
                                        var $5369 = $5373;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5374 = self.idx;
                                        var $5375 = self.code;
                                        var $5376 = self.val;
                                        var $5377 = Parser$Reply$value$($5374, $5375, Kind$Term$ori$($5376, _term$17));
                                        var $5369 = $5377;
                                        break;
                                };
                                var $5362 = $5369;
                                break;
                        };
                        var $5354 = $5362;
                        break;
                };
                var $5347 = $5354;
                break;
        };
        return $5347;
    };
    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);

    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5379 = self.idx;
                var $5380 = self.code;
                var $5381 = self.err;
                var $5382 = Parser$Reply$error$($5379, $5380, $5381);
                var $5378 = $5382;
                break;
            case 'Parser.Reply.value':
                var $5383 = self.idx;
                var $5384 = self.code;
                var self = Kind$Parser$term$($5383, $5384);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5386 = self.idx;
                        var $5387 = self.code;
                        var $5388 = self.err;
                        var $5389 = Parser$Reply$error$($5386, $5387, $5388);
                        var $5385 = $5389;
                        break;
                    case 'Parser.Reply.value':
                        var $5390 = self.idx;
                        var $5391 = self.code;
                        var $5392 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5390, $5391);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5394 = self.idx;
                                var $5395 = self.code;
                                var $5396 = self.err;
                                var $5397 = Parser$Reply$error$($5394, $5395, $5396);
                                var $5393 = $5397;
                                break;
                            case 'Parser.Reply.value':
                                var $5398 = self.idx;
                                var $5399 = self.code;
                                var _term$14 = Kind$Term$ref$("List.concat");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5392);
                                var self = Kind$Parser$stop$(_init$1, $5398, $5399);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5401 = self.idx;
                                        var $5402 = self.code;
                                        var $5403 = self.err;
                                        var $5404 = Parser$Reply$error$($5401, $5402, $5403);
                                        var $5400 = $5404;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5405 = self.idx;
                                        var $5406 = self.code;
                                        var $5407 = self.val;
                                        var $5408 = Parser$Reply$value$($5405, $5406, Kind$Term$ori$($5407, _term$17));
                                        var $5400 = $5408;
                                        break;
                                };
                                var $5393 = $5400;
                                break;
                        };
                        var $5385 = $5393;
                        break;
                };
                var $5378 = $5385;
                break;
        };
        return $5378;
    };
    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);

    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5410 = self.idx;
                var $5411 = self.code;
                var $5412 = self.err;
                var $5413 = Parser$Reply$error$($5410, $5411, $5412);
                var $5409 = $5413;
                break;
            case 'Parser.Reply.value':
                var $5414 = self.idx;
                var $5415 = self.code;
                var self = Kind$Parser$term$($5414, $5415);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5417 = self.idx;
                        var $5418 = self.code;
                        var $5419 = self.err;
                        var $5420 = Parser$Reply$error$($5417, $5418, $5419);
                        var $5416 = $5420;
                        break;
                    case 'Parser.Reply.value':
                        var $5421 = self.idx;
                        var $5422 = self.code;
                        var $5423 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5421, $5422);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5425 = self.idx;
                                var $5426 = self.code;
                                var $5427 = self.err;
                                var $5428 = Parser$Reply$error$($5425, $5426, $5427);
                                var $5424 = $5428;
                                break;
                            case 'Parser.Reply.value':
                                var $5429 = self.idx;
                                var $5430 = self.code;
                                var _term$14 = Kind$Term$ref$("String.concat");
                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);
                                var _term$16 = Kind$Term$app$(_term$15, $5423);
                                var self = Kind$Parser$stop$(_init$1, $5429, $5430);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5432 = self.idx;
                                        var $5433 = self.code;
                                        var $5434 = self.err;
                                        var $5435 = Parser$Reply$error$($5432, $5433, $5434);
                                        var $5431 = $5435;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5436 = self.idx;
                                        var $5437 = self.code;
                                        var $5438 = self.val;
                                        var $5439 = Parser$Reply$value$($5436, $5437, Kind$Term$ori$($5438, _term$16));
                                        var $5431 = $5439;
                                        break;
                                };
                                var $5424 = $5431;
                                break;
                        };
                        var $5416 = $5424;
                        break;
                };
                var $5409 = $5416;
                break;
        };
        return $5409;
    };
    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);

    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5441 = self.idx;
                var $5442 = self.code;
                var $5443 = self.err;
                var $5444 = Parser$Reply$error$($5441, $5442, $5443);
                var $5440 = $5444;
                break;
            case 'Parser.Reply.value':
                var $5445 = self.idx;
                var $5446 = self.code;
                var self = Kind$Parser$term$($5445, $5446);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5448 = self.idx;
                        var $5449 = self.code;
                        var $5450 = self.err;
                        var $5451 = Parser$Reply$error$($5448, $5449, $5450);
                        var $5447 = $5451;
                        break;
                    case 'Parser.Reply.value':
                        var $5452 = self.idx;
                        var $5453 = self.code;
                        var $5454 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5452, $5453);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5456 = self.idx;
                                var $5457 = self.code;
                                var $5458 = self.err;
                                var $5459 = Parser$Reply$error$($5456, $5457, $5458);
                                var $5455 = $5459;
                                break;
                            case 'Parser.Reply.value':
                                var $5460 = self.idx;
                                var $5461 = self.code;
                                var $5462 = self.val;
                                var _term$14 = Kind$Term$ref$("Sigma.new");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);
                                var _term$18 = Kind$Term$app$(_term$17, $5454);
                                var $5463 = Parser$Reply$value$($5460, $5461, Kind$Term$ori$($5462, _term$18));
                                var $5455 = $5463;
                                break;
                        };
                        var $5447 = $5455;
                        break;
                };
                var $5440 = $5447;
                break;
        };
        return $5440;
    };
    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);

    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5465 = self.idx;
                var $5466 = self.code;
                var $5467 = self.err;
                var $5468 = Parser$Reply$error$($5465, $5466, $5467);
                var $5464 = $5468;
                break;
            case 'Parser.Reply.value':
                var $5469 = self.idx;
                var $5470 = self.code;
                var self = Kind$Parser$term$($5469, $5470);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5472 = self.idx;
                        var $5473 = self.code;
                        var $5474 = self.err;
                        var $5475 = Parser$Reply$error$($5472, $5473, $5474);
                        var $5471 = $5475;
                        break;
                    case 'Parser.Reply.value':
                        var $5476 = self.idx;
                        var $5477 = self.code;
                        var $5478 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5476, $5477);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5480 = self.idx;
                                var $5481 = self.code;
                                var $5482 = self.err;
                                var $5483 = Parser$Reply$error$($5480, $5481, $5482);
                                var $5479 = $5483;
                                break;
                            case 'Parser.Reply.value':
                                var $5484 = self.idx;
                                var $5485 = self.code;
                                var $5486 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5478);
                                var $5487 = Parser$Reply$value$($5484, $5485, Kind$Term$ori$($5486, _term$17));
                                var $5479 = $5487;
                                break;
                        };
                        var $5471 = $5479;
                        break;
                };
                var $5464 = $5471;
                break;
        };
        return $5464;
    };
    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);

    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5489 = self.idx;
                var $5490 = self.code;
                var $5491 = self.err;
                var $5492 = Parser$Reply$error$($5489, $5490, $5491);
                var $5488 = $5492;
                break;
            case 'Parser.Reply.value':
                var $5493 = self.idx;
                var $5494 = self.code;
                var self = Kind$Parser$term$($5493, $5494);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5496 = self.idx;
                        var $5497 = self.code;
                        var $5498 = self.err;
                        var $5499 = Parser$Reply$error$($5496, $5497, $5498);
                        var $5495 = $5499;
                        break;
                    case 'Parser.Reply.value':
                        var $5500 = self.idx;
                        var $5501 = self.code;
                        var $5502 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5500, $5501);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5504 = self.idx;
                                var $5505 = self.code;
                                var $5506 = self.err;
                                var $5507 = Parser$Reply$error$($5504, $5505, $5506);
                                var $5503 = $5507;
                                break;
                            case 'Parser.Reply.value':
                                var $5508 = self.idx;
                                var $5509 = self.code;
                                var $5510 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5502);
                                var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"), _term$17);
                                var $5511 = Parser$Reply$value$($5508, $5509, Kind$Term$ori$($5510, _term$18));
                                var $5503 = $5511;
                                break;
                        };
                        var $5495 = $5503;
                        break;
                };
                var $5488 = $5495;
                break;
        };
        return $5488;
    };
    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);

    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5513 = self.idx;
                var $5514 = self.code;
                var $5515 = self.err;
                var $5516 = Parser$Reply$error$($5513, $5514, $5515);
                var $5512 = $5516;
                break;
            case 'Parser.Reply.value':
                var $5517 = self.idx;
                var $5518 = self.code;
                var self = Kind$Parser$text$("rewrite", $5517, $5518);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5520 = self.idx;
                        var $5521 = self.code;
                        var $5522 = self.err;
                        var $5523 = Parser$Reply$error$($5520, $5521, $5522);
                        var $5519 = $5523;
                        break;
                    case 'Parser.Reply.value':
                        var $5524 = self.idx;
                        var $5525 = self.code;
                        var self = Kind$Parser$name1$($5524, $5525);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5527 = self.idx;
                                var $5528 = self.code;
                                var $5529 = self.err;
                                var $5530 = Parser$Reply$error$($5527, $5528, $5529);
                                var $5526 = $5530;
                                break;
                            case 'Parser.Reply.value':
                                var $5531 = self.idx;
                                var $5532 = self.code;
                                var $5533 = self.val;
                                var self = Kind$Parser$text$("in", $5531, $5532);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5535 = self.idx;
                                        var $5536 = self.code;
                                        var $5537 = self.err;
                                        var $5538 = Parser$Reply$error$($5535, $5536, $5537);
                                        var $5534 = $5538;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5539 = self.idx;
                                        var $5540 = self.code;
                                        var self = Kind$Parser$term$($5539, $5540);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5542 = self.idx;
                                                var $5543 = self.code;
                                                var $5544 = self.err;
                                                var $5545 = Parser$Reply$error$($5542, $5543, $5544);
                                                var $5541 = $5545;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5546 = self.idx;
                                                var $5547 = self.code;
                                                var $5548 = self.val;
                                                var self = Kind$Parser$text$("with", $5546, $5547);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5550 = self.idx;
                                                        var $5551 = self.code;
                                                        var $5552 = self.err;
                                                        var $5553 = Parser$Reply$error$($5550, $5551, $5552);
                                                        var $5549 = $5553;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5554 = self.idx;
                                                        var $5555 = self.code;
                                                        var self = Kind$Parser$term$($5554, $5555);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5557 = self.idx;
                                                                var $5558 = self.code;
                                                                var $5559 = self.err;
                                                                var $5560 = Parser$Reply$error$($5557, $5558, $5559);
                                                                var $5556 = $5560;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5561 = self.idx;
                                                                var $5562 = self.code;
                                                                var $5563 = self.val;
                                                                var self = Kind$Parser$stop$(_init$1, $5561, $5562);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $5565 = self.idx;
                                                                        var $5566 = self.code;
                                                                        var $5567 = self.err;
                                                                        var $5568 = Parser$Reply$error$($5565, $5566, $5567);
                                                                        var $5564 = $5568;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $5569 = self.idx;
                                                                        var $5570 = self.code;
                                                                        var $5571 = self.val;
                                                                        var _term$29 = Kind$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                        var _term$33 = Kind$Term$app$(_term$32, $5563);
                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($5533, (_x$34 => {
                                                                            var $5573 = $5548;
                                                                            return $5573;
                                                                        })));
                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);
                                                                        var $5572 = Parser$Reply$value$($5569, $5570, Kind$Term$ori$($5571, _term$35));
                                                                        var $5564 = $5572;
                                                                        break;
                                                                };
                                                                var $5556 = $5564;
                                                                break;
                                                        };
                                                        var $5549 = $5556;
                                                        break;
                                                };
                                                var $5541 = $5549;
                                                break;
                                        };
                                        var $5534 = $5541;
                                        break;
                                };
                                var $5526 = $5534;
                                break;
                        };
                        var $5519 = $5526;
                        break;
                };
                var $5512 = $5519;
                break;
        };
        return $5512;
    };
    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);

    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5575 = self.idx;
                var $5576 = self.code;
                var $5577 = self.err;
                var $5578 = Parser$Reply$error$($5575, $5576, $5577);
                var $5574 = $5578;
                break;
            case 'Parser.Reply.value':
                var $5579 = self.idx;
                var $5580 = self.code;
                var self = Kind$Parser$term$($5579, $5580);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5582 = self.idx;
                        var $5583 = self.code;
                        var $5584 = self.err;
                        var $5585 = Parser$Reply$error$($5582, $5583, $5584);
                        var $5581 = $5585;
                        break;
                    case 'Parser.Reply.value':
                        var $5586 = self.idx;
                        var $5587 = self.code;
                        var $5588 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5586, $5587);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5590 = self.idx;
                                var $5591 = self.code;
                                var $5592 = self.err;
                                var $5593 = Parser$Reply$error$($5590, $5591, $5592);
                                var $5589 = $5593;
                                break;
                            case 'Parser.Reply.value':
                                var $5594 = self.idx;
                                var $5595 = self.code;
                                var $5596 = self.val;
                                var $5597 = Parser$Reply$value$($5594, $5595, Kind$Term$ori$($5596, Kind$Term$ann$(Bool$false, _term$2, $5588)));
                                var $5589 = $5597;
                                break;
                        };
                        var $5581 = $5589;
                        break;
                };
                var $5574 = $5581;
                break;
        };
        return $5574;
    };
    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);

    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5599 = self.idx;
                var $5600 = self.code;
                var $5601 = self.err;
                var $5602 = Parser$Reply$error$($5599, $5600, $5601);
                var $5598 = $5602;
                break;
            case 'Parser.Reply.value':
                var $5603 = self.idx;
                var $5604 = self.code;
                var self = Kind$Parser$stop$(_init$1, $5603, $5604);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5606 = self.idx;
                        var $5607 = self.code;
                        var $5608 = self.err;
                        var $5609 = Parser$Reply$error$($5606, $5607, $5608);
                        var $5605 = $5609;
                        break;
                    case 'Parser.Reply.value':
                        var $5610 = self.idx;
                        var $5611 = self.code;
                        var $5612 = self.val;
                        var $5613 = Parser$Reply$value$($5610, $5611, Kind$Term$ori$($5612, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));
                        var $5605 = $5613;
                        break;
                };
                var $5598 = $5605;
                break;
        };
        return $5598;
    };
    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);

    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $5615 = self.idx;
                        var $5616 = self.code;
                        var $5617 = self.val;
                        var $5618 = Kind$Parser$suffix$(_init$1, $5617, $5615, $5616);
                        var $5614 = $5618;
                        break;
                    case 'Parser.Reply.error':
                        var $5619 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $5614 = $5619;
                        break;
                };
                return $5614;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);

    function Kind$Parser$term$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5621 = self.idx;
                var $5622 = self.code;
                var $5623 = self.err;
                var $5624 = Parser$Reply$error$($5621, $5622, $5623);
                var $5620 = $5624;
                break;
            case 'Parser.Reply.value':
                var $5625 = self.idx;
                var $5626 = self.code;
                var $5627 = self.val;
                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string(34), List$cons$(Kind$Parser$string(96), List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$not, List$cons$(Kind$Parser$left, List$cons$(Kind$Parser$right, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$float$64, List$cons$(Kind$Parser$float$32, List$cons$(Kind$Parser$machine_integer$signed$(256n), List$cons$(Kind$Parser$machine_integer$signed$(128n), List$cons$(Kind$Parser$machine_integer$signed$(64n), List$cons$(Kind$Parser$machine_integer$signed$(32n), List$cons$(Kind$Parser$machine_integer$signed$(16n), List$cons$(Kind$Parser$machine_integer$signed$(8n), List$cons$(Kind$Parser$int, List$cons$(Kind$Parser$machine_integer$unsigned$(256n), List$cons$(Kind$Parser$machine_integer$unsigned$(128n), List$cons$(Kind$Parser$machine_integer$unsigned$(64n), List$cons$(Kind$Parser$machine_integer$unsigned$(32n), List$cons$(Kind$Parser$machine_integer$unsigned$(16n), List$cons$(Kind$Parser$machine_integer$unsigned$(8n), List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))($5625)($5626);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5629 = self.idx;
                        var $5630 = self.code;
                        var $5631 = self.err;
                        var $5632 = Parser$Reply$error$($5629, $5630, $5631);
                        var $5628 = $5632;
                        break;
                    case 'Parser.Reply.value':
                        var $5633 = self.idx;
                        var $5634 = self.code;
                        var $5635 = self.val;
                        var $5636 = Kind$Parser$suffix$($5627, $5635, $5633, $5634);
                        var $5628 = $5636;
                        break;
                };
                var $5620 = $5628;
                break;
        };
        return $5620;
    };
    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);

    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {
        var self = Kind$Parser$name$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5638 = self.idx;
                var $5639 = self.code;
                var $5640 = self.err;
                var $5641 = Parser$Reply$error$($5638, $5639, $5640);
                var $5637 = $5641;
                break;
            case 'Parser.Reply.value':
                var $5642 = self.idx;
                var $5643 = self.code;
                var $5644 = self.val;
                var self = Kind$Parser$text$(_sep$1, $5642, $5643);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5646 = self.idx;
                        var $5647 = self.code;
                        var $5648 = self.err;
                        var $5649 = Parser$Reply$error$($5646, $5647, $5648);
                        var $5645 = $5649;
                        break;
                    case 'Parser.Reply.value':
                        var $5650 = self.idx;
                        var $5651 = self.code;
                        var self = Kind$Parser$term$($5650, $5651);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5653 = self.idx;
                                var $5654 = self.code;
                                var $5655 = self.err;
                                var $5656 = Parser$Reply$error$($5653, $5654, $5655);
                                var $5652 = $5656;
                                break;
                            case 'Parser.Reply.value':
                                var $5657 = self.idx;
                                var $5658 = self.code;
                                var $5659 = self.val;
                                var $5660 = Parser$Reply$value$($5657, $5658, Pair$new$($5644, $5659));
                                var $5652 = $5660;
                                break;
                        };
                        var $5645 = $5652;
                        break;
                };
                var $5637 = $5645;
                break;
        };
        return $5637;
    };
    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);

    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {
        var $5661 = ({
            _: 'Kind.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $5661;
    };
    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);

    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$((() => {
            var self = _eras$2;
            if (self) {
                var $5663 = "<";
                return $5663;
            } else {
                var $5664 = "(";
                return $5664;
            };
        })(), _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5665 = self.idx;
                var $5666 = self.code;
                var $5667 = self.err;
                var $5668 = Parser$Reply$error$($5665, $5666, $5667);
                var $5662 = $5668;
                break;
            case 'Parser.Reply.value':
                var $5669 = self.idx;
                var $5670 = self.code;
                var self = Parser$until1$(Kind$Parser$text((() => {
                    var self = _eras$2;
                    if (self) {
                        var $5672 = ">";
                        return $5672;
                    } else {
                        var $5673 = ")";
                        return $5673;
                    };
                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $5669, $5670);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5674 = self.idx;
                        var $5675 = self.code;
                        var $5676 = self.err;
                        var $5677 = Parser$Reply$error$($5674, $5675, $5676);
                        var $5671 = $5677;
                        break;
                    case 'Parser.Reply.value':
                        var $5678 = self.idx;
                        var $5679 = self.code;
                        var $5680 = self.val;
                        var $5681 = Parser$Reply$value$($5678, $5679, List$mapped$($5680, (_pair$11 => {
                            var self = _pair$11;
                            switch (self._) {
                                case 'Pair.new':
                                    var $5683 = self.fst;
                                    var $5684 = self.snd;
                                    var $5685 = Kind$Binder$new$(_eras$2, $5683, $5684);
                                    var $5682 = $5685;
                                    break;
                            };
                            return $5682;
                        })));
                        var $5671 = $5681;
                        break;
                };
                var $5662 = $5671;
                break;
        };
        return $5662;
    };
    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $5687 = self.head;
                var $5688 = self.tail;
                var $5689 = List$cons$($5687, List$concat$($5688, _bs$3));
                var $5686 = $5689;
                break;
            case 'List.nil':
                var $5690 = _bs$3;
                var $5686 = $5690;
                break;
        };
        return $5686;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $5692 = self.head;
                var $5693 = self.tail;
                var $5694 = List$concat$($5692, List$flatten$($5693));
                var $5691 = $5694;
                break;
            case 'List.nil':
                var $5695 = List$nil;
                var $5691 = $5695;
                break;
        };
        return $5691;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5697 = self.idx;
                var $5698 = self.code;
                var $5699 = self.err;
                var $5700 = Parser$Reply$error$($5697, $5698, $5699);
                var $5696 = $5700;
                break;
            case 'Parser.Reply.value':
                var $5701 = self.idx;
                var $5702 = self.code;
                var $5703 = self.val;
                var $5704 = Parser$Reply$value$($5701, $5702, List$flatten$($5703));
                var $5696 = $5704;
                break;
        };
        return $5696;
    };
    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);
    const List$length = a0 => (list_length(a0));

    function Kind$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.cons':
                var $5706 = self.head;
                var $5707 = self.tail;
                var self = $5706;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5709 = self.eras;
                        var $5710 = self.name;
                        var $5711 = self.term;
                        var $5712 = Kind$Term$all$($5709, "", $5710, $5711, (_s$8 => _x$9 => {
                            var $5713 = Kind$Parser$make_forall$($5707, _body$2);
                            return $5713;
                        }));
                        var $5708 = $5712;
                        break;
                };
                var $5705 = $5708;
                break;
            case 'List.nil':
                var $5714 = _body$2;
                var $5705 = $5714;
                break;
        };
        return $5705;
    };
    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $5715 = List$at$(_index$2, List$reverse$(_list$3));
        return $5715;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Kind$Term$var$(_name$1, _indx$2) {
        var $5716 = ({
            _: 'Kind.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $5716;
    };
    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);

    function Kind$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $5718 = Pair$new$("", 0n);
            var $5717 = $5718;
        } else {
            var $5719 = self.charCodeAt(0);
            var $5720 = self.slice(1);
            var _name_skips$4 = Kind$Context$get_name_skips$($5720);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $5722 = self.fst;
                    var $5723 = self.snd;
                    var self = ($5719 === 94);
                    if (self) {
                        var $5725 = Pair$new$($5722, Nat$succ$($5723));
                        var $5724 = $5725;
                    } else {
                        var $5726 = Pair$new$(String$cons$($5719, $5722), $5723);
                        var $5724 = $5726;
                    };
                    var $5721 = $5724;
                    break;
            };
            var $5717 = $5721;
        };
        return $5717;
    };
    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);

    function Kind$Name$eql$(_a$1, _b$2) {
        var $5727 = (_a$1 === _b$2);
        return $5727;
    };
    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);

    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.cons':
                        var $5728 = self.head;
                        var $5729 = self.tail;
                        var self = $5728;
                        switch (self._) {
                            case 'Pair.new':
                                var $5731 = self.fst;
                                var $5732 = self.snd;
                                var self = Kind$Name$eql$(_name$1, $5731);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $5735 = Maybe$some$($5732);
                                        var $5734 = $5735;
                                    } else {
                                        var $5736 = (self - 1n);
                                        var $5737 = Kind$Context$find$go$(_name$1, $5736, $5729);
                                        var $5734 = $5737;
                                    };
                                    var $5733 = $5734;
                                } else {
                                    var $5738 = Kind$Context$find$go$(_name$1, _skip$2, $5729);
                                    var $5733 = $5738;
                                };
                                var $5730 = $5733;
                                break;
                        };
                        return $5730;
                    case 'List.nil':
                        var $5739 = Maybe$none;
                        return $5739;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);

    function Kind$Context$find$(_name$1, _ctx$2) {
        var self = Kind$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $5741 = self.fst;
                var $5742 = self.snd;
                var $5743 = Kind$Context$find$go$($5741, $5742, _ctx$2);
                var $5740 = $5743;
                break;
        };
        return $5740;
    };
    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);

    function Kind$Path$o$(_path$1, _x$2) {
        var $5744 = _path$1((_x$2 + '0'));
        return $5744;
    };
    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);

    function Kind$Path$i$(_path$1, _x$2) {
        var $5745 = _path$1((_x$2 + '1'));
        return $5745;
    };
    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);

    function Kind$Path$to_bits$(_path$1) {
        var $5746 = _path$1(Bits$e);
        return $5746;
    };
    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);

    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Kind.Term.var':
                var $5748 = self.name;
                var $5749 = self.indx;
                var self = List$at_last$($5749, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5751 = self.value;
                        var $5752 = Pair$snd$($5751);
                        var $5750 = $5752;
                        break;
                    case 'Maybe.none':
                        var $5753 = Kind$Term$var$($5748, $5749);
                        var $5750 = $5753;
                        break;
                };
                var $5747 = $5750;
                break;
            case 'Kind.Term.ref':
                var $5754 = self.name;
                var self = Kind$Context$find$($5754, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5756 = self.value;
                        var $5757 = $5756;
                        var $5755 = $5757;
                        break;
                    case 'Maybe.none':
                        var $5758 = Kind$Term$ref$($5754);
                        var $5755 = $5758;
                        break;
                };
                var $5747 = $5755;
                break;
            case 'Kind.Term.all':
                var $5759 = self.eras;
                var $5760 = self.self;
                var $5761 = self.name;
                var $5762 = self.xtyp;
                var $5763 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $5764 = Kind$Term$all$($5759, $5760, $5761, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5762), (_s$10 => _x$11 => {
                    var $5765 = Kind$Term$bind$(List$cons$(Pair$new$($5761, _x$11), List$cons$(Pair$new$($5760, _s$10), _vars$1)), Kind$Path$i(_path$2), $5763(Kind$Term$var$($5760, _vlen$9))(Kind$Term$var$($5761, Nat$succ$(_vlen$9))));
                    return $5765;
                }));
                var $5747 = $5764;
                break;
            case 'Kind.Term.lam':
                var $5766 = self.name;
                var $5767 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $5768 = Kind$Term$lam$($5766, (_x$7 => {
                    var $5769 = Kind$Term$bind$(List$cons$(Pair$new$($5766, _x$7), _vars$1), Kind$Path$o(_path$2), $5767(Kind$Term$var$($5766, _vlen$6)));
                    return $5769;
                }));
                var $5747 = $5768;
                break;
            case 'Kind.Term.app':
                var $5770 = self.func;
                var $5771 = self.argm;
                var $5772 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5770), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5771));
                var $5747 = $5772;
                break;
            case 'Kind.Term.let':
                var $5773 = self.name;
                var $5774 = self.expr;
                var $5775 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5776 = Kind$Term$let$($5773, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5774), (_x$8 => {
                    var $5777 = Kind$Term$bind$(List$cons$(Pair$new$($5773, _x$8), _vars$1), Kind$Path$i(_path$2), $5775(Kind$Term$var$($5773, _vlen$7)));
                    return $5777;
                }));
                var $5747 = $5776;
                break;
            case 'Kind.Term.def':
                var $5778 = self.name;
                var $5779 = self.expr;
                var $5780 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5781 = Kind$Term$def$($5778, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5779), (_x$8 => {
                    var $5782 = Kind$Term$bind$(List$cons$(Pair$new$($5778, _x$8), _vars$1), Kind$Path$i(_path$2), $5780(Kind$Term$var$($5778, _vlen$7)));
                    return $5782;
                }));
                var $5747 = $5781;
                break;
            case 'Kind.Term.ann':
                var $5783 = self.done;
                var $5784 = self.term;
                var $5785 = self.type;
                var $5786 = Kind$Term$ann$($5783, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5784), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5785));
                var $5747 = $5786;
                break;
            case 'Kind.Term.gol':
                var $5787 = self.name;
                var $5788 = self.dref;
                var $5789 = self.verb;
                var $5790 = Kind$Term$gol$($5787, $5788, $5789);
                var $5747 = $5790;
                break;
            case 'Kind.Term.nat':
                var $5791 = self.natx;
                var $5792 = Kind$Term$nat$($5791);
                var $5747 = $5792;
                break;
            case 'Kind.Term.chr':
                var $5793 = self.chrx;
                var $5794 = Kind$Term$chr$($5793);
                var $5747 = $5794;
                break;
            case 'Kind.Term.str':
                var $5795 = self.strx;
                var $5796 = Kind$Term$str$($5795);
                var $5747 = $5796;
                break;
            case 'Kind.Term.cse':
                var $5797 = self.expr;
                var $5798 = self.name;
                var $5799 = self.with;
                var $5800 = self.cses;
                var $5801 = self.moti;
                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5797);
                var _name$11 = $5798;
                var _wyth$12 = List$mapped$($5799, (_with_var$12 => {
                    var self = _with_var$12;
                    switch (self._) {
                        case 'Kind.Ann.new':
                            var $5804 = self.name;
                            var $5805 = self.term;
                            var $5806 = self.type;
                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $5805);
                            var self = $5806;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $5808 = self.value;
                                    var $5809 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $5808));
                                    var _with_var_type$17 = $5809;
                                    break;
                                case 'Maybe.none':
                                    var $5810 = Maybe$none;
                                    var _with_var_type$17 = $5810;
                                    break;
                            };
                            var $5807 = Kind$Ann$new$($5804, _with_var_term$16, _with_var_type$17);
                            var $5803 = $5807;
                            break;
                    };
                    return $5803;
                }));
                var _cses$13 = $5800;
                var _moti$14 = $5801;
                var $5802 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $5747 = $5802;
                break;
            case 'Kind.Term.ori':
                var $5811 = self.orig;
                var $5812 = self.expr;
                var $5813 = Kind$Term$ori$($5811, Kind$Term$bind$(_vars$1, _path$2, $5812));
                var $5747 = $5813;
                break;
            case 'Kind.Term.typ':
                var $5814 = Kind$Term$typ;
                var $5747 = $5814;
                break;
            case 'Kind.Term.hol':
                var $5815 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));
                var $5747 = $5815;
                break;
        };
        return $5747;
    };
    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);

    function Trampoline$call$(_t$2) {
        var Trampoline$call$ = (_t$2) => ({
            ctr: 'TCO',
            arg: [_t$2]
        });
        var Trampoline$call = _t$2 => Trampoline$call$(_t$2);
        var arg = [_t$2];
        while (true) {
            let [_t$2] = arg;
            var R = (() => {
                var self = _t$2;
                switch (self._) {
                    case 'Trampoline.done':
                        var $5816 = self.value;
                        var $5817 = $5816;
                        return $5817;
                    case 'Trampoline.wrap':
                        var $5818 = self.value;
                        var $5819 = Trampoline$call$($5818(Unit$new));
                        return $5819;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Trampoline$call = x0 => Trampoline$call$(x0);

    function Trampoline$(_A$1) {
        var $5820 = null;
        return $5820;
    };
    const Trampoline = x0 => Trampoline$(x0);

    function Trampoline$wrap$(_value$2) {
        var $5821 = ({
            _: 'Trampoline.wrap',
            'value': _value$2
        });
        return $5821;
    };
    const Trampoline$wrap = x0 => Trampoline$wrap$(x0);

    function BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5) {
        var BitsMap$set_if_empty$cps$go$ = (_bits$2, _val$3, _map$4, _cont$5) => ({
            ctr: 'TCO',
            arg: [_bits$2, _val$3, _map$4, _cont$5]
        });
        var BitsMap$set_if_empty$cps$go = _bits$2 => _val$3 => _map$4 => _cont$5 => BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5);
        var arg = [_bits$2, _val$3, _map$4, _cont$5];
        while (true) {
            let [_bits$2, _val$3, _map$4, _cont$5] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $5822 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $5824 = self.val;
                                var $5825 = self.lft;
                                var $5826 = self.rgt;
                                var $5827 = BitsMap$set_if_empty$cps$go$($5822, _val$3, $5825, (_lft$10 => {
                                    var $5828 = Trampoline$wrap$((_$11 => {
                                        var $5829 = _cont$5(BitsMap$tie$($5824, _lft$10, $5826));
                                        return $5829;
                                    }));
                                    return $5828;
                                }));
                                var $5823 = $5827;
                                break;
                            case 'BitsMap.new':
                                var $5830 = BitsMap$set_if_empty$cps$go$($5822, _val$3, BitsMap$new, (_lft$7 => {
                                    var $5831 = Trampoline$wrap$((_$8 => {
                                        var $5832 = _cont$5(BitsMap$tie$(Maybe$none, _lft$7, BitsMap$new));
                                        return $5832;
                                    }));
                                    return $5831;
                                }));
                                var $5823 = $5830;
                                break;
                        };
                        return $5823;
                    case 'i':
                        var $5833 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $5835 = self.val;
                                var $5836 = self.lft;
                                var $5837 = self.rgt;
                                var $5838 = BitsMap$set_if_empty$cps$go$($5833, _val$3, $5837, (_rgt$10 => {
                                    var $5839 = Trampoline$wrap$((_$11 => {
                                        var $5840 = _cont$5(BitsMap$tie$($5835, $5836, _rgt$10));
                                        return $5840;
                                    }));
                                    return $5839;
                                }));
                                var $5834 = $5838;
                                break;
                            case 'BitsMap.new':
                                var $5841 = BitsMap$set_if_empty$cps$go$($5833, _val$3, BitsMap$new, (_rgt$7 => {
                                    var $5842 = Trampoline$wrap$((_$8 => {
                                        var $5843 = _cont$5(BitsMap$tie$(Maybe$none, BitsMap$new, _rgt$7));
                                        return $5843;
                                    }));
                                    return $5842;
                                }));
                                var $5834 = $5841;
                                break;
                        };
                        return $5834;
                    case 'e':
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $5845 = self.val;
                                var $5846 = self.lft;
                                var $5847 = self.rgt;
                                var $5848 = _cont$5(BitsMap$tie$((() => {
                                    var self = $5845;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $5849 = self.value;
                                            var $5850 = Maybe$some$($5849);
                                            return $5850;
                                        case 'Maybe.none':
                                            var $5851 = Maybe$some$(_val$3);
                                            return $5851;
                                    };
                                })(), $5846, $5847));
                                var $5844 = $5848;
                                break;
                            case 'BitsMap.new':
                                var $5852 = _cont$5(BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new));
                                var $5844 = $5852;
                                break;
                        };
                        return $5844;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$set_if_empty$cps$go = x0 => x1 => x2 => x3 => BitsMap$set_if_empty$cps$go$(x0, x1, x2, x3);

    function Trampoline$done$(_value$2) {
        var $5853 = ({
            _: 'Trampoline.done',
            'value': _value$2
        });
        return $5853;
    };
    const Trampoline$done = x0 => Trampoline$done$(x0);

    function BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4) {
        var $5854 = Trampoline$call$(BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, Trampoline$done));
        return $5854;
    };
    const BitsMap$set_if_empty$cps = x0 => x1 => x2 => BitsMap$set_if_empty$cps$(x0, x1, x2);

    function BitsMap$set_if_empty$(_bits$2, _val$3, _map$4) {
        var $5855 = BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4);
        return $5855;
    };
    const BitsMap$set_if_empty = x0 => x1 => x2 => BitsMap$set_if_empty$(x0, x1, x2);

    function Kind$Map$set_if_empty$(_name$2, _val$3, _map$4) {
        var $5856 = BitsMap$set_if_empty$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $5856;
    };
    const Kind$Map$set_if_empty = x0 => x1 => x2 => Kind$Map$set_if_empty$(x0, x1, x2);
    const Kind$Status$init = ({
        _: 'Kind.Status.init'
    });

    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var _defn$11 = Kind$Def$new(_file$1)(_code$2)(_orig$3)(_name$4)(_term$5)(_type$6)(_isct$7)(_arit$8);
        var self = _done$9;
        if (self) {
            var $5858 = Kind$Map$set$(_name$4, _defn$11(Kind$Status$done$(Bool$false)), _defs$10);
            var $5857 = $5858;
        } else {
            var $5859 = Kind$Map$set_if_empty$(_name$4, _defn$11(Kind$Status$init), _defs$10);
            var $5857 = $5859;
        };
        return $5857;
    };
    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5861 = self.idx;
                var $5862 = self.code;
                var $5863 = self.err;
                var $5864 = Parser$Reply$error$($5861, $5862, $5863);
                var $5860 = $5864;
                break;
            case 'Parser.Reply.value':
                var $5865 = self.idx;
                var $5866 = self.code;
                var $5867 = self.val;
                var self = Kind$Parser$name1$($5865, $5866);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5869 = self.idx;
                        var $5870 = self.code;
                        var $5871 = self.err;
                        var $5872 = Parser$Reply$error$($5869, $5870, $5871);
                        var $5868 = $5872;
                        break;
                    case 'Parser.Reply.value':
                        var $5873 = self.idx;
                        var $5874 = self.code;
                        var $5875 = self.val;
                        var self = Parser$many$(Kind$Parser$binder(":"))($5873)($5874);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5877 = self.idx;
                                var $5878 = self.code;
                                var $5879 = self.err;
                                var $5880 = Parser$Reply$error$($5877, $5878, $5879);
                                var $5876 = $5880;
                                break;
                            case 'Parser.Reply.value':
                                var $5881 = self.idx;
                                var $5882 = self.code;
                                var $5883 = self.val;
                                var _args$15 = List$flatten$($5883);
                                var self = Kind$Parser$text$(":", $5881, $5882);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5885 = self.idx;
                                        var $5886 = self.code;
                                        var $5887 = self.err;
                                        var $5888 = Parser$Reply$error$($5885, $5886, $5887);
                                        var $5884 = $5888;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5889 = self.idx;
                                        var $5890 = self.code;
                                        var self = Kind$Parser$term$($5889, $5890);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5892 = self.idx;
                                                var $5893 = self.code;
                                                var $5894 = self.err;
                                                var $5895 = Parser$Reply$error$($5892, $5893, $5894);
                                                var $5891 = $5895;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5896 = self.idx;
                                                var $5897 = self.code;
                                                var $5898 = self.val;
                                                var self = Kind$Parser$term$($5896, $5897);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5900 = self.idx;
                                                        var $5901 = self.code;
                                                        var $5902 = self.err;
                                                        var $5903 = Parser$Reply$error$($5900, $5901, $5902);
                                                        var $5899 = $5903;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5904 = self.idx;
                                                        var $5905 = self.code;
                                                        var $5906 = self.val;
                                                        var self = Kind$Parser$stop$($5867, $5904, $5905);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5908 = self.idx;
                                                                var $5909 = self.code;
                                                                var $5910 = self.err;
                                                                var $5911 = Parser$Reply$error$($5908, $5909, $5910);
                                                                var $5907 = $5911;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5912 = self.idx;
                                                                var $5913 = self.code;
                                                                var $5914 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $5898);
                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Kind.Binder.new':
                                                                            var $5917 = self.name;
                                                                            var $5918 = $5917;
                                                                            var $5916 = $5918;
                                                                            break;
                                                                    };
                                                                    return $5916;
                                                                })), $5906);
                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                                    var $5919 = (_x$31 + '1');
                                                                    return $5919;
                                                                }), _type$29);
                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {
                                                                    var $5920 = (_x$32 + '0');
                                                                    return $5920;
                                                                }), _term$30);
                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $5914, $5875, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $5915 = Parser$Reply$value$($5912, $5913, _defs$33);
                                                                var $5907 = $5915;
                                                                break;
                                                        };
                                                        var $5899 = $5907;
                                                        break;
                                                };
                                                var $5891 = $5899;
                                                break;
                                        };
                                        var $5884 = $5891;
                                        break;
                                };
                                var $5876 = $5884;
                                break;
                        };
                        var $5868 = $5876;
                        break;
                };
                var $5860 = $5868;
                break;
        };
        return $5860;
    };
    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);

    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $5921 = ({
            _: 'Kind.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $5921;
    };
    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);

    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Kind$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5923 = self.idx;
                var $5924 = self.code;
                var $5925 = self.err;
                var $5926 = Parser$Reply$error$($5923, $5924, $5925);
                var $5922 = $5926;
                break;
            case 'Parser.Reply.value':
                var $5927 = self.idx;
                var $5928 = self.code;
                var $5929 = self.val;
                var self = Parser$maybe$(Kind$Parser$binder(":"), $5927, $5928);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5931 = self.idx;
                        var $5932 = self.code;
                        var $5933 = self.err;
                        var $5934 = Parser$Reply$error$($5931, $5932, $5933);
                        var $5930 = $5934;
                        break;
                    case 'Parser.Reply.value':
                        var $5935 = self.idx;
                        var $5936 = self.code;
                        var $5937 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Kind$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $5940 = self.idx;
                                    var $5941 = self.code;
                                    var $5942 = self.err;
                                    var $5943 = Parser$Reply$error$($5940, $5941, $5942);
                                    var $5939 = $5943;
                                    break;
                                case 'Parser.Reply.value':
                                    var $5944 = self.idx;
                                    var $5945 = self.code;
                                    var $5946 = Kind$Parser$binder$("=", $5944, $5945);
                                    var $5939 = $5946;
                                    break;
                            };
                            return $5939;
                        }), $5935, $5936);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5947 = self.idx;
                                var $5948 = self.code;
                                var $5949 = self.err;
                                var $5950 = Parser$Reply$error$($5947, $5948, $5949);
                                var $5938 = $5950;
                                break;
                            case 'Parser.Reply.value':
                                var $5951 = self.idx;
                                var $5952 = self.code;
                                var $5953 = self.val;
                                var _args$13 = Maybe$default$($5937, List$nil);
                                var _inds$14 = Maybe$default$($5953, List$nil);
                                var $5954 = Parser$Reply$value$($5951, $5952, Kind$Constructor$new$($5929, _args$13, _inds$14));
                                var $5938 = $5954;
                                break;
                        };
                        var $5930 = $5938;
                        break;
                };
                var $5922 = $5930;
                break;
        };
        return $5922;
    };
    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);

    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $5955 = ({
            _: 'Kind.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $5955;
    };
    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);

    function Kind$Parser$datatype$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5957 = self.idx;
                var $5958 = self.code;
                var $5959 = self.err;
                var $5960 = Parser$Reply$error$($5957, $5958, $5959);
                var $5956 = $5960;
                break;
            case 'Parser.Reply.value':
                var $5961 = self.idx;
                var $5962 = self.code;
                var self = Kind$Parser$name1$($5961, $5962);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5964 = self.idx;
                        var $5965 = self.code;
                        var $5966 = self.err;
                        var $5967 = Parser$Reply$error$($5964, $5965, $5966);
                        var $5963 = $5967;
                        break;
                    case 'Parser.Reply.value':
                        var $5968 = self.idx;
                        var $5969 = self.code;
                        var $5970 = self.val;
                        var self = Parser$maybe$(Kind$Parser$binder(":"), $5968, $5969);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5972 = self.idx;
                                var $5973 = self.code;
                                var $5974 = self.err;
                                var $5975 = Parser$Reply$error$($5972, $5973, $5974);
                                var $5971 = $5975;
                                break;
                            case 'Parser.Reply.value':
                                var $5976 = self.idx;
                                var $5977 = self.code;
                                var $5978 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $5981 = self.idx;
                                            var $5982 = self.code;
                                            var $5983 = self.err;
                                            var $5984 = Parser$Reply$error$($5981, $5982, $5983);
                                            var $5980 = $5984;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $5985 = self.idx;
                                            var $5986 = self.code;
                                            var $5987 = Kind$Parser$binder$(":", $5985, $5986);
                                            var $5980 = $5987;
                                            break;
                                    };
                                    return $5980;
                                }), $5976, $5977);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5988 = self.idx;
                                        var $5989 = self.code;
                                        var $5990 = self.err;
                                        var $5991 = Parser$Reply$error$($5988, $5989, $5990);
                                        var $5979 = $5991;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5992 = self.idx;
                                        var $5993 = self.code;
                                        var $5994 = self.val;
                                        var _pars$15 = Maybe$default$($5978, List$nil);
                                        var _inds$16 = Maybe$default$($5994, List$nil);
                                        var self = Kind$Parser$text$("{", $5992, $5993);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5996 = self.idx;
                                                var $5997 = self.code;
                                                var $5998 = self.err;
                                                var $5999 = Parser$Reply$error$($5996, $5997, $5998);
                                                var $5995 = $5999;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $6000 = self.idx;
                                                var $6001 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item(Kind$Parser$constructor($5970)))($6000)($6001);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $6003 = self.idx;
                                                        var $6004 = self.code;
                                                        var $6005 = self.err;
                                                        var $6006 = Parser$Reply$error$($6003, $6004, $6005);
                                                        var $6002 = $6006;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $6007 = self.idx;
                                                        var $6008 = self.code;
                                                        var $6009 = self.val;
                                                        var $6010 = Parser$Reply$value$($6007, $6008, Kind$Datatype$new$($5970, _pars$15, _inds$16, $6009));
                                                        var $6002 = $6010;
                                                        break;
                                                };
                                                var $5995 = $6002;
                                                break;
                                        };
                                        var $5979 = $5995;
                                        break;
                                };
                                var $5971 = $5979;
                                break;
                        };
                        var $5963 = $5971;
                        break;
                };
                var $5956 = $5963;
                break;
        };
        return $5956;
    };
    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);

    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.cons':
                var $6012 = self.head;
                var $6013 = self.tail;
                var self = $6012;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6015 = self.eras;
                        var $6016 = self.name;
                        var $6017 = self.term;
                        var $6018 = Kind$Term$all$($6015, "", $6016, $6017, (_s$9 => _x$10 => {
                            var $6019 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $6013);
                            return $6019;
                        }));
                        var $6014 = $6018;
                        break;
                };
                var $6011 = $6014;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6021 = self.pars;
                        var $6022 = self.inds;
                        var _slf$8 = Kind$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $6025 = _slf$8;
                            var $6026 = $6021;
                            let _slf$10 = $6025;
                            let _v$9;
                            while ($6026._ === 'List.cons') {
                                _v$9 = $6026.head;
                                var $6025 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6027 = self.name;
                                            var $6028 = $6027;
                                            return $6028;
                                    };
                                })()));
                                _slf$10 = $6025;
                                $6026 = $6026.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $6030 = _slf$9;
                            var $6031 = $6022;
                            let _slf$11 = $6030;
                            let _v$10;
                            while ($6031._ === 'List.cons') {
                                _v$10 = $6031.head;
                                var $6030 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {
                                    var self = _v$10;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6032 = self.name;
                                            var $6033 = $6032;
                                            return $6033;
                                    };
                                })()));
                                _slf$11 = $6030;
                                $6031 = $6031.tail;
                            }
                            return _slf$11;
                        })();
                        var $6023 = Kind$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $6034 = Kind$Term$typ;
                            return $6034;
                        }));
                        var $6020 = $6023;
                        break;
                };
                var $6011 = $6020;
                break;
        };
        return $6011;
    };
    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);

    function Kind$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6036 = self.name;
                var $6037 = self.inds;
                var $6038 = Kind$Datatype$build_term$motive$go$(_type$1, $6036, $6037);
                var $6035 = $6038;
                break;
        };
        return $6035;
    };
    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);

    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.cons':
                var $6040 = self.head;
                var $6041 = self.tail;
                var self = $6040;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6043 = self.eras;
                        var $6044 = self.name;
                        var $6045 = self.term;
                        var _eras$9 = $6043;
                        var _name$10 = $6044;
                        var _xtyp$11 = $6045;
                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6041);
                        var $6046 = Kind$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $6047 = _body$12;
                            return $6047;
                        }));
                        var $6042 = $6046;
                        break;
                };
                var $6039 = $6042;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6049 = self.name;
                        var $6050 = self.pars;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Kind.Constructor.new':
                                var $6052 = self.name;
                                var $6053 = self.args;
                                var $6054 = self.inds;
                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $6057 = _ret$11;
                                    var $6058 = $6054;
                                    let _ret$13 = $6057;
                                    let _v$12;
                                    while ($6058._ === 'List.cons') {
                                        _v$12 = $6058.head;
                                        var $6057 = Kind$Term$app$(_ret$13, (() => {
                                            var self = _v$12;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6059 = self.term;
                                                    var $6060 = $6059;
                                                    return $6060;
                                            };
                                        })());
                                        _ret$13 = $6057;
                                        $6058 = $6058.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($6049, List$cons$(Kind$Name$read$("."), List$cons$($6052, List$nil))));
                                var _slf$14 = Kind$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $6062 = _slf$14;
                                    var $6063 = $6050;
                                    let _slf$16 = $6062;
                                    let _v$15;
                                    while ($6063._ === 'List.cons') {
                                        _v$15 = $6063.head;
                                        var $6062 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {
                                            var self = _v$15;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6064 = self.name;
                                                    var $6065 = $6064;
                                                    return $6065;
                                            };
                                        })()));
                                        _slf$16 = $6062;
                                        $6063 = $6063.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $6067 = _slf$15;
                                    var $6068 = $6053;
                                    let _slf$17 = $6067;
                                    let _v$16;
                                    while ($6068._ === 'List.cons') {
                                        _v$16 = $6068.head;
                                        var $6067 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {
                                            var self = _v$16;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6069 = self.name;
                                                    var $6070 = $6069;
                                                    return $6070;
                                            };
                                        })()));
                                        _slf$17 = $6067;
                                        $6068 = $6068.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $6055 = Kind$Term$app$(_ret$12, _slf$16);
                                var $6051 = $6055;
                                break;
                        };
                        var $6048 = $6051;
                        break;
                };
                var $6039 = $6048;
                break;
        };
        return $6039;
    };
    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Kind.Constructor.new':
                var $6072 = self.args;
                var $6073 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6072);
                var $6071 = $6073;
                break;
        };
        return $6071;
    };
    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);

    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6075 = self.head;
                var $6076 = self.tail;
                var self = $6075;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6078 = self.name;
                        var $6079 = Kind$Term$all$(Bool$false, "", $6078, Kind$Datatype$build_term$constructor$(_type$1, $6075), (_s$9 => _x$10 => {
                            var $6080 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $6076);
                            return $6080;
                        }));
                        var $6077 = $6079;
                        break;
                };
                var $6074 = $6077;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6082 = self.inds;
                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $6085 = _ret$8;
                            var $6086 = $6082;
                            let _ret$10 = $6085;
                            let _v$9;
                            while ($6086._ === 'List.cons') {
                                _v$9 = $6086.head;
                                var $6085 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6087 = self.name;
                                            var $6088 = $6087;
                                            return $6088;
                                    };
                                })()));
                                _ret$10 = $6085;
                                $6086 = $6086.tail;
                            }
                            return _ret$10;
                        })();
                        var $6083 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + ".Self")));
                        var $6081 = $6083;
                        break;
                };
                var $6074 = $6081;
                break;
        };
        return $6074;
    };
    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6090 = self.name;
                var $6091 = self.ctrs;
                var $6092 = Kind$Datatype$build_term$constructors$go$(_type$1, $6090, $6091);
                var $6089 = $6092;
                break;
        };
        return $6089;
    };
    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);

    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6094 = self.head;
                var $6095 = self.tail;
                var self = $6094;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6097 = self.name;
                        var $6098 = Kind$Term$lam$($6097, (_x$10 => {
                            var $6099 = Kind$Datatype$build_term$go$(_type$1, _name$2, $6095, _inds$4);
                            return $6099;
                        }));
                        var $6096 = $6098;
                        break;
                };
                var $6093 = $6096;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6101 = self.head;
                        var $6102 = self.tail;
                        var self = $6101;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6104 = self.name;
                                var $6105 = Kind$Term$lam$($6104, (_x$10 => {
                                    var $6106 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $6102);
                                    return $6106;
                                }));
                                var $6103 = $6105;
                                break;
                        };
                        var $6100 = $6103;
                        break;
                    case 'List.nil':
                        var $6107 = Kind$Term$all$(Bool$true, (_name$2 + ".Self"), Kind$Name$read$("P"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $6108 = Kind$Datatype$build_term$constructors$(_type$1);
                            return $6108;
                        }));
                        var $6100 = $6107;
                        break;
                };
                var $6093 = $6100;
                break;
        };
        return $6093;
    };
    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6110 = self.name;
                var $6111 = self.pars;
                var $6112 = self.inds;
                var $6113 = Kind$Datatype$build_term$go$(_type$1, $6110, $6111, $6112);
                var $6109 = $6113;
                break;
        };
        return $6109;
    };
    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);

    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6115 = self.head;
                var $6116 = self.tail;
                var self = $6115;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6118 = self.name;
                        var $6119 = self.term;
                        var $6120 = Kind$Term$all$(Bool$false, "", $6118, $6119, (_s$10 => _x$11 => {
                            var $6121 = Kind$Datatype$build_type$go$(_type$1, _name$2, $6116, _inds$4);
                            return $6121;
                        }));
                        var $6117 = $6120;
                        break;
                };
                var $6114 = $6117;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6123 = self.head;
                        var $6124 = self.tail;
                        var self = $6123;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6126 = self.name;
                                var $6127 = self.term;
                                var $6128 = Kind$Term$all$(Bool$false, "", $6126, $6127, (_s$10 => _x$11 => {
                                    var $6129 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $6124);
                                    return $6129;
                                }));
                                var $6125 = $6128;
                                break;
                        };
                        var $6122 = $6125;
                        break;
                    case 'List.nil':
                        var $6130 = Kind$Term$typ;
                        var $6122 = $6130;
                        break;
                };
                var $6114 = $6122;
                break;
        };
        return $6114;
    };
    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6132 = self.name;
                var $6133 = self.pars;
                var $6134 = self.inds;
                var $6135 = Kind$Datatype$build_type$go$(_type$1, $6132, $6133, $6134);
                var $6131 = $6135;
                break;
        };
        return $6131;
    };
    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);

    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6137 = self.head;
                var $6138 = self.tail;
                var self = $6137;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6140 = self.name;
                        var $6141 = Kind$Term$lam$($6140, (_x$9 => {
                            var $6142 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6138);
                            return $6142;
                        }));
                        var $6139 = $6141;
                        break;
                };
                var $6136 = $6139;
                break;
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6144 = self.name;
                        var $6145 = self.args;
                        var _ret$7 = Kind$Term$ref$($6144);
                        var _ret$8 = (() => {
                            var $6148 = _ret$7;
                            var $6149 = $6145;
                            let _ret$9 = $6148;
                            let _arg$8;
                            while ($6149._ === 'List.cons') {
                                _arg$8 = $6149.head;
                                var $6148 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6150 = self.name;
                                            var $6151 = $6150;
                                            return $6151;
                                    };
                                })()));
                                _ret$9 = $6148;
                                $6149 = $6149.tail;
                            }
                            return _ret$9;
                        })();
                        var $6146 = _ret$8;
                        var $6143 = $6146;
                        break;
                };
                var $6136 = $6143;
                break;
        };
        return $6136;
    };
    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);

    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6153 = self.ctrs;
                var $6154 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6153);
                var $6152 = $6154;
                break;
        };
        return $6152;
    };
    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);

    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6156 = self.head;
                var $6157 = self.tail;
                var self = $6156;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6159 = self.name;
                        var $6160 = Kind$Term$lam$($6159, (_x$11 => {
                            var $6161 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $6157, _args$5);
                            return $6161;
                        }));
                        var $6158 = $6160;
                        break;
                };
                var $6155 = $6158;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6163 = self.head;
                        var $6164 = self.tail;
                        var self = $6163;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6166 = self.name;
                                var $6167 = Kind$Term$lam$($6166, (_x$11 => {
                                    var $6168 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $6164);
                                    return $6168;
                                }));
                                var $6165 = $6167;
                                break;
                        };
                        var $6162 = $6165;
                        break;
                    case 'List.nil':
                        var $6169 = Kind$Term$lam$(Kind$Name$read$("P"), (_x$6 => {
                            var $6170 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $6170;
                        }));
                        var $6162 = $6169;
                        break;
                };
                var $6155 = $6162;
                break;
        };
        return $6155;
    };
    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6172 = self.name;
                var $6173 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6175 = self.args;
                        var $6176 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $6172, $6173, $6175);
                        var $6174 = $6176;
                        break;
                };
                var $6171 = $6174;
                break;
        };
        return $6171;
    };
    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);

    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6178 = self.head;
                var $6179 = self.tail;
                var self = $6178;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6181 = self.eras;
                        var $6182 = self.name;
                        var $6183 = self.term;
                        var $6184 = Kind$Term$all$($6181, "", $6182, $6183, (_s$11 => _x$12 => {
                            var $6185 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $6179, _args$5);
                            return $6185;
                        }));
                        var $6180 = $6184;
                        break;
                };
                var $6177 = $6180;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6187 = self.head;
                        var $6188 = self.tail;
                        var self = $6187;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6190 = self.eras;
                                var $6191 = self.name;
                                var $6192 = self.term;
                                var $6193 = Kind$Term$all$($6190, "", $6191, $6192, (_s$11 => _x$12 => {
                                    var $6194 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $6188);
                                    return $6194;
                                }));
                                var $6189 = $6193;
                                break;
                        };
                        var $6186 = $6189;
                        break;
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Kind.Datatype.new':
                                var $6196 = self.pars;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Kind.Constructor.new':
                                        var $6198 = self.inds;
                                        var _type$13 = Kind$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $6201 = _type$13;
                                            var $6202 = $6196;
                                            let _type$15 = $6201;
                                            let _v$14;
                                            while ($6202._ === 'List.cons') {
                                                _v$14 = $6202.head;
                                                var $6201 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {
                                                    var self = _v$14;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6203 = self.name;
                                                            var $6204 = $6203;
                                                            return $6204;
                                                    };
                                                })()));
                                                _type$15 = $6201;
                                                $6202 = $6202.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $6206 = _type$14;
                                            var $6207 = $6198;
                                            let _type$16 = $6206;
                                            let _v$15;
                                            while ($6207._ === 'List.cons') {
                                                _v$15 = $6207.head;
                                                var $6206 = Kind$Term$app$(_type$16, (() => {
                                                    var self = _v$15;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6208 = self.term;
                                                            var $6209 = $6208;
                                                            return $6209;
                                                    };
                                                })());
                                                _type$16 = $6206;
                                                $6207 = $6207.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $6199 = _type$15;
                                        var $6197 = $6199;
                                        break;
                                };
                                var $6195 = $6197;
                                break;
                        };
                        var $6186 = $6195;
                        break;
                };
                var $6177 = $6186;
                break;
        };
        return $6177;
    };
    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6211 = self.name;
                var $6212 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6214 = self.args;
                        var $6215 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $6211, $6212, $6214);
                        var $6213 = $6215;
                        break;
                };
                var $6210 = $6213;
                break;
        };
        return $6210;
    };
    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);

    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6217 = self.idx;
                var $6218 = self.code;
                var $6219 = self.err;
                var $6220 = Parser$Reply$error$($6217, $6218, $6219);
                var $6216 = $6220;
                break;
            case 'Parser.Reply.value':
                var $6221 = self.idx;
                var $6222 = self.code;
                var $6223 = self.val;
                var self = Kind$Parser$datatype$($6221, $6222);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6225 = self.idx;
                        var $6226 = self.code;
                        var $6227 = self.err;
                        var $6228 = Parser$Reply$error$($6225, $6226, $6227);
                        var $6224 = $6228;
                        break;
                    case 'Parser.Reply.value':
                        var $6229 = self.idx;
                        var $6230 = self.code;
                        var $6231 = self.val;
                        var self = Kind$Parser$stop$($6223, $6229, $6230);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6233 = self.idx;
                                var $6234 = self.code;
                                var $6235 = self.err;
                                var $6236 = Parser$Reply$error$($6233, $6234, $6235);
                                var $6232 = $6236;
                                break;
                            case 'Parser.Reply.value':
                                var $6237 = self.idx;
                                var $6238 = self.code;
                                var $6239 = self.val;
                                var self = $6231;
                                switch (self._) {
                                    case 'Kind.Datatype.new':
                                        var $6241 = self.name;
                                        var $6242 = self.pars;
                                        var $6243 = self.inds;
                                        var $6244 = self.ctrs;
                                        var _term$19 = Kind$Datatype$build_term$($6231);
                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {
                                            var $6246 = (_x$20 + '1');
                                            return $6246;
                                        }), _term$19);
                                        var _type$21 = Kind$Datatype$build_type$($6231);
                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {
                                            var $6247 = (_x$22 + '0');
                                            return $6247;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($6242)) + (list_length($6243)));
                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $6239, $6241, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($6244, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $6241;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6249 = self.args;
                                                        var $6250 = $6249;
                                                        return $6250;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6251 = self.name;
                                                        var $6252 = $6251;
                                                        return $6252;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Kind$Constructor$build_term$($6231, _ctr$25);
                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                var $6253 = (_x$31 + '1');
                                                return $6253;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Kind$Constructor$build_type$($6231, _ctr$25);
                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {
                                                var $6254 = (_x$33 + '0');
                                                return $6254;
                                            }), _ctr_type$32);
                                            var $6248 = Kind$Map$def$(_file$1, _code$2, $6239, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $6248;
                                        }));
                                        var $6245 = (_idx$26 => _code$27 => {
                                            var $6255 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $6255;
                                        });
                                        var $6240 = $6245;
                                        break;
                                };
                                var $6240 = $6240($6237)($6238);
                                var $6232 = $6240;
                                break;
                        };
                        var $6224 = $6232;
                        break;
                };
                var $6216 = $6224;
                break;
        };
        return $6216;
    };
    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6257 = self.idx;
                var $6258 = self.code;
                var $6259 = self.err;
                var $6260 = Parser$Reply$error$($6257, $6258, $6259);
                var $6256 = $6260;
                break;
            case 'Parser.Reply.value':
                var $6261 = self.idx;
                var $6262 = self.code;
                var self = Parser$eof$($6261, $6262);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6264 = self.idx;
                        var $6265 = self.code;
                        var $6266 = self.err;
                        var $6267 = Parser$Reply$error$($6264, $6265, $6266);
                        var $6263 = $6267;
                        break;
                    case 'Parser.Reply.value':
                        var $6268 = self.idx;
                        var $6269 = self.code;
                        var $6270 = Parser$Reply$value$($6268, $6269, _defs$3);
                        var $6263 = $6270;
                        break;
                };
                var $6256 = $6263;
                break;
        };
        return $6256;
    };
    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6272 = self.idx;
                var $6273 = self.code;
                var $6274 = self.err;
                var $6275 = Parser$Reply$error$($6272, $6273, $6274);
                var $6271 = $6275;
                break;
            case 'Parser.Reply.value':
                var $6276 = self.idx;
                var $6277 = self.code;
                var $6278 = self.val;
                var self = $6278;
                if (self) {
                    var $6280 = (_idx$9 => _code$10 => {
                        var $6281 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $6281;
                    });
                    var $6279 = $6280;
                } else {
                    var $6282 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6284 = self.idx;
                                var $6285 = self.code;
                                var $6286 = self.err;
                                var $6287 = Parser$Reply$error$($6284, $6285, $6286);
                                var $6283 = $6287;
                                break;
                            case 'Parser.Reply.value':
                                var $6288 = self.idx;
                                var $6289 = self.code;
                                var $6290 = self.val;
                                var $6291 = Kind$Parser$file$(_file$1, _code$2, $6290, $6288, $6289);
                                var $6283 = $6291;
                                break;
                        };
                        return $6283;
                    });
                    var $6279 = $6282;
                };
                var $6279 = $6279($6276)($6277);
                var $6271 = $6279;
                break;
        };
        return $6271;
    };
    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $6293 = self.head;
                var $6294 = self.tail;
                var $6295 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $6296 = "";
                        return $6296;
                    } else {
                        var $6297 = _sep$1;
                        return $6297;
                    };
                })(), List$cons$($6293, List$cons$(String$join$go$(_sep$1, $6294, Bool$false), List$nil))));
                var $6292 = $6295;
                break;
            case 'List.nil':
                var $6298 = "";
                var $6292 = $6298;
                break;
        };
        return $6292;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $6299 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $6299;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {
        var $6300 = String$join$("\u{a}", _res$3);
        return $6300;
    };
    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6302 = self.value;
                var $6303 = _f$5($6302);
                var $6301 = $6303;
                break;
            case 'Maybe.none':
                var $6304 = _a$4;
                var $6301 = $6304;
                break;
        };
        return $6301;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6306 = Bool$true;
            var $6305 = $6306;
        } else {
            var $6307 = (self - 1n);
            var $6308 = Bool$false;
            var $6305 = $6308;
        };
        return $6305;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6310 = Nat$zero;
            var $6309 = $6310;
        } else {
            var $6311 = (self - 1n);
            var $6312 = Nat$succ$(Nat$succ$(Nat$double$($6311)));
            var $6309 = $6312;
        };
        return $6309;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $6314 = _str$3;
            var $6313 = $6314;
        } else {
            var $6315 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $6317 = String$cons$(_chr$2, String$pad_right$($6315, _chr$2, ""));
                var $6316 = $6317;
            } else {
                var $6318 = self.charCodeAt(0);
                var $6319 = self.slice(1);
                var $6320 = String$cons$($6318, String$pad_right$($6315, _chr$2, $6319));
                var $6316 = $6320;
            };
            var $6313 = $6316;
        };
        return $6313;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $6321 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $6321;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Kind$Code$color$(_col$1, _str$2) {
        var $6322 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $6322;
    };
    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $6324 = self.head;
                var $6325 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $6327 = List$nil;
                    var $6326 = $6327;
                } else {
                    var $6328 = (self - 1n);
                    var $6329 = List$cons$($6324, List$take$($6328, $6325));
                    var $6326 = $6329;
                };
                var $6323 = $6326;
                break;
            case 'List.nil':
                var $6330 = List$nil;
                var $6323 = $6330;
                break;
        };
        return $6323;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $6332 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $6331 = $6332;
                } else {
                    var $6333 = self.charCodeAt(0);
                    var $6334 = self.slice(1);
                    var self = ($6333 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $6337 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $6336 = $6337;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6340 = self.value;
                                        var $6341 = Maybe$some$(Nat$pred$($6340));
                                        var $6339 = $6341;
                                        break;
                                    case 'Maybe.none':
                                        var $6342 = Maybe$some$(_spa$9);
                                        var $6339 = $6342;
                                        break;
                                };
                                var _lft$14 = $6339;
                            } else {
                                var $6343 = (self - 1n);
                                var $6344 = _lft$6;
                                var _lft$14 = $6344;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $6338 = Kind$Code$highlight$go$($6334, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $6336 = $6338;
                        };
                        var $6335 = $6336;
                    } else {
                        var _chr$12 = String$cons$($6333, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $6346 = String$reverse$(Kind$Code$color$("31", Kind$Code$color$("4", _chr$12)));
                            var _chr$13 = $6346;
                        } else {
                            var $6347 = _chr$12;
                            var _chr$13 = $6347;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $6348 = List$take$(_spa$9, _res$8);
                            var _res$14 = $6348;
                        } else {
                            var $6349 = _res$8;
                            var _res$14 = $6349;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $6345 = Kind$Code$highlight$go$($6334, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $6335 = $6345;
                    };
                    var $6331 = $6335;
                };
                return $6331;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $6350 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $6350;
    };
    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);

    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6352 = self.idx;
                var $6353 = self.err;
                var _err$7 = $6353;
                var _hig$8 = Kind$Code$highlight$(_code$2, $6352, Nat$succ$($6352));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $6354 = Either$left$(_str$9);
                var $6351 = $6354;
                break;
            case 'Parser.Reply.value':
                var $6355 = self.val;
                var $6356 = Either$right$($6355);
                var $6351 = $6356;
                break;
        };
        return $6351;
    };
    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);

    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.cons':
                var $6358 = self.head;
                var $6359 = self.tail;
                var $6360 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $6361 = _m$bind$6;
                    return $6361;
                }))(IO$get_file$($6358))((_code$6 => {
                    var _read$7 = Kind$Defs$read$($6358, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.right':
                            var $6363 = self.value;
                            var _defs$9 = $6363;
                            var self = Kind$Map$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6365 = Kind$Synth$load$go$(_name$1, $6359, _defs$9);
                                    var $6364 = $6365;
                                    break;
                                case 'Maybe.some':
                                    var $6366 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $6367 = _m$pure$12;
                                        return $6367;
                                    }))(Maybe$some$(_defs$9));
                                    var $6364 = $6366;
                                    break;
                            };
                            var $6362 = $6364;
                            break;
                        case 'Either.left':
                            var $6368 = Kind$Synth$load$go$(_name$1, $6359, _defs$3);
                            var $6362 = $6368;
                            break;
                    };
                    return $6362;
                }));
                var $6357 = $6360;
                break;
            case 'List.nil':
                var $6369 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $6370 = _m$pure$5;
                    return $6370;
                }))(Maybe$none);
                var $6357 = $6369;
                break;
        };
        return $6357;
    };
    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);

    function Kind$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $6372 = self.head;
                var $6373 = self.tail;
                var _head$5 = (_last$2 + ($6372 + ".kind"));
                var _tail$6 = Kind$Synth$files_of$make$($6373, (_last$2 + ($6372 + "/")));
                var $6374 = List$cons$(_head$5, _tail$6);
                var $6371 = $6374;
                break;
            case 'List.nil':
                var $6375 = List$nil;
                var $6371 = $6375;
                break;
        };
        return $6371;
    };
    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $6376 = _n$2;
                    return $6376;
                } else {
                    var $6377 = self.charCodeAt(0);
                    var $6378 = self.slice(1);
                    var $6379 = String$length$go$($6378, Nat$succ$(_n$2));
                    return $6379;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $6380 = String$length$go$(_xs$1, 0n);
        return $6380;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $6382 = List$cons$(_last$3, List$nil);
            var $6381 = $6382;
        } else {
            var $6383 = self.charCodeAt(0);
            var $6384 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $6386 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $6385 = $6386;
            } else {
                var _next$6 = String$cons$($6383, String$nil);
                var $6387 = String$split$go$($6384, _match$2, (_last$3 + _next$6));
                var $6385 = $6387;
            };
            var $6381 = $6385;
        };
        return $6381;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $6388 = String$split$go$(_xs$1, _match$2, "");
        return $6388;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Kind$Synth$files_of$(_name$1) {
        var $6389 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $6389;
    };
    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);

    function Kind$Synth$load$(_name$1, _defs$2) {
        var $6390 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $6391 = _m$bind$3;
            return $6391;
        }))(Kind$Synth$load$cached$(List$cons$(_name$1, List$nil), _defs$2))((_cached_defs$3 => {
            var self = _cached_defs$3;
            switch (self._) {
                case 'Maybe.some':
                    var $6393 = self.value;
                    var $6394 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $6395 = _m$pure$6;
                        return $6395;
                    }))(Maybe$some$($6393));
                    var $6392 = $6394;
                    break;
                case 'Maybe.none':
                    var $6396 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);
                    var $6392 = $6396;
                    break;
            };
            return $6392;
        }));
        return $6390;
    };
    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);
    const Kind$Status$wait = ({
        _: 'Kind.Status.wait'
    });

    function Kind$Check$(_V$1) {
        var $6397 = null;
        return $6397;
    };
    const Kind$Check = x0 => Kind$Check$(x0);

    function Kind$Check$result$(_value$2, _errors$3) {
        var $6398 = ({
            _: 'Kind.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $6398;
    };
    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);

    function Kind$Error$undefined_reference$(_origin$1, _name$2) {
        var $6399 = ({
            _: 'Kind.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $6399;
    };
    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);

    function Kind$Error$waiting$(_name$1) {
        var $6400 = ({
            _: 'Kind.Error.waiting',
            'name': _name$1
        });
        return $6400;
    };
    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);

    function Kind$Error$indirect$(_name$1) {
        var $6401 = ({
            _: 'Kind.Error.indirect',
            'name': _name$1
        });
        return $6401;
    };
    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6403 = self.value;
                var $6404 = Maybe$some$(_f$4($6403));
                var $6402 = $6404;
                break;
            case 'Maybe.none':
                var $6405 = Maybe$none;
                var $6402 = $6405;
                break;
        };
        return $6402;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Kind$MPath$o$(_path$1) {
        var $6406 = Maybe$mapped$(_path$1, Kind$Path$o);
        return $6406;
    };
    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);

    function Kind$MPath$i$(_path$1) {
        var $6407 = Maybe$mapped$(_path$1, Kind$Path$i);
        return $6407;
    };
    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);

    function Kind$Error$patch$(_path$1, _term$2) {
        var $6408 = ({
            _: 'Kind.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $6408;
    };
    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);

    function Kind$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.some':
                var $6410 = self.value;
                var $6411 = $6410(Bits$e);
                var $6409 = $6411;
                break;
            case 'Maybe.none':
                var $6412 = Bits$e;
                var $6409 = $6412;
                break;
        };
        return $6409;
    };
    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);

    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $6413 = ({
            _: 'Kind.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $6413;
    };
    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);

    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $6414 = ({
            _: 'Kind.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $6414;
    };
    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);

    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {
        var self = _vars$1;
        switch (self._) {
            case 'List.cons':
                var $6416 = self.head;
                var $6417 = self.tail;
                var self = $6416;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6419 = self.name;
                        var $6420 = self.term;
                        var $6421 = self.type;
                        var self = $6421;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6423 = self.value;
                                var $6424 = Kind$Check$result$(Maybe$some$(Maybe$some$($6423)), List$nil);
                                var self = $6424;
                                break;
                            case 'Maybe.none':
                                var self = Kind$Term$check$($6420, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6426 = self.value;
                                        var $6427 = self.errors;
                                        var self = $6426;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6429 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($6429)), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6431 = self.value;
                                                        var $6432 = self.errors;
                                                        var $6433 = Kind$Check$result$($6431, List$concat$($6427, $6432));
                                                        var $6430 = $6433;
                                                        break;
                                                };
                                                var $6428 = $6430;
                                                break;
                                            case 'Maybe.none':
                                                var $6434 = Kind$Check$result$(Maybe$none, $6427);
                                                var $6428 = $6434;
                                                break;
                                        };
                                        var $6425 = $6428;
                                        break;
                                };
                                var self = $6425;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6435 = self.value;
                                var $6436 = self.errors;
                                var self = $6435;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6438 = self.value;
                                        var self = Kind$Term$check$infer_with_types$($6417, _defs$2, _ctx$3, _path$4, _orig$5);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6440 = self.value;
                                                var $6441 = self.errors;
                                                var self = $6440;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6443 = self.value;
                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($6419, $6420, $6438), $6443)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6445 = self.value;
                                                                var $6446 = self.errors;
                                                                var $6447 = Kind$Check$result$($6445, List$concat$($6441, $6446));
                                                                var $6444 = $6447;
                                                                break;
                                                        };
                                                        var $6442 = $6444;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6448 = Kind$Check$result$(Maybe$none, $6441);
                                                        var $6442 = $6448;
                                                        break;
                                                };
                                                var self = $6442;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6449 = self.value;
                                                var $6450 = self.errors;
                                                var $6451 = Kind$Check$result$($6449, List$concat$($6436, $6450));
                                                var $6439 = $6451;
                                                break;
                                        };
                                        var $6437 = $6439;
                                        break;
                                    case 'Maybe.none':
                                        var $6452 = Kind$Check$result$(Maybe$none, $6436);
                                        var $6437 = $6452;
                                        break;
                                };
                                var $6422 = $6437;
                                break;
                        };
                        var $6418 = $6422;
                        break;
                };
                var $6415 = $6418;
                break;
            case 'List.nil':
                var $6453 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);
                var $6415 = $6453;
                break;
        };
        return $6415;
    };
    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);

    function Kind$Term$normalize$(_term$1, _defs$2) {
        var self = Kind$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $6455 = self.name;
                var $6456 = self.indx;
                var $6457 = Kind$Term$var$($6455, $6456);
                var $6454 = $6457;
                break;
            case 'Kind.Term.ref':
                var $6458 = self.name;
                var $6459 = Kind$Term$ref$($6458);
                var $6454 = $6459;
                break;
            case 'Kind.Term.all':
                var $6460 = self.eras;
                var $6461 = self.self;
                var $6462 = self.name;
                var $6463 = self.xtyp;
                var $6464 = self.body;
                var $6465 = Kind$Term$all$($6460, $6461, $6462, Kind$Term$normalize$($6463, _defs$2), (_s$8 => _x$9 => {
                    var $6466 = Kind$Term$normalize$($6464(_s$8)(_x$9), _defs$2);
                    return $6466;
                }));
                var $6454 = $6465;
                break;
            case 'Kind.Term.lam':
                var $6467 = self.name;
                var $6468 = self.body;
                var $6469 = Kind$Term$lam$($6467, (_x$5 => {
                    var $6470 = Kind$Term$normalize$($6468(_x$5), _defs$2);
                    return $6470;
                }));
                var $6454 = $6469;
                break;
            case 'Kind.Term.app':
                var $6471 = self.func;
                var $6472 = self.argm;
                var $6473 = Kind$Term$app$(Kind$Term$normalize$($6471, _defs$2), Kind$Term$normalize$($6472, _defs$2));
                var $6454 = $6473;
                break;
            case 'Kind.Term.let':
                var $6474 = self.name;
                var $6475 = self.expr;
                var $6476 = self.body;
                var $6477 = Kind$Term$let$($6474, Kind$Term$normalize$($6475, _defs$2), (_x$6 => {
                    var $6478 = Kind$Term$normalize$($6476(_x$6), _defs$2);
                    return $6478;
                }));
                var $6454 = $6477;
                break;
            case 'Kind.Term.def':
                var $6479 = self.name;
                var $6480 = self.expr;
                var $6481 = self.body;
                var $6482 = Kind$Term$def$($6479, Kind$Term$normalize$($6480, _defs$2), (_x$6 => {
                    var $6483 = Kind$Term$normalize$($6481(_x$6), _defs$2);
                    return $6483;
                }));
                var $6454 = $6482;
                break;
            case 'Kind.Term.ann':
                var $6484 = self.done;
                var $6485 = self.term;
                var $6486 = self.type;
                var $6487 = Kind$Term$ann$($6484, Kind$Term$normalize$($6485, _defs$2), Kind$Term$normalize$($6486, _defs$2));
                var $6454 = $6487;
                break;
            case 'Kind.Term.gol':
                var $6488 = self.name;
                var $6489 = self.dref;
                var $6490 = self.verb;
                var $6491 = Kind$Term$gol$($6488, $6489, $6490);
                var $6454 = $6491;
                break;
            case 'Kind.Term.hol':
                var $6492 = self.path;
                var $6493 = Kind$Term$hol$($6492);
                var $6454 = $6493;
                break;
            case 'Kind.Term.nat':
                var $6494 = self.natx;
                var $6495 = Kind$Term$nat$($6494);
                var $6454 = $6495;
                break;
            case 'Kind.Term.chr':
                var $6496 = self.chrx;
                var $6497 = Kind$Term$chr$($6496);
                var $6454 = $6497;
                break;
            case 'Kind.Term.str':
                var $6498 = self.strx;
                var $6499 = Kind$Term$str$($6498);
                var $6454 = $6499;
                break;
            case 'Kind.Term.ori':
                var $6500 = self.expr;
                var $6501 = Kind$Term$normalize$($6500, _defs$2);
                var $6454 = $6501;
                break;
            case 'Kind.Term.typ':
                var $6502 = Kind$Term$typ;
                var $6454 = $6502;
                break;
            case 'Kind.Term.cse':
                var $6503 = _term$1;
                var $6454 = $6503;
                break;
        };
        return $6454;
    };
    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);

    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.cons':
                var $6505 = self.head;
                var $6506 = self.tail;
                var self = $6505;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6508 = self.name;
                        var $6509 = self.type;
                        var $6510 = Kind$Term$all$(Bool$false, "", $6508, Maybe$default$($6509, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {
                            var $6511 = Kind$Term$desugar_cse$motive$($6506, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));
                            return $6511;
                        }));
                        var $6507 = $6510;
                        break;
                };
                var $6504 = $6507;
                break;
            case 'List.nil':
                var self = _moti$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6513 = self.value;
                        var $6514 = $6513;
                        var $6512 = $6514;
                        break;
                    case 'Maybe.none':
                        var self = _rtyp$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6516 = self.value;
                                var $6517 = Kind$Term$normalize$($6516, Kind$Map$new);
                                var $6515 = $6517;
                                break;
                            case 'Maybe.none':
                                var $6518 = Kind$Term$hol$(Bits$e);
                                var $6515 = $6518;
                                break;
                        };
                        var $6512 = $6515;
                        break;
                };
                var $6504 = $6512;
                break;
        };
        return $6504;
    };
    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6520 = self.tail;
                var $6521 = $6520;
                var $6519 = $6521;
                break;
            case 'List.nil':
                var $6522 = List$nil;
                var $6519 = $6522;
                break;
        };
        return $6519;
    };
    const List$tail = x0 => List$tail$(x0);

    function Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Kind$Term$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Kind$Term$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6523 = self.func;
                        var $6524 = self.argm;
                        var $6525 = Kind$Term$SmartMotive$vals$cont$(_expr$1, $6523, List$cons$($6524, _args$3), _defs$4);
                        return $6525;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6526 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $6526;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Kind$Term$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Kind$Term$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6527 = self.body;
                        var $6528 = Kind$Term$SmartMotive$vals$(_expr$1, $6527(Kind$Term$typ)(Kind$Term$typ), _defs$3);
                        return $6528;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6529 = Kind$Term$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $6529;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals = x0 => x1 => x2 => Kind$Term$SmartMotive$vals$(x0, x1, x2);

    function Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Kind$Term$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Kind$Term$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6530 = self.self;
                        var $6531 = self.name;
                        var $6532 = self.body;
                        var $6533 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6532(Kind$Term$ref$($6530))(Kind$Term$ref$($6531)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6531, List$nil)))), _binds$3), _defs$4);
                        return $6533;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6534 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $6534;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Kind$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Kind.Term.all':
                var $6536 = self.xtyp;
                var $6537 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6536, List$nil, _defs$3);
                var $6535 = $6537;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6538 = List$nil;
                var $6535 = $6538;
                break;
        };
        return $6535;
    };
    const Kind$Term$SmartMotive$nams = x0 => x1 => x2 => Kind$Term$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.cons':
                var $6540 = self.head;
                var $6541 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.cons':
                        var $6543 = self.head;
                        var $6544 = self.tail;
                        var $6545 = List$cons$(Pair$new$($6540, $6543), List$zip$($6541, $6544));
                        var $6542 = $6545;
                        break;
                    case 'List.nil':
                        var $6546 = List$nil;
                        var $6542 = $6546;
                        break;
                };
                var $6539 = $6542;
                break;
            case 'List.nil':
                var $6547 = List$nil;
                var $6539 = $6547;
                break;
        };
        return $6539;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Kind$Term$serialize$go$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6549 = self.indx;
                var self = ($6549 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $6549 <= 0n ? 0n : _depth$2 - $6549)))));
                    var $6551 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $6550 = $6551;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($6549)));
                    var $6552 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $6550 = $6552;
                };
                var $6548 = $6550;
                break;
            case 'Kind.Term.ref':
                var $6553 = self.name;
                var _name$7 = a1 => (a1 + (kind_name_to_bits($6553)));
                var $6554 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $6548 = $6554;
                break;
            case 'Kind.Term.all':
                var $6555 = self.eras;
                var $6556 = self.self;
                var $6557 = self.name;
                var $6558 = self.xtyp;
                var $6559 = self.body;
                var self = $6555;
                if (self) {
                    var $6561 = Bits$i;
                    var _eras$11 = $6561;
                } else {
                    var $6562 = Bits$o;
                    var _eras$11 = $6562;
                };
                var _self$12 = a1 => (a1 + (kind_name_to_bits($6556)));
                var _xtyp$13 = Kind$Term$serialize$go($6558)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Kind$Term$serialize$go($6559(Kind$Term$var$($6556, _depth$2))(Kind$Term$var$($6557, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $6560 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $6548 = $6560;
                break;
            case 'Kind.Term.lam':
                var $6563 = self.name;
                var $6564 = self.body;
                var _body$8 = Kind$Term$serialize$go($6564(Kind$Term$var$($6563, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6565 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $6548 = $6565;
                break;
            case 'Kind.Term.app':
                var $6566 = self.func;
                var $6567 = self.argm;
                var _func$8 = Kind$Term$serialize$go($6566)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Kind$Term$serialize$go($6567)(_depth$2)(_init$3)(_diff$4);
                var $6568 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $6548 = $6568;
                break;
            case 'Kind.Term.let':
                var $6569 = self.name;
                var $6570 = self.expr;
                var $6571 = self.body;
                var _expr$9 = Kind$Term$serialize$go($6570)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Kind$Term$serialize$go($6571(Kind$Term$var$($6569, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6572 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $6548 = $6572;
                break;
            case 'Kind.Term.def':
                var $6573 = self.expr;
                var $6574 = self.body;
                var $6575 = Kind$Term$serialize$go$($6574($6573), _depth$2, _init$3, _diff$4, _x$5);
                var $6548 = $6575;
                break;
            case 'Kind.Term.ann':
                var $6576 = self.term;
                var $6577 = Kind$Term$serialize$go$($6576, _depth$2, _init$3, _diff$4, _x$5);
                var $6548 = $6577;
                break;
            case 'Kind.Term.gol':
                var $6578 = self.name;
                var _name$9 = a1 => (a1 + (kind_name_to_bits($6578)));
                var $6579 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $6548 = $6579;
                break;
            case 'Kind.Term.nat':
                var $6580 = self.natx;
                var $6581 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($6580), _depth$2, _init$3, _diff$4, _x$5);
                var $6548 = $6581;
                break;
            case 'Kind.Term.chr':
                var $6582 = self.chrx;
                var $6583 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($6582), _depth$2, _init$3, _diff$4, _x$5);
                var $6548 = $6583;
                break;
            case 'Kind.Term.str':
                var $6584 = self.strx;
                var $6585 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($6584), _depth$2, _init$3, _diff$4, _x$5);
                var $6548 = $6585;
                break;
            case 'Kind.Term.ori':
                var $6586 = self.expr;
                var $6587 = Kind$Term$serialize$go$($6586, _depth$2, _init$3, _diff$4, _x$5);
                var $6548 = $6587;
                break;
            case 'Kind.Term.typ':
                var $6588 = (((_x$5 + '1') + '1') + '0');
                var $6548 = $6588;
                break;
            case 'Kind.Term.hol':
                var $6589 = _x$5;
                var $6548 = $6589;
                break;
            case 'Kind.Term.cse':
                var $6590 = _diff$4(_x$5);
                var $6548 = $6590;
                break;
        };
        return $6548;
    };
    const Kind$Term$serialize$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$go$(x0, x1, x2, x3, x4);

    function Kind$Term$serialize$(_term$1, _depth$2, _side$3) {
        var self = _side$3;
        if (self) {
            var $6592 = Bits$o;
            var _diff$4 = $6592;
        } else {
            var $6593 = Bits$i;
            var _diff$4 = $6593;
        };
        var $6591 = Kind$Term$serialize$go$(_term$1, _depth$2, _depth$2, _diff$4, Bits$e);
        return $6591;
    };
    const Kind$Term$serialize = x0 => x1 => x2 => Kind$Term$serialize$(x0, x1, x2);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, Bool$false);
        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, Bool$true);
        var $6594 = (_bh$5 === _ah$4);
        return $6594;
    };
    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);

    function Kind$Term$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $6596 = _to$3;
            var $6595 = $6596;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Kind.Term.var':
                    var $6598 = self.name;
                    var $6599 = self.indx;
                    var $6600 = Kind$Term$var$($6598, $6599);
                    var $6597 = $6600;
                    break;
                case 'Kind.Term.ref':
                    var $6601 = self.name;
                    var $6602 = Kind$Term$ref$($6601);
                    var $6597 = $6602;
                    break;
                case 'Kind.Term.all':
                    var $6603 = self.eras;
                    var $6604 = self.self;
                    var $6605 = self.name;
                    var $6606 = self.xtyp;
                    var $6607 = self.body;
                    var _xtyp$10 = Kind$Term$SmartMotive$replace$($6606, _from$2, _to$3, _lv$4);
                    var _body$11 = $6607(Kind$Term$ref$($6604))(Kind$Term$ref$($6605));
                    var _body$12 = Kind$Term$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $6608 = Kind$Term$all$($6603, $6604, $6605, _xtyp$10, (_s$13 => _x$14 => {
                        var $6609 = _body$12;
                        return $6609;
                    }));
                    var $6597 = $6608;
                    break;
                case 'Kind.Term.lam':
                    var $6610 = self.name;
                    var $6611 = self.body;
                    var _body$7 = $6611(Kind$Term$ref$($6610));
                    var _body$8 = Kind$Term$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6612 = Kind$Term$lam$($6610, (_x$9 => {
                        var $6613 = _body$8;
                        return $6613;
                    }));
                    var $6597 = $6612;
                    break;
                case 'Kind.Term.app':
                    var $6614 = self.func;
                    var $6615 = self.argm;
                    var _func$7 = Kind$Term$SmartMotive$replace$($6614, _from$2, _to$3, _lv$4);
                    var _argm$8 = Kind$Term$SmartMotive$replace$($6615, _from$2, _to$3, _lv$4);
                    var $6616 = Kind$Term$app$(_func$7, _argm$8);
                    var $6597 = $6616;
                    break;
                case 'Kind.Term.let':
                    var $6617 = self.name;
                    var $6618 = self.expr;
                    var $6619 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6618, _from$2, _to$3, _lv$4);
                    var _body$9 = $6619(Kind$Term$ref$($6617));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6620 = Kind$Term$let$($6617, _expr$8, (_x$11 => {
                        var $6621 = _body$10;
                        return $6621;
                    }));
                    var $6597 = $6620;
                    break;
                case 'Kind.Term.def':
                    var $6622 = self.name;
                    var $6623 = self.expr;
                    var $6624 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6623, _from$2, _to$3, _lv$4);
                    var _body$9 = $6624(Kind$Term$ref$($6622));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6625 = Kind$Term$def$($6622, _expr$8, (_x$11 => {
                        var $6626 = _body$10;
                        return $6626;
                    }));
                    var $6597 = $6625;
                    break;
                case 'Kind.Term.ann':
                    var $6627 = self.done;
                    var $6628 = self.term;
                    var $6629 = self.type;
                    var _term$8 = Kind$Term$SmartMotive$replace$($6628, _from$2, _to$3, _lv$4);
                    var _type$9 = Kind$Term$SmartMotive$replace$($6629, _from$2, _to$3, _lv$4);
                    var $6630 = Kind$Term$ann$($6627, _term$8, _type$9);
                    var $6597 = $6630;
                    break;
                case 'Kind.Term.ori':
                    var $6631 = self.expr;
                    var $6632 = Kind$Term$SmartMotive$replace$($6631, _from$2, _to$3, _lv$4);
                    var $6597 = $6632;
                    break;
                case 'Kind.Term.typ':
                    var $6633 = Kind$Term$typ;
                    var $6597 = $6633;
                    break;
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                    var $6634 = _term$1;
                    var $6597 = $6634;
                    break;
            };
            var $6595 = $6597;
        };
        return $6595;
    };
    const Kind$Term$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$replace$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {
        var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var $6635 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $6637 = self.fst;
                    var $6638 = self.snd;
                    var $6639 = Kind$Term$SmartMotive$replace$(_moti$11, $6638, Kind$Term$ref$($6637), _size$5);
                    var $6636 = $6639;
                    break;
            };
            return $6636;
        }));
        return $6635;
    };
    const Kind$Term$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);
        var self = _moti$2;
        switch (self._) {
            case 'Maybe.none':
                var $6641 = Kind$Term$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);
                var $6640 = $6641;
                break;
            case 'Maybe.some':
                var $6642 = _done$9;
                var $6640 = $6642;
                break;
        };
        return $6640;
    };
    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Kind$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Kind.Term.all':
                var $6644 = self.self;
                var $6645 = self.name;
                var $6646 = self.body;
                var $6647 = Kind$Term$lam$((() => {
                    var self = String$is_empty$($6645);
                    if (self) {
                        var $6648 = _name$1;
                        return $6648;
                    } else {
                        var $6649 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6645, List$nil))));
                        return $6649;
                    };
                })(), (_x$11 => {
                    var $6650 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $6646(Kind$Term$var$($6644, 0n))(Kind$Term$var$($6645, 0n)), _body$4, _defs$5);
                    return $6650;
                }));
                var $6643 = $6647;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.ori':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6652 = self.head;
                        var $6653 = self.tail;
                        var self = $6652;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6655 = self.name;
                                var $6656 = Kind$Term$lam$($6655, (_x$13 => {
                                    var $6657 = Kind$Term$desugar_cse$argument$(_name$1, $6653, _type$3, _body$4, _defs$5);
                                    return $6657;
                                }));
                                var $6654 = $6656;
                                break;
                        };
                        var $6651 = $6654;
                        break;
                    case 'List.nil':
                        var $6658 = _body$4;
                        var $6651 = $6658;
                        break;
                };
                var $6643 = $6651;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6660 = self.head;
                        var $6661 = self.tail;
                        var self = $6660;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6663 = self.name;
                                var $6664 = Kind$Term$lam$($6663, (_x$12 => {
                                    var $6665 = Kind$Term$desugar_cse$argument$(_name$1, $6661, _type$3, _body$4, _defs$5);
                                    return $6665;
                                }));
                                var $6662 = $6664;
                                break;
                        };
                        var $6659 = $6662;
                        break;
                    case 'List.nil':
                        var $6666 = _body$4;
                        var $6659 = $6666;
                        break;
                };
                var $6643 = $6659;
                break;
            case 'Kind.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6668 = self.head;
                        var $6669 = self.tail;
                        var self = $6668;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6671 = self.name;
                                var $6672 = Kind$Term$lam$($6671, (_x$11 => {
                                    var $6673 = Kind$Term$desugar_cse$argument$(_name$1, $6669, _type$3, _body$4, _defs$5);
                                    return $6673;
                                }));
                                var $6670 = $6672;
                                break;
                        };
                        var $6667 = $6670;
                        break;
                    case 'List.nil':
                        var $6674 = _body$4;
                        var $6667 = $6674;
                        break;
                };
                var $6643 = $6667;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6676 = self.head;
                        var $6677 = self.tail;
                        var self = $6676;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6679 = self.name;
                                var $6680 = Kind$Term$lam$($6679, (_x$14 => {
                                    var $6681 = Kind$Term$desugar_cse$argument$(_name$1, $6677, _type$3, _body$4, _defs$5);
                                    return $6681;
                                }));
                                var $6678 = $6680;
                                break;
                        };
                        var $6675 = $6678;
                        break;
                    case 'List.nil':
                        var $6682 = _body$4;
                        var $6675 = $6682;
                        break;
                };
                var $6643 = $6675;
                break;
            case 'Kind.Term.cse':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6684 = self.head;
                        var $6685 = self.tail;
                        var self = $6684;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6687 = self.name;
                                var $6688 = Kind$Term$lam$($6687, (_x$17 => {
                                    var $6689 = Kind$Term$desugar_cse$argument$(_name$1, $6685, _type$3, _body$4, _defs$5);
                                    return $6689;
                                }));
                                var $6686 = $6688;
                                break;
                        };
                        var $6683 = $6686;
                        break;
                    case 'List.nil':
                        var $6690 = _body$4;
                        var $6683 = $6690;
                        break;
                };
                var $6643 = $6683;
                break;
        };
        return $6643;
    };
    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.some':
                var $6692 = self.value;
                var $6693 = Maybe$some$($6692);
                var $6691 = $6693;
                break;
            case 'Maybe.none':
                var $6694 = _b$3;
                var $6691 = $6694;
                break;
        };
        return $6691;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6695 = self.self;
                        var $6696 = self.name;
                        var $6697 = self.xtyp;
                        var $6698 = self.body;
                        var _argm$13 = Maybe$or$(Kind$Map$get$($6696, _cses$4), Kind$Map$get$("_", _cses$4));
                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + ("_" + ($6696 + "_case")))));
                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $6697, _argm$14, _defs$6);
                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);
                        var _type$17 = $6698(Kind$Term$var$($6695, 0n))(Kind$Term$var$($6696, 0n));
                        var $6699 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                        return $6699;
                    case 'Kind.Term.var':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.ori':
                        var _expr$10 = (() => {
                            var $6702 = _expr$1;
                            var $6703 = _wyth$3;
                            let _expr$11 = $6702;
                            let _defn$10;
                            while ($6703._ === 'List.cons') {
                                _defn$10 = $6703.head;
                                var $6702 = Kind$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6704 = self.term;
                                            var $6705 = $6704;
                                            return $6705;
                                    };
                                })());
                                _expr$11 = $6702;
                                $6703 = $6703.tail;
                            }
                            return _expr$11;
                        })();
                        var $6700 = _expr$10;
                        return $6700;
                    case 'Kind.Term.ref':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                        var _expr$9 = (() => {
                            var $6708 = _expr$1;
                            var $6709 = _wyth$3;
                            let _expr$10 = $6708;
                            let _defn$9;
                            while ($6709._ === 'List.cons') {
                                _defn$9 = $6709.head;
                                var $6708 = Kind$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6710 = self.term;
                                            var $6711 = $6710;
                                            return $6711;
                                    };
                                })());
                                _expr$10 = $6708;
                                $6709 = $6709.tail;
                            }
                            return _expr$10;
                        })();
                        var $6706 = _expr$9;
                        return $6706;
                    case 'Kind.Term.typ':
                        var _expr$8 = (() => {
                            var $6714 = _expr$1;
                            var $6715 = _wyth$3;
                            let _expr$9 = $6714;
                            let _defn$8;
                            while ($6715._ === 'List.cons') {
                                _defn$8 = $6715.head;
                                var $6714 = Kind$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6716 = self.term;
                                            var $6717 = $6716;
                                            return $6717;
                                    };
                                })());
                                _expr$9 = $6714;
                                $6715 = $6715.tail;
                            }
                            return _expr$9;
                        })();
                        var $6712 = _expr$8;
                        return $6712;
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                        var _expr$11 = (() => {
                            var $6720 = _expr$1;
                            var $6721 = _wyth$3;
                            let _expr$12 = $6720;
                            let _defn$11;
                            while ($6721._ === 'List.cons') {
                                _defn$11 = $6721.head;
                                var $6720 = Kind$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6722 = self.term;
                                            var $6723 = $6722;
                                            return $6723;
                                    };
                                })());
                                _expr$12 = $6720;
                                $6721 = $6721.tail;
                            }
                            return _expr$12;
                        })();
                        var $6718 = _expr$11;
                        return $6718;
                    case 'Kind.Term.cse':
                        var _expr$14 = (() => {
                            var $6726 = _expr$1;
                            var $6727 = _wyth$3;
                            let _expr$15 = $6726;
                            let _defn$14;
                            while ($6727._ === 'List.cons') {
                                _defn$14 = $6727.head;
                                var $6726 = Kind$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6728 = self.term;
                                            var $6729 = $6728;
                                            return $6729;
                                    };
                                })());
                                _expr$15 = $6726;
                                $6727 = $6727.tail;
                            }
                            return _expr$15;
                        })();
                        var $6724 = _expr$14;
                        return $6724;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {
        var self = Kind$Term$reduce$(_etyp$6, _defs$8);
        switch (self._) {
            case 'Kind.Term.all':
                var $6731 = self.self;
                var $6732 = self.name;
                var $6733 = self.xtyp;
                var $6734 = self.body;
                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));
                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $6733, _moti$15, _defs$8);
                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);
                var _type$18 = $6734(Kind$Term$var$($6731, 0n))(Kind$Term$var$($6732, 0n));
                var $6735 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));
                var $6730 = $6735;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6736 = Maybe$none;
                var $6730 = $6736;
                break;
        };
        return $6730;
    };
    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $6737 = ({
            _: 'Kind.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $6737;
    };
    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);

    function BitsSet$has$(_bits$1, _set$2) {
        var self = (bitsmap_get(_bits$1, _set$2));
        switch (self._) {
            case 'Maybe.none':
                var $6739 = Bool$false;
                var $6738 = $6739;
                break;
            case 'Maybe.some':
                var $6740 = Bool$true;
                var $6738 = $6740;
                break;
        };
        return $6738;
    };
    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);

    function BitsSet$mut$has$(_bits$1, _set$2) {
        var $6741 = BitsSet$has$(_bits$1, _set$2);
        return $6741;
    };
    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);

    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {
        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({
            ctr: 'TCO',
            arg: [_term$1, _arity$2]
        });
        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);
        var arg = [_term$1, _arity$2];
        while (true) {
            let [_term$1, _arity$2] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $6742 = self.name;
                        var $6743 = Maybe$some$(Pair$new$($6742, _arity$2));
                        return $6743;
                    case 'Kind.Term.ref':
                        var $6744 = self.name;
                        var $6745 = Maybe$some$(Pair$new$($6744, _arity$2));
                        return $6745;
                    case 'Kind.Term.app':
                        var $6746 = self.func;
                        var $6747 = Kind$Term$equal$extra_holes$funari$($6746, Nat$succ$(_arity$2));
                        return $6747;
                    case 'Kind.Term.ori':
                        var $6748 = self.expr;
                        var $6749 = Kind$Term$equal$extra_holes$funari$($6748, _arity$2);
                        return $6749;
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6750 = Maybe$none;
                        return $6750;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);

    function Kind$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.all':
                var $6752 = self.xtyp;
                var $6753 = self.body;
                var $6754 = (Kind$Term$has_holes$($6752) || Kind$Term$has_holes$($6753(Kind$Term$typ)(Kind$Term$typ)));
                var $6751 = $6754;
                break;
            case 'Kind.Term.lam':
                var $6755 = self.body;
                var $6756 = Kind$Term$has_holes$($6755(Kind$Term$typ));
                var $6751 = $6756;
                break;
            case 'Kind.Term.app':
                var $6757 = self.func;
                var $6758 = self.argm;
                var $6759 = (Kind$Term$has_holes$($6757) || Kind$Term$has_holes$($6758));
                var $6751 = $6759;
                break;
            case 'Kind.Term.let':
                var $6760 = self.expr;
                var $6761 = self.body;
                var $6762 = (Kind$Term$has_holes$($6760) || Kind$Term$has_holes$($6761(Kind$Term$typ)));
                var $6751 = $6762;
                break;
            case 'Kind.Term.def':
                var $6763 = self.expr;
                var $6764 = self.body;
                var $6765 = (Kind$Term$has_holes$($6763) || Kind$Term$has_holes$($6764(Kind$Term$typ)));
                var $6751 = $6765;
                break;
            case 'Kind.Term.ann':
                var $6766 = self.term;
                var $6767 = self.type;
                var $6768 = (Kind$Term$has_holes$($6766) || Kind$Term$has_holes$($6767));
                var $6751 = $6768;
                break;
            case 'Kind.Term.ori':
                var $6769 = self.expr;
                var $6770 = Kind$Term$has_holes$($6769);
                var $6751 = $6770;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $6771 = Bool$false;
                var $6751 = $6771;
                break;
            case 'Kind.Term.hol':
                var $6772 = Bool$true;
                var $6751 = $6772;
                break;
        };
        return $6751;
    };
    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);

    function Kind$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var self = Kind$Term$has_holes$(_term$2);
                if (self) {
                    var $6775 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                    var $6774 = $6775;
                } else {
                    var $6776 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));
                    var $6774 = $6776;
                };
                var $6773 = $6774;
                break;
            case 'Kind.Term.hol':
                var $6777 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6773 = $6777;
                break;
        };
        return $6773;
    };
    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);

    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Kind.Term.app':
                var $6779 = self.func;
                var $6780 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6782 = self.func;
                        var $6783 = self.argm;
                        var self = Kind$Term$equal$extra_holes$filler$($6779, $6782);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6785 = self.value;
                                var $6786 = self.errors;
                                var self = $6785;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6788 = Kind$Check$result$(Maybe$none, $6786);
                                        var $6787 = $6788;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Term$equal$extra_holes$filler$($6780, $6783);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6790 = self.value;
                                                var $6791 = self.errors;
                                                var $6792 = Kind$Check$result$($6790, List$concat$($6786, $6791));
                                                var $6789 = $6792;
                                                break;
                                        };
                                        var $6787 = $6789;
                                        break;
                                };
                                var $6784 = $6787;
                                break;
                        };
                        var $6781 = $6784;
                        break;
                    case 'Kind.Term.hol':
                        var $6793 = self.path;
                        var self = Kind$Term$equal$hole$($6793, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6795 = self.value;
                                var $6796 = self.errors;
                                var self = $6795;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6798 = Kind$Check$result$(Maybe$none, $6796);
                                        var $6797 = $6798;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6800 = self.value;
                                                var $6801 = self.errors;
                                                var $6802 = Kind$Check$result$($6800, List$concat$($6796, $6801));
                                                var $6799 = $6802;
                                                break;
                                        };
                                        var $6797 = $6799;
                                        break;
                                };
                                var $6794 = $6797;
                                break;
                        };
                        var $6781 = $6794;
                        break;
                    case 'Kind.Term.ori':
                        var $6803 = self.expr;
                        var $6804 = Kind$Term$equal$extra_holes$filler$(_a$1, $6803);
                        var $6781 = $6804;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6805 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6781 = $6805;
                        break;
                };
                var $6778 = $6781;
                break;
            case 'Kind.Term.hol':
                var $6806 = self.path;
                var self = Kind$Term$equal$hole$($6806, _b$2);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6808 = self.value;
                        var $6809 = self.errors;
                        var self = $6808;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6811 = Kind$Check$result$(Maybe$none, $6809);
                                var $6810 = $6811;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6813 = self.value;
                                        var $6814 = self.errors;
                                        var $6815 = Kind$Check$result$($6813, List$concat$($6809, $6814));
                                        var $6812 = $6815;
                                        break;
                                };
                                var $6810 = $6812;
                                break;
                        };
                        var $6807 = $6810;
                        break;
                };
                var $6778 = $6807;
                break;
            case 'Kind.Term.ori':
                var $6816 = self.expr;
                var $6817 = Kind$Term$equal$extra_holes$filler$($6816, _b$2);
                var $6778 = $6817;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6819 = self.path;
                        var self = Kind$Term$equal$hole$($6819, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6821 = self.value;
                                var $6822 = self.errors;
                                var self = $6821;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6824 = Kind$Check$result$(Maybe$none, $6822);
                                        var $6823 = $6824;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6826 = self.value;
                                                var $6827 = self.errors;
                                                var $6828 = Kind$Check$result$($6826, List$concat$($6822, $6827));
                                                var $6825 = $6828;
                                                break;
                                        };
                                        var $6823 = $6825;
                                        break;
                                };
                                var $6820 = $6823;
                                break;
                        };
                        var $6818 = $6820;
                        break;
                    case 'Kind.Term.ori':
                        var $6829 = self.expr;
                        var $6830 = Kind$Term$equal$extra_holes$filler$(_a$1, $6829);
                        var $6818 = $6830;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6831 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6818 = $6831;
                        break;
                };
                var $6778 = $6818;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6833 = self.path;
                        var self = Kind$Term$equal$hole$($6833, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6835 = self.value;
                                var $6836 = self.errors;
                                var self = $6835;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6838 = Kind$Check$result$(Maybe$none, $6836);
                                        var $6837 = $6838;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6840 = self.value;
                                                var $6841 = self.errors;
                                                var $6842 = Kind$Check$result$($6840, List$concat$($6836, $6841));
                                                var $6839 = $6842;
                                                break;
                                        };
                                        var $6837 = $6839;
                                        break;
                                };
                                var $6834 = $6837;
                                break;
                        };
                        var $6832 = $6834;
                        break;
                    case 'Kind.Term.ori':
                        var $6843 = self.expr;
                        var $6844 = Kind$Term$equal$extra_holes$filler$(_a$1, $6843);
                        var $6832 = $6844;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6845 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6832 = $6845;
                        break;
                };
                var $6778 = $6832;
                break;
            case 'Kind.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6847 = self.path;
                        var self = Kind$Term$equal$hole$($6847, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6849 = self.value;
                                var $6850 = self.errors;
                                var self = $6849;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6852 = Kind$Check$result$(Maybe$none, $6850);
                                        var $6851 = $6852;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6854 = self.value;
                                                var $6855 = self.errors;
                                                var $6856 = Kind$Check$result$($6854, List$concat$($6850, $6855));
                                                var $6853 = $6856;
                                                break;
                                        };
                                        var $6851 = $6853;
                                        break;
                                };
                                var $6848 = $6851;
                                break;
                        };
                        var $6846 = $6848;
                        break;
                    case 'Kind.Term.ori':
                        var $6857 = self.expr;
                        var $6858 = Kind$Term$equal$extra_holes$filler$(_a$1, $6857);
                        var $6846 = $6858;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6859 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6846 = $6859;
                        break;
                };
                var $6778 = $6846;
                break;
            case 'Kind.Term.all':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6861 = self.path;
                        var self = Kind$Term$equal$hole$($6861, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6863 = self.value;
                                var $6864 = self.errors;
                                var self = $6863;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6866 = Kind$Check$result$(Maybe$none, $6864);
                                        var $6865 = $6866;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6868 = self.value;
                                                var $6869 = self.errors;
                                                var $6870 = Kind$Check$result$($6868, List$concat$($6864, $6869));
                                                var $6867 = $6870;
                                                break;
                                        };
                                        var $6865 = $6867;
                                        break;
                                };
                                var $6862 = $6865;
                                break;
                        };
                        var $6860 = $6862;
                        break;
                    case 'Kind.Term.ori':
                        var $6871 = self.expr;
                        var $6872 = Kind$Term$equal$extra_holes$filler$(_a$1, $6871);
                        var $6860 = $6872;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6873 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6860 = $6873;
                        break;
                };
                var $6778 = $6860;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6875 = self.path;
                        var self = Kind$Term$equal$hole$($6875, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6877 = self.value;
                                var $6878 = self.errors;
                                var self = $6877;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6880 = Kind$Check$result$(Maybe$none, $6878);
                                        var $6879 = $6880;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6882 = self.value;
                                                var $6883 = self.errors;
                                                var $6884 = Kind$Check$result$($6882, List$concat$($6878, $6883));
                                                var $6881 = $6884;
                                                break;
                                        };
                                        var $6879 = $6881;
                                        break;
                                };
                                var $6876 = $6879;
                                break;
                        };
                        var $6874 = $6876;
                        break;
                    case 'Kind.Term.ori':
                        var $6885 = self.expr;
                        var $6886 = Kind$Term$equal$extra_holes$filler$(_a$1, $6885);
                        var $6874 = $6886;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6887 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6874 = $6887;
                        break;
                };
                var $6778 = $6874;
                break;
            case 'Kind.Term.cse':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6889 = self.path;
                        var self = Kind$Term$equal$hole$($6889, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6891 = self.value;
                                var $6892 = self.errors;
                                var self = $6891;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6894 = Kind$Check$result$(Maybe$none, $6892);
                                        var $6893 = $6894;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6896 = self.value;
                                                var $6897 = self.errors;
                                                var $6898 = Kind$Check$result$($6896, List$concat$($6892, $6897));
                                                var $6895 = $6898;
                                                break;
                                        };
                                        var $6893 = $6895;
                                        break;
                                };
                                var $6890 = $6893;
                                break;
                        };
                        var $6888 = $6890;
                        break;
                    case 'Kind.Term.ori':
                        var $6899 = self.expr;
                        var $6900 = Kind$Term$equal$extra_holes$filler$(_a$1, $6899);
                        var $6888 = $6900;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6901 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6888 = $6901;
                        break;
                };
                var $6778 = $6888;
                break;
        };
        return $6778;
    };
    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);

    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);
        switch (self._) {
            case 'Maybe.some':
                var $6903 = self.value;
                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);
                switch (self._) {
                    case 'Maybe.some':
                        var $6905 = self.value;
                        var self = $6903;
                        switch (self._) {
                            case 'Pair.new':
                                var $6907 = self.fst;
                                var $6908 = self.snd;
                                var self = $6905;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $6910 = self.fst;
                                        var $6911 = self.snd;
                                        var _same_fun$9 = ($6907 === $6910);
                                        var _same_ari$10 = ($6908 === $6911);
                                        var self = (_same_fun$9 && _same_ari$10);
                                        if (self) {
                                            var $6913 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);
                                            var $6912 = $6913;
                                        } else {
                                            var $6914 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                            var $6912 = $6914;
                                        };
                                        var $6909 = $6912;
                                        break;
                                };
                                var $6906 = $6909;
                                break;
                        };
                        var $6904 = $6906;
                        break;
                    case 'Maybe.none':
                        var $6915 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6904 = $6915;
                        break;
                };
                var $6902 = $6904;
                break;
            case 'Maybe.none':
                var $6916 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                var $6902 = $6916;
                break;
        };
        return $6902;
    };
    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);

    function BitsSet$set$(_bits$1, _set$2) {
        var $6917 = (bitsmap_set(_bits$1, Unit$new, _set$2, 'set'));
        return $6917;
    };
    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);

    function BitsSet$mut$set$(_bits$1, _set$2) {
        var $6918 = BitsSet$set$(_bits$1, _set$2);
        return $6918;
    };
    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6920 = _b$2;
            var $6919 = $6920;
        } else {
            var $6921 = (!_b$2);
            var $6919 = $6921;
        };
        return $6919;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Kind$Term$equal$go$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, Bool$false);
        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, Bool$true);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6923 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6922 = $6923;
        } else {
            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, Bool$false);
            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, Bool$true);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6925 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6924 = $6925;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = BitsSet$mut$has$(_id$12, _seen$5);
                if (self) {
                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6928 = self.value;
                            var $6929 = self.errors;
                            var self = $6928;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6931 = Kind$Check$result$(Maybe$none, $6929);
                                    var $6930 = $6931;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6933 = self.value;
                                            var $6934 = self.errors;
                                            var $6935 = Kind$Check$result$($6933, List$concat$($6929, $6934));
                                            var $6932 = $6935;
                                            break;
                                    };
                                    var $6930 = $6932;
                                    break;
                            };
                            var $6927 = $6930;
                            break;
                    };
                    var $6926 = $6927;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Kind.Term.all':
                            var $6937 = self.eras;
                            var $6938 = self.self;
                            var $6939 = self.name;
                            var $6940 = self.xtyp;
                            var $6941 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.all':
                                    var $6943 = self.eras;
                                    var $6944 = self.self;
                                    var $6945 = self.name;
                                    var $6946 = self.xtyp;
                                    var $6947 = self.body;
                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $6941(Kind$Term$var$($6938, _lv$4))(Kind$Term$var$($6939, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $6947(Kind$Term$var$($6944, _lv$4))(Kind$Term$var$($6945, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($6938 === $6944);
                                    var _eq_eras$27 = Bool$eql$($6937, $6943);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Kind$Term$equal$go$($6940, $6946, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6950 = self.value;
                                                var $6951 = self.errors;
                                                var self = $6950;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6953 = self.value;
                                                        var self = Kind$Term$equal$go$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6955 = self.value;
                                                                var $6956 = self.errors;
                                                                var self = $6955;
                                                                switch (self._) {
                                                                    case 'Maybe.some':
                                                                        var $6958 = self.value;
                                                                        var self = Kind$Check$result$(Maybe$some$(($6953 && $6958)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Kind.Check.result':
                                                                                var $6960 = self.value;
                                                                                var $6961 = self.errors;
                                                                                var $6962 = Kind$Check$result$($6960, List$concat$($6956, $6961));
                                                                                var $6959 = $6962;
                                                                                break;
                                                                        };
                                                                        var $6957 = $6959;
                                                                        break;
                                                                    case 'Maybe.none':
                                                                        var $6963 = Kind$Check$result$(Maybe$none, $6956);
                                                                        var $6957 = $6963;
                                                                        break;
                                                                };
                                                                var self = $6957;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6964 = self.value;
                                                                var $6965 = self.errors;
                                                                var $6966 = Kind$Check$result$($6964, List$concat$($6951, $6965));
                                                                var $6954 = $6966;
                                                                break;
                                                        };
                                                        var $6952 = $6954;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6967 = Kind$Check$result$(Maybe$none, $6951);
                                                        var $6952 = $6967;
                                                        break;
                                                };
                                                var $6949 = $6952;
                                                break;
                                        };
                                        var $6948 = $6949;
                                    } else {
                                        var $6968 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6948 = $6968;
                                    };
                                    var $6942 = $6948;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6969 = self.path;
                                    var $6970 = Kind$Term$equal$hole$($6969, _a$1);
                                    var $6942 = $6970;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6971 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6942 = $6971;
                                    break;
                            };
                            var $6936 = $6942;
                            break;
                        case 'Kind.Term.lam':
                            var $6972 = self.name;
                            var $6973 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.lam':
                                    var $6975 = self.name;
                                    var $6976 = self.body;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $6973(Kind$Term$var$($6972, _lv$4));
                                    var _b1_body$19 = $6976(Kind$Term$var$($6975, _lv$4));
                                    var self = Kind$Term$equal$go$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6978 = self.value;
                                            var $6979 = self.errors;
                                            var self = $6978;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6981 = self.value;
                                                    var self = Kind$Check$result$(Maybe$some$($6981), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6983 = self.value;
                                                            var $6984 = self.errors;
                                                            var $6985 = Kind$Check$result$($6983, List$concat$($6979, $6984));
                                                            var $6982 = $6985;
                                                            break;
                                                    };
                                                    var $6980 = $6982;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6986 = Kind$Check$result$(Maybe$none, $6979);
                                                    var $6980 = $6986;
                                                    break;
                                            };
                                            var $6977 = $6980;
                                            break;
                                    };
                                    var $6974 = $6977;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6987 = self.path;
                                    var $6988 = Kind$Term$equal$hole$($6987, _a$1);
                                    var $6974 = $6988;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6989 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6974 = $6989;
                                    break;
                            };
                            var $6936 = $6974;
                            break;
                        case 'Kind.Term.app':
                            var $6990 = self.func;
                            var $6991 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.app':
                                    var $6993 = self.func;
                                    var $6994 = self.argm;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var self = Kind$Term$equal$go$($6990, $6993, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6996 = self.value;
                                            var $6997 = self.errors;
                                            var self = $6996;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6999 = self.value;
                                                    var self = Kind$Term$equal$go$($6991, $6994, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7001 = self.value;
                                                            var $7002 = self.errors;
                                                            var self = $7001;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $7004 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6999 && $7004)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $7006 = self.value;
                                                                            var $7007 = self.errors;
                                                                            var $7008 = Kind$Check$result$($7006, List$concat$($7002, $7007));
                                                                            var $7005 = $7008;
                                                                            break;
                                                                    };
                                                                    var $7003 = $7005;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $7009 = Kind$Check$result$(Maybe$none, $7002);
                                                                    var $7003 = $7009;
                                                                    break;
                                                            };
                                                            var self = $7003;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7010 = self.value;
                                                            var $7011 = self.errors;
                                                            var $7012 = Kind$Check$result$($7010, List$concat$($6997, $7011));
                                                            var $7000 = $7012;
                                                            break;
                                                    };
                                                    var $6998 = $7000;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7013 = Kind$Check$result$(Maybe$none, $6997);
                                                    var $6998 = $7013;
                                                    break;
                                            };
                                            var $6995 = $6998;
                                            break;
                                    };
                                    var $6992 = $6995;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7014 = self.path;
                                    var $7015 = Kind$Term$equal$hole$($7014, _a$1);
                                    var $6992 = $7015;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7016 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6992 = $7016;
                                    break;
                            };
                            var $6936 = $6992;
                            break;
                        case 'Kind.Term.let':
                            var $7017 = self.name;
                            var $7018 = self.expr;
                            var $7019 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.let':
                                    var $7021 = self.name;
                                    var $7022 = self.expr;
                                    var $7023 = self.body;
                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $7019(Kind$Term$var$($7017, _lv$4));
                                    var _b1_body$21 = $7023(Kind$Term$var$($7021, _lv$4));
                                    var self = Kind$Term$equal$go$($7018, $7022, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7025 = self.value;
                                            var $7026 = self.errors;
                                            var self = $7025;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7028 = self.value;
                                                    var self = Kind$Term$equal$go$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7030 = self.value;
                                                            var $7031 = self.errors;
                                                            var self = $7030;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $7033 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($7028 && $7033)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $7035 = self.value;
                                                                            var $7036 = self.errors;
                                                                            var $7037 = Kind$Check$result$($7035, List$concat$($7031, $7036));
                                                                            var $7034 = $7037;
                                                                            break;
                                                                    };
                                                                    var $7032 = $7034;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $7038 = Kind$Check$result$(Maybe$none, $7031);
                                                                    var $7032 = $7038;
                                                                    break;
                                                            };
                                                            var self = $7032;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7039 = self.value;
                                                            var $7040 = self.errors;
                                                            var $7041 = Kind$Check$result$($7039, List$concat$($7026, $7040));
                                                            var $7029 = $7041;
                                                            break;
                                                    };
                                                    var $7027 = $7029;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7042 = Kind$Check$result$(Maybe$none, $7026);
                                                    var $7027 = $7042;
                                                    break;
                                            };
                                            var $7024 = $7027;
                                            break;
                                    };
                                    var $7020 = $7024;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7043 = self.path;
                                    var $7044 = Kind$Term$equal$hole$($7043, _a$1);
                                    var $7020 = $7044;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7045 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7020 = $7045;
                                    break;
                            };
                            var $6936 = $7020;
                            break;
                        case 'Kind.Term.hol':
                            var $7046 = self.path;
                            var $7047 = Kind$Term$equal$hole$($7046, _b$2);
                            var $6936 = $7047;
                            break;
                        case 'Kind.Term.var':
                        case 'Kind.Term.ori':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7049 = self.path;
                                    var $7050 = Kind$Term$equal$hole$($7049, _a$1);
                                    var $7048 = $7050;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7051 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7048 = $7051;
                                    break;
                            };
                            var $6936 = $7048;
                            break;
                        case 'Kind.Term.ref':
                        case 'Kind.Term.nat':
                        case 'Kind.Term.chr':
                        case 'Kind.Term.str':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7053 = self.path;
                                    var $7054 = Kind$Term$equal$hole$($7053, _a$1);
                                    var $7052 = $7054;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7055 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7052 = $7055;
                                    break;
                            };
                            var $6936 = $7052;
                            break;
                        case 'Kind.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7057 = self.path;
                                    var $7058 = Kind$Term$equal$hole$($7057, _a$1);
                                    var $7056 = $7058;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7059 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7056 = $7059;
                                    break;
                            };
                            var $6936 = $7056;
                            break;
                        case 'Kind.Term.def':
                        case 'Kind.Term.ann':
                        case 'Kind.Term.gol':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7061 = self.path;
                                    var $7062 = Kind$Term$equal$hole$($7061, _a$1);
                                    var $7060 = $7062;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7063 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7060 = $7063;
                                    break;
                            };
                            var $6936 = $7060;
                            break;
                        case 'Kind.Term.cse':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7065 = self.path;
                                    var $7066 = Kind$Term$equal$hole$($7065, _a$1);
                                    var $7064 = $7066;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7067 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7064 = $7067;
                                    break;
                            };
                            var $6936 = $7064;
                            break;
                    };
                    var $6926 = $6936;
                };
                var $6924 = $6926;
            };
            var $6922 = $6924;
        };
        return $6922;
    };
    const Kind$Term$equal$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$go$(x0, x1, x2, x3, x4);
    const BitsSet$new = BitsMap$new;

    function BitsSet$mut$new$(_a$1) {
        var $7068 = BitsSet$new;
        return $7068;
    };
    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);

    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7070 = self.name;
                var $7071 = self.indx;
                var self = List$at_last$($7071, _ctx$4);
                switch (self._) {
                    case 'Maybe.some':
                        var $7073 = self.value;
                        var $7074 = Kind$Check$result$(Maybe$some$((() => {
                            var self = $7073;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7075 = self.snd;
                                    var $7076 = $7075;
                                    return $7076;
                            };
                        })()), List$nil);
                        var $7072 = $7074;
                        break;
                    case 'Maybe.none':
                        var $7077 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7070), List$nil));
                        var $7072 = $7077;
                        break;
                };
                var self = $7072;
                break;
            case 'Kind.Term.ref':
                var $7078 = self.name;
                var self = Kind$Map$get$($7078, _defs$3);
                switch (self._) {
                    case 'Maybe.some':
                        var $7080 = self.value;
                        var self = $7080;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7082 = self.name;
                                var $7083 = self.term;
                                var $7084 = self.type;
                                var $7085 = self.stat;
                                var _ref_name$18 = $7082;
                                var _ref_type$19 = $7084;
                                var _ref_term$20 = $7083;
                                var _ref_stat$21 = $7085;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                        var $7087 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));
                                        var $7086 = $7087;
                                        break;
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $7088 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $7086 = $7088;
                                        break;
                                    case 'Kind.Status.fail':
                                        var $7089 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));
                                        var $7086 = $7089;
                                        break;
                                };
                                var $7081 = $7086;
                                break;
                        };
                        var $7079 = $7081;
                        break;
                    case 'Maybe.none':
                        var $7090 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7078), List$nil));
                        var $7079 = $7090;
                        break;
                };
                var self = $7079;
                break;
            case 'Kind.Term.all':
                var $7091 = self.self;
                var $7092 = self.name;
                var $7093 = self.xtyp;
                var $7094 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Kind$Term$var$($7091, _ctx_size$12);
                var _body_var$14 = Kind$Term$var$($7092, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7092, $7093), List$cons$(Pair$new$($7091, _term$1), _ctx$4));
                var self = Kind$Term$check$($7093, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7096 = self.value;
                        var $7097 = self.errors;
                        var self = $7096;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7099 = Kind$Check$result$(Maybe$none, $7097);
                                var $7098 = $7099;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Term$check$($7094(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7101 = self.value;
                                        var $7102 = self.errors;
                                        var self = $7101;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7104 = Kind$Check$result$(Maybe$none, $7102);
                                                var $7103 = $7104;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7106 = self.value;
                                                        var $7107 = self.errors;
                                                        var $7108 = Kind$Check$result$($7106, List$concat$($7102, $7107));
                                                        var $7105 = $7108;
                                                        break;
                                                };
                                                var $7103 = $7105;
                                                break;
                                        };
                                        var self = $7103;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7109 = self.value;
                                        var $7110 = self.errors;
                                        var $7111 = Kind$Check$result$($7109, List$concat$($7097, $7110));
                                        var $7100 = $7111;
                                        break;
                                };
                                var $7098 = $7100;
                                break;
                        };
                        var $7095 = $7098;
                        break;
                };
                var self = $7095;
                break;
            case 'Kind.Term.lam':
                var $7112 = self.name;
                var $7113 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7115 = self.value;
                        var _typv$10 = Kind$Term$reduce$($7115, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Kind.Term.all':
                                var $7117 = self.xtyp;
                                var $7118 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Kind$Term$var$($7112, _ctx_size$16);
                                var _body_typ$19 = $7118(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7112, $7117), _ctx$4);
                                var self = Kind$Term$check$($7113(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7120 = self.value;
                                        var $7121 = self.errors;
                                        var self = $7120;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7123 = Kind$Check$result$(Maybe$none, $7121);
                                                var $7122 = $7123;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$($7115), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7125 = self.value;
                                                        var $7126 = self.errors;
                                                        var $7127 = Kind$Check$result$($7125, List$concat$($7121, $7126));
                                                        var $7124 = $7127;
                                                        break;
                                                };
                                                var $7122 = $7124;
                                                break;
                                        };
                                        var $7119 = $7122;
                                        break;
                                };
                                var $7116 = $7119;
                                break;
                            case 'Kind.Term.var':
                            case 'Kind.Term.lam':
                            case 'Kind.Term.app':
                            case 'Kind.Term.ori':
                                var _expected$13 = Either$left$("function");
                                var _detected$14 = Either$right$($7115);
                                var $7128 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7116 = $7128;
                                break;
                            case 'Kind.Term.ref':
                            case 'Kind.Term.hol':
                            case 'Kind.Term.nat':
                            case 'Kind.Term.chr':
                            case 'Kind.Term.str':
                                var _expected$12 = Either$left$("function");
                                var _detected$13 = Either$right$($7115);
                                var $7129 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7116 = $7129;
                                break;
                            case 'Kind.Term.typ':
                                var _expected$11 = Either$left$("function");
                                var _detected$12 = Either$right$($7115);
                                var $7130 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7116 = $7130;
                                break;
                            case 'Kind.Term.let':
                            case 'Kind.Term.def':
                            case 'Kind.Term.ann':
                            case 'Kind.Term.gol':
                                var _expected$14 = Either$left$("function");
                                var _detected$15 = Either$right$($7115);
                                var $7131 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7116 = $7131;
                                break;
                            case 'Kind.Term.cse':
                                var _expected$17 = Either$left$("function");
                                var _detected$18 = Either$right$($7115);
                                var $7132 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7116 = $7132;
                                break;
                        };
                        var $7114 = $7116;
                        break;
                    case 'Maybe.none':
                        var _lam_type$9 = Kind$Term$hol$(Bits$e);
                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7133 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7114 = $7133;
                        break;
                };
                var self = $7114;
                break;
            case 'Kind.Term.app':
                var $7134 = self.func;
                var $7135 = self.argm;
                var self = Kind$Term$check$($7134, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7137 = self.value;
                        var $7138 = self.errors;
                        var self = $7137;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7140 = self.value;
                                var _func_typ$12 = Kind$Term$reduce$($7140, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Kind.Term.all':
                                        var $7142 = self.xtyp;
                                        var $7143 = self.body;
                                        var self = Kind$Term$check$($7135, Maybe$some$($7142), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7145 = self.value;
                                                var $7146 = self.errors;
                                                var self = $7145;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7148 = Kind$Check$result$(Maybe$none, $7146);
                                                        var $7147 = $7148;
                                                        break;
                                                    case 'Maybe.some':
                                                        var self = Kind$Check$result$(Maybe$some$($7143($7134)($7135)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $7150 = self.value;
                                                                var $7151 = self.errors;
                                                                var $7152 = Kind$Check$result$($7150, List$concat$($7146, $7151));
                                                                var $7149 = $7152;
                                                                break;
                                                        };
                                                        var $7147 = $7149;
                                                        break;
                                                };
                                                var $7144 = $7147;
                                                break;
                                        };
                                        var self = $7144;
                                        break;
                                    case 'Kind.Term.var':
                                    case 'Kind.Term.lam':
                                    case 'Kind.Term.app':
                                    case 'Kind.Term.ori':
                                        var _expected$15 = Either$left$("function");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var self = $7134;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7154 = self.orig;
                                                var $7155 = Maybe$some$($7154);
                                                var _orig$17 = $7155;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7156 = _orig$6;
                                                var _orig$17 = $7156;
                                                break;
                                        };
                                        var $7153 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$17, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7153;
                                        break;
                                    case 'Kind.Term.ref':
                                    case 'Kind.Term.hol':
                                    case 'Kind.Term.nat':
                                    case 'Kind.Term.chr':
                                    case 'Kind.Term.str':
                                        var _expected$14 = Either$left$("function");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var self = $7134;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7158 = self.orig;
                                                var $7159 = Maybe$some$($7158);
                                                var _orig$16 = $7159;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7160 = _orig$6;
                                                var _orig$16 = $7160;
                                                break;
                                        };
                                        var $7157 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$16, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7157;
                                        break;
                                    case 'Kind.Term.typ':
                                        var _expected$13 = Either$left$("function");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var self = $7134;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7162 = self.orig;
                                                var $7163 = Maybe$some$($7162);
                                                var _orig$15 = $7163;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7164 = _orig$6;
                                                var _orig$15 = $7164;
                                                break;
                                        };
                                        var $7161 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$15, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7161;
                                        break;
                                    case 'Kind.Term.let':
                                    case 'Kind.Term.def':
                                    case 'Kind.Term.ann':
                                    case 'Kind.Term.gol':
                                        var _expected$16 = Either$left$("function");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var self = $7134;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7166 = self.orig;
                                                var $7167 = Maybe$some$($7166);
                                                var _orig$18 = $7167;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7168 = _orig$6;
                                                var _orig$18 = $7168;
                                                break;
                                        };
                                        var $7165 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$18, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7165;
                                        break;
                                    case 'Kind.Term.cse':
                                        var _expected$19 = Either$left$("function");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var self = $7134;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7170 = self.orig;
                                                var $7171 = Maybe$some$($7170);
                                                var _orig$21 = $7171;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7172 = _orig$6;
                                                var _orig$21 = $7172;
                                                break;
                                        };
                                        var $7169 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$21, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7169;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7173 = self.value;
                                        var $7174 = self.errors;
                                        var $7175 = Kind$Check$result$($7173, List$concat$($7138, $7174));
                                        var $7141 = $7175;
                                        break;
                                };
                                var $7139 = $7141;
                                break;
                            case 'Maybe.none':
                                var $7176 = Kind$Check$result$(Maybe$none, $7138);
                                var $7139 = $7176;
                                break;
                        };
                        var $7136 = $7139;
                        break;
                };
                var self = $7136;
                break;
            case 'Kind.Term.let':
                var $7177 = self.name;
                var $7178 = self.expr;
                var $7179 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7178, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7181 = self.value;
                        var $7182 = self.errors;
                        var self = $7181;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7184 = self.value;
                                var _body_val$14 = $7179(Kind$Term$var$($7177, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7177, $7184), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7186 = self.value;
                                        var $7187 = self.errors;
                                        var self = $7186;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7189 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7189), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7191 = self.value;
                                                        var $7192 = self.errors;
                                                        var $7193 = Kind$Check$result$($7191, List$concat$($7187, $7192));
                                                        var $7190 = $7193;
                                                        break;
                                                };
                                                var $7188 = $7190;
                                                break;
                                            case 'Maybe.none':
                                                var $7194 = Kind$Check$result$(Maybe$none, $7187);
                                                var $7188 = $7194;
                                                break;
                                        };
                                        var self = $7188;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7195 = self.value;
                                        var $7196 = self.errors;
                                        var $7197 = Kind$Check$result$($7195, List$concat$($7182, $7196));
                                        var $7185 = $7197;
                                        break;
                                };
                                var $7183 = $7185;
                                break;
                            case 'Maybe.none':
                                var $7198 = Kind$Check$result$(Maybe$none, $7182);
                                var $7183 = $7198;
                                break;
                        };
                        var $7180 = $7183;
                        break;
                };
                var self = $7180;
                break;
            case 'Kind.Term.def':
                var $7199 = self.name;
                var $7200 = self.expr;
                var $7201 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7200, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7203 = self.value;
                        var $7204 = self.errors;
                        var self = $7203;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7206 = self.value;
                                var _body_val$14 = $7201(Kind$Term$ann$(Bool$true, $7200, $7206));
                                var _body_ctx$15 = List$cons$(Pair$new$($7199, $7206), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7208 = self.value;
                                        var $7209 = self.errors;
                                        var self = $7208;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7211 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7211), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7213 = self.value;
                                                        var $7214 = self.errors;
                                                        var $7215 = Kind$Check$result$($7213, List$concat$($7209, $7214));
                                                        var $7212 = $7215;
                                                        break;
                                                };
                                                var $7210 = $7212;
                                                break;
                                            case 'Maybe.none':
                                                var $7216 = Kind$Check$result$(Maybe$none, $7209);
                                                var $7210 = $7216;
                                                break;
                                        };
                                        var self = $7210;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7217 = self.value;
                                        var $7218 = self.errors;
                                        var $7219 = Kind$Check$result$($7217, List$concat$($7204, $7218));
                                        var $7207 = $7219;
                                        break;
                                };
                                var $7205 = $7207;
                                break;
                            case 'Maybe.none':
                                var $7220 = Kind$Check$result$(Maybe$none, $7204);
                                var $7205 = $7220;
                                break;
                        };
                        var $7202 = $7205;
                        break;
                };
                var self = $7202;
                break;
            case 'Kind.Term.ann':
                var $7221 = self.done;
                var $7222 = self.term;
                var $7223 = self.type;
                var self = $7221;
                if (self) {
                    var $7225 = Kind$Check$result$(Maybe$some$($7223), List$nil);
                    var $7224 = $7225;
                } else {
                    var self = Kind$Term$check$($7222, Maybe$some$($7223), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $7227 = self.value;
                            var $7228 = self.errors;
                            var self = $7227;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7230 = Kind$Check$result$(Maybe$none, $7228);
                                    var $7229 = $7230;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Term$check$($7223, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7232 = self.value;
                                            var $7233 = self.errors;
                                            var self = $7232;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7235 = Kind$Check$result$(Maybe$none, $7233);
                                                    var $7234 = $7235;
                                                    break;
                                                case 'Maybe.some':
                                                    var self = Kind$Check$result$(Maybe$some$($7223), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7237 = self.value;
                                                            var $7238 = self.errors;
                                                            var $7239 = Kind$Check$result$($7237, List$concat$($7233, $7238));
                                                            var $7236 = $7239;
                                                            break;
                                                    };
                                                    var $7234 = $7236;
                                                    break;
                                            };
                                            var self = $7234;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7240 = self.value;
                                            var $7241 = self.errors;
                                            var $7242 = Kind$Check$result$($7240, List$concat$($7228, $7241));
                                            var $7231 = $7242;
                                            break;
                                    };
                                    var $7229 = $7231;
                                    break;
                            };
                            var $7226 = $7229;
                            break;
                    };
                    var $7224 = $7226;
                };
                var self = $7224;
                break;
            case 'Kind.Term.gol':
                var $7243 = self.name;
                var $7244 = self.dref;
                var $7245 = self.verb;
                var $7246 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($7243, $7244, $7245, _type$2, _ctx$4), List$nil));
                var self = $7246;
                break;
            case 'Kind.Term.cse':
                var $7247 = self.expr;
                var $7248 = self.name;
                var $7249 = self.with;
                var $7250 = self.cses;
                var $7251 = self.moti;
                var _expr$13 = $7247;
                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7253 = self.value;
                        var $7254 = self.errors;
                        var self = $7253;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7256 = self.value;
                                var self = Kind$Term$check$infer_with_types$($7249, _defs$3, _ctx$4, _path$5, _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7258 = self.value;
                                        var $7259 = self.errors;
                                        var self = $7258;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7261 = self.value;
                                                var _dsug$20 = Kind$Term$desugar_cse$($7247, $7248, $7261, $7250, $7251, $7256, _type$2, _defs$3, _ctx$4);
                                                var self = _dsug$20;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7263 = self.value;
                                                        var $7264 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $7263), List$nil));
                                                        var self = $7264;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $7265 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                                        var self = $7265;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7266 = self.value;
                                                        var $7267 = self.errors;
                                                        var $7268 = Kind$Check$result$($7266, List$concat$($7259, $7267));
                                                        var $7262 = $7268;
                                                        break;
                                                };
                                                var $7260 = $7262;
                                                break;
                                            case 'Maybe.none':
                                                var $7269 = Kind$Check$result$(Maybe$none, $7259);
                                                var $7260 = $7269;
                                                break;
                                        };
                                        var self = $7260;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7270 = self.value;
                                        var $7271 = self.errors;
                                        var $7272 = Kind$Check$result$($7270, List$concat$($7254, $7271));
                                        var $7257 = $7272;
                                        break;
                                };
                                var $7255 = $7257;
                                break;
                            case 'Maybe.none':
                                var $7273 = Kind$Check$result$(Maybe$none, $7254);
                                var $7255 = $7273;
                                break;
                        };
                        var $7252 = $7255;
                        break;
                };
                var self = $7252;
                break;
            case 'Kind.Term.ori':
                var $7274 = self.orig;
                var $7275 = self.expr;
                var $7276 = Kind$Term$check$($7275, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($7274));
                var self = $7276;
                break;
            case 'Kind.Term.typ':
                var $7277 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                var self = $7277;
                break;
            case 'Kind.Term.hol':
                var $7278 = Kind$Check$result$(_type$2, List$nil);
                var self = $7278;
                break;
            case 'Kind.Term.nat':
                var $7279 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")), List$nil);
                var self = $7279;
                break;
            case 'Kind.Term.chr':
                var $7280 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")), List$nil);
                var self = $7280;
                break;
            case 'Kind.Term.str':
                var $7281 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")), List$nil);
                var self = $7281;
                break;
        };
        switch (self._) {
            case 'Kind.Check.result':
                var $7282 = self.value;
                var $7283 = self.errors;
                var self = $7282;
                switch (self._) {
                    case 'Maybe.some':
                        var $7285 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7287 = self.value;
                                var self = Kind$Term$equal$go$($7287, $7285, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7289 = self.value;
                                        var $7290 = self.errors;
                                        var self = $7289;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7292 = self.value;
                                                var self = $7292;
                                                if (self) {
                                                    var $7294 = Kind$Check$result$(Maybe$some$($7287), List$nil);
                                                    var self = $7294;
                                                } else {
                                                    var $7295 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($7287), Either$right$($7285), _ctx$4), List$nil));
                                                    var self = $7295;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7296 = self.value;
                                                        var $7297 = self.errors;
                                                        var $7298 = Kind$Check$result$($7296, List$concat$($7290, $7297));
                                                        var $7293 = $7298;
                                                        break;
                                                };
                                                var $7291 = $7293;
                                                break;
                                            case 'Maybe.none':
                                                var $7299 = Kind$Check$result$(Maybe$none, $7290);
                                                var $7291 = $7299;
                                                break;
                                        };
                                        var $7288 = $7291;
                                        break;
                                };
                                var self = $7288;
                                break;
                            case 'Maybe.none':
                                var $7300 = Kind$Check$result$(Maybe$some$($7285), List$nil);
                                var self = $7300;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7301 = self.value;
                                var $7302 = self.errors;
                                var $7303 = Kind$Check$result$($7301, List$concat$($7283, $7302));
                                var $7286 = $7303;
                                break;
                        };
                        var $7284 = $7286;
                        break;
                    case 'Maybe.none':
                        var $7304 = Kind$Check$result$(Maybe$none, $7283);
                        var $7284 = $7304;
                        break;
                };
                var $7069 = $7284;
                break;
        };
        return $7069;
    };
    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);

    function Kind$Path$nil$(_x$1) {
        var $7305 = _x$1;
        return $7305;
    };
    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);
    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $7307 = Bool$true;
                var $7306 = $7307;
                break;
            case 'List.cons':
                var $7308 = Bool$false;
                var $7306 = $7308;
                break;
        };
        return $7306;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.all':
                var $7310 = self.eras;
                var $7311 = self.self;
                var $7312 = self.name;
                var $7313 = self.xtyp;
                var $7314 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7316 = self.slice(0, -1);
                        var $7317 = Kind$Term$all$($7310, $7311, $7312, Kind$Term$patch_at$($7316, $7313, _fn$3), $7314);
                        var $7315 = $7317;
                        break;
                    case 'i':
                        var $7318 = self.slice(0, -1);
                        var $7319 = Kind$Term$all$($7310, $7311, $7312, $7313, (_s$10 => _x$11 => {
                            var $7320 = Kind$Term$patch_at$($7318, $7314(_s$10)(_x$11), _fn$3);
                            return $7320;
                        }));
                        var $7315 = $7319;
                        break;
                    case 'e':
                        var $7321 = _fn$3(_term$2);
                        var $7315 = $7321;
                        break;
                };
                var $7309 = $7315;
                break;
            case 'Kind.Term.lam':
                var $7322 = self.name;
                var $7323 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7325 = _fn$3(_term$2);
                        var $7324 = $7325;
                        break;
                    case 'o':
                    case 'i':
                        var $7326 = Kind$Term$lam$($7322, (_x$7 => {
                            var $7327 = Kind$Term$patch_at$(Bits$tail$(_path$1), $7323(_x$7), _fn$3);
                            return $7327;
                        }));
                        var $7324 = $7326;
                        break;
                };
                var $7309 = $7324;
                break;
            case 'Kind.Term.app':
                var $7328 = self.func;
                var $7329 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7331 = self.slice(0, -1);
                        var $7332 = Kind$Term$app$(Kind$Term$patch_at$($7331, $7328, _fn$3), $7329);
                        var $7330 = $7332;
                        break;
                    case 'i':
                        var $7333 = self.slice(0, -1);
                        var $7334 = Kind$Term$app$($7328, Kind$Term$patch_at$($7333, $7329, _fn$3));
                        var $7330 = $7334;
                        break;
                    case 'e':
                        var $7335 = _fn$3(_term$2);
                        var $7330 = $7335;
                        break;
                };
                var $7309 = $7330;
                break;
            case 'Kind.Term.let':
                var $7336 = self.name;
                var $7337 = self.expr;
                var $7338 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7340 = self.slice(0, -1);
                        var $7341 = Kind$Term$let$($7336, Kind$Term$patch_at$($7340, $7337, _fn$3), $7338);
                        var $7339 = $7341;
                        break;
                    case 'i':
                        var $7342 = self.slice(0, -1);
                        var $7343 = Kind$Term$let$($7336, $7337, (_x$8 => {
                            var $7344 = Kind$Term$patch_at$($7342, $7338(_x$8), _fn$3);
                            return $7344;
                        }));
                        var $7339 = $7343;
                        break;
                    case 'e':
                        var $7345 = _fn$3(_term$2);
                        var $7339 = $7345;
                        break;
                };
                var $7309 = $7339;
                break;
            case 'Kind.Term.def':
                var $7346 = self.name;
                var $7347 = self.expr;
                var $7348 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7350 = self.slice(0, -1);
                        var $7351 = Kind$Term$def$($7346, Kind$Term$patch_at$($7350, $7347, _fn$3), $7348);
                        var $7349 = $7351;
                        break;
                    case 'i':
                        var $7352 = self.slice(0, -1);
                        var $7353 = Kind$Term$def$($7346, $7347, (_x$8 => {
                            var $7354 = Kind$Term$patch_at$($7352, $7348(_x$8), _fn$3);
                            return $7354;
                        }));
                        var $7349 = $7353;
                        break;
                    case 'e':
                        var $7355 = _fn$3(_term$2);
                        var $7349 = $7355;
                        break;
                };
                var $7309 = $7349;
                break;
            case 'Kind.Term.ann':
                var $7356 = self.done;
                var $7357 = self.term;
                var $7358 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7360 = self.slice(0, -1);
                        var $7361 = Kind$Term$ann$($7356, Kind$Term$patch_at$($7360, $7357, _fn$3), $7358);
                        var $7359 = $7361;
                        break;
                    case 'i':
                        var $7362 = self.slice(0, -1);
                        var $7363 = Kind$Term$ann$($7356, $7357, Kind$Term$patch_at$($7362, $7358, _fn$3));
                        var $7359 = $7363;
                        break;
                    case 'e':
                        var $7364 = _fn$3(_term$2);
                        var $7359 = $7364;
                        break;
                };
                var $7309 = $7359;
                break;
            case 'Kind.Term.ori':
                var $7365 = self.orig;
                var $7366 = self.expr;
                var $7367 = Kind$Term$ori$($7365, Kind$Term$patch_at$(_path$1, $7366, _fn$3));
                var $7309 = $7367;
                break;
            case 'Kind.Term.var':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7369 = _fn$3(_term$2);
                        var $7368 = $7369;
                        break;
                    case 'o':
                    case 'i':
                        var $7370 = _term$2;
                        var $7368 = $7370;
                        break;
                };
                var $7309 = $7368;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7372 = _fn$3(_term$2);
                        var $7371 = $7372;
                        break;
                    case 'o':
                    case 'i':
                        var $7373 = _term$2;
                        var $7371 = $7373;
                        break;
                };
                var $7309 = $7371;
                break;
            case 'Kind.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7375 = _fn$3(_term$2);
                        var $7374 = $7375;
                        break;
                    case 'o':
                    case 'i':
                        var $7376 = _term$2;
                        var $7374 = $7376;
                        break;
                };
                var $7309 = $7374;
                break;
            case 'Kind.Term.gol':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7378 = _fn$3(_term$2);
                        var $7377 = $7378;
                        break;
                    case 'o':
                    case 'i':
                        var $7379 = _term$2;
                        var $7377 = $7379;
                        break;
                };
                var $7309 = $7377;
                break;
            case 'Kind.Term.cse':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7381 = _fn$3(_term$2);
                        var $7380 = $7381;
                        break;
                    case 'o':
                    case 'i':
                        var $7382 = _term$2;
                        var $7380 = $7382;
                        break;
                };
                var $7309 = $7380;
                break;
        };
        return $7309;
    };
    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);

    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.cons':
                var $7384 = self.head;
                var $7385 = self.tail;
                var self = $7384;
                switch (self._) {
                    case 'Kind.Error.waiting':
                        var $7387 = self.name;
                        var $7388 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $7389 = _m$bind$15;
                            return $7389;
                        }))(Kind$Synth$one$($7387, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7391 = self.value;
                                    var $7392 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7391, $7385, Bool$true);
                                    var $7390 = $7392;
                                    break;
                                case 'Maybe.none':
                                    var $7393 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7385, _fixd$11);
                                    var $7390 = $7393;
                                    break;
                            };
                            return $7390;
                        }));
                        var $7386 = $7388;
                        break;
                    case 'Kind.Error.patch':
                        var $7394 = self.path;
                        var $7395 = self.term;
                        var self = $7394;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $7397 = self.slice(0, -1);
                                var _term$17 = Kind$Term$patch_at$($7397, _term$5, (_x$17 => {
                                    var $7399 = $7395;
                                    return $7399;
                                }));
                                var $7398 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $7385, Bool$true);
                                var $7396 = $7398;
                                break;
                            case 'i':
                                var $7400 = self.slice(0, -1);
                                var _type$17 = Kind$Term$patch_at$($7400, _type$6, (_x$17 => {
                                    var $7402 = $7395;
                                    return $7402;
                                }));
                                var $7401 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $7385, Bool$true);
                                var $7396 = $7401;
                                break;
                            case 'e':
                                var $7403 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $7404 = _m$pure$17;
                                    return $7404;
                                }))(Maybe$none);
                                var $7396 = $7403;
                                break;
                        };
                        var $7386 = $7396;
                        break;
                    case 'Kind.Error.undefined_reference':
                        var $7405 = self.name;
                        var $7406 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $7407 = _m$bind$16;
                            return $7407;
                        }))(Kind$Synth$one$($7405, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7409 = self.value;
                                    var $7410 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7409, $7385, Bool$true);
                                    var $7408 = $7410;
                                    break;
                                case 'Maybe.none':
                                    var $7411 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7385, _fixd$11);
                                    var $7408 = $7411;
                                    break;
                            };
                            return $7408;
                        }));
                        var $7386 = $7406;
                        break;
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.cant_infer':
                        var $7412 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7385, _fixd$11);
                        var $7386 = $7412;
                        break;
                };
                var $7383 = $7386;
                break;
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {
                        var $7415 = (_x$12 + '1');
                        return $7415;
                    }), _type$6);
                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {
                        var $7416 = (_x$13 + '0');
                        return $7416;
                    }), _term$5);
                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);
                    var $7414 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $7417 = _m$pure$16;
                        return $7417;
                    }))(Maybe$some$(_defs$14));
                    var $7413 = $7414;
                } else {
                    var $7418 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $7419 = _m$pure$13;
                        return $7419;
                    }))(Maybe$none);
                    var $7413 = $7418;
                };
                var $7383 = $7413;
                break;
        };
        return $7383;
    };
    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Kind$Status$fail$(_errors$1) {
        var $7420 = ({
            _: 'Kind.Status.fail',
            'errors': _errors$1
        });
        return $7420;
    };
    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);

    function Kind$Synth$one$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $7422 = self.value;
                var self = $7422;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7424 = self.file;
                        var $7425 = self.code;
                        var $7426 = self.orig;
                        var $7427 = self.name;
                        var $7428 = self.term;
                        var $7429 = self.type;
                        var $7430 = self.isct;
                        var $7431 = self.arit;
                        var $7432 = self.stat;
                        var _file$13 = $7424;
                        var _code$14 = $7425;
                        var _orig$15 = $7426;
                        var _name$16 = $7427;
                        var _term$17 = $7428;
                        var _type$18 = $7429;
                        var _isct$19 = $7430;
                        var _arit$20 = $7431;
                        var _stat$21 = $7432;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Kind.Status.init':
                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);
                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7435 = self.value;
                                        var $7436 = self.errors;
                                        var self = $7435;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7438 = Kind$Check$result$(Maybe$none, $7436);
                                                var $7437 = $7438;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7440 = self.value;
                                                        var $7441 = self.errors;
                                                        var self = $7440;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $7443 = Kind$Check$result$(Maybe$none, $7441);
                                                                var $7442 = $7443;
                                                                break;
                                                            case 'Maybe.some':
                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Kind.Check.result':
                                                                        var $7445 = self.value;
                                                                        var $7446 = self.errors;
                                                                        var $7447 = Kind$Check$result$($7445, List$concat$($7441, $7446));
                                                                        var $7444 = $7447;
                                                                        break;
                                                                };
                                                                var $7442 = $7444;
                                                                break;
                                                        };
                                                        var self = $7442;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7448 = self.value;
                                                        var $7449 = self.errors;
                                                        var $7450 = Kind$Check$result$($7448, List$concat$($7436, $7449));
                                                        var $7439 = $7450;
                                                        break;
                                                };
                                                var $7437 = $7439;
                                                break;
                                        };
                                        var _checked$23 = $7437;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7451 = self.errors;
                                        var self = List$is_empty$($7451);
                                        if (self) {
                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $7453 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $7454 = _m$pure$28;
                                                return $7454;
                                            }))(Maybe$some$(_defs$26));
                                            var $7452 = $7453;
                                        } else {
                                            var $7455 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $7456 = _m$bind$26;
                                                return $7456;
                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $7451, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7458 = self.value;
                                                        var $7459 = Kind$Synth$one$(_name$16, $7458);
                                                        var $7457 = $7459;
                                                        break;
                                                    case 'Maybe.none':
                                                        var _stat$27 = Kind$Status$fail$($7451);
                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $7460 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $7461 = _m$pure$30;
                                                            return $7461;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $7457 = $7460;
                                                        break;
                                                };
                                                return $7457;
                                            }));
                                            var $7452 = $7455;
                                        };
                                        var $7434 = $7452;
                                        break;
                                };
                                var $7433 = $7434;
                                break;
                            case 'Kind.Status.wait':
                                var $7462 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $7463 = _m$pure$23;
                                    return $7463;
                                }))(Maybe$some$(_defs$2));
                                var $7433 = $7462;
                                break;
                            case 'Kind.Status.done':
                            case 'Kind.Status.fail':
                                var $7464 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $7465 = _m$pure$24;
                                    return $7465;
                                }))(Maybe$some$(_defs$2));
                                var $7433 = $7464;
                                break;
                        };
                        var $7423 = $7433;
                        break;
                };
                var $7421 = $7423;
                break;
            case 'Maybe.none':
                var $7466 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7467 = _m$bind$3;
                    return $7467;
                }))(IO$get_time)((_time_a$3 => {
                    var $7468 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $7469 = _m$bind$4;
                        return $7469;
                    }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$4 => {
                        var self = _loaded$4;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7471 = self.value;
                                var $7472 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7473 = _m$bind$6;
                                    return $7473;
                                }))(IO$get_time)((_time_b$6 => {
                                    var $7474 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $7475 = _m$bind$7;
                                        return $7475;
                                    }))(Kind$Synth$one$(_name$1, $7471))((_result$7 => {
                                        var $7476 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $7477 = _m$bind$8;
                                            return $7477;
                                        }))(IO$get_time)((_time_c$8 => {
                                            var $7478 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $7479 = _m$pure$10;
                                                return $7479;
                                            }))(_result$7);
                                            return $7478;
                                        }));
                                        return $7476;
                                    }));
                                    return $7474;
                                }));
                                var $7470 = $7472;
                                break;
                            case 'Maybe.none':
                                var $7480 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                    var $7481 = _m$pure$6;
                                    return $7481;
                                }))(Maybe$none);
                                var $7470 = $7480;
                                break;
                        };
                        return $7470;
                    }));
                    return $7468;
                }));
                var $7421 = $7466;
                break;
        };
        return $7421;
    };
    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);

    function BitsMap$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7483 = self.head;
                var $7484 = self.tail;
                var self = $7483;
                switch (self._) {
                    case 'Pair.new':
                        var $7486 = self.fst;
                        var $7487 = self.snd;
                        var $7488 = (bitsmap_set($7486, $7487, BitsMap$from_list$($7484), 'set'));
                        var $7485 = $7488;
                        break;
                };
                var $7482 = $7485;
                break;
            case 'List.nil':
                var $7489 = BitsMap$new;
                var $7482 = $7489;
                break;
        };
        return $7482;
    };
    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);
    const Kind$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Kind.Check.pure", List$cons$("Kind.Check.bind", List$cons$("Kind.Check.monad", List$cons$("Kind.Check.value", List$cons$("Kind.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $7491 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);
            return $7491;
        }));
        var $7490 = BitsMap$from_list$(_kvs$2);
        return $7490;
    })();

    function Kind$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7493 = self.name;
                var _inli$4 = BitsSet$has$((kind_name_to_bits($7493)), Kind$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Kind$Map$get$($7493, _defs$2);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7496 = self.value;
                            var self = $7496;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7498 = self.term;
                                    var $7499 = Kind$Term$inline$reduce$($7498, _defs$2);
                                    var $7497 = $7499;
                                    break;
                            };
                            var $7495 = $7497;
                            break;
                        case 'Maybe.none':
                            var $7500 = Kind$Term$ref$($7493);
                            var $7495 = $7500;
                            break;
                    };
                    var $7494 = $7495;
                } else {
                    var $7501 = _term$1;
                    var $7494 = $7501;
                };
                var $7492 = $7494;
                break;
            case 'Kind.Term.app':
                var $7502 = self.func;
                var $7503 = self.argm;
                var _func$5 = Kind$Term$inline$reduce$($7502, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $7505 = self.body;
                        var $7506 = Kind$Term$inline$reduce$($7505($7503), _defs$2);
                        var $7504 = $7506;
                        break;
                    case 'Kind.Term.let':
                        var $7507 = self.name;
                        var $7508 = self.expr;
                        var $7509 = self.body;
                        var $7510 = Kind$Term$let$($7507, $7508, (_x$9 => {
                            var $7511 = Kind$Term$inline$reduce$(Kind$Term$app$($7509(_x$9), $7503), _defs$2);
                            return $7511;
                        }));
                        var $7504 = $7510;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7512 = _term$1;
                        var $7504 = $7512;
                        break;
                };
                var $7492 = $7504;
                break;
            case 'Kind.Term.ori':
                var $7513 = self.expr;
                var $7514 = Kind$Term$inline$reduce$($7513, _defs$2);
                var $7492 = $7514;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $7515 = _term$1;
                var $7492 = $7515;
                break;
        };
        return $7492;
    };
    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);

    function Kind$Term$inline$(_term$1, _defs$2) {
        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $7517 = self.name;
                var $7518 = self.indx;
                var $7519 = Kind$Term$var$($7517, $7518);
                var $7516 = $7519;
                break;
            case 'Kind.Term.ref':
                var $7520 = self.name;
                var $7521 = Kind$Term$ref$($7520);
                var $7516 = $7521;
                break;
            case 'Kind.Term.all':
                var $7522 = self.eras;
                var $7523 = self.self;
                var $7524 = self.name;
                var $7525 = self.xtyp;
                var $7526 = self.body;
                var $7527 = Kind$Term$all$($7522, $7523, $7524, Kind$Term$inline$($7525, _defs$2), (_s$8 => _x$9 => {
                    var $7528 = Kind$Term$inline$($7526(_s$8)(_x$9), _defs$2);
                    return $7528;
                }));
                var $7516 = $7527;
                break;
            case 'Kind.Term.lam':
                var $7529 = self.name;
                var $7530 = self.body;
                var $7531 = Kind$Term$lam$($7529, (_x$5 => {
                    var $7532 = Kind$Term$inline$($7530(_x$5), _defs$2);
                    return $7532;
                }));
                var $7516 = $7531;
                break;
            case 'Kind.Term.app':
                var $7533 = self.func;
                var $7534 = self.argm;
                var $7535 = Kind$Term$app$(Kind$Term$inline$($7533, _defs$2), Kind$Term$inline$($7534, _defs$2));
                var $7516 = $7535;
                break;
            case 'Kind.Term.let':
                var $7536 = self.name;
                var $7537 = self.expr;
                var $7538 = self.body;
                var $7539 = Kind$Term$let$($7536, Kind$Term$inline$($7537, _defs$2), (_x$6 => {
                    var $7540 = Kind$Term$inline$($7538(_x$6), _defs$2);
                    return $7540;
                }));
                var $7516 = $7539;
                break;
            case 'Kind.Term.def':
                var $7541 = self.name;
                var $7542 = self.expr;
                var $7543 = self.body;
                var $7544 = Kind$Term$def$($7541, Kind$Term$inline$($7542, _defs$2), (_x$6 => {
                    var $7545 = Kind$Term$inline$($7543(_x$6), _defs$2);
                    return $7545;
                }));
                var $7516 = $7544;
                break;
            case 'Kind.Term.ann':
                var $7546 = self.done;
                var $7547 = self.term;
                var $7548 = self.type;
                var $7549 = Kind$Term$ann$($7546, Kind$Term$inline$($7547, _defs$2), Kind$Term$inline$($7548, _defs$2));
                var $7516 = $7549;
                break;
            case 'Kind.Term.gol':
                var $7550 = self.name;
                var $7551 = self.dref;
                var $7552 = self.verb;
                var $7553 = Kind$Term$gol$($7550, $7551, $7552);
                var $7516 = $7553;
                break;
            case 'Kind.Term.hol':
                var $7554 = self.path;
                var $7555 = Kind$Term$hol$($7554);
                var $7516 = $7555;
                break;
            case 'Kind.Term.nat':
                var $7556 = self.natx;
                var $7557 = Kind$Term$nat$($7556);
                var $7516 = $7557;
                break;
            case 'Kind.Term.chr':
                var $7558 = self.chrx;
                var $7559 = Kind$Term$chr$($7558);
                var $7516 = $7559;
                break;
            case 'Kind.Term.str':
                var $7560 = self.strx;
                var $7561 = Kind$Term$str$($7560);
                var $7516 = $7561;
                break;
            case 'Kind.Term.ori':
                var $7562 = self.expr;
                var $7563 = Kind$Term$inline$($7562, _defs$2);
                var $7516 = $7563;
                break;
            case 'Kind.Term.typ':
                var $7564 = Kind$Term$typ;
                var $7516 = $7564;
                break;
            case 'Kind.Term.cse':
                var $7565 = _term$1;
                var $7516 = $7565;
                break;
        };
        return $7516;
    };
    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);

    function BitsMap$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7567 = self.val;
                var $7568 = self.lft;
                var $7569 = self.rgt;
                var self = $7567;
                switch (self._) {
                    case 'Maybe.some':
                        var $7571 = self.value;
                        var $7572 = List$cons$($7571, _list$3);
                        var _list0$7 = $7572;
                        break;
                    case 'Maybe.none':
                        var $7573 = _list$3;
                        var _list0$7 = $7573;
                        break;
                };
                var _list1$8 = BitsMap$values$go$($7568, _list0$7);
                var _list2$9 = BitsMap$values$go$($7569, _list1$8);
                var $7570 = _list2$9;
                var $7566 = $7570;
                break;
            case 'BitsMap.new':
                var $7574 = _list$3;
                var $7566 = $7574;
                break;
        };
        return $7566;
    };
    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);

    function BitsMap$values$(_xs$2) {
        var $7575 = BitsMap$values$go$(_xs$2, List$nil);
        return $7575;
    };
    const BitsMap$values = x0 => BitsMap$values$(x0);

    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $7577 = _name$2;
                        var $7576 = $7577;
                    } else {
                        var $7578 = (self - 1n);
                        var $7579 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $7576 = $7579;
                    };
                    return $7576;
                } else {
                    var $7580 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.cons':
                            var $7582 = self.head;
                            var $7583 = self.tail;
                            var self = (_name$2 === $7582);
                            if (self) {
                                var $7585 = Nat$succ$(_brui$3);
                                var _brui$8 = $7585;
                            } else {
                                var $7586 = _brui$3;
                                var _brui$8 = $7586;
                            };
                            var $7584 = Kind$Core$var_name$($7580, _name$2, _brui$8, $7583);
                            var $7581 = $7584;
                            break;
                        case 'List.nil':
                            var $7587 = "unbound";
                            var $7581 = $7587;
                            break;
                    };
                    return $7581;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);

    function Kind$Name$show$(_name$1) {
        var $7588 = _name$1;
        return $7588;
    };
    const Kind$Name$show = x0 => Kind$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $7590 = self.slice(0, -1);
                var $7591 = (2n * Bits$to_nat$($7590));
                var $7589 = $7591;
                break;
            case 'i':
                var $7592 = self.slice(0, -1);
                var $7593 = Nat$succ$((2n * Bits$to_nat$($7592)));
                var $7589 = $7593;
                break;
            case 'e':
                var $7594 = 0n;
                var $7589 = $7594;
                break;
        };
        return $7589;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $7596 = u16_to_word(self);
                var $7597 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($7596)));
                var $7595 = $7597;
                break;
        };
        return $7595;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Kind$Code$escape$char$(_chr$1) {
        var self = (_chr$1 === Kind$Code$backslash);
        if (self) {
            var $7599 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
            var $7598 = $7599;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $7601 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                var $7600 = $7601;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $7603 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                    var $7602 = $7603;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $7605 = String$cons$(_chr$1, String$nil);
                        var $7604 = $7605;
                    } else {
                        var $7606 = (String$cons$(Kind$Code$backslash, String$nil) + ("u{" + (U16$show_hex$(_chr$1) + "}")));
                        var $7604 = $7606;
                    };
                    var $7602 = $7604;
                };
                var $7600 = $7602;
            };
            var $7598 = $7600;
        };
        return $7598;
    };
    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);

    function Kind$Code$escape$go$(_str$1, _result$2) {
        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({
            ctr: 'TCO',
            arg: [_str$1, _result$2]
        });
        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);
        var arg = [_str$1, _result$2];
        while (true) {
            let [_str$1, _result$2] = arg;
            var R = (() => {
                var self = _str$1;
                if (self.length === 0) {
                    var $7607 = String$reverse$(_result$2);
                    return $7607;
                } else {
                    var $7608 = self.charCodeAt(0);
                    var $7609 = self.slice(1);
                    var $7610 = Kind$Code$escape$go$($7609, (String$reverse$(Kind$Code$escape$char$($7608)) + _result$2));
                    return $7610;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);

    function Kind$Code$escape$(_str$1) {
        var $7611 = Kind$Code$escape$go$(_str$1, "");
        return $7611;
    };
    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);

    function Kind$Core$show$go$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7613 = self.name;
                var $7614 = self.indx;
                var $7615 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $7614 <= 0n ? 0n : _indx$2 - $7614)), $7613, 0n, _vars$3);
                var $7612 = $7615;
                break;
            case 'Kind.Term.ref':
                var $7616 = self.name;
                var $7617 = Kind$Name$show$($7616);
                var $7612 = $7617;
                break;
            case 'Kind.Term.all':
                var $7618 = self.eras;
                var $7619 = self.self;
                var $7620 = self.name;
                var $7621 = self.xtyp;
                var $7622 = self.body;
                var _eras$9 = $7618;
                var self = _eras$9;
                if (self) {
                    var $7624 = "%";
                    var _init$10 = $7624;
                } else {
                    var $7625 = "@";
                    var _init$10 = $7625;
                };
                var _self$11 = Kind$Name$show$($7619);
                var _name$12 = Kind$Name$show$($7620);
                var _xtyp$13 = Kind$Core$show$go$($7621, _indx$2, _vars$3);
                var _body$14 = Kind$Core$show$go$($7622(Kind$Term$var$($7619, _indx$2))(Kind$Term$var$($7620, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($7620, List$cons$($7619, _vars$3)));
                var $7623 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $7612 = $7623;
                break;
            case 'Kind.Term.lam':
                var $7626 = self.name;
                var $7627 = self.body;
                var _name$6 = Kind$Name$show$($7626);
                var _body$7 = Kind$Core$show$go$($7627(Kind$Term$var$($7626, _indx$2)), Nat$succ$(_indx$2), List$cons$($7626, _vars$3));
                var $7628 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $7612 = $7628;
                break;
            case 'Kind.Term.app':
                var $7629 = self.func;
                var $7630 = self.argm;
                var _func$6 = Kind$Core$show$go$($7629, _indx$2, _vars$3);
                var _argm$7 = Kind$Core$show$go$($7630, _indx$2, _vars$3);
                var $7631 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $7612 = $7631;
                break;
            case 'Kind.Term.let':
                var $7632 = self.name;
                var $7633 = self.expr;
                var $7634 = self.body;
                var _name$7 = Kind$Name$show$($7632);
                var _expr$8 = Kind$Core$show$go$($7633, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7634(Kind$Term$var$($7632, _indx$2)), Nat$succ$(_indx$2), List$cons$($7632, _vars$3));
                var $7635 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7612 = $7635;
                break;
            case 'Kind.Term.def':
                var $7636 = self.name;
                var $7637 = self.expr;
                var $7638 = self.body;
                var _name$7 = Kind$Name$show$($7636);
                var _expr$8 = Kind$Core$show$go$($7637, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7638(Kind$Term$var$($7636, _indx$2)), Nat$succ$(_indx$2), List$cons$($7636, _vars$3));
                var $7639 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7612 = $7639;
                break;
            case 'Kind.Term.ann':
                var $7640 = self.term;
                var $7641 = self.type;
                var _term$7 = Kind$Core$show$go$($7640, _indx$2, _vars$3);
                var _type$8 = Kind$Core$show$go$($7641, _indx$2, _vars$3);
                var $7642 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $7612 = $7642;
                break;
            case 'Kind.Term.nat':
                var $7643 = self.natx;
                var $7644 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($7643), List$nil)));
                var $7612 = $7644;
                break;
            case 'Kind.Term.chr':
                var $7645 = self.chrx;
                var $7646 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7645), List$cons$("\'", List$nil))));
                var $7612 = $7646;
                break;
            case 'Kind.Term.str':
                var $7647 = self.strx;
                var $7648 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7647), List$cons$("\"", List$nil))));
                var $7612 = $7648;
                break;
            case 'Kind.Term.ori':
                var $7649 = self.expr;
                var $7650 = Kind$Core$show$go$($7649, _indx$2, _vars$3);
                var $7612 = $7650;
                break;
            case 'Kind.Term.typ':
                var $7651 = "*";
                var $7612 = $7651;
                break;
            case 'Kind.Term.gol':
                var $7652 = "<GOL>";
                var $7612 = $7652;
                break;
            case 'Kind.Term.hol':
                var $7653 = "<HOL>";
                var $7612 = $7653;
                break;
            case 'Kind.Term.cse':
                var $7654 = "<CSE>";
                var $7612 = $7654;
                break;
        };
        return $7612;
    };
    const Kind$Core$show$go = x0 => x1 => x2 => Kind$Core$show$go$(x0, x1, x2);

    function Kind$Core$show$(_term$1) {
        var $7655 = Kind$Core$show$go$(_term$1, 0n, List$nil);
        return $7655;
    };
    const Kind$Core$show = x0 => Kind$Core$show$(x0);

    function Kind$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $7658 = _result$2;
            var $7659 = BitsMap$values$(_defs$1);
            let _result$4 = $7658;
            let _defn$3;
            while ($7659._ === 'List.cons') {
                _defn$3 = $7659.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7660 = self.name;
                        var $7661 = self.term;
                        var $7662 = self.type;
                        var $7663 = self.stat;
                        var self = $7663;
                        switch (self._) {
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $7665 = _result$4;
                                var $7664 = $7665;
                                break;
                            case 'Kind.Status.done':
                                var _name$15 = $7660;
                                var _term$16 = Kind$Core$show$($7661);
                                var _type$17 = Kind$Core$show$($7662);
                                var $7666 = String$flatten$(List$cons$(_result$4, List$cons$(_name$15, List$cons$(" : ", List$cons$(_type$17, List$cons$(" = ", List$cons$(_term$16, List$cons$(";\u{a}", List$nil))))))));
                                var $7664 = $7666;
                                break;
                        };
                        var $7658 = $7664;
                        break;
                };
                _result$4 = $7658;
                $7659 = $7659.tail;
            }
            return _result$4;
        })();
        var $7656 = _result$3;
        return $7656;
    };
    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);

    function Kind$api$io$term_to_core$(_name$1) {
        var $7667 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7668 = _m$bind$2;
            return $7668;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7670 = self.value;
                    var $7671 = $7670;
                    var _defs$3 = $7671;
                    break;
                case 'Maybe.none':
                    var $7672 = Kind$Map$new;
                    var _defs$3 = $7672;
                    break;
            };
            var _defs$4 = BitsMap$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7674 = self.file;
                        var $7675 = self.code;
                        var $7676 = self.orig;
                        var $7677 = self.name;
                        var $7678 = self.term;
                        var $7679 = self.type;
                        var $7680 = self.isct;
                        var $7681 = self.arit;
                        var $7682 = self.stat;
                        var _term$14 = Kind$Term$inline$($7678, _defs$3);
                        var _type$15 = Kind$Term$inline$($7679, _defs$3);
                        var $7683 = Kind$Def$new$($7674, $7675, $7676, $7677, _term$14, _type$15, $7680, $7681, $7682);
                        var $7673 = $7683;
                        break;
                };
                return $7673;
            }), _defs$3);
            var $7669 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $7684 = _m$pure$6;
                return $7684;
            }))(Kind$Defs$core$(_defs$4));
            return $7669;
        }));
        return $7667;
    };
    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);

    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7686 = self.val;
                var $7687 = self.lft;
                var $7688 = self.rgt;
                var self = $7686;
                switch (self._) {
                    case 'Maybe.none':
                        var $7690 = _list$4;
                        var _list0$8 = $7690;
                        break;
                    case 'Maybe.some':
                        var $7691 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $7691;
                        break;
                };
                var _list1$9 = BitsMap$keys$go$($7687, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$keys$go$($7688, (_key$3 + '1'), _list1$9);
                var $7689 = _list2$10;
                var $7685 = $7689;
                break;
            case 'BitsMap.new':
                var $7692 = _list$4;
                var $7685 = $7692;
                break;
        };
        return $7685;
    };
    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);

    function BitsMap$keys$(_xs$2) {
        var $7693 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));
        return $7693;
    };
    const BitsMap$keys = x0 => BitsMap$keys$(x0);

    function Kind$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $7695 = self.head;
                var $7696 = self.tail;
                var $7697 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7698 = _m$bind$5;
                    return $7698;
                }))(Kind$Synth$one$($7695, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.some':
                            var $7700 = self.value;
                            var $7701 = Kind$Synth$many$($7696, $7700);
                            var $7699 = $7701;
                            break;
                        case 'Maybe.none':
                            var $7702 = Kind$Synth$many$($7696, _defs$2);
                            var $7699 = $7702;
                            break;
                    };
                    return $7699;
                }));
                var $7694 = $7697;
                break;
            case 'List.nil':
                var $7703 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7704 = _m$pure$4;
                    return $7704;
                }))(_defs$2);
                var $7694 = $7703;
                break;
        };
        return $7694;
    };
    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);

    function Kind$Synth$file$(_file$1, _defs$2) {
        var $7705 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7706 = _m$bind$3;
            return $7706;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $7708 = self.value;
                    var $7709 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $7710 = _m$pure$7;
                        return $7710;
                    }))(Either$left$($7708));
                    var $7707 = $7709;
                    break;
                case 'Either.right':
                    var $7711 = self.value;
                    var _file_defs$6 = $7711;
                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);
                    var $7712 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $7713 = _m$bind$9;
                        return $7713;
                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $7714 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $7715 = _m$pure$11;
                            return $7715;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $7714;
                    }));
                    var $7707 = $7712;
                    break;
            };
            return $7707;
        }));
        return $7705;
    };
    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);

    function IO$put_string$(_text$1) {
        var $7716 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $7717 = IO$end$(Unit$new);
            return $7717;
        }));
        return $7716;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $7718 = IO$put_string$((_text$1 + "\u{a}"));
        return $7718;
    };
    const IO$print = x0 => IO$print$(x0);

    function Kind$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7720 = self.name;
                var self = ($7720 === "Nat.zero");
                if (self) {
                    var $7722 = Maybe$some$(0n);
                    var $7721 = $7722;
                } else {
                    var $7723 = Maybe$none;
                    var $7721 = $7723;
                };
                var $7719 = $7721;
                break;
            case 'Kind.Term.app':
                var $7724 = self.func;
                var $7725 = self.argm;
                var self = $7724;
                switch (self._) {
                    case 'Kind.Term.ref':
                        var $7727 = self.name;
                        var self = ($7727 === "Nat.succ");
                        if (self) {
                            var $7729 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $7730 = _m$bind$5;
                                return $7730;
                            }))(Kind$Term$show$as_nat$go$($7725))((_pred$5 => {
                                var $7731 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7732 = _m$pure$7;
                                    return $7732;
                                }))(Nat$succ$(_pred$5));
                                return $7731;
                            }));
                            var $7728 = $7729;
                        } else {
                            var $7733 = Maybe$none;
                            var $7728 = $7733;
                        };
                        var $7726 = $7728;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7734 = Maybe$none;
                        var $7726 = $7734;
                        break;
                };
                var $7719 = $7726;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7735 = Maybe$none;
                var $7719 = $7735;
                break;
        };
        return $7719;
    };
    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);

    function Kind$Term$show$as_nat$(_term$1) {
        var $7736 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);
        return $7736;
    };
    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);

    function Kind$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7738 = self.name;
                var $7739 = (_name$2 === $7738);
                var $7737 = $7739;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7740 = Bool$false;
                var $7737 = $7740;
                break;
        };
        return $7737;
    };
    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);

    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Kind$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), "?");
            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), "?");
            var $7742 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $7741 = $7742;
        } else {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $7744 = Bool$false;
                var _wrap$6 = $7744;
            } else {
                var $7745 = self.charCodeAt(0);
                var $7746 = self.slice(1);
                var $7747 = ($7745 === 40);
                var _wrap$6 = $7747;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $7748 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $7748;
            } else {
                var $7749 = _func$5;
                var _func$8 = $7749;
            };
            var $7743 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $7741 = $7743;
        };
        return $7741;
    };
    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);

    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {
        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $7750 = self.func;
                        var $7751 = self.argm;
                        var $7752 = Kind$Term$show$app$($7750, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($7751, Kind$MPath$i$(_path$2)), _args$3));
                        return $7752;
                    case 'Kind.Term.ori':
                        var $7753 = self.expr;
                        var $7754 = Kind$Term$show$app$($7753, _path$2, _args$3);
                        return $7754;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7755 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $7755;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);

    function BitsMap$to_list$(_xs$2) {
        var $7756 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        return $7756;
    };
    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);

    function Kind$Term$show$go$(_term$1, _path$2) {
        var self = Kind$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.some':
                var $7758 = self.value;
                var $7759 = $7758;
                var $7757 = $7759;
                break;
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $7761 = self.name;
                        var $7762 = Kind$Name$show$($7761);
                        var $7760 = $7762;
                        break;
                    case 'Kind.Term.ref':
                        var $7763 = self.name;
                        var _name$4 = Kind$Name$show$($7763);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7765 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($7765));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $7766 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $7764 = $7766;
                                break;
                            case 'Maybe.none':
                                var $7767 = _name$4;
                                var $7764 = $7767;
                                break;
                        };
                        var $7760 = $7764;
                        break;
                    case 'Kind.Term.all':
                        var $7768 = self.eras;
                        var $7769 = self.self;
                        var $7770 = self.name;
                        var $7771 = self.xtyp;
                        var $7772 = self.body;
                        var _eras$8 = $7768;
                        var _self$9 = Kind$Name$show$($7769);
                        var _name$10 = Kind$Name$show$($7770);
                        var _type$11 = Kind$Term$show$go$($7771, Kind$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $7774 = "<";
                            var _open$12 = $7774;
                        } else {
                            var $7775 = "(";
                            var _open$12 = $7775;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $7776 = ">";
                            var _clos$13 = $7776;
                        } else {
                            var $7777 = ")";
                            var _clos$13 = $7777;
                        };
                        var _body$14 = Kind$Term$show$go$($7772(Kind$Term$var$($7769, 0n))(Kind$Term$var$($7770, 0n)), Kind$MPath$i$(_path$2));
                        var $7773 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $7760 = $7773;
                        break;
                    case 'Kind.Term.lam':
                        var $7778 = self.name;
                        var $7779 = self.body;
                        var _name$5 = Kind$Name$show$($7778);
                        var _body$6 = Kind$Term$show$go$($7779(Kind$Term$var$($7778, 0n)), Kind$MPath$o$(_path$2));
                        var $7780 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $7760 = $7780;
                        break;
                    case 'Kind.Term.let':
                        var $7781 = self.name;
                        var $7782 = self.expr;
                        var $7783 = self.body;
                        var _name$6 = Kind$Name$show$($7781);
                        var _expr$7 = Kind$Term$show$go$($7782, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7783(Kind$Term$var$($7781, 0n)), Kind$MPath$i$(_path$2));
                        var $7784 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7760 = $7784;
                        break;
                    case 'Kind.Term.def':
                        var $7785 = self.name;
                        var $7786 = self.expr;
                        var $7787 = self.body;
                        var _name$6 = Kind$Name$show$($7785);
                        var _expr$7 = Kind$Term$show$go$($7786, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7787(Kind$Term$var$($7785, 0n)), Kind$MPath$i$(_path$2));
                        var $7788 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7760 = $7788;
                        break;
                    case 'Kind.Term.ann':
                        var $7789 = self.term;
                        var $7790 = self.type;
                        var _term$6 = Kind$Term$show$go$($7789, Kind$MPath$o$(_path$2));
                        var _type$7 = Kind$Term$show$go$($7790, Kind$MPath$i$(_path$2));
                        var $7791 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $7760 = $7791;
                        break;
                    case 'Kind.Term.gol':
                        var $7792 = self.name;
                        var _name$6 = Kind$Name$show$($7792);
                        var $7793 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $7760 = $7793;
                        break;
                    case 'Kind.Term.nat':
                        var $7794 = self.natx;
                        var $7795 = String$flatten$(List$cons$(Nat$show$($7794), List$nil));
                        var $7760 = $7795;
                        break;
                    case 'Kind.Term.chr':
                        var $7796 = self.chrx;
                        var $7797 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7796), List$cons$("\'", List$nil))));
                        var $7760 = $7797;
                        break;
                    case 'Kind.Term.str':
                        var $7798 = self.strx;
                        var $7799 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7798), List$cons$("\"", List$nil))));
                        var $7760 = $7799;
                        break;
                    case 'Kind.Term.cse':
                        var $7800 = self.expr;
                        var $7801 = self.name;
                        var $7802 = self.with;
                        var $7803 = self.cses;
                        var $7804 = self.moti;
                        var _expr$9 = Kind$Term$show$go$($7800, Kind$MPath$o$(_path$2));
                        var _name$10 = Kind$Name$show$($7801);
                        var _wyth$11 = String$join$("; ", List$mapped$($7802, (_with_var$11 => {
                            var self = _with_var$11;
                            switch (self._) {
                                case 'Kind.Ann.new':
                                    var $7807 = self.name;
                                    var $7808 = self.type;
                                    var self = $7808;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $7810 = self.value;
                                            var $7811 = ($7807 + (": " + Kind$Term$show$go$($7810, Maybe$none)));
                                            var $7809 = $7811;
                                            break;
                                        case 'Maybe.none':
                                            var $7812 = $7807;
                                            var $7809 = $7812;
                                            break;
                                    };
                                    var $7806 = $7809;
                                    break;
                            };
                            return $7806;
                        })));
                        var _cses$12 = BitsMap$to_list$($7803);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $7813 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $7813;
                        })));
                        var self = $7804;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7814 = self.value;
                                var $7815 = String$flatten$(List$cons$(": ", List$cons$(Kind$Term$show$go$($7814, Maybe$none), List$nil)));
                                var _moti$14 = $7815;
                                break;
                            case 'Maybe.none':
                                var $7816 = "";
                                var _moti$14 = $7816;
                                break;
                        };
                        var $7805 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $7760 = $7805;
                        break;
                    case 'Kind.Term.ori':
                        var $7817 = self.expr;
                        var $7818 = Kind$Term$show$go$($7817, _path$2);
                        var $7760 = $7818;
                        break;
                    case 'Kind.Term.typ':
                        var $7819 = "Type";
                        var $7760 = $7819;
                        break;
                    case 'Kind.Term.app':
                        var $7820 = Kind$Term$show$app$(_term$1, _path$2, List$nil);
                        var $7760 = $7820;
                        break;
                    case 'Kind.Term.hol':
                        var $7821 = "_";
                        var $7760 = $7821;
                        break;
                };
                var $7757 = $7760;
                break;
        };
        return $7757;
    };
    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);

    function Kind$Term$show$(_term$1) {
        var $7822 = Kind$Term$show$go$(_term$1, Maybe$none);
        return $7822;
    };
    const Kind$Term$show = x0 => Kind$Term$show$(x0);

    function Kind$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $7825 = _types$3;
            var $7826 = _names$2;
            let _types$5 = $7825;
            let _name$4;
            while ($7826._ === 'List.cons') {
                _name$4 = $7826.head;
                var self = Kind$Map$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $7827 = self.value;
                        var self = $7827;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7829 = self.type;
                                var $7830 = (_types$5 + (_name$4 + (": " + (Kind$Term$show$($7829) + "\u{a}"))));
                                var $7828 = $7830;
                                break;
                        };
                        var $7825 = $7828;
                        break;
                    case 'Maybe.none':
                        var $7831 = _types$5;
                        var $7825 = $7831;
                        break;
                };
                _types$5 = $7825;
                $7826 = $7826.tail;
            }
            return _types$5;
        })();
        var $7823 = _types$4;
        return $7823;
    };
    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);

    function List$filter$(_f$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $7833 = self.head;
                var $7834 = self.tail;
                var self = _f$2($7833);
                if (self) {
                    var $7836 = List$cons$($7833, List$filter$(_f$2, $7834));
                    var $7835 = $7836;
                } else {
                    var $7837 = List$filter$(_f$2, $7834);
                    var $7835 = $7837;
                };
                var $7832 = $7835;
                break;
            case 'List.nil':
                var $7838 = List$nil;
                var $7832 = $7838;
                break;
        };
        return $7832;
    };
    const List$filter = x0 => x1 => List$filter$(x0, x1);

    function Kind$Error$is_undef$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.cant_infer':
                var $7840 = Bool$false;
                var $7839 = $7840;
                break;
            case 'Kind.Error.undefined_reference':
                var $7841 = Bool$true;
                var $7839 = $7841;
                break;
        };
        return $7839;
    };
    const Kind$Error$is_undef = x0 => Kind$Error$is_undef$(x0);

    function Kind$Error$is_mistake$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.cant_infer':
                var $7843 = Bool$true;
                var $7842 = $7843;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
                var $7844 = Bool$false;
                var $7842 = $7844;
                break;
        };
        return $7842;
    };
    const Kind$Error$is_mistake = x0 => Kind$Error$is_mistake$(x0);

    function Kind$Error$is_goal$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
            case 'Kind.Error.cant_infer':
                var $7846 = Bool$false;
                var $7845 = $7846;
                break;
            case 'Kind.Error.show_goal':
                var $7847 = Bool$true;
                var $7845 = $7847;
                break;
        };
        return $7845;
    };
    const Kind$Error$is_goal = x0 => Kind$Error$is_goal$(x0);

    function Kind$Error$relevant$(_errors$1) {
        var _undefs$2 = List$filter$(Kind$Error$is_undef, _errors$1);
        var _mistakes$3 = List$filter$(Kind$Error$is_mistake, _errors$1);
        var _goals$4 = List$filter$(Kind$Error$is_goal, _errors$1);
        var self = _undefs$2;
        switch (self._) {
            case 'List.nil':
                var self = _mistakes$3;
                switch (self._) {
                    case 'List.cons':
                        var $7850 = self.head;
                        var $7851 = List$concat$(List$cons$($7850, List$nil), _goals$4);
                        var $7849 = $7851;
                        break;
                    case 'List.nil':
                        var $7852 = _goals$4;
                        var $7849 = $7852;
                        break;
                };
                var $7848 = $7849;
                break;
            case 'List.cons':
                var $7853 = List$concat$(_undefs$2, _goals$4);
                var $7848 = $7853;
                break;
        };
        return $7848;
    };
    const Kind$Error$relevant = x0 => Kind$Error$relevant$(x0);

    function Map$(_V$1) {
        var $7854 = null;
        return $7854;
    };
    const Map = x0 => Map$(x0);

    function String$to_bits$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $7856 = Bits$e;
            var $7855 = $7856;
        } else {
            var $7857 = self.charCodeAt(0);
            var $7858 = self.slice(1);
            var $7859 = (String$to_bits$($7858) + (u16_to_bits($7857)));
            var $7855 = $7859;
        };
        return $7855;
    };
    const String$to_bits = x0 => String$to_bits$(x0);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7861 = self.head;
                var $7862 = self.tail;
                var self = $7861;
                switch (self._) {
                    case 'Pair.new':
                        var $7864 = self.fst;
                        var $7865 = self.snd;
                        var $7866 = (bitsmap_set(String$to_bits$($7864), $7865, Map$from_list$($7862), 'set'));
                        var $7863 = $7866;
                        break;
                };
                var $7860 = $7863;
                break;
            case 'List.nil':
                var $7867 = BitsMap$new;
                var $7860 = $7867;
                break;
        };
        return $7860;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Kind$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.cons':
                var $7869 = self.head;
                var $7870 = self.tail;
                var self = $7869;
                switch (self._) {
                    case 'Pair.new':
                        var $7872 = self.fst;
                        var $7873 = self.snd;
                        var _name$6 = Kind$Name$show$($7872);
                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($7873, Kind$Map$new));
                        var _rest$8 = Kind$Context$show$($7870);
                        var $7874 = (_rest$8 + ("- " + (_name$6 + (": " + (_type$7 + "\u{a}")))));
                        var $7871 = $7874;
                        break;
                };
                var $7868 = $7871;
                break;
            case 'List.nil':
                var $7875 = "";
                var $7868 = $7875;
                break;
        };
        return $7868;
    };
    const Kind$Context$show = x0 => Kind$Context$show$(x0);

    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $7876 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Kind.Term.ref':
                    var $7878 = self.name;
                    var self = Kind$Map$get$($7878, _defs$3);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7880 = self.value;
                            var self = $7880;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7882 = self.term;
                                    var $7883 = $7882;
                                    var $7881 = $7883;
                                    break;
                            };
                            var $7879 = $7881;
                            break;
                        case 'Maybe.none':
                            var $7884 = Kind$Term$ref$($7878);
                            var $7879 = $7884;
                            break;
                    };
                    var $7877 = $7879;
                    break;
                case 'Kind.Term.var':
                case 'Kind.Term.typ':
                case 'Kind.Term.all':
                case 'Kind.Term.lam':
                case 'Kind.Term.app':
                case 'Kind.Term.let':
                case 'Kind.Term.def':
                case 'Kind.Term.ann':
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                case 'Kind.Term.ori':
                    var $7885 = _term$4;
                    var $7877 = $7885;
                    break;
            };
            return $7877;
        }));
        return $7876;
    };
    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);

    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7887 = self.name;
                var $7888 = self.indx;
                var $7889 = Kind$Term$var$($7887, $7888);
                var $7886 = $7889;
                break;
            case 'Kind.Term.ref':
                var $7890 = self.name;
                var self = Kind$Map$get$($7890, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $7892 = self.value;
                        var self = $7892;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7894 = self.term;
                                var $7895 = self.isct;
                                var $7896 = self.arit;
                                var self = ($7895 && (_arity$3 > $7896));
                                if (self) {
                                    var $7898 = $7894;
                                    var $7897 = $7898;
                                } else {
                                    var $7899 = Kind$Term$ref$($7890);
                                    var $7897 = $7899;
                                };
                                var $7893 = $7897;
                                break;
                        };
                        var $7891 = $7893;
                        break;
                    case 'Maybe.none':
                        var $7900 = Kind$Term$ref$($7890);
                        var $7891 = $7900;
                        break;
                };
                var $7886 = $7891;
                break;
            case 'Kind.Term.all':
                var $7901 = self.eras;
                var $7902 = self.self;
                var $7903 = self.name;
                var $7904 = self.xtyp;
                var $7905 = self.body;
                var $7906 = Kind$Term$all$($7901, $7902, $7903, Kind$Term$expand_ct$($7904, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $7907 = Kind$Term$expand_ct$($7905(_s$9)(_x$10), _defs$2, 0n);
                    return $7907;
                }));
                var $7886 = $7906;
                break;
            case 'Kind.Term.lam':
                var $7908 = self.name;
                var $7909 = self.body;
                var $7910 = Kind$Term$lam$($7908, (_x$6 => {
                    var $7911 = Kind$Term$expand_ct$($7909(_x$6), _defs$2, 0n);
                    return $7911;
                }));
                var $7886 = $7910;
                break;
            case 'Kind.Term.app':
                var $7912 = self.func;
                var $7913 = self.argm;
                var $7914 = Kind$Term$app$(Kind$Term$expand_ct$($7912, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($7913, _defs$2, 0n));
                var $7886 = $7914;
                break;
            case 'Kind.Term.let':
                var $7915 = self.name;
                var $7916 = self.expr;
                var $7917 = self.body;
                var $7918 = Kind$Term$let$($7915, Kind$Term$expand_ct$($7916, _defs$2, 0n), (_x$7 => {
                    var $7919 = Kind$Term$expand_ct$($7917(_x$7), _defs$2, 0n);
                    return $7919;
                }));
                var $7886 = $7918;
                break;
            case 'Kind.Term.def':
                var $7920 = self.name;
                var $7921 = self.expr;
                var $7922 = self.body;
                var $7923 = Kind$Term$def$($7920, Kind$Term$expand_ct$($7921, _defs$2, 0n), (_x$7 => {
                    var $7924 = Kind$Term$expand_ct$($7922(_x$7), _defs$2, 0n);
                    return $7924;
                }));
                var $7886 = $7923;
                break;
            case 'Kind.Term.ann':
                var $7925 = self.done;
                var $7926 = self.term;
                var $7927 = self.type;
                var $7928 = Kind$Term$ann$($7925, Kind$Term$expand_ct$($7926, _defs$2, 0n), Kind$Term$expand_ct$($7927, _defs$2, 0n));
                var $7886 = $7928;
                break;
            case 'Kind.Term.gol':
                var $7929 = self.name;
                var $7930 = self.dref;
                var $7931 = self.verb;
                var $7932 = Kind$Term$gol$($7929, $7930, $7931);
                var $7886 = $7932;
                break;
            case 'Kind.Term.hol':
                var $7933 = self.path;
                var $7934 = Kind$Term$hol$($7933);
                var $7886 = $7934;
                break;
            case 'Kind.Term.nat':
                var $7935 = self.natx;
                var $7936 = Kind$Term$nat$($7935);
                var $7886 = $7936;
                break;
            case 'Kind.Term.chr':
                var $7937 = self.chrx;
                var $7938 = Kind$Term$chr$($7937);
                var $7886 = $7938;
                break;
            case 'Kind.Term.str':
                var $7939 = self.strx;
                var $7940 = Kind$Term$str$($7939);
                var $7886 = $7940;
                break;
            case 'Kind.Term.ori':
                var $7941 = self.orig;
                var $7942 = self.expr;
                var $7943 = Kind$Term$ori$($7941, $7942);
                var $7886 = $7943;
                break;
            case 'Kind.Term.typ':
                var $7944 = Kind$Term$typ;
                var $7886 = $7944;
                break;
            case 'Kind.Term.cse':
                var $7945 = _term$1;
                var $7886 = $7945;
                break;
        };
        return $7886;
    };
    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);

    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);
        var _term$5 = (() => {
            var $7948 = _term$4;
            var $7949 = _dref$1;
            let _term$6 = $7948;
            let _path$5;
            while ($7949._ === 'List.cons') {
                _path$5 = $7949.head;
                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);
                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);
                var $7948 = _term$10;
                _term$6 = $7948;
                $7949 = $7949.tail;
            }
            return _term$6;
        })();
        var $7946 = _term$5;
        return $7946;
    };
    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);

    function Kind$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7951 = self.expected;
                var $7952 = self.detected;
                var $7953 = self.context;
                var self = $7951;
                switch (self._) {
                    case 'Either.left':
                        var $7955 = self.value;
                        var $7956 = $7955;
                        var _expected$7 = $7956;
                        break;
                    case 'Either.right':
                        var $7957 = self.value;
                        var $7958 = Kind$Term$show$(Kind$Term$normalize$($7957, Map$from_list$(List$nil)));
                        var _expected$7 = $7958;
                        break;
                };
                var self = $7952;
                switch (self._) {
                    case 'Either.left':
                        var $7959 = self.value;
                        var $7960 = $7959;
                        var _detected$8 = $7960;
                        break;
                    case 'Either.right':
                        var $7961 = self.value;
                        var $7962 = Kind$Term$show$(Kind$Term$normalize$($7961, Map$from_list$(List$nil)));
                        var _detected$8 = $7962;
                        break;
                };
                var $7954 = ("Type mismatch.\u{a}" + ("- Expected: " + (_expected$7 + ("\u{a}" + ("- Detected: " + (_detected$8 + ("\u{a}" + (() => {
                    var self = $7953;
                    switch (self._) {
                        case 'List.nil':
                            var $7963 = "";
                            return $7963;
                        case 'List.cons':
                            var $7964 = ("With context:\u{a}" + Kind$Context$show$($7953));
                            return $7964;
                    };
                })())))))));
                var $7950 = $7954;
                break;
            case 'Kind.Error.show_goal':
                var $7965 = self.name;
                var $7966 = self.dref;
                var $7967 = self.verb;
                var $7968 = self.goal;
                var $7969 = self.context;
                var _goal_name$8 = ("Goal ?" + (Kind$Name$show$($7965) + ":\u{a}"));
                var self = $7968;
                switch (self._) {
                    case 'Maybe.some':
                        var $7971 = self.value;
                        var _goal$10 = Kind$Term$expand$($7966, $7971, _defs$2);
                        var $7972 = ("With type: " + ((() => {
                            var self = $7967;
                            if (self) {
                                var $7973 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $7974 = _x$11;
                                    return $7974;
                                })));
                                return $7973;
                            } else {
                                var $7975 = Kind$Term$show$(_goal$10);
                                return $7975;
                            };
                        })() + "\u{a}"));
                        var _with_type$9 = $7972;
                        break;
                    case 'Maybe.none':
                        var $7976 = "";
                        var _with_type$9 = $7976;
                        break;
                };
                var self = $7969;
                switch (self._) {
                    case 'List.nil':
                        var $7977 = "";
                        var _with_ctxt$10 = $7977;
                        break;
                    case 'List.cons':
                        var $7978 = ("With context:\u{a}" + Kind$Context$show$($7969));
                        var _with_ctxt$10 = $7978;
                        break;
                };
                var $7970 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $7950 = $7970;
                break;
            case 'Kind.Error.waiting':
                var $7979 = self.name;
                var $7980 = ("Waiting for \'" + ($7979 + "\'."));
                var $7950 = $7980;
                break;
            case 'Kind.Error.indirect':
                var $7981 = self.name;
                var $7982 = ("Error on dependency \'" + ($7981 + "\'."));
                var $7950 = $7982;
                break;
            case 'Kind.Error.patch':
                var $7983 = self.term;
                var $7984 = ("Patching: " + Kind$Term$show$($7983));
                var $7950 = $7984;
                break;
            case 'Kind.Error.undefined_reference':
                var $7985 = self.name;
                var $7986 = ("Undefined reference: " + (Kind$Name$show$($7985) + "\u{a}"));
                var $7950 = $7986;
                break;
            case 'Kind.Error.cant_infer':
                var $7987 = self.term;
                var $7988 = self.context;
                var _term$6 = Kind$Term$show$($7987);
                var _context$7 = Kind$Context$show$($7988);
                var $7989 = ("Can\'t infer type of: " + (_term$6 + ("\u{a}" + ("With context:\u{a}" + _context$7))));
                var $7950 = $7989;
                break;
        };
        return $7950;
    };
    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);

    function Kind$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7991 = self.origin;
                var $7992 = $7991;
                var $7990 = $7992;
                break;
            case 'Kind.Error.undefined_reference':
                var $7993 = self.origin;
                var $7994 = $7993;
                var $7990 = $7994;
                break;
            case 'Kind.Error.cant_infer':
                var $7995 = self.origin;
                var $7996 = $7995;
                var $7990 = $7996;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
                var $7997 = Maybe$none;
                var $7990 = $7997;
                break;
        };
        return $7990;
    };
    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);

    function Kind$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $8000 = _errors$2;
            var $8001 = BitsMap$keys$(_defs$1);
            let _errors$4 = $8000;
            let _key$3;
            while ($8001._ === 'List.cons') {
                _key$3 = $8001.head;
                var _name$5 = Kind$Name$from_bits$(_key$3);
                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);
                var self = _defn$6;
                switch (self._) {
                    case 'Maybe.some':
                        var $8002 = self.value;
                        var self = $8002;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8004 = self.file;
                                var $8005 = self.code;
                                var $8006 = self.name;
                                var $8007 = self.stat;
                                var self = $8007;
                                switch (self._) {
                                    case 'Kind.Status.fail':
                                        var $8009 = self.errors;
                                        var self = $8009;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $8011 = _errors$4;
                                                var $8010 = $8011;
                                                break;
                                            case 'List.cons':
                                                var _name_str$20 = $8006;
                                                var _rel_errs$21 = Kind$Error$relevant$($8009);
                                                var _errors$22 = (() => {
                                                    var $8014 = _errors$4;
                                                    var $8015 = _rel_errs$21;
                                                    let _errors$23 = $8014;
                                                    let _err$22;
                                                    while ($8015._ === 'List.cons') {
                                                        _err$22 = $8015.head;
                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);
                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);
                                                        var self = _ori_val$25;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $8016 = self.value;
                                                                var self = $8016;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $8018 = self.fst;
                                                                        var $8019 = self.snd;
                                                                        var _inside$29 = ("Inside \'" + ($8004 + "\':\u{a}"));
                                                                        var _source$30 = Kind$Code$highlight$($8005, $8018, $8019);
                                                                        var $8020 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + ("\u{a}" + "\u{a}")))));
                                                                        var $8017 = $8020;
                                                                        break;
                                                                };
                                                                var $8014 = $8017;
                                                                break;
                                                            case 'Maybe.none':
                                                                var $8021 = (_errors$23 + (_err_msg$24 + "\u{a}"));
                                                                var $8014 = $8021;
                                                                break;
                                                        };
                                                        _errors$23 = $8014;
                                                        $8015 = $8015.tail;
                                                    }
                                                    return _errors$23;
                                                })();
                                                var $8012 = _errors$22;
                                                var $8010 = $8012;
                                                break;
                                        };
                                        var $8008 = $8010;
                                        break;
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $8022 = _errors$4;
                                        var $8008 = $8022;
                                        break;
                                };
                                var $8003 = $8008;
                                break;
                        };
                        var $8000 = $8003;
                        break;
                    case 'Maybe.none':
                        var $8023 = _errors$4;
                        var $8000 = $8023;
                        break;
                };
                _errors$4 = $8000;
                $8001 = $8001.tail;
            }
            return _errors$4;
        })();
        var $7998 = _errors$3;
        return $7998;
    };
    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);

    function Kind$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Kind$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $8025 = "All terms check.";
            var _errors$5 = $8025;
        } else {
            var $8026 = self.charCodeAt(0);
            var $8027 = self.slice(1);
            var $8028 = _errors$4;
            var _errors$5 = $8028;
        };
        var $8024 = (_types$3 + ("\u{a}" + _errors$5));
        return $8024;
    };
    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);

    function IO$set_file$(_name$1, _content$2) {
        var $8029 = IO$ask$("set_file", (_name$1 + ("=" + _content$2)), (_ok$3 => {
            var $8030 = IO$end$(Unit$new);
            return $8030;
        }));
        return $8029;
    };
    const IO$set_file = x0 => x1 => IO$set_file$(x0, x1);

    function Bool$show$(_b$1) {
        var self = _b$1;
        if (self) {
            var $8032 = "Bool.true";
            var $8031 = $8032;
        } else {
            var $8033 = "Bool.false";
            var $8031 = $8033;
        };
        return $8031;
    };
    const Bool$show = x0 => Bool$show$(x0);

    function Kind$Defs$cache$go$(_kvs$1) {
        var self = _kvs$1;
        switch (self._) {
            case 'List.cons':
                var $8035 = self.head;
                var $8036 = self.tail;
                var self = $8035;
                switch (self._) {
                    case 'Pair.new':
                        var $8038 = self.fst;
                        var $8039 = self.snd;
                        var self = $8039;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8041 = self.file;
                                var $8042 = self.term;
                                var $8043 = self.type;
                                var $8044 = self.isct;
                                var $8045 = self.arit;
                                var $8046 = self.stat;
                                var self = $8046;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.fail':
                                        var $8048 = Kind$Defs$cache$go$($8036);
                                        var $8047 = $8048;
                                        break;
                                    case 'Kind.Status.done':
                                        var $8049 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                            var $8050 = _m$bind$16;
                                            return $8050;
                                        }))(IO$get_file_mtime$($8041))((_time$16 => {
                                            var $8051 = IO$monad$((_m$bind$17 => _m$pure$18 => {
                                                var $8052 = _m$bind$17;
                                                return $8052;
                                            }))(IO$set_file$((".cache/" + ($8038 + ".term")), Kind$Core$show$($8042)))((_$17 => {
                                                var $8053 = IO$monad$((_m$bind$18 => _m$pure$19 => {
                                                    var $8054 = _m$bind$18;
                                                    return $8054;
                                                }))(IO$set_file$((".cache/" + ($8038 + ".type")), Kind$Core$show$($8043)))((_$18 => {
                                                    var $8055 = IO$monad$((_m$bind$19 => _m$pure$20 => {
                                                        var $8056 = _m$bind$19;
                                                        return $8056;
                                                    }))(IO$set_file$((".cache/" + ($8038 + ".isct")), Bool$show$($8044)))((_$19 => {
                                                        var $8057 = IO$monad$((_m$bind$20 => _m$pure$21 => {
                                                            var $8058 = _m$bind$20;
                                                            return $8058;
                                                        }))(IO$set_file$((".cache/" + ($8038 + ".arit")), Nat$show$($8045)))((_$20 => {
                                                            var $8059 = IO$monad$((_m$bind$21 => _m$pure$22 => {
                                                                var $8060 = _m$bind$21;
                                                                return $8060;
                                                            }))(IO$set_file$((".cache/" + ($8038 + ".file")), $8041))((_$21 => {
                                                                var $8061 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                                                    var $8062 = _m$bind$22;
                                                                    return $8062;
                                                                }))(IO$set_file$((".cache/" + ($8038 + ".time")), _time$16))((_$22 => {
                                                                    var $8063 = Kind$Defs$cache$go$($8036);
                                                                    return $8063;
                                                                }));
                                                                return $8061;
                                                            }));
                                                            return $8059;
                                                        }));
                                                        return $8057;
                                                    }));
                                                    return $8055;
                                                }));
                                                return $8053;
                                            }));
                                            return $8051;
                                        }));
                                        var $8047 = $8049;
                                        break;
                                };
                                var $8040 = $8047;
                                break;
                        };
                        var $8037 = $8040;
                        break;
                };
                var $8034 = $8037;
                break;
            case 'List.nil':
                var $8064 = IO$monad$((_m$bind$2 => _m$pure$3 => {
                    var $8065 = _m$pure$3;
                    return $8065;
                }))(Unit$new);
                var $8034 = $8064;
                break;
        };
        return $8034;
    };
    const Kind$Defs$cache$go = x0 => Kind$Defs$cache$go$(x0);

    function Kind$Defs$cache$(_defs$1) {
        var $8066 = Kind$Defs$cache$go$(Kind$Map$to_list$(_defs$1));
        return $8066;
    };
    const Kind$Defs$cache = x0 => Kind$Defs$cache$(x0);

    function Kind$api$io$check_file$(_file$1) {
        var $8067 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8068 = _m$bind$2;
            return $8068;
        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $8070 = self.value;
                    var $8071 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $8072 = _m$bind$4;
                        return $8072;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $8073 = IO$print$($8070);
                        return $8073;
                    }));
                    var $8069 = $8071;
                    break;
                case 'Either.right':
                    var $8074 = self.value;
                    var self = $8074;
                    switch (self._) {
                        case 'Pair.new':
                            var $8076 = self.fst;
                            var $8077 = self.snd;
                            var _nams$6 = $8076;
                            var _defs$7 = $8077;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $8079 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $8078 = $8079;
                                    break;
                                case 'List.cons':
                                    var $8080 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                                        var $8081 = _m$bind$10;
                                        return $8081;
                                    }))(IO$print$(Kind$Defs$report$(_defs$7, _nams$6)))((_$10 => {
                                        var $8082 = Kind$Defs$cache$(_defs$7);
                                        return $8082;
                                    }));
                                    var $8078 = $8080;
                                    break;
                            };
                            var $8075 = $8078;
                            break;
                    };
                    var $8069 = $8075;
                    break;
            };
            return $8069;
        }));
        return $8067;
    };
    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);

    function Kind$Synth$files$go$(_files$1, _defs$2) {
        var self = _files$1;
        switch (self._) {
            case 'List.cons':
                var $8084 = self.head;
                var $8085 = self.tail;
                var $8086 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $8087 = _m$bind$5;
                    return $8087;
                }))(Kind$Synth$file$($8084, _defs$2))((_file_synth$5 => {
                    var self = _file_synth$5;
                    switch (self._) {
                        case 'Either.right':
                            var $8089 = self.value;
                            var _nams$7 = Pair$fst$($8089);
                            var _defs$8 = Pair$snd$($8089);
                            var $8090 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $8091 = _m$bind$9;
                                return $8091;
                            }))(Kind$Synth$files$go$($8085, _defs$8))((_rest$9 => {
                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));
                                var _defs$11 = Pair$snd$(_rest$9);
                                var $8092 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                                    var $8093 = _m$pure$13;
                                    return $8093;
                                }))(Pair$new$(_nams$10, _defs$11));
                                return $8092;
                            }));
                            var $8088 = $8090;
                            break;
                        case 'Either.left':
                            var $8094 = Kind$Synth$files$go$($8085, _defs$2);
                            var $8088 = $8094;
                            break;
                    };
                    return $8088;
                }));
                var $8083 = $8086;
                break;
            case 'List.nil':
                var $8095 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8096 = _m$pure$4;
                    return $8096;
                }))(Pair$new$(List$nil, _defs$2));
                var $8083 = $8095;
                break;
        };
        return $8083;
    };
    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);

    function Kind$Synth$remove_duplicate_names$(_names$1) {
        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {
            var $8098 = Kind$Map$set(_name$2)(Unit$new);
            return $8098;
        }));
        var $8097 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);
        return $8097;
    };
    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);

    function Kind$Synth$files$(_files$1, _defs$2) {
        var $8099 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $8100 = _m$bind$3;
            return $8100;
        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {
            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));
            var _defs$5 = Pair$snd$(_got$3);
            var $8101 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                var $8102 = _m$pure$7;
                return $8102;
            }))(Pair$new$(_nams$4, _defs$5));
            return $8101;
        }));
        return $8099;
    };
    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);

    function Kind$api$io$check_files$(_files$1) {
        var $8103 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8104 = _m$bind$2;
            return $8104;
        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {
            var _nams$3 = Pair$fst$(_loaded$2);
            var _defs$4 = Pair$snd$(_loaded$2);
            var self = _nams$3;
            switch (self._) {
                case 'List.nil':
                    var $8106 = IO$print$("No valid Kind file found.");
                    var $8105 = $8106;
                    break;
                case 'List.cons':
                    var $8107 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                        var $8108 = _m$bind$7;
                        return $8108;
                    }))(IO$print$(Kind$Defs$report$(_defs$4, _nams$3)))((_$7 => {
                        var $8109 = Kind$Defs$cache$(_defs$4);
                        return $8109;
                    }));
                    var $8105 = $8107;
                    break;
            };
            return $8105;
        }));
        return $8103;
    };
    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);

    function Kind$api$io$check_term$(_name$1) {
        var $8110 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8111 = _m$bind$2;
            return $8111;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_defs$2 => {
            var self = _defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $8113 = self.value;
                    var $8114 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $8115 = _m$bind$4;
                        return $8115;
                    }))(IO$print$(Kind$Defs$report$($8113, List$cons$(_name$1, List$nil))))((_$4 => {
                        var $8116 = Kind$Defs$cache$($8113);
                        return $8116;
                    }));
                    var $8112 = $8114;
                    break;
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                        var $8118 = ("\'" + (_x$4 + "\'"));
                        return $8118;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $8117 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $8112 = $8117;
                    break;
            };
            return $8112;
        }));
        return $8110;
    };
    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);

    function Kind$api$io$show_term$(_name$1) {
        var $8119 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8120 = _m$bind$2;
            return $8120;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8121 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8122 = self.value;
                        var _defs$4 = $8122;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8124 = self.value;
                                var self = $8124;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8126 = self.term;
                                        var _term$16 = $8126;
                                        var $8127 = Kind$Term$show$(_term$16);
                                        var $8125 = $8127;
                                        break;
                                };
                                var $8123 = $8125;
                                break;
                            case 'Maybe.none':
                                var $8128 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8123 = $8128;
                                break;
                        };
                        return $8123;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8130 = ("\'" + (_x$4 + "\'"));
                            return $8130;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8129 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8129;
                };
            })());
            return $8121;
        }));
        return $8119;
    };
    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);

    function Kind$api$io$show_term_normal$(_name$1) {
        var $8131 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8132 = _m$bind$2;
            return $8132;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8133 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8134 = self.value;
                        var _defs$4 = $8134;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8136 = self.value;
                                var self = $8136;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8138 = self.term;
                                        var _term$16 = $8138;
                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);
                                        var $8139 = Kind$Term$show$(_norm$17);
                                        var $8137 = $8139;
                                        break;
                                };
                                var $8135 = $8137;
                                break;
                            case 'Maybe.none':
                                var $8140 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8135 = $8140;
                                break;
                        };
                        return $8135;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8142 = ("\'" + (_x$4 + "\'"));
                            return $8142;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8141 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8141;
                };
            })());
            return $8133;
        }));
        return $8131;
    };
    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $8143 = self.value;
                        var $8144 = $8143;
                        return $8144;
                    case 'IO.ask':
                        var $8145 = self.then;
                        var $8146 = IO$purify$($8145(""));
                        return $8146;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Kind$api$check_code$(_code$1) {
        var self = Kind$Defs$read$("Main.kind", _code$1, Kind$Map$new);
        switch (self._) {
            case 'Either.left':
                var $8148 = self.value;
                var $8149 = $8148;
                var $8147 = $8149;
                break;
            case 'Either.right':
                var $8150 = self.value;
                var $8151 = IO$purify$((() => {
                    var _defs$3 = $8150;
                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);
                    var $8152 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $8153 = _m$bind$5;
                        return $8153;
                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $8154 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $8155 = _m$pure$7;
                            return $8155;
                        }))(Kind$Defs$report$(_defs$5, _nams$4));
                        return $8154;
                    }));
                    return $8152;
                })());
                var $8147 = $8151;
                break;
        };
        return $8147;
    };
    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);

    function Kind$Term$read$(_code$1) {
        var self = Kind$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.value':
                var $8157 = self.val;
                var $8158 = Maybe$some$($8157);
                var $8156 = $8158;
                break;
            case 'Parser.Reply.error':
                var $8159 = Maybe$none;
                var $8156 = $8159;
                break;
        };
        return $8156;
    };
    const Kind$Term$read = x0 => Kind$Term$read$(x0);
    const Kind$api$export = (() => {
        var _e$1 = Kind$api$io$term_to_core;
        var _e$2 = Kind$api$io$check_file;
        var _e$3 = Kind$api$io$check_files;
        var _e$4 = Kind$api$io$check_term;
        var _e$5 = Kind$api$io$show_term;
        var _e$6 = Kind$api$io$show_term_normal;
        var _e$7 = Kind$api$check_code;
        var _e$8 = Kind$Term$read;
        var $8160 = IO$monad$((_m$bind$9 => _m$pure$10 => {
            var $8161 = _m$pure$10;
            return $8161;
        }))(Unit$new);
        return $8160;
    })();
    return {
        '$main$': () => run(Kind$api$export),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'BitsMap': BitsMap,
        'Maybe.none': Maybe$none,
        'BitsMap.get': BitsMap$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'Word.zero': Word$zero,
        'Nat.to_word': Nat$to_word,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Kind.Name.to_bits': Kind$Name$to_bits,
        'Kind.Map.get': Kind$Map$get,
        'Parser.Reply': Parser$Reply,
        'List': List,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser.Reply.value': Parser$Reply$value,
        'List.nil': List$nil,
        'List.cons': List$cons,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Parser.many1': Parser$many1,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Nat.read': Nat$read,
        'IO.get_time': IO$get_time,
        'Maybe.some': Maybe$some,
        'Kind.Synth.load.cached.is_loop': Kind$Synth$load$cached$is_loop,
        'IO.get_file': IO$get_file,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'Bool.not': Bool$not,
        'String.is_empty': String$is_empty,
        'IO.get_file_mtime': IO$get_file_mtime,
        'String.eql': String$eql,
        'Pair.new': Pair$new,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Pair': Pair,
        'Unit.new': Unit$new,
        'Bool.or': Bool$or,
        'Kind.Core.read.spaces': Kind$Core$read$spaces,
        'Kind.Term.ref': Kind$Term$ref,
        'Char.eql': Char$eql,
        'Kind.Term.typ': Kind$Term$typ,
        'Cmp.as_gte': Cmp$as_gte,
        'Word.gte': Word$gte,
        'U16.gte': U16$gte,
        'Cmp.as_ltn': Cmp$as_ltn,
        'Word.ltn': Word$ltn,
        'U16.ltn': U16$ltn,
        'Kind.Core.read.is_name': Kind$Core$read$is_name,
        'Kind.Core.read.name': Kind$Core$read$name,
        'Kind.Core.read.char': Kind$Core$read$char,
        'Kind.Term.all': Kind$Term$all,
        'Kind.Term.lam': Kind$Term$lam,
        'Kind.Term.app': Kind$Term$app,
        'Kind.Term.let': Kind$Term$let,
        'Kind.Term.def': Kind$Term$def,
        'Kind.Term.ann': Kind$Term$ann,
        'String.starts_with': String$starts_with,
        'String.nil': String$nil,
        'String.drop': String$drop,
        'Char.is_hex': Char$is_hex,
        'Word.shift_left1.aux': Word$shift_left1$aux,
        'Word.shift_left1': Word$shift_left1,
        'Word.mul.go': Word$mul$go,
        'Word.to_zero': Word$to_zero,
        'Word.mul': Word$mul,
        'U16.mul': U16$mul,
        'U16.inc': U16$inc,
        'U16.zero': U16$zero,
        'Char.hex_value16': Char$hex_value16,
        'Kind.Core.read.u16': Kind$Core$read$u16,
        'Kind.Core.read.chrx': Kind$Core$read$chrx,
        'Kind.Term.chr': Kind$Term$chr,
        'Kind.Core.read.strx': Kind$Core$read$strx,
        'Kind.Term.str': Kind$Term$str,
        'Char.dec_value': Char$dec_value,
        'Kind.Core.read.natx': Kind$Core$read$natx,
        'Kind.Term.nat': Kind$Term$nat,
        'Pair.fst': Pair$fst,
        'Nat.eql': Nat$eql,
        'Nat.pred': Nat$pred,
        'Kind.Core.read.find': Kind$Core$read$find,
        'Pair.snd': Pair$snd,
        'Kind.Core.read.term': Kind$Core$read$term,
        'Kind.Core.read': Kind$Core$read,
        'Bool.read': Bool$read,
        'Kind.Status.done': Kind$Status$done,
        'Kind.Def.new': Kind$Def$new,
        'Kind.Synth.load.cached.def': Kind$Synth$load$cached$def,
        'BitsMap.tie': BitsMap$tie,
        'BitsMap.new': BitsMap$new,
        'BitsMap.set': BitsMap$set,
        'Kind.Map.set': Kind$Map$set,
        'Kind.Map.new': Kind$Map$new,
        'Kind.Map': Kind$Map,
        'Kind.Core.dependencies.go': Kind$Core$dependencies$go,
        'List.mapped': List$mapped,
        'BitsMap.to_list.go': BitsMap$to_list$go,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'List.fold': List$fold,
        'Word.from_bits': Word$from_bits,
        'Kind.Name.from_bits': Kind$Name$from_bits,
        'Kind.Map.to_list': Kind$Map$to_list,
        'Kind.Map.keys': Kind$Map$keys,
        'Kind.Synth.load.cached': Kind$Synth$load$cached,
        'Parser.is_eof': Parser$is_eof,
        'Parser': Parser,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.eof': Parser$eof,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Kind.Parser.spaces': Kind$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Kind.Parser.init': Kind$Parser$init,
        'Kind.Name.is_letter': Kind$Name$is_letter,
        'Kind.Parser.letter': Kind$Parser$letter,
        'Kind.Parser.name1': Kind$Parser$name1,
        'Kind.Parser.text': Kind$Parser$text,
        'Parser.until1': Parser$until1,
        'Parser.maybe': Parser$maybe,
        'Kind.Parser.item': Kind$Parser$item,
        'Kind.Parser.name': Kind$Parser$name,
        'Kind.Parser.stop': Kind$Parser$stop,
        'Kind.Term.ori': Kind$Term$ori,
        'Kind.Parser.forall': Kind$Parser$forall,
        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
        'Kind.Parser.lambda': Kind$Parser$lambda,
        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
        'Kind.Term.hol': Kind$Term$hol,
        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
        'Kind.Parser.letforin': Kind$Parser$letforin,
        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
        'Kind.Parser.letwhile': Kind$Parser$letwhile,
        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
        'Kind.Parser.let': Kind$Parser$let,
        'Kind.Parser.let.omit': Kind$Parser$let$omit,
        'Kind.Parser.getwhile': Kind$Parser$getwhile,
        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
        'Kind.Parser.get': Kind$Parser$get,
        'Kind.Parser.get.omit': Kind$Parser$get$omit,
        'Kind.Parser.def': Kind$Parser$def,
        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
        'Kind.Parser.if': Kind$Parser$if,
        'Kind.Code.backslash': Kind$Code$backslash,
        'Kind.Code.escapes': Kind$Code$escapes,
        'Kind.Parser.char.single': Kind$Parser$char$single,
        'Kind.Parser.char': Kind$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Kind.Parser.string.go': Kind$Parser$string$go,
        'Kind.Parser.string': Kind$Parser$string,
        'Kind.Parser.pair': Kind$Parser$pair,
        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
        'Kind.Parser.some': Kind$Parser$some,
        'Kind.Parser.not': Kind$Parser$not,
        'Kind.Parser.left': Kind$Parser$left,
        'Kind.Parser.right': Kind$Parser$right,
        'Kind.Parser.apply': Kind$Parser$apply,
        'Kind.Parser.chain': Kind$Parser$chain,
        'Kind.Parser.mirror': Kind$Parser$mirror,
        'Kind.Name.read': Kind$Name$read,
        'Kind.Parser.list': Kind$Parser$list,
        'Kind.Parser.map': Kind$Parser$map,
        'Kind.Parser.log': Kind$Parser$log,
        'Kind.Parser.do.statements': Kind$Parser$do$statements,
        'Kind.Parser.do': Kind$Parser$do,
        'Parser.try': Parser$try,
        'Parser.fail': Parser$fail,
        'Parser.avoiding': Parser$avoiding,
        'Maybe.default': Maybe$default,
        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
        'Kind.Term.unroll_str': Kind$Term$unroll_str,
        'Kind.Term.reduce': Kind$Term$reduce,
        'Kind.Term.extract_name': Kind$Term$extract_name,
        'Kind.Ann.new': Kind$Ann$new,
        'Kind.Parser.case.with': Kind$Parser$case$with,
        'Kind.Parser.case.case': Kind$Parser$case$case,
        'Debug.log': Debug$log,
        'Kind.Parser.case.group': Kind$Parser$case$group,
        'BitsMap.map': BitsMap$map,
        'Kind.Map.map': Kind$Map$map,
        'Kind.Term.cse': Kind$Term$cse,
        'Kind.Parser.case.build': Kind$Parser$case$build,
        'Kind.Parser.case': Kind$Parser$case,
        'Kind.Parser.open': Kind$Parser$open,
        'Kind.Parser.without': Kind$Parser$without,
        'Kind.Parser.switch.case': Kind$Parser$switch$case,
        'Kind.Parser.switch': Kind$Parser$switch,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.is_some': Maybe$is_some,
        'Kind.Term.gol': Kind$Term$gol,
        'Kind.Parser.goal': Kind$Parser$goal,
        'Kind.Parser.hole': Kind$Parser$hole,
        'Kind.Parser.float.sign': Kind$Parser$float$sign,
        'List.any': List$any,
        'Kind.Parser.float.str_digit': Kind$Parser$float$str_digit,
        'String.from_list': String$from_list,
        'Kind.Parser.float.64': Kind$Parser$float$64,
        'Kind.Parser.float.32': Kind$Parser$float$32,
        'Either': Either,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'List.at': List$at,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Kind.Parser.int_pos': Kind$Parser$int_pos,
        'Kind.Parser.int_neg': Kind$Parser$int_neg,
        'Kind.Parser.int': Kind$Parser$int,
        'Kind.Parser.machine_integer.signed': Kind$Parser$machine_integer$signed,
        'Parser.hex_digit': Parser$hex_digit,
        'Parser.hex_nat': Parser$hex_nat,
        'Kind.Parser.nat': Kind$Parser$nat,
        'Kind.Parser.machine_integer.unsigned': Kind$Parser$machine_integer$unsigned,
        'Kind.Parser.u64': Kind$Parser$u64,
        'Kind.Parser.u32': Kind$Parser$u32,
        'Kind.Parser.u16': Kind$Parser$u16,
        'Kind.Parser.u8': Kind$Parser$u8,
        'Kind.Parser.reference': Kind$Parser$reference,
        'List.for': List$for,
        'Kind.Parser.application': Kind$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Kind.Parser.application.erased': Kind$Parser$application$erased,
        'Kind.Parser.list_set': Kind$Parser$list_set,
        'Kind.Parser.list_get': Kind$Parser$list_get,
        'Kind.Parser.map_set': Kind$Parser$map_set,
        'Kind.Parser.map_get': Kind$Parser$map_get,
        'Kind.Parser.arrow': Kind$Parser$arrow,
        'Kind.Parser.op': Kind$Parser$op,
        'Kind.Parser.add': Kind$Parser$add,
        'Kind.Parser.sub': Kind$Parser$sub,
        'Kind.Parser.mul': Kind$Parser$mul,
        'Kind.Parser.div': Kind$Parser$div,
        'Kind.Parser.mod': Kind$Parser$mod,
        'Kind.Parser.ltn': Kind$Parser$ltn,
        'Kind.Parser.lte': Kind$Parser$lte,
        'Kind.Parser.eql': Kind$Parser$eql,
        'Kind.Parser.gte': Kind$Parser$gte,
        'Kind.Parser.gtn': Kind$Parser$gtn,
        'Kind.Parser.and': Kind$Parser$and,
        'Kind.Parser.or': Kind$Parser$or,
        'Kind.Parser.default': Kind$Parser$default,
        'Kind.Parser.cons': Kind$Parser$cons,
        'Kind.Parser.concat': Kind$Parser$concat,
        'Kind.Parser.string_concat': Kind$Parser$string_concat,
        'Kind.Parser.sigma': Kind$Parser$sigma,
        'Kind.Parser.equality': Kind$Parser$equality,
        'Kind.Parser.inequality': Kind$Parser$inequality,
        'Kind.Parser.rewrite': Kind$Parser$rewrite,
        'Kind.Parser.annotation': Kind$Parser$annotation,
        'Kind.Parser.application.hole': Kind$Parser$application$hole,
        'Kind.Parser.suffix': Kind$Parser$suffix,
        'Kind.Parser.term': Kind$Parser$term,
        'Kind.Parser.name_term': Kind$Parser$name_term,
        'Kind.Binder.new': Kind$Binder$new,
        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Kind.Parser.binder': Kind$Parser$binder,
        'List.length': List$length,
        'Kind.Parser.make_forall': Kind$Parser$make_forall,
        'List.at_last': List$at_last,
        'Kind.Term.var': Kind$Term$var,
        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
        'Kind.Name.eql': Kind$Name$eql,
        'Kind.Context.find.go': Kind$Context$find$go,
        'Kind.Context.find': Kind$Context$find,
        'Kind.Path.o': Kind$Path$o,
        'Kind.Path.i': Kind$Path$i,
        'Kind.Path.to_bits': Kind$Path$to_bits,
        'Kind.Term.bind': Kind$Term$bind,
        'Trampoline.call': Trampoline$call,
        'Trampoline': Trampoline,
        'Trampoline.wrap': Trampoline$wrap,
        'BitsMap.set_if_empty.cps.go': BitsMap$set_if_empty$cps$go,
        'Trampoline.done': Trampoline$done,
        'BitsMap.set_if_empty.cps': BitsMap$set_if_empty$cps,
        'BitsMap.set_if_empty': BitsMap$set_if_empty,
        'Kind.Map.set_if_empty': Kind$Map$set_if_empty,
        'Kind.Status.init': Kind$Status$init,
        'Kind.Map.def': Kind$Map$def,
        'Kind.Parser.file.def': Kind$Parser$file$def,
        'Kind.Constructor.new': Kind$Constructor$new,
        'Kind.Parser.constructor': Kind$Parser$constructor,
        'Kind.Datatype.new': Kind$Datatype$new,
        'Kind.Parser.datatype': Kind$Parser$datatype,
        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
        'Kind.Datatype.build_term': Kind$Datatype$build_term,
        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
        'Kind.Datatype.build_type': Kind$Datatype$build_type,
        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
        'Kind.Constructor.build_term': Kind$Constructor$build_term,
        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
        'Kind.Constructor.build_type': Kind$Constructor$build_type,
        'Kind.Parser.file.adt': Kind$Parser$file$adt,
        'Kind.Parser.file.end': Kind$Parser$file$end,
        'Kind.Parser.file': Kind$Parser$file,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Kind.Code.highlight.end': Kind$Code$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Kind.Code.color': Kind$Code$color,
        'List.take': List$take,
        'Kind.Code.highlight.go': Kind$Code$highlight$go,
        'Kind.Code.highlight': Kind$Code$highlight,
        'Kind.Defs.read': Kind$Defs$read,
        'Kind.Synth.load.go': Kind$Synth$load$go,
        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Kind.Synth.files_of': Kind$Synth$files_of,
        'Kind.Synth.load': Kind$Synth$load,
        'Kind.Status.wait': Kind$Status$wait,
        'Kind.Check': Kind$Check,
        'Kind.Check.result': Kind$Check$result,
        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
        'Kind.Error.waiting': Kind$Error$waiting,
        'Kind.Error.indirect': Kind$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Kind.MPath.o': Kind$MPath$o,
        'Kind.MPath.i': Kind$MPath$i,
        'Kind.Error.patch': Kind$Error$patch,
        'Kind.MPath.to_bits': Kind$MPath$to_bits,
        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
        'Kind.Error.show_goal': Kind$Error$show_goal,
        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,
        'Kind.Term.normalize': Kind$Term$normalize,
        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,
        'List.tail': List$tail,
        'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,
        'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,
        'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,
        'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Kind.Term.serialize.go': Kind$Term$serialize$go,
        'Kind.Term.serialize': Kind$Term$serialize,
        'Bits.eql': Bits$eql,
        'Kind.Term.identical': Kind$Term$identical,
        'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,
        'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,
        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
        'Kind.Error.cant_infer': Kind$Error$cant_infer,
        'BitsSet.has': BitsSet$has,
        'BitsSet.mut.has': BitsSet$mut$has,
        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
        'Kind.Term.has_holes': Kind$Term$has_holes,
        'Kind.Term.equal.hole': Kind$Term$equal$hole,
        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
        'BitsSet.set': BitsSet$set,
        'BitsSet.mut.set': BitsSet$mut$set,
        'Bool.eql': Bool$eql,
        'Kind.Term.equal.go': Kind$Term$equal$go,
        'BitsSet.new': BitsSet$new,
        'BitsSet.mut.new': BitsSet$mut$new,
        'Kind.Term.check': Kind$Term$check,
        'Kind.Path.nil': Kind$Path$nil,
        'Kind.MPath.nil': Kind$MPath$nil,
        'List.is_empty': List$is_empty,
        'Kind.Term.patch_at': Kind$Term$patch_at,
        'Kind.Synth.fix': Kind$Synth$fix,
        'Kind.Status.fail': Kind$Status$fail,
        'Kind.Synth.one': Kind$Synth$one,
        'BitsMap.from_list': BitsMap$from_list,
        'Kind.Term.inline.names': Kind$Term$inline$names,
        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
        'Kind.Term.inline': Kind$Term$inline,
        'BitsMap.values.go': BitsMap$values$go,
        'BitsMap.values': BitsMap$values,
        'Kind.Core.var_name': Kind$Core$var_name,
        'Kind.Name.show': Kind$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Kind.Code.escape.char': Kind$Code$escape$char,
        'Kind.Code.escape.go': Kind$Code$escape$go,
        'Kind.Code.escape': Kind$Code$escape,
        'Kind.Core.show.go': Kind$Core$show$go,
        'Kind.Core.show': Kind$Core$show,
        'Kind.Defs.core': Kind$Defs$core,
        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,
        'BitsMap.keys.go': BitsMap$keys$go,
        'BitsMap.keys': BitsMap$keys,
        'Kind.Synth.many': Kind$Synth$many,
        'Kind.Synth.file': Kind$Synth$file,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
        'Kind.Term.show.app.done': Kind$Term$show$app$done,
        'Kind.Term.show.app': Kind$Term$show$app,
        'BitsMap.to_list': BitsMap$to_list,
        'Kind.Term.show.go': Kind$Term$show$go,
        'Kind.Term.show': Kind$Term$show,
        'Kind.Defs.report.types': Kind$Defs$report$types,
        'List.filter': List$filter,
        'Kind.Error.is_undef': Kind$Error$is_undef,
        'Kind.Error.is_mistake': Kind$Error$is_mistake,
        'Kind.Error.is_goal': Kind$Error$is_goal,
        'Kind.Error.relevant': Kind$Error$relevant,
        'Map': Map,
        'String.to_bits': String$to_bits,
        'Map.from_list': Map$from_list,
        'Kind.Context.show': Kind$Context$show,
        'Kind.Term.expand_at': Kind$Term$expand_at,
        'Kind.Term.expand_ct': Kind$Term$expand_ct,
        'Kind.Term.expand': Kind$Term$expand,
        'Kind.Error.show': Kind$Error$show,
        'Kind.Error.origin': Kind$Error$origin,
        'Kind.Defs.report.errors': Kind$Defs$report$errors,
        'Kind.Defs.report': Kind$Defs$report,
        'IO.set_file': IO$set_file,
        'Bool.show': Bool$show,
        'Kind.Defs.cache.go': Kind$Defs$cache$go,
        'Kind.Defs.cache': Kind$Defs$cache,
        'Kind.api.io.check_file': Kind$api$io$check_file,
        'Kind.Synth.files.go': Kind$Synth$files$go,
        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,
        'Kind.Synth.files': Kind$Synth$files,
        'Kind.api.io.check_files': Kind$api$io$check_files,
        'Kind.api.io.check_term': Kind$api$io$check_term,
        'Kind.api.io.show_term': Kind$api$io$show_term,
        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,
        'IO.purify': IO$purify,
        'Kind.api.check_code': Kind$api$check_code,
        'Kind.Term.read': Kind$Term$read,
        'Kind.api.export': Kind$api$export,
    };
})();

/***/ }),

/***/ 216:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ma=this;function oa(q){var w=0;return function(){return w<q.length?{done:!1,value:q[w++]}:{done:!0}}}var pa="function"==typeof Object.defineProperties?Object.defineProperty:function(q,w,h){q!=Array.prototype&&q!=Object.prototype&&(q[w]=h.value)};function qa(q){q=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof __webpack_require__.g&&__webpack_require__.g,q];for(var w=0;w<q.length;++w){var h=q[w];if(h&&h.Math==Math)return h}throw Error("Cannot find global object");}var ra=qa(this);
function sa(){sa=function(){};ra.Symbol||(ra.Symbol=ta)}function ua(q,w){this.P=q;pa(this,"description",{configurable:!0,writable:!0,value:w})}ua.prototype.toString=function(){return this.P};var ta=function(){function q(h){if(this instanceof q)throw new TypeError("Symbol is not a constructor");return new ua("jscomp_symbol_"+(h||"")+"_"+w++,h)}var w=0;return q}();
function Ea(q,w){if(w){var h=ra;q=q.split(".");for(var l=0;l<q.length-1;l++){var m=q[l];m in h||(h[m]={});h=h[m]}q=q[q.length-1];l=h[q];w=w(l);w!=l&&null!=w&&pa(h,q,{configurable:!0,writable:!0,value:w})}}Ea("Math.imul",function(q){return q?q:function(w,h){w=Number(w);h=Number(h);var l=w&65535,m=h&65535;return l*m+((w>>>16&65535)*m+l*(h>>>16&65535)<<16>>>0)|0}});
Ea("Array.prototype.fill",function(q){return q?q:function(w,h,l){var m=this.length||0;0>h&&(h=Math.max(0,m+h));if(null==l||l>m)l=m;l=Number(l);0>l&&(l=Math.max(0,m+l));for(h=Number(h||0);h<l;h++)this[h]=w;return this}});function Fa(q){var w=null;return function(){return w=w||q()}}
var Ga=Fa(function(){return function(q,w){w&&(q.fd=w,q.prototype=Object.create(w.prototype,{constructor:{value:q,enumerable:!1,writable:!0,configurable:!0}}))}}),Ha=Fa(function(){function q(a,b,g){var f=a.a,k=b.a,t=g.a,y=0,A=f[0]|0,C=A&8191,B=A>>>13,D=f[1]|0;A=D&8191;var K=D>>>13,E=f[2]|0;D=E&8191;var T=E>>>13,F=f[3]|0;E=F&8191;var X=F>>>13,G=f[4]|0;F=G&8191;var Y=G>>>13,H=f[5]|0;G=H&8191;var Z=H>>>13,I=f[6]|0;H=I&8191;var aa=I>>>13,J=f[7]|0;I=J&8191;var ba=J>>>13,U=f[8]|0;J=U&8191;U>>>=13;var V=
f[9]|0;f=V&8191;V>>>=13;var L=k[0]|0,ca=L&8191,da=L>>>13,M=k[1]|0;L=M&8191;var ea=M>>>13,N=k[2]|0;M=N&8191;var fa=N>>>13,O=k[3]|0;N=O&8191;var ha=O>>>13,P=k[4]|0;O=P&8191;var ia=P>>>13,Q=k[5]|0;P=Q&8191;var ja=Q>>>13,R=k[6]|0;Q=R&8191;var ka=R>>>13,S=k[7]|0;R=S&8191;var la=S>>>13,W=k[8]|0;S=W&8191;W>>>=13;var na=k[9]|0;k=na&8191;na>>>=13;g.b=a.b^b.b;g.length=19;var p=c(C,ca);a=c(C,da);a=a+c(B,ca)|0;b=c(B,da);var va=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(va>>>26)|0;va&=67108863;p=c(A,ca);a=c(A,
da);a=a+c(K,ca)|0;b=c(K,da);p=p+c(C,L)|0;a=a+c(C,ea)|0;a=a+c(B,L)|0;b=b+c(B,ea)|0;var wa=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(wa>>>26)|0;wa&=67108863;p=c(D,ca);a=c(D,da);a=a+c(T,ca)|0;b=c(T,da);p=p+c(A,L)|0;a=a+c(A,ea)|0;a=a+c(K,L)|0;b=b+c(K,ea)|0;p=p+c(C,M)|0;a=a+c(C,fa)|0;a=a+c(B,M)|0;b=b+c(B,fa)|0;var xa=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(xa>>>26)|0;xa&=67108863;p=c(E,ca);a=c(E,da);a=a+c(X,ca)|0;b=c(X,da);p=p+c(D,L)|0;a=a+c(D,ea)|0;a=a+c(T,L)|0;b=b+c(T,ea)|0;p=p+c(A,M)|0;a=a+c(A,
fa)|0;a=a+c(K,M)|0;b=b+c(K,fa)|0;p=p+c(C,N)|0;a=a+c(C,ha)|0;a=a+c(B,N)|0;b=b+c(B,ha)|0;var ya=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(ya>>>26)|0;ya&=67108863;p=c(F,ca);a=c(F,da);a=a+c(Y,ca)|0;b=c(Y,da);p=p+c(E,L)|0;a=a+c(E,ea)|0;a=a+c(X,L)|0;b=b+c(X,ea)|0;p=p+c(D,M)|0;a=a+c(D,fa)|0;a=a+c(T,M)|0;b=b+c(T,fa)|0;p=p+c(A,N)|0;a=a+c(A,ha)|0;a=a+c(K,N)|0;b=b+c(K,ha)|0;p=p+c(C,O)|0;a=a+c(C,ia)|0;a=a+c(B,O)|0;b=b+c(B,ia)|0;var za=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(za>>>26)|0;za&=67108863;p=c(G,
ca);a=c(G,da);a=a+c(Z,ca)|0;b=c(Z,da);p=p+c(F,L)|0;a=a+c(F,ea)|0;a=a+c(Y,L)|0;b=b+c(Y,ea)|0;p=p+c(E,M)|0;a=a+c(E,fa)|0;a=a+c(X,M)|0;b=b+c(X,fa)|0;p=p+c(D,N)|0;a=a+c(D,ha)|0;a=a+c(T,N)|0;b=b+c(T,ha)|0;p=p+c(A,O)|0;a=a+c(A,ia)|0;a=a+c(K,O)|0;b=b+c(K,ia)|0;p=p+c(C,P)|0;a=a+c(C,ja)|0;a=a+c(B,P)|0;b=b+c(B,ja)|0;var Aa=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(Aa>>>26)|0;Aa&=67108863;p=c(H,ca);a=c(H,da);a=a+c(aa,ca)|0;b=c(aa,da);p=p+c(G,L)|0;a=a+c(G,ea)|0;a=a+c(Z,L)|0;b=b+c(Z,ea)|0;p=p+c(F,M)|0;a=a+c(F,
fa)|0;a=a+c(Y,M)|0;b=b+c(Y,fa)|0;p=p+c(E,N)|0;a=a+c(E,ha)|0;a=a+c(X,N)|0;b=b+c(X,ha)|0;p=p+c(D,O)|0;a=a+c(D,ia)|0;a=a+c(T,O)|0;b=b+c(T,ia)|0;p=p+c(A,P)|0;a=a+c(A,ja)|0;a=a+c(K,P)|0;b=b+c(K,ja)|0;p=p+c(C,Q)|0;a=a+c(C,ka)|0;a=a+c(B,Q)|0;b=b+c(B,ka)|0;var Ba=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(Ba>>>26)|0;Ba&=67108863;p=c(I,ca);a=c(I,da);a=a+c(ba,ca)|0;b=c(ba,da);p=p+c(H,L)|0;a=a+c(H,ea)|0;a=a+c(aa,L)|0;b=b+c(aa,ea)|0;p=p+c(G,M)|0;a=a+c(G,fa)|0;a=a+c(Z,M)|0;b=b+c(Z,fa)|0;p=p+c(F,N)|0;a=a+c(F,ha)|
0;a=a+c(Y,N)|0;b=b+c(Y,ha)|0;p=p+c(E,O)|0;a=a+c(E,ia)|0;a=a+c(X,O)|0;b=b+c(X,ia)|0;p=p+c(D,P)|0;a=a+c(D,ja)|0;a=a+c(T,P)|0;b=b+c(T,ja)|0;p=p+c(A,Q)|0;a=a+c(A,ka)|0;a=a+c(K,Q)|0;b=b+c(K,ka)|0;p=p+c(C,R)|0;a=a+c(C,la)|0;a=a+c(B,R)|0;b=b+c(B,la)|0;var Ca=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(Ca>>>26)|0;Ca&=67108863;p=c(J,ca);a=c(J,da);a=a+c(U,ca)|0;b=c(U,da);p=p+c(I,L)|0;a=a+c(I,ea)|0;a=a+c(ba,L)|0;b=b+c(ba,ea)|0;p=p+c(H,M)|0;a=a+c(H,fa)|0;a=a+c(aa,M)|0;b=b+c(aa,fa)|0;p=p+c(G,N)|0;a=a+c(G,ha)|0;
a=a+c(Z,N)|0;b=b+c(Z,ha)|0;p=p+c(F,O)|0;a=a+c(F,ia)|0;a=a+c(Y,O)|0;b=b+c(Y,ia)|0;p=p+c(E,P)|0;a=a+c(E,ja)|0;a=a+c(X,P)|0;b=b+c(X,ja)|0;p=p+c(D,Q)|0;a=a+c(D,ka)|0;a=a+c(T,Q)|0;b=b+c(T,ka)|0;p=p+c(A,R)|0;a=a+c(A,la)|0;a=a+c(K,R)|0;b=b+c(K,la)|0;p=p+c(C,S)|0;a=a+c(C,W)|0;a=a+c(B,S)|0;b=b+c(B,W)|0;var Da=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(Da>>>26)|0;Da&=67108863;p=c(f,ca);a=c(f,da);a=a+c(V,ca)|0;b=c(V,da);p=p+c(J,L)|0;a=a+c(J,ea)|0;a=a+c(U,L)|0;b=b+c(U,ea)|0;p=p+c(I,M)|0;a=a+c(I,fa)|0;a=a+c(ba,
M)|0;b=b+c(ba,fa)|0;p=p+c(H,N)|0;a=a+c(H,ha)|0;a=a+c(aa,N)|0;b=b+c(aa,ha)|0;p=p+c(G,O)|0;a=a+c(G,ia)|0;a=a+c(Z,O)|0;b=b+c(Z,ia)|0;p=p+c(F,P)|0;a=a+c(F,ja)|0;a=a+c(Y,P)|0;b=b+c(Y,ja)|0;p=p+c(E,Q)|0;a=a+c(E,ka)|0;a=a+c(X,Q)|0;b=b+c(X,ka)|0;p=p+c(D,R)|0;a=a+c(D,la)|0;a=a+c(T,R)|0;b=b+c(T,la)|0;p=p+c(A,S)|0;a=a+c(A,W)|0;a=a+c(K,S)|0;b=b+c(K,W)|0;p=p+c(C,k)|0;a=a+c(C,na)|0;a=a+c(B,k)|0;b=b+c(B,na)|0;C=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(C>>>26)|0;C&=67108863;p=c(f,L);a=c(f,ea);a=a+c(V,L)|0;b=c(V,
ea);p=p+c(J,M)|0;a=a+c(J,fa)|0;a=a+c(U,M)|0;b=b+c(U,fa)|0;p=p+c(I,N)|0;a=a+c(I,ha)|0;a=a+c(ba,N)|0;b=b+c(ba,ha)|0;p=p+c(H,O)|0;a=a+c(H,ia)|0;a=a+c(aa,O)|0;b=b+c(aa,ia)|0;p=p+c(G,P)|0;a=a+c(G,ja)|0;a=a+c(Z,P)|0;b=b+c(Z,ja)|0;p=p+c(F,Q)|0;a=a+c(F,ka)|0;a=a+c(Y,Q)|0;b=b+c(Y,ka)|0;p=p+c(E,R)|0;a=a+c(E,la)|0;a=a+c(X,R)|0;b=b+c(X,la)|0;p=p+c(D,S)|0;a=a+c(D,W)|0;a=a+c(T,S)|0;b=b+c(T,W)|0;p=p+c(A,k)|0;a=a+c(A,na)|0;a=a+c(K,k)|0;b=b+c(K,na)|0;A=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(A>>>26)|0;A&=67108863;
p=c(f,M);a=c(f,fa);a=a+c(V,M)|0;b=c(V,fa);p=p+c(J,N)|0;a=a+c(J,ha)|0;a=a+c(U,N)|0;b=b+c(U,ha)|0;p=p+c(I,O)|0;a=a+c(I,ia)|0;a=a+c(ba,O)|0;b=b+c(ba,ia)|0;p=p+c(H,P)|0;a=a+c(H,ja)|0;a=a+c(aa,P)|0;b=b+c(aa,ja)|0;p=p+c(G,Q)|0;a=a+c(G,ka)|0;a=a+c(Z,Q)|0;b=b+c(Z,ka)|0;p=p+c(F,R)|0;a=a+c(F,la)|0;a=a+c(Y,R)|0;b=b+c(Y,la)|0;p=p+c(E,S)|0;a=a+c(E,W)|0;a=a+c(X,S)|0;b=b+c(X,W)|0;p=p+c(D,k)|0;a=a+c(D,na)|0;a=a+c(T,k)|0;b=b+c(T,na)|0;D=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(D>>>26)|0;D&=67108863;p=c(f,N);a=c(f,
ha);a=a+c(V,N)|0;b=c(V,ha);p=p+c(J,O)|0;a=a+c(J,ia)|0;a=a+c(U,O)|0;b=b+c(U,ia)|0;p=p+c(I,P)|0;a=a+c(I,ja)|0;a=a+c(ba,P)|0;b=b+c(ba,ja)|0;p=p+c(H,Q)|0;a=a+c(H,ka)|0;a=a+c(aa,Q)|0;b=b+c(aa,ka)|0;p=p+c(G,R)|0;a=a+c(G,la)|0;a=a+c(Z,R)|0;b=b+c(Z,la)|0;p=p+c(F,S)|0;a=a+c(F,W)|0;a=a+c(Y,S)|0;b=b+c(Y,W)|0;p=p+c(E,k)|0;a=a+c(E,na)|0;a=a+c(X,k)|0;b=b+c(X,na)|0;E=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(E>>>26)|0;E&=67108863;p=c(f,O);a=c(f,ia);a=a+c(V,O)|0;b=c(V,ia);p=p+c(J,P)|0;a=a+c(J,ja)|0;a=a+c(U,P)|0;
b=b+c(U,ja)|0;p=p+c(I,Q)|0;a=a+c(I,ka)|0;a=a+c(ba,Q)|0;b=b+c(ba,ka)|0;p=p+c(H,R)|0;a=a+c(H,la)|0;a=a+c(aa,R)|0;b=b+c(aa,la)|0;p=p+c(G,S)|0;a=a+c(G,W)|0;a=a+c(Z,S)|0;b=b+c(Z,W)|0;p=p+c(F,k)|0;a=a+c(F,na)|0;a=a+c(Y,k)|0;b=b+c(Y,na)|0;F=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(F>>>26)|0;F&=67108863;p=c(f,P);a=c(f,ja);a=a+c(V,P)|0;b=c(V,ja);p=p+c(J,Q)|0;a=a+c(J,ka)|0;a=a+c(U,Q)|0;b=b+c(U,ka)|0;p=p+c(I,R)|0;a=a+c(I,la)|0;a=a+c(ba,R)|0;b=b+c(ba,la)|0;p=p+c(H,S)|0;a=a+c(H,W)|0;a=a+c(aa,S)|0;b=b+c(aa,W)|
0;p=p+c(G,k)|0;a=a+c(G,na)|0;a=a+c(Z,k)|0;b=b+c(Z,na)|0;G=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(G>>>26)|0;G&=67108863;p=c(f,Q);a=c(f,ka);a=a+c(V,Q)|0;b=c(V,ka);p=p+c(J,R)|0;a=a+c(J,la)|0;a=a+c(U,R)|0;b=b+c(U,la)|0;p=p+c(I,S)|0;a=a+c(I,W)|0;a=a+c(ba,S)|0;b=b+c(ba,W)|0;p=p+c(H,k)|0;a=a+c(H,na)|0;a=a+c(aa,k)|0;b=b+c(aa,na)|0;H=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(H>>>26)|0;H&=67108863;p=c(f,R);a=c(f,la);a=a+c(V,R)|0;b=c(V,la);p=p+c(J,S)|0;a=a+c(J,W)|0;a=a+c(U,S)|0;b=b+c(U,W)|0;p=p+c(I,k)|
0;a=a+c(I,na)|0;a=a+c(ba,k)|0;b=b+c(ba,na)|0;I=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(I>>>26)|0;I&=67108863;p=c(f,S);a=c(f,W);a=a+c(V,S)|0;b=c(V,W);p=p+c(J,k)|0;a=a+c(J,na)|0;a=a+c(U,k)|0;b=b+c(U,na)|0;J=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(J>>>26)|0;J&=67108863;p=c(f,k);a=c(f,na);a=a+c(V,k)|0;b=c(V,na);B=(y+p|0)+((a&8191)<<13)|0;y=(b+(a>>>13)|0)+(B>>>26)|0;t[0]=va;t[1]=wa;t[2]=xa;t[3]=ya;t[4]=za;t[5]=Aa;t[6]=Ba;t[7]=Ca;t[8]=Da;t[9]=C;t[10]=A;t[11]=D;t[12]=E;t[13]=F;t[14]=G;t[15]=H;t[16]=
I;t[17]=J;t[18]=B&67108863;0!==y&&(t[19]=y,g.length++);return g}function w(a,b){if(!a)throw Error(b||"Assertion failed");}function h(a,b,g){if(h.vc(a))return a;this.b=0;this.a=null;this.length=0;this.red=null;if(null!==a){if("le"===b||"be"===b)g=b,b=10;this.pa(a||0,b||10,g||"be")}}function l(a,b,g){var f=0;for(g=Math.min(a.length,g);b<g;b++){var k=a.charCodeAt(b)-48;f<<=4;f=49<=k&&54>=k?f|k-49+10:17<=k&&22>=k?f|k-17+10:f|k&15}return f}function m(a,b,g){g.b=b.b^a.b;var f=a.length+b.length|0;g.length=
f;f=f-1|0;var k=a.a[0]|0,t=b.a[0]|0;k*=t;var y=k/67108864|0;g.a[0]=k&67108863;for(var A=1;A<f;A++){var C=y>>>26,B=y&67108863;y=Math.min(A,b.length-1);for(var D=Math.max(0,A-a.length+1);D<=y;D++)k=a.a[A-D|0]|0,t=b.a[D]|0,k=k*t+B,C+=k/67108864|0,B=k&67108863;g.a[A]=B|0;y=C|0}0!==y?g.a[A]=y|0:g.length--;return g.L()}function x(a,b){this.name=a;this.p=new h(b,16);this.n=this.p.U();this.k=(new h(1)).ua(this.n).i(this.p);this.Ab=this.cc()}function d(){x.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}
function u(a){"string"===typeof a?(a=h.P(a),this.G=a.p,this.ja=a):(w(a.Cd(1),"modulus must be greater than 1"),this.G=a,this.ja=null)}var e={}; true?e=h:0;h.Gb=h;h.Eb=26;h.vc=function(a){return a instanceof h?!0:null!==a&&"object"===typeof a&&a.constructor.Eb===h.Eb&&Array.isArray(a.a)};h.prototype.pa=function(a,b,g){if("number"===typeof a)this.Yb(a,g);else if("object"===typeof a)this.Ia(a,g);else{"hex"===b&&(b=16);w(b===(b|0)&&2<=b&&36>=b);a=a.toString().replace(/\s+/g,"");
var f=0;"-"===a[0]&&f++;16===b?this.bc(a,f):this.td(a,b,f);"-"===a[0]&&(this.b=1);this.L();"le"===g&&this.Ia(this.H(),g)}};h.prototype.Yb=function(a,b){0>a&&(this.b=1,a=-a);67108864>a?(this.a=[a&67108863],this.length=1):4503599627370496>a?(this.a=[a&67108863,a/67108864&67108863],this.length=2):(w(9007199254740992>a),this.a=[a&67108863,a/67108864&67108863,1],this.length=3);"le"===b&&this.Ia(this.H(),b)};h.prototype.Ia=function(a,b){w("number"===typeof a.length);if(0>=a.length)this.a=[0],this.length=
1;else{this.length=Math.ceil(a.length/3);this.a=Array(this.length);for(var g=0;g<this.length;g++)this.a[g]=0;var f=0;if("be"===b)for(g=a.length-1,b=0;0<=g;g-=3){var k=a[g]|a[g-1]<<8|a[g-2]<<16;this.a[b]|=k<<f&67108863;this.a[b+1]=k>>>26-f&67108863;f+=24;26<=f&&(f-=26,b++)}else if("le"===b)for(b=g=0;g<a.length;g+=3)k=a[g]|a[g+1]<<8|a[g+2]<<16,this.a[b]|=k<<f&67108863,this.a[b+1]=k>>>26-f&67108863,f+=24,26<=f&&(f-=26,b++);this.L()}};h.prototype.bc=function(a,b){this.length=Math.ceil((a.length-b)/6);
this.a=Array(this.length);for(var g=0;g<this.length;g++)this.a[g]=0;var f,k=0;g=a.length-6;for(f=0;g>=b;g-=6){var t=l(a,g,g+6);this.a[f]|=t<<k&67108863;this.a[f+1]|=t>>>26-k&4194303;k+=24;26<=k&&(k-=26,f++)}g+6!==b&&(t=l(a,b,g+6),this.a[f]|=t<<k&67108863,this.a[f+1]|=t>>>26-k&4194303);this.L()};h.prototype.qc=function(a){a.a=Array(this.length);for(var b=0;b<this.length;b++)a.a[b]=this.a[b];a.length=this.length;a.b=this.b;a.red=this.red};h.prototype.clone=function(){var a=new h(null);this.qc(a);return a};
h.prototype.Rb=function(a){for(;this.length<a;)this.a[this.length++]=0};h.prototype.L=function(){for(;1<this.length&&0===this.a[this.length-1];)this.length--;return this.qa()};h.prototype.qa=function(){1===this.length&&0===this.a[0]&&(this.b=0);return this};var n=" 0 00 000 0000 00000 000000 0000000 00000000 000000000 0000000000 00000000000 000000000000 0000000000000 00000000000000 000000000000000 0000000000000000 00000000000000000 000000000000000000 0000000000000000000 00000000000000000000 000000000000000000000 0000000000000000000000 00000000000000000000000 000000000000000000000000 0000000000000000000000000".split(" "),
v=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],r=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1E7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64E6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243E5,28629151,33554432,39135393,45435424,52521875,60466176];h.prototype.toString=function(a,b){a=a||10;b=b|0||1;if(16===a||"hex"===a){var g="";for(var f=a=0,k=0;k<this.length;k++){var t=
this.a[k],y=((t<<a|f)&16777215).toString(16);f=t>>>24-a&16777215;g=0!==f||k!==this.length-1?n[6-y.length]+y+g:y+g;a+=2;26<=a&&(a-=26,k--)}for(0!==f&&(g=f.toString(16)+g);0!==g.length%b;)g="0"+g;0!==this.b&&(g="-"+g);return g}if(a===(a|0)&&2<=a&&36>=a){f=v[a];k=r[a];g="";t=this.clone();for(t.b=0;!t.w();)y=t.Da(k).toString(a),t=t.Dd(k),g=t.w()?y+g:n[f-y.length]+y+g;for(this.w()&&(g="0"+g);0!==g.length%b;)g="0"+g;0!==this.b&&(g="-"+g);return g}w(!1,"Base should be between 2 and 36")};h.prototype.H=function(a,
b){return this.hd(a,b)};h.prototype.hd=function(a,b){var g=Array,f=this.byteLength();b=b||Math.max(1,f);w(f<=b,"byte array longer than desired length");w(0<b,"Requested array length <= 0");this.L();var k="le"===a;g=new g(b);a=this.clone();if(k){for(k=0;!a.w();k++)f=a.T(255),a.j(8),g[k]=f;for(;k<b;k++)g[k]=0}else{for(k=0;k<b-f;k++)g[k]=0;for(k=0;!a.w();k++)f=a.T(255),a.j(8),g[b-k-1]=f}return g};h.prototype.fb=Math.clz32?function(a){return 32-Math.clz32(a)}:function(a){var b=0;4096<=a&&(b+=13,a>>>=
13);64<=a&&(b+=7,a>>>=7);8<=a&&(b+=4,a>>>=4);2<=a&&(b+=2,a>>>=2);return b+a};h.prototype.U=function(){return 26*(this.length-1)+this.fb(this.a[this.length-1])};h.prototype.byteLength=function(){return Math.ceil(this.U()/8)};h.prototype.l=function(){return this.clone().Pa()};h.prototype.Pa=function(){this.w()||(this.b^=1);return this};h.prototype.B=function(a){if(0!==this.b&&0===a.b)return this.b=0,this.i(a),this.b^=1,this.qa();if(0===this.b&&0!==a.b){a.b=0;var b=this.i(a);a.b=1;return b.qa()}if(this.length>
a.length)var g=this;else g=a,a=this;for(var f=b=0;f<a.length;f++)b=(g.a[f]|0)+(a.a[f]|0)+b,this.a[f]=b&67108863,b>>>=26;for(;0!==b&&f<g.length;f++)b=(g.a[f]|0)+b,this.a[f]=b&67108863,b>>>=26;this.length=g.length;if(0!==b)this.a[this.length]=b,this.length++;else if(g!==this)for(;f<g.length;f++)this.a[f]=g.a[f];return this};h.prototype.add=function(a){if(0!==a.b&&0===this.b){a.b=0;var b=this.sub(a);a.b^=1;return b}return 0===a.b&&0!==this.b?(this.b=0,b=a.sub(this),this.b=1,b):this.length>a.length?this.clone().B(a):
a.clone().B(this)};h.prototype.i=function(a){if(0!==a.b){a.b=0;var b=this.B(a);a.b=1;return b.qa()}if(0!==this.b)return this.b=0,this.B(a),this.b=1,this.qa();b=this.cmp(a);if(0===b)return this.b=0,this.length=1,this.a[0]=0,this;if(0<b)var g=this;else g=a,a=this;for(var f=0,k=0;k<a.length;k++)b=(g.a[k]|0)-(a.a[k]|0)+f,f=b>>26,this.a[k]=b&67108863;for(;0!==f&&k<g.length;k++)b=(g.a[k]|0)+f,f=b>>26,this.a[k]=b&67108863;if(0===f&&k<g.length&&g!==this)for(;k<g.length;k++)this.a[k]=g.a[k];this.length=Math.max(this.length,
k);g!==this&&(this.b=1);return this.L()};h.prototype.sub=function(a){return this.clone().i(a)};var c=Math.imul;Math.imul||(q=m);h.prototype.Oc=function(a,b){var g=this.length+a.length;if(10===this.length&&10===a.length)a=q(this,a,b);else if(63>g)a=m(this,a,b);else throw"removed";return a};h.prototype.o=function(a){var b=new h(null);b.a=Array(this.length+a.length);return this.Oc(a,b)};h.prototype.ua=function(a){w("number"===typeof a&&0<=a);var b=a%26;a=(a-b)/26;var g=67108863>>>26-b<<26-b,f;if(0!==
b){var k=0;for(f=0;f<this.length;f++){var t=this.a[f]&g;this.a[f]=(this.a[f]|0)-t<<b|k;k=t>>>26-b}k&&(this.a[f]=k,this.length++)}if(0!==a){for(f=this.length-1;0<=f;f--)this.a[f+a]=this.a[f];for(f=0;f<a;f++)this.a[f]=0;this.length+=a}return this.L()};h.prototype.j=function(a){w("number"===typeof a&&0<=a);var b=a%26,g=Math.min((a-b)/26,this.length),f=67108863^67108863>>>b<<b;var k=Math.max(0,-g);if(0!==g)if(this.length>g)for(this.length-=g,a=0;a<this.length;a++)this.a[a]=this.a[a+g];else this.a[0]=
0,this.length=1;g=0;for(a=this.length-1;0<=a&&(0!==g||a>=k);a--){var t=this.a[a]|0;this.a[a]=g<<26-b|t>>>b;g=t&f}0===this.length&&(this.a[0]=0,this.length=1);return this.L()};h.prototype.ld=function(a){return this.clone().ua(a)};h.prototype.ab=function(a){return this.clone().j(a)};h.prototype.Na=function(a){w("number"===typeof a);w(67108864>a);if(0>a)return this.Ca(-a);if(0!==this.b){if(1===this.length&&(this.a[0]|0)<a)return this.a[0]=a-(this.a[0]|0),this.b=0,this;this.b=0;this.Ca(a);this.b=1;return this}return this.Wb(a)};
h.prototype.Wb=function(a){this.a[0]+=a;for(a=0;a<this.length&&67108864<=this.a[a];a++)this.a[a]-=67108864,a===this.length-1?this.a[a+1]=1:this.a[a+1]++;this.length=Math.max(this.length,a+1);return this};h.prototype.Ca=function(a){w("number"===typeof a);w(67108864>a);if(0>a)return this.Na(-a);if(0!==this.b)return this.b=0,this.Na(a),this.b=1,this;this.a[0]-=a;if(1===this.length&&0>this.a[0])this.a[0]=-this.a[0],this.b=1;else for(a=0;a<this.length&&0>this.a[a];a++)this.a[a]+=67108864,--this.a[a+1];
return this.L()};h.prototype.Ja=function(a,b,g){var f;this.Rb(a.length+g);var k=0;for(f=0;f<a.length;f++){var t=(this.a[f+g]|0)+k;k=(a.a[f]|0)*b;t-=k&67108863;k=(t>>26)-(k/67108864|0);this.a[f+g]=t&67108863}for(;f<this.length-g;f++)t=(this.a[f+g]|0)+k,k=t>>26,this.a[f+g]=t&67108863;if(0===k)return this.L();w(-1===k);for(f=k=0;f<this.length;f++)t=-(this.a[f]|0)+k,k=t>>26,this.a[f]=t&67108863;this.b=1;return this.L()};h.prototype.ic=function(a,b){var g=this.clone(),f=a,k=f.a[f.length-1]|0;a=26-this.fb(k);
0!==a&&(f=f.ld(a),g.ua(a),k=f.a[f.length-1]|0);var t=g.length-f.length;if("mod"!==b){var y=new h(null);y.length=t+1;y.a=Array(y.length);for(var A=0;A<y.length;A++)y.a[A]=0}A=g.clone().Ja(f,1,t);0===A.b&&(g=A,y&&(y.a[t]=1));for(--t;0<=t;t--){A=67108864*(g.a[f.length+t]|0)+(g.a[f.length+t-1]|0);A=Math.min(A/k|0,67108863);for(g.Ja(f,A,t);0!==g.b;)A--,g.b=0,g.Ja(f,1,t),g.w()||(g.b^=1);y&&(y.a[t]=A)}y&&y.L();g.L();"div"!==b&&0!==a&&g.j(a);return{u:y||null,J:g}};h.prototype.ga=function(a,b,g){w(!a.w());
if(this.w())return{u:new h(0),J:new h(0)};var f;if(0!==this.b&&0===a.b){var k=this.l().ga(a,b);"mod"!==b&&(f=k.u.l());if("div"!==b){var t=k.J.l();g&&0!==t.b&&t.B(a)}return{u:f,J:t}}return 0===this.b&&0!==a.b?(k=this.ga(a.l(),b),"mod"!==b&&(f=k.u.l()),{u:f,J:k.J}):0!==(this.b&a.b)?(k=this.l().ga(a.l(),b),"div"!==b&&(t=k.J.l(),g&&0!==t.b&&t.i(a)),{u:k.u,J:t}):a.length>this.length||0>this.cmp(a)?{u:new h(0),J:this}:1===a.length?"div"===b?{u:this.sc(a.a[0]),J:null}:"mod"===b?{u:null,J:new h(this.Da(a.a[0]))}:
{u:this.sc(a.a[0]),J:new h(this.Da(a.a[0]))}:this.ic(a,b)};h.prototype.u=function(a){return this.ga(a,"div",!1).u};h.prototype.S=function(a){return this.ga(a,"mod",!0).J};h.prototype.mb=function(a){var b=this.ga(a);if(b.J.w())return b.u;var g=0!==b.u.b?b.J.i(a):b.J,f=a.ab(1);a=a.T(1);g=g.cmp(f);return 0>g||1===a&&0===g?b.u:0!==b.u.b?b.u.Ca(1):b.u.Na(1)};h.prototype.Da=function(a){w(67108863>=a);for(var b=67108864%a,g=0,f=this.length-1;0<=f;f--)g=(b*g+(this.a[f]|0))%a;return g};h.prototype.tc=function(a){w(0===
a.b);w(!a.w());var b=this,g=a.clone();b=0!==b.b?b.S(a):b.clone();a=new h(1);for(var f=new h(0),k=new h(0),t=new h(1),y=0;b.Ra()&&g.Ra();)b.j(1),g.j(1),++y;for(var A=g.clone(),C=b.clone();!b.w();){for(var B=0,D=1;0===(b.a[0]&D)&&26>B;++B,D<<=1);if(0<B)for(b.j(B);0<B--;){if(a.Y()||f.Y())a.B(A),f.i(C);a.j(1);f.j(1)}B=0;for(D=1;0===(g.a[0]&D)&&26>B;++B,D<<=1);if(0<B)for(g.j(B);0<B--;){if(k.Y()||t.Y())k.B(A),t.i(C);k.j(1);t.j(1)}0<=b.cmp(g)?(b.i(g),a.i(k),f.i(t)):(g.i(b),k.i(a),t.i(f))}return{I:k,M:t,
Bd:g.ua(y)}};h.prototype.Zb=function(a){w(0===a.b);w(!a.w());var b=this,g=a.clone();b=0!==b.b?b.S(a):b.clone();for(var f=new h(1),k=new h(0),t=g.clone();0<b.m(1)&&0<g.m(1);){for(var y=0,A=1;0===(b.a[0]&A)&&26>y;++y,A<<=1);if(0<y)for(b.j(y);0<y--;)f.Y()&&f.B(t),f.j(1);y=0;for(A=1;0===(g.a[0]&A)&&26>y;++y,A<<=1);if(0<y)for(g.j(y);0<y--;)k.Y()&&k.B(t),k.j(1);0<=b.cmp(g)?(b.i(g),f.i(k)):(g.i(b),k.i(f))}b=0===b.m(1)?f:k;0>b.m(0)&&b.B(a);return b};h.prototype.Ba=function(a){return this.tc(a).I.S(a)};h.prototype.Ra=
function(){return 0===(this.a[0]&1)};h.prototype.Y=function(){return 1===(this.a[0]&1)};h.prototype.T=function(a){return this.a[0]&a};h.prototype.w=function(){return 1===this.length&&0===this.a[0]};h.prototype.m=function(a){var b=0>a;if(0!==this.b&&!b)return-1;if(0===this.b&&b)return 1;this.L();1<this.length?a=1:(b&&(a=-a),w(67108863>=a,"Number is too big"),b=this.a[0]|0,a=b===a?0:b<a?-1:1);return 0!==this.b?-a|0:a};h.prototype.cmp=function(a){if(0!==this.b&&0===a.b)return-1;if(0===this.b&&0!==a.b)return 1;
a=this.Db(a);return 0!==this.b?-a|0:a};h.prototype.Db=function(a){if(this.length>a.length)return 1;if(this.length<a.length)return-1;for(var b=0,g=this.length-1;0<=g;g--){var f=this.a[g]|0,k=a.a[g]|0;if(f!==k){f<k?b=-1:f>k&&(b=1);break}}return b};h.red=function(a){return new u(a)};h.prototype.A=function(a){w(!this.red,"Already a number in reduction context");w(0===this.b,"red works only with positives");return a.pc(this).ea(a)};h.prototype.ta=function(){w(this.red,"fromRed works only with numbers in reduction context");
return this.red.oc(this)};h.prototype.ea=function(a){this.red=a;return this};h.prototype.$=function(a){w(this.red,"redAdd works only with red numbers");return this.red.add(this,a)};h.prototype.s=function(a){w(this.red,"redIAdd works only with red numbers");return this.red.B(this,a)};h.prototype.aa=function(a){w(this.red,"redSub works only with red numbers");return this.red.sub(this,a)};h.prototype.h=function(a){w(this.red,"redISub works only with red numbers");return this.red.i(this,a)};h.prototype.c=
function(a){w(this.red,"redMul works only with red numbers");this.red.fa(this,a);return this.red.o(this,a)};h.prototype.f=function(){w(this.red,"redSqr works only with red numbers");this.red.za(this);return this.red.yb(this)};h.prototype.Uc=function(){w(this.red,"redSqrt works only with red numbers");this.red.za(this);return this.red.sqrt(this)};h.prototype.Za=function(){w(this.red,"redInvm works only with red numbers");this.red.za(this);return this.red.Ba(this)};h.prototype.la=function(){w(this.red,
"redNeg works only with red numbers");this.red.za(this);return this.red.l(this)};var z={Fd:null,Kd:null,Jd:null,Ld:null};x.prototype.cc=function(){var a=new h(null);a.a=Array(Math.ceil(this.n/13));return a};x.prototype.Kc=function(a){do{this.split(a,this.Ab);a=this.Ic(a);a=a.B(this.Ab);var b=a.U()}while(b>this.n);b=b<this.n?-1:a.Db(this.p);0===b?(a.a[0]=0,a.length=1):0<b?a.i(this.p):a.L();return a};(function(a,b){function g(){}a.fd=b;g.prototype=b.prototype;a.prototype=new g;a.prototype.constructor=
a})(d,x);d.prototype.split=function(a,b){for(var g=Math.min(a.length,9),f=0;f<g;f++)b.a[f]=a.a[f];b.length=g;if(9>=a.length)a.a[0]=0,a.length=1;else{g=a.a[9];b.a[b.length++]=g&4194303;for(f=10;f<a.length;f++)b=a.a[f]|0,a.a[f-10]=(b&4194303)<<4|g>>>22,g=b;g>>>=22;a.a[f-10]=g;a.length=0===g&&10<a.length?a.length-10:a.length-9}};d.prototype.Ic=function(a){a.a[a.length]=0;a.a[a.length+1]=0;a.length+=2;for(var b=0,g=0;g<a.length;g++){var f=a.a[g]|0;b+=977*f;a.a[g]=b&67108863;b=64*f+(b/67108864|0)}0===
a.a[a.length-1]&&(a.length--,0===a.a[a.length-1]&&a.length--);return a};h.P=function(a){if(z[a])return z[a];var b=new d;return z[a]=b};u.prototype.za=function(a){w(0===a.b,"red works only with positives");w(a.red,"red works only with red numbers")};u.prototype.fa=function(a,b){w(0===(a.b|b.b),"red works only with positives");w(a.red&&a.red===b.red,"red works only with red numbers")};u.prototype.Oa=function(a){return this.ja?this.ja.Kc(a).ea(this):a.S(this.G).ea(this)};u.prototype.l=function(a){return a.w()?
a.clone():this.G.sub(a).ea(this)};u.prototype.add=function(a,b){this.fa(a,b);a=a.add(b);0<=a.cmp(this.G)&&a.i(this.G);return a.ea(this)};u.prototype.B=function(a,b){this.fa(a,b);a=a.B(b);0<=a.cmp(this.G)&&a.i(this.G);return a};u.prototype.sub=function(a,b){this.fa(a,b);a=a.sub(b);0>a.m(0)&&a.B(this.G);return a.ea(this)};u.prototype.i=function(a,b){this.fa(a,b);a=a.i(b);0>a.m(0)&&a.B(this.G);return a};u.prototype.o=function(a,b){this.fa(a,b);return this.Oa(a.o(b))};u.prototype.yb=function(a){return this.o(a,
a)};u.prototype.sqrt=function(a){if(a.w())return a.clone();var b=this.G.T(3);w(1===b%2);if(3===b)return b=this.G.add(new h(1)).j(2),this.pow(a,b);for(var g=this.G.bd(1),f=0;!g.w()&&0===g.T(1);)f++,g.j(1);w(!g.w());b=(new h(1)).A(this);var k=b.la(),t=this.G.bd(1).j(1),y=this.G.U();for(y=(new h(2*y*y)).A(this);0!==this.pow(y,t).cmp(k);)y.s(k);t=this.pow(y,g);k=this.pow(a,g.wd(1).j(1));a=this.pow(a,g);for(g=f;0!==a.cmp(b);){y=a;for(f=0;0!==y.cmp(b);f++)y=y.f();w(f<g);t=this.pow(t,(new h(1)).ua(g-f-1));
k=k.c(t);t=t.f();a=a.c(t);g=f}return k};u.prototype.Ba=function(a){a=a.Zb(this.G);return 0!==a.b?(a.b=0,this.Oa(a).la()):this.Oa(a)};u.prototype.pow=function(a,b){if(b.w())return(new h(1)).A(this);if(0===b.m(1))return a.clone();var g=Array(16);g[0]=(new h(1)).A(this);g[1]=a;for(var f=2;f<g.length;f++)g[f]=this.o(g[f-1],a);a=g[0];var k=0,t=0,y=b.U()%26;0===y&&(y=26);for(f=b.length-1;0<=f;f--){var A=b.a[f];for(--y;0<=y;y--){var C=A>>y&1;a!==g[0]&&(a=this.yb(a));if(0===C&&0===k)t=0;else if(k<<=1,k|=
C,t++,4===t||0===f&&0===y)a=this.o(a,g[k]),k=t=0}y=26}return a};u.prototype.pc=function(a){var b=a.S(this.G);return b===a?b.clone():b};u.prototype.oc=function(a){a=a.clone();a.red=null;return a};return e}),Ia=Fa(function(){function q(){}function w(l){return l.length>>>1}var h={};h.Ib=q;h.pd=50;q.P=!0;h.Gd=q.P?2147483647:1073741823;q.from=function(l,m){var x=null,d=w(l,m)|0;if((q.P?2147483647:1073741823)<d)throw new RangeError("Invalid typed array length");q.P?(x=new Uint8Array(d),x.__proto__=q.prototype):
(null===x&&(x=new q(d)),x.length=d);l=x.write(l,m);l!==d&&(x=x.slice(0,l));return x};q.P&&(q.prototype.__proto__=Uint8Array.prototype,q.__proto__=Uint8Array,sa(),sa(),sa(),"undefined"!==typeof Symbol&&Symbol.species&&q[Symbol.species]===q&&(sa(),Object.defineProperty(q,Symbol.species,{value:null,configurable:!0})));q.isBuffer=function(l){return!(null==l||!l.$b)};q.byteLength=w;q.prototype.$b=!0;q.prototype.write=function(l){var m=this.length;var x=Number(0)||0;var d=this.length-x;m?(m=Number(m),m>
d&&(m=d)):m=d;d=l.length;if(0!==d%2)throw new TypeError("Invalid hex string");m>d/2&&(m=d/2);for(d=0;d<m;++d){var u=parseInt(l.substr(2*d,2),16);if(isNaN(u))break;this[x+d]=u}return d};return h}),Ja=Fa(function(){function q(w,h){if(!w)throw Error(h||"Assertion failed");}q.P=function(){};return q}),La=Fa(function(){var q={};Ha();var w=Ja(),h=Ka();q.assert=w;q.H=h.H;q.Fb=h.Fb;q.Bb=h.Bb;q.encode=h.encode;q.Fc=function(l,m,x){x=Array(Math.max(l.U(),x)+1);x.fill(0);m=1<<m+1;l=l.clone();for(var d=0;d<x.length;d++){var u,
e=l.T(m-1);l.Y()?(e>(m>>1)-1?u=(m>>1)-e:u=e,l.Ca(u)):u=0;x[d]=u;l.j(1)}return x};q.Ec=function(l,m){var x=[[],[]];l=l.clone();m=m.clone();for(var d=0,u=0;0<l.m(-d)||0<m.m(-u);){var e=l.T(3)+d&3,n=m.T(3)+u&3;3===e&&(e=-1);3===n&&(n=-1);if(0===(e&1))var v=0;else{var r=l.T(7)+d&7;v=3!==r&&5!==r||2!==n?e:-e}x[0].push(v);0===(n&1)?e=0:(r=m.T(7)+u&7,e=3!==r&&5!==r||2!==e?n:-n);x[1].push(e);2*d===v+1&&(d=1-d);2*u===e+1&&(u=1-u);l.j(1);m.j(1)}return x};q.Nd=function(){};q.Ed=function(){};return q}),Ma=Fa(function(){var q=
{},w=Ja(),h=Ga();q.Jc=h;q.H=function(l,m){if(Array.isArray(l))return l.slice();if(!l)return[];var x=[];if("string"===typeof l)if(!m)for(var d=m=0;d<l.length;d++){var u=l.charCodeAt(d);128>u?x[m++]=u:(2048>u?x[m++]=u>>6|192:(x[m++]=u>>12|224,x[m++]=u>>6&63|128),x[m++]=u&63|128)}else{if("hex"===m)for(l=l.replace(/[^a-z0-9]+/ig,""),0!==l.length%2&&(l="0"+l),d=0;d<l.length;d+=2)x.push(parseInt(l[d]+l[d+1],16))}else for(d=0;d<l.length;d++)x[d]=l[d]|0;return x};q.Lc=function(l,m,x){m-=0;w(0===m%4);m=Array(m/
4);for(var d=0,u=0;d<m.length;d++,u+=4)m[d]=("big"===x?l[u]<<24|l[u+1]<<16|l[u+2]<<8|l[u+3]:l[u+3]<<24|l[u+2]<<16|l[u+1]<<8|l[u])>>>0;return m};q.ad=function(l){for(var m=Array(4*l.length),x=0,d=0;x<l.length;x++,d+=4){var u=l[x];m[d]=u>>>24;m[d+1]=u>>>16&255;m[d+2]=u>>>8&255;m[d+3]=u&255}return m};q.Vc=function(l,m){return l>>>m|l<<32-m};q.cd=function(l,m){return l+m>>>0};q.dd=function(l,m,x,d){return l+m+x+d>>>0};q.ed=function(l,m,x,d,u){return l+m+x+d+u>>>0};return q}),Na=Fa(function(){function q(h,
l){return l.length===2*h+2?l:q(h,"0x0"+l.slice(2))}var w={};return w={length:function(h){return(h.length-2)/2},flatten:function(h){return"0x"+h.reduce(function(l,m){return l+m.slice(2)},"")},slice:function(h,l,m){return"0x"+m.slice(2*h+2,2*l+2)},tb:q,xc:function(h){h=h.toString(16);return 0===h.length%2?"0x"+h:"0x0"+h},jd:function(h){return parseInt(h.slice(2),16)},pb:function(h){return"0x0"===h?"0x":0===h.length%2?h:"0x0"+h.slice(2)},Qd:function(h){return"0"===h[2]?"0x"+h.slice(3):h}}}),Oa=Fa(function(){function q(){this.pending=
null;this.Ya=0;this.X=this.constructor.X;this.va=this.constructor.va;this.Ma=this.constructor.Ma;this.ia=this.constructor.ia/8;this.nb="big";this.Ha=this.X/8;this.Lb=this.X/32}var w={},h=Ma(),l=Ja();w.Hb=q;q.prototype.update=function(m,x){m=h.H(m,x);this.pending?this.pending=this.pending.concat(m):this.pending=m;this.Ya+=m.length;if(this.pending.length>=this.Ha)for(m=this.pending,x=m.length%this.Ha,this.pending=m.slice(m.length-x,m.length),0===this.pending.length&&(this.pending=null),m=h.Lc(m,m.length-
x,this.nb),x=0;x<m.length;x+=this.Lb)this.ra(m,x);return this};q.prototype.digest=function(m){this.update(this.ac());l(null===this.pending);return this.Mb(m)};q.prototype.ac=function(){var m=this.Ya,x=this.Ha,d=x-(m+this.ia)%x;x=Array(d+this.ia);x[0]=128;for(var u=1;u<d;u++)x[u]=0;m<<=3;if("big"===this.nb){for(d=8;d<this.ia;d++)x[u++]=0;x[u++]=0;x[u++]=0;x[u++]=0;x[u++]=0;x[u++]=m>>>24&255;x[u++]=m>>>16&255;x[u++]=m>>>8&255;x[u++]=m&255}else for(x[u++]=m&255,x[u++]=m>>>8&255,x[u++]=m>>>16&255,x[u++]=
m>>>24&255,x[u++]=0,x[u++]=0,x[u++]=0,x[u++]=0,d=8;d<this.ia;d++)x[u++]=0;return x};return w}),Pa=Fa(function(){function q(d){var u;for(u=0;48>u;u+=2){var e=d[0]^d[10]^d[20]^d[30]^d[40];var n=d[1]^d[11]^d[21]^d[31]^d[41];var v=d[2]^d[12]^d[22]^d[32]^d[42];var r=d[3]^d[13]^d[23]^d[33]^d[43];var c=d[4]^d[14]^d[24]^d[34]^d[44];var z=d[5]^d[15]^d[25]^d[35]^d[45];var a=d[6]^d[16]^d[26]^d[36]^d[46];var b=d[7]^d[17]^d[27]^d[37]^d[47];var g=d[8]^d[18]^d[28]^d[38]^d[48];var f=d[9]^d[19]^d[29]^d[39]^d[49];
var k=g^(v<<1|r>>>31);var t=f^(r<<1|v>>>31);d[0]^=k;d[1]^=t;d[10]^=k;d[11]^=t;d[20]^=k;d[21]^=t;d[30]^=k;d[31]^=t;d[40]^=k;d[41]^=t;k=e^(c<<1|z>>>31);t=n^(z<<1|c>>>31);d[2]^=k;d[3]^=t;d[12]^=k;d[13]^=t;d[22]^=k;d[23]^=t;d[32]^=k;d[33]^=t;d[42]^=k;d[43]^=t;k=v^(a<<1|b>>>31);t=r^(b<<1|a>>>31);d[4]^=k;d[5]^=t;d[14]^=k;d[15]^=t;d[24]^=k;d[25]^=t;d[34]^=k;d[35]^=t;d[44]^=k;d[45]^=t;k=c^(g<<1|f>>>31);t=z^(f<<1|g>>>31);d[6]^=k;d[7]^=t;d[16]^=k;d[17]^=t;d[26]^=k;d[27]^=t;d[36]^=k;d[37]^=t;d[46]^=k;d[47]^=
t;k=a^(e<<1|n>>>31);t=b^(n<<1|e>>>31);d[8]^=k;d[9]^=t;d[18]^=k;d[19]^=t;d[28]^=k;d[29]^=t;d[38]^=k;d[39]^=t;d[48]^=k;d[49]^=t;k=d[0];t=d[1];var y=d[11]<<4|d[10]>>>28;var A=d[10]<<4|d[11]>>>28;var C=d[20]<<3|d[21]>>>29;var B=d[21]<<3|d[20]>>>29;var D=d[31]<<9|d[30]>>>23;var K=d[30]<<9|d[31]>>>23;var E=d[40]<<18|d[41]>>>14;var T=d[41]<<18|d[40]>>>14;var F=d[2]<<1|d[3]>>>31;var X=d[3]<<1|d[2]>>>31;e=d[13]<<12|d[12]>>>20;n=d[12]<<12|d[13]>>>20;var G=d[22]<<10|d[23]>>>22;var Y=d[23]<<10|d[22]>>>22;var H=
d[33]<<13|d[32]>>>19;var Z=d[32]<<13|d[33]>>>19;var I=d[42]<<2|d[43]>>>30;var aa=d[43]<<2|d[42]>>>30;var J=d[5]<<30|d[4]>>>2;var ba=d[4]<<30|d[5]>>>2;var U=d[14]<<6|d[15]>>>26;var V=d[15]<<6|d[14]>>>26;v=d[25]<<11|d[24]>>>21;r=d[24]<<11|d[25]>>>21;var L=d[34]<<15|d[35]>>>17;var ca=d[35]<<15|d[34]>>>17;var da=d[45]<<29|d[44]>>>3;var M=d[44]<<29|d[45]>>>3;g=d[6]<<28|d[7]>>>4;f=d[7]<<28|d[6]>>>4;var ea=d[17]<<23|d[16]>>>9;var N=d[16]<<23|d[17]>>>9;var fa=d[26]<<25|d[27]>>>7;var O=d[27]<<25|d[26]>>>7;
c=d[36]<<21|d[37]>>>11;z=d[37]<<21|d[36]>>>11;var ha=d[47]<<24|d[46]>>>8;var P=d[46]<<24|d[47]>>>8;var ia=d[8]<<27|d[9]>>>5;var Q=d[9]<<27|d[8]>>>5;var ja=d[18]<<20|d[19]>>>12;var R=d[19]<<20|d[18]>>>12;var ka=d[29]<<7|d[28]>>>25;var S=d[28]<<7|d[29]>>>25;var la=d[38]<<8|d[39]>>>24;var W=d[39]<<8|d[38]>>>24;a=d[48]<<14|d[49]>>>18;b=d[49]<<14|d[48]>>>18;d[0]=k^~e&v;d[1]=t^~n&r;d[10]=g^~ja&C;d[11]=f^~R&B;d[20]=F^~U&fa;d[21]=X^~V&O;d[30]=ia^~y&G;d[31]=Q^~A&Y;d[40]=J^~ea&ka;d[41]=ba^~N&S;d[2]=e^~v&c;
d[3]=n^~r&z;d[12]=ja^~C&H;d[13]=R^~B&Z;d[22]=U^~fa&la;d[23]=V^~O&W;d[32]=y^~G&L;d[33]=A^~Y&ca;d[42]=ea^~ka&D;d[43]=N^~S&K;d[4]=v^~c&a;d[5]=r^~z&b;d[14]=C^~H&da;d[15]=B^~Z&M;d[24]=fa^~la&E;d[25]=O^~W&T;d[34]=G^~L&ha;d[35]=Y^~ca&P;d[44]=ka^~D&I;d[45]=S^~K&aa;d[6]=c^~a&k;d[7]=z^~b&t;d[16]=H^~da&g;d[17]=Z^~M&f;d[26]=la^~E&F;d[27]=W^~T&X;d[36]=L^~ha&ia;d[37]=ca^~P&Q;d[46]=D^~I&J;d[47]=K^~aa&ba;d[8]=a^~k&e;d[9]=b^~t&n;d[18]=da^~g&ja;d[19]=M^~f&R;d[28]=E^~F&U;d[29]=T^~X&V;d[38]=ha^~ia&y;d[39]=P^~Q&A;d[48]=
I^~J&ea;d[49]=aa^~ba&N;d[0]^=x[u];d[1]^=x[u+1]}}var w={},h="0123456789abcdef".split(""),l=[1,256,65536,16777216],m=[0,8,16,24],x=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648];return w={rb:function(d){return function(u,
e){var n,v;if("0x"!==u.slice(0,2)||(void 0===e?0:e))var r=u;else for(r=[],e=2,v=u.length;e<v;e+=2)r.push(parseInt(u.slice(e,e+2),16));v=[0,0,0,0,0,0,0,0,0,0];var c=!0;var z=n=0;u=1600-(d<<1)>>5;e=d>>5;v=v.concat(v,v,v,v);var a=void 0;for(var b=r,g=b.length,f=[],k=u<<2,t=0;t<g;){if(c)for(c=!1,f[0]=n,r=1;r<u+1;++r)f[r]=0;if("string"!==typeof b)for(r=z;t<g&&r<k;++t)f[r>>2]|=b[t]<<m[r++&3];else for(r=z;t<g&&r<k;++t)z=b.charCodeAt(t),128>z?f[r>>2]|=z<<m[r++&3]:(2048>z?f[r>>2]|=(192|z>>6)<<m[r++&3]:(55296>
z||57344<=z?f[r>>2]|=(224|z>>12)<<m[r++&3]:(z=65536+((z&1023)<<10|b.charCodeAt(++t)&1023),f[r>>2]|=(240|z>>18)<<m[r++&3],f[r>>2]|=(128|z>>12&63)<<m[r++&3]),f[r>>2]|=(128|z>>6&63)<<m[r++&3]),f[r>>2]|=(128|z&63)<<m[r++&3]);a=r;if(r>=k){z=r-k;n=f[u];for(r=0;r<u;++r)v[r]^=f[r];q(v);c=!0}else z=r}r=a;f[r>>2]|=l[r&3];if(a===k)for(f[0]=f[u],r=1;r<u+1;++r)f[r]=0;f[u-1]|=2147483648;for(r=0;r<u;++r)v[r]^=f[r];q(v);c="";for(n=0;n<e;){for(r=0;r<u&&n<e;++r,++n)z=v[r],c+=h[z>>4&15]+h[z&15]+h[z>>12&15]+h[z>>8&15]+
h[z>>20&15]+h[z>>16&15]+h[z>>28&15]+h[z>>24&15];0===n%u&&q(v)}return"0x"+c}}(256)}}),Sa=Fa(function(){var q={};q.md=La();q.yd=Qa();q.sa=Ra();return q}),Ta=Fa(function(){function q(u,e){this.type=u;this.p=new h(e.p,16);this.red=e.ja?h.red(e.ja):h.Hd(this.p);this.od=(new h(0)).A(this.red);this.Ea=(new h(1)).A(this.red);this.kd=(new h(2)).A(this.red);this.n=e.n&&new h(e.n,16);this.v=e.v&&this.Qc(e.v,e.Cc);this.dc=Array(4);this.ec=Array(4);this.fc=Array(4);this.hc=Array(4);this.Ga=this.n?this.n.U():0;
u=this.n&&this.p.u(this.n);!u||0<u.m(100)||this.n.A(this.red)}function w(u,e){this.curve=u;this.type=e;this.D=null}var h=Ha(),l=La(),m=l.Fc,x=l.Ec,d=l.assert;q.prototype.Sb=function(u,e){d(u.D);u=u.ib();var n=m(e,1,this.Ga),v=(1<<u.step+1)-(0===u.step%2?2:1);v/=3;for(var r=[],c=0;c<n.length;c+=u.step){for(var z=0,a=c+u.step-1;e>=c;e--)z=(z<<1)+n[a];r.push(z)}e=this.O(null,null,null);for(n=this.O(null,null,null);0<v;v--){for(c=0;c<r.length;c++)z=r[c],z===v?n=n.ca(u.C[c]):z===-v&&(n=n.ca(u.C[c].l()));
e=e.add(n)}return e.Cb()};q.prototype.lb=function(u,e,n,v){for(var r=this.dc,c=this.ec,z=this.fc,a=0,b=0;b<n;b++){var g=u[b],f=g.jb(1);r[b]=f.da;c[b]=f.C}for(b=n-1;1<=b;b-=2){var k=b-1,t=b;if(1!==r[k]||1!==r[t])z[k]=m(e[k],r[k],this.Ga),z[t]=m(e[t],r[t],this.Ga),a=Math.max(z[k].length,a),a=Math.max(z[t].length,a);else{var y=[u[k],null,null,u[t]];0===u[k].y.cmp(u[t].y)?(y[1]=u[k].add(u[t]),y[2]=u[k].xa().ca(u[t].l())):0===u[k].y.cmp(u[t].y.la())?(y[1]=u[k].xa().ca(u[t]),y[2]=u[k].add(u[t].l())):(y[1]=
u[k].xa().ca(u[t]),y[2]=u[k].xa().ca(u[t].l()));var A=[-3,-1,-5,-7,0,7,5,1,3],C=x(e[k],e[t]);a=Math.max(C[0].length,a);z[k]=Array(a);z[t]=Array(a);for(f=0;f<a;f++)z[k][f]=A[3*((C[0][f]|0)+1)+((C[1][f]|0)+1)],z[t][f]=0,c[k]=y}}u=this.O(null,null,null);e=this.hc;for(b=a;0<=b;b--){for(a=0;0<=b;){r=!0;for(f=0;f<n;f++)e[f]=z[f][b]|0,0!==e[f]&&(r=!1);if(!r)break;a++;b--}0<=b&&a++;u=u.rc(a);if(0>b)break;for(f=0;f<n;f++)a=e[f],0!==a&&(0<a?g=c[f][a-1>>1]:0>a&&(g=c[f][-a-1>>1].l()),u="affine"===g.type?u.ca(g):
u.add(g))}for(b=0;b<n;b++)c[b]=null;return v?u:u.Cb()};q.ya=w;w.prototype.cb=function(){return this.curve.cb(this)};w.prototype.Nb=function(u){var e=this.curve.p.byteLength(),n=this.qb().H("be",e);return u?[this.La().Ra()?2:3].concat(n):[4].concat(n,this.La().H("be",e))};w.prototype.encode=function(u,e){return l.encode(this.Nb(e),u)};w.prototype.Rc=function(u){if(!this.D){var e={F:null,K:null,beta:null};e.K=this.jb(8);e.F=this.ib(4,u);e.beta=this.hb();this.D=e}};w.prototype.Vb=function(u){if(!this.D)return!1;
var e=this.D.F;return e?e.C.length>=Math.ceil((u.U()+1)/e.step):!1};w.prototype.ib=function(u,e){if(this.D&&this.D.F)return this.D.F;for(var n=[this],v=this,r=0;r<e;r+=u){for(var c=0;c<u;c++)v=v.ba();n.push(v)}return{step:u,C:n}};w.prototype.jb=function(u){if(this.D&&this.D.K)return this.D.K;for(var e=[this],n=(1<<u)-1,v=1===n?null:this.ba(),r=1;r<n;r++)e[r]=e[r-1].add(v);return{da:u,C:e}};return q}),Qa=Fa(function(){function q(m){this.curve=new (Ua())(m);this.v=this.curve.v;this.n=this.curve.n;this.hash=
m.hash;l(this.v.cb(),"Invalid curve");l(this.v.o(this.n).R(),"Invalid curve, G*N != O")}var w={},h=Va(),l=La().assert;w.Jb=q;(function(m,x){Object.defineProperty(w,m,{configurable:!0,enumerable:!0,get:function(){var d=new q(x);Object.defineProperty(w,m,{configurable:!0,enumerable:!0,value:d});return d}})})("secp256k1",{type:"short",ja:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",I:"0",M:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
g:"1",hash:h.$a,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",Va:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",Aa:[{I:"3086d221a7d46bcde86c90e49284eb15",M:"-e4437ed6010e88286f547fa90abfe4c3"},{I:"114ca50f7a8e2f3f657c1108d9d44cfd8",M:"3086d221a7d46bcde86c90e49284eb15"}],Cc:!1,v:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",{}]});return w}),Va=Fa(function(){var q={};
q.md=Ma();q.xd=Oa();q.Yc={$a:Wa()};q.Hc=Xa();q.$a=q.Yc.$a;return q}),Ka=Fa(function(){function q(l){return 1===l.length?"0"+l:l}function w(l){for(var m="",x=0;x<l.length;x++)m+=q(l[x].toString(16));return m}var h={H:function(l,m){if(Array.isArray(l))return l.slice();if(!l)return[];var x=[];if("string"!==typeof l){for(m=0;m<l.length;m++)x[m]=l[m]|0;return x}if("hex"===m)for(l=l.replace(/[^a-z0-9]+/ig,""),0!==l.length%2&&(l="0"+l),m=0;m<l.length;m+=2)x.push(parseInt(l[m]+l[m+1],16));else for(m=0;m<
l.length;m++){var d=l.charCodeAt(m),u=d>>8;d&=255;u?x.push(u,d):x.push(d)}return x}};h.Fb=q;h.Bb=w;h.encode=function(l,m){return"hex"===m?w(l):l};return h}),Ya=Fa(function(){var q={},w=Ma().Vc;q.Ad=function(){};q.nc=function(h,l,m){return h&l^~h&m};q.Mc=function(h,l,m){return h&l^h&m^l&m};q.Md=function(){};q.Wc=function(h){return w(h,2)^w(h,13)^w(h,22)};q.Xc=function(h){return w(h,6)^w(h,11)^w(h,25)};q.Ac=function(h){return w(h,7)^w(h,18)^h>>>3};q.Bc=function(h){return w(h,17)^w(h,19)^h>>>10};return q}),
Wa=Fa(function(){function q(){if(!(this instanceof q))return new q;a.call(this);this.g=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];this.k=b;this.Kb=Array(64)}var w=Ma(),h=Oa(),l=Ya(),m=Ja(),x=w.cd,d=w.dd,u=w.ed,e=l.nc,n=l.Mc,v=l.Wc,r=l.Xc,c=l.Ac,z=l.Bc,a=h.Hb,b=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,
264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];w.Jc(q,
a);q.X=512;q.va=256;q.Ma=192;q.ia=64;q.prototype.ra=function(g,f){for(var k=this.Kb,t=0;16>t;t++)k[t]=g[f+t];for(;t<k.length;t++)k[t]=d(z(k[t-2]),k[t-7],c(k[t-15]),k[t-16]);g=this.g[0];f=this.g[1];var y=this.g[2],A=this.g[3],C=this.g[4],B=this.g[5],D=this.g[6],K=this.g[7];m(this.k.length===k.length);for(t=0;t<k.length;t++){var E=u(K,r(C),e(C,B,D),this.k[t],k[t]),T=x(v(g),n(g,f,y));K=D;D=B;B=C;C=x(A,E);A=y;y=f;f=g;g=x(E,T)}this.g[0]=x(this.g[0],g);this.g[1]=x(this.g[1],f);this.g[2]=x(this.g[2],y);
this.g[3]=x(this.g[3],A);this.g[4]=x(this.g[4],C);this.g[5]=x(this.g[5],B);this.g[6]=x(this.g[6],D);this.g[7]=x(this.g[7],K)};q.prototype.Mb=function(g){return"hex"===g?w.Pd(this.g,"big"):w.ad(this.g)};return q}),Ua=Fa(function(){function q(e){d.call(this,"short",e);this.I=(new m(e.I,16)).A(this.red);this.M=(new m(e.M,16)).A(this.red);this.gd=this.kd.Za();this.eb=0===this.I.ta().m(0);this.zb=0===this.I.ta().sub(this.p).m(-3);this.ha=this.Ub(e);this.Pb=Array(4);this.Qb=Array(4)}function w(e,n,v,r){d.ya.call(this,
e,"affine");null===n&&null===v?(this.y=this.x=null,this.V=!0):(this.x=new m(n,16),this.y=new m(v,16),r&&(this.x.wc(this.curve.red),this.y.wc(this.curve.red)),this.x.red||(this.x=this.x.A(this.curve.red)),this.y.red||(this.y=this.y.A(this.curve.red)),this.V=!1)}function h(e,n,v,r){d.ya.call(this,e,"jacobian");null===n&&null===v&&null===r?(this.y=this.x=this.curve.Ea,this.z=new m(0)):(this.x=new m(n,16),this.y=new m(v,16),this.z=new m(r,16));this.x.red||(this.x=this.x.A(this.curve.red));this.y.red||
(this.y=this.y.A(this.curve.red));this.z.red||(this.z=this.z.A(this.curve.red));this.nd=this.z===this.curve.Ea}var l={};l=La();var m=Ha(),x=Ga(),d=Ta(),u=l.assert;x(q,d);l=q;q.prototype.Ub=function(e){if(this.eb&&this.v&&this.n&&1===this.p.Da(3)){if(e.beta)var n=(new m(e.beta,16)).A(this.red);else n=this.Tb(this.p),n=0>n[0].cmp(n[1])?n[0]:n[1],n=n.A(this.red);if(e.Va)var v=new m(e.Va,16);else v=this.Tb(this.n),0===this.v.o(v[0]).x.cmp(this.v.x.c(n))?v=v[0]:(v=v[1],u(0===this.v.o(v).x.cmp(this.v.x.c(n))));
var r;e.Aa?r=e.Aa.map(function(c){return{I:new m(c.I,16),M:new m(c.M,16)}}):r=this.rd(v);return{beta:n,Va:v,Aa:r}}};q.prototype.Ob=function(e){var n=this.ha.Aa,v=n[0],r=n[1],c=r.M.o(e).mb(this.n),z=v.M.l().o(e).mb(this.n);n=c.o(v.I);var a=z.o(r.I);v=c.o(v.M);r=z.o(r.M);e=e.sub(n).sub(a);n=v.add(r).l();return{Sa:e,Ta:n}};q.prototype.wb=function(e,n){e=new m(e,16);e.red||(e=e.A(this.red));var v=e.f().c(e).s(e.c(this.I)).s(this.M),r=v.Uc();if(0!==r.f().aa(v).cmp(this.od))throw Error("invalid point");
v=r.ta().Y();if(n&&!v||!n&&v)r=r.la();return this.W(e,r)};q.prototype.cb=function(e){if(e.V)return!0;var n=e.x;e=e.y;var v=this.I.c(n);n=n.f().c(n).s(v).s(this.M);return 0===e.f().h(n).m(0)};q.prototype.gb=function(e,n){for(var v=this.Pb,r=this.Qb,c=0;c<e.length;c++){var z=this.Ob(n[c]),a=e[c],b=a.hb();z.Sa.b&&(z.Sa.Pa(),a=a.l(!0));z.Ta.b&&(z.Ta.Pa(),b=b.l(!0));v[2*c]=a;v[2*c+1]=b;r[2*c]=z.Sa;r[2*c+1]=z.Ta}e=this.lb(v,r,2*c,void 0);for(n=0;n<2*c;n++)v[n]=null,r[n]=null;return e};x(w,d.ya);q.prototype.W=
function(e,n,v){return new w(this,e,n,v)};q.prototype.Qc=function(e,n){return w.P(this,e,n)};w.prototype.hb=function(){if(this.curve.ha){var e=this.D;if(e&&e.beta)return e.beta;var n=this.curve.W(this.x.c(this.curve.ha.beta),this.y);if(e){var v=this.curve,r=function(c){return v.W(c.x.c(v.ha.beta),c.y)};e.beta=n;n.D={beta:null,K:e.K&&{da:e.K.da,C:e.K.C.map(r)},F:e.F&&{step:e.F.step,C:e.F.C.map(r)}}}return n}};w.prototype.toJSON=function(){};w.P=function(e,n,v){function r(z){return e.W(z[0],z[1],v)}
"string"===typeof n&&(n=JSON.parse(n));var c=e.W(n[0],n[1],v);if(!n[2])return c;n=n[2];c.D={beta:null,F:n.F&&{step:n.F.step,C:[c].concat(n.F.C.map(r))},K:n.K&&{da:n.K.da,C:[c].concat(n.K.C.map(r))}};return c};w.prototype.R=function(){return this.V};w.prototype.add=function(e){if(this.V)return e;if(e.V)return this;if(this.ob(e))return this.ba();if(this.l().ob(e)||0===this.x.cmp(e.x))return this.curve.W(null,null);var n=this.y.aa(e.y);0!==n.m(0)&&(n=n.c(this.x.aa(e.x).Za()));e=n.f().h(this.x).h(e.x);
n=n.c(this.x.aa(e)).h(this.y);return this.curve.W(e,n)};w.prototype.qb=function(){return this.x.ta()};w.prototype.La=function(){return this.y.ta()};w.prototype.o=function(e){e=new m(e,16);return this.R()?this:this.Vb(e)?this.curve.Sb(this,e):this.curve.ha?this.curve.gb([this],[e]):this.curve.vd(this,e)};w.prototype.Nc=function(e,n,v){n=[this,n];e=[e,v];return this.curve.ha?this.curve.gb(n,e):this.curve.lb(n,e,2)};w.prototype.ob=function(e){return this===e||this.V===e.V&&(this.V||0===this.x.cmp(e.x)&&
0===this.y.cmp(e.y))};w.prototype.l=function(e){if(this.V)return this;var n=this.curve.W(this.x,this.y.la());if(e&&this.D){e=this.D;var v=function(r){return r.l()};n.D={K:e.K&&{da:e.K.da,C:e.K.C.map(v)},F:e.F&&{step:e.F.step,C:e.F.C.map(v)}}}return n};w.prototype.xa=function(){return this.V?this.curve.O(null,null,null):this.curve.O(this.x,this.y,this.curve.Ea)};x(h,d.ya);q.prototype.O=function(e,n,v){return new h(this,e,n,v)};h.prototype.Cb=function(){if(this.R())return this.curve.W(null,null);var e=
this.z.Za(),n=e.f(),v=this.x.c(n);e=this.y.c(n).c(e);return this.curve.W(v,e)};h.prototype.l=function(){return this.curve.O(this.x,this.y.la(),this.z)};h.prototype.add=function(e){if(this.R())return e;if(e.R())return this;var n=e.z.f(),v=this.z.f(),r=this.x.c(n),c=e.x.c(v);n=this.y.c(n.c(e.z));v=e.y.c(v.c(this.z));c=r.aa(c);v=n.aa(v);if(0===c.m(0))return 0!==v.m(0)?this.curve.O(null,null,null):this.ba();var z=c.f(),a=z.c(c);z=r.c(z);r=v.f().s(a).h(z).h(z);n=v.c(z.h(r)).h(n.c(a));e=this.z.c(e.z).c(c);
return this.curve.O(r,n,e)};h.prototype.ca=function(e){if(this.R())return e.xa();if(e.R())return this;var n=this.z.f(),v=this.x,r=e.x.c(n),c=this.y;e=e.y.c(n).c(this.z);r=v.aa(r);e=c.aa(e);if(0===r.m(0))return 0!==e.m(0)?this.curve.O(null,null,null):this.ba();var z=r.f();n=z.c(r);z=v.c(z);v=e.f().s(n).h(z).h(z);c=e.c(z.h(v)).h(c.c(n));r=this.z.c(r);return this.curve.O(v,c,r)};h.prototype.rc=function(e){if(0===e||this.R())return this;if(!e)return this.ba();if(this.curve.eb||this.curve.zb){for(var n=
this,v=0;v<e;v++)n=n.ba();return n}n=this.curve.I;var r=this.curve.gd,c=this.x;v=this.y;var z=this.z,a=z.f().f(),b=v.$(v);for(v=0;v<e;v++){var g=c.f(),f=b.f(),k=f.f();g=g.$(g).s(g).s(n.c(a));f=c.c(f);c=g.f().h(f.$(f));f=f.h(c);g=g.c(f);g=g.s(g).h(k);z=b.c(z);v+1<e&&(a=a.c(k));b=g}return this.curve.O(c,b.c(r),z)};h.prototype.ba=function(){return this.R()?this:this.curve.eb?this.jc():this.curve.zb?this.ud():this.qd()};h.prototype.jc=function(){if(this.nd){var e=this.x.f();var n=this.y.f();var v=n.f();
n=this.x.$(n).f().h(e).h(v);n=n.s(n);e=e.$(e).s(e);var r=e.f().h(n).h(n),c=v.s(v);c=c.s(c);c=c.s(c);v=r;n=e.c(n.h(r)).h(c);e=this.y.$(this.y)}else e=this.x.f(),n=this.y.f(),v=n.f(),n=this.x.$(n).f().h(e).h(v),n=n.s(n),e=e.$(e).s(e),r=e.f(),c=v.s(v),c=c.s(c),c=c.s(c),v=r.h(n).h(n),n=e.c(n.h(v)).h(c),e=this.y.c(this.z),e=e.s(e);return this.curve.O(v,n,e)};h.prototype.R=function(){return 0===this.z.m(0)};return l}),Xa=Fa(function(){function q(l,m,x){if(!(this instanceof q))return new q(l,m,x);this.Fa=
l;this.X=l.X/8;this.va=l.va/8;this.Xa=this.Qa=null;this.pa(w.H(m,x))}var w=Ma(),h=Ja();q.prototype.pa=function(l){l.length>this.X&&(l=(new this.Fa).update(l).digest());h(l.length<=this.X);for(var m=l.length;m<this.X;m++)l.push(0);for(m=0;m<l.length;m++)l[m]^=54;this.Qa=(new this.Fa).update(l);for(m=0;m<l.length;m++)l[m]^=106;this.Xa=(new this.Fa).update(l)};q.prototype.update=function(l,m){this.Qa.update(l,m);return this};q.prototype.digest=function(l){this.Xa.update(this.Qa.digest());return this.Xa.digest(l)};
return q}),Ra=Fa(function(){function q(e){if(!(this instanceof q))return new q(e);"string"===typeof e&&(x(m.hasOwnProperty(e),"Unknown curve "+e),e=m[e]);e instanceof m.Jb&&(e={curve:e});this.curve=e.curve.curve;this.n=this.curve.n;this.Pc=this.n.ab(1);this.v=this.curve.v;this.v=e.curve.v;this.v.Rc(e.curve.n.U()+1);this.hash=e.hash||e.curve.hash}var w=Ha(),h=Za(),l=La(),m=Qa(),x=l.assert,d=$a(),u=ab();q.prototype.Ua=function(e,n){return d.yc(this,e,n)};q.prototype.kb=function(e,n){var v=8*e.byteLength()-
this.n.U();0<v&&(e=e.ab(v));return!n&&0<=e.cmp(this.n)?e.sub(this.n):e};q.prototype.sign=function(e,n,v,r){"object"===typeof v&&(r=v,v=null);r||(r={});n=this.Ua(n,v);e=this.kb(new w(e,16));var c=this.n.byteLength();v=n.Z.H("be",c);c=e.H("be",c);c=new h({hash:this.hash,uc:v,nonce:c,ub:r.ub,vb:r.vb||"utf8"});for(var z=this.n.sub(new w(1)),a=0;;a++){var b=r.k?r.k(a):new w(c.Dc(this.n.byteLength()));b=this.kb(b,!0);if(!(0>=b.m(1)||0<=b.cmp(z))){var g=this.v.o(b);if(!g.R()){var f=g.qb();v=f.S(this.n);
if(0!==v.m(0)&&(b=b.Ba(this.n).o(v.o(n.Z).B(e)),b=b.S(this.n),0!==b.m(0)))return e=(g.La().Y()?1:0)|(0!==f.cmp(v)?2:0),r.mc&&0<b.cmp(this.Pc)&&(b=this.n.sub(b),e^=1),new u({r:v,ma:b,wa:e})}}}};q.prototype.Tc=function(e,n,v){x((3&v)===v,"The recovery param is more than two bits");n=new u(n,void 0);var r=this.n,c=new w(e);e=n.r;var z=n.ma,a=v&1;v>>=1;if(0<=e.cmp(this.curve.p.S(this.curve.n))&&v)throw Error("Unable to find sencond key candinate");e=v?this.curve.wb(e.add(this.curve.n),a):this.curve.wb(e,
a);n=n.r.Ba(r);c=r.sub(c).o(n).S(r);r=z.o(n).S(r);return this.v.Nc(c,e,r)};return q}),Za=Fa(function(){function q(m){if(!(this instanceof q))return new q(m);this.hash=m.hash;this.sb=this.hash.va;this.Wa=m.Wa||this.hash.Ma;this.N=this.na=this.xb=this.Ka=null;var x=h.H(m.uc,m.zd||"hex"),d=h.H(m.nonce,m.Id||"hex");m=h.H(m.ub,m.vb||"hex");l(x.length>=this.Wa/8,"Not enough entropy. Minimum is: "+this.Wa+" bits");this.pa(x,d,m)}var w=Va(),h=Ka(),l=Ja();q.prototype.pa=function(m,x,d){m=m.concat(x).concat(d);
this.na=Array(this.sb/8);this.N=Array(this.sb/8);for(x=0;x<this.N.length;x++)this.na[x]=0,this.N[x]=1;this.ra(m);this.Ka=1;this.xb=281474976710656};q.prototype.oa=function(){return new w.Hc(this.hash,this.na)};q.prototype.ra=function(m){var x=this.oa().update(this.N).update([0]);m&&(x=x.update(m));this.na=x.digest();this.N=this.oa().update(this.N).digest();m&&(this.na=this.oa().update(this.N).update([1]).update(m).digest(),this.N=this.oa().update(this.N).digest())};q.prototype.Dc=function(m){if(this.Ka>
this.xb)throw Error("Reseed is required");if("string"!==typeof u){var x=d;var d=u;var u=null}d&&(d=h.H(d,x||"hex"),this.ra(d));for(x=[];x.length<m;)this.N=this.oa().update(this.N).digest(),x=x.concat(this.N);m=x.slice(0,m);this.ra(d);this.Ka++;return h.encode(m,u)};return q}),$a=Fa(function(){function q(h,l){this.sa=h;this.ka=this.Z=null;l.Z&&this.Xb(l.Z,l.Sc);l.ka&&this.sd(l.ka,l.Od)}var w=Ha();La();q.yc=function(h,l,m){return l instanceof q?l:new q(h,{Z:l,Sc:m})};q.prototype.Gc=function(){var h=
!1,l="hex";"string"===typeof h&&(l=h,h=null);this.ka||(this.ka=this.sa.v.o(this.Z));return l?this.ka.encode(l,h):this.ka};q.prototype.Xb=function(h,l){this.Z=new w(h,l||16);this.Z=this.Z.S(this.sa.curve.n)};q.prototype.sign=function(h,l,m){return this.sa.sign(h,this,l,m)};return q}),ab=Fa(function(){function q(l){if(l instanceof q)return l;h(l.r&&l.ma,"Signature without r or s");this.r=new w(l.r,16);this.ma=new w(l.ma,16);void 0===l.wa?this.wa=null:this.wa=l.wa}var w=Ha(),h=La().assert;return q}),
bb=Fa(function(){var q={};(function(w){function h(e){for(var n=d(e.slice(2)),v="0x",r=0;40>r;r++)v+=7<parseInt(n[r+2],16)?e[r+2].toUpperCase():e[r+2];return v}var l=Na(),m=Ha(),x=new (Sa().sa)("secp256k1"),d=Pa().rb,u={zc:function(e){e="0x"+("0x"===e.slice(0,2)?new m(e.slice(2),16):new m(e,10)).toString("hex");return"0x0"===e?"0x":e}};q={kc:h,lc:function(e){e=w.from(e.slice(2),"hex");e="0x"+x.Ua(e).Gc().slice(2);e=d(e);return h("0x"+e.slice(-40))},Zc:function(e,n,v){v=void 0===v?27:v;e=x.Ua(w.from(n.slice(2),
"hex")).sign(w.from(e.slice(2),"hex"),{mc:!0});v=[u.zc(l.xc(v+e.wa)),l.tb(32,l.pb("0x"+e.r.toString(16))),l.tb(32,l.pb("0x"+e.ma.toString(16)))];n=(e="undefined"!=typeof Symbol&&Symbol.iterator&&v[Symbol.iterator])?e.call(v):{next:oa(v)};v=n.next().value;e=n.next().value;n=n.next().value;return l.flatten([e,n,v])},$c:function(e,n){n=[l.slice(64,l.length(n),n),l.slice(0,32,n),l.slice(32,64,n)];n={bb:l.jd(n[0]),r:n[1].slice(2),ma:n[2].slice(2)};e="0x"+x.Tc(w.from(e.slice(2),"hex"),n,2>n.bb?n.bb:1-n.bb%
2).encode("hex",!1).slice(2);e=d(e);return h("0x"+e.slice(-40))}}}).call(ma,Ia().Ib);return q})();module.exports.addressChecksum=bb.kc;module.exports.addressFromKey=bb.lc;module.exports.signMessage=bb.Zc;module.exports.signerAddress=bb.$c;module.exports.keccak=Pa().rb;


/***/ }),

/***/ 101:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const {Component, render} = __webpack_require__(285);
const h = __webpack_require__(86).h;
const apps = __webpack_require__(649);

module.exports = class AppList extends Component {
  render() {
    var list = Object.keys(apps).map(app => {
      return h("div", {}, [
        h("span", {}, "- "),
        h("a", {
          style: {
            "text-decoration": "underline",
            "cursor": "pointer",
          },
          onClick: () => {
            window.location = "/"+app;
          },
        }, app),
      ]);
    });
    return h("pre", {
      style: {
        "padding": "6px",
        "font-size": "16px",
        "font-family": "monospace",
      }
    }, [
      h("div", {}, [h("pre", {}, ["Select an application:"])]),
      list,
    ]);
  }
}


/***/ }),

/***/ 952:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { Component, render } = __webpack_require__(285);
const h = __webpack_require__(86).h;
const apps = __webpack_require__(649);
const sign = __webpack_require__(216);
const utils = __webpack_require__(555);
const kind = __webpack_require__(806);

module.exports = class AppPlay extends Component {

  // Sets up internal variables
  constructor(props) {
    super(props);

    this.name = props.name; // name of this application
    this.app = null; // application module, compiled from Kind
    this.app_state = null; // the state of the application

    this.intervals = {}; // timed intervals
    this.listeners = {}; // event listeners
    this.mouse_pos = { _: "Pair.new", fst: 0, snd: 0 };
    this.rendered = null; // document rendered by app, coming from Kind
    this.container = null; // container that holds rendered app
    this.canvas = {}; // canvas that holds rendered pixel-art apps
  }

  // Initializes everything
  async componentDidMount() {
    await this.init_app();
    await this.init_input_events();
    await this.init_renderer();
  }

  // Clear up intervals and event listeners
  async componentWillUnmount() {
    for (var key in this.intervals) {
      clearInterval(this.intervals[key]);
    }
    for (var key in this.listeners) {
      document.body.removeEventListener(key, this.listeners[key]);
    };
  }

  // Loads the application from Moonad, which was pre-compiled to JavaScript
  async init_app() {
    if (!this.app && apps[this.name]) {
      //console.log("loading app...");
      this.app = (await apps[this.name])[this.name];
      this.app_state = this.app.init;
      //console.log("loaded: ", this.app);
    }
  }

  // Initializes the input event listeners
  async init_input_events() {
    //this.events = []; // this application's events

    // Init event
    this.register_event({
      _: "App.Event.init",
      time: BigInt(0),
      user: sign.addressFromKey(KEY).toLowerCase(),
      info: {
        _: "App.EnvInfo.new",
        screen_size: {
          _: "Pair.new",
          fst: window.innerWidth, // this.container ? this.container.offsetWidth : 0,
          snd: window.innerHeight // this.container ? this.container.offsetHeight : 0,
        },
        mouse_pos: this.mouse_pos,
      }
    });

   // Mouse movement event
    this.listeners.mousemove = (e) => {
      this.mouse_pos = {_ : "Pair.new", fst: e.offsetX, snd : e.offsetY}
    }

    document.body.addEventListener("mousemove", this.listeners.mousemove);

    // Mouse down event
    this.listeners.mousedown = (e) => {
      this.register_event({
        _: "App.Event.mouse_down",
        time: BigInt(Date.now()),
      });
    };
    document.body.addEventListener("mousedown", this.listeners.mousedown);

    this.listeners.mouseover = (e) => {
      this.register_event({
        _: "App.Event.mouse_over",
        time: BigInt(Date.now()),
        id: e.target.id
      });
    };
    document.body.addEventListener("mouseover", this.listeners.mouseover); 

    this.listeners.mouseover = (e) => {
      this.register_event({
        _: "App.Event.mouse_out",
        time: BigInt(Date.now()),
        id: e.target.id
      });
    };
    document.body.addEventListener("mouseout", this.listeners.mouseout);

    this.listeners.click = (e) => {
      this.register_event({
        _: "App.Event.mouse_click",
        time: BigInt(Date.now()),
        id: e.target.id
      });
    };
    document.body.addEventListener("click", this.listeners.click); 

    // Mouse up event
    this.listeners.mouseup = (e) => {
      this.register_event({
        _: "App.Event.mouse_up",
        time: BigInt(Date.now()),
      });
    };
    document.body.addEventListener("mouseup", this.listeners.mouseup);

    // Key down event
    this.listeners.keydown = (e) => {
      if (!e.repeat) {
        this.register_event({
          _: "App.Event.key_down",
          time: BigInt(Date.now()),
          code: e.keyCode,
        });
      }
    };
    document.body.addEventListener("keydown", this.listeners.keydown);

    // Key up event
    this.listeners.keyup = (e) => {
      this.register_event({
        _: "App.Event.key_up",
        time: BigInt(Date.now()),
        code: e.keyCode,
      });
    };
    document.body.addEventListener("keyup", this.listeners.keyup);

    // Resize event
    // TODO: remove it
    this.listeners.resize = (e) => {
      this.register_event({
        _: "App.Event.resize",
        time: BigInt(Date.now()),
        info: {
          _: "App.EnvInfo.new",
          screen_size: {
            _: "Pair.new",
            fst: e.target.innerWidth,
            snd: e.target.innerHeight,
          },
          mouse_pos: this.mouse_pos,
        }
      });
    };
    window.addEventListener("resize", this.listeners.resize);

    this.listeners.submit = (e) => {
      e.preventDefault(); // prevents page to reload on submit
      this.register_event({
        _: "App.Event.onsubmit",
        time: BigInt(Date.now()),
        value: event.target[0].value
      });
    };
    document.body.addEventListener("submit", this.listeners.submit);

    //Tick event
    this.intervals.tick = () => {
      let time = performance.now()
      let frame = 1000/16
      let self = (mileseconds) => {
        if (mileseconds-time > frame) {
          this.register_event({
            _: "App.Event.tick",
            time: BigInt(Date.now()),
            info: {
              _: "App.EnvInfo.new",
              screen_size: {
                _: "Pair.new",
                fst: this.container ? this.container.offsetWidth : 0,
                snd: this.container ? this.container.offsetHeight : 0,
              },
              mouse_pos: this.mouse_pos,
            }
          })
          time = performance.now()
        }
        window.requestAnimationFrame(self)
      }
      return window.requestAnimationFrame(self)
    }

    this.intervals.tick()
  }
  
  // Initializes the main render loop
  async init_renderer() {
    //console.log("to aqui!");
    this.intervals.renderer = setInterval(() => {
      if (this.app) {
        this.rendered = this.app.draw(this.app_state);
        this.forceUpdate();
      }
    }, 1000 / 32);
  }

  // Adds an event to the list of events
  register_event(ev) {
    if (this.app) {
      this.run_io(this.app.when(ev)(this.app_state));
    }
  }

  // Performs an IO computation
  run_io(io) {
    //console.log("Run IO", io);
    switch (io._) {
      case "IO.end":
        if (io.value.value !== null) {
          this.app_state = io.value.value;
          return Promise.resolve(io.value.value);
        }
        return Promise.resolve(null);
      case "IO.ask":
        //console.log("IO.ask", io.param);
        return new Promise((res, err) => {
          switch (io.query) {
            case "print":
              alert(io.param);
              return this.run_io(io.then("")).then(res).catch(err);
            case "put_string":
              alert(io.param);
              return this.run_io(io.then("")).then(res).catch(err);
            case "get_time":
              return this.run_io(io.then(String(Date.now()))).then(res).catch(err);
            case "get_line":
              var answer = prompt(io.param) || "";
              return this.run_io(io.then(answer)).then(res).catch(err);
            case "get_file":
              var data = localStorage.getItem(io.param) || "";
              return this.run_io(io.then(data)).then(res).catch(err);
            case "set_file":
              var path = '';
              for (var i = 0; i < io.param.length && io.param[i] !== '='; ++i) {
                path += param[i];
              };
              var data = io.param.slice(i + 1);
              localStorage.setItem(path, data);
              return this.run_io(io.then("")).then(res).catch(err);
            case "del_file":
              localStorage.removeItem(io.param);
              return this.run_io(io.then("")).then(res).catch(err);
            case "watch":
              if (utils.is_valid_hex(48, io.param)) {
                window.KindEvents.watch_room(io.param);
                window.KindEvents.on_post(({ room, time, addr, data }) => {
                  var time = BigInt(parseInt(time.slice(2), 16));
                  this.register_event({ _: "App.Event.post", time, room, addr : addr.toLowerCase(), data });
                });
              } else {
                console.log("Error: invalid input on App.Action.watch");
              }
              return this.run_io(io.then("")).then(res).catch(err);
            case "post":
              var [room, data] = io.param.split(";");
              if (utils.is_valid_hex(48, room) && utils.is_valid_hex(256, data)) {
                console.log("Posting: ", room, data);
                window.KindEvents.send_post(room, data);
              } else {
                console.log("Error: invalid input on App.Action.post");
              }
              return this.run_io(io.then("")).then(res).catch(err);
          }
        });
    }
  }

  // Renders a document
  render_dom(elem) {
    //console.log("render_dom", elem);
    switch (elem._) {
      // Renders a HTML element
      case "DOM.node":
        let props = utils.map_to_object(elem.props);
        let style = utils.map_to_object(elem.style);
        return h(elem.tag, {
          ...props,
          style: style
        }, utils.list_to_array(elem.children).map(x => this.render_dom(x)));
      // Renders a VoxBox using a canvas
      case "DOM.vbox":
        var id = elem.props ? elem.props.id || "" : "";
        var width = Number(elem.props.width) || 256;
        var height = Number(elem.props.height) || 256;
        var canvas = this.get_canvas(id, width, height);
        var length = elem.value.length;
        var capacity = elem.value.capacity;
        var buffer = elem.value.buffer;
        // Renders pixels to buffers
        for (var i = 0; i < length; ++i) {
          var pos = buffer[i * 2 + 0];
          var col = buffer[i * 2 + 1];
          var p_x = (pos >>> 0) & 0xFFF;
          var p_y = (pos >>> 12) & 0xFFF;
          var p_z = (pos >>> 24) & 0xFF;
          var idx = p_y * canvas.width + p_x;
          var dep = canvas.depth_u8[idx];
          if (p_x >= 0 && p_x < width && p_y >= 0 && p_y < height && p_z >= dep) {
            canvas.image_u32[idx] = col;
            canvas.depth_u8[idx] = p_z;
            canvas.clear.data[canvas.clear.length++] = idx;
          }
        }
        // Renders buffers to canvas
        canvas.image_data.data.set(canvas.image_u8);
        canvas.context.putImageData(canvas.image_data, 0, 0);
        // Erases pixels from buffers
        for (var i = 0; i < canvas.clear.length; ++i) {
          var idx = canvas.clear.data[i];
          canvas.image_u32[idx] = 0;
          canvas.depth_u8[idx] = 0;
        }
        canvas.clear.length = 0;
        // Mutably resets the length of the VoxBox
        elem.value.length = 0;
        return h("div", {
          ref: function (x) { if (x) { x.appendChild(canvas) } }
        });
      // Renders plain text
      case "DOM.text":
        return elem.value;
    }
  }

  // Component's render function
  render() {
    if (!this.app) {
      return "Loading app...";
    } else if (!this.rendered) {
      return "Rendering app...";
    } else {
      var element = this.render_dom(this.rendered);
      var container = h("div", {
        id: "container",
        style: {
          "width": "100%",
          "height": "100%",
        },
      }, element);
      return container;
    }
  }

  // Gets a pixel-art canvas
  get_canvas(id, width, height) {
    if (!this.canvas[id] || this.canvas[id].width !== width || this.canvas[id].height !== height) {
      console.log("creating canvas", id, width, height);
      this.canvas[id] = document.createElement("canvas");
      this.canvas[id].style["image-rendering"] = "pixelated";
      this.canvas[id].width = width;
      this.canvas[id].height = height;
      this.canvas[id].style.width = width + "px";
      this.canvas[id].style.height = height + "px";
      this.canvas[id].clear = { length: 0, data: new Uint32Array(width * height * 32) };
      this.canvas[id].style.border = "1px solid black";
      this.canvas[id].context = this.canvas[id].getContext("2d");
      this.canvas[id].image_data = this.canvas[id].context.getImageData(0, 0, this.canvas[id].width, this.canvas[id].height)
      this.canvas[id].image_buf = new ArrayBuffer(this.canvas[id].image_data.data.length);
      this.canvas[id].image_u8 = new Uint8ClampedArray(this.canvas[id].image_buf);
      this.canvas[id].image_u32 = new Uint32Array(this.canvas[id].image_buf);
      this.canvas[id].depth_buf = new ArrayBuffer(this.canvas[id].image_u32.length);
      this.canvas[id].depth_u8 = new Uint8Array(this.canvas[id].depth_buf);
    }
    return this.canvas[id];
  }

}



/***/ }),

/***/ 649:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
  'Web.Playground': __webpack_require__.e(/* import() */ 791).then(__webpack_require__.t.bind(__webpack_require__, 791, 23)),
}


/***/ }),

/***/ 555:
/***/ ((module) => {

function is_valid_hex(bits, hex) {
  return new RegExp("^0x[0-9A-Fa-f]{"+Math.floor(bits/4)+"}$").test(hex)
}

function list_to_array(list) {
  var arr = [];
  while (list._ === "List.cons") {
    arr.push(list.head);
    list = list.tail;
  }
  return arr;
}

function map_to_object(map, key = "", obj = {}) {
  switch (map._) {
    case "BitsMap.tie":
      switch (map.val._) {
        case "Maybe.none": break;
        case "Maybe.some": obj[bits_to_string(key)] = map.val.value; break;
      }
      map_to_object(map.lft, key + "0", obj);
      map_to_object(map.rgt, key + "1", obj);
      break;
    case "BitsMap.new":
      break;
  }
  return obj;
}

function bits_to_string(bits) {
  var str = "";
  for (var i = 0; i < bits.length; i += 16) {
    var binary = bits.slice(i, i + 16).split("").reverse().join("");
    str += String.fromCharCode(parseInt(binary, 2));
  }
  return str;
}


module.exports = {
  is_valid_hex,
  list_to_array,
  map_to_object,
  bits_to_string,
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".index.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "kind-web:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			179: 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) var result = runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkkind_web"] = self["webpackChunkkind_web"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
__webpack_require__(787)/* .default */ .Z;

const {Component, render} = __webpack_require__(285);
const h = __webpack_require__(86).h;

const EthSign = __webpack_require__(216);
const AppPlay = __webpack_require__(952);
const AppList = __webpack_require__(101);
const KindEventsClient = __webpack_require__(596);

function random_hex(bits_len) {
  var bytes = crypto.getRandomValues(new Uint8Array((bits_len/8)>>>0));
  var chars = Array.from(bytes).map(b => ("00" + b.toString(16)).slice(-2));
  return "0x" + chars.join("");
}

function get_from_storage(key, init) {
  var value = localStorage.getItem(key);
  if (!value) {
    value = init();
    localStorage.setItem(key, value);
  }
  return value;
}

window.KEY = get_from_storage("KEY", () => random_hex(256));
window.KindEvents = KindEventsClient({url: "ws://uwu.tech:7171", key: window.KEY});
console.log("KEY: ", window.KEY);
console.log("ADDRESS: ", EthSign.addressFromKey(window.KEY));

class Moonad extends Component {
  constructor(props) {
    super(props);
  }
  async componentDidMount() {
    window.addEventListener('popstate', (event) => {
      this.forceUpdate();
    });
  }
  render() {
    var path = window.location.pathname.slice(1);
    if (path === "") {
      return h(AppList);
    } else {
      return h(AppPlay, {name: path});
    }
  }
};

window.onload = () => render(h(Moonad), document.getElementById("main"));

})();

/******/ })()
;
//# sourceMappingURL=index.js.map