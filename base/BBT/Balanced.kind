BBT.Balanced<K: Type, V: Type>(cmp: K -> K -> Cmp, map: BBT<K, V>): Type
  case map {
    tip:
      Unit
    bin:
      And<
        // if the tree is balanced we can strenghten a proof of membership
        // with the result of a comparison
        (key: K) -> (H: BBT.In<K, V>(map, key)) ->
        case cmp(key, map.key) {
          ltn: And<
            BBT.In<K, V>(map.left, key),
            Not(BBT.In<K, V>(map.right, key))>
          eql: Unit
          gtn: And<
            Not(BBT.In<K, V>(map.left, key)),
            BBT.In<K, V>(map.right, key)>
        },
        // children are also balanced
        And<
          BBT.Balanced<K, V>(cmp, map.left),
          BBT.Balanced<K, V>(cmp, map.right)>>
  }!
