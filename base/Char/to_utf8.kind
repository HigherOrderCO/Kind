Char.to_utf8(chr: U16): Buffer8
  let buf = Buffer8.alloc(4)
  if U16.ltn(chr, 0x80) then
    let b0 = U16.or(0x00, U16.and(0x7F, chr)) // (chr & 0x7F) | 0x00
    let buf = Buffer8.set(0#32, U16.to_u8(b0), buf)
    let buf = Buffer8.set(1#32, U8.zero, buf)
    let buf = Buffer8.set(2#32, U8.zero, buf)
    let buf = Buffer8.set(3#32, U8.zero, buf)
    buf
  else if U16.ltn(chr, 0x0800) then
    let b0 = U16.or(0xC0, U16.and(0x1F, U16.shr(chr, 6))) // (chr>>6 & 0x1F) | 0xC0
    let b1 = U16.or(0x80, U16.and(0x3F, chr)) // (chr & 0x3F) | 0x80
    let buf = Buffer8.set(0#32, U16.to_u8(b0), buf)
    let buf = Buffer8.set(1#32, U16.to_u8(b1), buf)
    let buf = Buffer8.set(2#32, U8.zero, buf)
    let buf = Buffer8.set(3#32, U8.zero, buf)
    buf
  else if Bool.or(U16.ltn(chr, 0xd800), U16.gte(chr, 0xe000)) then
    let b0 = U16.or(0xE0, U16.and(0x0F, U16.shr(chr, 12))) // (chr>>12 & 0x0F) | 0xE0
    let b1 = U16.or(0x80, U16.and(0x3F, U16.shr(chr, 6)))  // (chr>>6 & 0x3F)  | 0x80
    let b2 = U16.or(0x80, U16.and(0x3F, chr)) // (chr & 0x3F)  | 0x80
    let buf = Buffer8.set(0#32, U16.to_u8(b0), buf)
    let buf = Buffer8.set(1#32, U16.to_u8(b1), buf)
    let buf = Buffer8.set(2#32, U16.to_u8(b2), buf)
    let buf = Buffer8.set(3#32, U8.zero, buf)
    buf
  else // TODO: fix 
    let b0 = U16.or(0xF0, U16.and(0x07, U16.shr(chr, 18))) // (chr>>18 & 0x07) | 0xF0
    let b1 = U16.or(0x80, U16.and(0x3F, U16.shr(chr, 12))) // (chr>>12 & 0x3F) | 0x80
    let b2 = U16.or(0x80, U16.and(0x3F, U16.shr(chr, 6)))  // (chr>>6 & 0x3F)  | 0x80
    let b3 = U16.or(0x80, U16.and(0x3F, chr)) // (chr & 0x3F) | 0x80
    let buf = Buffer8.set(0#32, U16.to_u8(b0), buf)
    let buf = Buffer8.set(1#32, U16.to_u8(b1), buf)
    let buf = Buffer8.set(2#32, U16.to_u8(b2), buf)
    let buf = Buffer8.set(3#32, U16.to_u8(b3), buf)
    buf

