Lambda.reduce<n: Nat>(term: Lambda<n>): Lambda<n>
  case term {
    var: Lambda.var!(term.index)
    lam: Lambda.lam!(term.body)
    app: 
      case Lambda.reduce!(term.func) as func
      with term.argm : Lambda<func.n> {
        var:
          let func = Lambda.var!(func.index)
          let argm = term.argm
          Lambda.app!(func, argm)
        lam: 
          let body = Lambda.subst<Nat.succ(func.n), func.n>((i)
            case i with term.argm : Lambda<Nat.pred(i.lim)> {
              zero: term.argm
              succ: Lambda.var!(i.pred)
            }: Lambda(Nat.pred(i.lim))
          )(func.body)
          let body = Lambda.reduce!(body)
          body
        app:
          let func = Lambda.app!(func.func, func.argm)
          let argm = term.argm
          Lambda.app!(func, argm)
      }: Lambda<func.n>
  }!
