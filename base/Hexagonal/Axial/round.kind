// Round an Axial coordinate
Hexagonal.Axial.round(
  axial_x: F64,
  axial_y: F64
): Hexagonal.Axial

  let i = F64.to_i32
  let axial_z = (0.0 - axial_x) - axial_y

  let round_x = Hexagonal.Axial.aux.round_F64(axial_x)
  let round_y = Hexagonal.Axial.aux.round_F64(axial_y)
  let round_z = Hexagonal.Axial.aux.round_F64(axial_z)

  let diff_x  = Hexagonal.Axial.aux.abs_diff(axial_x, round_x)
  let diff_y  = Hexagonal.Axial.aux.abs_diff(axial_y, round_y)
  let diff_z  = Hexagonal.Axial.aux.abs_diff(axial_z, round_z)
  
  case F64.gtn(diff_x, diff_z) {
    true:
      case F64.gtn(diff_y, diff_x) {
        true: 
          let new_y = (0.0 - round_x) - round_z
          Hexagonal.Axial.new(i(round_x), i(new_y))
        false:
          let new_x = (0.0 - round_y) - round_z
          Hexagonal.Axial.new(i(new_x), i(round_y))
      }
    false:
      case F64.gtn(diff_y, diff_z) {
        true:
          let new_y = (0.0 - round_x) - round_z
          Hexagonal.Axial.new(i(round_x), i(new_y))
        false:
          Hexagonal.Axial.new(i(round_x), i(round_y))
      }
  }


// TODO: Rheidner
// Rounds a F64 number to the nearest integer
Hexagonal.Axial.aux.round_F64(n: F64): F64
  let half = 0.5
  let big_number = 1000.0 // TODO while F64.gtn, cmp and ltn is broken
  let n = n + big_number
  let result = Hexagonal.Axial.aux.floor(n + half)
  result - big_number

// TODO
Hexagonal.Axial.aux.floor(n: F64): F64
  I32.to_f64(F64.to_i32(n))

// TODO: Rheidner
// Rounds a F64 and get its absolute value
Hexagonal.Axial.aux.abs_diff(x: F64, y: F64): F64 // TODO while F64.abs doesnt exist
  case F64.gtn(x, y) {
    true: x - y
    false: y - x
  }
