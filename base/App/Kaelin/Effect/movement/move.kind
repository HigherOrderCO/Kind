App.Kaelin.Effect.movement.move: App.Kaelin.Effect<Unit>
  App.Kaelin.Effect { 
    get map = App.Kaelin.Effect.map.get
    get center = App.Kaelin.Effect.coord.get_center
    get target = App.Kaelin.Effect.coord.get_target
    let distance = I32.abs(App.Kaelin.Coord.distance(center, target))
    get cost = App.Kaelin.Effect.ap.cost(distance, center)
    let creature = App.Kaelin.Map.creature.get(center, map)
    case creature{
      none:
        App.Kaelin.Effect { return unit }
      some:
        new_creature = App.Kaelin.Tile.creature.change_ap(cost, creature.value)
        mod_map = App.Kaelin.Map.push(center, App.Kaelin.Map.Entity.creature(new_creature), map)
        key = App.Kaelin.Coord.Convert.axial_to_nat(center)
        tile = NatMap.get!(key, map)
        case tile { 
          none: 
            App.Kaelin.Effect { return unit }
          some: 
            if App.Kaelin.Map.is_occupied(target, map) then
              App.Kaelin.Effect { return unit }
            else
              new_map = App.Kaelin.Map.creature.swap(center, target, mod_map)
          App.Kaelin.Effect.map.set(new_map)
        }
    }
  }
