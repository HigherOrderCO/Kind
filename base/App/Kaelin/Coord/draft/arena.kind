App.Kaelin.Coord.draft.arena: Pair<NatMap<String>,NatMap<String>>
  
    
  let a = App.Kaelin.Coord.new(1,-2)
  let b = App.Kaelin.Coord.new(0,-1)
  let c = App.Kaelin.Coord.new(1,-1)
  let d = App.Kaelin.Coord.new(0, 0)
  let e = App.Kaelin.Coord.new(-1,1)
  let f = App.Kaelin.Coord.new(0, 1)
  let g = App.Kaelin.Coord.new(-1,2)

  let one = App.Kaelin.Coord.new(-1,0) // Team 1's edge
  let two = App.Kaelin.Coord.new(1, 0) // Team 2's edge

  let blue = List.map!!(App.Kaelin.Coord.draft.arena_go("blue"), [a,b,c,d,e,f,g,one])
  let red  = List.map!!(App.Kaelin.Coord.draft.arena_go("red"),  [a,b,c,d,e,f,g,two])

  let blue_map  = NatMap.new<String>
  let red_map   = NatMap.new<String>

  for coord in blue with blue_map:
    key = App.Kaelin.Coord.Convert.axial_to_nat(coord)
    NatMap.set!(key, "empty", blue_map)

  for coord in red with red_map:
    key = App.Kaelin.Coord.Convert.axial_to_nat(coord)
    NatMap.set!(key, "empty", red_map)
  
  {blue_map, red_map}

App.Kaelin.Coord.draft.arena_go(team: String, coord: App.Kaelin.Coord): App.Kaelin.Coord
  open coord
  map_size = U32.to_i32(App.Kaelin.Constants.map_size - 1)
  switch String.eql(team) {
    "blue": App.Kaelin.Coord.new(coord.i - map_size, coord.j)
    "red" : App.Kaelin.Coord.new(coord.i + map_size, coord.j)
  }default coord