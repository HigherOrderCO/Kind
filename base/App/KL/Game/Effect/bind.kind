App.KL.Game.Effect.bind<A: Type, B: Type>(
  effect: App.KL.Game.Effect<A>
  next: A -> App.KL.Game.Effect<B>
): App.KL.Game.Effect<B>

  //TODO: Verify problem with error result A and B
  (center, targets, board)
  case effect(center, targets, board) as result_a {
    err: App.KL.Game.Effect.Result.err<B>(result_a.message)
    new: case next(result_a.value)(result_a.center, targets, result_a.board) as result_b {
      err: App.KL.Game.Effect.Result.err<B>(result_b.message)
      new:
        center      = result_b.center
        value       = result_b.value
        map         = result_b.board
        indicators  = Hexagonal.Axial.Map.union!(result_a.indicators, result_b.indicators)
        ap_used     = result_a.ap_used + result_b.ap_used
        cemetery    = result_a.cemetery ++ result_b.cemetery
        description = App.KL.Game.Effect.bind.description_aux(result_a.description, result_b.description)
        App.KL.Game.Effect.Result.new<B>(value, center, map, indicators, ap_used, cemetery, description)
    }
  }

//Auxiliary effect so descriptions look cleaner
App.KL.Game.Effect.bind.description_aux(
  a: String
  b: String
): String
  
  case a b { 
    nil nil: ""
    nil cons: b
    cons nil: a 
    cons cons: a | "\n" | b
  }

    
