App.KL.Game.Effect.common.walk(
  distance: I32
  ap_cost: I32
): App.KL.Game.Effect<Unit>

  App.KL.Game.Effect {
    get center = App.KL.Game.Effect.coord.get_center
    get creature = App.KL.Game.Effect.board.creature.get(center)
    get target = App.KL.Game.Effect.coord.get_target
    get board = App.KL.Game.Effect.board.get
    without creature: App.KL.Game.Effect { return unit }
    let distance = App.KL.Game.Creature.Status.movement_range(distance, creature)
    let area = App.KL.Game.Areas.circle(center, distance)
    let tile = App.KL.Game.Tile.get(target, board)
    without tile: App.KL.Game.Effect { return unit }
    App.KL.Game.Effect { 
      let effect = tile@effect
      App.KL.Game.Effect.limit_range(distance)
      if Hexagonal.Axial.eql(center, target) then App.KL.Game.Effect.pass
      else App.KL.Game.Effect { 
        get movement = App.KL.Game.Effect.movement.move_to.target(false)
        if movement then App.KL.Game.Effect { 
          App.KL.Game.Effect.ap.use(ap_cost)
          case effect { 
            none:
              App.KL.Game.Effect { return unit }
            some:
              open effect.value as effect
              case effect.activation { 
                walking: App.KL.Game.Effect { 
                  effect.effect
                }
              }default App.KL.Game.Effect { return unit }
          }
        }
        else App.KL.Game.Effect.pass
      }
    }
  }
