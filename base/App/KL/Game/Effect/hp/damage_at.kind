App.KL.Game.Effect.hp.damage_at(
  dmg: I32,
): App.KL.Game.Effect.At<I32>
  (pos)

  App.KL.Game.Effect {
    get creature = App.KL.Game.Effect.board.creature.get(pos)
    get caster = App.KL.Game.Effect.board.creature.caster

  //Verifies if a creature is gonna block skills
    get block =  App.KL.Game.Effect { 
      case creature { 
        none: App.KL.Game.Effect { return false } 
        some:
          case caster { 
            none: App.KL.Game.Effect { return false } 
            some: App.KL.Game.Effect { return  App.KL.Game.Creature.Status.block.verifier(caster.value, creature.value) } // Affected -> Caster
          }
      }
    }

    //Verifies if a creature is protected
    get protected = App.KL.Game.Effect { case creature { none:  App.KL.Game.Effect { return false } some: App.KL.Game.Effect.status.protect.apply(creature.value, pos) }}

    case creature { 
      none: App.KL.Game.Effect { return +0#32 } 
      some: 
        // Verifies if the target is invulnerable, if can block
        let invul = App.KL.Game.Creature.Status.invulnerable.check(creature.value)
        if invul || block || protected then App.KL.Game.Effect { return +0#32 } 
        else case caster { 
          none: App.KL.Game.Effect { return +0#32 } 
          some: App.KL.Game.Effect { 
            let debuffer = App.KL.Game.Creature.Status.weaken.total(caster.value)
            let opposite = App.KL.Game.Creature.Status.opposite.check(creature.value)
            let minimum_damage = dmg - debuffer
            let max_debuff = if I32.lte(minimum_damage, 0) then 0 else minimum_damage
            let real_effect = if opposite then max_debuff else I32.neg(max_debuff)
            get real_dmg = App.KL.Game.Effect.hp.change_at(real_effect, pos)
            App.KL.Game.Effect.player_data.caster.add.damage(creature.value@player <> "", real_dmg, creature.value@hp + real_dmg)
            let damage = String.show_clean(I32.show(I32.neg(real_dmg)))
            App.KL.Game.Effect.description.add("Deal "| damage | " damage")
            return real_dmg 
          }
        }
    }
  }
