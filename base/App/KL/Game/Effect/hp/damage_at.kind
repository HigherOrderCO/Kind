App.KL.Game.Effect.hp.damage_at(
  dmg: I32,
): App.KL.Game.Effect.At<I32>
  (pos)

  App.KL.Game.Effect {
    get creature = App.KL.Game.Effect.board.creature.get(pos)
  //Verifies if a creature is set to be denied
    get block =  App.KL.Game.Effect { 
      get caster = App.KL.Game.Effect.board.creature.caster
      case creature { 
        none:
          App.KL.Game.Effect { return false } 
        some:
          let hero_name = creature.value@hero
          let hero_name = hero_name@name
          case caster { 
            none:
              App.KL.Game.Effect { return false } 
            some:
              App.KL.Game.Effect { return  App.KL.Game.Creature.Status.block.verifier(caster.value, hero_name) }
          }
      }
    }

    case creature { 
      none: 
        App.KL.Game.Effect { return +0#32 } 
      some: 
        let invul = App.KL.Game.Creature.Status.invulnerable.check(creature.value)
        if invul then
          App.KL.Game.Effect { return +0#32 } 
        else
          App.KL.Game.Effect { 
            if block then
              App.KL.Game.Effect { return +0#32 }
            else
              App.KL.Game.Effect { 
                let debuffer = App.KL.Game.Creature.Status.weaken.total(creature.value)
                get real_dmg = App.KL.Game.Effect.hp.change_at(I32.neg(dmg - debuffer), pos)
                let damage = String.show_clean(I32.show(I32.neg(real_dmg)))
                App.KL.Game.Effect.description.add("Deal "| damage | " damage")
                return real_dmg 
              }
          }
    }
  }
