App.KL.Game.Effect.movement.move_to(
  from: Hexagonal.Axial,
  to: Hexagonal.Axial,
  ignore: Bool
): App.KL.Game.Effect<Bool>

  App.KL.Game.Effect { 
    get board = App.KL.Game.Effect.board.get
    let from_creature = App.KL.Game.Board.Creature.get(from, board)
    let to_creature = App.KL.Game.Board.Creature.get(to, board)
    let to_tile = App.KL.Game.Tile.get(to, board)
    get movement_impairment = App.KL.Game.Effect.movement.movable(from_creature, ignore)
    without to_tile: App.KL.Game.Effect {
      return false
    }
    without movement_impairment: App.KL.Game.Effect {
      return false
    }
    without from_creature: App.KL.Game.Effect {
      return false
    }
    without to_creature: App.KL.Game.Effect {
        App.KL.Game.Effect { 
          App.KL.Game.Effect.board.creature.move(from, to)
          return true
        }
    }
    open to_creature
    open to_creature.hero
    without to_creature.hero.on_stepped: App.KL.Game.Effect {
      return false
    }
    if Hexagonal.Axial.eql(from, to) then App.KL.Game.Effect {
      return true
    } else App.KL.Game.Effect {
      to_creature.hero.on_stepped(from, to)
      return true
    }
  }

App.KL.Game.Effect.movement.move_to.target(
  ignore: Bool
): App.KL.Game.Effect<Bool>

  App.KL.Game.Effect { 
    get center = App.KL.Game.Effect.coord.get_center
    get target = App.KL.Game.Effect.coord.get_target
    App.KL.Game.Effect.movement.move_to(center, target, ignore)
  }
