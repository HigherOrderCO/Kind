type App.KL.Game.Skill {
	new(
  	name: String                        // the name of the skill
    delay: U64                          // skills with larger delay are called later
    frames: U64                         // how many ticks its animation takes
    range: U64                          // cast range
    pattern: App.KL.Game.Skill.Pattern  // pattern in which skill is cast
		effect: App.KL.Game.Effect<Unit>    // its in-game effect
    description: String
	)
}

// Gets the skill associated with a player/letter pair
App.KL.Game.Skill.get(
  player: String
  letter: Char
  game: App.KL.Game
): Maybe<App.KL.Game.Skill>
  open game
  Maybe {
    get player = game.players{player}
    get hero_id = player@hero_id
    get hero = App.KL.Game.Hero.get_by_id(hero_id)
    get skill = hero@skills{Char.to_string(letter)}
    return skill
  }

type App.KL.Game.Skill.Pattern {
  single
  vector
  multiple(areas: Nat)
  multiple_no_repeat(areas: Nat)
}

App.KL.Game.Skill.get_pattern(skill: App.KL.Game.Skill): Nat
  let pattern = skill@pattern
  case pattern {
    single  : 1
    vector  : 2
    multiple: pattern.areas
    multiple_no_repeat: pattern.areas
  }

App.KL.Game.Skill.can_repeat(skill: App.KL.Game.Skill): Bool
  let pattern = skill@pattern
  case pattern {
    multiple: true
  }default false