type App.KL.Game.Moment {
  initial(countdown: U64) // when stage is initiated, players can choose coordinate
  preparation(countdown: U64) // when players are casting their skills
  execution(
    casts: List<App.KL.Game.Cast>
    previous_casts: List<App.KL.Game.Cast>
    frame: U64
    coord: Maybe<Hexagonal.Axial>
    hits: App.KL.Game.Indicators
    ap_used: I32
    success: Either<String, Unit>
  ) // when casts are being executed and animated
}

App.KL.Game.Moment.get_player_used_ap(game: App.KL.Game): Maybe<Pair<String, I32>>
  case game@moment as moment {
    initial: none
    preparation: none
    execution: 
      case moment.casts {
        nil: none
        cons: some({moment.casts.head@player, moment.ap_used})
      }
  }


// TODO move this to another place?
// create board for preparation phase
// is only called once
// all it does is move players for its init_pos and remove initial coords
App.KL.Game.Moment.preparation.create_board(
  players: Map<App.KL.Game.Player>,
  blueprint: App.KL.Game.Board.Blueprint, 
  board: App.KL.Game.Board
): App.KL.Game.Board
  for user:player in players with board:
    App.KL.Game.Board.Player.set(user, player, board)
  
  for user:player in players with board:
    case player@init_pos {
      none: App.KL.Game.Moment.create_board.choose_coord(blueprint@bases, user, player, board)
      some: board
    }

  for coord:team in blueprint@initial with board:
    Hexagonal.Axial.Map.delete!(coord, board) // delete initial coordinates
  board

// choose a coordinate for players that didn't choose
// TODO: Improve?
App.KL.Game.Moment.create_board.choose_coord(
  coords: Hexagonal.Axial.Map<App.KL.Game.Team>, 
  user: String, 
  player: App.KL.Game.Player,
  board: App.KL.Game.Board
): App.KL.Game.Board

  let position = none :: Maybe<App.KL.Game.Board>
    for coord:team in coords with position:
      case position {
        none:
          if App.KL.Game.Board.is_occupied(coord, board) || Bool.not(player@team =? team) then
            none
          else
            some(App.KL.Game.Board.Player.set_initial(user, player, coord, board))
        some: position
      }
  case position {
    none: board
    some: position.value
  }
