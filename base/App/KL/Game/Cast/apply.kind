// Applies a cast, modifying the game state
App.KL.Game.Cast.apply(
  cast: App.KL.Game.Cast
  game: App.KL.Game
): App.KL.Game.Cast.Result
  open game
  open cast

  Maybe {
    get skill = App.KL.Game.Cast.get_skill(cast, game)
    get coord = App.KL.Game.Cast.get_coord(cast, game)
    get creature = App.KL.Game.Board.Creature.get(coord, game.board)
    let result = skill@effect(coord, cast@target, game@board)
    let is_stunned = App.KL.Game.Creature.Status.stun.check(creature) // Verifies if the creature is stunned
    let is_silenced = App.KL.Game.Creature.Status.silence.check(creature) // Verifies if the creature is silenced
    let is_rooted = App.KL.Game.Creature.Status.root.check(creature) // Verifies if the creature is rooted
    let is_walk = String.eql(skill@name, "Walk") // Verifies if its walk

    if is_stunned then
      some(App.KL.Game.Cast.Result.failure("stun"))
    else 
      if is_rooted then
        if is_walk then // A silenced creature should be able to Walk
          some(App.KL.Game.Cast.Result.failure("rooted"))
        else
          case result {
            err: some(App.KL.Game.Cast.Result.failure(result.message))
            new: Maybe {
              let game = game@board <- result.board
              let game = game@cemetery <- game@cemetery ++ result.cemetery
              return App.KL.Game.Cast.Result.success(game, result.indicators, result.ap_used)
            }
          }
      else
        if is_silenced then
          if is_walk then
          case result {
            err: some(App.KL.Game.Cast.Result.failure(result.message))
            new: Maybe {
              let game = game@board <- result.board
              let game = game@cemetery <- game@cemetery ++ result.cemetery
              return App.KL.Game.Cast.Result.success(game, result.indicators, result.ap_used)
            }
          }
          else
            some(App.KL.Game.Cast.Result.failure("silenced"))
        else
          case result {
            err: some(App.KL.Game.Cast.Result.failure(result.message))
            new: Maybe {
              let game = game@board <- result.board
              let game = game@cemetery <- game@cemetery ++ result.cemetery
              return App.KL.Game.Cast.Result.success(game, result.indicators, result.ap_used)
            }
          }
  } <> App.KL.Game.Cast.Result.failure("invalid cast")
