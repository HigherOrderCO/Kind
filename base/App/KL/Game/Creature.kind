type App.KL.Game.Creature {
  new(
    player: Maybe<String>
    category: App.KL.Game.Creature.Category
    team: App.KL.Game.Team
    status: List<App.KL.Game.Creature.Status>
    hp: I32
  )
}

type App.KL.Game.Creature.Category {
  hero(
    data: App.KL.Game.Hero
    ap: I32
    id: Nat
  )
  summon(
    data: App.KL.Game.Summon
  )
}

type App.KL.Game.Creature.Status {
  block(cast_data: Pair<Char, String>, id: String, duration: I32, caster: String)
  //Damage Over Time
  dot(cast_data: Pair<Char, String>, id: String, duration: I32, stack: I32, amount: I32)
  haste(cast_data: Pair<Char, String>, duration : I32, amount: I32)
  //Heal Over Time
  hot(cast_data: Pair<Char, String>, id: String, duration: I32, stack: I32, amount: I32)
  invulnerable(cast_data: Pair<Char, String>, id: String, duration: I32)
  opposite(cast_data: Pair<Char, String>, duration: I32)
  protect(cast_data: Pair<Char, String>, duration: I32, amount: I32)
  root(cast_data: Pair<Char, String>, duration: I32)
  shield(cast_data: Pair<Char, String>, id: String, duration: I32, amount: I32)
  silence(cast_data: Pair<Char, String>, duration: I32)
  slow(cast_data: Pair<Char, String>, duration: I32, amount: I32)
  stun(cast_data: Pair<Char, String>, duration: I32)
  weaken(cast_data: Pair<Char, String>, duration : I32, amount: I32)
}


App.KL.Game.Creature.Status.get_effect(
  status: App.KL.Game.Creature.Status
): App.KL.Game.Effect.At<I32>
  
  case status { 
    dot: App.KL.Game.Effect.status.dot.apply(status.cast_data, status.id, status.duration, status.amount)
    hot: App.KL.Game.Effect.status.hot.apply(status.cast_data, status.id, status.duration, status.amount)
  } default (pos)App.KL.Game.Effect { return +0#32 }
 
