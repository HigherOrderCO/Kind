App.KL.Game.Hero.Kenlua.hero: App.KL.Game.Hero
  let name = "Kenlua"

  let draw = (pose)
    let idle_spr = VoxBox.assets.fe7.assassin_sword.1
    let walk_ani = [
      VoxBox.assets.fe7.assassin_sword.1
      VoxBox.assets.fe7.assassin_sword.2
      VoxBox.assets.fe7.assassin_sword.3
      VoxBox.assets.fe7.assassin_sword.4
      VoxBox.assets.fe7.assassin_sword.39
      VoxBox.assets.fe7.assassin_sword.40
      VoxBox.assets.fe7.assassin_sword.41
      VoxBox.assets.fe7.assassin_sword.42
      VoxBox.assets.fe7.assassin_sword.43
      VoxBox.assets.fe7.assassin_sword.44
      VoxBox.assets.fe7.assassin_sword.45
      VoxBox.assets.fe7.assassin_sword.46
    ]
    let dash_ani = [
      VoxBox.assets.fe7.assassin_sword.1
      VoxBox.assets.fe7.assassin_sword.2
      VoxBox.assets.fe7.assassin_sword.3
      VoxBox.assets.fe7.assassin_sword.4
      VoxBox.assets.fe7.assassin_sword.5
      VoxBox.assets.fe7.assassin_sword.6
      VoxBox.assets.fe7.assassin_sword.7
      VoxBox.assets.fe7.assassin_sword.8
      VoxBox.assets.fe7.assassin_sword.9
      VoxBox.assets.fe7.assassin_sword.10
      VoxBox.assets.fe7.assassin_sword.11
      VoxBox.assets.fe7.assassin_sword.12
      VoxBox.assets.fe7.assassin_sword.13
      VoxBox.assets.fe7.assassin_sword.14
      VoxBox.assets.fe7.assassin_sword.15
      VoxBox.assets.fe7.assassin_sword.16
      VoxBox.assets.fe7.assassin_sword.17
      VoxBox.assets.fe7.assassin_sword.18
      VoxBox.assets.fe7.assassin_sword.19
      VoxBox.assets.fe7.assassin_sword.20
      VoxBox.assets.fe7.assassin_sword.21
      VoxBox.assets.fe7.assassin_sword.22
      VoxBox.assets.fe7.assassin_sword.23
      VoxBox.assets.fe7.assassin_sword.24
      VoxBox.assets.fe7.assassin_sword.25
      VoxBox.assets.fe7.assassin_sword.26
      VoxBox.assets.fe7.assassin_sword.27
      VoxBox.assets.fe7.assassin_sword.28
      VoxBox.assets.fe7.assassin_sword.29
      VoxBox.assets.fe7.assassin_sword.30
      VoxBox.assets.fe7.assassin_sword.31
      VoxBox.assets.fe7.assassin_sword.32
      VoxBox.assets.fe7.assassin_sword.33
      VoxBox.assets.fe7.assassin_sword.34
      VoxBox.assets.fe7.assassin_sword.35
      VoxBox.assets.fe7.assassin_sword.36
      VoxBox.assets.fe7.assassin_sword.37
      VoxBox.assets.fe7.assassin_sword.38
      VoxBox.assets.fe7.assassin_sword.39
      VoxBox.assets.fe7.assassin_sword.40
      VoxBox.assets.fe7.assassin_sword.41
      VoxBox.assets.fe7.assassin_sword.42
      VoxBox.assets.fe7.assassin_sword.43
      VoxBox.assets.fe7.assassin_sword.44
      VoxBox.assets.fe7.assassin_sword.45
      VoxBox.assets.fe7.assassin_sword.46
      VoxBox.assets.fe7.assassin_sword.47
    ]
    let slash_ani = [
      VoxBox.assets.fe7.assassin_sword_crit.1
      VoxBox.assets.fe7.assassin_sword_crit.2
      VoxBox.assets.fe7.assassin_sword_crit.3
      VoxBox.assets.fe7.assassin_sword_crit.4
      VoxBox.assets.fe7.assassin_sword_crit.5
      VoxBox.assets.fe7.assassin_sword_crit.6
      VoxBox.assets.fe7.assassin_sword_crit.7
      VoxBox.assets.fe7.assassin_sword_crit.8
      VoxBox.assets.fe7.assassin_sword_crit.9
      VoxBox.assets.fe7.assassin_sword_crit.10
      VoxBox.assets.fe7.assassin_sword_crit.11
      VoxBox.assets.fe7.assassin_sword_crit.12
      VoxBox.assets.fe7.assassin_sword_crit.13
      VoxBox.assets.fe7.assassin_sword_crit.14
      VoxBox.assets.fe7.assassin_sword_crit.15
      VoxBox.assets.fe7.assassin_sword_crit.16
      VoxBox.assets.fe7.assassin_sword_crit.17
      VoxBox.assets.fe7.assassin_sword_crit.18
      VoxBox.assets.fe7.assassin_sword_crit.19
      VoxBox.assets.fe7.assassin_sword_crit.20
      VoxBox.assets.fe7.assassin_sword_crit.21
      VoxBox.assets.fe7.assassin_sword_crit.22
      VoxBox.assets.fe7.assassin_sword_crit.23
      VoxBox.assets.fe7.assassin_sword_crit.24
      VoxBox.assets.fe7.assassin_sword_crit.25
      VoxBox.assets.fe7.assassin_sword_crit.26
      VoxBox.assets.fe7.assassin_sword_crit.27
      VoxBox.assets.fe7.assassin_sword_crit.28
      VoxBox.assets.fe7.assassin_sword_crit.29
      VoxBox.assets.fe7.assassin_sword_crit.30
      VoxBox.assets.fe7.assassin_sword_crit.31
      VoxBox.assets.fe7.assassin_sword_crit.32
      VoxBox.assets.fe7.assassin_sword_crit.33
      VoxBox.assets.fe7.assassin_sword_crit.34
      VoxBox.assets.fe7.assassin_sword_crit.35
      VoxBox.assets.fe7.assassin_sword_crit.36
      VoxBox.assets.fe7.assassin_sword_crit.37
      VoxBox.assets.fe7.assassin_sword_crit.38
      VoxBox.assets.fe7.assassin_sword_crit.39
      VoxBox.assets.fe7.assassin_sword_crit.40
      VoxBox.assets.fe7.assassin_sword_crit.41
      VoxBox.assets.fe7.assassin_sword_crit.42
      VoxBox.assets.fe7.assassin_sword_crit.43
      VoxBox.assets.fe7.assassin_sword_crit.44
      VoxBox.assets.fe7.assassin_sword_crit.45
      VoxBox.assets.fe7.assassin_sword_crit.46
      VoxBox.assets.fe7.assassin_sword_crit.47
      VoxBox.assets.fe7.assassin_sword_crit.48
      VoxBox.assets.fe7.assassin_sword_crit.49
      VoxBox.assets.fe7.assassin_sword_crit.50
      VoxBox.assets.fe7.assassin_sword_crit.51
      VoxBox.assets.fe7.assassin_sword_crit.52
      VoxBox.assets.fe7.assassin_sword_crit.53
      VoxBox.assets.fe7.assassin_sword_crit.54
      VoxBox.assets.fe7.assassin_sword_crit.55
      VoxBox.assets.fe7.assassin_sword_crit.56
      VoxBox.assets.fe7.assassin_sword_crit.57
      VoxBox.assets.fe7.assassin_sword_crit.58
      VoxBox.assets.fe7.assassin_sword_crit.59
      VoxBox.assets.fe7.assassin_sword_crit.60
      VoxBox.assets.fe7.assassin_sword_crit.61
      VoxBox.assets.fe7.assassin_sword_crit.62
      VoxBox.assets.fe7.assassin_sword_crit.63
      VoxBox.assets.fe7.assassin_sword_crit.64
      VoxBox.assets.fe7.assassin_sword_crit.65
      VoxBox.assets.fe7.assassin_sword_crit.66
      VoxBox.assets.fe7.assassin_sword_crit.67
      VoxBox.assets.fe7.assassin_sword_crit.68
    ]
    let stare_spri = VoxBox.assets.fe7.assassin_sword_crit.4
    case pose {
      idle:
        {none, idle_spr}
      cast:
        switch String.eql(pose.skill@name) {
          "Walk": 
            let coord = switch U64.lte(pose.frame) {
              3: pose.center // 3
            } default pose.target
            {some(coord), walk_ani[U64.to_nat(pose.frame)] <> idle_spr}
          "Dash": 
            let coord = switch U64.lte(pose.frame) {
              10: pose.center
            } default pose.target
            {some(coord), dash_ani[U64.to_nat(pose.frame)] <> idle_spr}
          "Stare":
            {none, stare_spri}
          "Slash":
            let coord = switch U64.lte(pose.frame) {
              22: pose.center
              59: pose.target
            } default pose.center
            {some(coord), slash_ani[U64.to_nat(pose.frame)] <> idle_spr}
        } default {none, idle_spr}
    }
    //App.KL.Game.Hero.Kenlua.Assets.vbox_idle

  let picture = (bool, time)
    App.KL.Game.Hero.Kenlua.Assets.base64_idle

  let max_hp = 16 :: I32

  let max_ap = 3 :: I32

  let skills = {
    "X": App.KL.Game.Skill.new("Walk", 500, 12, 2, App.KL.Game.Effect.common.walk(2, 1))
    "Q": App.KL.Game.Skill.new("Dash", 200, 47, 2, App.KL.Game.Hero.Kenlua.hero.Skills.dash(2, 2, 1))
    "W": App.KL.Game.Skill.new("Stare", 520, 48, 0, App.KL.Game.Hero.Kenlua.hero.Skills.stare(10))
    "E": App.KL.Game.Skill.new("Slash", 800, 68, 1, App.KL.Game.Hero.Kenlua.hero.Skills.slash(1, 20, 1))
  }

  let on_stepped = none

  App.KL.Game.Hero.new(name, draw, picture, max_hp, max_ap, skills, on_stepped)


// SKILLS

App.KL.Game.Hero.Kenlua.hero.Skills.dash(range: I32, dmg: I32, ap_cost: I32): App.KL.Game.Effect<Unit>

  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range(range)
    get center = App.KL.Game.Effect.coord.get_center
    get target = App.KL.Game.Effect.coord.get_target
    get board  = App.KL.Game.Effect.board.get
    let coords = App.KL.Game.Areas.ring(target, 1)
    App.KL.Game.Effect.ap.use(ap_cost)
    get moved = App.KL.Game.Effect.movement.move_to(center, target, false)
    if moved then App.KL.Game.Effect {
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red, coords)
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue, [target])
      App.KL.Game.Effect.hp.damage_at(2, target)
      App.KL.Game.Effect.area!(App.KL.Game.Effect.At.enemy!(App.KL.Game.Effect.hp.damage_at(dmg)), coords)
      return unit
    } else App.KL.Game.Effect.fail
  }

App.KL.Game.Hero.Kenlua.hero.Skills.stare(shield_value: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    get target_creature = App.KL.Game.Effect.board.creature.target
    get target = App.KL.Game.Effect.coord.get_target
    get caster = App.KL.Game.Effect.board.creature.caster
    get center = App.KL.Game.Effect.coord.get_center
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue, [center])
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red, [target])
    without caster: App.KL.Game.Effect.pass
    without target_creature: App.KL.Game.Effect.pass
    if App.KL.Game.Team.eql(target_creature@team, caster@team) then
      App.KL.Game.Effect.pass
    else App.KL.Game.Effect {
      App.KL.Game.Effect.status.shield.add("Kenlua", 0, shield_value, center)
      return unit
    }
  }

App.KL.Game.Hero.Kenlua.hero.Skills.slash(range: I32, dmg: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect { 
    get target  = App.KL.Game.Effect.coord.get_target
    get center  = App.KL.Game.Effect.coord.get_center
    App.KL.Game.Effect.ap.use(ap_cost)
    App.KL.Game.Effect.limit_range(range)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue, [center])
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red, [target])
    App.KL.Game.Effect.At.enemy!(App.KL.Game.Effect.hp.damage_at(dmg), target)
    return unit
  }
