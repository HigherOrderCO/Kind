App.KL.Game.Hero.Flina.hero: App.KL.Game.Hero
  let name = "Flina"

  let draw = (pose)
    {none, App.KL.Game.Hero.Flina.Assets.vbox_idle}

  let picture = (bool, time)
    App.KL.Game.Hero.Flina.Assets.base64_idle

  let max_hp = 10 :: I32

  let max_ap = 3 :: I32

  let skills = {
    "X": App.KL.Game.Skill.new("Walk", 500, 12, 2, App.KL.Game.Skill.Pattern.single, App.KL.Game.Effect.common.walk(2, 1),
    "Walk to another tile within 2 range from " | name |".")

    "Q": App.KL.Game.Skill.new("Haste", 320, 48, 32, App.KL.Game.Skill.Pattern.single, App.KL.Game.Hero.Flina.Skill.Haste(32, 1, 2, 1),
    "Flina grants haste to an ally, increasing their movement.")

    "W": App.KL.Game.Skill.new("Heal", 330, 48, 32, App.KL.Game.Skill.Pattern.vector, App.KL.Game.Hero.Flina.Skill.Heal(32, 2, 1),
    "Flina restores Health Points for all allies in the area.")

    "E": App.KL.Game.Skill.new("Dampen", 350, 48, 32, App.KL.Game.Skill.Pattern.vector, App.KL.Game.Hero.Flina.Skill.Dampen(32, 3, 2, 2),
    "Flina weakens all enemies in an area, reducing all damage dealt by them for 2 turns.")

    "R": App.KL.Game.Skill.new("Flight", 950, 48, 32, App.KL.Game.Skill.Pattern.single, App.KL.Game.Effect.common.walk(32, 3),
    "After a long delay, Flina flies to any place in the battlefield.")
  }

  let on_stepped = none

  let description = "Flina is a resistant warrior with several different crowd control skills."

  App.KL.Game.Hero.new(name, draw, picture, max_hp, max_ap, skills, on_stepped, description)


// SKILLS

App.KL.Game.Hero.Flina.Skill.Haste(range: I32, power: I32, duration: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range(range)
    App.KL.Game.Effect.ap.use(ap_cost)
    get target = App.KL.Game.Effect.coord.get_target
    get center = App.KL.Game.Effect.coord.get_center
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_fill, [target])
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_fill, [center])
    let ally = App.KL.Game.Effect.At.ally!
    let eff = App.KL.Game.Effect.status.haste.add(duration, power)
    App.KL.Game.Effect.area!(ally(eff), [target])
    return unit
  }

App.KL.Game.Hero.Flina.Skill.Heal(range: I32, power: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range_vector(range)
    App.KL.Game.Effect.ap.use(ap_cost)
    get center = App.KL.Game.Effect.coord.get_center
    get vector = App.KL.Game.Effect.coord.get_vector
    let {start, direction} = vector
    without direction: App.KL.Game.Effect.fail("Direction not selected")
    App.KL.Game.Effect {
      let area   = App.KL.Game.Areas.triangle(start, direction)
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_fill, area)
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_fill, [center])
      let ally = App.KL.Game.Effect.At.ally!
      let eff = App.KL.Game.Effect.hp.heal_at(power)
      App.KL.Game.Effect.area!(ally(eff), area)
      return unit
    }
  }

App.KL.Game.Hero.Flina.Skill.Dampen(range: I32, power: I32, duration: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range_vector(range)
    App.KL.Game.Effect.ap.use(ap_cost)
    get center = App.KL.Game.Effect.coord.get_center
    get vector = App.KL.Game.Effect.coord.get_vector
    let {start, direction} = vector
    without direction: App.KL.Game.Effect.fail("Direction not selected")
    App.KL.Game.Effect {
      let area   = App.KL.Game.Areas.triangle(start, direction)
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_fill, area)
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_fill, [center])
      let enemy = App.KL.Game.Effect.At.enemy!
      let eff = App.KL.Game.Effect.status.weaken.add(duration, power)
      App.KL.Game.Effect.area!(enemy(eff), area)
      return unit
    }
  }