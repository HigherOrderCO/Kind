App.KL.Game.Hero.Flina.hero: App.KL.Game.Hero
  let name = "Flina"

  let vbox_img = (pose)
    {none, App.KL.Game.Hero.Flina.Assets.vbox_img}

  let b64_portrait = (bool, time)
    App.KL.Game.Hero.Flina.Assets.b64_portrait

  let b64_img = (bool, time)
    App.KL.Game.Hero.Flina.Assets.b64_img

  let height = 40 :: I32

  let draw = App.KL.Game.Entity.Draw.new(vbox_img, b64_portrait, b64_img, height)

  let max_hp = 10 :: I32

  let max_ap = 3 :: I32

  let skills = {
    "X": App.KL.Game.Skill.walk(2, name)

    "Q": App.KL.Game.Skill.new(
      "Haste", 320, 48,
      (board, center, targets) Hexagonal.Axial.range(center, 32),
      App.KL.Game.Skill.Pattern.single,
      App.KL.Game.Hero.Flina.Skill.Haste(32, 1, 2, 1),
      "Flina grants haste to an ally, increasing their movement.",
      App.KL.Game.Cursor.heal
    )

    "W": App.KL.Game.Skill.new(
      "Heal", 330, 48,
      (board, center, targets) Hexagonal.Axial.range(center, 32),
      App.KL.Game.Skill.Pattern.vector,
      App.KL.Game.Hero.Flina.Skill.Heal(32, 2, 1),
      "Flina restores Health Points for all allies in the area.",
      App.KL.Game.Cursor.heal
    )

    "E": App.KL.Game.Skill.new(
      "Protect", 350, 48,
      (board, center, targets) Hexagonal.Axial.range(center, 32),
      App.KL.Game.Skill.Pattern.vector,
      App.KL.Game.Hero.Flina.Skill.Dampen(32, 2, 2, 1),
      "Flina weakens all enemies in an area, reducing all damage dealt by them for 2 turns.",
      App.KL.Game.Cursor.heal
    )

    "R": App.KL.Game.Skill.new(
      "Flight", 950, 48,
      (board, center, targets) Hexagonal.Axial.range(center, 32),
      App.KL.Game.Skill.Pattern.single,
      App.KL.Game.Effect.common.walk(32, 3),
      "After a long delay, Flina flies to any place in the battlefield.",
      App.KL.Game.Cursor.heal
    )
  }

   let attributes =
    App.KL.Game.Hero.Attributes.set(
      0 // Damage
      1 // Resistance
      5 // Mobility
      5 // Range
      5 // Utility
      3 // Difficulty
  )

  let role = App.KL.Game.Hero.Role.support

  let description = "Flina is a fragile high ranged support with several different skills to help her allies, or to disrupt her enemies."

  App.KL.Game.Hero.new(name, draw, max_hp, max_ap, skills, attributes, role, description)


// SKILLS

App.KL.Game.Hero.Flina.Skill.Haste(range: I32, power: I32, duration: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range(range)
    App.KL.Game.Effect.ap.use(ap_cost)
    get target = App.KL.Game.Effect.coord.get_target
    get center = App.KL.Game.Effect.coord.get_center
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.green_fill, [target])
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_fill, [center])
    let ally = App.KL.Game.Effect.At.ally!
    let eff = App.KL.Game.Effect.status.haste.add(duration, power)
    App.KL.Game.Effect.area!(ally(eff), [target])
    return unit
  }

App.KL.Game.Hero.Flina.Skill.Heal(range: I32, power: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range_vector(range)
    App.KL.Game.Effect.ap.use(ap_cost)
    get center = App.KL.Game.Effect.coord.get_center
    get vector = App.KL.Game.Effect.coord.get_vector
    let {start, direction} = vector
    without direction: App.KL.Game.Effect.fail("Direction not selected")
    App.KL.Game.Effect {
      let area   = App.KL.Game.Areas.triangle(start, direction)
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.green_fill, area)
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_fill, [center])
      let ally = App.KL.Game.Effect.At.ally!
      let eff = App.KL.Game.Effect.hp.heal_at(power)
      App.KL.Game.Effect.area!(ally(eff), area)
      return unit
    }
  }

App.KL.Game.Hero.Flina.Skill.Dampen(range: I32, duration: I32, amount: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range_vector(range)
    App.KL.Game.Effect.ap.use(ap_cost)
    get center = App.KL.Game.Effect.coord.get_center
    get vector = App.KL.Game.Effect.coord.get_vector
    let {start, direction} = vector
    without direction: App.KL.Game.Effect.fail("Direction not selected")
    App.KL.Game.Effect {
      let area   = App.KL.Game.Areas.triangle(start, direction)
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_fill, area)
      App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_fill, [center])
      let ally = App.KL.Game.Effect.At.ally!
      ////original effect
      let eff = App.KL.Game.Effect.status.protect.add(duration, amount)
      App.KL.Game.Effect.area!(ally(eff), area)
      return unit
    }
  }
