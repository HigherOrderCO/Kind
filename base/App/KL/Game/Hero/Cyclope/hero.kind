App.KL.Game.Hero.Cyclope.hero: App.KL.Game.Hero
  let name = "Cyclope"

  let draw = (pose)
    {none, App.KL.Game.Hero.Cyclope.Assets.vbox_idle}

  let picture = (bool, time)
    App.KL.Game.Hero.Cyclope.Assets.base64_idle

  let max_hp = 40 :: I32

  let max_ap = 3 :: I32

  let walk_range = {2,2} ::Pair<U64, I32>


  let skills = {
    "X": App.KL.Game.Skill.new("Walk", 500, 8, walk_range@fst, App.KL.Game.Skill.Pattern.single,App.KL.Game.Effect.common.walk(walk_range@snd, 1),
    "Walk to another tile within 2 range from " | name |".")

    "Q": App.KL.Game.Skill.new("Empathy",280, 48, 0, App.KL.Game.Skill.Pattern.single, App.KL.Game.Hero.Cyclope.hero.Skills.empathy(2, 1, 10, 1),
    "Cyclope sacrifices 4 Health to provide 10 Shield Points to nearby allies.")

    "W": App.KL.Game.Skill.new("Revenge", 480, 48, 1, App.KL.Game.Skill.Pattern.single, App.KL.Game.Hero.Cyclope.hero.Skills.revenge(1, 1),
    "Cyclope deals damage to an enemy equal to half of his missing Health Points.")

    "E": App.KL.Game.Skill.new("Ground Slam", 800, 48, 0, App.KL.Game.Skill.Pattern.single, App.KL.Game.Hero.Cyclope.hero.Skills.ground_slam(2, 2, 2),
    "Cyclope stomps the ground, rooting all enemies within 2 tiles.")
  }

  let on_stepped = none

  let description = "Cyclope is a resistant warrior. He can either protect his allies with his own life or damage enemies around him."

  App.KL.Game.Hero.new(name, draw, picture, max_hp, max_ap, skills, on_stepped, description)


// SKILLS

App.KL.Game.Hero.Cyclope.hero.Skills.empathy(dmg_on_self: I32, duration: I32, shield_value: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect { 
    get center = App.KL.Game.Effect.coord.get_center
    get target = App.KL.Game.Effect.coord.get_target
    let area = App.KL.Game.Areas.ring(center, 1)
    App.KL.Game.Effect.ap.use(ap_cost)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.green_fill, area)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_line, [center])
    App.KL.Game.Effect.hp.damage_at(dmg_on_self, center)
    let ally = App.KL.Game.Effect.At.ally!
    let shield = App.KL.Game.Effect.status.shield.add("Empathy", duration, shield_value)
    App.KL.Game.Effect.area!(ally(shield), area)
    return unit
  }

App.KL.Game.Hero.Cyclope.hero.Skills.ground_slam(radius: I32 duration: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect { 
    get center = App.KL.Game.Effect.coord.get_center  
    App.KL.Game.Effect.ap.use(ap_cost)
    let area = App.KL.Game.Areas.ring(center, radius)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_line, area)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_line, [center])
    App.KL.Game.Effect.area!(App.KL.Game.Effect.status.root.add(duration), area)
    return unit
  }

App.KL.Game.Hero.Cyclope.hero.Skills.revenge(range: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
      App.KL.Game.Effect.limit_range(range)
      App.KL.Game.Effect.ap.use(ap_cost)
      get map = App.KL.Game.Effect.board.get
      get center = App.KL.Game.Effect.coord.get_center
      get target = App.KL.Game.Effect.coord.get_target
      let creature = App.KL.Game.Board.Creature.get(center, map)
      without creature: App.KL.Game.Effect.pass
        App.KL.Game.Effect { 
          let hero = creature@hero
          let missing_hp = hero@max_hp - creature@hp
          let dmg = missing_hp / 2
          App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_line, [target])
          App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_line, [center])
          App.KL.Game.Effect.At.ally!(App.KL.Game.Effect.hp.damage_at(dmg), target)
          return unit
        }
  }
