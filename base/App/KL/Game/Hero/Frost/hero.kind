App.KL.Game.Hero.Frost.hero: App.KL.Game.Hero
  let name = "Frost"

  let draw = (pose)
    {none, App.KL.Game.Hero.Frost.Assets.vbox_idle}

  let picture = (bool, time)
    App.KL.Game.Hero.Frost.Assets.base64_idle

  let max_hp = 35 :: I32

  let max_ap = 3 :: I32

  let skills = {
    "X": App.KL.Game.Skill.new("Walk", 500, 12, 2, App.KL.Game.Effect.common.walk(2, 1))
    "Q": App.KL.Game.Skill.new("Ravenous Bite", 400, 48, 1, App.KL.Game.Hero.Frost.Skills.ravenous_bite(3, 2))
    "W": App.KL.Game.Skill.new("Summon Wall", 100, 48, 5, App.KL.Game.Hero.Frost.Skills.summon_wall(5, 1))
    "E": App.KL.Game.Skill.new("Taunt", 700, 48, 0, App.KL.Game.Hero.Frost.Skills.taunt(2, 1))
  }

  let on_stepped = none

  App.KL.Game.Hero.new(name, draw, picture, max_hp, max_ap, skills, none)


// SKILLS

App.KL.Game.Hero.Frost.Skills.summon_wall(range: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range(range)
    get target = App.KL.Game.Effect.coord.get_target
    get center = App.KL.Game.Effect.coord.get_center
    get board = App.KL.Game.Effect.board.get
    App.KL.Game.Effect.ap.use(ap_cost)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red, [target])
    if App.KL.Game.Board.is_occupied(target, board) then
      App.KL.Game.Effect.pass
    else
      let wall = App.KL.Game.Creature.new(none, App.KL.Game.Hero.Frost.hero.wall, App.KL.Game.Team.neutral, [], 0, 0)
      App.KL.Game.Effect.board.summon(target, wall)
  }

App.KL.Game.Hero.Frost.Skills.taunt(area: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.ap.use(ap_cost)
    get center = App.KL.Game.Effect.coord.get_center
    let area = App.KL.Game.Areas.ring(center, area)
    App.KL.Game.Effect.ap.use(ap_cost)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red, area)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue, [center])
    let enemy = App.KL.Game.Effect.At.enemy!
    let pull = App.KL.Game.Effect.movement.pull_at(false)
    App.KL.Game.Effect.area!(enemy(pull), area)
    return unit
  }

App.KL.Game.Hero.Frost.hero.wall: App.KL.Game.Hero
  let name = "Frost_wall"
  let draw = (pose) {none, App.KL.Game.Field.Elements.rock_11_0}
  let picture = (bool, time) App.KL.Game.Hero.Frost.Assets.base64_idle
  let max_hp = 12 :: I32
  let max_ap = 0 :: I32
  let skills = {}
  let on_stepped = some((from,to) App.KL.Game.Effect { return unit })
  App.KL.Game.Hero.new(name, draw, picture, max_hp, max_ap, skills, on_stepped)

App.KL.Game.Hero.Frost.Skills.ravenous_bite(dmg: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect { 
    App.KL.Game.Effect.ap.use(ap_cost)
    get target = App.KL.Game.Effect.coord.get_target
    get center = App.KL.Game.Effect.coord.get_center
    let clamp = Hexagonal.Axial.clamp(1, center, target)
    let area = App.KL.Game.Areas.semi_circle(center, clamp)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red, area)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue, [center])
    let enemy = App.KL.Game.Effect.At.enemy!
    let eff = App.KL.Game.Effect.hp.damage_at(dmg)
    App.KL.Game.Effect.area!(enemy(eff), area)
    return unit
  }
