App.KL.Game.Hero.Croni.hero: App.KL.Game.Hero
  let name = "Croni"

  let draw = (pose)
    {none, App.KL.Game.Hero.Croni.Assets.vbox_idle}

  let picture = (bool, time)
    App.KL.Game.Hero.Croni.Assets.base64_idle

  let max_hp = 12 :: I32

  let max_ap = 3 :: I32

  let walk_range = {2,2} ::Pair<U64, I32>
  let flux_range = {10,10}::Pair<U64, I32>
  let trap_range = {10,10} ::Pair<U64, I32>
  let void_range = {8,8} ::Pair<U64, I32>

  let skills = {
    "X": App.KL.Game.Skill.new("Walk", 500, 8, walk_range@fst, App.KL.Game.Skill.Pattern.single, App.KL.Game.Effect.common.walk(walk_range@snd, 1),
    "Walk to another tile within 2 range from " | name |".")

    "Q": App.KL.Game.Skill.new("Flux", 860, 48, trap_range@fst, App.KL.Game.Skill.Pattern.single, App.KL.Game.Hero.Croni.hero.Skills.flux(trap_range@snd, 12, 1), 
    "Croni casts a targeted dark flux, dealing 12 damage in a single area.")

    "W": App.KL.Game.Skill.new("Trap", 150, 24, flux_range@fst, App.KL.Game.Skill.Pattern.multiple_no_repeat(2), App.KL.Game.Hero.Croni.hero.Skills.trap(flux_range@snd, 1), 
    "Croni summons a Trap that roots when stepped on.")

    "E": App.KL.Game.Skill.new("Void", 880, 24, void_range@fst, App.KL.Game.Skill.Pattern.single, App.KL.Game.Hero.Croni.hero.Skills.void(void_range@snd, 1),
    "Croni summons a Void that blocks movement. Can be reactivated to root around it.")

  }

  let on_stepped = none

  let description = "Croni is a fragile mage with slow skills that deal high damage from afar."

  App.KL.Game.Hero.new(name, draw, picture, max_hp, max_ap, skills, on_stepped, description)


// SKILLS

App.KL.Game.Hero.Croni.hero.Skills.trap(range: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range(range)
    get targets = App.KL.Game.Effect.coord.get_targets
    get center  = App.KL.Game.Effect.coord.get_center
    get caster  = App.KL.Game.Effect.board.creature.caster
    get board   = App.KL.Game.Effect.board.get
    let team    = case caster { none: App.KL.Game.Team.neutral, some: caster.value@team }
    App.KL.Game.Effect.ap.use(ap_cost)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_fill, targets)
    let trap = App.KL.Game.Creature.new(none, App.KL.Game.Hero.Croni.hero.trap, team, [], App.KL.Game.Hero.Croni.hero.trap@max_hp, App.KL.Game.Hero.Croni.hero.trap@max_ap)
    App.KL.Game.Effect.area!(App.KL.Game.Effect.board.summon(trap), targets)
    return unit
  }

App.KL.Game.Hero.Croni.hero.Skills.flux(range: I32, dmg: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    get target = App.KL.Game.Effect.coord.get_target
    get center = App.KL.Game.Effect.coord.get_center
    let area = [target]
    App.KL.Game.Effect.limit_range(range)
    App.KL.Game.Effect.ap.use(ap_cost)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_line, [center])
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_line, area)
    App.KL.Game.Effect.area!(App.KL.Game.Effect.At.enemy!(App.KL.Game.Effect.hp.damage_at(dmg)), area)
    return unit
  }

App.KL.Game.Hero.Croni.hero.Skills.void(range: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.limit_range(range)
    get target = App.KL.Game.Effect.coord.get_target
    get center = App.KL.Game.Effect.coord.get_center
    get board = App.KL.Game.Effect.board.get
    get caster = App.KL.Game.Effect.board.creature.caster
    get targeted = App.KL.Game.Effect.board.creature.target
    App.KL.Game.Effect.ap.use(ap_cost)
    case targeted {
      none: App.KL.Game.Effect {
        let team = case caster { none: App.KL.Game.Team.neutral, some: caster.value@team }
        App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_line, [target])
        let hero = App.KL.Game.Hero.Croni.hero.void
        let mhp = App.KL.Game.Hero.Croni.hero.void@max_hp
        let map = App.KL.Game.Hero.Croni.hero.void@max_ap
        let trap = App.KL.Game.Creature.new(none, hero, team, [], mhp, map)
        App.KL.Game.Effect.board.summon(trap, target)
      }
      some: if String.eql(targeted.value@hero@name, "Croni.Void") then App.KL.Game.Effect {
        let area = App.KL.Game.Hero.Croni.hero.Skills.void.area(target, board)
        App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_line, area)
        App.KL.Game.Effect.area!(App.KL.Game.Effect.At.enemy!(App.KL.Game.Effect.status.root.add(2)), area)
        return unit
      } else App.KL.Game.Effect.pass
    }
  }

App.KL.Game.Hero.Croni.hero.Skills.void.area.go(
  pos: Hexagonal.Axial
  board: App.KL.Game.Board
  area: Hexagonal.Axial.Map<Unit>
): Hexagonal.Axial.Map<Unit>
  let target = App.KL.Game.Board.Creature.get(pos, board)
  case target {
    none: area
    some: if String.eql(target.value@hero@name, "Croni.Void")
      then
        let area = Hexagonal.Axial.Map.set!(pos, unit, area)
        let inner_ring = App.KL.Game.Areas.ring(pos,1)
        let outer_ring = App.KL.Game.Areas.ring(pos,2)
        let area = for new_pos in inner_ring ++ outer_ring:
          case Hexagonal.Axial.Map.get!(new_pos, area) as got {
            none: App.KL.Game.Hero.Croni.hero.Skills.void.area.go(new_pos, board, area)
            some: area
          }
        let area = for new_pos in inner_ring:
          Hexagonal.Axial.Map.set!(new_pos, unit, area)
        area
      else
        area
  }

App.KL.Game.Hero.Croni.hero.Skills.void.area(
  pos: Hexagonal.Axial
  board: App.KL.Game.Board
): List<Hexagonal.Axial>
  Hexagonal.Axial.Map.keys!(App.KL.Game.Hero.Croni.hero.Skills.void.area.go(pos, board, Hexagonal.Axial.Map.new!))

// ~~~~~~~~~~

App.KL.Game.Hero.Croni.hero.trap: App.KL.Game.Hero
  let name = "Croni.Trap"
  let draw = (pose) {none, App.KL.Game.Field.Elements.mushroom_0_0}
  let picture = (bool, time) App.KL.Game.Hero.Croni.Assets.base64_idle
  let max_hp = 6 :: I32
  let max_ap = 0 :: I32
  let skills = {}
  let on_stepped = some((from,to) App.KL.Game.Effect {
    App.KL.Game.Effect.board.creature.move(from, to)
    App.KL.Game.Effect.status.root.add(2, to)
    return unit
  })
  let description = "A Trap created by Croni that stuns whoever steps on it"
  App.KL.Game.Hero.new(name, draw, picture, max_hp, max_ap, skills, on_stepped, description)

App.KL.Game.Hero.Croni.hero.void: App.KL.Game.Hero
  let name = "Croni.Void"
  let draw = (pose) {none, App.KL.Game.Field.Elements.baner_1}
  let picture = (bool, time) App.KL.Game.Hero.Croni.Assets.base64_idle
  let max_hp = 6 :: I32
  let max_ap = 0 :: I32
  let skills = {}
  let on_stepped = some((from,to) App.KL.Game.Effect {
    //App.KL.Game.Effect.board.creature.move(from, to)
    //App.KL.Game.Effect.status.stun.add(2, to)
    return unit
  })
  let description = "A Void created by Croni"
  App.KL.Game.Hero.new(name, draw, picture, max_hp, max_ap, skills, on_stepped, description)
