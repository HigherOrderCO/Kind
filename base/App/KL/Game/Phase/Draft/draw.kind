App.KL.Game.Phase.Draft.draw(
  local: App.KL.Game.State.Local, 
  global: App.KL.Global.State
): DOM
  open global
  without global.game: <div>"No game"</div> // impossible
  
  App.KL.Game.Phase.Draft.draw.choose_page(local@draft, global.game@players, local@page, local@tab, local@room, local@user, local@filter)

// choose what page draw based on team
App.KL.Game.Phase.Draft.draw.choose_page(
  controls: App.KL.Game.Controls.Draft
  players: Map<App.KL.Game.Player>,
  page: String,
  tab:  Maybe<String>,
  room: String,
  user: String,
  filter: App.KL.Game.Phase.Draft.Filter
): DOM
  let player = players{user}
  without player: <div>"No player"</div> // impossible

  let team_page = App.KL.Game.Phase.Draft.draw.choose_team(players)
    
  let team = player@team
  case team {
    // if any team is selected go to main draft selection
    // pass only allies
    blue:   App.KL.Game.Phase.Draft.draw.main(controls, App.KL.Game.Phase.Draft.draw.choose_page.filter_team(players, team), page, tab, user, filter)
    red:    App.KL.Game.Phase.Draft.draw.main(controls, App.KL.Game.Phase.Draft.draw.choose_page.filter_team(players, team), page, tab, user, filter)
  } default team_page // if no team is selected go to team selection

// aux function to filter players according with 
// its respective team
App.KL.Game.Phase.Draft.draw.choose_page.filter_team(
  players: Map<App.KL.Game.Player>
  team: App.KL.Game.Team
): Map<App.KL.Game.Player>
  let result = {}
  for id:player in players with result:
    if App.KL.Game.Team.eql(player@team, team) then
      result{id} <- player
    else
      result
  result

// CHOOSE TEAM SCREEN
// ----------
App.KL.Game.Phase.Draft.draw.choose_team(
  players: Map<App.KL.Game.Player>
): DOM
  <div style={ 
    "width": "100vw"
    "height": "100vh"
    "display": "flex"
    "flex-direction": "column"
    "justify-content": "center"
    "align-items": "center"
    "font-size": "2rem"
  }>
    <div style={ 
      // "width": "60%"
      // "height": "30%"
      "display": "flex"
      "justify-content": "center"
      "flex-wrap": "wrap"
    }>
      {App.KL.Game.Phase.Draft.draw.choose_team.button(players, App.KL.Game.Team.blue)}
      {App.KL.Game.Phase.Draft.draw.choose_team.button(players, App.KL.Game.Team.red)}
    </div>
  </div>

App.KL.Game.Phase.Draft.draw.choose_team.button(players: Map<App.KL.Game.Player>, team: App.KL.Game.Team): DOM
  let player_list   = Map.to_list!(players) // TODO BBT.count
  let fun = 
    (x)
      let y = x@snd@team
      App.KL.Game.Team.eql(y, team)
  let player_count  = List.count!(fun, player_list) // Player count in respective team
  let team_txt      = App.KL.Game.Team.show(team)
  let gradient      = 
    case team {
      blue:     "linear-gradient(#38a5fa, #2081e0)" // blue
      red:      "linear-gradient(#ff3537, #d60f10)" // red
      neutral:  "linear-gradient(#f2f2f2, #e6e6e6)" // light gray - not used
    }
  
  <button id = "T" | Nat.show(player_count) | team_txt style={ 
    "width": "40%"
    "height": "200px"
    "background-image": gradient
    "box-shadow": "2px -2px 2px black"
    "font-size": "2rem"
    "border": "0"
    "border-radius": "5px"
    "cursor": "inherit"
    "min-width": "270px"
    "margin": "20px"
  }>
    Nat.show(player_count) | "/3 Players"
  </button>


// DRAFT LAYOUT
// ==============================
App.KL.Game.Phase.Draft.draw.main(
  controls: App.KL.Game.Controls.Draft
  allies: Map<App.KL.Game.Player>, 
  page: String
  tab:  Maybe<String>,
  user: String,
  filter: App.KL.Game.Phase.Draft.Filter
): DOM
  let header_order = ["friend", "collection", "store", "help", "config", "exit"]

  <div class="pixel-art" style={"margin": "0", "height": "max(100%, 650px)", "width": "100%", "background-image": "url(https://i.imgur.com/NrKCJHi.png)", "position": "relative", "animation": "fade-in 700ms", "overflow": "hidden"}>
      {App.KL.Game.Phase.Draft.draw.background}

      <div style={"height": "100%", "width": "100%", "display": "flex", "flex-direction": "column", "justify-content": "center", "position": "relative", "z-index": "1"}>
        <header style={"background-image": "url("| App.KL.Game.Phase.Draft.Assets.header |")", "width": "100%", "height": "64px", "display": "flex", "justify-content": "space-between"}>
          <div style={"display": "flex"}>
          
          </div>
          <div style={"display": "flex", "justify-content": "flex-end"}>
            for button in App.KL.Game.Phase.Draft.draw.header(header_order, controls@header): button
          </div>
        </header>
        <div style={"display": "flex", "width": "100%", "justify-content": "center", "align-items": "center", "height": "max(calc(100% - 128px), 500px)", "position": "relative"}>
          <div style={"display": "flex", "padding": "4px"}>
            { App.KL.Game.Phase.Draft.draw.main.middle(allies, page, tab, user, filter) }
          </div>

          // -16 because footer height is 64px
          // and margin top of ready button is -40px
          <div style={"position": "absolute", "bottom": "-16px", "right": "50px", "display": "flex", "transform": "scale(1.5)"}>
            <img style={"margin": "0 5px", "cursor": "not-allowed"} src=App.KL.Game.Phase.Draft.Assets.bottom.list_button></img>
            <img style={"margin": "0 5px", "cursor": "not-allowed"} src=App.KL.Game.Phase.Draft.Assets.bottom.chat_buttom></img>
          </div>
        </div>
        <footer style={"height": "64px", "display": "flex", "align-items": "flex-end", "width": "100%"}>
          <div style={"display": "flex", "height": "50%", "flex": "1"}>
            <div style={"flex": "1", "height": "100%", "align-self": "flex-end", "background-image": "url("| App.KL.Game.Phase.Draft.Assets.footer.stencil.main |")"}></div>
            <div style={"align-self": "flex-end", "height": "100%"}><img style={"height": "100%", } src=App.KL.Game.Phase.Draft.Assets.footer.stencil.diagonal_left></img></div>
            {
              let src = App.KL.Game.Assets.ButtonAnimation.Button.get_img(controls@main_button) <> ""
              <div style={"align-self": "flex-start", "zoom": "150%", "margin-top": "-40px"}><img id="Ready" src=src></img></div>
            }
            <div style={"align-self": "flex-end", "height": "100%"}><img style={"height": "100%", } src=App.KL.Game.Phase.Draft.Assets.footer.stencil.diagonal_right></img></div>
            <div style={"flex": "1", "height": "100%", "align-self": "flex-end", "background-image": "url("| App.KL.Game.Phase.Draft.Assets.footer.stencil.main |")"}></div>
          </div>
        </footer>
      </div>
    </div>

App.KL.Game.Phase.Draft.draw.header(
  order: List<String>, 
  buttons: Map<App.KL.Game.Assets.ButtonClick>
): List<DOM>
  let length = List.length!(order)
  let to_dom = (order, id)
    let button_image = buttons{id}
    without button_image: <span style={"display": "none"}></span>
    let z_index = Nat.show(length - order)
    let order   = Nat.show(order)

    <img 
      id="btn-header-"|id
      src=App.KL.Game.Assets.ButtonClick.get_img(button_image) 
      style={"height": "100%", "cursor": "not-allowed", "margin-left": "-11px", "order": order, "z-index": z_index}
    ></img>
  
  List.imap!!(to_dom, order)

App.KL.Game.Phase.Draft.draw.background: DOM
  let s = Maybe.some!
  <div style={"display": "contents"}>
    {App.KL.Game.Phase.Draft.draw.background.hexagons(none,s(10),s(64),none, App.KL.Game.Phase.Draft.Assets.background.hexagons.1)}
    {App.KL.Game.Phase.Draft.draw.background.hexagons(none,none,s(64),s(10), App.KL.Game.Phase.Draft.Assets.background.hexagons.2)}
    {App.KL.Game.Phase.Draft.draw.background.hexagons(s(64),s(10),none,none, App.KL.Game.Phase.Draft.Assets.background.hexagons.3)}
    {App.KL.Game.Phase.Draft.draw.background.hexagons(s(64),none,none,s(10), App.KL.Game.Phase.Draft.Assets.background.hexagons.4)}
  </div>

App.KL.Game.Phase.Draft.draw.background.hexagons(
  top: Maybe<Nat>
  right: Maybe<Nat>
  bottom: Maybe<Nat>
  left: Maybe<Nat>
  img: String
): DOM
  let decapsule = ((x) case x {
    none: ""
    some: Nat.show(x.value) | "px"
  }) :: Maybe<Nat> -> String

  <div style={"position": "absolute", "top": decapsule(top), "right": decapsule(right), "bottom": decapsule(bottom), "left": decapsule(left), "transform": "scale(2)", "z-index": "0"} >
    <img src=img></img>
  </div>

App.KL.Game.Phase.Draft.draw.main.middle(
  allies: Map<App.KL.Game.Player>
  page: String
  tab:  Maybe<String>
  user: String
  filter: App.KL.Game.Phase.Draft.Filter
): DOM
  let max = 3 // max players TODO store in game?
  let selected_hero = Maybe {
    get user = allies{user}
    get hero_id = user@hero_id
    get hero = App.KL.Game.Hero.get_by_id(hero_id)
    return hero
  }
  
  let hero_list = App.KL.Game.Phase.Draft.Filter.apply(App.KL.Game.Hero.list, filter)

  <div style={"display": "contents"}>
    
    // USER CARD
    {
      let player = allies{user}
      case player {
        none: <span></span> // Impossible
        some: App.KL.Game.Phase.Draft.draw.card.user(player.value, tab)
      }
    }

    // ALLIES CARDS
    {
      let allies   = Map.delete!(user, allies)
      let allies   = Map.to_list!(allies) // TODO formap in DOM
      let n_allies = max - 1
      // let allies = List.indices!(allies)
      <div style={"display": "contents"}>
        for index in [0 to n_allies]:
          let info = List.get!(index, allies)
          case info {
            // if there is some allie not connected
            none: App.KL.Game.Phase.Draft.draw.card.allies(none, page)
            some:
              let {id, player} = info.value
              App.KL.Game.Phase.Draft.draw.card.allies(some(player), page)
          }
      </div>
    }

    // FILTER
    <div style={
      "display": if String.eql(page, "heroes") then "block" else "none" // page
      "animation": "fade-in 500ms"
    }>
      {App.KL.Game.Phase.Draft.draw.card.filter(filter)}
    </div>

    // MENU SELECTION
    <div style={
      "max-height": "416px"
      "height": "416px" 
      "overflow": "auto"
      "display": if String.eql(page, "heroes") then "grid" else "none" // page
      "animation": "fade-in 500ms"
      "grid-template-columns": "repeat(5, minmax(0, 1fr))"
      "grid-auto-rows": "max-content"
      "gap": "10px"
      "margin": "0 10px"
      "padding-top": "4px" // because of negative margin
    }>
      for card in [App.KL.Game.Phase.Draft.draw.portrait.hero(hero, selected_hero, filter) for hero in hero_list]:
        card
    </div>
  </div>


// draw user card in specific order
// this order sets the user card to stay in middle
App.KL.Game.Phase.Draft.draw.card.user(
  player: App.KL.Game.Player,
  tab:  Maybe<String>
): DOM
  let fator  = 2
  let bt     = 2
  let id     = "user-card"

  let hero = Maybe {
    get hero_id = player@hero_id
    get hero    = App.KL.Game.Hero.get_by_id(hero_id)
    return hero
  }

  // TODO resolve this
  let skills = case hero {
    none: []
    some: Map.to_list!(hero.value@skills)
  }

  let order = ["I","Q","W","E","R","X"] // order which skills are shown 
  let inner  = 
    <div style={"display": "contents"}>
      <div style={
        "height": "40%", 
        "width": "17%", 
        "max-height": "40%", 
        "overflow": "auto", 
        "border-radius": "5px 0px 0px 5px", 
      }>
        <div style={
          "display": "flex", 
          "flex-direction": "column"
        }>
          { App.KL.Game.Phase.Draft.Draw.card.slot(some(0), "DNone", <span id="DNone">"I"</span>) } // TODO LIST ICON
          for info in skills:
            let {key, skill} = info
            let order = List.find_index!(order, String.eql(key))
            let id = "D"|key
            App.KL.Game.Phase.Draft.Draw.card.slot(order, id, <span id=id >key</span>)
        </div>
      </div>
      <div id=id style={"width": "82%", "border-radius": "0 5px 5px 0", "padding": Nat.show(fator * bt) | "px"}>
        {App.KL.Game.Phase.Draft.draw.card.hero(hero, id, tab, player@ready)}
      </div>
    </div>
  
  <div id=id style={"margin": "0 10px"}>
    { App.KL.Game.Phase.Draft.draw.card.wrapper(99, 208, bt, id, fator, App.KL.Game.Phase.Draft.Assets.card.main, inner) }
  </div>

App.KL.Game.Phase.Draft.Draw.card.slot(
  order: Maybe<Nat>
  id: String
  el: DOM
): DOM
  let order = order <> 0
  let order = Nat.show(order)
  <div id=id style={
    "position": "relative"
    "width": "100%"
    "border-radius": "5px"
    "color": "white"
    "order": order
  }>
    <img 
      src=App.KL.Game.Phase.Draft.Assets.card.button
      style={"width": "100%", "display": "flex"}
    ></img>
    <div style={
      "position": "absolute"
      "top": "0", "left": "0"
      "width": "100%", "height": "100%"
      "display": "flex"
      "align-items": "center"
      "justify-content": "center"
    }>
      <span>{ el }</span>
    </div>
  </div>


App.KL.Game.Phase.Draft.draw.card.allies(
  player: Maybe<App.KL.Game.Player>,
  page: String
): DOM
  let fator = 2
  let bt    = 2
  let type = "CLASS"

  let hero = Maybe {
    get player  = player
    get hero_id = player@hero_id
    get hero    = App.KL.Game.Hero.get_by_id(hero_id)
    return hero
  }
  let ready = Maybe.if!((p) p@ready, player)
  let inner = 
    <div style={"width": "100%", "border-radius": "0 5px 5px 0", "padding": Nat.show(fator * bt) | "px"}>
      {App.KL.Game.Phase.Draft.draw.card.hero(hero, "", none, ready)}
    </div>
  
  <div style={"margin": "0 10px", "display": if String.eql(page, "users") then "block" else "none", "animation": "fade-in 500ms"}>
    { App.KL.Game.Phase.Draft.draw.card.wrapper(82, 208, bt, "", fator, App.KL.Game.Phase.Draft.Assets.card.allies, inner) }
  </div>

// draw hero parts of cards
App.KL.Game.Phase.Draft.draw.card.hero(
  hero: Maybe<App.KL.Game.Hero>
  id: String
  tab:  Maybe<String>
  ready: Bool
): DOM
  <div id=id style={"height": "100%", "position": "relative"}>
    // draw top of card
    <div id=id style={
      "height": "52%"
    }>
      {
        case hero {
          none: App.KL.Game.Phase.Draft.draw.card.hero.img("", none, "", id) // TODO change to none
          some: App.KL.Game.Phase.Draft.draw.card.hero.img(hero.value@name, hero.value@role, hero.value@draw@b64_img(true, 0), id) // TODO change type
        }
      }
    </div>
    // draw bottom of card
    <div id=id style={"height": "48%", "width": "100%"}>
      {
        Maybe {
          get hero = hero
          get attr = hero@attributes
          case tab {
            none: some(App.KL.Game.Phase.Draft.draw.card.hero.attrs(attr, id))
            some: some(App.KL.Game.Phase.Draft.draw.card.hero.skill_info(hero, tab.value))
          }
        } <> App.KL.Game.Phase.Draft.draw.card.hero.attrs(App.KL.Game.Hero.Attributes.set(0,0,0,0,0,0), id)
      }
    </div>
    // draw light if player is ready
    {
      if ready then
        <div style={
          "transform": "scale(2)", 
          "transform-origin": "top left",
          "position": "absolute", 
          "top": "92%", 
          "left": "37%"
          "animation": "fade-in 200ms"
        }>
          <img src=App.KL.Game.Phase.Draft.Assets.card.active></img>
        </div>
      else
        <span style={"display": "none"}></span>
    }
  </div>

App.KL.Game.Phase.Draft.draw.card.hero.skill_info(
  hero: App.KL.Game.Hero, 
  key:  String
): DOM
  let skill = hero@skills{key}
  case skill {
    none: <span></span>
    some:
      let name = skill.value@name
      let description = skill.value@description

      <div style={"padding": "10px", "width": "100%", "text-align": "center", "color": "white"}>
        <p style={"margin-bottom": "3px"}>name</p>
        <p>description</p>
      </div>
    
  }

// draw card's top
App.KL.Game.Phase.Draft.draw.card.hero.img(name: String, role: Maybe<App.KL.Game.Hero.Role>, img: String, id: String): DOM
  let role = case role {
    none: "" // TODO what put here?
    some: App.KL.Game.Hero.Role.show(role.value)
  }
  <div id=id style={"position": "relative", "height": "100%"}> 
    <div id=id style={
      "position": "absolute", 
      "margin-left": "auto"
      "margin-right": "auto"
      "left": "0"
      "right": "0"
      "text-align": "center"
      "top": "-7%"
      "width": "55%",
      "height": "55%",
      "background-image": "url("|img|")",
      "background-size": "contain",
      "background-position": "center",
      "background-repeat": "no-repeat"
    }>
      // <img src=img style={"object-size": "contain"}></img>
    </div>
    <div id=id style={
      "position": "absolute"
      "top": "70%"
      "left": "0"
      "right": "0"
      "margin": "auto"
      "height": "25%"
      "display": "flex"
      "flex-direction": "column"
      "justify-content": "space-around"
      "align-items": "center"
    }>
      <span id=id style={"color": "white", "text-transform": "uppercase"}>name</span>
      <img id=id src=App.KL.Game.Phase.Draft.Assets.card.name_divisor style={"width": "50%"}></img>
      <span id=id style={"color": "#871df0", "font-size": "small", "text-transform": "uppercase"}>role</span>
    </div>
  </div>

// draw attributes icons and bars
App.KL.Game.Phase.Draft.draw.card.hero.attrs(attrs: App.KL.Game.Hero.Attributes, id: String): DOM
  let order     = ["damage", "resistance", "mobility", "range", "utility"]
  let attrs_map = App.KL.Game.Hero.Attributes.to_map(attrs) 
  <div id=id style={"display": "contents"}> 
    for attr in order:
      let img = App.KL.Game.Phase.Draft.Assets.card.attr_icons{attr}
      without img: <span id=id style={"display": "none"}></span> // TODO
      <div id=id style={"display": "contents"}>
        <div id=id style={
          "height": "15%",
          "display": "flex", 
          "align-items": "center", 
          "padding": "4% 10%",
          "margin-top": if attr =? "damage" then "4%" else ""
        }>
          <div id=id style={
            "flex": "1"
            "margin-right": "10%"
            "height": "100%"
          }>
            <img id=id style={"width": "100%", "height": "100%", "object-fit": "contain", } src=img></img>
          </div>
          <div id=id style={"display": "flex", "height": "100%", "flex": "4", "align-items": "center"}>
            for j in [1 to 6]:
              let attr_value = attrs_map{attr}
              without attr_value: <span style={"display": "none"}></span>
              let bar = App.KL.Game.Phase.Draft.Assets.card.attr_bar(attr_value, j)
              <div id=id style={"margin": "0 3px", "display": "flex", "align-items": "center", "flex": "1"}><img style={"width": "100%", } src=bar></img> </div>
          </div>
        </div>
        {
          if attr =? "utility" then <span></span>
          else 
            <div id=id style={"display": "flex", "justify-content": "center"}>
              <img id=id style={"width": "80%", "margin": "auto", } src=App.KL.Game.Phase.Draft.Assets.card.divisor></img>
            </div>
        }
      </div>
  </div>

App.KL.Game.Phase.Draft.draw.card.filter(
  filter: App.KL.Game.Phase.Draft.Filter
): DOM
  let options = Map.to_list!(filter@options) // TODO formap in DOM

  let inner = 
    <div style={"max-height": "100%", "width": "100%", "overflow": "auto", "padding": "15px 10%"}>
      <div style={"display": "flex", "justify-content": "center", "align-items": "center", "flex-direction": "column"}>
        <img src=App.KL.Game.Phase.Draft.Assets.filter.icon style={"width": "20%"}></img>
        <span style={"color": "white", "margin": "10px 0"}>"FILTER"</span>
        <div style={
          "background-image": "url("|App.KL.Game.Phase.Draft.Assets.filter.input|")"
          "background-size": "100% 100%"
          "width": "100%"
          "height": "32px"
        }>
          <input id="HF" value=filter@hero_name style={
            "background": "transparent"
            "border": "none"
            "color": "white"
            "height": "100%"
            "padding": "0 16px"
            "width": "100%"
            "outline": "none"
            "font-family": "monospace"
          }></input>
        </div>
      </div>

      <div style={"margin": "5px 0", "width": "100%"}>
        <img src=App.KL.Game.Phase.Draft.Assets.card.divisor style={"width": "100%"}></img>
      </div>

      <div>
        <ul style={"list-style": "none"}>
          for option in options:
            let {text, checked} = option
            App.KL.Game.Phase.Draft.draw.card.filter.option(checked, text)
        </ul>
      </div>
    </div>
  
  <div style={"margin": "0 10px"}>
    { App.KL.Game.Phase.Draft.draw.card.wrapper(82, 208, 2, "", 2, App.KL.Game.Phase.Draft.Assets.filter.background, inner) }
  </div>

App.KL.Game.Phase.Draft.draw.card.filter.option(checked: Bool, text: String): DOM
  let img = 
    if checked then
      App.KL.Game.Phase.Draft.Assets.filter.check_true
    else
      App.KL.Game.Phase.Draft.Assets.filter.check_false
  let id = "FC" | text
  <li id=id style={"margin-bottom": "5px"}>
    <img id=id src=img style={
      "zoom": "2"
      "margin-right": "5px"
      "vertical-align": "middle"
    }></img>
    <span id=id style={"color": "white", "text-transform": "uppercase"}>text</span>
  </li>

App.KL.Game.Phase.Draft.draw.card.wrapper(width: Nat, height: Nat, bt: Nat, id: String, fator: Nat, background: String, inner: DOM): DOM
  <div class="pixel-art" id=id style={
    "height": Nat.show(fator * height) | "px", 
    "width": Nat.show(fator * width) | "px", 
    "display": "flex", 
    "background-image": "url("|background|")", 
    "background-size": "100% 100%", 
    "padding-top": Nat.show(fator * bt) | "px"
    // "margin": "0 10px"
    
  }>
    {inner}
  </div>

App.KL.Game.Phase.Draft.draw.portrait.hero(
  hero: App.KL.Game.Hero, 
  selected_hero: Maybe<App.KL.Game.Hero>, 
  filter: App.KL.Game.Phase.Draft.Filter
): DOM
  let fator = 2
  let bt = 2
  let width = 44
  let height = 74

  // verify if hero is the hero selected
  let is_selected = case selected_hero {
    none: false
    some: String.eql(hero@name, selected_hero.value@name)
  }
  
  let id = "H" | hero@name
  let portrait = hero@draw@b64_portrait(true, 0)
  let inner =
    <div id=id style={"width": "100%", "padding": "0 " | Nat.show(bt * fator) | "px", "display": "flex", "flex-direction": "column", "align-items": "center"}>
      <img id=id style={"width": "100%", "transform": "translateY(-"|Nat.show((2 + bt)*fator)|"px)", "margin-bottom": "4px"} src=portrait></img>
      <p id=id style={"text-transform": "uppercase", "color": "white"}>hero@name</p>
    </div>
  

  <div id=id style={
    "height": Nat.show(fator * height) | "px", 
    "width": Nat.show(fator * width) | "px", 
    "display": "flex", 
    "background-image": "url("|App.KL.Game.Phase.Draft.Assets.portrait.hero.background|")", 
    "background-size": "100% 100%", 
    "background-repeat": "no-repeat"
    "padding-top": Nat.show(fator * bt) | "px"
    
    "border-style": "solid"
    "border-image-slice": "4"
    "border-image-width": "10px"
    "border-image-repeat": "stretch stretch"
    "border-color": "transparent"
    // if selected then draw border
    "border-image-source": if is_selected then "url("|App.KL.Game.Phase.Draft.Assets.portrait.hero.border|")" else ""
  }>
    {inner}
  </div>

// ROOM NUMBER AND READY BUTTON
// ==========================

// // display room text, and ready/cancel button
// App.KL.Game.Phase.Draft.draw.ready_button(players: Map<App.KL.Game.Player>, room: String, user: String): DOM
//   info = players{user}
//   let ready_count = App.KL.Game.Player.ready_count(players, room, user) // Pair(Total players, ready check)
//   let total = Nat.show(ready_count@fst)
//   let count = Nat.show(ready_count@snd)
//   let {color, text} = 
//     case info {
//       none: {"#4CAF50", "Ready"}
//       some: 
//         let player = info.value
//         if player@ready then
//           {"gray",    count|"/"|total|"\n\n Cancel"}
//         else
//           {"#4CAF50", "Ready"}
//   }
//   <div style={ 
//     "width": "30%"
//     "height": "auto"
//     "display": "flex"
//     "justify-content": "center"
//     "align-items": "center"
//     "flex-direction": "column"
//   }>
//     <div style={ 
//       "background-color": "#d6dadc"
//       "color": "black"
//       "padding": "8px"
//       "text-align": "center"
//       "border-radius": "5px"
//       "margin-bottom": "10px"
//       "font-size": "32px"
//     }>
//       room
//     </div>
//     <button id="Ready" style={ 
//       "background-color": color
//       "border": "none"
//       "color": "white"
//       "padding": "32px"
//       "text-align": "center"
//       "text-decoration": "none"
//       "display": "inline-block"
//       "font-size": "32px"
//       "margin": "4px 2px"
//       "cursor": "inherit"
//     }>
//       text
//     </button>
//   </div>

// BOTTOM MENU FOR CHOOSING HEROES 
// ======================
App.KL.Game.Phase.Draft.draw.menu(
  players: Map<App.KL.Game.Player>
): DOM

  heroes = App.KL.Game.Hero.list
  main_style = 
  {
    "width": "70%",
    "height": "100%"
    "display": "flex"
    "justify-content": "center"
    "align-items": "center"
  }
  
  display_style = 
  { 
    "display": "flex",
    "flex-wrap": "wrap",
    "justify-content": "center", 
    "width": "100%"
  }
  
  hero_list = List.map!!(App.KL.Game.Phase.Draft.draw.selection, App.KL.Game.Hero.list) 

  <div style=main_style>
    <div style=display_style>
      for div in hero_list: div
    </div>
  </div>

     //Selection
//----------------------------------------------
App.KL.Game.Phase.Draft.draw.selection(
  hero: App.KL.Game.Hero
): DOM
   
  image = hero@draw@b64_portrait(true, 0) //TODO placeholder
  //assets = hero@assets
  //image  = assets@base64

  box_style = 
  { 
    "margin": "4px",
    "border": "5px solid #d6dadc",
    //"box-shadow":"0 2px 3px rgba(0, 0, 0, 0.1)",
    "background-color": "#Aeb4b7"
    "height": "auto",
    "width": "15%",
    "border-radius": "5px"
  }

  name_style =   
  {
    "display": "flex",
    "justify-content": "center",
    "font-size": "1.2vw"
  }

  img_box_style = 
  {
    "padding": "2px",
    "height": "100%",
    "width": "100%"
  } 

  corner_style = 
  {
    "width": "75%",
    "margin-left": "12.5%",
    "height": "auto",
    
  }
  square_style = 
  {
    "display": "flex", "justify-content": "center", "height": "100%", "width":"100%"
  }
  
  <div style=box_style id="H" | hero@name>
    <div style=name_style id="H"| hero@name>hero@name</div>
      <img style=corner_style src=image id="H" | hero@name>
      </img>
  </div>
