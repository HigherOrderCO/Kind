App.KL.Game.Phase.Draft.draw.fator.number: F64
  2

App.KL.Game.Phase.Draft.draw.fator.string: String
  F64.show(App.KL.Game.Phase.Draft.draw.fator.number)

App.KL.Game.Phase.Draft.draw(
  local: App.KL.Game.State.Local, 
  global: App.KL.Global.State
): DOM
  open global
  without global.game: <div>"No game"</div> // impossible
  
  App.KL.Game.Phase.Draft.draw.choose_page(local@draft, global.game@players, local@room, local@user)

// choose what page draw based on team
App.KL.Game.Phase.Draft.draw.choose_page(
  controls: App.KL.Game.Controls.Draft
  players: Map<App.KL.Game.Player>,
  room: String,
  user: String,
): DOM
  let player = players{user}
  without player: <div>"No player"</div> // impossible

  let team_page = App.KL.Game.Phase.Draft.draw.choose_team(players)
  let skills_tab       = controls@skills_tab
  let filter    = controls@filter
  let page      = controls@page

  let team = player@team
  case team {
    // if any team is selected go to main draft selection
    // pass only allies
    blue:   App.KL.Game.Phase.Draft.draw.main(controls, App.KL.Game.Phase.Draft.draw.choose_page.filter_team(players, team), page, skills_tab, user, filter)
    red:    App.KL.Game.Phase.Draft.draw.main(controls, App.KL.Game.Phase.Draft.draw.choose_page.filter_team(players, team), page, skills_tab, user, filter)
  } default team_page // if no team is selected go to team selection

// aux function to filter players according with 
// its respective team
App.KL.Game.Phase.Draft.draw.choose_page.filter_team(
  players: Map<App.KL.Game.Player>
  team: App.KL.Game.Team
): Map<App.KL.Game.Player>
  let result = {}
  for id:player in players with result:
    if App.KL.Game.Team.eql(player@team, team) then
      result{id} <- player
    else
      result
  result

// CHOOSE TEAM SCREEN
// ----------
App.KL.Game.Phase.Draft.draw.choose_team(
  players: Map<App.KL.Game.Player>
): DOM
  let content = 
    <div style={ 
      "width": "100vw"
      "height": "100vh"
      "display": "flex"
      "flex-direction": "column"
      "justify-content": "center"
      "align-items": "center"
      "font-size": "2rem"
    }>
      <div style={ 
        // "width": "60%"
        // "height": "30%"
        "display": "flex"
        "justify-content": "center"
        "flex-wrap": "wrap"
      }>
        {App.KL.Game.Phase.Draft.draw.choose_team.button(players, App.KL.Game.Team.blue)}
        {App.KL.Game.Phase.Draft.draw.choose_team.button(players, App.KL.Game.Team.red)}
      </div>
    </div>
  
  App.KL.Game.Draw.background(content)

App.KL.Game.Phase.Draft.draw.choose_team.button(players: Map<App.KL.Game.Player>, team: App.KL.Game.Team): DOM
  let fun = (k,v) App.KL.Game.Team.eql(v@team, team)
  let player_count  = BBT.count!!(fun, players) // Player count in respective team
  let team_txt      = App.KL.Game.Team.show(team)
  let gradient      = 
    case team {
      blue:     "linear-gradient(#38a5fa, #2081e0)" // blue
      red:      "linear-gradient(#ff3537, #d60f10)" // red
      neutral:  "linear-gradient(#f2f2f2, #e6e6e6)" // light gray - not used
    }
  
  <button id = "T" | Nat.show(player_count) | team_txt style={ 
    "width": "40%"
    "height": "200px"
    "background-image": gradient
    "box-shadow": "2px -2px 2px black"
    "font-size": "2rem"
    "border": "0"
    "border-radius": "5px"
    "cursor": "inherit"
    "min-width": "270px"
    "margin": "20px"
  }>
    Nat.show(player_count) | "/3 Players"
  </button>


// DRAFT LAYOUT
// ==============================
App.KL.Game.Phase.Draft.draw.main(
  controls: App.KL.Game.Controls.Draft
  allies: Map<App.KL.Game.Player>, 
  page: String
  skills_tab:  Maybe<String>,
  user: String,
  filter: App.KL.Game.Controls.Draft.Filter
): DOM
  let content =
    <div style={"height": "100%", "width": "100%", "display": "flex", "flex-direction": "column", "justify-content": "center", "position": "relative", "z-index": "1"}>
      {App.KL.Game.Phase.Draft.draw.header(controls)}
      // middle content
      <div style={"display": "flex", "width": "100%", "justify-content": "center", "align-items": "center", "height": "max(calc(100% - 128px), 500px)", "position": "relative"}>
        // main content
        <div style={"display": "flex", "padding": "4px"}>
          { App.KL.Game.Phase.Draft.draw.middle.content(allies, page, skills_tab, user, filter) }
        </div>
        // bottom buttons
          { App.KL.Game.Phase.Draft.draw.middle.bottom_buttons }
      </div>
      {App.KL.Game.Phase.Draft.draw.footer(controls)}
    </div>

  App.KL.Game.Draw.background(content)

// MIDDLE PART
// ==========================================
// draw bottom buttons from middle part
App.KL.Game.Phase.Draft.draw.middle.bottom_buttons: DOM
  // -16 because footer height is 64px
  // and margin top of ready button is -40px
  <div style={"position": "absolute", "bottom": "-16px", "right": "50px", "display": "flex", "transform": "scale(1.5)"}>
    <img style={"margin": "0 5px", "cursor": "not-allowed"} src=App.KL.Game.Phase.Draft.Assets.bottom.list_button></img>
    <img style={"margin": "0 5px", "cursor": "not-allowed"} src=App.KL.Game.Phase.Draft.Assets.bottom.chat_buttom></img>
  </div>

// draw middle content (players cards and menu selection)
App.KL.Game.Phase.Draft.draw.middle.content(
  allies: Map<App.KL.Game.Player>
  page: String
  skills_tab:  Maybe<String>
  user: String
  filter: App.KL.Game.Controls.Draft.Filter
): DOM
  let players_qtt   = 3 // max players TODO store in game?
  let local_player  = allies{user}
  let selected_hero = App.KL.Game.Phase.Draft.draw.get_selected_hero(local_player)

  let allies = Map.delete!(user, allies)
  <div style={"display": "contents"}>
    // USER CARD
    { App.KL.Game.Phase.Draft.draw.card.user(local_player, selected_hero, skills_tab) }
    // ALLIES CARDS
    { App.KL.Game.Phase.Draft.draw.card.allies(allies, page, players_qtt) }
    // FILTER
    <div style={
      "display": if String.eql(page, "heroes") then "block" else "none" // page
      "animation": "fade-in 500ms"
    }>
      { App.KL.Game.Phase.Draft.draw.card.filter(filter) }
    </div>
    // MENU SELECTION
    { App.KL.Game.Phase.Draft.draw.menu(selected_hero, page, filter) }
  </div>

// PLAYERS CARDS
// draw local user card
App.KL.Game.Phase.Draft.draw.card.user(
  player: Maybe<App.KL.Game.Player> // player (used to know if player is ready or not)
  hero:   Maybe<App.KL.Game.Hero>, // selected hero
  skills_tab:    Maybe<String> // which skill skills_tab is selected
): DOM
  without player: App.KL.Game.Phase.draw.none // if user is not a player

  let fator  = App.KL.Game.Phase.Draft.draw.fator.number
  let bt     = 2.0
  let id     = "user-card"
  let skills = case hero {
    none: []
    some: Map.to_list!(hero.value@skills)
  }
  
  let inner  = 
    <div style={"display": "contents"}>
      // skills skills_tabs
      <div style={
        "height": "40%", 
        "width": "17%", 
        "max-height": "40%", 
        "overflow": "auto", 
        "border-radius": "5px 0px 0px 5px", 
      }>
        <div style={
          "display": "flex", 
          "flex-direction": "column"
        }>
          { App.KL.Game.Phase.Draft.draw.card.slot("I") }
          for info in skills:
            let {key, skill} = info
            App.KL.Game.Phase.Draft.draw.card.slot(key)
        </div>
      </div>
      // card with hero attrs
      <div id=id style={"width": "82%", "border-radius": "0 5px 5px 0", "padding": F64.show(fator * bt) | "px"}>
        {App.KL.Game.Phase.Draft.draw.card.hero(hero, id, skills_tab, player@ready)}
      </div>
    </div>
  
  <div id=id style={"margin": "0 10px"}>
    { App.KL.Game.Phase.draw.card.wrapper(99.0, 208.0, bt, id, fator, App.KL.Game.Phase.Draft.Assets.card.main, inner) }
  </div>

// draw skills skills_tabs in local user card
App.KL.Game.Phase.Draft.draw.card.slot(
  key: String
): DOM
  let order = App.KL.Game.Phase.draw.get_skill_order_by_key(key)
  let id    = "D" | key
  <div id=id style={
    "position": "relative"
    "width": "100%"
    "border-radius": "5px"
    "color": "white"
    "order": Nat.show(order)
  }>
    <img id=id
      src=App.KL.Game.Phase.Draft.Assets.card.button
      style={"width": "100%", "display": "flex"}
    ></img>
    <div id=id style={
      "position": "absolute"
      "top": "0", "left": "0"
      "width": "100%", "height": "100%"
      "display": "flex"
      "align-items": "center"
      "justify-content": "center"
    }>
      <span id=id>key</span>
    </div>
  </div>

// draw non-local players which are in the same team of local user
App.KL.Game.Phase.Draft.draw.card.allies(
  allies: Map<App.KL.Game.Player>
  page: String // which page is shown
  players_qtt: Nat // players quantity
): DOM
  let allies_qtt = players_qtt - 1
  let allies     = Map.to_list!(allies)
  let allies     = App.KL.Game.Phase.Draft.draw.pad_right!(allies, allies_qtt) // complete 
  <div style={"display": "contents"}>
    for ally in allies:
      case ally {
        // if there is some ally not connected
        none: App.KL.Game.Phase.Draft.draw.card.ally(none, page)
        some:
          let {id, player} = ally.value
          App.KL.Game.Phase.Draft.draw.card.ally(some(player), page)
      }
  </div>

// draw one ally
App.KL.Game.Phase.Draft.draw.card.ally(
  player: Maybe<App.KL.Game.Player>,
  page: String
): DOM
  let fator = App.KL.Game.Phase.Draft.draw.fator.number
  let bt    = 2.0
  let type = "CLASS"
  let hero = Maybe {
    get player  = player
    get hero_id = player@hero_id
    get hero    = App.KL.Game.Hero.get_by_id(hero_id)
    return hero
  }
  let ready = Maybe.if!((p) p@ready, player)
  let inner = 
    <div style={"width": "100%", "border-radius": "0 5px 5px 0", "padding": F64.show(fator * bt) | "px"}>
      {App.KL.Game.Phase.Draft.draw.card.hero(hero, "", none, ready)}
    </div>
  
  <div style={"margin": "0 10px", "display": if String.eql(page, "users") then "block" else "none", "animation": "fade-in 500ms"}>
    { App.KL.Game.Phase.draw.card.wrapper(82.0, 208.0, bt, "", fator, App.KL.Game.Phase.Draft.Assets.card.allies, inner) }
  </div>

// draw hero parts of cards
App.KL.Game.Phase.Draft.draw.card.hero(
  hero:  Maybe<App.KL.Game.Hero>
  id:    String
  skills_tab:   Maybe<String>
  ready: Bool
): DOM
  <div id=id style={"height": "100%", "position": "relative"}>
    // draw top of card
    <div id=id style={"height": "52%"}> 
      { App.KL.Game.Phase.Draft.draw.card.hero.img(hero, id) } 
    </div>
    // draw bottom of card
    <div id=id style={"height": "48%", "width": "100%"}>
      { App.KL.Game.Phase.Draft.draw.card.hero.bottom(hero, skills_tab, id) }
    </div>
    // draw light if player is ready
    {
      if ready then
        <div style={
          "transform": "scale("|App.KL.Game.Phase.Draft.draw.fator.string|")", 
          "transform-origin": "top left",
          "position": "absolute", 
          "top": "92%", 
          "left": "37%"
          "animation": "fade-in 200ms"
        }>
          <img src=App.KL.Game.Phase.Draft.Assets.card.active></img>
        </div>
      else
        App.KL.Game.Phase.draw.none
    }
  </div>

// draw card's top (image, name, class)
App.KL.Game.Phase.Draft.draw.card.hero.img(
  hero: Maybe<App.KL.Game.Hero> 
  id: String
): DOM
  let name = Maybe.map!!((x) x@name, hero) <> "" // name of hero or nothing
  let role = 
    Maybe {
      get hero = hero
      return App.KL.Game.Hero.Role.show(hero@role)
    } <> "" // role of hero or nothing
  let img  = Maybe.map<App.KL.Game.Hero>!((x) x@draw@b64_img(true, 0), hero) <> "" // img of hero or nothing

  <div id=id style={"position": "relative", "height": "100%"}> 
    <div id=id style={
      "position": "absolute", 
      "margin-left": "auto"
      "margin-right": "auto"
      "left": "0"
      "right": "0"
      "text-align": "center"
      "top": "-7%"
      "width": "55%",
      "height": "55%",
      "background-image": "url("|img|")",
      "background-size": "contain",
      "background-position": "center",
      "background-repeat": "no-repeat"
    }>
      // <img src=img style={"object-size": "contain"}></img>
    </div>
    <div id=id style={
      "position": "absolute"
      "top": "70%"
      "left": "0"
      "right": "0"
      "margin": "auto"
      "height": "25%"
      "display": "flex"
      "flex-direction": "column"
      "justify-content": "space-around"
      "align-items": "center"
    }>
      <span id=id style={"color": "white", "text-transform": "uppercase"}>name</span>
      <img id=id src=App.KL.Game.Phase.Draft.Assets.card.name_divisor style={"width": "50%"}></img>
      <span id=id style={"color": "#871df0", "font-size": "small", "text-transform": "uppercase"}>role</span>
    </div>
  </div>

// choose what draw in bottom of cards
App.KL.Game.Phase.Draft.draw.card.hero.bottom(
  hero: Maybe<App.KL.Game.Hero>
  skills_tab:  Maybe<String>
  id:   String
): DOM
  Maybe {
    get hero = hero
    return 
    case skills_tab {
      none: App.KL.Game.Phase.Draft.draw.card.hero.attrs(hero@attributes, id)
      some: App.KL.Game.Phase.Draft.draw.card.hero.skill_info(hero, skills_tab.value)
    }
  } <> App.KL.Game.Phase.Draft.draw.card.hero.attrs(App.KL.Game.Hero.Attributes.set(0,0,0,0,0,0), id)

// draw attributes icons and bars
App.KL.Game.Phase.Draft.draw.card.hero.attrs(attrs: App.KL.Game.Hero.Attributes, id: String): DOM
  let order     = ["damage", "resistance", "mobility", "range", "utility"]
  let attrs_map = App.KL.Game.Hero.Attributes.to_map(attrs) 
  <div id=id style={"display": "contents"}> 
    for attr in order:
      let img = App.KL.Game.Phase.Draft.Assets.card.attr_icons{attr}
      without img: App.KL.Game.Phase.draw.none
      <div id=id style={"display": "contents"}>
        <div id=id style={
          "height": "15%",
          "display": "flex", 
          "align-items": "center", 
          "padding": "4% 10%",
          "margin-top": if attr =? "damage" then "4%" else ""
        }>
          <div id=id style={
            "flex": "1"
            "margin-right": "10%"
            "height": "100%"
          }>
            <img id=id style={"width": "100%", "height": "100%", "object-fit": "contain", } src=img></img>
          </div>
          <div id=id style={"display": "flex", "height": "100%", "flex": "4", "align-items": "center"}>
            for j in [1 to 6]:
              let attr_value = attrs_map{attr}
              without attr_value: App.KL.Game.Phase.draw.none
              let bar = App.KL.Game.Phase.Draft.Assets.card.attr_bar(attr_value, j)
              <div id=id style={"margin": "0 3px", "display": "flex", "align-items": "center", "flex": "1"}><img style={"width": "100%", } src=bar></img> </div>
          </div>
        </div>
        {
          if attr =? "utility" then App.KL.Game.Phase.draw.none
          else 
            <div id=id style={"display": "flex", "justify-content": "center"}>
              <img id=id style={"width": "80%", "margin": "auto", } src=App.KL.Game.Phase.Draft.Assets.card.divisor></img>
            </div>
        }
      </div>
  </div>

// draw description of skill selected
App.KL.Game.Phase.Draft.draw.card.hero.skill_info(
  hero: App.KL.Game.Hero, 
  key:  String
): DOM
  let skill = hero@skills{key}
  case skill {
    none: App.KL.Game.Phase.draw.none
    some:
      let name = skill.value@name
      let description = skill.value@description

      <div style={"padding": "10px", "width": "100%", "text-align": "center", "color": "white"}>
        <p style={"margin-bottom": "3px", "font-weight": "700", "font-size": "1.2rem"}>name</p>
        <p>description</p>
      </div>    
  }

// FILTER
// ==============================
// draw filter card
App.KL.Game.Phase.Draft.draw.card.filter(
  filter: App.KL.Game.Controls.Draft.Filter
): DOM
  let options = filter@options

  let inner = 
    <div style={"max-height": "100%", "width": "100%", "overflow": "auto", "padding": "15px 10%"}>
      <div style={"display": "flex", "justify-content": "center", "align-items": "center", "flex-direction": "column"}>
        <img src=App.KL.Game.Phase.Draft.Assets.filter.icon style={"width": "20%"}></img>
        <span style={"color": "white", "margin": "10px 0"}>"FILTER"</span>
        <div style={
          "background-image": "url("|App.KL.Game.Phase.Draft.Assets.filter.input|")"
          "background-size": "100% 100%"
          "width": "100%"
          "height": "32px"
        }>
          <input id="HF" value=filter@hero_name style={
            "background": "transparent"
            "border": "none"
            "color": "white"
            "height": "100%"
            "padding": "0 16px"
            "width": "100%"
            "outline": "none"
            "font-family": "monospace"
          }></input>
        </div>
      </div>

      <div style={"margin": "5px 0", "width": "100%"}>
        <img src=App.KL.Game.Phase.Draft.Assets.card.divisor style={"width": "100%"}></img>
      </div>

      <div>
        <ul style={"list-style": "none"}>
          for text:checked in options:
            App.KL.Game.Phase.Draft.draw.card.filter.option(checked, text)
        </ul>
      </div>
    </div>
  
  <div style={"margin": "0 10px"}>
    { App.KL.Game.Phase.draw.card.wrapper(82, 208, 2, "", 2, App.KL.Game.Phase.Draft.Assets.filter.background, inner) }
  </div>

// draw filter's radio buttons
App.KL.Game.Phase.Draft.draw.card.filter.option(checked: Bool, text: String): DOM
  let img = 
    if checked then
      App.KL.Game.Phase.Draft.Assets.filter.check_true
    else
      App.KL.Game.Phase.Draft.Assets.filter.check_false
  let id = "FC" | text
  <li id=id style={"margin-bottom": "5px"}>
    <img id=id src=img style={
      "zoom": App.KL.Game.Phase.Draft.draw.fator.string
      "margin-right": "5px"
      "vertical-align": "middle"
    }></img>
    <span id=id style={"color": "white", "text-transform": "uppercase"}>text</span>
  </li>

// HEROES MENU 
// ==================================
// draw heroes menu
App.KL.Game.Phase.Draft.draw.menu(
  selected_hero: Maybe<App.KL.Game.Hero> // hero selected by local user
  page:   String // page selected in draft
  filter: App.KL.Game.Controls.Draft.Filter // filter
): DOM
  let hero_list = App.KL.Game.Controls.Draft.Filter.apply(App.KL.Game.Hero.list, filter)
  let portrait  = App.KL.Game.Phase.Draft.draw.portrait.hero
  let portraits = [ portrait(hero, selected_hero, filter) for hero in hero_list ]
  // portrait's background image width
  // used to fill grid with empty space
  // when filter has no result
  let width_portrait = 44.0
  let width_portrait = width_portrait * App.KL.Game.Phase.Draft.draw.fator.number
  let width_portrait = F64.show(width_portrait)
  <div style={
    "display": if String.eql(page, "heroes") then "grid" else "none" // page
    "max-height": "416px"
    "height": "416px" 
    "overflow": "auto"
    "animation": "fade-in 500ms"
    "grid-template-columns": "repeat(5, minmax("|width_portrait|"px, 1fr))"
    "grid-auto-rows": "max-content"
    "gap": "10px"
    "margin": "0 10px"
    "padding-top": "4px" // because of negative margin
  }>
    for portrait in portraits: portrait
  </div>

// draw hero portrait
App.KL.Game.Phase.Draft.draw.portrait.hero(
  hero: App.KL.Game.Hero, 
  selected_hero: Maybe<App.KL.Game.Hero>, 
  filter: App.KL.Game.Controls.Draft.Filter
): DOM
  let fator = App.KL.Game.Phase.Draft.draw.fator.number
  let bt = 2.0
  let width = 44.0
  let height = 74.0

  // verify if hero is the hero selected
  let is_selected = case selected_hero {
    none: false
    some: String.eql(hero@name, selected_hero.value@name)
  }
  
  let id = "H" | hero@name
  let portrait = hero@draw@b64_portrait(true, 0)
  let inner =
    <div id=id style={"width": "100%", "padding": "0 " | F64.show(bt * fator) | "px", "display": "flex", "flex-direction": "column", "align-items": "center"}>
      <img id=id style={"width": "100%", "transform": "translateY(-"|F64.show((2 + bt)*fator)|"px)", "margin-bottom": "4px"} src=portrait></img>
      <p id=id style={"text-transform": "uppercase", "color": "white"}>hero@name</p>
    </div>
  

  <div id=id style={
    "height": F64.show(fator * height) | "px", 
    "width": F64.show(fator * width) | "px", 
    "display": "flex", 
    "background-image": "url("|App.KL.Game.Phase.Draft.Assets.portrait.hero.background|")", 
    "background-size": "100% 100%", 
    "background-repeat": "no-repeat"
    "padding-top": F64.show(fator * bt) | "px"
    
    "border-style": "solid"
    "border-image-slice": "4"
    "border-image-width": "10px"
    "border-image-repeat": "stretch stretch"
    "border-color": "transparent"
    // if selected then draw border
    "border-image-source": if is_selected then "url("|App.KL.Game.Phase.Draft.Assets.portrait.hero.border|")" else ""
  }>
    {inner}
  </div>

// AUX FUNCTIONS
// ============================================
// complete a list with none's
App.KL.Game.Phase.Draft.draw.pad_right<A: Type>(xs: List<A>, number: Nat): List<Maybe<A>>
  case xs number{
    nil zero:  List.nil!
    nil succ:  List.repeat!(Nat.succ(number.pred), none)
    cons zero: List.map!!((x) some(x), xs)
    cons succ: some(xs.head) & App.KL.Game.Phase.Draft.draw.pad_right!(xs.tail, number.pred)
  }

App.KL.Game.Phase.Draft.draw.get_selected_hero(
  player: Maybe<App.KL.Game.Player>
): Maybe<App.KL.Game.Hero>
  Maybe {
    get user    = player
    get hero_id = user@hero_id
    get hero    = App.KL.Game.Hero.get_by_id(hero_id)
    return hero
  }