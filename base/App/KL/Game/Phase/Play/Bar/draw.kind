App.KL.Game.Phase.Play.Bar.draw_line(destin : Pair<U32, U32>, x : U32, y : U32, z : U32, col : Col32, img : VoxBox) : VoxBox
  open destin
  VoxBox.Draw.line(
    U32.to_i32.signed(x),
    U32.to_i32.signed(y), 
    U32.to_i32.signed(destin.fst), 
    U32.to_i32.signed(destin.snd),
    U32.to_i32.signed(App.KL.Constants.z_index.life_bar),
    col, 
    img)

App.KL.Game.Phase.Play.Bar.progress_line(
  p : U32,
  col: Col32, //U32 -> U32 -> Col32,
  z : U32,
  rect : App.KL.Game.Phase.Play.Bar.Rectangular,
  img: VoxBox,
): VoxBox // Draw a line using p as index in the progress bar

  open rect
  let x = rect.x + p
  let y = rect.y
  if Bool.or(U32.eql(p, 0), U32.gte(p, rect.width)) then 
     img 
  else
    App.KL.Game.Phase.Play.Bar.draw_line({x, y+rect.height-rect.lines_size}, x, y+rect.lines_size, z, col, img) 

porc(base : U32, value : U32, total : U32) : U32
   let base = U32.to_f64(base)
   let value = U32.to_f64(value)
   let total = U32.to_f64(total)
   let v = (total * (value/base))
   F64.to_u32(F64.round(v))

App.KL.Game.Phase.Play.Bar.complete_square(
  bar : App.KL.Game.Phase.Play.Bar.Progress,
  rect : App.KL.Game.Phase.Play.Bar.Rectangular,
  img: VoxBox) : VoxBox
  let min = ((x, y) if U32.ltn(x, y) then x else y) :: U32 -> U32 -> U32
  let max = ((x, y) if U32.ltn(x, y) then y else x) :: U32 -> U32 -> U32

  open rect
  open bar
  let total = bar.max + bar.defense
  let bar_actual = max(porc(total, bar.loss, rect.width), 2) // avoid showing empty bar even if the creature life is not enough to represent a not empty bar
  let bar_defense = porc(total, bar.defense, rect.width)
  let progress = rect.width - (bar_actual + bar_defense)
  
  // Draw the color depending on status by BarProgress
  for i : U32 from 1 to bar_actual with img:
    App.KL.Game.Phase.Play.Bar.progress_line(i, bar.col_ful, App.KL.Constants.z_index.life_bar, rect, img)
  for i : U32 from bar_actual to bar_actual + bar_defense with img :
    App.KL.Game.Phase.Play.Bar.progress_line(i, bar.col_defense, App.KL.Constants.z_index.life_bar, rect, img)
  for i : U32 from bar_actual + bar_defense to rect.width with img:
    // Notice rect.witdth should be rect.width - (bar_actual + bar_defense), however
    // because a possible bad rounding of bar.loss and bar.defense we make sure the progress is always completed
    App.KL.Game.Phase.Play.Bar.progress_line(i, bar.col_empty, App.KL.Constants.z_index.life_bar, rect, img)

  let separator = min(bar.max/6, rect.width/2)
  for i : U32 from 1 to separator with img:   //U32
    App.KL.Game.Phase.Play.Bar.progress_line((i * ((rect.width -1) / separator)) + 1, bar.col_empty, App.KL.Constants.z_index.life_bar, rect, img)  
  img

App.KL.Game.Phase.Play.Bar.draw_bar(
  rect : App.KL.Game.Phase.Play.Bar.Rectangular,
  bar : App.KL.Game.Phase.Play.Bar.Progress,
): VoxBox.Draw<Unit>
  open rect
  // A monadic version of VoxBox
  VoxBox.Draw {
     VoxBox.Draw.set_pos(rect.x, rect.y, App.KL.Constants.z_index.life_bar)
     VoxBox.Draw.new(App.KL.Game.Phase.Play.Bar.draw_line({rect.x, rect.y+rect.height})) // The first horizontal line of rectangle
     VoxBox.Draw.new(App.KL.Game.Phase.Play.Bar.draw_line({rect.x+rect.width, rect.y})) // The second horizontal line of rectangle
  
     VoxBox.Draw.set_pos(rect.x+rect.width, rect.y, App.KL.Constants.z_index.life_bar) 
     VoxBox.Draw.new(App.KL.Game.Phase.Play.Bar.draw_line({rect.x+rect.width, rect.y+rect.height})) // The second horizontal line of rectangle
     VoxBox.Draw.set_pos(rect.x, rect.y+rect.height, App.KL.Constants.z_index.life_bar) 
     VoxBox.Draw.new(App.KL.Game.Phase.Play.Bar.draw_line({rect.x+rect.width, rect.y+rect.height})) // The second vertical line of rectangle
  
     // Complete the rectangle by the BarProgress
     VoxBox.Draw.map(App.KL.Game.Phase.Play.Bar.complete_square(bar, rect))
  }

App.KL.Game.Phase.Play.Bar.draw(x: U32,
  y: U32,
  z : U32,
  height : U32,
  width : U32,
  bar : App.KL.Game.Phase.Play.Bar.Progress,
  col: Col32,
  img: VoxBox,
): VoxBox
  let rect = App.KL.Game.Phase.Play.Bar.Rectangular.new(x, y, height, width, 1)
  let result = App.KL.Game.Phase.Play.Bar.draw_bar(rect, bar, VoxBox.Draw.Paint.new(x, y, App.KL.Constants.z_index.life_bar, col, img))
  result@snd@img
