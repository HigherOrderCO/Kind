App.KL.Game.Phase.Play.draw.canvas.elem(
  local: App.KL.Game.State.Local, 
  game: App.KL.Game, img: VoxBox
): DOM
  <div style={
    "cursor": "url("| App.KL.Game.Phase.Play.draw.get_cursor(local, game) | "), auto"
    "max-width": "max(100vw, 900px)",
    "max-height": "max(100vh, 650px)",
    "overflow": "scroll",
    "display": "flex"
    "justify-content": "center"
    "align-items": "center"
  }>{
    let width = Nat.show(U32.to_nat(local@screen_size@fst / 2))
    let height = Nat.show(U32.to_nat(local@screen_size@snd / 2))
    DOM.vbox({
        "class": "pixel-art" 
        "id": "game_screen",
        "width": width,
        "height": height,
        "scale": "2"
      },
      {},
      App.KL.Game.Phase.Play.draw.canvas(img, local, game)) 
  }</div>

// CANVAS DRAWING
// ================

// draw canvas
App.KL.Game.Phase.Play.draw.canvas(
  img: VoxBox
  local: App.KL.Game.State.Local
  game: App.KL.Game
): VoxBox
  open game
  let hits = case game.moment {
    initial: none
    preparation: none
    execution: some(game.moment.hits)
  }
  let img = App.KL.Game.Phase.Play.draw.canvas.board(game, local@preview, hits, local@user, local@mouse, local@screen_size, img) 
  let img = App.KL.Game.Phase.Play.draw.canvas.bases(game, local@user, local@screen_size, img)
  let img = App.KL.Game.Phase.Play.draw.canvas.cursor(local@mouse, game.board, local@screen_size, img)
  img


// draw canvas board
App.KL.Game.Phase.Play.draw.canvas.landscape(blueprint: App.KL.Game.Board.Blueprint, screen: Pair<U32, U32> img: VoxBox): VoxBox
  let landscape = blueprint@landscape
  for coord:tile in landscape with img:
    App.KL.Game.Phase.Play.draw.canvas.tile.terrain(tile, Hexagonal.Axial.Map.new!, none, coord, screen, img)
  img


App.KL.Game.Phase.Play.draw.canvas.board(
  game:    App.KL.Game
  preview: App.KL.Game.Cast.Preview
  hits:    Maybe<App.KL.Game.Indicators>
  user:    String
  mouse:   Pair<U32, U32>
  screen:  Pair<U32, U32>
  img:     VoxBox
): VoxBox
  open game
  let team        = App.KL.Game.Phase.Draft.to_team(game@players, user) <> App.KL.Game.Team.neutral
  let map         = game@board
  let mouse_coord = Hexagonal.Axial.from_screen_xy(mouse, App.KL.Constants.hexagon_radius, U32.to_i32(screen@fst) / 4, U32.to_i32(screen@snd) / 4)
  let indicators  = App.KL.Game.Phase.Play.Draw.canvas.get_indicators(preview, mouse_coord, user, game)
  let ap_used     = App.KL.Game.Moment.get_player_used_ap(game) // If there is a skill being cast, returns the player address and used ap
  let img         = App.KL.Game.Phase.Play.draw.canvas.landscape(game@blueprint, screen, img)

  for coord:tile in map with img:
    let indicator = Hexagonal.Axial.Map.get!(coord, hits <> indicators)
    let img = App.KL.Game.Phase.Play.draw.canvas.grid(coord, game@moment, screen, img)
    let img = App.KL.Game.Phase.Play.draw.canvas.tile.terrain(tile@terrain, preview@picks, indicator, coord, screen, img)
    let img = App.KL.Game.Phase.Play.draw.canvas.tile.indicator(indicator, coord, screen, img)
    let img = App.KL.Game.Phase.Play.draw.canvas.tile.creature(game, tile@creature, coord, ap_used, screen, user, img)
    let img = App.KL.Game.Phase.Play.draw.canvas.tile.token(game, tile@token, coord, screen, team, img)
    img
  img

// TODO optimize?
App.KL.Game.Phase.Play.draw.canvas.grid(
  coord:  Hexagonal.Axial
  moment: App.KL.Game.Moment
  screen: Pair<U32, U32>
  img:    VoxBox
): VoxBox
  case moment {
    initial: img
    preparation:
      let indicator     = App.KL.Game.Indicator.gray_line
      let indicator_img = App.KL.Game.Indicator.get_img(indicator)
      
      let {x, y} = App.KL.Game.Phase.Play.draw.centralize.new(coord, screen)
      VoxBox.Draw.image(x, y, App.KL.Constants.z_index.grid, indicator_img, img)
    execution: img
  }

App.KL.Game.Phase.Play.draw.canvas.tile.token(
  game: App.KL.Game
  token: Maybe<App.KL.Game.Token>,
  token_coord: Hexagonal.Axial,
  screen: Pair<U32, U32>
  team: App.KL.Game.Team
  img: VoxBox
): VoxBox
  without token: img
  let col = 
    case App.KL.Game.Token.get_dominance(token) as team {
      none: Col32.new(100,100,100,255)
      some:
        if App.KL.Game.Team.eql(team, team.value) then
          Col32.new(0, 0, 255, 255)
        else
          if App.KL.Game.Team.eql(App.KL.Game.Team.neutral, team.value) then
            Col32.new(100,100,100,255)
          else
            Col32.new(255, 0, 0, 255)
    }

  let coords = Hexagonal.Axial.range(token_coord, token@range)
  let board = game@board
  for coord in coords with img:
    let tile = Hexagonal.Axial.Map.get!(coord, board)
    case tile {
      none:
        img
      some:
        let {cx, cy} = 
          Hexagonal.Axial.to_screen_xy(coord, App.KL.Constants.hexagon_radius, U32.to_i32(screen@fst) / 4, U32.to_i32(screen@snd) / 4)
        
        if Hexagonal.Axial.eql(coord, token_coord) then
          VoxBox.Draw.square(cx,cy,App.KL.Constants.z_index.token,10,10,col,img)
        else
          VoxBox.Draw.square(cx,cy,App.KL.Constants.z_index.token,5,5,col,img)
    }
    
  img

  
App.KL.Game.Phase.Play.draw.canvas.bases(
  game: App.KL.Game
  user: String
  screen: Pair<U32, U32>
  img: VoxBox
): VoxBox
  case game@moment {
    initial:
      let player = game@players{user}
      without player: img

      let allies = App.KL.Game.Player.get_allies(player, game@players)
      let bases  = game@blueprint@bases
      for coord:team in bases with img:
        let indicator = App.KL.Game.Team.get_indicator(team)
        App.KL.Game.Phase.Play.draw.canvas.tile.indicator(some(indicator), coord, screen, img)

      for l_user:player in allies with img:
        let init_pos = player@init_pos
        without init_pos: img
        let indicator =
          if String.eql(user, l_user) then 
            App.KL.Game.Indicator.green_line
          else
            App.KL.Game.Indicator.gray_line
        App.KL.Game.Phase.Play.draw.canvas.tile.indicator(some(indicator), init_pos, screen, img)
      img
    preparation: img
    execution: img
  }

App.KL.Game.Phase.Play.Draw.canvas.get_indicators(
  preview: App.KL.Game.Cast.Preview 
  target: Hexagonal.Axial,
  user:   String,
  game:   App.KL.Game
): App.KL.Game.Indicators

  Maybe {
    get pair       = preview@skill
    let skill_key  = pair@fst
    get skill      = App.KL.Game.Skill.get(user, skill_key, game)
    let targets    = App.KL.Game.Picks.get_skill_coords(skill_key, preview@picks)
    let targets    = target & targets
    let game       = App.KL.Game.Cast.simulate(skill@delay, (x) String.eql(x@player, user), game)
    get center     = App.KL.Game.Board.find_player_coord(user, game@board)
    get creature   = App.KL.Game.Board.Creature.get(center, game@board)
    let indicator  = App.KL.Game.Indicator.blue_line
    let indicators = Hexagonal.Axial.Map.new!
    let distance   = App.KL.Game.Creature.Status.movement_range(Nat.to_i32(U64.to_nat(skill@range)), creature)
    let coords     = Hexagonal.Axial.range(center, distance)
    // set range indicator
    for coord in coords with indicators:
      Hexagonal.Axial.Map.set!(coord, indicator, indicators)
    let areas = App.KL.Game.Effect.indicators.get_indicators(center, skill, {skill_key, user} targets, game@board)
    return Hexagonal.Axial.Map.union!(indicators, areas)
  } <> Hexagonal.Axial.Map.new<App.KL.Game.Indicator>

// draw mouse indicator
App.KL.Game.Phase.Play.draw.canvas.cursor(
  mouse: Pair<U32, U32>
  board: App.KL.Game.Board
  screen: Pair<U32, U32>  
  img: VoxBox
): VoxBox
  coord = Hexagonal.Axial.from_screen_xy(mouse, App.KL.Constants.hexagon_radius, U32.to_i32(screen@fst) / 4, U32.to_i32(screen@snd) / 4)
  {x,y} = App.KL.Game.Phase.Play.draw.centralize.old(coord, screen)
  let has_tile = App.KL.Game.Tile.get(coord, board)
  case has_tile { 
    none:
      img
    some:
      VoxBox.Draw.image(x, y, App.KL.Constants.z_index.cursor, App.KL.Game.Field.Mouse.mouse_ui, img)
  }

// draws tile terrain
App.KL.Game.Phase.Play.draw.canvas.tile.terrain(
  terrain:    App.KL.Game.Terrain
  picks:      App.KL.Game.Picks
  indicator:  Maybe<App.KL.Game.Indicator>
  tile_coord: Hexagonal.Axial
  screen:     Pair<U32, U32>
  img:        VoxBox
): VoxBox
  let indicator = indicator <> App.KL.Game.Indicator.background
  let {i, j}    = App.KL.Game.Phase.Play.draw.centralize.new(tile_coord, screen)
  let field     = App.KL.Game.Field.get_by_id.default(terrain@field_id)
  let field_drawing = field@draw(terrain, indicator)
  let tile_drawing  = VoxBox.Draw.image(i, j, I32.to_u32(tile_coord@j + App.KL.Constants.z_index.terrain), field_drawing, img)
  let tile_drawing  = App.KL.Game.Phase.Play.draw.letter(tile_coord, picks, screen, tile_drawing)
  tile_drawing

App.KL.Game.Phase.Play.draw.canvas.tile.indicator(
  indicator:  Maybe<App.KL.Game.Indicator>
  tile_coord: Hexagonal.Axial
  screen:     Pair<U32,U32>
  img:        VoxBox
): VoxBox
  without indicator: img
    let {i, j} = App.KL.Game.Phase.Play.draw.centralize.new(tile_coord, screen)
    let ind_img = App.KL.Game.Indicator.get_img(indicator)
    let img = VoxBox.Draw.image(i, j, App.KL.Constants.z_index.indicator, ind_img, img)
    img

App.KL.Game.Phase.Play.draw.canvas.tile.creature.get_draw_pose(game: App.KL.Game, coord: Hexagonal.Axial): App.KL.Game.Hero.Draw.Pose
  open game
  case game.moment {
    initial: App.KL.Game.Hero.Draw.Pose.idle
    preparation:
      App.KL.Game.Hero.Draw.Pose.idle
    execution: case game.moment.casts {
      nil:
        App.KL.Game.Hero.Draw.Pose.idle
      cons: Maybe { 
        //get success = if game.moment.success then some(unit) else none
        get success = case game.moment.success { 
          left: none
          right: some(unit)
          }
        get creature = App.KL.Game.Board.Creature.get(coord, game.board)
        let cast = game.moment.casts.head
        get player = creature@player
        open cast
        if String.eql(player, cast.player) then Maybe {
          let frame = game.moment.frame
          let center = game.moment.coord <> coord
          let target = cast.target
          let letter = cast.letter
          get skill = App.KL.Game.Cast.get_skill(cast, game)
          get creature = App.KL.Game.Cast.get_creature(cast, game)
          return App.KL.Game.Hero.Draw.Pose.cast(frame, center, target, letter, skill, creature)
        } else none
      } <> App.KL.Game.Hero.Draw.Pose.idle
    }
  }

// draws tile creature if any
App.KL.Game.Phase.Play.draw.canvas.tile.creature(
  game: App.KL.Game
  creature: Maybe<App.KL.Game.Creature>,
  coord: Hexagonal.Axial,
  ap_used: Maybe<Pair<String, I32>>
  screen: Pair<U32,U32>
  user_id: String
  img: VoxBox
): VoxBox
  case creature {
    none: img
    some:
      let team = App.KL.Game.Phase.Draft.to_team(game@players, user_id)
      let hero = creature.value@hero
      let draw_pose = App.KL.Game.Phase.Play.draw.canvas.tile.creature.get_draw_pose(game, coord)
      let {draw_coord, draw_voxbox} = hero@draw@vbox_img(draw_pose)
      let draw_coord = draw_coord <> coord
      //let aux = I32.to_u32(App.KL.Constants.hexagon_radius) //U32
      //let cy = cy - (aux * 2) //U32
      //let cx = cx - aux //U32
      //log(U32.show( cy + 100))
      {cx, cy} = Hexagonal.Axial.to_screen_xy(draw_coord, App.KL.Constants.hexagon_radius, U32.to_i32(screen@fst) / 4, U32.to_i32(screen@snd) / 4)
      let img_x = cx - (128::U32)
      let img_y = cy - (128::U32)
      let height = I32.to_u32(hero@draw@height)
      let img = VoxBox.Draw.image(img_x, img_y, App.KL.Constants.z_index.hero, draw_voxbox, img)
      open creature.value as creature
      case creature.player { 
        none:
          img
        some:
          let img = App.KL.Game.Phase.Play.Bar.show_hp(cx - 17, (cy - height), user_id, team <> App.KL.Game.Team.neutral, creature.value, img)
          let img = App.KL.Game.Phase.Play.draw.ap(img_x - 12, (img_y - height) - 3, creature.value, ap_used, img)
          img
      }

  }
