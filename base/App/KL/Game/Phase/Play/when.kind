App.KL.Game.Phase.Play.when(
  local: App.KL.Game.State.Local
  game: App.KL.Game
  event: App.Event,
): IO<Maybe<App.State.local<App.KL.State>>>
  let room = String.take(16, Crypto.Keccak.hash(local@room))
  open game
  case event {
    frame:
      let picks = App.KL.Game.Cast.picks_of(local@user, game)
      let preview = local@preview <- (local@preview@picks <- picks)
      App.set_local!(App.KL.State.Local.game(preview))
    mouse_move:
      if String.eql("game_screen", event.id) then
        let {x,y} = event.mouse_pos
        App.set_local!(App.KL.State.Local.game(local@mouse <- {x / 2, y / 2}))
      else
        App.pass!
    key_down:
      let preview = local@preview
      switch U16.eql(event.code) {
        27#16:
          let preview = preview@skill <- none
          IO {
            App.new_post!(room, App.KL.Game.Phase.Play.Event.cast.cancel_casts)
            App.set_local!(App.KL.State.Local.game(local@preview <- preview))
          }
      }default
      local = 
        Maybe {
          get casted_skill  = App.KL.Game.Skill.get(local@user, event.code, game)
          let skill       =
            case preview@skill as skill {
              none: 
                some({event.code, 1})
              some:
                if skill.value@fst =? event.code then
                  none
                else 
                  some({event.code, 1})
            }          
          return local@preview <- preview@skill <- skill
        } <> local
      IO {
        App.new_post!(room, App.KL.Game.Phase.Play.Event.cast.cancel_skill(event.code))
        App.set_local!(App.KL.State.Local.game(local))
      }
    mouse_down: 
      case game.moment {
        preparation:
          App.KL.Game.Phase.Play.when.preparation.skill_use(room, local, game)
        execution:
          let preview = local@preview
          let preview = preview@skill <- none
          App.set_local!(App.KL.State.Local.game(local@preview <- preview))
      }
  } default App.pass!


App.KL.Game.Phase.Play.when.preparation.skill_use(room: String, local: App.KL.Game.State.Local, game: App.KL.Game): IO<Maybe<App.State.local<App.KL.State>>>
  let preview = local@preview
  case preview@skill as skill{
    none: App.pass!
    some:
      let {char, count} = skill.value // Skill key and count for how many coords have been chosen after selecting skill
      let coord = Hexagonal.Axial.from_screen_xy(local@mouse, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
      let skill = App.KL.Game.Skill.get(local@user, char, game)
      case skill {
        none: App.pass!
        some:
          let pattern     = App.KL.Game.Skill.get_pattern(skill.value)

          // Checks if skill can or if it will be cast at a repeating tile
          let can_cast =
            if App.KL.Game.Skill.can_repeat(skill.value) then
              true
            else
              let picks = preview@picks
              let can_cast = true 

              // Checks if there is already a pick for that tile and skill
              for new_coord:new_char in picks with can_cast: 
                can_cast && not((new_coord =? coord) && (new_char =? char))
              can_cast

          // Updates skill field in preview until all the required picks have been done
          let new_skill = 
            if count <? pattern then
              some({char, count + 1})
            else
              none
          let preview = preview@skill <- new_skill

          // Updates data
          if can_cast then
            IO {
              App.new_post!(room, App.KL.Game.Phase.Play.Event.cast.serial(char, coord))
              App.set_local!(App.KL.State.Local.game(local@preview <- preview))
            }
          else
            App.pass!
      }
    }