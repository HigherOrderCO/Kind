App.KL.Game.Board: Type
  Hexagonal.Axial.Map<App.KL.Game.Tile>

// get tile from board
App.KL.Game.Board.get(
  coord: Hexagonal.Axial,
  board: App.KL.Game.Board
): Maybe<App.KL.Game.Tile>
  Hexagonal.Axial.Map.get!(coord, board)

// set tile in some coord on board
App.KL.Game.Board.set(
  coord: Hexagonal.Axial,
  tile: App.KL.Game.Tile,
  board:App.KL.Game.Board
): App.KL.Game.Board
  Hexagonal.Axial.Map.set!(coord, tile, board)

// push entity to board
App.KL.Game.Board.push(
  coord : Hexagonal.Axial,
  entity: App.KL.Game.Entity
  board : App.KL.Game.Board
): App.KL.Game.Board

  tile = App.KL.Game.Board.get(coord, board)
  case tile { 
    none: 
      case entity {
        terrain:
          new_tile = App.KL.Game.Tile.new(entity.value, none, none)
          App.KL.Game.Board.set(coord, new_tile, board)
      } default board
    some:
      open tile.value as tile
      case entity {
        terrain:
          background_tile = tile.value@background <- entity.value
          App.KL.Game.Board.set(coord, background_tile, board)
        creature:
          creature_tile = tile.value@creature <- some(entity.value)
          App.KL.Game.Board.set(coord, creature_tile, board)
        animation:
          animation_tile = tile.value@animation <- some(entity.value)
          App.KL.Game.Board.set(coord, animation_tile, board)
        token:
          token_tile = tile.value@token <- some(entity.value)
          App.KL.Game.Board.set(coord, token_tile, board)
        asdsadadddd:
          token_tile = tile.value@asdsadadddd <- some(entity.value)
          App.KL.Game.Board.set(coord, token_tile, board)
      }
    }

App.KL.Game.Board.is_occupied(coord: Hexagonal.Axial, board: App.KL.Game.Board): Bool
  let tile = App.KL.Game.Board.get(coord, board)
  case tile {
    none: false
    some:
      open tile.value
      case tile.value.creature { 
        none: false
        some: true
      }
  }

// TODO: optimize
// Returns a map with the player Address as the key to its respective coordinate 
App.KL.Game.Board.find_players(board: App.KL.Game.Board): Map<Hexagonal.Axial>
  let tile_list = Hexagonal.Axial.Map.to_list!(board)
  let players = []
  for coord_tile in tile_list with players:
    let {coord,tile} = coord_tile
    let creature = tile@creature
    case creature {
      none: players
      some: 
        let player = creature.value@player
        case player {
          none: players
          some: {player.value, coord} & players
        }
    }
  Map.from_list!(players)

// TODO: optimize
// Returns the position of a player
App.KL.Game.Board.find_player_coord(player: String, board: App.KL.Game.Board): Maybe<Hexagonal.Axial>
  App.KL.Game.Board.find_players(board){player}
