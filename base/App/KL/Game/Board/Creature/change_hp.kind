App.KL.Game.Board.Creature.change_hp(
  value: I32
  pos: Hexagonal.Axial
  board: App.KL.Game.Board
): Pair<I32, Pair<App.KL.Game.Board, Maybe<String>>>

  creature = App.KL.Game.Board.Creature.get(pos, board)
  without creature: {0, {board, none}}
    open creature
    open creature.hero as hero
    let new_hp = I32.max((creature@hp + value) , 0)
    let new_hp = I32.min(new_hp, hero.max_hp)
    let hp_diff = new_hp - creature@hp 
    let aux = App.KL.Game.Board.Creature.change_hp.aux(hp_diff)
    let board = App.KL.Game.Board.Creature.modify_at(aux, pos, board)
    let new_creature = App.KL.Game.Board.Creature.change_hp.aux(hp_diff, creature)
    if I32.lte(new_creature@hp, 0) then
      let board = App.KL.Game.Board.Creature.del(pos, board)
      {hp_diff, {board, new_creature@player}}
    else
      {hp_diff, {board, none}}




App.KL.Game.Board.Creature.change_hp.aux(
  change: I32,
  creature: App.KL.Game.Creature
): App.KL.Game.Creature

  open creature
  open creature.hero as hero
    verify = I32.cmp(change, 0)
    case verify { 
      ltn:
        //dmg
        {status, blocked} = App.KL.Game.Creature.Status.shield.hit(I32.neg(change), creature.status)
        true_dmg = change + blocked 
        new_creature = creature@status <- status
        new_hp = I32.min((creature.hp + true_dmg), hero.max_hp)
        new_creature@hp <- new_hp
      eql:
        //nothing
        creature
      gtn:
        //heal
        new_hp = I32.min((creature.hp + change), hero.max_hp)
        creature@hp <- new_hp
    }
