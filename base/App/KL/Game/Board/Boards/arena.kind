App.KL.Game.Board.Boards.arena: App.KL.Game.Board.Blueprint
  App.KL.Game.Board.Blueprint.new(
    App.KL.Game.Board.Blueprint.build.terrains(App.KL.Game.Board.Boards.arena.terrains)
    App.KL.Game.Board.Blueprint.build.tokens(App.KL.Game.Board.Boards.arena.tokens)
  )

App.KL.Game.Board.Boards.arena.tokens: List<Pair<Pair<I32, I32>, App.KL.Game.Token>>
  [
    { {0 :: I32, 0::I32}, App.KL.Game.Token.new(0, 1, 1, 2) }
    { {0 :: I32,-5::I32}, App.KL.Game.Token.new(0, 1, 1, 2) }
    { {0 :: I32, 5::I32}, App.KL.Game.Token.new(0, 1, 1, 2) }
  ]


App.KL.Game.Board.Boards.arena.terrains: List<Pair<Pair<I32, I32>, Nat>>
  let extra_width  = App.KL.Constants.board_extra_width
  let board_size   = App.KL.Constants.board_size
  let n_board_size = I32.neg(board_size)
  
  let field_id = 1
  let result = []
  

  for j : I32 from n_board_size to (board_size + 1) with result:
      // https://www.redblobgames.com/grids/hexagons/#range-coordinate
      // iterates only in valid coordinates
      let a = I32.max(n_board_size, I32.neg(j) - board_size)
      let b = I32.min(  board_size, I32.neg(j) + board_size)

      for i : I32 from (a - extra_width) to (b + extra_width + 1) with result: 
        // generate int axial coordinate
        // coord   = Hexagonal.Axial.new(i, j)

        {{i, j}, field_id} & result
        
      result
  result
