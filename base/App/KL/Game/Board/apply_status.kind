App.KL.Game.Board.apply_status(
  game: App.KL.Game
): App.KL.Game

  let result = {game@board, {game@cemetery, {} :: App.KL.Game.PlayerData}}
  for coord:tile in game@board with result:

    // Applies Tile's Effect if it has one
    let result = Maybe {
      get effect = tile@effect
      let activation = effect@activation
      let result = case activation { 
        turn_end:
          let tile_result = effect@effect(coord, [coord], effect@cast_data, result@fst)
          let result = case tile_result {
            err: result
            new: 
              let board = tile_result.board
              let cemetery = result@snd@fst ++ tile_result.cemetery
              let player_data = App.KL.Game.Effect.player_data.union(result@snd@snd, tile_result.player_data)
              {board, {cemetery, player_data}}
          }
          result
        walking: result
      }
      return result
    } <> result    
    let new_creature = App.KL.Game.Board.Creature.get(coord, result@fst)
    without new_creature: result

    // Applies all damage or healing from Statuses in the creature in that tile
    let status_list = new_creature@status
    for status in status_list with result:
      let effect = App.KL.Game.Creature.Status.get_effect(status)
      open status
      let effect_result = effect(coord, coord, [coord], status.cast_data, result@fst)
      case effect_result { 
        err: result
        new: 
          let board = effect_result.board
          let cemetery = result@snd@fst ++ effect_result.cemetery
          let player_data = App.KL.Game.Effect.player_data.union(result@snd@snd, effect_result.player_data)
          {board, {cemetery, player_data}}
      }
    result
    
  // Reduces duration for all Tile Effects
  let new_board     = App.KL.Game.Board.tile_update(result@fst) 
  // Updates Scoreboard and Recap in the list of players
  let new_players   = App.KL.Game.Player.player_data.map.update(game@players, result@snd@snd)
  // Updates cemetery if a creature was killed by a Tile effect or by damage over time
  let new_cemetery  = game@cemetery ++ result@snd@fst
  let game = game@board     <- new_board
  let game = game@cemetery  <- new_cemetery
  let game = game@players   <- new_players
  game
