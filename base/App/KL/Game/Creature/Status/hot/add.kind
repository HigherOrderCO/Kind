App.KL.Game.Creature.Status.hot.add(
  creature: App.KL.Game.Creature
  cast_data: Pair<Char, String>
  id: String
  duration: I32
  amount: I32
): App.KL.Game.Creature
  
  //HOT = Heal Over Time
  let hot_added = App.KL.Game.Creature.Status.hot.add.aux(cast_data, id, duration, amount, creature@status)
  creature@status <- hot_added

App.KL.Game.Creature.Status.hot.add.aux(
  cast_data: Pair<Char, String>
  id: String
  duration: I32
  amount: I32
  status: List<App.KL.Game.Creature.Status>
): List<App.KL.Game.Creature.Status>

  let new_hot = App.KL.Game.Creature.Status.hot(cast_data, id, duration, 1, amount)
  case status { 
    nil:
      new_hot & status
    cons:
      case status.head { 
        hot: 
          let is_same = String.eql(id, status.head.id)
          if is_same then
            let hot_duration = status.head.duration + 1
            let hot_stacks = status.head.stack + 1
            let hot_heal = status.head.amount * 2
            if I32.gtn(hot_stacks, 3) then
              App.KL.Game.Creature.Status.hot(status.head.cast_data, "final_apply", 1, 0, status.head.amount + 2) & status.tail
            else 
              App.KL.Game.Creature.Status.hot(status.head.cast_data, status.head.id, hot_duration, hot_stacks, hot_heal) & status.tail
          else
            status.head & App.KL.Game.Creature.Status.hot.add.aux(cast_data, id, duration, amount,  status.tail)
      }default status.head & App.KL.Game.Creature.Status.hot.add.aux(cast_data, id, duration, amount,  status.tail)
  }
