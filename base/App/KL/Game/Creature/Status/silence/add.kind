App.KL.Game.Creature.Status.silence.add(
  creature: App.KL.Game.Creature
  cast_data: Pair<Char, String>
  duration: I32
): App.KL.Game.Creature
  
  let silence_added = App.KL.Game.Creature.Status.silence.add.aux(cast_data, duration, creature@status)
  creature@status <- silence_added

App.KL.Game.Creature.Status.silence.add.aux(
  cast_data: Pair<Char, String>
  duration: I32
  status: List<App.KL.Game.Creature.Status>
): List<App.KL.Game.Creature.Status>

  let new_silence = App.KL.Game.Creature.Status.silence(cast_data, duration)
  case status { 
    nil:
      new_silence & status
    cons:
      case status.head { 
        silence: 
          status
      }default status.head & App.KL.Game.Creature.Status.silence.add.aux(cast_data, duration, status.tail)
  }
