App.KL.Game.Creature.Status.block.add(
  creature: App.KL.Game.Creature
  cast_data: Pair<Char, String>
  id: String
  duration: I32
  caster: String
): App.KL.Game.Creature
  
  let block_added = App.KL.Game.Creature.Status.block.add.aux(cast_data, id, duration, caster, creature@status)
  creature@status <- block_added

App.KL.Game.Creature.Status.block.add.aux(
  cast_data: Pair<Char, String>
  id: String
  duration: I32
  caster: String
  status: List<App.KL.Game.Creature.Status>
): List<App.KL.Game.Creature.Status>

  let new_block = App.KL.Game.Creature.Status.block(cast_data, id, duration, caster)
  case status { 
    nil:
      new_block & status
    cons:
      case status.head { 
        block:
          is_same = String.eql(id, status.head.id)
          if is_same then
            status
          else
            status.head & App.KL.Game.Creature.Status.block.add.aux(cast_data, id, duration, caster, status.tail)
      }default status.head & App.KL.Game.Creature.Status.block.add.aux(cast_data, id, duration, caster, status.tail)
  }
