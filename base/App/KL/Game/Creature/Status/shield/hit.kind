// Attempts to hit a list of shields
// Returns the updated status list, and the total damage blocked
App.KL.Game.Creature.Status.shield.hit(
  damage: I32
  status: List<App.KL.Game.Creature.Status>
): Pair<List<App.KL.Game.Creature.Status>, I32>
  case status {
    nil:
      {[], 0::I32}
    cons: case status.head {
      shield:
        let blocked = I32.min(status.head.amount, damage)
        let remaining_damage = I32.sub(damage, blocked)
        let remaining_shield = I32.sub(status.head.amount, blocked)
        let status_head = App.KL.Game.Creature.Status.shield(status.head.id, status.head.duration, remaining_shield)
        let {status_tail, total_blocked} = App.KL.Game.Creature.Status.shield.hit(remaining_damage, status.tail)
        let status = if I32.gtn(remaining_shield, 0) then status_head & status_tail else status_tail
        let total_blocked = I32.add(blocked, total_blocked)
        {status, total_blocked}
    } default 
      let {status_tail, total_blocked} = App.KL.Game.Creature.Status.shield.hit(damage, status.tail)
      let status = status.head & status_tail
      {status, total_blocked}
  }
