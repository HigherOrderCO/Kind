App.KL.Game.Creature.Status.burn.add(
  creature: App.KL.Game.Creature
  id: String
  duration: I32
  dmg: I32
): App.KL.Game.Creature
  
  let burn_added = App.KL.Game.Creature.Status.burn.add.aux(id, duration, I32.neg(dmg), creature@status)
  creature@status <- burn_added

App.KL.Game.Creature.Status.burn.add.aux(
  id: String
  duration: I32
  dmg: I32
  status: List<App.KL.Game.Creature.Status>
): List<App.KL.Game.Creature.Status>

  new_burn = App.KL.Game.Creature.Status.burn(id, duration, dmg)
  case status { 
    nil:
      new_burn & status
    cons:
      case status.head { 
        burn: 
          is_same = String.eql(id, status.head.id)
          if is_same then
            new_burn & status.tail
          else
            status.head & App.KL.Game.Creature.Status.burn.add.aux(id, duration, dmg, status.tail)
      }default status.head & App.KL.Game.Creature.Status.burn.add.aux(id, duration, dmg, status.tail)
  }
