// Updates the Creature with its new Status
App.KL.Game.Creature.Status.update(
  creature: App.KL.Game.Creature
): App.KL.Game.Creature

  open creature
  let status_update = App.KL.Game.Creature.Status.update.aux(creature.status)
  creature@status <- status_update


// Decreases the duration of all active status and remove expired ones
App.KL.Game.Creature.Status.update.aux(
  status: List<App.KL.Game.Creature.Status>
): List<App.KL.Game.Creature.Status>
  case status {
    nil:
      []
    cons: 
      let head = case status.head {
        block : App.KL.Game.Creature.Status.block(status.head.cast_data, status.head.id, I32.sub(status.head.duration, 1), status.head.caster)
        //damage over time(dot)
        dot : App.KL.Game.Creature.Status.dot(status.head.cast_data, status.head.id, I32.sub(status.head.duration, 1), status.head.stack, status.head.amount)
        haste : App.KL.Game.Creature.Status.haste(status.head.cast_data, I32.sub(status.head.duration, 1), status.head.amount)
        //heal over time(hot)
        hot : App.KL.Game.Creature.Status.hot(status.head.cast_data, status.head.id, I32.sub(status.head.duration, 1), status.head.stack, status.head.amount)
        invulnerable: App.KL.Game.Creature.Status.invulnerable(status.head.cast_data, status.head.id, I32.sub(status.head.duration ,1))
        protect: App.KL.Game.Creature.Status.protect(status.head.cast_data, I32.sub(status.head.duration, 1), status.head.amount)
        root: App.KL.Game.Creature.Status.root(status.head.cast_data, I32.sub(status.head.duration, 1))
        shield: App.KL.Game.Creature.Status.shield(status.head.cast_data, status.head.id, I32.sub(status.head.duration, 1), status.head.amount)
        silence: App.KL.Game.Creature.Status.silence(status.head.cast_data, I32.sub(status.head.duration, 1))
        slow : App.KL.Game.Creature.Status.slow(status.head.cast_data, I32.sub(status.head.duration, 1), status.head.amount)
        stun: App.KL.Game.Creature.Status.stun(status.head.cast_data, I32.sub(status.head.duration, 1))
        weaken : App.KL.Game.Creature.Status.weaken(status.head.cast_data, I32.sub(status.head.duration, 1), status.head.amount)
      }
      let tail = App.KL.Game.Creature.Status.update.aux(status.tail)
      case head {
        block : if I32.gtn(head.duration,0) then head & tail else tail
        // damage over time (dot)
        dot : if I32.gtn(head.duration,0) then head & tail else tail
        haste : if I32.gtn(head.duration,0) then head & tail else tail
        //heal over time(hot)
        hot : if I32.gtn(head.duration,0) then head & tail else tail
        invulnerable : if I32.gtn(head.duration,0) then head & tail else tail
        protect : if I32.gtn(head.duration,0) then head & tail else tail
        root : if I32.gtn(head.duration,0) then head & tail else tail
        shield: if I32.gtn(head.duration,0) then head & tail else tail
        silence: if I32.gtn(head.duration,0) then head & tail else tail
        slow: if I32.gtn(head.duration,0) then head & tail else tail
        stun: if I32.gtn(head.duration,0) then head & tail else tail
        weaken : if I32.gtn(head.duration,0) then head & tail else tail
      }
  }
