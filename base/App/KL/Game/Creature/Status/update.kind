// Updates the Creature with its new Status
App.KL.Game.Creature.Status.update(
  creature: App.KL.Game.Creature
): App.KL.Game.Creature

  open creature
  let status_update = App.KL.Game.Creature.Status.update.aux(creature.status)
  creature@status <- status_update


// Decreases the duration of all active status and remove expired ones
App.KL.Game.Creature.Status.update.aux(
  status: List<App.KL.Game.Creature.Status>
): List<App.KL.Game.Creature.Status>
  case status {
    nil:
      []
    cons: 
      let head = case status.head {
        burn : App.KL.Game.Creature.Status.burn(status.head.id, I32.sub(status.head.duration, 1), status.head.amount)
        haste : App.KL.Game.Creature.Status.haste(I32.sub(status.head.duration, 1), status.head.amount)
        poison : App.KL.Game.Creature.Status.poison(status.head.id, I32.sub(status.head.duration, 1), status.head.amount)
        root: App.KL.Game.Creature.Status.root(I32.sub(status.head.duration, 1))
        silence: App.KL.Game.Creature.Status.silence(I32.sub(status.head.duration, 1))
        stun: App.KL.Game.Creature.Status.stun(I32.sub(status.head.duration, 1))
        shield: App.KL.Game.Creature.Status.shield(status.head.id, I32.sub(status.head.duration, 1), status.head.amount)
        weaken : App.KL.Game.Creature.Status.weaken(I32.sub(status.head.duration, 1), status.head.amount)
      }
      let tail = App.KL.Game.Creature.Status.update.aux(status.tail)
      case head {
        burn : if I32.gtn(head.duration,0) then head & tail else tail
        haste : if I32.gtn(head.duration,0) then head & tail else tail
        poison : if I32.gtn(head.duration,0) then head & tail else tail
        root : if I32.gtn(head.duration,0) then head & tail else tail
        silence: if I32.gtn(head.duration,0) then head & tail else tail
        stun: if I32.gtn(head.duration,0) then head & tail else tail
        shield: if I32.gtn(head.duration,0) then head & tail else tail
        weaken : if I32.gtn(head.duration,0) then head & tail else tail
      }
  }
