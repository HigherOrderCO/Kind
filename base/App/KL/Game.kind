// TODO make alias for time -> U64 and base64 -> String

// Local State
// ===========

type App.KL.Game.State.Local {
  new(
    user: String
    room: String
    tab:  String
    preview: App.KL.Game.Cast.Preview
    mouse: Pair<U32, U32>
  )
}

App.KL.Game.State.Local.init(user: String, room: String): App.KL.Game.State.Local
  let preview = App.KL.Game.Cast.Preview.new(none, Hexagonal.Axial.Map.new!)
  let mouse   = {0,0}
  let tab     = "D"
  App.KL.Game.State.Local.new(user, room, tab, preview, mouse)

// Global State
// ============

type App.KL.Game {
  new(
    phase: App.KL.Game.Phase         // current phase: draft or play?
    turn: U64                        // current turn
    moment: App.KL.Game.Moment       // current moment: preparation or animation?
    players: Map<App.KL.Game.Player> // human players connected to board creatures
    board: App.KL.Game.Board         // the game map, including tiles, creatures, objects
    casts: List<App.KL.Game.Cast>    // all skills casted on the current turn
    score: App.KL.Game.Score
    cemetery: App.KL.Game.Cemetery
  )
}

type App.KL.Game.Phase {
  draft
  play
  end
}

// Initial state
App.KL.Game.start: App.KL.Game
  let phase = App.KL.Game.Phase.draft
  let turn = 0#64
  let moment = App.KL.Game.Moment.preparation(App.KL.Constants.round_time)
  let players = Map.new!
  let board = Hexagonal.Axial.Map.new!
  let tick = 0#64
  let casts = []
  let score = App.KL.Game.Score.new({0,0}, App.KL.Constants.max_score)
  let cemetery = []
  App.KL.Game.new(phase, turn, moment, players, board, casts, score, cemetery)

// Render function
// ===============

App.KL.Game.draw(img: VoxBox, local: App.KL.Game.State.Local, global: App.KL.Global.State): DOM
  let style = {
    "cursor": "url("|App.KL.Game.Cursor.get_img(App.KL.Game.Cursor.default)|"), auto"
  }

  <div style=style>{
    let game = global@game
    case game {
      none: <div>"Not ingame."</div>
      some: <div>{
        let phase = game.value@phase
        case phase {
          play : App.KL.Game.Phase.Play.draw(img, local, game.value)
          draft: App.KL.Game.Phase.Draft.draw(local, global)
          end  : App.KL.Game.Phase.End.draw(local, game.value)
        } 
      }</div>
    }
  }</div>

// Local events
// ============

App.KL.Game.when(
  local: App.KL.Game.State.Local
  global: App.KL.Global.State,
  event: App.Event
): IO<Maybe<App.State.local<App.KL.State>>>
  open global
  case global.game as game {
    none: App.pass!
    some: 
      open game.value as game_info
      case game_info.phase {
        play: App.KL.Game.Phase.Play.when(local, game.value, event)
        draft: App.KL.Game.Phase.Draft.when(local, game.value, event)
        end: App.KL.Game.Phase.Draft.when(local, game.value, event)
      }
  }

// Global Events
// =============

type App.KL.Game.Event {
  draft(event: App.KL.Game.Phase.Draft.Event)
  play(event: App.KL.Game.Phase.Play.Event)
  end(event: App.KL.Game.Phase.End.Event)
} deriving (serializer, deserializer)

App.KL.Game.tick(tick: U64, game: App.KL.Game): App.KL.Game
  open game
  case game.phase {
    draft: App.KL.Game.Phase.Draft.tick(tick, game)
    play : App.KL.Game.Phase.Play.tick(tick, game)
    end  : App.KL.Game.Phase.End.tick(tick, game)
  }

App.KL.Game.post(
  time: U64
  room: String
  addr: String
  event: App.KL.Game.Event
  game: App.KL.Game
): App.KL.Game
  open game
  case event game.phase {
    draft draft : App.KL.Game.Phase.Draft.post(time, room, addr, event.event, game)
    play  play  : App.KL.Game.Phase.Play.post(time, room, addr, event.event, game)
    end   end   : App.KL.Game.Phase.End.post(time, room, addr, event.event, game)
  } default game
