App.BoardBuilder.Lobby.When(
  event: App.Event, 
  local: App.BoardBuilder.Lobby.State.local, 
  global: App.BoardBuilder.State.global
): IO<Maybe<App.State.local<App.BoardBuilder.State>>>
  case event {
    // init:
      // let new_local = local@user <- String.to_lower(event.user)
      // App.set_local!(App.BoardBuilder.State.local.lobby(new_local))
    input:
      let local = local@room_input <- event.text
      App.set_local!(App.BoardBuilder.State.local.lobby(local))
    mouse_click:
  
      switch String.eql(event.id) {
        "random": IO {
          get rnd = IO.random(10000000000)
          let str = Nat.show(rnd)
          let room = "5c4c494e" | String.take(8, str)
          let new_local = local@room_input <- room
          App.set_local!(App.BoardBuilder.State.local.lobby(new_local))
        }
        "ready": 
          case local@room_input {
            nil: App.pass!
            cons:
              IO {
                App.watch!(local@room_input)
                // App.new_post!(local@room_input, App.KL.Game.Phase.Draft.Event.join_room.serial)
                App.set_local!(App.BoardBuilder.State.local.builder(App.BoardBuilder.Lobby.When.init_builder(local@room_input)))
              }
          }
      } default App.pass!
  } default App.pass!

App.BoardBuilder.Lobby.When.init_builder(room: String): App.BoardBuilder.Builder.State.local
  let canvas_size = {App.KL.Constants.center_x * 2, App.KL.Constants.center_y * 2}
  let mouse = none
  let mouse_press = false
  let terrain = 1
  let command = 'X'
  let array = 
    "Use left mouse button to create tiles \n" |
    "X and Z will change between add and del modes respectively \n" |
    "Ctrl and Shift will alternate between normal view and technical view: \n" |
    "Normal view: Shows the map as it is seen, Tokens, Bases, and Initial points are hidden. Landscapes are shown like Terrains. \n" |
    "Technical view: Landscape are shown as gray tiles, Bases are a filled blue/red tiles, Initial are blue/red outlines, and Tokens' influence range is shown as a gray outline. \n" |
    "Tiles types: \n" |
    "Terrain: Normal Tile, can be stepped. \n" |
    "Landscape: Cosmetic Tiles, cannot be stepped and will be created over Terrain Tiles. \n" |
    "Tokens: Needs to be placed over a Terrain. \n" |
    "Bases: Possible Tiles to place your Heroes at the beginning of a match. Needs to be placed over a Terrain. \n" |
    "Initial: Tiles where Heroes will be placed before starting the match. Cannot be placed over a Terrain. \n" |
    "Make sure all the boxes above are green before generating your file."

  let token = App.KL.Game.Token.new(0, 1, 1, 2)
  let team  = App.KL.Game.Team.blue
  let tool  = App.BoardBuilder.Builder.Tool.terrains
  let map_name = "map_name_here"
  let show_grid = false
  
  {room, canvas_size, mouse, mouse_press, terrain, token, team, tool, command, show_grid, map_name, array}