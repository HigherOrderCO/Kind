// MiniMMO's local state (not used)
App.MiniMMO.State.local: Type
  Unit

// MiniMMO's global state
App.MiniMMO.State.global: Type
  Map<App.MiniMMO.Player>

// MiniMMO's state types
App.MiniMMO.State: App.State
  App.State.new(App.MiniMMO.State.local, App.MiniMMO.State.global)

// A player stores a w/a/s/d config, and a position
type App.MiniMMO.Player {
  new(
    w: Bool // w down?
    a: Bool // a down?
    s: Bool // s down?
    d: Bool // d down?
    x: U32  // x pos
    y: U32  // y pos
  )
}

// The initial state
App.MiniMMO.init: App.Init<App.MiniMMO.State>
  App.Store.new<App.MiniMMO.State>(unit, {})

// The render function
App.MiniMMO.draw: App.Draw<App.MiniMMO.State>
  (state)
  let avatars = []
  let map = state@global
  for player in Map.values!(map) with avatars:
    let style = {
      "position": "absolute"
      "left": Nat.show(U32.to_nat(player@x))|"px"
      "top": Nat.show(U32.to_nat(player@y))|"px"
    }
    DOM.node("div", {}, style, [DOM.text("X")]) & avatars
  DOM.node("div", {}, {}, avatars)
  
// The local event handler
App.MiniMMO.when: App.When<App.MiniMMO.State>
  (event, state)

  case event {

    // Init: watches the MMO room
    init: App.watch!(App.MiniMMO.room)

    // Key-down: posts the a/d/w/s down event on the MMO room
    key_down: switch U16.eql(event.code) {
      'A': App.new_post!(App.MiniMMO.room, App.MiniMMO.command.a_down)
      'D': App.new_post!(App.MiniMMO.room, App.MiniMMO.command.d_down)
      'W': App.new_post!(App.MiniMMO.room, App.MiniMMO.command.w_down)
      'S': App.new_post!(App.MiniMMO.room, App.MiniMMO.command.s_down)
    } default App.pass!

    // Key-up: posts the a/d/w/s up event on the MMO room
    key_up: switch U16.eql(event.code) {
      'A': App.new_post!(App.MiniMMO.room, App.MiniMMO.command.a_up)
      'D': App.new_post!(App.MiniMMO.room, App.MiniMMO.command.d_up)
      'W': App.new_post!(App.MiniMMO.room, App.MiniMMO.command.w_up)
      'S': App.new_post!(App.MiniMMO.room, App.MiniMMO.command.s_up)
    } default App.pass!

  } default App.pass!

// The global tick handler
App.MiniMMO.tick: App.Tick<App.MiniMMO.State>
  (tick, map)
  let map = Map.map!!((player) 
    open player
    let w = player.w
    let a = player.a
    let s = player.s
    let d = player.d
    let x = player.x
    let y = player.y
    let x = if player.a then x - 4 else x
    let x = if player.d then x + 4 else x
    let y = if player.w then y - 4 else y
    let y = if player.s then y + 4 else y
    App.MiniMMO.Player.new(w, a, s, d, x, y)
  , map)
  map

// The global post handler
App.MiniMMO.post: App.Post(App.MiniMMO.State)
  (time, room, addr, data, map)

  // Gets the user's player from the global state
  let player = case map{addr} as player {

    // If new user, create its player
    none:
      App.MiniMMO.Player.new(false,false,false,false,0,0)

    // If user exists, update its key-down variables
    some:
      let player = player.value
      let player = switch String.eql(data) {
        App.MiniMMO.command.a_down: player@a <- true
        App.MiniMMO.command.s_down: player@s <- true
        App.MiniMMO.command.d_down: player@d <- true
        App.MiniMMO.command.w_down: player@w <- true
        App.MiniMMO.command.a_up:   player@a <- false
        App.MiniMMO.command.s_up:   player@s <- false
        App.MiniMMO.command.d_up:   player@d <- false
        App.MiniMMO.command.w_up:   player@w <- false
      } default player
      //let player = switch String.eql(data) {
        //App.MiniMMO.command.d_down: player@x <- (player@x + 1)
        //App.MiniMMO.command.a_down: player@x <- (player@x - 1)
      //} default player
      player
  }

  // Updates the user's player on the global state
  map{addr} <- player

// A minimalist MMO
App.MiniMMO: App<App.MiniMMO.State>
  App.new!(
    App.MiniMMO.init
    App.MiniMMO.draw
    App.MiniMMO.when
    App.MiniMMO.tick
    App.MiniMMO.post
  )
// Constants

App.MiniMMO.room: String
  "0xc910a02b7c8a12"

App.MiniMMO.command.a_up: String
  "0x0000000000000000000000000000000000000000000000000000000000000000"

App.MiniMMO.command.a_down: String
  "0x0000000000000000000000000000000000000000000000000000000000000001"

App.MiniMMO.command.d_up: String
  "0x0000000000000000000000000000000000000000000000000000000000000002"

App.MiniMMO.command.d_down: String
  "0x0000000000000000000000000000000000000000000000000000000000000003"

App.MiniMMO.command.s_up: String
  "0x0000000000000000000000000000000000000000000000000000000000000004"

App.MiniMMO.command.s_down: String
  "0x0000000000000000000000000000000000000000000000000000000000000005"

App.MiniMMO.command.w_up: String
  "0x0000000000000000000000000000000000000000000000000000000000000006"

App.MiniMMO.command.w_down: String
  "0x0000000000000000000000000000000000000000000000000000000000000007"

App.MiniMMO.sprite: VoxBox
  VoxBox.parse("0d00000000000e00000000000f00000000001000000000001100000000000c01000000000d01000000001101000000000b02000000000c02000000001202000000000b03000000001203000000000b04000000000c04000000001104000000000c05000000000d05000000000e05000000001005000000001105000000000e06000000000f06000000000e07000000000e08000000000f08000000000d09000000000e09000000000f09000000000c0a000000000d0a000000000e0a000000000f0a00000000100a000000000c0b000000000e0b00000000100b000000000b0c000000000c0c000000000e0c00000000100c00000000110c000000000b0d000000000e0d00000000110d000000000a0e000000000b0e000000000e0e00000000110e00000000120e000000000a0f000000000e0f00000000120f000000000910000000000a10000000000e10000000001210000000001310000000000911000000000e11000000001311000000000e12000000000d13000000000e13000000000f13000000000d14000000000f14000000000d15000000000f15000000000c16000000000d16000000000f16000000000c17000000000f17000000000c18000000000f18000000000c19000000001019000000000c1a00000000101a000000000b1b000000000c1b00000000101b000000000b1c00000000101c000000000b1d00000000101d00000000111d000000000b1e00000000111e000000000a1f000000000b1f00000000111f00000000")
