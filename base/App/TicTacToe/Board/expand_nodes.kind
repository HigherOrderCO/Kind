App.TicTacToe.board.expand(xs : List<U32>, ys : List<U32>) : List<List<Pair<U32, U32>>>
  let list = List.foldr!!([], 
    (y) List.concat!(List.foldr!!([], (x) List.cons!({y, x}), ys)), xs)
  let list = List.chunks_of!(3, list)
  List.sequenceA!(list)

App.TicTacToe.board.transpose(xs : List<Pair<U32, U32>>) : List<Pair<U32, U32>>
  List.map!!(Pair.swap!!, xs) // transpose the coordation pairs

App.TicTacToe.board.same_line_limitation(xs : List<Pair<U32, U32>>) : Bool
  case xs {
      nil : false
      cons : open xs.head as v 
             Bool.or(List.foldr!!(true, (x, b) b && U32.eql(Pair.fst!!(x), v.fst), xs.tail),
               List.foldr!!(true, (x, b) b && U32.eql(Pair.snd!!(x), v.snd), xs.tail))
  } 

App.TicTacToe.board.diagonal_limitation(xs : List<Pair<U32, U32>>) : Bool
  Bool.or(
      List.foldr!!(true, (x, b) b && U32.eql(Pair.fst!!(x), Pair.snd!!(x)), xs),
      List.foldr!!(true, (x, b) b && U32.eql(Pair.fst!!(x), Pair.snd!!(x)), App.TicTacToe.board.transpose(xs)))

App.TicTacToe.board.expand_nodes : List<List<Pair<U32, U32>>>
  let ord = [0#32, 1#32, 2#32]
  let ls = App.TicTacToe.board.expand(ord, ord) // creates the combination of a board 3x3
  let ls_transpose = List.map!!(App.TicTacToe.board.transpose, ls)
  List.filter!((x) Bool.or(App.TicTacToe.board.same_line_limitation(x), App.TicTacToe.board.diagonal_limitation(x)), List.concat!(ls, ls_transpose))
  