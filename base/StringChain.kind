// TODO:
// Discovery:
//   Nodes must find peers, and keep a random pool of peers.
// Propagation:
//   Nodes must propagate and gossip valuable information, such as its best
//   blocks, and some amount of previous best blocks.
// Entry:
//   When a node joins the network, it must request all the missing history. One
//   way to do it would be to request all blocks from some random peer. If that
//   peer accepts sending them, it will stream blocks one by one. Since UDP
//   packets can be lost, receipts must be given, so a node can re-send missed
//   blocks.
// Difficulty:
//   Difficulty should be adjusted, as in Bitcoin.
// Timestamp:
//   Nodes must be able to estimate a reasonable network time.

// The body of a StringChain Post can hold up to 8 words
StringChain.Body: Type
  Vector<U256,32>

// A StringChain hash is a 256-bit word
StringChain.Hash: Type
  U256

// An IP networking address
type StringChain.Address {
  ipv4(ip0: U8, ip1: U8, ip2: U8, ip3: U8, port: U16)
} deriving (serializer, deserializer)

// A networking peer
type StringChain.Peer {
  new(
    address: StringChain.Address
  )
}

type StringChain.Message {
  ping
  pong
  get_tip
  request_post(hash: StringChain.Hash)
  share_post(post: StringChain.Post)
} deriving (serializer, deserializer)

// A network message received from a sender
type StringChain.Received {
  new(
    sender: StringChain.Peer
    message: StringChain.Message
  )
}

// A StringChain post
type StringChain.Post {
  new(
    body: StringChain.Body // post contents (1024 bytes)
    work: U256             // extra info and nonce (32 bytes)
    prev: U256             // previous post (32 bytes)
  )
} deriving (serializer, deserializer)

// Holds all the posts and aux structures
type StringChain.Store {
  new(
    post: Map<StringChain.Post>           // maps PostHash to Post object
    children: Map<List<StringChain.Hash>> // maps PostHash to list of PostHash that link to it
    pending: Map<List<StringChain.Post>>  // maps PostHash to list of posts waiting it for inclusion
    score: Map<StringChain.Hash>          // maps PostHash to cached score
    tip: StringChain.Hash                 // current tip PostHash
  )
}

// The state of a StringChain node
type StringChain.Node {
  new(
    port: Nat
    peers: List<StringChain.Peer>
    store: StringChain.Store
  )
}

StringChain.Hash.serializer: Serializer<StringChain.Hash>
  U256.serializer

StringChain.Hash.deserializer: Deserializer<StringChain.Hash>
  U256.deserializer

StringChain.Body.deserializer: Deserializer<StringChain.Body>
  Vector.deserializer!(32,U256.deserializer)

StringChain.Body.serializer: Serializer<StringChain.Body>
  Vector.serializer!(32,U256.serializer)

StringChain.Message.serialize(message: StringChain.Message): String
  let hex = Bits.hex.encode(Serializer.run!(StringChain.Message.serializer, message))
  let hex = if Nat.mod(String.length(hex),2) =? 0 then hex else hex | "0"
  hex

StringChain.Message.deserialize(string: String): Maybe<StringChain.Message>
  Deserializer.run!(StringChain.Message.deserializer, Bits.hex.decode(string))

StringChain.Message.show(message: StringChain.Message): String
  case message {
    void: "void"
    ping: "ping"
    pong: "pong"
    request_post: "request_post(" | U256.show(message.hash) | ")"
  } default "?"

// Takes the Keccak hash of a list of words
StringChain.Hash.from_words(words: List<U256>): StringChain.Hash
  Crypto.Keccak.hash.words(words)

// Returns the PostHash
StringChain.Hash.from_post(post: StringChain.Post): StringChain.Hash
  use post = post
  let list = Vector.to_list!(32, post.body) ++ [post.work, post.prev]
  StringChain.Hash.from_words(list)

StringChain.Message.serialize(message: StringChain.Message): String
  let hex = Bits.hex.encode(Serializer.run!(StringChain.Message.serializer, message))
  let hex = if Nat.mod(String.length(hex),2) =? 0 then hex else hex | "0"
  hex

StringChain.Message.deserialize(string: String): Maybe<StringChain.Message>
  Deserializer.run!(StringChain.Message.deserializer, Bits.hex.decode(string))

// Estimates how many attempts were needed to make this hash
StringChain.Hash.score(hash: U256): U256
  Nat.to_u256(Nat.pow(2,256) / U256.to_nat(hash))

// Increases the Post nonce until it is above target_score
StringChain.Post.mine(post: StringChain.Post, target_score: U256, attempts: U256): StringChain.Post
  let post_score = StringChain.Hash.score(StringChain.Hash.from_post(post))
  if U256.eql(attempts,0) || U256.gte(post_score, target_score) then
    post
  else
    StringChain.Post.mine(post@info <- post@info + 1, target_score, attempts - 1)

// Adds a post to the chain, updating the score, children and tip
// If the prev is null, it is added to a pending map and re-added later
StringChain.Store.add_post(sender: StringChain.Peer, post: StringChain.Post, chain: StringChain.Store): StringChain.Store
  open post
  open chain
  open chain.tip
  let post_hash = StringChain.Hash.from_post(post)
  case chain.post{U256.show(post_hash)} as got_post {
    some: chain
    none:
      let prev_hash = post.prev
      case chain.post{U256.show(prev_hash)} as got_prev {
        none: 
          let pending_list  = post & (chain.pending{U256.show(prev_hash)} <> []) // TODO: avoid adding duplicates
          let chain.pending = chain.pending{U256.show(prev_hash)} <- pending_list
          StringChain.Store.new(chain.post, chain.children, chain.pending, chain.score, chain.tip)
        some: 
          let prev           = got_prev.value
          let prev_score     = chain.score{U256.show(prev_hash)} abort chain
          let post_score     = U256.add(prev_score, StringChain.Hash.score(post_hash))
          let prev_children  = chain.children{U256.show(prev_hash)} <> []
          let pendings       = chain.pending{U256.show(post_hash)} <> []
          let chain.post     = chain.post{U256.show(post_hash)} <- post
          let chain.score    = chain.score{U256.show(post_hash)} <- post_score
          let chain.children = chain.children{U256.show(prev_hash)} <- post_hash & prev_children
          let chain.tip      = if post_score >? chain.tip then post_hash else chain.tip
          let chain.pending  = Map.delete!(U256.show(post_hash), chain.pending)
          let chain          = StringChain.Store.new(chain.post, chain.children, chain.pending, chain.score, chain.tip)
          let chain          = for pending in pendings: StringChain.Store.add_post(sender, pending, chain)
          chain
      }
  }

// The initial chain state
StringChain.Store.genesis: StringChain.Store
  let chain.post = {U256.show(0): StringChain.Post.new(Vector.create!(32,()0),0,0)}
  let chain.score = {U256.show(0): 0#256}
  let chain.pending = {}
  let chain.children = {U256.show(0): []}
  let chain.tip = 0#256
  StringChain.Store.new(chain.post, chain.children, chain.pending, chain.score, chain.tip)

// Returns the canonical chain, i.e., the one with most accumulated work
StringChain.Store.canonical(chain: StringChain.Store): List<StringChain.Post>
  open chain
  open chain.tip
  case chain.post{U256.show(chain.tip)} as tip_post {
    none: []
    some: StringChain.Store.canonical.go(tip_post.value, chain.post, [])
  }

StringChain.Store.canonical.go(
  post: StringChain.Post
  posts: Map<StringChain.Post>
  result: List<StringChain.Post>
): List<StringChain.Post>
  open post
  let result = List.cons!(post, result)
  if U256.eql(post.prev, 0) then
    result
  else case posts{U256.show(post.prev)} as prev {
    none: result
    some: StringChain.Store.canonical.go(prev.value, posts, result)
  }

// Converts the IP of an address to a string
StringChain.Address.show.ip(addr: StringChain.Address): String
  open addr
  let ip0 = Nat.show(U8.to_nat(addr.ip0))
  let ip1 = Nat.show(U8.to_nat(addr.ip1))
  let ip2 = Nat.show(U8.to_nat(addr.ip2))
  let ip3 = Nat.show(U8.to_nat(addr.ip3))
  ip0 | "." | ip1 | "." | ip2 | "." | ip3

// Converts the port of an address to a string
StringChain.Address.show.port(addr: StringChain.Address): String
  open addr
  Nat.show(U16.to_nat(addr.port))

// Converts an address to a string
StringChain.Address.show(addr: StringChain.Address): String
  StringChain.Address.show.ip(addr) | ":" | StringChain.Address.show.port(addr)

StringChain.Peer.show(peer: StringChain.Peer): String
  open peer
  "<" | StringChain.Address.show(peer.address) | ">"

StringChain.Received.from_udp_message(recv: IO.recv_udp.Message): Maybe<StringChain.Received>
  Maybe {
    open recv
    open recv.from
    let ip = List.mapped!(String.split(recv.from.ip, "."))!((x) Nat.to_u8(Nat.read(x)))
    let port = Nat.to_u16(recv.from.port)
    get ip0 = ip[0]
    get ip1 = ip[1]
    get ip2 = ip[2]
    get ip3 = ip[3]
    let peer = StringChain.Peer.new(StringChain.Address.ipv4(ip0, ip1, ip2, ip3, port))
    get msge = StringChain.Message.deserialize(recv.data)
    return StringChain.Received.new(peer, msge)
  }

StringChain.Node.send(node: StringChain.Node, peer: StringChain.Peer, message: StringChain.Message): IO<Unit>
  open node
  open peer
  open peer.address
  let from_port = node.port
  let to_ip     = StringChain.Address.show.ip(peer.address)
  let to_port   = U16.to_nat(peer.address.port)
  //log("SENDING: " | StringChain.Message.serialize(message))
  IO.send_udp(from_port, to_ip, to_port, StringChain.Message.serialize(message))

StringChain.Node.broadcast(node: StringChain.Node, message: StringChain.Message): IO<Unit>
  StringChain.Node.broadcast.go(node, message, node@peers)

StringChain.Node.broadcast.go(node: StringChain.Node, message: StringChain.Message, peers: List<StringChain.Peer>): IO<Unit>
  case peers {
    nil: IO.pass
    cons: IO {
      StringChain.Node.send(node, peers.head, message)
      StringChain.Node.broadcast.go(node, message, peers.tail)
    }
  }

// StringChain Node
// ================

// Starts a StringChain node at given port
StringChain.Node.init(port: Nat): IO<Unit>
  let peers = [
    StringChain.Peer.new(StringChain.Address.ipv4(127,0,0,1,42000))
    StringChain.Peer.new(StringChain.Address.ipv4(127,0,0,1,42001))
    StringChain.Peer.new(StringChain.Address.ipv4(127,0,0,1,42002))
    StringChain.Peer.new(StringChain.Address.ipv4(127,0,0,1,42003))
  ]
  let node = StringChain.Node.new(port, peers, StringChain.Store.genesis)
  StringChain.Node.loop(node)
  
StringChain.Node.loop(node: StringChain.Node): IO<Unit>
  open node

  IO {
    // Handle incoming messages
    get inbox = IO.recv_udp(node.port)
    get node = StringChain.Node.handle_inbox(node, inbox)

    // Broadcast gossips
    StringChain.Node.broadcast(node, StringChain.Message.ping)

    // Loop
    IO.sleep(25)
    StringChain.Node.loop(node)
    return unit
  }

StringChain.Node.on_message(node: StringChain.Node, received: StringChain.Received): IO<StringChain.Node>
  open node
  open node.store
  open received
  case received.message {
    ping: IO {
      StringChain.Node.send(node, received.sender, StringChain.Message.pong)
      return node
    }
    request_post: case node.store.post{U256.show(received.message.hash)} as got {
      none: IO {
        return node
      }
      some: IO {
        StringChain.Node.send(node, received.sender, StringChain.Message.share_post(got.value))
        return node
      }
    }
    share_post: IO {
      let node = node@chain <- StringChain.Store.add_post(received.sender, received.message.post, node.store)
      return node
    }
  } default IO {
    return node
  }

StringChain.Node.handle_inbox(node: StringChain.Node, inbox: List<IO.recv_udp.Message>): IO<StringChain.Node>
  case inbox {
    nil: IO {
      return node
    }
    cons: IO {
      open inbox.head
      use received = StringChain.Received.from_udp_message(inbox.head)
      case received {
        none: StringChain.Node.handle_inbox(node, inbox.tail)
        some: IO {
          use received = received.value
          get node = StringChain.Node.on_message(node, received)
          get node = StringChain.Node.handle_inbox(node, inbox.tail)
          IO.print(StringChain.Peer.show(received.sender) | " " | StringChain.Message.show(received.message))
          return node
        }
      }
    }
  }
