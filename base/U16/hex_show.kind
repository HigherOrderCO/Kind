U16.hex_show(c: U16): String
  if U16.ltn(c, 0x80) then
    let b0 = U16.or(0x00, U16.and(0x7F, c)) // (c & 0x7F) | 0x00
    U16.hex.encode.utf8(b0)
  else if U16.ltn(c, 0x0800) then
    let b0 = U16.or(0xC0, U16.and(0x1F, U16.shr(c, 6))) // (c>>6 & 0x1F) | 0xC0
    let b1 = U16.or(0x80, U16.and(0x3F, c)) // (c & 0x3F) | 0x80
    U16.hex.encode.utf8(b0)|U16.hex.encode.utf8(b1)
  else if Bool.or(U16.ltn(c, 0xd800), U16.gte(c, 0xe000)) then
    let b0 = U16.or(0xE0, U16.and(0x0F, U16.shr(c, 12))) // (c>>12 & 0x0F) | 0xE0
    let b1 = U16.or(0x80, U16.and(0x3F, U16.shr(c, 6)))  // (c>>6 & 0x3F)  | 0x80
    let b2 = U16.or(0x80, U16.and(0x3F, c)) // (c & 0x3F)  | 0x80
    U16.hex.encode.utf8(b0)|U16.hex.encode.utf8(b1)|U16.hex.encode.utf8(b2)
  else // TODO: fix 
    let b0 = U16.or(0xF0, U16.and(0x07, U16.shr(c, 18))) // (c>>18 & 0x07) | 0xF0
    let b1 = U16.or(0x80, U16.and(0x3F, U16.shr(c, 12))) // (c>>12 & 0x3F) | 0x80
    let b2 = U16.or(0x80, U16.and(0x3F, U16.shr(c, 6)))  // (c>>6 & 0x3F)  | 0x80
    let b3 = U16.or(0x80, U16.and(0x3F, c)) // (c & 0x3F) | 0x80
    U16.hex.encode.utf8(b0)|U16.hex.encode.utf8(b1)|U16.hex.encode.utf8(b2)|U16.hex.encode.utf8(b3)