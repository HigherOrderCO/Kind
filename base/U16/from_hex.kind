// Reference: https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330

// Decode a UTF8 data into a String
U16.from_hex.utf8(s: String): String
  U16.from_hex.utf8.aux(s)
  // case s {
  //   nil : ""
  //   cons:
  //     log("char to string: " | Char.to_string(s.head))
  //     case s.tail {
  //       nil : U16.from_hex.utf8.aux(s.head, 0#16)
  //       cons: U16.from_hex.utf8.aux(s.head, s.tail.head) | U16.from_hex.utf8(s.tail)
  //     }
  // }
  

// TODO: add more comments about invalid convertions
U16.from_hex.utf8.aux(s: String): String
  // log("c: " | U16.show(c))
  // let c = Bytes.at(s, )
  case s {
    nil: ""
    cons: 
      let c = Bytes.take(2, s)
      log("c before parse: " | c)
      let c = U16.from_hex.parse(String.to_u16(c))
      log("c after parse: " | c)
      c | U16.from_hex.utf8.aux(s.tail)
  }
  // TODO: String.to_nat

U16.from_hex.parse(c: U16): String
  let two_bytes   = Bool.and(U16.gtn(c, 191#16), U16.ltn(c, 224#16)) // (c > 191 && c < 224)
  let three_bytes = Bool.and(U16.gtn(c, 223), U16.ltn(c, 240)) // (c > 223 && c < 240)
  let four_bytes  = Bool.and(U16.gtn(c, 239), U16.ltn(c, 248)) // (c > 239 && c < 248)
  if U16.gtn(c, 127#16) then
    if two_bytes then 
      let l = U16.shl(U16.and(c, 31#16), 6#16) // (c & 31) << 6 
      let r = U16.and(next, 63#16) // bytes[i++] & 63
      U16.show_hex(U16.or(l, r)) // l | r 
    else if three_bytes then 
      let l = U16.shl(U16.and(c, 15), 12) // (c & 15) << 12 
      let m = U16.shl(U16.and(next, 63), 6) // (bytes[i++] & 63) << 6
      let r = U16.and(next, 63) // bytes[i++] & 63
      U16.show_hex(U16.or(l, U16.or(m, r))) // l | m | r;
    else if four_bytes then
      let l  = U16.shl(U16.and(c, 7), 18) // (c & 7) << 18
      let m0 = U16.shl(U16.and(next, 63), 12) // (bytes[i++] & 63) << 12
      let m1 = U16.shl(U16.and(next, 63), 6) // (bytes[i++] & 63) << 6
      let r  = U16.and(next, 63) // bytes[i++] & 63 
      U16.show_hex(U16.or(U16.or(l, m0), U16.or(m1, r))) // l | m0 | m1 | r
    else "" // UTF-8 decode: unknown multibyte
  else if U16.ltn(c, 0xffff) then
    U16.show_hex(c) // String.fromCharCode(c)
  else if U16.lte(c, 0x10ffff) then// c <= 0x10ffff
    let aux = U16.sub(0x10000, c)
    let a = U16.show_hex(U16.or(U16.shr(c, 10),  0xd800)) // String.fromCharCode(c >> 10 | 0xd800)
    let b = U16.show_hex(U16.or(U16.and(c, 0x3FF), 0xdc00)) // String.fromCharCode(c & 0x3FF | 0xdc00)
    a | b
  else
    ""