Ether.RLP.encode.bytes(tree : Ether.RLP.Tree) : List<Bits>
  case tree {
      tip : 
        let bytes_size = Nat.max(Bits.length(tree.value) / 8, 1)
        let u16_char = Bits.trim(4, tree.value)
        if (bytes_size =? 1) && Bits.ltn(u16_char, Ether.RLP.Constants.bits_128) then
          [tree.value]
        else
          Ether.RPL.encode_length(bytes_size, 128) ++ [tree.value]
      list : 
        let bytes = []
        for item in tree.value with bytes :
          bytes ++ Ether.RLP.encode.bytes(item)
        let bytes_size = List.foldr!!(0, (x, y) Nat.max((Bits.length(x) / 8), 1) + y, bytes)
        Ether.RPL.encode_length(bytes_size, 192) ++ bytes
  }

Ether.RPL.encode_length(value : Nat, offSet : Nat) : List<Bits>
  switch(Nat.ltn(value)) {
    56 : 
      [Nat.to_bits(value + offSet)]
    18446744073709551616 : 
      let binary_encoding = Ether.RPL.encode_binary(value)
      let len = List.foldr!!(0, (x, y) Nat.max((Bits.length(x) / 8), 1) + y, binary_encoding)
      [Nat.to_bits(len + offSet + 55)] ++ binary_encoding
  } default [] // This case has to be treated within a proof

Ether.RPL.encode_binary(value : Nat) : List<Bits>
  if (value =? 0) then
    []
  else
    Ether.RPL.encode_binary(value / 256) ++ [Nat.to_bits(value % 256)]

Ether.RLP.encode.read(bits : List<Bits>) : String
  let hexfify = List.map!!((x) String.pad_left(2, '0', String.reverse(Bits.hex.encode(x))), bits)
  "0x" | String.join("", hexfify)

Ether.RLP.encode : _
 //log(Nat.show(Bits.length(Nat.to_bits(10))))
  let hello = Bits.read
  let xs = Ether.RLP.encode.bytes(
    Ether.RLP.Tree.list([
      Ether.RLP.Tree.list([
        Ether.RLP.Tree.tip(hello),
        Ether.RLP.Tree.tip(hello),
        Ether.RLP.Tree.tip(hello)
      ])]
    ))
 // let xs = Ether.RLP.encode.bytes(Ether.RLP.Tree.tip(hello))
    
  Ether.RLP.encode.read(xs)