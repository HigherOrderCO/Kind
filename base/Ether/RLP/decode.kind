Ether.Bits.break(len : Nat, bits : Bits) : Pair<Bits, Bits>
  {Bits.take(len, bits), Bits.drop(len, bits)}

Ether.RLP.decode.decode_list(value : Bits) : Pair<List<Ether.RLP.Tree<Bits>>, Bits>
  if (Bits.eql(value, Bits.e)) then
    {[], value}
  else
    let {tree, rest} = Ether.RLP.decode(value)
    let {trees, rest} = Ether.RLP.decode.decode_list(rest)
    {tree & trees, rest}

Ether.RLP.decode(bits : Bits) : Pair<Ether.RLP.Tree<Bits>, Bits>
  let {byte_prefix, rest} = Ether.Bits.break(8, bits)
   switch (Bits.ltn(byte_prefix)) {
    Ether.RLP.Constants.bits_128 : 
      {Ether.RLP.Tree.tip!(bits), rest}
    Ether.RLP.Constants.bits_184 : 
      let content_length = (Bits.to_nat(byte_prefix) - 128) * 8
      let {prefix, rest} = Ether.Bits.break(content_length, rest)
      {Ether.RLP.Tree.tip!(prefix), rest}
    Ether.RLP.Constants.bits_192 :
     let content_length = (Bits.to_nat(byte_prefix) - 183) * 8
     let {head, rest} = Ether.Bits.break(content_length, rest)
     let length = Ether.RLP.encode.read.binary(head)
     let {prefix, rest} = Ether.Bits.break(length*8, rest)
    {Ether.RLP.Tree.tip!(prefix), rest}
    Ether.RLP.Constants.bits_248 : 
     let content_length = (Bits.to_nat(byte_prefix) - 192) * 8
     let {xs, rest} = Ether.RLP.decode.decode_list(rest)
     {Ether.RLP.Tree.list!(xs), rest}
    Ether.RLP.Constants.bits_255 : 
      let content_length = (Bits.to_nat(byte_prefix) - 247) * 8    
      let {head, rest} = Ether.Bits.break(content_length, rest)
      let length = Ether.RLP.encode.read.binary(head)
      let {xs, rest} = Ether.RLP.decode.decode_list(rest)
     {Ether.RLP.Tree.list!(xs), rest}
   } default {Ether.RLP.Tree.tip!(Bits.e), Bits.e}