String.at(len : Nat, str : String) : Pair<String, String>
  {String.take(len, str), String.drop(len, str)}

Ether.RLP.verifiy.decode(encode : String) : Pair<Ether.RLP.Tree, String>
  let {prefix, rest} = String.at(2, encode)
  let byte_prefix = Bits.hex.decode(String.reverse(prefix))
  def bytes_size = String.length(encode)
  switch (Bits.ltn(byte_prefix)) {
    Ether.RLP.Constants.bits_128 : {Ether.RLP.Tree.tip(byte_prefix), rest} // between (0, 127)
    Ether.RLP.Constants.bits_184 : 
      let content_length = (Bits.to_nat(byte_prefix) - 128) * 2
      if (bytes_size >? content_length) then
        let {prefix, rest} = String.at(content_length, rest)
        {Ether.RLP.Tree.tip(Bits.hex.decode(String.reverse(prefix))), rest}
      else 
        {Ether.RLP.Tree.list([]), "error"} // treat this case after
  Ether.RLP.Constants.bits_192 :
     let content_length = (Bits.to_nat(byte_prefix) - 183) * 2     
     let {head, rest} = String.at(content_length, rest)
     let length = Ether.RLP.decode.binary(head)
     let verifier = (Bits.to_nat(byte_prefix) - (183 + length)) * 2
     if (bytes_size >? content_length) && (bytes_size >? verifier) then
       let {prefix, rest} = String.at(length *2, rest)
       {Ether.RLP.Tree.tip(Bits.hex.decode(String.reverse(prefix))), rest}
     else
       {Ether.RLP.Tree.list([]), "error"} // treat this case after
    Ether.RLP.Constants.bits_248 : 
      let content_length = (Bits.to_nat(byte_prefix) - 192) * 2
      if (bytes_size >? content_length) then
        if String.length(rest) =? 0 then
            {Ether.RLP.Tree.list([]), rest}
        else
          let {xs, rest} = Ether.RLP.decode.list(rest)
          {Ether.RLP.Tree.list(xs), rest}
      else
        {Ether.RLP.Tree.list([]), "error"} // treat this case after
    Ether.RLP.Constants.bits_255 : 
      let content_length = (Bits.to_nat(byte_prefix) - 247) * 2     
      let {head, rest} = String.at(content_length, rest)
      let length = Ether.RLP.decode.binary(head)
      let {xs, rest} = Ether.RLP.decode.list(rest)
      {Ether.RLP.Tree.list(xs), rest}
  } default {Ether.RLP.Tree.list([]), "error"} // treat this case after
