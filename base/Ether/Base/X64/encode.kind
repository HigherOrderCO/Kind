Ether.Base.X64.translate(code : Bits) : List<U16>
  let blocks = List.reverse!(Bits.chunks_of(6, code))
  let list = []
  for i in blocks with list :
    def index = Bits.to_nat(Bits.reverse(i))
    let list = List.cons!(Ether.Base.X64.table[index] <> 0#16, list)
    list
  list

Ether.Base.X64.encode(code : Bits) : List<U16>
  let blocks = Bits.chunks_of(24, code)
  let list = []
  for i in blocks with list :
    def size = Ether.Bits.get_bytes_size(i)
    let pad = (3-size)
    let i = Bits.concat(i, Bits.repeat(pad*2, false))
    let list = list ++ Ether.Base.X64.translate(i) ++ List.repeat!(pad, 61)
    list
  list
  