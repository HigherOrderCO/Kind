module.exports = (function (){
  function word_to_u16(w) {
    var u = 0;
    for (var i = 0; i < 16; ++i) {
      u = u | (w._ === 'Word.i' ? 1 << i : 0);
      w = w.pred;
    };
    return u;
  };
  function u16_to_word(u) {
    var w = {_: 'Word.e'};
    for (var i = 0; i < 16; ++i) {
      w = {_: (u >>> (16-i-1)) & 1 ? 'Word.i' : 'Word.o', pred: w};
    };
    return w;
  };
  function u16_to_bits(x) {
    var s = '';
    for (var i = 0; i < 16; ++i) {
      s = (x & 1 ? '1' : '0') + s;
      x = x >>> 1;
    }
    return s;
  };
  var bitsmap_new = {_: 'BitsMap.new'};
  var bitsmap_tie = function(val, lft, rgt) {
    return {_: 'BitsMap.tip', val, lft, rgt};
  }
  var maybe_none = {_: 'Maybe.none'};
  var maybe_some = function(value) {
    return {_: 'Maybe.some', value};
  }
  var bitsmap_get = function(bits, map) {
    for (var i = bits.length - 1; i >= 0; --i) {
      if (map._ !== 'BitsMap.new') {
        map = bits[i] === '0' ? map.lft : map.rgt;
      }
    }
    return map._ === 'BitsMap.new' ? maybe_none : map.val;
  }
  var bitsmap_set = function(bits, val, map, mode) {
    var res = {value: map};
    var key = 'value';
    var obj = res;
    for (var i = bits.length - 1; i >= 0; --i) {
      var map = obj[key];
      if (map._ === 'BitsMap.new') {
        obj[key] = {_: 'BitsMap.tie', val: maybe_none, lft: bitsmap_new, rgt: bitsmap_new};
      } else {
        obj[key] = {_: 'BitsMap.tie', val: map.val, lft: map.lft, rgt: map.rgt};
      }
      obj = obj[key];
      key = bits[i] === '0' ? 'lft' : 'rgt';
    }
    var map = obj[key];
    if (map._ === 'BitsMap.new') {
      var x = mode === 'del' ? maybe_none : {_: 'Maybe.some', value: val};
      obj[key] = {_: 'BitsMap.tie', val: x, lft: bitsmap_new, rgt: bitsmap_new};
    } else {
      var x = mode === 'set' ? {_: 'Maybe.some', value: val} : mode === 'del' ? maybe_none : map.val;
      obj[key] = {_: 'BitsMap.tie', val: x, lft: map.lft, rgt: map.rgt};
    }
    return res.value;
  };
  var list_for = list => nil => cons => {
    while (list._ !== 'List.nil') {
      nil = cons(list.head)(nil);
      list = list.tail;
    }
    return nil;
  };
  var list_length = list => {
    var len = 0;
    while (list._ === 'List.cons') {
      len += 1;
      list = list.tail;
    };
    return BigInt(len);
  };
var nat_to_bits = n => {
  return n.toString(2);
};var kind_name_to_bits = name => {
  const TABLE = {
    'A': '000000', 'B': '100000', 'C': '010000', 'D': '110000',
    'E': '001000', 'F': '101000', 'G': '011000', 'H': '111000',
    'I': '000100', 'J': '100100', 'K': '010100', 'L': '110100',
    'M': '001100', 'N': '101100', 'O': '011100', 'P': '111100',
    'Q': '000010', 'R': '100010', 'S': '010010', 'T': '110010',
    'U': '001010', 'V': '101010', 'W': '011010', 'X': '111010',
    'Y': '000110', 'Z': '100110', 'a': '010110', 'b': '110110',
    'c': '001110', 'd': '101110', 'e': '011110', 'f': '111110',
    'g': '000001', 'h': '100001', 'i': '010001', 'j': '110001',
    'k': '001001', 'l': '101001', 'm': '011001', 'n': '111001',
    'o': '000101', 'p': '100101', 'q': '010101', 'r': '110101',
    's': '001101', 't': '101101', 'u': '011101', 'v': '111101',
    'w': '000011', 'x': '100011', 'y': '010011', 'z': '110011',
    '0': '001011', '1': '101011', '2': '011011', '3': '111011',
    '4': '000111', '5': '100111', '6': '010111', '7': '110111',
    '8': '001111', '9': '101111', '.': '011111', '_': '111111',
  }
  var a = '';
  for (var i = name.length - 1; i >= 0; --i) {
    a += TABLE[name[i]];
  }
  return a;
};  const inst_unit = x=>x(null);
  const elim_unit = (x=>{var $1 = (()=>c0=>{var self = x;switch("unit"){case 'unit':var $0 = c0;return $0;};})();return $1;});
  const inst_bool = x=>x(true)(false);
  const elim_bool = (x=>{var $4 = (()=>c0=>c1=>{var self = x;if (self) {var $2 = c0;return $2;} else {var $3 = c1;return $3;};})();return $4;});
  const inst_nat = x=>x(0n)(x0=>1n+x0);
  const elim_nat = (x=>{var $8 = (()=>c0=>c1=>{var self = x;if (self===0n) {var $5 = c0;return $5;} else {var $6=(self-1n);var $7 = c1($6);return $7;};})();return $8;});
  const inst_bits = x=>x('')(x0=>x0+'0')(x0=>x0+'1');
  const elim_bits = (x=>{var $14 = (()=>c0=>c1=>c2=>{var self = x;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $9=self.slice(0,-1);var $10 = c1($9);return $10;case 'i':var $11=self.slice(0,-1);var $12 = c2($11);return $12;case 'e':var $13 = c0;return $13;};})();return $14;});
  const inst_u16 = x=>x(x0=>word_to_u16(x0));
  const elim_u16 = (x=>{var $17 = (()=>c0=>{var self = x;switch('u16'){case 'u16':var $15=u16_to_word(self);var $16 = c0($15);return $16;};})();return $17;});
  const inst_string = x=>x('')(x0=>x1=>(String.fromCharCode(x0)+x1));
  const elim_string = (x=>{var $22 = (()=>c0=>c1=>{var self = x;if (self.length===0) {var $18 = c0;return $18;} else {var $19=self.charCodeAt(0);var $20=self.slice(1);var $21 = c1($19)($20);return $21;};})();return $22;});
  var run = (p) => {
    if (typeof window === 'undefined') {      var rl = eval("require('readline')").createInterface({input:process.stdin,output:process.stdout,terminal:false});
      var fs = eval("require('fs')");
      var pc = eval("process");
      var ht = eval("require('http')");
      var hs = eval("require('https')");
      var dg = eval("require('dgram')");
    } else {
      var rl = {question: (x,f) => f(''), close: () => {}};
      var fs = {readFileSync: () => ''};
      var pc = {exit: () => {}, argv: []};
      var ht = null;
      var hs = null;
      var dg = null;
    };
    var lib = {rl,fs,pc,ht,hs,dg};
    return run_io(lib,p)
      .then((x) => { rl.close(); return x; })
      .catch((e) => { rl.close(); throw e; });
  };
  var set_file = (lib, param) => {
    var path = '';
    for (var i = 0; i < param.length && param[i] !== '='; ++i) {
      path += param[i];
    };
    var data = param.slice(i+1);
    lib.fs.mkdirSync(path.split('/').slice(0,-1).join('/'),{recursive:true});
    lib.fs.writeFileSync(path,data);
    return '';
  };
  var del_file = (lib, param) => {
    try {
      lib.fs.unlinkSync(param);
      return '';
    } catch (e) {
      if (e.message.indexOf('EPERM') !== -1) {
        lib.fs.rmdirSync(param);
        return '';
      } else {
        throw e;
      }
    }
  };
  var get_file = (lib, param) => {
    return lib.fs.readFileSync(param, 'utf8');
  }
  var get_dir = (lib, param) => {
    return lib.fs.readdirSync(param).join(';');
  };
  var get_file_mtime = (lib, param) => {
    return String(lib.fs.statSync(param).mtime.getTime());
  };
  var request = (lib, param) => {
    if (typeof fetch === 'undefined') {
      return new Promise((res,err) => {
        (/^https/.test(param)?lib.hs:lib.ht).get(param, r => {
          let data = '';
          r.on('data', chunk => { data += chunk; });
          r.on('end', () => res(data));
        }).on('error', e => res(''));
      });
    } else {
      return fetch(param).then(res => res.text()).catch(e => '');
    }
  }
  let PORTS = {};
  function init_udp(lib, port_num) {
    return new Promise((resolve, reject) => {
      if (!PORTS[port_num]) {
        PORTS[port_num] = {socket: lib.dg.createSocket('udp4'), mailbox: []};
        PORTS[port_num].socket.bind(port_num);
        PORTS[port_num].socket.on('listening', () => resolve(PORTS[port_num]));
        PORTS[port_num].socket.on('message', (data, peer) => {
          var ip = peer.address;
          var port = peer.port;
          PORTS[port_num].mailbox.push({ip: peer.address, port: peer.port, data: data.toString('hex')});
        })
        PORTS[port_num].socket.on('error', (err) => {
          console.log('err');
          reject('UDP init error.');
        });
      } else {
        resolve(PORTS[port_num]);
      }
    });
  }
  async function send_udp(lib, port_num, to_ip, to_port_num, data) {
    var port = await init_udp(lib, port_num);
    port.socket.send(Buffer.from(data,'hex'), to_port_num, to_ip);
    return null;
  }
  async function recv_udp(lib, port_num) {
    var port = await init_udp(lib, port_num);
    var mailbox = port.mailbox;
    port.mailbox = [];
    return mailbox;
  }
  async function stop_udp(lib, port_num) {
    PORTS[port_num].socket.close();
    delete PORTS[port_num];
  }
  var file_error = e => {
    if (e.message.indexOf('NOENT') !== -1) {
      return '';
    } else {
      throw e;
    }
  };
  var io_action = {
    print: async (lib, param) => {
      console.log(param);
      return '';
    },
    put_string: async (lib, param) => {
      process.stdout.write(param);
      return '';
    },
    get_file: async (lib, param) => {
      try {
        return get_file(lib, param);
      } catch (e) {
        return file_error(e);
      }
    },
    set_file: async (lib, param) => {
      try {
        return set_file(lib, param)
      } catch (e) {
        return file_error(e);
      }
    },
    del_file: async (lib, param) => {
      try {
        return del_file(lib, param);
      } catch (e) {
        return file_error(e);
      }
    },
    get_dir: async (lib, param) => {
      try {
        return get_dir(lib, param);
      } catch (e) {
        return file_error(e);
      }
    },
    get_file_mtime: async (lib, param) => {
      try {
        return get_file_mtime(lib, param);
      } catch (e) {
        return file_error(e);
      }
    },
    get_time: async (lib, param) => {
      return String(Date.now());
    },
    exit: async (lib, param) => {
      lib.pc.exit();
      return '';
    },
    request: async (lib, param) => {
      return request(lib, param);
    },
    get_time: async (lib, param) => {
      return String(Date.now());
    },
    get_line: async (lib, param) => {
      return await new Promise((res,err) => {
        lib.rl.question(param, (line) => res(line));
      });
    },
    get_args: async (lib, param) => {
      return lib.pc.argv[2] || '';
    },
    init_udp: async (lib, param) => {
      try {
        await init_udp(lib, Number(param));
        return '';
      } catch (e) {
        return '';
      }
    },
    send_udp: async (lib, param) => {
      let [port_num, to_ip, to_port_num, data] = param.split(';');
      await send_udp(lib, Number(port_num), to_ip, Number(to_port_num), data);
      return '';
    },
    recv_udp: async (lib, param) => {
      var mailbox = await recv_udp(lib, Number(param));
      var reply = mailbox.map(x => x.ip + ',' + x.port + ',' + x.data).join(';');
      return reply;
    },
    stop_udp: async (lib, param) => {
      await stop_udp(lib, Number(param));
      return '';
    },
    sleep: async (lib, param) => {
      return await new Promise((resolve,reject) => {
        setTimeout(() => resolve(''), Number(param));
      });
    },
  };
  var run_io = async (lib, io, depth = 0) => {
    switch (io._) {
      case 'IO.end':
        return Promise.resolve(io.value);
      case 'IO.ask':
        var action = io_action[io.query];
        var answer = await action(lib, io.param);
        return await run_io(lib, io.then(answer), depth + 1);
      }
  };
  function IO$(_A$1){var $23 = null;return $23;};
  const IO = x0=>IO$(x0);
  function IO$ask$(_query$2,_param$3,_then$4){var $24 = ({_:'IO.ask','query':_query$2,'param':_param$3,'then':_then$4});return $24;};
  const IO$ask = x0=>x1=>x2=>IO$ask$(x0,x1,x2);
  function IO$bind$(_a$3,_f$4){var self = _a$3;switch(self._){case 'IO.end':var $26=self.value;var $27 = _f$4($26);var $25 = $27;break;case 'IO.ask':var $28=self.query;var $29=self.param;var $30=self.then;var $31 = IO$ask$($28,$29,(_x$8=>{var $32 = IO$bind$($30(_x$8),_f$4);return $32;}));var $25 = $31;break;};return $25;};
  const IO$bind = x0=>x1=>IO$bind$(x0,x1);
  function IO$end$(_value$2){var $33 = ({_:'IO.end','value':_value$2});return $33;};
  const IO$end = x0=>IO$end$(x0);
  function IO$monad$(_new$2){var $34 = _new$2(IO$bind)(IO$end);return $34;};
  const IO$monad = x0=>IO$monad$(x0);
  function Maybe$(_A$1){var $35 = null;return $35;};
  const Maybe = x0=>Maybe$(x0);
  function BitsMap$(_A$1){var $36 = null;return $36;};
  const BitsMap = x0=>BitsMap$(x0);
  const Maybe$none = ({_:'Maybe.none'});
  const BitsMap$get = a0=>a1=>(bitsmap_get(a0,a1));
  const Bits$o = a0=>(a0+'0');
  const Bits$i = a0=>(a0+'1');
  const Bool$true = true;
  const Bool$false = false;
  function Cmp$as_ltn$(_cmp$1){var self = _cmp$1;switch(self._){case 'Cmp.ltn':var $38 = Bool$true;var $37 = $38;break;case 'Cmp.eql':case 'Cmp.gtn':var $39 = Bool$false;var $37 = $39;break;};return $37;};
  const Cmp$as_ltn = x0=>Cmp$as_ltn$(x0);
  const Cmp$ltn = ({_:'Cmp.ltn'});
  const Cmp$gtn = ({_:'Cmp.gtn'});
  function Word$cmp$go$(_a$2,_b$3,_c$4){var self = _a$2;switch(self._){case 'Word.o':var $41=self.pred;var $42 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $44=self.pred;var $45 = (_a$pred$10=>{var $46 = Word$cmp$go$(_a$pred$10,$44,_c$4);return $46;});var $43 = $45;break;case 'Word.i':var $47=self.pred;var $48 = (_a$pred$10=>{var $49 = Word$cmp$go$(_a$pred$10,$47,Cmp$ltn);return $49;});var $43 = $48;break;case 'Word.e':var $50 = (_a$pred$8=>{var $51 = _c$4;return $51;});var $43 = $50;break;};var $43 = $43($41);return $43;});var $40 = $42;break;case 'Word.i':var $52=self.pred;var $53 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $55=self.pred;var $56 = (_a$pred$10=>{var $57 = Word$cmp$go$(_a$pred$10,$55,Cmp$gtn);return $57;});var $54 = $56;break;case 'Word.i':var $58=self.pred;var $59 = (_a$pred$10=>{var $60 = Word$cmp$go$(_a$pred$10,$58,_c$4);return $60;});var $54 = $59;break;case 'Word.e':var $61 = (_a$pred$8=>{var $62 = _c$4;return $62;});var $54 = $61;break;};var $54 = $54($52);return $54;});var $40 = $53;break;case 'Word.e':var $63 = (_b$5=>{var $64 = _c$4;return $64;});var $40 = $63;break;};var $40 = $40(_b$3);return $40;};
  const Word$cmp$go = x0=>x1=>x2=>Word$cmp$go$(x0,x1,x2);
  const Cmp$eql = ({_:'Cmp.eql'});
  function Word$cmp$(_a$2,_b$3){var $65 = Word$cmp$go$(_a$2,_b$3,Cmp$eql);return $65;};
  const Word$cmp = x0=>x1=>Word$cmp$(x0,x1);
  function Word$ltn$(_a$2,_b$3){var $66 = Cmp$as_ltn$(Word$cmp$(_a$2,_b$3));return $66;};
  const Word$ltn = x0=>x1=>Word$ltn$(x0,x1);
  function Nat$succ$(_pred$1){var $67 = 1n+_pred$1;return $67;};
  const Nat$succ = x0=>Nat$succ$(x0);
  const Nat$zero = 0n;
  const U16$ltn = a0=>a1=>(a0<a1);
  function U16$new$(_value$1){var $68 = word_to_u16(_value$1);return $68;};
  const U16$new = x0=>U16$new$(x0);
  function Nat$apply$(_n$2,_f$3,_x$4){var Nat$apply$=(_n$2,_f$3,_x$4)=>({ctr:'TCO',arg:[_n$2,_f$3,_x$4]});var Nat$apply=_n$2=>_f$3=>_x$4=>Nat$apply$(_n$2,_f$3,_x$4);var arg=[_n$2,_f$3,_x$4];while(true){let [_n$2,_f$3,_x$4]=arg;var R=(()=>{var self = _n$2;if (self===0n) {var $69 = _x$4;return $69;} else {var $70=(self-1n);var $71 = Nat$apply$($70,_f$3,_f$3(_x$4));return $71;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Nat$apply = x0=>x1=>x2=>Nat$apply$(x0,x1,x2);
  function Word$(_size$1){var $72 = null;return $72;};
  const Word = x0=>Word$(x0);
  const Word$e = ({_:'Word.e'});
  function Word$i$(_pred$2){var $73 = ({_:'Word.i','pred':_pred$2});return $73;};
  const Word$i = x0=>Word$i$(x0);
  function Word$o$(_pred$2){var $74 = ({_:'Word.o','pred':_pred$2});return $74;};
  const Word$o = x0=>Word$o$(x0);
  function Word$inc$(_word$2){var self = _word$2;switch(self._){case 'Word.o':var $76=self.pred;var $77 = Word$i$($76);var $75 = $77;break;case 'Word.i':var $78=self.pred;var $79 = Word$o$(Word$inc$($78));var $75 = $79;break;case 'Word.e':var $80 = Word$e;var $75 = $80;break;};return $75;};
  const Word$inc = x0=>Word$inc$(x0);
  function Word$zero$(_size$1){var self = _size$1;if (self===0n) {var $82 = Word$e;var $81 = $82;} else {var $83=(self-1n);var $84 = Word$o$(Word$zero$($83));var $81 = $84;};return $81;};
  const Word$zero = x0=>Word$zero$(x0);
  function Nat$to_word$(_size$1,_n$2){var $85 = Nat$apply$(_n$2,Word$inc,Word$zero$(_size$1));return $85;};
  const Nat$to_word = x0=>x1=>Nat$to_word$(x0,x1);
  const Nat$to_u16 = a0=>(Number(a0)&0xFFFF);
  function Kind$Name$to_bits$go$(_name$1,_end$2){var self = _name$1;if (self.length===0) {var $87 = _end$2;var $86 = $87;} else {var $88=self.charCodeAt(0);var $89=self.slice(1);var _x$5 = $88;var _O$6 = Bits$o;var _I$7 = Bits$i;var self = (_x$5<47);if (self) {var $91 = _I$7(_I$7(_I$7(_I$7(_I$7(_O$6((kind_name_to_bits($89))))))));var $90 = $91;} else {var self = (_x$5<58);if (self) {var self = (_x$5<53);if (self) {var self = (_x$5<50);if (self) {var self = (_x$5<49);if (self) {var $96 = _I$7(_I$7(_O$6(_I$7(_O$6(_O$6((kind_name_to_bits($89))))))));var $95 = $96;} else {var $97 = _I$7(_I$7(_O$6(_I$7(_O$6(_I$7((kind_name_to_bits($89))))))));var $95 = $97;};var $94 = $95;} else {var self = (_x$5<51);if (self) {var $99 = _I$7(_I$7(_O$6(_I$7(_I$7(_O$6((kind_name_to_bits($89))))))));var $98 = $99;} else {var self = (_x$5<52);if (self) {var $101 = _I$7(_I$7(_O$6(_I$7(_I$7(_I$7((kind_name_to_bits($89))))))));var $100 = $101;} else {var $102 = _I$7(_I$7(_I$7(_O$6(_O$6(_O$6((kind_name_to_bits($89))))))));var $100 = $102;};var $98 = $100;};var $94 = $98;};var $93 = $94;} else {var self = (_x$5<55);if (self) {var self = (_x$5<54);if (self) {var $105 = _I$7(_I$7(_I$7(_O$6(_O$6(_I$7((kind_name_to_bits($89))))))));var $104 = $105;} else {var $106 = _I$7(_I$7(_I$7(_O$6(_I$7(_O$6((kind_name_to_bits($89))))))));var $104 = $106;};var $103 = $104;} else {var self = (_x$5<56);if (self) {var $108 = _I$7(_I$7(_I$7(_O$6(_I$7(_I$7((kind_name_to_bits($89))))))));var $107 = $108;} else {var self = (_x$5<57);if (self) {var $110 = _I$7(_I$7(_I$7(_I$7(_O$6(_O$6((kind_name_to_bits($89))))))));var $109 = $110;} else {var $111 = _I$7(_I$7(_I$7(_I$7(_O$6(_I$7((kind_name_to_bits($89))))))));var $109 = $111;};var $107 = $109;};var $103 = $107;};var $93 = $103;};var $92 = $93;} else {var self = (_x$5<91);if (self) {var self = (_x$5<78);if (self) {var self = (_x$5<71);if (self) {var self = (_x$5<68);if (self) {var self = (_x$5<66);if (self) {var $117 = _O$6(_O$6(_O$6(_O$6(_O$6(_O$6((kind_name_to_bits($89))))))));var $116 = $117;} else {var self = (_x$5<67);if (self) {var $119 = _O$6(_O$6(_O$6(_O$6(_O$6(_I$7((kind_name_to_bits($89))))))));var $118 = $119;} else {var $120 = _O$6(_O$6(_O$6(_O$6(_I$7(_O$6((kind_name_to_bits($89))))))));var $118 = $120;};var $116 = $118;};var $115 = $116;} else {var self = (_x$5<69);if (self) {var $122 = _O$6(_O$6(_O$6(_O$6(_I$7(_I$7((kind_name_to_bits($89))))))));var $121 = $122;} else {var self = (_x$5<70);if (self) {var $124 = _O$6(_O$6(_O$6(_I$7(_O$6(_O$6((kind_name_to_bits($89))))))));var $123 = $124;} else {var $125 = _O$6(_O$6(_O$6(_I$7(_O$6(_I$7((kind_name_to_bits($89))))))));var $123 = $125;};var $121 = $123;};var $115 = $121;};var $114 = $115;} else {var self = (_x$5<74);if (self) {var self = (_x$5<72);if (self) {var $128 = _O$6(_O$6(_O$6(_I$7(_I$7(_O$6((kind_name_to_bits($89))))))));var $127 = $128;} else {var self = (_x$5<73);if (self) {var $130 = _O$6(_O$6(_O$6(_I$7(_I$7(_I$7((kind_name_to_bits($89))))))));var $129 = $130;} else {var $131 = _O$6(_O$6(_I$7(_O$6(_O$6(_O$6((kind_name_to_bits($89))))))));var $129 = $131;};var $127 = $129;};var $126 = $127;} else {var self = (_x$5<76);if (self) {var self = (_x$5<75);if (self) {var $134 = _O$6(_O$6(_I$7(_O$6(_O$6(_I$7((kind_name_to_bits($89))))))));var $133 = $134;} else {var $135 = _O$6(_O$6(_I$7(_O$6(_I$7(_O$6((kind_name_to_bits($89))))))));var $133 = $135;};var $132 = $133;} else {var self = (_x$5<77);if (self) {var $137 = _O$6(_O$6(_I$7(_O$6(_I$7(_I$7((kind_name_to_bits($89))))))));var $136 = $137;} else {var $138 = _O$6(_O$6(_I$7(_I$7(_O$6(_O$6((kind_name_to_bits($89))))))));var $136 = $138;};var $132 = $136;};var $126 = $132;};var $114 = $126;};var $113 = $114;} else {var self = (_x$5<84);if (self) {var self = (_x$5<81);if (self) {var self = (_x$5<79);if (self) {var $142 = _O$6(_O$6(_I$7(_I$7(_O$6(_I$7((kind_name_to_bits($89))))))));var $141 = $142;} else {var self = (_x$5<80);if (self) {var $144 = _O$6(_O$6(_I$7(_I$7(_I$7(_O$6((kind_name_to_bits($89))))))));var $143 = $144;} else {var $145 = _O$6(_O$6(_I$7(_I$7(_I$7(_I$7((kind_name_to_bits($89))))))));var $143 = $145;};var $141 = $143;};var $140 = $141;} else {var self = (_x$5<82);if (self) {var $147 = _O$6(_I$7(_O$6(_O$6(_O$6(_O$6((kind_name_to_bits($89))))))));var $146 = $147;} else {var self = (_x$5<83);if (self) {var $149 = _O$6(_I$7(_O$6(_O$6(_O$6(_I$7((kind_name_to_bits($89))))))));var $148 = $149;} else {var $150 = _O$6(_I$7(_O$6(_O$6(_I$7(_O$6((kind_name_to_bits($89))))))));var $148 = $150;};var $146 = $148;};var $140 = $146;};var $139 = $140;} else {var self = (_x$5<87);if (self) {var self = (_x$5<85);if (self) {var $153 = _O$6(_I$7(_O$6(_O$6(_I$7(_I$7((kind_name_to_bits($89))))))));var $152 = $153;} else {var self = (_x$5<86);if (self) {var $155 = _O$6(_I$7(_O$6(_I$7(_O$6(_O$6((kind_name_to_bits($89))))))));var $154 = $155;} else {var $156 = _O$6(_I$7(_O$6(_I$7(_O$6(_I$7((kind_name_to_bits($89))))))));var $154 = $156;};var $152 = $154;};var $151 = $152;} else {var self = (_x$5<89);if (self) {var self = (_x$5<88);if (self) {var $159 = _O$6(_I$7(_O$6(_I$7(_I$7(_O$6((kind_name_to_bits($89))))))));var $158 = $159;} else {var $160 = _O$6(_I$7(_O$6(_I$7(_I$7(_I$7((kind_name_to_bits($89))))))));var $158 = $160;};var $157 = $158;} else {var self = (_x$5<90);if (self) {var $162 = _O$6(_I$7(_I$7(_O$6(_O$6(_O$6((kind_name_to_bits($89))))))));var $161 = $162;} else {var $163 = _O$6(_I$7(_I$7(_O$6(_O$6(_I$7((kind_name_to_bits($89))))))));var $161 = $163;};var $157 = $161;};var $151 = $157;};var $139 = $151;};var $113 = $139;};var $112 = $113;} else {var self = (_x$5<96);if (self) {var $165 = _I$7(_I$7(_I$7(_I$7(_I$7(_I$7((kind_name_to_bits($89))))))));var $164 = $165;} else {var self = (_x$5<110);if (self) {var self = (_x$5<103);if (self) {var self = (_x$5<100);if (self) {var self = (_x$5<98);if (self) {var $170 = _O$6(_I$7(_I$7(_O$6(_I$7(_O$6((kind_name_to_bits($89))))))));var $169 = $170;} else {var self = (_x$5<99);if (self) {var $172 = _O$6(_I$7(_I$7(_O$6(_I$7(_I$7((kind_name_to_bits($89))))))));var $171 = $172;} else {var $173 = _O$6(_I$7(_I$7(_I$7(_O$6(_O$6((kind_name_to_bits($89))))))));var $171 = $173;};var $169 = $171;};var $168 = $169;} else {var self = (_x$5<101);if (self) {var $175 = _O$6(_I$7(_I$7(_I$7(_O$6(_I$7((kind_name_to_bits($89))))))));var $174 = $175;} else {var self = (_x$5<102);if (self) {var $177 = _O$6(_I$7(_I$7(_I$7(_I$7(_O$6((kind_name_to_bits($89))))))));var $176 = $177;} else {var $178 = _O$6(_I$7(_I$7(_I$7(_I$7(_I$7((kind_name_to_bits($89))))))));var $176 = $178;};var $174 = $176;};var $168 = $174;};var $167 = $168;} else {var self = (_x$5<106);if (self) {var self = (_x$5<104);if (self) {var $181 = _I$7(_O$6(_O$6(_O$6(_O$6(_O$6((kind_name_to_bits($89))))))));var $180 = $181;} else {var self = (_x$5<105);if (self) {var $183 = _I$7(_O$6(_O$6(_O$6(_O$6(_I$7((kind_name_to_bits($89))))))));var $182 = $183;} else {var $184 = _I$7(_O$6(_O$6(_O$6(_I$7(_O$6((kind_name_to_bits($89))))))));var $182 = $184;};var $180 = $182;};var $179 = $180;} else {var self = (_x$5<108);if (self) {var self = (_x$5<107);if (self) {var $187 = _I$7(_O$6(_O$6(_O$6(_I$7(_I$7((kind_name_to_bits($89))))))));var $186 = $187;} else {var $188 = _I$7(_O$6(_O$6(_I$7(_O$6(_O$6((kind_name_to_bits($89))))))));var $186 = $188;};var $185 = $186;} else {var self = (_x$5<109);if (self) {var $190 = _I$7(_O$6(_O$6(_I$7(_O$6(_I$7((kind_name_to_bits($89))))))));var $189 = $190;} else {var $191 = _I$7(_O$6(_O$6(_I$7(_I$7(_O$6((kind_name_to_bits($89))))))));var $189 = $191;};var $185 = $189;};var $179 = $185;};var $167 = $179;};var $166 = $167;} else {var self = (_x$5<116);if (self) {var self = (_x$5<113);if (self) {var self = (_x$5<111);if (self) {var $195 = _I$7(_O$6(_O$6(_I$7(_I$7(_I$7((kind_name_to_bits($89))))))));var $194 = $195;} else {var self = (_x$5<112);if (self) {var $197 = _I$7(_O$6(_I$7(_O$6(_O$6(_O$6((kind_name_to_bits($89))))))));var $196 = $197;} else {var $198 = _I$7(_O$6(_I$7(_O$6(_O$6(_I$7((kind_name_to_bits($89))))))));var $196 = $198;};var $194 = $196;};var $193 = $194;} else {var self = (_x$5<114);if (self) {var $200 = _I$7(_O$6(_I$7(_O$6(_I$7(_O$6((kind_name_to_bits($89))))))));var $199 = $200;} else {var self = (_x$5<115);if (self) {var $202 = _I$7(_O$6(_I$7(_O$6(_I$7(_I$7((kind_name_to_bits($89))))))));var $201 = $202;} else {var $203 = _I$7(_O$6(_I$7(_I$7(_O$6(_O$6((kind_name_to_bits($89))))))));var $201 = $203;};var $199 = $201;};var $193 = $199;};var $192 = $193;} else {var self = (_x$5<119);if (self) {var self = (_x$5<117);if (self) {var $206 = _I$7(_O$6(_I$7(_I$7(_O$6(_I$7((kind_name_to_bits($89))))))));var $205 = $206;} else {var self = (_x$5<118);if (self) {var $208 = _I$7(_O$6(_I$7(_I$7(_I$7(_O$6((kind_name_to_bits($89))))))));var $207 = $208;} else {var $209 = _I$7(_O$6(_I$7(_I$7(_I$7(_I$7((kind_name_to_bits($89))))))));var $207 = $209;};var $205 = $207;};var $204 = $205;} else {var self = (_x$5<121);if (self) {var self = (_x$5<120);if (self) {var $212 = _I$7(_I$7(_O$6(_O$6(_O$6(_O$6((kind_name_to_bits($89))))))));var $211 = $212;} else {var $213 = _I$7(_I$7(_O$6(_O$6(_O$6(_I$7((kind_name_to_bits($89))))))));var $211 = $213;};var $210 = $211;} else {var self = (_x$5<122);if (self) {var $215 = _I$7(_I$7(_O$6(_O$6(_I$7(_O$6((kind_name_to_bits($89))))))));var $214 = $215;} else {var $216 = _I$7(_I$7(_O$6(_O$6(_I$7(_I$7((kind_name_to_bits($89))))))));var $214 = $216;};var $210 = $214;};var $204 = $210;};var $192 = $204;};var $166 = $192;};var $164 = $166;};var $112 = $164;};var $92 = $112;};var $90 = $92;};var $86 = $90;};return $86;};
  const Kind$Name$to_bits$go = x0=>x1=>Kind$Name$to_bits$go$(x0,x1);
  const Bits$e = '';
  const Kind$Name$to_bits = a0=>(kind_name_to_bits(a0));
  function Kind$Map$get$(_name$2,_map$3){var $217 = (bitsmap_get((kind_name_to_bits(_name$2)),_map$3));return $217;};
  const Kind$Map$get = x0=>x1=>Kind$Map$get$(x0,x1);
  function Maybe$default$(_m$2,_a$3){var self = _m$2;switch(self._){case 'Maybe.some':var $219=self.value;var $220 = $219;var $218 = $220;break;case 'Maybe.none':var $221 = _a$3;var $218 = $221;break;};return $218;};
  const Maybe$default = x0=>x1=>Maybe$default$(x0,x1);
  function Parser$State$new$(_err$1,_nam$2,_ini$3,_idx$4,_str$5){var $222 = ({_:'Parser.State.new','err':_err$1,'nam':_nam$2,'ini':_ini$3,'idx':_idx$4,'str':_str$5});return $222;};
  const Parser$State$new = x0=>x1=>x2=>x3=>x4=>Parser$State$new$(x0,x1,x2,x3,x4);
  function Maybe$some$(_value$2){var $223 = ({_:'Maybe.some','value':_value$2});return $223;};
  const Maybe$some = x0=>Maybe$some$(x0);
  function Parser$run$(_parser$2,_code$3){var self = _parser$2(Parser$State$new$(Maybe$none,"",0n,0n,_code$3));switch(self._){case 'Parser.Reply.value':var $225=self.val;var $226 = Maybe$some$($225);var $224 = $226;break;case 'Parser.Reply.error':var $227 = Maybe$none;var $224 = $227;break;};return $224;};
  const Parser$run = x0=>x1=>Parser$run$(x0,x1);
  function Parser$Reply$(_V$1){var $228 = null;return $228;};
  const Parser$Reply = x0=>Parser$Reply$(x0);
  function List$(_A$1){var $229 = null;return $229;};
  const List = x0=>List$(x0);
  function Parser$Reply$error$(_err$2){var $230 = ({_:'Parser.Reply.error','err':_err$2});return $230;};
  const Parser$Reply$error = x0=>Parser$Reply$error$(x0);
  const Nat$gtn = a0=>a1=>(a0>a1);
  function Parser$Error$combine$(_a$1,_b$2){var self = _a$1;switch(self._){case 'Parser.Error.new':var $232=self.idx;var self = _b$2;switch(self._){case 'Parser.Error.new':var $234=self.idx;var self = ($232>$234);if (self) {var $236 = _a$1;var $235 = $236;} else {var $237 = _b$2;var $235 = $237;};var $233 = $235;break;};var $231 = $233;break;};return $231;};
  const Parser$Error$combine = x0=>x1=>Parser$Error$combine$(x0,x1);
  function Parser$Error$maybe_combine$(_a$1,_b$2){var self = _a$1;switch(self._){case 'Maybe.some':var $239=self.value;var self = _b$2;switch(self._){case 'Maybe.some':var $241=self.value;var $242 = Maybe$some$(Parser$Error$combine$($239,$241));var $240 = $242;break;case 'Maybe.none':var $243 = _a$1;var $240 = $243;break;};var $238 = $240;break;case 'Maybe.none':var self = _b$2;switch(self._){case 'Maybe.none':var $245 = Maybe$none;var $244 = $245;break;case 'Maybe.some':var $246 = _b$2;var $244 = $246;break;};var $238 = $244;break;};return $238;};
  const Parser$Error$maybe_combine = x0=>x1=>Parser$Error$maybe_combine$(x0,x1);
  function Parser$Reply$value$(_pst$2,_val$3){var $247 = ({_:'Parser.Reply.value','pst':_pst$2,'val':_val$3});return $247;};
  const Parser$Reply$value = x0=>x1=>Parser$Reply$value$(x0,x1);
  const List$nil = ({_:'List.nil'});
  function List$cons$(_head$2,_tail$3){var $248 = ({_:'List.cons','head':_head$2,'tail':_tail$3});return $248;};
  const List$cons = x0=>x1=>List$cons$(x0,x1);
  function Parser$many$go$(_parse$2,_values$3,_pst$4){var Parser$many$go$=(_parse$2,_values$3,_pst$4)=>({ctr:'TCO',arg:[_parse$2,_values$3,_pst$4]});var Parser$many$go=_parse$2=>_values$3=>_pst$4=>Parser$many$go$(_parse$2,_values$3,_pst$4);var arg=[_parse$2,_values$3,_pst$4];while(true){let [_parse$2,_values$3,_pst$4]=arg;var R=(()=>{var self = _pst$4;switch(self._){case 'Parser.State.new':var self = _parse$2(_pst$4);switch(self._){case 'Parser.Reply.value':var $250=self.pst;var $251=self.val;var $252 = Parser$many$go$(_parse$2,(_xs$12=>{var $253 = _values$3(List$cons$($251,_xs$12));return $253;}),$250);var $249 = $252;break;case 'Parser.Reply.error':var $254 = Parser$Reply$value$(_pst$4,_values$3(List$nil));var $249 = $254;break;};return $249;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Parser$many$go = x0=>x1=>x2=>Parser$many$go$(x0,x1,x2);
  function Parser$many$(_parser$2){var $255 = Parser$many$go(_parser$2)((_x$3=>{var $256 = _x$3;return $256;}));return $255;};
  const Parser$many = x0=>Parser$many$(x0);
  function Parser$many1$(_parser$2,_pst$3){var self = _pst$3;switch(self._){case 'Parser.State.new':var $258=self.err;var _reply$9 = _parser$2(_pst$3);var self = _reply$9;switch(self._){case 'Parser.Reply.error':var $260=self.err;var self = $258;switch(self._){case 'Maybe.some':var $262=self.value;var $263 = Parser$Reply$error$(Parser$Error$combine$($262,$260));var $261 = $263;break;case 'Maybe.none':var $264 = Parser$Reply$error$($260);var $261 = $264;break;};var $259 = $261;break;case 'Parser.Reply.value':var $265=self.pst;var $266=self.val;var self = $265;switch(self._){case 'Parser.State.new':var $268=self.err;var $269=self.nam;var $270=self.ini;var $271=self.idx;var $272=self.str;var _reply$pst$17 = Parser$State$new$(Parser$Error$maybe_combine$($258,$268),$269,$270,$271,$272);var self = _reply$pst$17;switch(self._){case 'Parser.State.new':var $274=self.err;var _reply$23 = Parser$many$(_parser$2)(_reply$pst$17);var self = _reply$23;switch(self._){case 'Parser.Reply.error':var $276=self.err;var self = $274;switch(self._){case 'Maybe.some':var $278=self.value;var $279 = Parser$Reply$error$(Parser$Error$combine$($278,$276));var $277 = $279;break;case 'Maybe.none':var $280 = Parser$Reply$error$($276);var $277 = $280;break;};var $275 = $277;break;case 'Parser.Reply.value':var $281=self.pst;var $282=self.val;var self = $281;switch(self._){case 'Parser.State.new':var $284=self.err;var $285=self.nam;var $286=self.ini;var $287=self.idx;var $288=self.str;var _reply$pst$31 = Parser$State$new$(Parser$Error$maybe_combine$($274,$284),$285,$286,$287,$288);var $289 = Parser$Reply$value$(_reply$pst$31,List$cons$($266,$282));var $283 = $289;break;};var $275 = $283;break;};var $273 = $275;break;};var $267 = $273;break;};var $259 = $267;break;};var $257 = $259;break;};return $257;};
  const Parser$many1 = x0=>x1=>Parser$many1$(x0,x1);
  function Parser$Error$new$(_nam$1,_ini$2,_idx$3,_msg$4){var $290 = ({_:'Parser.Error.new','nam':_nam$1,'ini':_ini$2,'idx':_idx$3,'msg':_msg$4});return $290;};
  const Parser$Error$new = x0=>x1=>x2=>x3=>Parser$Error$new$(x0,x1,x2,x3);
  function Parser$Reply$fail$(_nam$2,_ini$3,_idx$4,_msg$5){var $291 = Parser$Reply$error$(Parser$Error$new$(_nam$2,_ini$3,_idx$4,_msg$5));return $291;};
  const Parser$Reply$fail = x0=>x1=>x2=>x3=>Parser$Reply$fail$(x0,x1,x2,x3);
  function Cmp$as_eql$(_cmp$1){var self = _cmp$1;switch(self._){case 'Cmp.ltn':case 'Cmp.gtn':var $293 = Bool$false;var $292 = $293;break;case 'Cmp.eql':var $294 = Bool$true;var $292 = $294;break;};return $292;};
  const Cmp$as_eql = x0=>Cmp$as_eql$(x0);
  function Word$eql$(_a$2,_b$3){var $295 = Cmp$as_eql$(Word$cmp$(_a$2,_b$3));return $295;};
  const Word$eql = x0=>x1=>Word$eql$(x0,x1);
  const U16$eql = a0=>a1=>(a0===a1);
  function Parser$digit$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $297=self.err;var $298=self.nam;var $299=self.ini;var $300=self.idx;var $301=self.str;var self = $301;if (self.length===0) {var $303 = Parser$Reply$fail$($298,$299,$300,"Not a digit.");var $302 = $303;} else {var $304=self.charCodeAt(0);var $305=self.slice(1);var _pst$9 = Parser$State$new$($297,$298,$299,Nat$succ$($300),$305);var self = ($304===48);if (self) {var $307 = Parser$Reply$value$(_pst$9,0n);var $306 = $307;} else {var self = ($304===49);if (self) {var $309 = Parser$Reply$value$(_pst$9,1n);var $308 = $309;} else {var self = ($304===50);if (self) {var $311 = Parser$Reply$value$(_pst$9,2n);var $310 = $311;} else {var self = ($304===51);if (self) {var $313 = Parser$Reply$value$(_pst$9,3n);var $312 = $313;} else {var self = ($304===52);if (self) {var $315 = Parser$Reply$value$(_pst$9,4n);var $314 = $315;} else {var self = ($304===53);if (self) {var $317 = Parser$Reply$value$(_pst$9,5n);var $316 = $317;} else {var self = ($304===54);if (self) {var $319 = Parser$Reply$value$(_pst$9,6n);var $318 = $319;} else {var self = ($304===55);if (self) {var $321 = Parser$Reply$value$(_pst$9,7n);var $320 = $321;} else {var self = ($304===56);if (self) {var $323 = Parser$Reply$value$(_pst$9,8n);var $322 = $323;} else {var self = ($304===57);if (self) {var $325 = Parser$Reply$value$(_pst$9,9n);var $324 = $325;} else {var $326 = Parser$Reply$fail$($298,$299,$300,"Not a digit.");var $324 = $326;};var $322 = $324;};var $320 = $322;};var $318 = $320;};var $316 = $318;};var $314 = $316;};var $312 = $314;};var $310 = $312;};var $308 = $310;};var $306 = $308;};var $302 = $306;};var $296 = $302;break;};return $296;};
  const Parser$digit = x0=>Parser$digit$(x0);
  const Nat$add = a0=>a1=>(a0+a1);
  const Nat$mul = a0=>a1=>(a0*a1);
  function Nat$from_base$go$(_b$1,_ds$2,_p$3,_res$4){var Nat$from_base$go$=(_b$1,_ds$2,_p$3,_res$4)=>({ctr:'TCO',arg:[_b$1,_ds$2,_p$3,_res$4]});var Nat$from_base$go=_b$1=>_ds$2=>_p$3=>_res$4=>Nat$from_base$go$(_b$1,_ds$2,_p$3,_res$4);var arg=[_b$1,_ds$2,_p$3,_res$4];while(true){let [_b$1,_ds$2,_p$3,_res$4]=arg;var R=(()=>{var self = _ds$2;switch(self._){case 'List.cons':var $327=self.head;var $328=self.tail;var $329 = Nat$from_base$go$(_b$1,$328,(_b$1*_p$3),(($327*_p$3)+_res$4));return $329;case 'List.nil':var $330 = _res$4;return $330;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Nat$from_base$go = x0=>x1=>x2=>x3=>Nat$from_base$go$(x0,x1,x2,x3);
  function List$reverse$go$(_xs$2,_res$3){var List$reverse$go$=(_xs$2,_res$3)=>({ctr:'TCO',arg:[_xs$2,_res$3]});var List$reverse$go=_xs$2=>_res$3=>List$reverse$go$(_xs$2,_res$3);var arg=[_xs$2,_res$3];while(true){let [_xs$2,_res$3]=arg;var R=(()=>{var self = _xs$2;switch(self._){case 'List.cons':var $331=self.head;var $332=self.tail;var $333 = List$reverse$go$($332,List$cons$($331,_res$3));return $333;case 'List.nil':var $334 = _res$3;return $334;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const List$reverse$go = x0=>x1=>List$reverse$go$(x0,x1);
  function List$reverse$(_xs$2){var $335 = List$reverse$go$(_xs$2,List$nil);return $335;};
  const List$reverse = x0=>List$reverse$(x0);
  function Nat$from_base$(_base$1,_ds$2){var $336 = Nat$from_base$go$(_base$1,List$reverse$(_ds$2),1n,0n);return $336;};
  const Nat$from_base = x0=>x1=>Nat$from_base$(x0,x1);
  function Parser$nat$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $338=self.err;var _reply$7 = Parser$many1$(Parser$digit,_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $340=self.err;var self = $338;switch(self._){case 'Maybe.some':var $342=self.value;var $343 = Parser$Reply$error$(Parser$Error$combine$($342,$340));var $341 = $343;break;case 'Maybe.none':var $344 = Parser$Reply$error$($340);var $341 = $344;break;};var $339 = $341;break;case 'Parser.Reply.value':var $345=self.pst;var $346=self.val;var self = $345;switch(self._){case 'Parser.State.new':var $348=self.err;var $349=self.nam;var $350=self.ini;var $351=self.idx;var $352=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($338,$348),$349,$350,$351,$352);var $353 = Parser$Reply$value$(_reply$pst$15,Nat$from_base$(10n,$346));var $347 = $353;break;};var $339 = $347;break;};var $337 = $339;break;};return $337;};
  const Parser$nat = x0=>Parser$nat$(x0);
  const Nat$read = a0=>(BigInt(a0));
  const IO$get_time = IO$ask$("get_time","",(_time$1=>{var $354 = IO$end$((BigInt(_time$1)));return $354;}));
  function Kind$Synth$load$cached$is_loop$(_name$1,_defs$2){var self = Kind$Map$get$(_name$1,_defs$2);switch(self._){case 'Maybe.some':var $356=self.value;var self = $356;switch(self._){case 'Kind.Def.new':var $358=self.stat;var self = $358;switch(self._){case 'Kind.Status.done':var $360=self.cached;var $361 = $360;var $359 = $361;break;case 'Kind.Status.init':case 'Kind.Status.wait':case 'Kind.Status.fail':var $362 = Bool$false;var $359 = $362;break;};var $357 = $359;break;};var $355 = $357;break;case 'Maybe.none':var $363 = Bool$false;var $355 = $363;break;};return $355;};
  const Kind$Synth$load$cached$is_loop = x0=>x1=>Kind$Synth$load$cached$is_loop$(x0,x1);
  function IO$get_file$(_name$1){var $364 = IO$ask$("get_file",_name$1,(_file$2=>{var $365 = IO$end$(_file$2);return $365;}));return $364;};
  const IO$get_file = x0=>IO$get_file$(x0);
  function String$cons$(_head$1,_tail$2){var $366 = (String.fromCharCode(_head$1)+_tail$2);return $366;};
  const String$cons = x0=>x1=>String$cons$(x0,x1);
  const String$concat = a0=>a1=>(a0+a1);
  function Bits$hex$encode$(_x$1){var self = _x$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $368=self.slice(0,-1);var self = $368;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $370=self.slice(0,-1);var self = $370;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $372=self.slice(0,-1);var self = $372;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $374=self.slice(0,-1);var $375 = ("0"+Bits$hex$encode$($374));var $373 = $375;break;case 'i':var $376=self.slice(0,-1);var $377 = ("8"+Bits$hex$encode$($376));var $373 = $377;break;case 'e':var $378 = "0";var $373 = $378;break;};var $371 = $373;break;case 'i':var $379=self.slice(0,-1);var self = $379;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $381=self.slice(0,-1);var $382 = ("4"+Bits$hex$encode$($381));var $380 = $382;break;case 'i':var $383=self.slice(0,-1);var $384 = ("c"+Bits$hex$encode$($383));var $380 = $384;break;case 'e':var $385 = "4";var $380 = $385;break;};var $371 = $380;break;case 'e':var $386 = "0";var $371 = $386;break;};var $369 = $371;break;case 'i':var $387=self.slice(0,-1);var self = $387;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $389=self.slice(0,-1);var self = $389;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $391=self.slice(0,-1);var $392 = ("2"+Bits$hex$encode$($391));var $390 = $392;break;case 'i':var $393=self.slice(0,-1);var $394 = ("a"+Bits$hex$encode$($393));var $390 = $394;break;case 'e':var $395 = "2";var $390 = $395;break;};var $388 = $390;break;case 'i':var $396=self.slice(0,-1);var self = $396;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $398=self.slice(0,-1);var $399 = ("6"+Bits$hex$encode$($398));var $397 = $399;break;case 'i':var $400=self.slice(0,-1);var $401 = ("e"+Bits$hex$encode$($400));var $397 = $401;break;case 'e':var $402 = "6";var $397 = $402;break;};var $388 = $397;break;case 'e':var $403 = "2";var $388 = $403;break;};var $369 = $388;break;case 'e':var $404 = "0";var $369 = $404;break;};var $367 = $369;break;case 'i':var $405=self.slice(0,-1);var self = $405;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $407=self.slice(0,-1);var self = $407;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $409=self.slice(0,-1);var self = $409;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $411=self.slice(0,-1);var $412 = ("1"+Bits$hex$encode$($411));var $410 = $412;break;case 'i':var $413=self.slice(0,-1);var $414 = ("9"+Bits$hex$encode$($413));var $410 = $414;break;case 'e':var $415 = "1";var $410 = $415;break;};var $408 = $410;break;case 'i':var $416=self.slice(0,-1);var self = $416;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $418=self.slice(0,-1);var $419 = ("5"+Bits$hex$encode$($418));var $417 = $419;break;case 'i':var $420=self.slice(0,-1);var $421 = ("d"+Bits$hex$encode$($420));var $417 = $421;break;case 'e':var $422 = "5";var $417 = $422;break;};var $408 = $417;break;case 'e':var $423 = "1";var $408 = $423;break;};var $406 = $408;break;case 'i':var $424=self.slice(0,-1);var self = $424;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $426=self.slice(0,-1);var self = $426;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $428=self.slice(0,-1);var $429 = ("3"+Bits$hex$encode$($428));var $427 = $429;break;case 'i':var $430=self.slice(0,-1);var $431 = ("b"+Bits$hex$encode$($430));var $427 = $431;break;case 'e':var $432 = "3";var $427 = $432;break;};var $425 = $427;break;case 'i':var $433=self.slice(0,-1);var self = $433;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $435=self.slice(0,-1);var $436 = ("7"+Bits$hex$encode$($435));var $434 = $436;break;case 'i':var $437=self.slice(0,-1);var $438 = ("f"+Bits$hex$encode$($437));var $434 = $438;break;case 'e':var $439 = "7";var $434 = $439;break;};var $425 = $434;break;case 'e':var $440 = "3";var $425 = $440;break;};var $406 = $425;break;case 'e':var $441 = "1";var $406 = $441;break;};var $367 = $406;break;case 'e':var $442 = "";var $367 = $442;break;};return $367;};
  const Bits$hex$encode = x0=>Bits$hex$encode$(x0);
  function Kind$Synth$load$cached$name$(_name$1){var $443 = (".cache/"+Bits$hex$encode$((kind_name_to_bits(_name$1))));return $443;};
  const Kind$Synth$load$cached$name = x0=>Kind$Synth$load$cached$name$(x0);
  function Kind$Synth$load$cached$get_file$(_name$1){var $444 = IO$get_file$(Kind$Synth$load$cached$name$(_name$1));return $444;};
  const Kind$Synth$load$cached$get_file = x0=>Kind$Synth$load$cached$get_file$(x0);
  const Bool$not = a0=>(!a0);
  function String$is_empty$(_str$1){var self = _str$1;if (self.length===0) {var $446 = Bool$true;var $445 = $446;} else {var $447=self.charCodeAt(0);var $448=self.slice(1);var $449 = Bool$false;var $445 = $449;};return $445;};
  const String$is_empty = x0=>String$is_empty$(x0);
  function IO$get_file_mtime$(_name$1){var $450 = IO$ask$("get_file_mtime",_name$1,(_file$2=>{var $451 = IO$end$(_file$2);return $451;}));return $450;};
  const IO$get_file_mtime = x0=>IO$get_file_mtime$(x0);
  const Bool$and = a0=>a1=>(a0&&a1);
  const String$eql = a0=>a1=>(a0===a1);
  function Pair$new$(_fst$3,_snd$4){var $452 = ({_:'Pair.new','fst':_fst$3,'snd':_snd$4});return $452;};
  const Pair$new = x0=>x1=>Pair$new$(x0,x1);
  function Maybe$bind$(_m$3,_f$4){var self = _m$3;switch(self._){case 'Maybe.some':var $454=self.value;var $455 = _f$4($454);var $453 = $455;break;case 'Maybe.none':var $456 = Maybe$none;var $453 = $456;break;};return $453;};
  const Maybe$bind = x0=>x1=>Maybe$bind$(x0,x1);
  function Maybe$monad$(_new$2){var $457 = _new$2(Maybe$bind)(Maybe$some);return $457;};
  const Maybe$monad = x0=>Maybe$monad$(x0);
  function Pair$(_A$1,_B$2){var $458 = null;return $458;};
  const Pair = x0=>x1=>Pair$(x0,x1);
  const Unit$new = null;
  const Bool$or = a0=>a1=>(a0||a1);
  function Kind$Core$read$spaces$(_code$1){var Kind$Core$read$spaces$=(_code$1)=>({ctr:'TCO',arg:[_code$1]});var Kind$Core$read$spaces=_code$1=>Kind$Core$read$spaces$(_code$1);var arg=[_code$1];while(true){let [_code$1]=arg;var R=(()=>{var self = _code$1;if (self.length===0) {var $459 = Pair$new$(_code$1,Unit$new);return $459;} else {var $460=self.charCodeAt(0);var $461=self.slice(1);var _is_space$4 = (($460===32)||(($460===10)||(($460===13)||(($460===9)||(($460===11)||(($460===12)||Bool$false))))));var self = _is_space$4;if (self) {var $463 = Kind$Core$read$spaces$($461);var $462 = $463;} else {var $464 = Pair$new$(_code$1,Unit$new);var $462 = $464;};return $462;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Core$read$spaces = x0=>Kind$Core$read$spaces$(x0);
  function Kind$Term$ref$(_name$1){var $465 = ({_:'Kind.Term.ref','name':_name$1});return $465;};
  const Kind$Term$ref = x0=>Kind$Term$ref$(x0);
  function Char$eql$(_a$1,_b$2){var $466 = (_a$1===_b$2);return $466;};
  const Char$eql = x0=>x1=>Char$eql$(x0,x1);
  const Kind$Term$typ = ({_:'Kind.Term.typ'});
  function Cmp$as_gte$(_cmp$1){var self = _cmp$1;switch(self._){case 'Cmp.ltn':var $468 = Bool$false;var $467 = $468;break;case 'Cmp.eql':case 'Cmp.gtn':var $469 = Bool$true;var $467 = $469;break;};return $467;};
  const Cmp$as_gte = x0=>Cmp$as_gte$(x0);
  function Word$gte$(_a$2,_b$3){var $470 = Cmp$as_gte$(Word$cmp$(_a$2,_b$3));return $470;};
  const Word$gte = x0=>x1=>Word$gte$(x0,x1);
  const U16$gte = a0=>a1=>(a0>=a1);
  function Cmp$as_lte$(_cmp$1){var self = _cmp$1;switch(self._){case 'Cmp.ltn':case 'Cmp.eql':var $472 = Bool$true;var $471 = $472;break;case 'Cmp.gtn':var $473 = Bool$false;var $471 = $473;break;};return $471;};
  const Cmp$as_lte = x0=>Cmp$as_lte$(x0);
  function Word$lte$(_a$2,_b$3){var $474 = Cmp$as_lte$(Word$cmp$(_a$2,_b$3));return $474;};
  const Word$lte = x0=>x1=>Word$lte$(x0,x1);
  const U16$lte = a0=>a1=>(a0<=a1);
  function Kind$Core$read$is_name$(_chr$1){var $475 = (((_chr$1>=46)&&(_chr$1<=47))||(((_chr$1>=48)&&(_chr$1<58))||(((_chr$1>=65)&&(_chr$1<91))||(((_chr$1>=95)&&(_chr$1<96))||(((_chr$1>=97)&&(_chr$1<123))||Bool$false)))));return $475;};
  const Kind$Core$read$is_name = x0=>Kind$Core$read$is_name$(x0);
  function Kind$Core$read$name$(_code$1){var self = _code$1;if (self.length===0) {var $477 = Pair$new$(_code$1,"");var $476 = $477;} else {var $478=self.charCodeAt(0);var $479=self.slice(1);var self = Kind$Core$read$is_name$($478);if (self) {var self = Kind$Core$read$name$($479);switch(self._){case 'Pair.new':var $482=self.fst;var $483=self.snd;var $484 = Pair$new$($482,String$cons$($478,$483));var $481 = $484;break;};var $480 = $481;} else {var $485 = Pair$new$(_code$1,"");var $480 = $485;};var $476 = $480;};return $476;};
  const Kind$Core$read$name = x0=>Kind$Core$read$name$(x0);
  function Kind$Core$read$char$(_code$1,_chr$2){var self = Kind$Core$read$spaces$(_code$1);switch(self._){case 'Pair.new':var $487=self.fst;var self = $487;if (self.length===0) {var $489 = Pair$new$("",Unit$new);var $488 = $489;} else {var $490=self.charCodeAt(0);var $491=self.slice(1);var self = ($490===_chr$2);if (self) {var $493 = Pair$new$($491,Unit$new);var $492 = $493;} else {var $494 = Pair$new$("",Unit$new);var $492 = $494;};var $488 = $492;};var $486 = $488;break;};return $486;};
  const Kind$Core$read$char = x0=>x1=>Kind$Core$read$char$(x0,x1);
  function Kind$Term$all$(_eras$1,_self$2,_name$3,_xtyp$4,_body$5){var $495 = ({_:'Kind.Term.all','eras':_eras$1,'self':_self$2,'name':_name$3,'xtyp':_xtyp$4,'body':_body$5});return $495;};
  const Kind$Term$all = x0=>x1=>x2=>x3=>x4=>Kind$Term$all$(x0,x1,x2,x3,x4);
  function Kind$Term$lam$(_name$1,_body$2){var $496 = ({_:'Kind.Term.lam','name':_name$1,'body':_body$2});return $496;};
  const Kind$Term$lam = x0=>x1=>Kind$Term$lam$(x0,x1);
  function Kind$Term$app$(_func$1,_argm$2){var $497 = ({_:'Kind.Term.app','func':_func$1,'argm':_argm$2});return $497;};
  const Kind$Term$app = x0=>x1=>Kind$Term$app$(x0,x1);
  function Kind$Term$let$(_name$1,_expr$2,_body$3){var $498 = ({_:'Kind.Term.let','name':_name$1,'expr':_expr$2,'body':_body$3});return $498;};
  const Kind$Term$let = x0=>x1=>x2=>Kind$Term$let$(x0,x1,x2);
  function Kind$Term$def$(_name$1,_expr$2,_body$3){var $499 = ({_:'Kind.Term.def','name':_name$1,'expr':_expr$2,'body':_body$3});return $499;};
  const Kind$Term$def = x0=>x1=>x2=>Kind$Term$def$(x0,x1,x2);
  function Kind$Term$ann$(_done$1,_term$2,_type$3){var $500 = ({_:'Kind.Term.ann','done':_done$1,'term':_term$2,'type':_type$3});return $500;};
  const Kind$Term$ann = x0=>x1=>x2=>Kind$Term$ann$(x0,x1,x2);
  function String$starts_with$(_xs$1,_match$2){var String$starts_with$=(_xs$1,_match$2)=>({ctr:'TCO',arg:[_xs$1,_match$2]});var String$starts_with=_xs$1=>_match$2=>String$starts_with$(_xs$1,_match$2);var arg=[_xs$1,_match$2];while(true){let [_xs$1,_match$2]=arg;var R=(()=>{var self = _match$2;if (self.length===0) {var $501 = Bool$true;return $501;} else {var $502=self.charCodeAt(0);var $503=self.slice(1);var self = _xs$1;if (self.length===0) {var $505 = Bool$false;var $504 = $505;} else {var $506=self.charCodeAt(0);var $507=self.slice(1);var self = Char$eql$($502,$506);if (self) {var $509 = String$starts_with$($507,$503);var $508 = $509;} else {var $510 = Bool$false;var $508 = $510;};var $504 = $508;};return $504;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const String$starts_with = x0=>x1=>String$starts_with$(x0,x1);
  const String$nil = '';
  function String$drop$(_n$1,_xs$2){var String$drop$=(_n$1,_xs$2)=>({ctr:'TCO',arg:[_n$1,_xs$2]});var String$drop=_n$1=>_xs$2=>String$drop$(_n$1,_xs$2);var arg=[_n$1,_xs$2];while(true){let [_n$1,_xs$2]=arg;var R=(()=>{var self = _n$1;if (self===0n) {var $511 = _xs$2;return $511;} else {var $512=(self-1n);var self = _xs$2;if (self.length===0) {var $514 = String$nil;var $513 = $514;} else {var $515=self.charCodeAt(0);var $516=self.slice(1);var $517 = String$drop$($512,$516);var $513 = $517;};return $513;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const String$drop = x0=>x1=>String$drop$(x0,x1);
  function Char$is_hex$(_chr$1){var $518 = (((_chr$1>=48)&&(_chr$1<=57))||(((_chr$1>=97)&&(_chr$1<=102))||(((_chr$1>=65)&&(_chr$1<=70))||Bool$false)));return $518;};
  const Char$is_hex = x0=>Char$is_hex$(x0);
  function Word$adder$(_a$2,_b$3,_c$4){var self = _a$2;switch(self._){case 'Word.o':var $520=self.pred;var $521 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $523=self.pred;var $524 = (_a$pred$10=>{var self = _c$4;if (self) {var $526 = Word$i$(Word$adder$(_a$pred$10,$523,Bool$false));var $525 = $526;} else {var $527 = Word$o$(Word$adder$(_a$pred$10,$523,Bool$false));var $525 = $527;};return $525;});var $522 = $524;break;case 'Word.i':var $528=self.pred;var $529 = (_a$pred$10=>{var self = _c$4;if (self) {var $531 = Word$o$(Word$adder$(_a$pred$10,$528,Bool$true));var $530 = $531;} else {var $532 = Word$i$(Word$adder$(_a$pred$10,$528,Bool$false));var $530 = $532;};return $530;});var $522 = $529;break;case 'Word.e':var $533 = (_a$pred$8=>{var $534 = Word$e;return $534;});var $522 = $533;break;};var $522 = $522($520);return $522;});var $519 = $521;break;case 'Word.i':var $535=self.pred;var $536 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $538=self.pred;var $539 = (_a$pred$10=>{var self = _c$4;if (self) {var $541 = Word$o$(Word$adder$(_a$pred$10,$538,Bool$true));var $540 = $541;} else {var $542 = Word$i$(Word$adder$(_a$pred$10,$538,Bool$false));var $540 = $542;};return $540;});var $537 = $539;break;case 'Word.i':var $543=self.pred;var $544 = (_a$pred$10=>{var self = _c$4;if (self) {var $546 = Word$i$(Word$adder$(_a$pred$10,$543,Bool$true));var $545 = $546;} else {var $547 = Word$o$(Word$adder$(_a$pred$10,$543,Bool$true));var $545 = $547;};return $545;});var $537 = $544;break;case 'Word.e':var $548 = (_a$pred$8=>{var $549 = Word$e;return $549;});var $537 = $548;break;};var $537 = $537($535);return $537;});var $519 = $536;break;case 'Word.e':var $550 = (_b$5=>{var $551 = Word$e;return $551;});var $519 = $550;break;};var $519 = $519(_b$3);return $519;};
  const Word$adder = x0=>x1=>x2=>Word$adder$(x0,x1,x2);
  function Word$add$(_a$2,_b$3){var $552 = Word$adder$(_a$2,_b$3,Bool$false);return $552;};
  const Word$add = x0=>x1=>Word$add$(x0,x1);
  const U16$add = a0=>a1=>((a0+a1)&0xFFFF);
  function Word$shift_left$one$go$(_word$2,_prev$3){var self = _word$2;switch(self._){case 'Word.o':var $554=self.pred;var self = _prev$3;if (self) {var $556 = Word$i$(Word$shift_left$one$go$($554,Bool$false));var $555 = $556;} else {var $557 = Word$o$(Word$shift_left$one$go$($554,Bool$false));var $555 = $557;};var $553 = $555;break;case 'Word.i':var $558=self.pred;var self = _prev$3;if (self) {var $560 = Word$i$(Word$shift_left$one$go$($558,Bool$true));var $559 = $560;} else {var $561 = Word$o$(Word$shift_left$one$go$($558,Bool$true));var $559 = $561;};var $553 = $559;break;case 'Word.e':var $562 = Word$e;var $553 = $562;break;};return $553;};
  const Word$shift_left$one$go = x0=>x1=>Word$shift_left$one$go$(x0,x1);
  function Word$shift_left$one$(_word$2){var self = _word$2;switch(self._){case 'Word.o':var $564=self.pred;var $565 = Word$o$(Word$shift_left$one$go$($564,Bool$false));var $563 = $565;break;case 'Word.i':var $566=self.pred;var $567 = Word$o$(Word$shift_left$one$go$($566,Bool$true));var $563 = $567;break;case 'Word.e':var $568 = Word$e;var $563 = $568;break;};return $563;};
  const Word$shift_left$one = x0=>Word$shift_left$one$(x0);
  function Word$shift_left$(_value$2,_n$3){var Word$shift_left$=(_value$2,_n$3)=>({ctr:'TCO',arg:[_value$2,_n$3]});var Word$shift_left=_value$2=>_n$3=>Word$shift_left$(_value$2,_n$3);var arg=[_value$2,_n$3];while(true){let [_value$2,_n$3]=arg;var R=(()=>{var self = _n$3;if (self===0n) {var $569 = _value$2;return $569;} else {var $570=(self-1n);var $571 = Word$shift_left$(Word$shift_left$one$(_value$2),$570);return $571;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Word$shift_left = x0=>x1=>Word$shift_left$(x0,x1);
  function Word$mul$go$(_a$3,_b$4,_acc$5){var Word$mul$go$=(_a$3,_b$4,_acc$5)=>({ctr:'TCO',arg:[_a$3,_b$4,_acc$5]});var Word$mul$go=_a$3=>_b$4=>_acc$5=>Word$mul$go$(_a$3,_b$4,_acc$5);var arg=[_a$3,_b$4,_acc$5];while(true){let [_a$3,_b$4,_acc$5]=arg;var R=(()=>{var self = _a$3;switch(self._){case 'Word.o':var $572=self.pred;var $573 = Word$mul$go$($572,Word$shift_left$(_b$4,1n),_acc$5);return $573;case 'Word.i':var $574=self.pred;var $575 = Word$mul$go$($574,Word$shift_left$(_b$4,1n),Word$add$(_b$4,_acc$5));return $575;case 'Word.e':var $576 = _acc$5;return $576;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Word$mul$go = x0=>x1=>x2=>Word$mul$go$(x0,x1,x2);
  function Word$to_zero$(_word$2){var self = _word$2;switch(self._){case 'Word.o':var $578=self.pred;var $579 = Word$o$(Word$to_zero$($578));var $577 = $579;break;case 'Word.i':var $580=self.pred;var $581 = Word$o$(Word$to_zero$($580));var $577 = $581;break;case 'Word.e':var $582 = Word$e;var $577 = $582;break;};return $577;};
  const Word$to_zero = x0=>Word$to_zero$(x0);
  function Word$mul$(_a$2,_b$3){var $583 = Word$mul$go$(_a$2,_b$3,Word$to_zero$(_a$2));return $583;};
  const Word$mul = x0=>x1=>Word$mul$(x0,x1);
  const U16$mul = a0=>a1=>((a0*a1)&0xFFFF);
  const U16$inc = a0=>((a0+1)&0xFFFF);
  function Word$subber$(_a$2,_b$3,_c$4){var self = _a$2;switch(self._){case 'Word.o':var $585=self.pred;var $586 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $588=self.pred;var $589 = (_a$pred$10=>{var self = _c$4;if (self) {var $591 = Word$i$(Word$subber$(_a$pred$10,$588,Bool$true));var $590 = $591;} else {var $592 = Word$o$(Word$subber$(_a$pred$10,$588,Bool$false));var $590 = $592;};return $590;});var $587 = $589;break;case 'Word.i':var $593=self.pred;var $594 = (_a$pred$10=>{var self = _c$4;if (self) {var $596 = Word$o$(Word$subber$(_a$pred$10,$593,Bool$true));var $595 = $596;} else {var $597 = Word$i$(Word$subber$(_a$pred$10,$593,Bool$true));var $595 = $597;};return $595;});var $587 = $594;break;case 'Word.e':var $598 = (_a$pred$8=>{var $599 = Word$e;return $599;});var $587 = $598;break;};var $587 = $587($585);return $587;});var $584 = $586;break;case 'Word.i':var $600=self.pred;var $601 = (_b$7=>{var self = _b$7;switch(self._){case 'Word.o':var $603=self.pred;var $604 = (_a$pred$10=>{var self = _c$4;if (self) {var $606 = Word$o$(Word$subber$(_a$pred$10,$603,Bool$false));var $605 = $606;} else {var $607 = Word$i$(Word$subber$(_a$pred$10,$603,Bool$false));var $605 = $607;};return $605;});var $602 = $604;break;case 'Word.i':var $608=self.pred;var $609 = (_a$pred$10=>{var self = _c$4;if (self) {var $611 = Word$i$(Word$subber$(_a$pred$10,$608,Bool$true));var $610 = $611;} else {var $612 = Word$o$(Word$subber$(_a$pred$10,$608,Bool$false));var $610 = $612;};return $610;});var $602 = $609;break;case 'Word.e':var $613 = (_a$pred$8=>{var $614 = Word$e;return $614;});var $602 = $613;break;};var $602 = $602($600);return $602;});var $584 = $601;break;case 'Word.e':var $615 = (_b$5=>{var $616 = Word$e;return $616;});var $584 = $615;break;};var $584 = $584(_b$3);return $584;};
  const Word$subber = x0=>x1=>x2=>Word$subber$(x0,x1,x2);
  function Word$sub$(_a$2,_b$3){var $617 = Word$subber$(_a$2,_b$3,Bool$false);return $617;};
  const Word$sub = x0=>x1=>Word$sub$(x0,x1);
  const U16$sub = a0=>a1=>((a0-a1)&0xFFFF);
  const U16$zero = U16$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))));
  function Char$hex_value16$(_chr$1){var self = ((_chr$1>=48)&&(_chr$1<=57));if (self) {var $619 = ((_chr$1-48)&0xFFFF);var $618 = $619;} else {var self = ((_chr$1>=97)&&(_chr$1<=102));if (self) {var $621 = (_x0$2=>{var $622 = ((((((((((((((((((((_x0$2+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF);return $622;})(((_chr$1-97)&0xFFFF));var $620 = $621;} else {var self = ((_chr$1>=65)&&(_chr$1<=70));if (self) {var $624 = (_x0$2=>{var $625 = ((((((((((((((((((((_x0$2+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF)+1)&0xFFFF);return $625;})(((_chr$1-65)&0xFFFF));var $623 = $624;} else {var $626 = U16$zero;var $623 = $626;};var $620 = $623;};var $618 = $620;};return $618;};
  const Char$hex_value16 = x0=>Char$hex_value16$(x0);
  function Kind$Core$read$u16$(_code$1,_u16$2){var Kind$Core$read$u16$=(_code$1,_u16$2)=>({ctr:'TCO',arg:[_code$1,_u16$2]});var Kind$Core$read$u16=_code$1=>_u16$2=>Kind$Core$read$u16$(_code$1,_u16$2);var arg=[_code$1,_u16$2];while(true){let [_code$1,_u16$2]=arg;var R=(()=>{var self = _code$1;if (self.length===0) {var $627 = Pair$new$(_code$1,_u16$2);return $627;} else {var $628=self.charCodeAt(0);var $629=self.slice(1);var self = Char$is_hex$($628);if (self) {var _u16$5 = ((((_u16$2*16)&0xFFFF)+Char$hex_value16$($628))&0xFFFF);var $631 = Kind$Core$read$u16$($629,_u16$5);var $630 = $631;} else {var $632 = Pair$new$(_code$1,_u16$2);var $630 = $632;};return $630;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Core$read$u16 = x0=>x1=>Kind$Core$read$u16$(x0,x1);
  function Kind$Core$read$chrx$(_code$1){var self = String$starts_with$(_code$1,"\\u{");if (self) {var _code$2 = String$drop$(3n,_code$1);var self = Kind$Core$read$u16$(_code$2,0);switch(self._){case 'Pair.new':var $635=self.fst;var $636=self.snd;var self = String$starts_with$($635,"}");if (self) {var $638 = Pair$new$(String$drop$(1n,$635),$636);var $637 = $638;} else {var $639 = Pair$new$("",63);var $637 = $639;};var $634 = $637;break;};var $633 = $634;} else {var self = String$starts_with$(_code$1,"\\\'");if (self) {var $641 = Pair$new$(String$drop$(2n,_code$1),39);var $640 = $641;} else {var self = String$starts_with$(_code$1,"\\\"");if (self) {var $643 = Pair$new$(String$drop$(2n,_code$1),34);var $642 = $643;} else {var self = String$starts_with$(_code$1,"\\\\");if (self) {var $645 = Pair$new$(String$drop$(2n,_code$1),92);var $644 = $645;} else {var self = _code$1;if (self.length===0) {var $647 = Pair$new$("",63);var $646 = $647;} else {var $648=self.charCodeAt(0);var $649=self.slice(1);var $650 = Pair$new$($649,$648);var $646 = $650;};var $644 = $646;};var $642 = $644;};var $640 = $642;};var $633 = $640;};return $633;};
  const Kind$Core$read$chrx = x0=>Kind$Core$read$chrx$(x0);
  function Kind$Term$chr$(_chrx$1){var $651 = ({_:'Kind.Term.chr','chrx':_chrx$1});return $651;};
  const Kind$Term$chr = x0=>Kind$Term$chr$(x0);
  function String$reverse$go$(_xs$1,_res$2){var String$reverse$go$=(_xs$1,_res$2)=>({ctr:'TCO',arg:[_xs$1,_res$2]});var String$reverse$go=_xs$1=>_res$2=>String$reverse$go$(_xs$1,_res$2);var arg=[_xs$1,_res$2];while(true){let [_xs$1,_res$2]=arg;var R=(()=>{var self = _xs$1;if (self.length===0) {var $652 = _res$2;return $652;} else {var $653=self.charCodeAt(0);var $654=self.slice(1);var $655 = String$reverse$go$($654,String$cons$($653,_res$2));return $655;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const String$reverse$go = x0=>x1=>String$reverse$go$(x0,x1);
  function String$reverse$(_xs$1){var $656 = String$reverse$go$(_xs$1,String$nil);return $656;};
  const String$reverse = x0=>String$reverse$(x0);
  function Kind$Core$read$strx$go$(_code$1,_aux$2){var Kind$Core$read$strx$go$=(_code$1,_aux$2)=>({ctr:'TCO',arg:[_code$1,_aux$2]});var Kind$Core$read$strx$go=_code$1=>_aux$2=>Kind$Core$read$strx$go$(_code$1,_aux$2);var arg=[_code$1,_aux$2];while(true){let [_code$1,_aux$2]=arg;var R=(()=>{var self = String$starts_with$(_code$1,"\"");if (self) {var $657 = Pair$new$(_code$1,String$reverse$(_aux$2));return $657;} else {var self = Kind$Core$read$chrx$(_code$1);switch(self._){case 'Pair.new':var $659=self.fst;var $660=self.snd;var $661 = Kind$Core$read$strx$go$($659,String$cons$($660,_aux$2));var $658 = $661;break;};return $658;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Core$read$strx$go = x0=>x1=>Kind$Core$read$strx$go$(x0,x1);
  function Kind$Term$str$(_strx$1){var $662 = ({_:'Kind.Term.str','strx':_strx$1});return $662;};
  const Kind$Term$str = x0=>Kind$Term$str$(x0);
  function Char$dec_value$(_chr$1){var self = (_chr$1===48);if (self) {var $664 = 0n;var $663 = $664;} else {var self = (_chr$1===49);if (self) {var $666 = 1n;var $665 = $666;} else {var self = (_chr$1===50);if (self) {var $668 = 2n;var $667 = $668;} else {var self = (_chr$1===51);if (self) {var $670 = 3n;var $669 = $670;} else {var self = (_chr$1===52);if (self) {var $672 = 4n;var $671 = $672;} else {var self = (_chr$1===53);if (self) {var $674 = 5n;var $673 = $674;} else {var self = (_chr$1===54);if (self) {var $676 = 6n;var $675 = $676;} else {var self = (_chr$1===55);if (self) {var $678 = 7n;var $677 = $678;} else {var self = (_chr$1===56);if (self) {var $680 = 8n;var $679 = $680;} else {var self = (_chr$1===57);if (self) {var $682 = 9n;var $681 = $682;} else {var $683 = 0n;var $681 = $683;};var $679 = $681;};var $677 = $679;};var $675 = $677;};var $673 = $675;};var $671 = $673;};var $669 = $671;};var $667 = $669;};var $665 = $667;};var $663 = $665;};return $663;};
  const Char$dec_value = x0=>Char$dec_value$(x0);
  function Kind$Core$read$natx$(_code$1,_nat$2){var Kind$Core$read$natx$=(_code$1,_nat$2)=>({ctr:'TCO',arg:[_code$1,_nat$2]});var Kind$Core$read$natx=_code$1=>_nat$2=>Kind$Core$read$natx$(_code$1,_nat$2);var arg=[_code$1,_nat$2];while(true){let [_code$1,_nat$2]=arg;var R=(()=>{var self = _code$1;if (self.length===0) {var $684 = Pair$new$(_code$1,_nat$2);return $684;} else {var $685=self.charCodeAt(0);var $686=self.slice(1);var self = Char$is_hex$($685);if (self) {var _nat$5 = ((_nat$2*10n)+Char$dec_value$($685));var $688 = Kind$Core$read$natx$($686,_nat$5);var $687 = $688;} else {var $689 = Pair$new$(_code$1,_nat$2);var $687 = $689;};return $687;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Core$read$natx = x0=>x1=>Kind$Core$read$natx$(x0,x1);
  function Kind$Term$nat$(_natx$1){var $690 = ({_:'Kind.Term.nat','natx':_natx$1});return $690;};
  const Kind$Term$nat = x0=>Kind$Term$nat$(x0);
  function Pair$fst$(_pair$3){var self = _pair$3;switch(self._){case 'Pair.new':var $692=self.fst;var $693 = $692;var $691 = $693;break;};return $691;};
  const Pair$fst = x0=>Pair$fst$(x0);
  const Nat$eql = a0=>a1=>(a0===a1);
  function Nat$pred$(_n$1){var self = _n$1;if (self===0n) {var $695 = Nat$zero;var $694 = $695;} else {var $696=(self-1n);var $697 = $696;var $694 = $697;};return $694;};
  const Nat$pred = x0=>Nat$pred$(x0);
  function Kind$Core$read$find$(_list$2,_cond$3,_indx$4,_skip$5){var Kind$Core$read$find$=(_list$2,_cond$3,_indx$4,_skip$5)=>({ctr:'TCO',arg:[_list$2,_cond$3,_indx$4,_skip$5]});var Kind$Core$read$find=_list$2=>_cond$3=>_indx$4=>_skip$5=>Kind$Core$read$find$(_list$2,_cond$3,_indx$4,_skip$5);var arg=[_list$2,_cond$3,_indx$4,_skip$5];while(true){let [_list$2,_cond$3,_indx$4,_skip$5]=arg;var R=(()=>{var self = _list$2;switch(self._){case 'List.cons':var $698=self.head;var $699=self.tail;var self = _cond$3($698)(_indx$4);if (self) {var self = (_skip$5===0n);if (self) {var $702 = Maybe$some$(Pair$new$($698,_indx$4));var $701 = $702;} else {var $703 = Kind$Core$read$find$($699,_cond$3,Nat$succ$(_indx$4),Nat$pred$(_skip$5));var $701 = $703;};var $700 = $701;} else {var $704 = Kind$Core$read$find$($699,_cond$3,Nat$succ$(_indx$4),_skip$5);var $700 = $704;};return $700;case 'List.nil':var $705 = Maybe$none;return $705;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Core$read$find = x0=>x1=>x2=>x3=>Kind$Core$read$find$(x0,x1,x2,x3);
  function Pair$snd$(_pair$3){var self = _pair$3;switch(self._){case 'Pair.new':var $707=self.snd;var $708 = $707;var $706 = $708;break;};return $706;};
  const Pair$snd = x0=>Pair$snd$(x0);
  function Kind$Core$read$term$(_code$1){var self = Kind$Core$read$spaces$(_code$1);switch(self._){case 'Pair.new':var $710=self.fst;var self = $710;if (self.length===0) {var $712 = Pair$new$("",(_ctx$4=>{var $713 = Kind$Term$ref$("error");return $713;}));var $711 = $712;} else {var $714=self.charCodeAt(0);var $715=self.slice(1);var _head$6 = $714;var _code$7 = $715;var self = Char$eql$(_head$6,42);if (self) {var $717 = Pair$new$(_code$7,(_ctx$8=>{var $718 = Kind$Term$typ;return $718;}));var $716 = $717;} else {var self = (_head$6===64);if (self) {var self = Kind$Core$read$name$(_code$7);switch(self._){case 'Pair.new':var $721=self.fst;var $722=self.snd;var self = Kind$Core$read$char$($721,40);switch(self._){case 'Pair.new':var $724=self.fst;var self = Kind$Core$read$name$($724);switch(self._){case 'Pair.new':var $726=self.fst;var $727=self.snd;var self = Kind$Core$read$char$($726,58);switch(self._){case 'Pair.new':var $729=self.fst;var self = Kind$Core$read$term$($729);switch(self._){case 'Pair.new':var $731=self.fst;var $732=self.snd;var self = Kind$Core$read$char$($731,41);switch(self._){case 'Pair.new':var $734=self.fst;var self = Kind$Core$read$term$($734);switch(self._){case 'Pair.new':var $736=self.fst;var $737=self.snd;var $738 = Pair$new$($736,(_ctx$22=>{var $739 = Kind$Term$all$(Bool$false,$722,$727,$732(_ctx$22),(_s$23=>_x$24=>{var $740 = $737(List$cons$(Pair$new$($727,_x$24),List$cons$(Pair$new$($722,_s$23),_ctx$22)));return $740;}));return $739;}));var $735 = $738;break;};var $733 = $735;break;};var $730 = $733;break;};var $728 = $730;break;};var $725 = $728;break;};var $723 = $725;break;};var $720 = $723;break;};var $719 = $720;} else {var self = (_head$6===37);if (self) {var self = Kind$Core$read$name$(_code$7);switch(self._){case 'Pair.new':var $743=self.fst;var $744=self.snd;var self = Kind$Core$read$char$($743,40);switch(self._){case 'Pair.new':var $746=self.fst;var self = Kind$Core$read$name$($746);switch(self._){case 'Pair.new':var $748=self.fst;var $749=self.snd;var self = Kind$Core$read$char$($748,58);switch(self._){case 'Pair.new':var $751=self.fst;var self = Kind$Core$read$term$($751);switch(self._){case 'Pair.new':var $753=self.fst;var $754=self.snd;var self = Kind$Core$read$char$($753,41);switch(self._){case 'Pair.new':var $756=self.fst;var self = Kind$Core$read$term$($756);switch(self._){case 'Pair.new':var $758=self.fst;var $759=self.snd;var $760 = Pair$new$($758,(_ctx$22=>{var $761 = Kind$Term$all$(Bool$true,$744,$749,$754(_ctx$22),(_s$23=>_x$24=>{var $762 = $759(List$cons$(Pair$new$($749,_x$24),List$cons$(Pair$new$($744,_s$23),_ctx$22)));return $762;}));return $761;}));var $757 = $760;break;};var $755 = $757;break;};var $752 = $755;break;};var $750 = $752;break;};var $747 = $750;break;};var $745 = $747;break;};var $742 = $745;break;};var $741 = $742;} else {var self = (_head$6===35);if (self) {var self = Kind$Core$read$name$(_code$7);switch(self._){case 'Pair.new':var $765=self.fst;var $766=self.snd;var self = Kind$Core$read$term$($765);switch(self._){case 'Pair.new':var $768=self.fst;var $769=self.snd;var $770 = Pair$new$($768,(_ctx$12=>{var $771 = Kind$Term$lam$($766,(_x$13=>{var $772 = $769(List$cons$(Pair$new$($766,_x$13),_ctx$12));return $772;}));return $771;}));var $767 = $770;break;};var $764 = $767;break;};var $763 = $764;} else {var self = (_head$6===40);if (self) {var self = Kind$Core$read$term$(_code$7);switch(self._){case 'Pair.new':var $775=self.fst;var $776=self.snd;var self = Kind$Core$read$term$($775);switch(self._){case 'Pair.new':var $778=self.fst;var $779=self.snd;var self = Kind$Core$read$char$($778,41);switch(self._){case 'Pair.new':var $781=self.fst;var $782 = Pair$new$($781,(_ctx$14=>{var $783 = Kind$Term$app$($776(_ctx$14),$779(_ctx$14));return $783;}));var $780 = $782;break;};var $777 = $780;break;};var $774 = $777;break;};var $773 = $774;} else {var self = (_head$6===33);if (self) {var self = Kind$Core$read$name$(_code$7);switch(self._){case 'Pair.new':var $786=self.fst;var $787=self.snd;var self = Kind$Core$read$char$($786,61);switch(self._){case 'Pair.new':var $789=self.fst;var self = Kind$Core$read$term$($789);switch(self._){case 'Pair.new':var $791=self.fst;var $792=self.snd;var self = Kind$Core$read$char$($791,59);switch(self._){case 'Pair.new':var $794=self.fst;var self = Kind$Core$read$term$($794);switch(self._){case 'Pair.new':var $796=self.fst;var $797=self.snd;var $798 = Pair$new$($796,(_ctx$18=>{var $799 = Kind$Term$let$($787,$792(_ctx$18),(_x$19=>{var $800 = $797(List$cons$(Pair$new$($787,_x$19),_ctx$18));return $800;}));return $799;}));var $795 = $798;break;};var $793 = $795;break;};var $790 = $793;break;};var $788 = $790;break;};var $785 = $788;break;};var $784 = $785;} else {var self = (_head$6===36);if (self) {var self = Kind$Core$read$name$(_code$7);switch(self._){case 'Pair.new':var $803=self.fst;var $804=self.snd;var self = Kind$Core$read$char$($803,61);switch(self._){case 'Pair.new':var $806=self.fst;var self = Kind$Core$read$term$($806);switch(self._){case 'Pair.new':var $808=self.fst;var $809=self.snd;var self = Kind$Core$read$char$($808,59);switch(self._){case 'Pair.new':var $811=self.fst;var self = Kind$Core$read$term$($811);switch(self._){case 'Pair.new':var $813=self.fst;var $814=self.snd;var $815 = Pair$new$($813,(_ctx$18=>{var $816 = Kind$Term$def$($804,$809(_ctx$18),(_x$19=>{var $817 = $814(List$cons$(Pair$new$($804,_x$19),_ctx$18));return $817;}));return $816;}));var $812 = $815;break;};var $810 = $812;break;};var $807 = $810;break;};var $805 = $807;break;};var $802 = $805;break;};var $801 = $802;} else {var self = (_head$6===123);if (self) {var self = Kind$Core$read$term$(_code$7);switch(self._){case 'Pair.new':var $820=self.fst;var $821=self.snd;var self = Kind$Core$read$char$($820,58);switch(self._){case 'Pair.new':var $823=self.fst;var self = Kind$Core$read$term$($823);switch(self._){case 'Pair.new':var $825=self.fst;var $826=self.snd;var self = Kind$Core$read$char$($825,125);switch(self._){case 'Pair.new':var $828=self.fst;var $829 = Pair$new$($828,(_ctx$16=>{var $830 = Kind$Term$ann$(Bool$false,$821(_ctx$16),$826(_ctx$16));return $830;}));var $827 = $829;break;};var $824 = $827;break;};var $822 = $824;break;};var $819 = $822;break;};var $818 = $819;} else {var self = (_head$6===39);if (self) {var self = Kind$Core$read$chrx$(_code$7);switch(self._){case 'Pair.new':var $833=self.fst;var $834=self.snd;var self = Kind$Core$read$char$($833,39);switch(self._){case 'Pair.new':var $836=self.fst;var $837 = Pair$new$($836,(_ctx$12=>{var $838 = Kind$Term$chr$($834);return $838;}));var $835 = $837;break;};var $832 = $835;break;};var $831 = $832;} else {var self = (_head$6===34);if (self) {var self = Kind$Core$read$strx$go$(_code$7,"");switch(self._){case 'Pair.new':var $841=self.fst;var $842=self.snd;var self = Kind$Core$read$char$($841,34);switch(self._){case 'Pair.new':var $844=self.fst;var $845 = Pair$new$($844,(_ctx$12=>{var $846 = Kind$Term$str$($842);return $846;}));var $843 = $845;break;};var $840 = $843;break;};var $839 = $840;} else {var self = (_head$6===43);if (self) {var self = Kind$Core$read$natx$(_code$7,0n);switch(self._){case 'Pair.new':var $849=self.fst;var $850=self.snd;var $851 = Pair$new$($849,(_ctx$10=>{var $852 = Kind$Term$nat$($850);return $852;}));var $848 = $851;break;};var $847 = $848;} else {var self = Kind$Core$read$is_name$(_head$6);if (self) {var self = Kind$Core$read$name$(_code$7);switch(self._){case 'Pair.new':var $855=self.fst;var $856=self.snd;var _name$10 = String$cons$(_head$6,$856);var self = $855;if (self.length===0) {var $858 = Pair$new$("",0n);var self = $858;} else {var $859=self.charCodeAt(0);var $860=self.slice(1);var self = ($859===94);if (self) {var $862 = Kind$Core$read$natx$($860,0n);var $861 = $862;} else {var $863 = Pair$new$($855,0n);var $861 = $863;};var self = $861;};switch(self._){case 'Pair.new':var $864=self.fst;var $865=self.snd;var $866 = Pair$new$($864,(_ctx$13=>{var _got$14 = Kind$Core$read$find$(_ctx$13,(_x$14=>_i$15=>{var $868 = (Pair$fst$(_x$14)===_name$10);return $868;}),0n,$865);var self = _got$14;switch(self._){case 'Maybe.some':var $869=self.value;var $870 = Pair$snd$(Pair$fst$($869));var $867 = $870;break;case 'Maybe.none':var $871 = Kind$Term$ref$(_name$10);var $867 = $871;break;};return $867;}));var $857 = $866;break;};var $854 = $857;break;};var $853 = $854;} else {var $872 = Pair$new$("",(_ctx$8=>{var $873 = Kind$Term$ref$("error");return $873;}));var $853 = $872;};var $847 = $853;};var $839 = $847;};var $831 = $839;};var $818 = $831;};var $801 = $818;};var $784 = $801;};var $773 = $784;};var $763 = $773;};var $741 = $763;};var $719 = $741;};var $716 = $719;};var $711 = $716;};var $709 = $711;break;};return $709;};
  const Kind$Core$read$term = x0=>Kind$Core$read$term$(x0);
  function Kind$Core$read$(_code$1){var self = Kind$Core$read$term$((_code$1+";"));switch(self._){case 'Pair.new':var $875=self.fst;var $876=self.snd;var self = $875;if (self.length===0) {var $878 = Maybe$none;var $877 = $878;} else {var $879=self.charCodeAt(0);var $880=self.slice(1);var $881 = Maybe$some$($876(List$nil));var $877 = $881;};var $874 = $877;break;};return $874;};
  const Kind$Core$read = x0=>Kind$Core$read$(x0);
  function Bool$read$(_code$1){var self = (_code$1==="Bool.true");if (self) {var $883 = Maybe$some$(Bool$true);var $882 = $883;} else {var self = (_code$1==="Bool.false");if (self) {var $885 = Maybe$some$(Bool$false);var $884 = $885;} else {var $886 = Maybe$none;var $884 = $886;};var $882 = $884;};return $882;};
  const Bool$read = x0=>Bool$read$(x0);
  function Kind$Status$done$(_cached$1){var $887 = ({_:'Kind.Status.done','cached':_cached$1});return $887;};
  const Kind$Status$done = x0=>Kind$Status$done$(x0);
  function Kind$Def$new$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_stat$9){var $888 = ({_:'Kind.Def.new','file':_file$1,'code':_code$2,'orig':_orig$3,'name':_name$4,'term':_term$5,'type':_type$6,'isct':_isct$7,'arit':_arit$8,'stat':_stat$9});return $888;};
  const Kind$Def$new = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>x8=>Kind$Def$new$(x0,x1,x2,x3,x4,x5,x6,x7,x8);
  function Kind$Synth$load$cached$def$(_name$1){var $889 = IO$monad$((_m$bind$2=>_m$pure$3=>{var $890 = _m$bind$2;return $890;}))(Kind$Synth$load$cached$get_file$((_name$1+".file")))((_cache_file$2=>{var self = (!String$is_empty$(_cache_file$2));if (self) {var $892 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $893 = _m$bind$3;return $893;}))(Kind$Synth$load$cached$get_file$((_name$1+".time")))((_cache_time$3=>{var $894 = IO$monad$((_m$bind$4=>_m$pure$5=>{var $895 = _m$bind$4;return $895;}))(IO$get_file_mtime$(_cache_file$2))((_cache_file_time$4=>{var self = (_cache_time$3===_cache_file_time$4);if (self) {var $897 = IO$monad$((_m$bind$5=>_m$pure$6=>{var $898 = _m$bind$5;return $898;}))(Kind$Synth$load$cached$get_file$((_name$1+".term")))((_cache_term$5=>{var $899 = IO$monad$((_m$bind$6=>_m$pure$7=>{var $900 = _m$bind$6;return $900;}))(Kind$Synth$load$cached$get_file$((_name$1+".type")))((_cache_type$6=>{var $901 = IO$monad$((_m$bind$7=>_m$pure$8=>{var $902 = _m$bind$7;return $902;}))(Kind$Synth$load$cached$get_file$((_name$1+".isct")))((_cache_isct$7=>{var $903 = IO$monad$((_m$bind$8=>_m$pure$9=>{var $904 = _m$bind$8;return $904;}))(Kind$Synth$load$cached$get_file$((_name$1+".arit")))((_cache_arit$8=>{var $905 = IO$monad$((_m$bind$9=>_m$pure$10=>{var $906 = _m$pure$10;return $906;}))((()=>{var _file$9 = _cache_file$2;var _code$10 = "<cached>";var _orig$11 = Pair$new$(0n,0n);var $907 = Maybe$monad$((_m$bind$12=>_m$pure$13=>{var $908 = _m$bind$12;return $908;}))(Kind$Core$read$(_cache_term$5))((_term$12=>{var $909 = Maybe$monad$((_m$bind$13=>_m$pure$14=>{var $910 = _m$bind$13;return $910;}))(Kind$Core$read$(_cache_type$6))((_type$13=>{var $911 = Maybe$monad$((_m$bind$14=>_m$pure$15=>{var $912 = _m$bind$14;return $912;}))(Bool$read$(_cache_isct$7))((_isct$14=>{var $913 = Maybe$monad$((_m$bind$15=>_m$pure$16=>{var $914 = _m$bind$15;return $914;}))(Maybe$some$((BigInt(_cache_arit$8))))((_arit$15=>{var _stat$16 = Kind$Status$done$(Bool$true);var $915 = Maybe$monad$((_m$bind$17=>_m$pure$18=>{var $916 = _m$pure$18;return $916;}))(Kind$Def$new$(_file$9,_code$10,_orig$11,_name$1,_term$12,_type$13,_isct$14,_arit$15,_stat$16));return $915;}));return $913;}));return $911;}));return $909;}));return $907;})());return $905;}));return $903;}));return $901;}));return $899;}));var $896 = $897;} else {var $917 = IO$monad$((_m$bind$5=>_m$pure$6=>{var $918 = _m$pure$6;return $918;}))(Maybe$none);var $896 = $917;};return $896;}));return $894;}));var $891 = $892;} else {var $919 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $920 = _m$pure$4;return $920;}))(Maybe$none);var $891 = $919;};return $891;}));return $889;};
  const Kind$Synth$load$cached$def = x0=>Kind$Synth$load$cached$def$(x0);
  function BitsMap$tie$(_val$2,_lft$3,_rgt$4){var $921 = ({_:'BitsMap.tie','val':_val$2,'lft':_lft$3,'rgt':_rgt$4});return $921;};
  const BitsMap$tie = x0=>x1=>x2=>BitsMap$tie$(x0,x1,x2);
  const BitsMap$new = ({_:'BitsMap.new'});
  const BitsMap$set = a0=>a1=>a2=>(bitsmap_set(a0,a1,a2,'set'));
  function Kind$Map$set$(_name$2,_val$3,_map$4){var $922 = (bitsmap_set((kind_name_to_bits(_name$2)),_val$3,_map$4,'set'));return $922;};
  const Kind$Map$set = x0=>x1=>x2=>Kind$Map$set$(x0,x1,x2);
  const Kind$Map$new = BitsMap$new;
  const Kind$Map = null;
  function Kind$Core$dependencies$go$(_term$1,_deps$2){var _nil$3 = Kind$Term$typ;var self = _term$1;switch(self._){case 'Kind.Term.ref':var $924=self.name;var $925 = Kind$Map$set$($924,Unit$new,_deps$2);var $923 = $925;break;case 'Kind.Term.all':var $926=self.xtyp;var $927=self.body;var _deps$9 = Kind$Core$dependencies$go$($926,_deps$2);var _deps$10 = Kind$Core$dependencies$go$($927(_nil$3)(_nil$3),_deps$9);var $928 = _deps$10;var $923 = $928;break;case 'Kind.Term.lam':var $929=self.body;var _deps$6 = Kind$Core$dependencies$go$($929(_nil$3),_deps$2);var $930 = _deps$6;var $923 = $930;break;case 'Kind.Term.app':var $931=self.func;var $932=self.argm;var _deps$6 = Kind$Core$dependencies$go$($931,_deps$2);var _deps$7 = Kind$Core$dependencies$go$($932,_deps$6);var $933 = _deps$7;var $923 = $933;break;case 'Kind.Term.let':var $934=self.expr;var $935=self.body;var _deps$7 = Kind$Core$dependencies$go$($934,_deps$2);var _deps$8 = Kind$Core$dependencies$go$($935(_nil$3),_deps$7);var $936 = _deps$8;var $923 = $936;break;case 'Kind.Term.def':var $937=self.expr;var $938=self.body;var _deps$7 = Kind$Core$dependencies$go$($937,_deps$2);var _deps$8 = Kind$Core$dependencies$go$($938(_nil$3),_deps$7);var $939 = _deps$8;var $923 = $939;break;case 'Kind.Term.ann':var $940=self.term;var $941=self.type;var _deps$7 = Kind$Core$dependencies$go$($940,_deps$2);var _deps$8 = Kind$Core$dependencies$go$($941,_deps$7);var $942 = _deps$8;var $923 = $942;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $943 = _deps$2;var $923 = $943;break;};return $923;};
  const Kind$Core$dependencies$go = x0=>x1=>Kind$Core$dependencies$go$(x0,x1);
  function List$mapped$(_as$2,_f$4){var self = _as$2;switch(self._){case 'List.cons':var $945=self.head;var $946=self.tail;var $947 = List$cons$(_f$4($945),List$mapped$($946,_f$4));var $944 = $947;break;case 'List.nil':var $948 = List$nil;var $944 = $948;break;};return $944;};
  const List$mapped = x0=>x1=>List$mapped$(x0,x1);
  function Bits$reverse$tco$(_a$1,_r$2){var Bits$reverse$tco$=(_a$1,_r$2)=>({ctr:'TCO',arg:[_a$1,_r$2]});var Bits$reverse$tco=_a$1=>_r$2=>Bits$reverse$tco$(_a$1,_r$2);var arg=[_a$1,_r$2];while(true){let [_a$1,_r$2]=arg;var R=(()=>{var self = _a$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $949=self.slice(0,-1);var $950 = Bits$reverse$tco$($949,(_r$2+'0'));return $950;case 'i':var $951=self.slice(0,-1);var $952 = Bits$reverse$tco$($951,(_r$2+'1'));return $952;case 'e':var $953 = _r$2;return $953;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Bits$reverse$tco = x0=>x1=>Bits$reverse$tco$(x0,x1);
  function Bits$reverse$(_a$1){var $954 = Bits$reverse$tco$(_a$1,Bits$e);return $954;};
  const Bits$reverse = x0=>Bits$reverse$(x0);
  function BitsMap$to_list$go$(_xs$2,_key$3,_list$4){var self = _xs$2;switch(self._){case 'BitsMap.tie':var $956=self.val;var $957=self.lft;var $958=self.rgt;var self = $956;switch(self._){case 'Maybe.some':var $960=self.value;var $961 = List$cons$(Pair$new$(Bits$reverse$(_key$3),$960),_list$4);var _list0$8 = $961;break;case 'Maybe.none':var $962 = _list$4;var _list0$8 = $962;break;};var _list1$9 = BitsMap$to_list$go$($957,(_key$3+'0'),_list0$8);var _list2$10 = BitsMap$to_list$go$($958,(_key$3+'1'),_list1$9);var $959 = _list2$10;var $955 = $959;break;case 'BitsMap.new':var $963 = _list$4;var $955 = $963;break;};return $955;};
  const BitsMap$to_list$go = x0=>x1=>x2=>BitsMap$to_list$go$(x0,x1,x2);
  function Kind$Name$from_bits$(_bs$1){var self = _bs$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $965=self.slice(0,-1);var _bs$3 = $965;var self = _bs$3;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $967=self.slice(0,-1);var _bs$5 = $967;var self = _bs$5;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $969=self.slice(0,-1);var _bs$7 = $969;var self = _bs$7;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $971=self.slice(0,-1);var _bs$9 = $971;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $973=self.slice(0,-1);var _bs$11 = $973;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $975=self.slice(0,-1);var _bs$13 = $975;var $976 = String$cons$(65,Kind$Name$from_bits$(_bs$13));var $974 = $976;break;case 'i':var $977=self.slice(0,-1);var _bs$13 = $977;var $978 = String$cons$(66,Kind$Name$from_bits$(_bs$13));var $974 = $978;break;case 'e':var $979 = String$nil;var $974 = $979;break;};var $972 = $974;break;case 'i':var $980=self.slice(0,-1);var _bs$11 = $980;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $982=self.slice(0,-1);var _bs$13 = $982;var $983 = String$cons$(67,Kind$Name$from_bits$(_bs$13));var $981 = $983;break;case 'i':var $984=self.slice(0,-1);var _bs$13 = $984;var $985 = String$cons$(68,Kind$Name$from_bits$(_bs$13));var $981 = $985;break;case 'e':var $986 = String$nil;var $981 = $986;break;};var $972 = $981;break;case 'e':var $987 = String$nil;var $972 = $987;break;};var $970 = $972;break;case 'i':var $988=self.slice(0,-1);var _bs$9 = $988;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $990=self.slice(0,-1);var _bs$11 = $990;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $992=self.slice(0,-1);var _bs$13 = $992;var $993 = String$cons$(69,Kind$Name$from_bits$(_bs$13));var $991 = $993;break;case 'i':var $994=self.slice(0,-1);var _bs$13 = $994;var $995 = String$cons$(70,Kind$Name$from_bits$(_bs$13));var $991 = $995;break;case 'e':var $996 = String$nil;var $991 = $996;break;};var $989 = $991;break;case 'i':var $997=self.slice(0,-1);var _bs$11 = $997;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $999=self.slice(0,-1);var _bs$13 = $999;var $1000 = String$cons$(71,Kind$Name$from_bits$(_bs$13));var $998 = $1000;break;case 'i':var $1001=self.slice(0,-1);var _bs$13 = $1001;var $1002 = String$cons$(72,Kind$Name$from_bits$(_bs$13));var $998 = $1002;break;case 'e':var $1003 = String$nil;var $998 = $1003;break;};var $989 = $998;break;case 'e':var $1004 = String$nil;var $989 = $1004;break;};var $970 = $989;break;case 'e':var $1005 = String$nil;var $970 = $1005;break;};var $968 = $970;break;case 'i':var $1006=self.slice(0,-1);var _bs$7 = $1006;var self = _bs$7;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1008=self.slice(0,-1);var _bs$9 = $1008;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1010=self.slice(0,-1);var _bs$11 = $1010;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1012=self.slice(0,-1);var _bs$13 = $1012;var $1013 = String$cons$(73,Kind$Name$from_bits$(_bs$13));var $1011 = $1013;break;case 'i':var $1014=self.slice(0,-1);var _bs$13 = $1014;var $1015 = String$cons$(74,Kind$Name$from_bits$(_bs$13));var $1011 = $1015;break;case 'e':var $1016 = String$nil;var $1011 = $1016;break;};var $1009 = $1011;break;case 'i':var $1017=self.slice(0,-1);var _bs$11 = $1017;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1019=self.slice(0,-1);var _bs$13 = $1019;var $1020 = String$cons$(75,Kind$Name$from_bits$(_bs$13));var $1018 = $1020;break;case 'i':var $1021=self.slice(0,-1);var _bs$13 = $1021;var $1022 = String$cons$(76,Kind$Name$from_bits$(_bs$13));var $1018 = $1022;break;case 'e':var $1023 = String$nil;var $1018 = $1023;break;};var $1009 = $1018;break;case 'e':var $1024 = String$nil;var $1009 = $1024;break;};var $1007 = $1009;break;case 'i':var $1025=self.slice(0,-1);var _bs$9 = $1025;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1027=self.slice(0,-1);var _bs$11 = $1027;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1029=self.slice(0,-1);var _bs$13 = $1029;var $1030 = String$cons$(77,Kind$Name$from_bits$(_bs$13));var $1028 = $1030;break;case 'i':var $1031=self.slice(0,-1);var _bs$13 = $1031;var $1032 = String$cons$(78,Kind$Name$from_bits$(_bs$13));var $1028 = $1032;break;case 'e':var $1033 = String$nil;var $1028 = $1033;break;};var $1026 = $1028;break;case 'i':var $1034=self.slice(0,-1);var _bs$11 = $1034;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1036=self.slice(0,-1);var _bs$13 = $1036;var $1037 = String$cons$(79,Kind$Name$from_bits$(_bs$13));var $1035 = $1037;break;case 'i':var $1038=self.slice(0,-1);var _bs$13 = $1038;var $1039 = String$cons$(80,Kind$Name$from_bits$(_bs$13));var $1035 = $1039;break;case 'e':var $1040 = String$nil;var $1035 = $1040;break;};var $1026 = $1035;break;case 'e':var $1041 = String$nil;var $1026 = $1041;break;};var $1007 = $1026;break;case 'e':var $1042 = String$nil;var $1007 = $1042;break;};var $968 = $1007;break;case 'e':var $1043 = String$nil;var $968 = $1043;break;};var $966 = $968;break;case 'i':var $1044=self.slice(0,-1);var _bs$5 = $1044;var self = _bs$5;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1046=self.slice(0,-1);var _bs$7 = $1046;var self = _bs$7;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1048=self.slice(0,-1);var _bs$9 = $1048;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1050=self.slice(0,-1);var _bs$11 = $1050;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1052=self.slice(0,-1);var _bs$13 = $1052;var $1053 = String$cons$(81,Kind$Name$from_bits$(_bs$13));var $1051 = $1053;break;case 'i':var $1054=self.slice(0,-1);var _bs$13 = $1054;var $1055 = String$cons$(82,Kind$Name$from_bits$(_bs$13));var $1051 = $1055;break;case 'e':var $1056 = String$nil;var $1051 = $1056;break;};var $1049 = $1051;break;case 'i':var $1057=self.slice(0,-1);var _bs$11 = $1057;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1059=self.slice(0,-1);var _bs$13 = $1059;var $1060 = String$cons$(83,Kind$Name$from_bits$(_bs$13));var $1058 = $1060;break;case 'i':var $1061=self.slice(0,-1);var _bs$13 = $1061;var $1062 = String$cons$(84,Kind$Name$from_bits$(_bs$13));var $1058 = $1062;break;case 'e':var $1063 = String$nil;var $1058 = $1063;break;};var $1049 = $1058;break;case 'e':var $1064 = String$nil;var $1049 = $1064;break;};var $1047 = $1049;break;case 'i':var $1065=self.slice(0,-1);var _bs$9 = $1065;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1067=self.slice(0,-1);var _bs$11 = $1067;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1069=self.slice(0,-1);var _bs$13 = $1069;var $1070 = String$cons$(85,Kind$Name$from_bits$(_bs$13));var $1068 = $1070;break;case 'i':var $1071=self.slice(0,-1);var _bs$13 = $1071;var $1072 = String$cons$(86,Kind$Name$from_bits$(_bs$13));var $1068 = $1072;break;case 'e':var $1073 = String$nil;var $1068 = $1073;break;};var $1066 = $1068;break;case 'i':var $1074=self.slice(0,-1);var _bs$11 = $1074;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1076=self.slice(0,-1);var _bs$13 = $1076;var $1077 = String$cons$(87,Kind$Name$from_bits$(_bs$13));var $1075 = $1077;break;case 'i':var $1078=self.slice(0,-1);var _bs$13 = $1078;var $1079 = String$cons$(88,Kind$Name$from_bits$(_bs$13));var $1075 = $1079;break;case 'e':var $1080 = String$nil;var $1075 = $1080;break;};var $1066 = $1075;break;case 'e':var $1081 = String$nil;var $1066 = $1081;break;};var $1047 = $1066;break;case 'e':var $1082 = String$nil;var $1047 = $1082;break;};var $1045 = $1047;break;case 'i':var $1083=self.slice(0,-1);var _bs$7 = $1083;var self = _bs$7;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1085=self.slice(0,-1);var _bs$9 = $1085;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1087=self.slice(0,-1);var _bs$11 = $1087;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1089=self.slice(0,-1);var _bs$13 = $1089;var $1090 = String$cons$(89,Kind$Name$from_bits$(_bs$13));var $1088 = $1090;break;case 'i':var $1091=self.slice(0,-1);var _bs$13 = $1091;var $1092 = String$cons$(90,Kind$Name$from_bits$(_bs$13));var $1088 = $1092;break;case 'e':var $1093 = String$nil;var $1088 = $1093;break;};var $1086 = $1088;break;case 'i':var $1094=self.slice(0,-1);var _bs$11 = $1094;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1096=self.slice(0,-1);var _bs$13 = $1096;var $1097 = String$cons$(97,Kind$Name$from_bits$(_bs$13));var $1095 = $1097;break;case 'i':var $1098=self.slice(0,-1);var _bs$13 = $1098;var $1099 = String$cons$(98,Kind$Name$from_bits$(_bs$13));var $1095 = $1099;break;case 'e':var $1100 = String$nil;var $1095 = $1100;break;};var $1086 = $1095;break;case 'e':var $1101 = String$nil;var $1086 = $1101;break;};var $1084 = $1086;break;case 'i':var $1102=self.slice(0,-1);var _bs$9 = $1102;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1104=self.slice(0,-1);var _bs$11 = $1104;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1106=self.slice(0,-1);var _bs$13 = $1106;var $1107 = String$cons$(99,Kind$Name$from_bits$(_bs$13));var $1105 = $1107;break;case 'i':var $1108=self.slice(0,-1);var _bs$13 = $1108;var $1109 = String$cons$(100,Kind$Name$from_bits$(_bs$13));var $1105 = $1109;break;case 'e':var $1110 = String$nil;var $1105 = $1110;break;};var $1103 = $1105;break;case 'i':var $1111=self.slice(0,-1);var _bs$11 = $1111;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1113=self.slice(0,-1);var _bs$13 = $1113;var $1114 = String$cons$(101,Kind$Name$from_bits$(_bs$13));var $1112 = $1114;break;case 'i':var $1115=self.slice(0,-1);var _bs$13 = $1115;var $1116 = String$cons$(102,Kind$Name$from_bits$(_bs$13));var $1112 = $1116;break;case 'e':var $1117 = String$nil;var $1112 = $1117;break;};var $1103 = $1112;break;case 'e':var $1118 = String$nil;var $1103 = $1118;break;};var $1084 = $1103;break;case 'e':var $1119 = String$nil;var $1084 = $1119;break;};var $1045 = $1084;break;case 'e':var $1120 = String$nil;var $1045 = $1120;break;};var $966 = $1045;break;case 'e':var $1121 = String$nil;var $966 = $1121;break;};var $964 = $966;break;case 'i':var $1122=self.slice(0,-1);var _bs$3 = $1122;var self = _bs$3;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1124=self.slice(0,-1);var _bs$5 = $1124;var self = _bs$5;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1126=self.slice(0,-1);var _bs$7 = $1126;var self = _bs$7;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1128=self.slice(0,-1);var _bs$9 = $1128;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1130=self.slice(0,-1);var _bs$11 = $1130;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1132=self.slice(0,-1);var _bs$13 = $1132;var $1133 = String$cons$(103,Kind$Name$from_bits$(_bs$13));var $1131 = $1133;break;case 'i':var $1134=self.slice(0,-1);var _bs$13 = $1134;var $1135 = String$cons$(104,Kind$Name$from_bits$(_bs$13));var $1131 = $1135;break;case 'e':var $1136 = String$nil;var $1131 = $1136;break;};var $1129 = $1131;break;case 'i':var $1137=self.slice(0,-1);var _bs$11 = $1137;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1139=self.slice(0,-1);var _bs$13 = $1139;var $1140 = String$cons$(105,Kind$Name$from_bits$(_bs$13));var $1138 = $1140;break;case 'i':var $1141=self.slice(0,-1);var _bs$13 = $1141;var $1142 = String$cons$(106,Kind$Name$from_bits$(_bs$13));var $1138 = $1142;break;case 'e':var $1143 = String$nil;var $1138 = $1143;break;};var $1129 = $1138;break;case 'e':var $1144 = String$nil;var $1129 = $1144;break;};var $1127 = $1129;break;case 'i':var $1145=self.slice(0,-1);var _bs$9 = $1145;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1147=self.slice(0,-1);var _bs$11 = $1147;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1149=self.slice(0,-1);var _bs$13 = $1149;var $1150 = String$cons$(107,Kind$Name$from_bits$(_bs$13));var $1148 = $1150;break;case 'i':var $1151=self.slice(0,-1);var _bs$13 = $1151;var $1152 = String$cons$(108,Kind$Name$from_bits$(_bs$13));var $1148 = $1152;break;case 'e':var $1153 = String$nil;var $1148 = $1153;break;};var $1146 = $1148;break;case 'i':var $1154=self.slice(0,-1);var _bs$11 = $1154;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1156=self.slice(0,-1);var _bs$13 = $1156;var $1157 = String$cons$(109,Kind$Name$from_bits$(_bs$13));var $1155 = $1157;break;case 'i':var $1158=self.slice(0,-1);var _bs$13 = $1158;var $1159 = String$cons$(110,Kind$Name$from_bits$(_bs$13));var $1155 = $1159;break;case 'e':var $1160 = String$nil;var $1155 = $1160;break;};var $1146 = $1155;break;case 'e':var $1161 = String$nil;var $1146 = $1161;break;};var $1127 = $1146;break;case 'e':var $1162 = String$nil;var $1127 = $1162;break;};var $1125 = $1127;break;case 'i':var $1163=self.slice(0,-1);var _bs$7 = $1163;var self = _bs$7;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1165=self.slice(0,-1);var _bs$9 = $1165;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1167=self.slice(0,-1);var _bs$11 = $1167;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1169=self.slice(0,-1);var _bs$13 = $1169;var $1170 = String$cons$(111,Kind$Name$from_bits$(_bs$13));var $1168 = $1170;break;case 'i':var $1171=self.slice(0,-1);var _bs$13 = $1171;var $1172 = String$cons$(112,Kind$Name$from_bits$(_bs$13));var $1168 = $1172;break;case 'e':var $1173 = String$nil;var $1168 = $1173;break;};var $1166 = $1168;break;case 'i':var $1174=self.slice(0,-1);var _bs$11 = $1174;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1176=self.slice(0,-1);var _bs$13 = $1176;var $1177 = String$cons$(113,Kind$Name$from_bits$(_bs$13));var $1175 = $1177;break;case 'i':var $1178=self.slice(0,-1);var _bs$13 = $1178;var $1179 = String$cons$(114,Kind$Name$from_bits$(_bs$13));var $1175 = $1179;break;case 'e':var $1180 = String$nil;var $1175 = $1180;break;};var $1166 = $1175;break;case 'e':var $1181 = String$nil;var $1166 = $1181;break;};var $1164 = $1166;break;case 'i':var $1182=self.slice(0,-1);var _bs$9 = $1182;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1184=self.slice(0,-1);var _bs$11 = $1184;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1186=self.slice(0,-1);var _bs$13 = $1186;var $1187 = String$cons$(115,Kind$Name$from_bits$(_bs$13));var $1185 = $1187;break;case 'i':var $1188=self.slice(0,-1);var _bs$13 = $1188;var $1189 = String$cons$(116,Kind$Name$from_bits$(_bs$13));var $1185 = $1189;break;case 'e':var $1190 = String$nil;var $1185 = $1190;break;};var $1183 = $1185;break;case 'i':var $1191=self.slice(0,-1);var _bs$11 = $1191;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1193=self.slice(0,-1);var _bs$13 = $1193;var $1194 = String$cons$(117,Kind$Name$from_bits$(_bs$13));var $1192 = $1194;break;case 'i':var $1195=self.slice(0,-1);var _bs$13 = $1195;var $1196 = String$cons$(118,Kind$Name$from_bits$(_bs$13));var $1192 = $1196;break;case 'e':var $1197 = String$nil;var $1192 = $1197;break;};var $1183 = $1192;break;case 'e':var $1198 = String$nil;var $1183 = $1198;break;};var $1164 = $1183;break;case 'e':var $1199 = String$nil;var $1164 = $1199;break;};var $1125 = $1164;break;case 'e':var $1200 = String$nil;var $1125 = $1200;break;};var $1123 = $1125;break;case 'i':var $1201=self.slice(0,-1);var _bs$5 = $1201;var self = _bs$5;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1203=self.slice(0,-1);var _bs$7 = $1203;var self = _bs$7;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1205=self.slice(0,-1);var _bs$9 = $1205;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1207=self.slice(0,-1);var _bs$11 = $1207;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1209=self.slice(0,-1);var _bs$13 = $1209;var $1210 = String$cons$(119,Kind$Name$from_bits$(_bs$13));var $1208 = $1210;break;case 'i':var $1211=self.slice(0,-1);var _bs$13 = $1211;var $1212 = String$cons$(120,Kind$Name$from_bits$(_bs$13));var $1208 = $1212;break;case 'e':var $1213 = String$nil;var $1208 = $1213;break;};var $1206 = $1208;break;case 'i':var $1214=self.slice(0,-1);var _bs$11 = $1214;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1216=self.slice(0,-1);var _bs$13 = $1216;var $1217 = String$cons$(121,Kind$Name$from_bits$(_bs$13));var $1215 = $1217;break;case 'i':var $1218=self.slice(0,-1);var _bs$13 = $1218;var $1219 = String$cons$(122,Kind$Name$from_bits$(_bs$13));var $1215 = $1219;break;case 'e':var $1220 = String$nil;var $1215 = $1220;break;};var $1206 = $1215;break;case 'e':var $1221 = String$nil;var $1206 = $1221;break;};var $1204 = $1206;break;case 'i':var $1222=self.slice(0,-1);var _bs$9 = $1222;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1224=self.slice(0,-1);var _bs$11 = $1224;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1226=self.slice(0,-1);var _bs$13 = $1226;var $1227 = String$cons$(48,Kind$Name$from_bits$(_bs$13));var $1225 = $1227;break;case 'i':var $1228=self.slice(0,-1);var _bs$13 = $1228;var $1229 = String$cons$(49,Kind$Name$from_bits$(_bs$13));var $1225 = $1229;break;case 'e':var $1230 = String$nil;var $1225 = $1230;break;};var $1223 = $1225;break;case 'i':var $1231=self.slice(0,-1);var _bs$11 = $1231;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1233=self.slice(0,-1);var _bs$13 = $1233;var $1234 = String$cons$(50,Kind$Name$from_bits$(_bs$13));var $1232 = $1234;break;case 'i':var $1235=self.slice(0,-1);var _bs$13 = $1235;var $1236 = String$cons$(51,Kind$Name$from_bits$(_bs$13));var $1232 = $1236;break;case 'e':var $1237 = String$nil;var $1232 = $1237;break;};var $1223 = $1232;break;case 'e':var $1238 = String$nil;var $1223 = $1238;break;};var $1204 = $1223;break;case 'e':var $1239 = String$nil;var $1204 = $1239;break;};var $1202 = $1204;break;case 'i':var $1240=self.slice(0,-1);var _bs$7 = $1240;var self = _bs$7;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1242=self.slice(0,-1);var _bs$9 = $1242;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1244=self.slice(0,-1);var _bs$11 = $1244;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1246=self.slice(0,-1);var _bs$13 = $1246;var $1247 = String$cons$(52,Kind$Name$from_bits$(_bs$13));var $1245 = $1247;break;case 'i':var $1248=self.slice(0,-1);var _bs$13 = $1248;var $1249 = String$cons$(53,Kind$Name$from_bits$(_bs$13));var $1245 = $1249;break;case 'e':var $1250 = String$nil;var $1245 = $1250;break;};var $1243 = $1245;break;case 'i':var $1251=self.slice(0,-1);var _bs$11 = $1251;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1253=self.slice(0,-1);var _bs$13 = $1253;var $1254 = String$cons$(54,Kind$Name$from_bits$(_bs$13));var $1252 = $1254;break;case 'i':var $1255=self.slice(0,-1);var _bs$13 = $1255;var $1256 = String$cons$(55,Kind$Name$from_bits$(_bs$13));var $1252 = $1256;break;case 'e':var $1257 = String$nil;var $1252 = $1257;break;};var $1243 = $1252;break;case 'e':var $1258 = String$nil;var $1243 = $1258;break;};var $1241 = $1243;break;case 'i':var $1259=self.slice(0,-1);var _bs$9 = $1259;var self = _bs$9;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1261=self.slice(0,-1);var _bs$11 = $1261;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1263=self.slice(0,-1);var _bs$13 = $1263;var $1264 = String$cons$(56,Kind$Name$from_bits$(_bs$13));var $1262 = $1264;break;case 'i':var $1265=self.slice(0,-1);var _bs$13 = $1265;var $1266 = String$cons$(57,Kind$Name$from_bits$(_bs$13));var $1262 = $1266;break;case 'e':var $1267 = String$nil;var $1262 = $1267;break;};var $1260 = $1262;break;case 'i':var $1268=self.slice(0,-1);var _bs$11 = $1268;var self = _bs$11;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $1270=self.slice(0,-1);var _bs$13 = $1270;var $1271 = String$cons$(46,Kind$Name$from_bits$(_bs$13));var $1269 = $1271;break;case 'i':var $1272=self.slice(0,-1);var _bs$13 = $1272;var $1273 = String$cons$(95,Kind$Name$from_bits$(_bs$13));var $1269 = $1273;break;case 'e':var $1274 = String$nil;var $1269 = $1274;break;};var $1260 = $1269;break;case 'e':var $1275 = String$nil;var $1260 = $1275;break;};var $1241 = $1260;break;case 'e':var $1276 = String$nil;var $1241 = $1276;break;};var $1202 = $1241;break;case 'e':var $1277 = String$nil;var $1202 = $1277;break;};var $1123 = $1202;break;case 'e':var $1278 = String$nil;var $1123 = $1278;break;};var $964 = $1123;break;case 'e':var $1279 = String$nil;var $964 = $1279;break;};return $964;};
  const Kind$Name$from_bits = x0=>Kind$Name$from_bits$(x0);
  function Kind$Map$to_list$(_xs$2){var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2,Bits$e,List$nil));var $1280 = List$mapped$(_kvs$3,(_kv$4=>{var self = _kv$4;switch(self._){case 'Pair.new':var $1282=self.fst;var $1283=self.snd;var $1284 = Pair$new$(Kind$Name$from_bits$($1282),$1283);var $1281 = $1284;break;};return $1281;}));return $1280;};
  const Kind$Map$to_list = x0=>Kind$Map$to_list$(x0);
  function Kind$Map$keys$(_xs$2){var $1285 = List$mapped$(Kind$Map$to_list$(_xs$2),Pair$fst);return $1285;};
  const Kind$Map$keys = x0=>Kind$Map$keys$(x0);
  function Kind$Synth$load$cached$(_names$1,_defs$2){var self = _names$1;switch(self._){case 'List.cons':var $1287=self.head;var $1288=self.tail;var self = Kind$Synth$load$cached$is_loop$($1287,_defs$2);if (self) {var $1290 = Kind$Synth$load$cached$($1288,_defs$2);var $1289 = $1290;} else {var _name$5 = $1287;var $1291 = IO$monad$((_m$bind$6=>_m$pure$7=>{var $1292 = _m$bind$6;return $1292;}))(Kind$Synth$load$cached$def$(_name$5))((_defn$6=>{var self = _defn$6;switch(self._){case 'Maybe.some':var $1294=self.value;var self = $1294;switch(self._){case 'Kind.Def.new':var $1296=self.term;var $1297=self.type;var _defs$17 = Kind$Map$set$(_name$5,$1294,_defs$2);var _deps$18 = Kind$Map$new;var _deps$19 = Kind$Core$dependencies$go$($1296,_deps$18);var _deps$20 = Kind$Core$dependencies$go$($1297,_deps$19);var _deps$21 = Kind$Map$keys$(_deps$20);var $1298 = IO$monad$((_m$bind$22=>_m$pure$23=>{var $1299 = _m$bind$22;return $1299;}))(Kind$Synth$load$cached$(_deps$21,_defs$17))((_defs$22=>{var self = _defs$22;switch(self._){case 'Maybe.some':var $1301=self.value;var $1302 = Kind$Synth$load$cached$($1288,$1301);var $1300 = $1302;break;case 'Maybe.none':var $1303 = IO$monad$((_m$bind$23=>_m$pure$24=>{var $1304 = _m$pure$24;return $1304;}))(Maybe$none);var $1300 = $1303;break;};return $1300;}));var $1295 = $1298;break;};var $1293 = $1295;break;case 'Maybe.none':var $1305 = IO$monad$((_m$bind$7=>_m$pure$8=>{var $1306 = _m$pure$8;return $1306;}))(Maybe$none);var $1293 = $1305;break;};return $1293;}));var $1289 = $1291;};var $1286 = $1289;break;case 'List.nil':var $1307 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $1308 = _m$pure$4;return $1308;}))(Maybe$some$(_defs$2));var $1286 = $1307;break;};return $1286;};
  const Kind$Synth$load$cached = x0=>x1=>Kind$Synth$load$cached$(x0,x1);
  function String$map$(_f$1,_as$2){var self = _as$2;if (self.length===0) {var $1310 = String$nil;var $1309 = $1310;} else {var $1311=self.charCodeAt(0);var $1312=self.slice(1);var $1313 = String$cons$(_f$1($1311),String$map$(_f$1,$1312));var $1309 = $1313;};return $1309;};
  const String$map = x0=>x1=>String$map$(x0,x1);
  function Char$to_upper$(_char$1){var self = ((_char$1>=97)&&(_char$1<=122));if (self) {var $1315 = ((_char$1-32)&0xFFFF);var $1314 = $1315;} else {var $1316 = _char$1;var $1314 = $1316;};return $1314;};
  const Char$to_upper = x0=>Char$to_upper$(x0);
  function String$to_upper$(_str$1){var $1317 = String$map$(Char$to_upper,_str$1);return $1317;};
  const String$to_upper = x0=>String$to_upper$(x0);
  function String$is_upper$(_str$1){var $1318 = (String$to_upper$(_str$1)===_str$1);return $1318;};
  const String$is_upper = x0=>String$is_upper$(x0);
  function String$take$(_n$1,_xs$2){var self = _xs$2;if (self.length===0) {var $1320 = String$nil;var $1319 = $1320;} else {var $1321=self.charCodeAt(0);var $1322=self.slice(1);var self = _n$1;if (self===0n) {var $1324 = String$nil;var $1323 = $1324;} else {var $1325=(self-1n);var $1326 = String$cons$($1321,String$take$($1325,$1322));var $1323 = $1326;};var $1319 = $1323;};return $1319;};
  const String$take = x0=>x1=>String$take$(x0,x1);
  function IO$request$(_url$1){var $1327 = IO$ask$("request",_url$1,(_text$2=>{var $1328 = IO$end$(_text$2);return $1328;}));return $1327;};
  const IO$request = x0=>IO$request$(x0);
  function Kind$Synth$get_kind_code$(_file$1){var $1329 = IO$monad$((_m$bind$2=>_m$pure$3=>{var $1330 = _m$bind$2;return $1330;}))(IO$get_file$(_file$1))((_code$2=>{var self = (String$is_upper$(String$take$(1n,_file$1))&&(_code$2===""));if (self) {var $1332 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $1333 = _m$bind$3;return $1333;}))(IO$request$(("http://uwu.tech:7172/"+_file$1)))((_code$3=>{var $1334 = IO$monad$((_m$bind$4=>_m$pure$5=>{var $1335 = _m$pure$5;return $1335;}))(_code$3);return $1334;}));var $1331 = $1332;} else {var $1336 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $1337 = _m$pure$4;return $1337;}))(_code$2);var $1331 = $1336;};return $1331;}));return $1329;};
  const Kind$Synth$get_kind_code = x0=>Kind$Synth$get_kind_code$(x0);
  function Parser$is_eof$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $1339=self.str;var self = $1339;if (self.length===0) {var $1341 = Parser$Reply$value$(_pst$1,Bool$true);var $1340 = $1341;} else {var $1342=self.charCodeAt(0);var $1343=self.slice(1);var $1344 = Parser$Reply$value$(_pst$1,Bool$false);var $1340 = $1344;};var $1338 = $1340;break;};return $1338;};
  const Parser$is_eof = x0=>Parser$is_eof$(x0);
  function Parser$(_V$1){var $1345 = null;return $1345;};
  const Parser = x0=>Parser$(x0);
  function Parser$choice$(_pars$2,_pst$3){var Parser$choice$=(_pars$2,_pst$3)=>({ctr:'TCO',arg:[_pars$2,_pst$3]});var Parser$choice=_pars$2=>_pst$3=>Parser$choice$(_pars$2,_pst$3);var arg=[_pars$2,_pst$3];while(true){let [_pars$2,_pst$3]=arg;var R=(()=>{var self = _pst$3;switch(self._){case 'Parser.State.new':var $1346=self.err;var $1347=self.nam;var $1348=self.ini;var $1349=self.idx;var $1350=self.str;var self = _pars$2;switch(self._){case 'List.cons':var $1352=self.head;var $1353=self.tail;var _parsed$11 = $1352(_pst$3);var self = _parsed$11;switch(self._){case 'Parser.Reply.error':var $1355=self.err;var _cur_err$13 = Maybe$some$($1355);var _far_err$14 = Parser$Error$maybe_combine$($1346,_cur_err$13);var _new_pst$15 = Parser$State$new$(_far_err$14,$1347,$1348,$1349,$1350);var $1356 = Parser$choice$($1353,_new_pst$15);var $1354 = $1356;break;case 'Parser.Reply.value':var $1357=self.pst;var $1358=self.val;var $1359 = Parser$Reply$value$($1357,$1358);var $1354 = $1359;break;};var $1351 = $1354;break;case 'List.nil':var self = $1346;switch(self._){case 'Maybe.some':var $1361=self.value;var $1362 = Parser$Reply$error$($1361);var $1360 = $1362;break;case 'Maybe.none':var $1363 = Parser$Reply$fail$($1347,$1348,$1349,"No parse.");var $1360 = $1363;break;};var $1351 = $1360;break;};return $1351;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Parser$choice = x0=>x1=>Parser$choice$(x0,x1);
  function Parser$text$go$(_ini_idx$1,_ini_txt$2,_text$3,_pst$4){var Parser$text$go$=(_ini_idx$1,_ini_txt$2,_text$3,_pst$4)=>({ctr:'TCO',arg:[_ini_idx$1,_ini_txt$2,_text$3,_pst$4]});var Parser$text$go=_ini_idx$1=>_ini_txt$2=>_text$3=>_pst$4=>Parser$text$go$(_ini_idx$1,_ini_txt$2,_text$3,_pst$4);var arg=[_ini_idx$1,_ini_txt$2,_text$3,_pst$4];while(true){let [_ini_idx$1,_ini_txt$2,_text$3,_pst$4]=arg;var R=(()=>{var self = _pst$4;switch(self._){case 'Parser.State.new':var $1364=self.err;var $1365=self.nam;var $1366=self.ini;var $1367=self.idx;var $1368=self.str;var self = _text$3;if (self.length===0) {var $1370 = Parser$Reply$value$(_pst$4,Unit$new);var $1369 = $1370;} else {var $1371=self.charCodeAt(0);var $1372=self.slice(1);var self = $1368;if (self.length===0) {var _error_msg$12 = ("Expected \'"+(_ini_txt$2+"\', found end of file."));var $1374 = Parser$Reply$fail$($1365,$1366,_ini_idx$1,_error_msg$12);var $1373 = $1374;} else {var $1375=self.charCodeAt(0);var $1376=self.slice(1);var self = ($1371===$1375);if (self) {var _pst$14 = Parser$State$new$($1364,$1365,$1366,Nat$succ$($1367),$1376);var $1378 = Parser$text$go$(_ini_idx$1,_ini_txt$2,$1372,_pst$14);var $1377 = $1378;} else {var _chr$14 = String$cons$($1375,String$nil);var _err$15 = ("Expected \'"+(_ini_txt$2+("\', found \'"+(_chr$14+"\'."))));var $1379 = Parser$Reply$fail$($1365,$1366,_ini_idx$1,_err$15);var $1377 = $1379;};var $1373 = $1377;};var $1369 = $1373;};return $1369;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Parser$text$go = x0=>x1=>x2=>x3=>Parser$text$go$(x0,x1,x2,x3);
  function Parser$text$(_text$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $1381=self.idx;var self = Parser$text$go$($1381,_text$1,_text$1,_pst$2);switch(self._){case 'Parser.Reply.error':var $1383=self.err;var $1384 = Parser$Reply$error$($1383);var $1382 = $1384;break;case 'Parser.Reply.value':var $1385=self.pst;var $1386=self.val;var $1387 = Parser$Reply$value$($1385,$1386);var $1382 = $1387;break;};var $1380 = $1382;break;};return $1380;};
  const Parser$text = x0=>x1=>Parser$text$(x0,x1);
  function Parser$eof$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $1389=self.nam;var $1390=self.ini;var $1391=self.idx;var $1392=self.str;var self = $1392;if (self.length===0) {var $1394 = Parser$Reply$value$(_pst$1,Unit$new);var $1393 = $1394;} else {var $1395=self.charCodeAt(0);var $1396=self.slice(1);var $1397 = Parser$Reply$fail$($1389,$1390,$1391,"Expected end-of-file.");var $1393 = $1397;};var $1388 = $1393;break;};return $1388;};
  const Parser$eof = x0=>Parser$eof$(x0);
  function Parser$until$go$(_until$2,_parse$3,_values$4,_pst$5){var Parser$until$go$=(_until$2,_parse$3,_values$4,_pst$5)=>({ctr:'TCO',arg:[_until$2,_parse$3,_values$4,_pst$5]});var Parser$until$go=_until$2=>_parse$3=>_values$4=>_pst$5=>Parser$until$go$(_until$2,_parse$3,_values$4,_pst$5);var arg=[_until$2,_parse$3,_values$4,_pst$5];while(true){let [_until$2,_parse$3,_values$4,_pst$5]=arg;var R=(()=>{var _until_reply$6 = _until$2(_pst$5);var self = _until_reply$6;switch(self._){case 'Parser.Reply.error':var $1399=self.err;var _reply$8 = _parse$3(_pst$5);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $1401=self.err;var $1402 = Parser$Reply$error$(Parser$Error$combine$($1401,$1399));var $1400 = $1402;break;case 'Parser.Reply.value':var $1403=self.pst;var $1404=self.val;var $1405 = Parser$until$go$(_until$2,_parse$3,List$cons$($1404,_values$4),$1403);var $1400 = $1405;break;};var $1398 = $1400;break;case 'Parser.Reply.value':var $1406=self.pst;var $1407 = Parser$Reply$value$($1406,List$reverse$(_values$4));var $1398 = $1407;break;};return $1398;})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Parser$until$go = x0=>x1=>x2=>x3=>Parser$until$go$(x0,x1,x2,x3);
  function Parser$until$(_until$2,_parse$3){var $1408 = Parser$until$go(_until$2)(_parse$3)(List$nil);return $1408;};
  const Parser$until = x0=>x1=>Parser$until$(x0,x1);
  function Parser$one$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $1410=self.err;var $1411=self.nam;var $1412=self.ini;var $1413=self.idx;var $1414=self.str;var self = $1414;if (self.length===0) {var $1416 = Parser$Reply$fail$($1411,$1412,$1413,"Unexpected end of file.");var $1415 = $1416;} else {var $1417=self.charCodeAt(0);var $1418=self.slice(1);var _pst$9 = Parser$State$new$($1410,$1411,$1412,Nat$succ$($1413),$1418);var $1419 = Parser$Reply$value$(_pst$9,$1417);var $1415 = $1419;};var $1409 = $1415;break;};return $1409;};
  const Parser$one = x0=>Parser$one$(x0);
  function Kind$Parser$comment$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $1421=self.err;var _reply$7 = Parser$text$("//",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $1423=self.err;var self = $1421;switch(self._){case 'Maybe.some':var $1425=self.value;var $1426 = Parser$Reply$error$(Parser$Error$combine$($1425,$1423));var $1424 = $1426;break;case 'Maybe.none':var $1427 = Parser$Reply$error$($1423);var $1424 = $1427;break;};var $1422 = $1424;break;case 'Parser.Reply.value':var $1428=self.pst;var self = $1428;switch(self._){case 'Parser.State.new':var $1430=self.err;var $1431=self.nam;var $1432=self.ini;var $1433=self.idx;var $1434=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($1421,$1430),$1431,$1432,$1433,$1434);var _end$16 = Parser$choice(List$cons$(Parser$text("\u{a}"),List$cons$(Parser$eof,List$nil)));var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $1436=self.err;var _reply$22 = Parser$until$(_end$16,Parser$one)(_reply$pst$15);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $1438=self.err;var self = $1436;switch(self._){case 'Maybe.some':var $1440=self.value;var $1441 = Parser$Reply$error$(Parser$Error$combine$($1440,$1438));var $1439 = $1441;break;case 'Maybe.none':var $1442 = Parser$Reply$error$($1438);var $1439 = $1442;break;};var $1437 = $1439;break;case 'Parser.Reply.value':var $1443=self.pst;var self = $1443;switch(self._){case 'Parser.State.new':var $1445=self.err;var $1446=self.nam;var $1447=self.ini;var $1448=self.idx;var $1449=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($1436,$1445),$1446,$1447,$1448,$1449);var $1450 = Parser$Reply$value$(_reply$pst$30,Unit$new);var $1444 = $1450;break;};var $1437 = $1444;break;};var $1435 = $1437;break;};var $1429 = $1435;break;};var $1422 = $1429;break;};var $1420 = $1422;break;};return $1420;};
  const Kind$Parser$comment = x0=>Kind$Parser$comment$(x0);
  const Kind$Parser$spaces = Parser$many$(Parser$choice(List$cons$(Parser$text(" "),List$cons$(Parser$text("\u{9}"),List$cons$(Parser$text("\u{d}"),List$cons$(Parser$text("\u{a}"),List$cons$(Kind$Parser$comment,List$nil)))))));
  function Parser$get_idx$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $1452=self.idx;var $1453 = Parser$Reply$value$(_pst$1,$1452);var $1451 = $1453;break;};return $1451;};
  const Parser$get_idx = x0=>Parser$get_idx$(x0);
  function U16$btw$(_a$1,_b$2,_c$3){var $1454 = ((_a$1<=_b$2)&&(_b$2<=_c$3));return $1454;};
  const U16$btw = x0=>x1=>x2=>U16$btw$(x0,x1,x2);
  function Kind$Name$is_letter$(_chr$1){var self = U16$btw$(65,_chr$1,90);if (self) {var $1456 = Bool$true;var $1455 = $1456;} else {var self = U16$btw$(97,_chr$1,122);if (self) {var $1458 = Bool$true;var $1457 = $1458;} else {var self = U16$btw$(48,_chr$1,57);if (self) {var $1460 = Bool$true;var $1459 = $1460;} else {var self = (46===_chr$1);if (self) {var $1462 = Bool$true;var $1461 = $1462;} else {var self = (95===_chr$1);if (self) {var $1464 = Bool$true;var $1463 = $1464;} else {var self = (94===_chr$1);if (self) {var $1466 = Bool$true;var $1465 = $1466;} else {var $1467 = Bool$false;var $1465 = $1467;};var $1463 = $1465;};var $1461 = $1463;};var $1459 = $1461;};var $1457 = $1459;};var $1455 = $1457;};return $1455;};
  const Kind$Name$is_letter = x0=>Kind$Name$is_letter$(x0);
  function Kind$Parser$letter$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $1469=self.err;var $1470=self.nam;var $1471=self.ini;var $1472=self.idx;var $1473=self.str;var self = $1473;if (self.length===0) {var $1475 = Parser$Reply$fail$($1470,$1471,$1472,"Unexpected eof.");var $1474 = $1475;} else {var $1476=self.charCodeAt(0);var $1477=self.slice(1);var self = Kind$Name$is_letter$($1476);if (self) {var _pst$9 = Parser$State$new$($1469,$1470,$1471,Nat$succ$($1472),$1477);var $1479 = Parser$Reply$value$(_pst$9,$1476);var $1478 = $1479;} else {var $1480 = Parser$Reply$fail$($1470,$1471,$1472,"Expected name.");var $1478 = $1480;};var $1474 = $1478;};var $1468 = $1474;break;};return $1468;};
  const Kind$Parser$letter = x0=>Kind$Parser$letter$(x0);
  function List$fold$(_list$2,_nil$4,_cons$5){var self = _list$2;switch(self._){case 'List.cons':var $1482=self.head;var $1483=self.tail;var $1484 = _cons$5($1482)(List$fold$($1483,_nil$4,_cons$5));var $1481 = $1484;break;case 'List.nil':var $1485 = _nil$4;var $1481 = $1485;break;};return $1481;};
  const List$fold = x0=>x1=>x2=>List$fold$(x0,x1,x2);
  function Parser$fail$(_error$2,_pst$3){var self = _pst$3;switch(self._){case 'Parser.State.new':var $1487=self.nam;var $1488=self.ini;var $1489=self.idx;var $1490 = Parser$Reply$fail$($1487,$1488,$1489,_error$2);var $1486 = $1490;break;};return $1486;};
  const Parser$fail = x0=>x1=>Parser$fail$(x0,x1);
  function String$head$(_xs$1){var self = _xs$1;if (self.length===0) {var $1492 = Maybe$none;var $1491 = $1492;} else {var $1493=self.charCodeAt(0);var $1494=self.slice(1);var $1495 = Maybe$some$($1493);var $1491 = $1495;};return $1491;};
  const String$head = x0=>String$head$(x0);
  function Kind$Parser$name1$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $1497=self.err;var _reply$7 = Kind$Parser$spaces(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $1499=self.err;var self = $1497;switch(self._){case 'Maybe.some':var $1501=self.value;var $1502 = Parser$Reply$error$(Parser$Error$combine$($1501,$1499));var $1500 = $1502;break;case 'Maybe.none':var $1503 = Parser$Reply$error$($1499);var $1500 = $1503;break;};var $1498 = $1500;break;case 'Parser.Reply.value':var $1504=self.pst;var self = $1504;switch(self._){case 'Parser.State.new':var $1506=self.err;var $1507=self.nam;var $1508=self.ini;var $1509=self.idx;var $1510=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($1497,$1506),$1507,$1508,$1509,$1510);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $1512=self.err;var _reply$21 = Parser$many1$(Kind$Parser$letter,_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $1514=self.err;var self = $1512;switch(self._){case 'Maybe.some':var $1516=self.value;var $1517 = Parser$Reply$error$(Parser$Error$combine$($1516,$1514));var $1515 = $1517;break;case 'Maybe.none':var $1518 = Parser$Reply$error$($1514);var $1515 = $1518;break;};var $1513 = $1515;break;case 'Parser.Reply.value':var $1519=self.pst;var $1520=self.val;var self = $1519;switch(self._){case 'Parser.State.new':var $1522=self.err;var $1523=self.nam;var $1524=self.ini;var $1525=self.idx;var $1526=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($1512,$1522),$1523,$1524,$1525,$1526);var _name$30 = List$fold$($1520,String$nil,String$cons);var _reserved$31 = Parser$fail("Reserved keyword.");var _numeric$32 = Parser$fail("Name can\'t start with number or sign.");var self = (_name$30==="case");if (self) {var $1528 = _reserved$31;var $1527 = $1528;} else {var self = (_name$30==="do");if (self) {var $1530 = _reserved$31;var $1529 = $1530;} else {var self = (_name$30==="if");if (self) {var $1532 = _reserved$31;var $1531 = $1532;} else {var self = (_name$30==="with");if (self) {var $1534 = _reserved$31;var $1533 = $1534;} else {var self = (_name$30==="for");if (self) {var $1536 = _reserved$31;var $1535 = $1536;} else {var self = (_name$30==="else");if (self) {var $1538 = _reserved$31;var $1537 = $1538;} else {var self = (_name$30==="switch");if (self) {var $1540 = _reserved$31;var $1539 = $1540;} else {var self = (_name$30===".");if (self) {var $1542 = _reserved$31;var $1541 = $1542;} else {var self = (_name$30==="..");if (self) {var $1544 = _reserved$31;var $1543 = $1544;} else {var self = (_name$30==="...");if (self) {var $1546 = _reserved$31;var $1545 = $1546;} else {var self = (Maybe$default$(String$head$(_name$30),120)===43);if (self) {var $1548 = _numeric$32;var $1547 = $1548;} else {var self = (Maybe$default$(String$head$(_name$30),120)===45);if (self) {var $1550 = _numeric$32;var $1549 = $1550;} else {var self = (Maybe$default$(String$head$(_name$30),120)===48);if (self) {var $1552 = _numeric$32;var $1551 = $1552;} else {var self = (Maybe$default$(String$head$(_name$30),120)===49);if (self) {var $1554 = _numeric$32;var $1553 = $1554;} else {var self = (Maybe$default$(String$head$(_name$30),120)===50);if (self) {var $1556 = _numeric$32;var $1555 = $1556;} else {var self = (Maybe$default$(String$head$(_name$30),120)===51);if (self) {var $1558 = _numeric$32;var $1557 = $1558;} else {var self = (Maybe$default$(String$head$(_name$30),120)===52);if (self) {var $1560 = _numeric$32;var $1559 = $1560;} else {var self = (Maybe$default$(String$head$(_name$30),120)===53);if (self) {var $1562 = _numeric$32;var $1561 = $1562;} else {var self = (Maybe$default$(String$head$(_name$30),120)===54);if (self) {var $1564 = _numeric$32;var $1563 = $1564;} else {var self = (Maybe$default$(String$head$(_name$30),120)===55);if (self) {var $1566 = _numeric$32;var $1565 = $1566;} else {var self = (Maybe$default$(String$head$(_name$30),120)===56);if (self) {var $1568 = _numeric$32;var $1567 = $1568;} else {var self = (Maybe$default$(String$head$(_name$30),120)===57);if (self) {var $1570 = _numeric$32;var $1569 = $1570;} else {var $1571 = (_pst$33=>{var $1572 = Parser$Reply$value$(_pst$33,_name$30);return $1572;});var $1569 = $1571;};var $1567 = $1569;};var $1565 = $1567;};var $1563 = $1565;};var $1561 = $1563;};var $1559 = $1561;};var $1557 = $1559;};var $1555 = $1557;};var $1553 = $1555;};var $1551 = $1553;};var $1549 = $1551;};var $1547 = $1549;};var $1545 = $1547;};var $1543 = $1545;};var $1541 = $1543;};var $1539 = $1541;};var $1537 = $1539;};var $1535 = $1537;};var $1533 = $1535;};var $1531 = $1533;};var $1529 = $1531;};var $1527 = $1529;};var $1527 = $1527(_reply$pst$29);var $1521 = $1527;break;};var $1513 = $1521;break;};var $1511 = $1513;break;};var $1505 = $1511;break;};var $1498 = $1505;break;};var $1496 = $1498;break;};return $1496;};
  const Kind$Parser$name1 = x0=>Kind$Parser$name1$(x0);
  function Parser$until1$(_cond$2,_parser$3,_pst$4){var self = _pst$4;switch(self._){case 'Parser.State.new':var $1574=self.err;var _reply$10 = _parser$3(_pst$4);var self = _reply$10;switch(self._){case 'Parser.Reply.error':var $1576=self.err;var self = $1574;switch(self._){case 'Maybe.some':var $1578=self.value;var $1579 = Parser$Reply$error$(Parser$Error$combine$($1578,$1576));var $1577 = $1579;break;case 'Maybe.none':var $1580 = Parser$Reply$error$($1576);var $1577 = $1580;break;};var $1575 = $1577;break;case 'Parser.Reply.value':var $1581=self.pst;var $1582=self.val;var self = $1581;switch(self._){case 'Parser.State.new':var $1584=self.err;var $1585=self.nam;var $1586=self.ini;var $1587=self.idx;var $1588=self.str;var _reply$pst$18 = Parser$State$new$(Parser$Error$maybe_combine$($1574,$1584),$1585,$1586,$1587,$1588);var self = _reply$pst$18;switch(self._){case 'Parser.State.new':var $1590=self.err;var _reply$24 = Parser$until$(_cond$2,_parser$3)(_reply$pst$18);var self = _reply$24;switch(self._){case 'Parser.Reply.error':var $1592=self.err;var self = $1590;switch(self._){case 'Maybe.some':var $1594=self.value;var $1595 = Parser$Reply$error$(Parser$Error$combine$($1594,$1592));var $1593 = $1595;break;case 'Maybe.none':var $1596 = Parser$Reply$error$($1592);var $1593 = $1596;break;};var $1591 = $1593;break;case 'Parser.Reply.value':var $1597=self.pst;var $1598=self.val;var self = $1597;switch(self._){case 'Parser.State.new':var $1600=self.err;var $1601=self.nam;var $1602=self.ini;var $1603=self.idx;var $1604=self.str;var _reply$pst$32 = Parser$State$new$(Parser$Error$maybe_combine$($1590,$1600),$1601,$1602,$1603,$1604);var $1605 = Parser$Reply$value$(_reply$pst$32,List$cons$($1582,$1598));var $1599 = $1605;break;};var $1591 = $1599;break;};var $1589 = $1591;break;};var $1583 = $1589;break;};var $1575 = $1583;break;};var $1573 = $1575;break;};return $1573;};
  const Parser$until1 = x0=>x1=>x2=>Parser$until1$(x0,x1,x2);
  function Parser$wrap1$(_opens$2,_parse$3,_close$4,_pst$5){var self = _pst$5;switch(self._){case 'Parser.State.new':var $1607=self.err;var _reply$11 = _opens$2(_pst$5);var self = _reply$11;switch(self._){case 'Parser.Reply.error':var $1609=self.err;var self = $1607;switch(self._){case 'Maybe.some':var $1611=self.value;var $1612 = Parser$Reply$error$(Parser$Error$combine$($1611,$1609));var $1610 = $1612;break;case 'Maybe.none':var $1613 = Parser$Reply$error$($1609);var $1610 = $1613;break;};var $1608 = $1610;break;case 'Parser.Reply.value':var $1614=self.pst;var self = $1614;switch(self._){case 'Parser.State.new':var $1616=self.err;var $1617=self.nam;var $1618=self.ini;var $1619=self.idx;var $1620=self.str;var _reply$pst$19 = Parser$State$new$(Parser$Error$maybe_combine$($1607,$1616),$1617,$1618,$1619,$1620);var $1621 = Parser$until1$(_close$4,_parse$3,_reply$pst$19);var $1615 = $1621;break;};var $1608 = $1615;break;};var $1606 = $1608;break;};return $1606;};
  const Parser$wrap1 = x0=>x1=>x2=>x3=>Parser$wrap1$(x0,x1,x2,x3);
  function Kind$Parser$text_now$(_text$1){var $1622 = Parser$text(_text$1);return $1622;};
  const Kind$Parser$text_now = x0=>Kind$Parser$text_now$(x0);
  function Parser$maybe$(_parse$2,_pst$3){var self = _pst$3;switch(self._){case 'Parser.State.new':var self = _parse$2(_pst$3);switch(self._){case 'Parser.Reply.value':var $1625=self.pst;var $1626=self.val;var $1627 = Parser$Reply$value$($1625,Maybe$some$($1626));var $1624 = $1627;break;case 'Parser.Reply.error':var $1628 = Parser$Reply$value$(_pst$3,Maybe$none);var $1624 = $1628;break;};var $1623 = $1624;break;};return $1623;};
  const Parser$maybe = x0=>x1=>Parser$maybe$(x0,x1);
  function Kind$Parser$text$(_text$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $1630=self.err;var _reply$8 = Kind$Parser$spaces(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $1632=self.err;var self = $1630;switch(self._){case 'Maybe.some':var $1634=self.value;var $1635 = Parser$Reply$error$(Parser$Error$combine$($1634,$1632));var $1633 = $1635;break;case 'Maybe.none':var $1636 = Parser$Reply$error$($1632);var $1633 = $1636;break;};var $1631 = $1633;break;case 'Parser.Reply.value':var $1637=self.pst;var self = $1637;switch(self._){case 'Parser.State.new':var $1639=self.err;var $1640=self.nam;var $1641=self.ini;var $1642=self.idx;var $1643=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($1630,$1639),$1640,$1641,$1642,$1643);var $1644 = Parser$text$(_text$1,_reply$pst$16);var $1638 = $1644;break;};var $1631 = $1638;break;};var $1629 = $1631;break;};return $1629;};
  const Kind$Parser$text = x0=>x1=>Kind$Parser$text$(x0,x1);
  function Kind$Parser$items_now$(_ini$2,_parser$3,_end$4){var $1645 = Parser$wrap1(Kind$Parser$text_now$(_ini$2))((_pst$5=>{var self = _pst$5;switch(self._){case 'Parser.State.new':var $1647=self.err;var _reply$11 = Kind$Parser$spaces(_pst$5);var self = _reply$11;switch(self._){case 'Parser.Reply.error':var $1649=self.err;var self = $1647;switch(self._){case 'Maybe.some':var $1651=self.value;var $1652 = Parser$Reply$error$(Parser$Error$combine$($1651,$1649));var $1650 = $1652;break;case 'Maybe.none':var $1653 = Parser$Reply$error$($1649);var $1650 = $1653;break;};var $1648 = $1650;break;case 'Parser.Reply.value':var $1654=self.pst;var self = $1654;switch(self._){case 'Parser.State.new':var $1656=self.err;var $1657=self.nam;var $1658=self.ini;var $1659=self.idx;var $1660=self.str;var _reply$pst$19 = Parser$State$new$(Parser$Error$maybe_combine$($1647,$1656),$1657,$1658,$1659,$1660);var self = _reply$pst$19;switch(self._){case 'Parser.State.new':var $1662=self.err;var _reply$25 = _parser$3(_reply$pst$19);var self = _reply$25;switch(self._){case 'Parser.Reply.error':var $1664=self.err;var self = $1662;switch(self._){case 'Maybe.some':var $1666=self.value;var $1667 = Parser$Reply$error$(Parser$Error$combine$($1666,$1664));var $1665 = $1667;break;case 'Maybe.none':var $1668 = Parser$Reply$error$($1664);var $1665 = $1668;break;};var $1663 = $1665;break;case 'Parser.Reply.value':var $1669=self.pst;var $1670=self.val;var self = $1669;switch(self._){case 'Parser.State.new':var $1672=self.err;var $1673=self.nam;var $1674=self.ini;var $1675=self.idx;var $1676=self.str;var _reply$pst$33 = Parser$State$new$(Parser$Error$maybe_combine$($1662,$1672),$1673,$1674,$1675,$1676);var self = _reply$pst$33;switch(self._){case 'Parser.State.new':var $1678=self.err;var _reply$39 = Parser$maybe$(Kind$Parser$text(","),_reply$pst$33);var self = _reply$39;switch(self._){case 'Parser.Reply.error':var $1680=self.err;var self = $1678;switch(self._){case 'Maybe.some':var $1682=self.value;var $1683 = Parser$Reply$error$(Parser$Error$combine$($1682,$1680));var $1681 = $1683;break;case 'Maybe.none':var $1684 = Parser$Reply$error$($1680);var $1681 = $1684;break;};var $1679 = $1681;break;case 'Parser.Reply.value':var $1685=self.pst;var self = $1685;switch(self._){case 'Parser.State.new':var $1687=self.err;var $1688=self.nam;var $1689=self.ini;var $1690=self.idx;var $1691=self.str;var _reply$pst$47 = Parser$State$new$(Parser$Error$maybe_combine$($1678,$1687),$1688,$1689,$1690,$1691);var $1692 = Parser$Reply$value$(_reply$pst$47,$1670);var $1686 = $1692;break;};var $1679 = $1686;break;};var $1677 = $1679;break;};var $1671 = $1677;break;};var $1663 = $1671;break;};var $1661 = $1663;break;};var $1655 = $1661;break;};var $1648 = $1655;break;};var $1646 = $1648;break;};return $1646;}))(Kind$Parser$text(_end$4));return $1645;};
  const Kind$Parser$items_now = x0=>x1=>x2=>Kind$Parser$items_now$(x0,x1,x2);
  function Parser$wrap$(_opens$2,_parse$3,_close$4,_pst$5){var self = _pst$5;switch(self._){case 'Parser.State.new':var $1694=self.err;var _reply$11 = _opens$2(_pst$5);var self = _reply$11;switch(self._){case 'Parser.Reply.error':var $1696=self.err;var self = $1694;switch(self._){case 'Maybe.some':var $1698=self.value;var $1699 = Parser$Reply$error$(Parser$Error$combine$($1698,$1696));var $1697 = $1699;break;case 'Maybe.none':var $1700 = Parser$Reply$error$($1696);var $1697 = $1700;break;};var $1695 = $1697;break;case 'Parser.Reply.value':var $1701=self.pst;var self = $1701;switch(self._){case 'Parser.State.new':var $1703=self.err;var $1704=self.nam;var $1705=self.ini;var $1706=self.idx;var $1707=self.str;var _reply$pst$19 = Parser$State$new$(Parser$Error$maybe_combine$($1694,$1703),$1704,$1705,$1706,$1707);var $1708 = Parser$until$(_close$4,_parse$3)(_reply$pst$19);var $1702 = $1708;break;};var $1695 = $1702;break;};var $1693 = $1695;break;};return $1693;};
  const Parser$wrap = x0=>x1=>x2=>x3=>Parser$wrap$(x0,x1,x2,x3);
  function Kind$Parser$items$(_ini$2,_parser$3,_end$4){var $1709 = Parser$wrap(Kind$Parser$text(_ini$2))((_pst$5=>{var self = _pst$5;switch(self._){case 'Parser.State.new':var $1711=self.err;var _reply$11 = Kind$Parser$spaces(_pst$5);var self = _reply$11;switch(self._){case 'Parser.Reply.error':var $1713=self.err;var self = $1711;switch(self._){case 'Maybe.some':var $1715=self.value;var $1716 = Parser$Reply$error$(Parser$Error$combine$($1715,$1713));var $1714 = $1716;break;case 'Maybe.none':var $1717 = Parser$Reply$error$($1713);var $1714 = $1717;break;};var $1712 = $1714;break;case 'Parser.Reply.value':var $1718=self.pst;var self = $1718;switch(self._){case 'Parser.State.new':var $1720=self.err;var $1721=self.nam;var $1722=self.ini;var $1723=self.idx;var $1724=self.str;var _reply$pst$19 = Parser$State$new$(Parser$Error$maybe_combine$($1711,$1720),$1721,$1722,$1723,$1724);var self = _reply$pst$19;switch(self._){case 'Parser.State.new':var $1726=self.err;var _reply$25 = _parser$3(_reply$pst$19);var self = _reply$25;switch(self._){case 'Parser.Reply.error':var $1728=self.err;var self = $1726;switch(self._){case 'Maybe.some':var $1730=self.value;var $1731 = Parser$Reply$error$(Parser$Error$combine$($1730,$1728));var $1729 = $1731;break;case 'Maybe.none':var $1732 = Parser$Reply$error$($1728);var $1729 = $1732;break;};var $1727 = $1729;break;case 'Parser.Reply.value':var $1733=self.pst;var $1734=self.val;var self = $1733;switch(self._){case 'Parser.State.new':var $1736=self.err;var $1737=self.nam;var $1738=self.ini;var $1739=self.idx;var $1740=self.str;var _reply$pst$33 = Parser$State$new$(Parser$Error$maybe_combine$($1726,$1736),$1737,$1738,$1739,$1740);var self = _reply$pst$33;switch(self._){case 'Parser.State.new':var $1742=self.err;var _reply$39 = Parser$maybe$(Kind$Parser$text(","),_reply$pst$33);var self = _reply$39;switch(self._){case 'Parser.Reply.error':var $1744=self.err;var self = $1742;switch(self._){case 'Maybe.some':var $1746=self.value;var $1747 = Parser$Reply$error$(Parser$Error$combine$($1746,$1744));var $1745 = $1747;break;case 'Maybe.none':var $1748 = Parser$Reply$error$($1744);var $1745 = $1748;break;};var $1743 = $1745;break;case 'Parser.Reply.value':var $1749=self.pst;var self = $1749;switch(self._){case 'Parser.State.new':var $1751=self.err;var $1752=self.nam;var $1753=self.ini;var $1754=self.idx;var $1755=self.str;var _reply$pst$47 = Parser$State$new$(Parser$Error$maybe_combine$($1742,$1751),$1752,$1753,$1754,$1755);var $1756 = Parser$Reply$value$(_reply$pst$47,$1734);var $1750 = $1756;break;};var $1743 = $1750;break;};var $1741 = $1743;break;};var $1735 = $1741;break;};var $1727 = $1735;break;};var $1725 = $1727;break;};var $1719 = $1725;break;};var $1712 = $1719;break;};var $1710 = $1712;break;};return $1710;}))(Kind$Parser$text(_end$4));return $1709;};
  const Kind$Parser$items = x0=>x1=>x2=>Kind$Parser$items$(x0,x1,x2);
  function Kind$Parser$name$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $1758=self.err;var _reply$7 = Kind$Parser$spaces(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $1760=self.err;var self = $1758;switch(self._){case 'Maybe.some':var $1762=self.value;var $1763 = Parser$Reply$error$(Parser$Error$combine$($1762,$1760));var $1761 = $1763;break;case 'Maybe.none':var $1764 = Parser$Reply$error$($1760);var $1761 = $1764;break;};var $1759 = $1761;break;case 'Parser.Reply.value':var $1765=self.pst;var self = $1765;switch(self._){case 'Parser.State.new':var $1767=self.err;var $1768=self.nam;var $1769=self.ini;var $1770=self.idx;var $1771=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($1758,$1767),$1768,$1769,$1770,$1771);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $1773=self.err;var _reply$21 = Parser$many$(Kind$Parser$letter)(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $1775=self.err;var self = $1773;switch(self._){case 'Maybe.some':var $1777=self.value;var $1778 = Parser$Reply$error$(Parser$Error$combine$($1777,$1775));var $1776 = $1778;break;case 'Maybe.none':var $1779 = Parser$Reply$error$($1775);var $1776 = $1779;break;};var $1774 = $1776;break;case 'Parser.Reply.value':var $1780=self.pst;var $1781=self.val;var self = $1780;switch(self._){case 'Parser.State.new':var $1783=self.err;var $1784=self.nam;var $1785=self.ini;var $1786=self.idx;var $1787=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($1773,$1783),$1784,$1785,$1786,$1787);var $1788 = Parser$Reply$value$(_reply$pst$29,List$fold$($1781,String$nil,String$cons));var $1782 = $1788;break;};var $1774 = $1782;break;};var $1772 = $1774;break;};var $1766 = $1772;break;};var $1759 = $1766;break;};var $1757 = $1759;break;};return $1757;};
  const Kind$Parser$name = x0=>Kind$Parser$name$(x0);
  function Kind$Term$ori$(_orig$1,_expr$2){var $1789 = ({_:'Kind.Term.ori','orig':_orig$1,'expr':_expr$2});return $1789;};
  const Kind$Term$ori = x0=>x1=>Kind$Term$ori$(x0,x1);
  function Kind$Parser$block$(_name$1,_parse$2,_pst$3){var self = _pst$3;switch(self._){case 'Parser.State.new':var _reply$9 = Kind$Parser$spaces(_pst$3);var self = _reply$9;switch(self._){case 'Parser.Reply.error':var $1792=self.err;var $1793 = Parser$Reply$error$($1792);var $1791 = $1793;break;case 'Parser.Reply.value':var $1794=self.pst;var _pst$12 = $1794;var self = _pst$12;switch(self._){case 'Parser.State.new':var $1796=self.err;var $1797=self.nam;var $1798=self.ini;var $1799=self.idx;var $1800=self.str;var _reply$18 = _parse$2(Parser$State$new$($1796,_name$1,$1799,$1799,$1800));var self = _reply$18;switch(self._){case 'Parser.Reply.error':var $1802=self.err;var $1803 = Parser$Reply$error$($1802);var $1801 = $1803;break;case 'Parser.Reply.value':var $1804=self.pst;var $1805=self.val;var self = $1804;switch(self._){case 'Parser.State.new':var $1807=self.err;var $1808=self.idx;var $1809=self.str;var _new_pst$26 = Parser$State$new$($1807,$1797,$1798,$1808,$1809);var $1810 = Parser$Reply$value$(_new_pst$26,Kind$Term$ori$(Pair$new$($1799,$1808),$1805));var $1806 = $1810;break;};var $1801 = $1806;break;};var $1795 = $1801;break;};var $1791 = $1795;break;};var $1790 = $1791;break;};return $1790;};
  const Kind$Parser$block = x0=>x1=>x2=>Kind$Parser$block$(x0,x1,x2);
  function Parser$block$(_name$2,_parse$3,_pst$4){var self = _pst$4;switch(self._){case 'Parser.State.new':var $1812=self.err;var $1813=self.nam;var $1814=self.ini;var $1815=self.idx;var $1816=self.str;var _reply$10 = _parse$3(Parser$State$new$($1812,_name$2,$1815,$1815,$1816));var self = _reply$10;switch(self._){case 'Parser.Reply.value':var $1818=self.pst;var $1819=self.val;var self = $1818;switch(self._){case 'Parser.State.new':var $1821=self.err;var $1822=self.idx;var $1823=self.str;var _new_pst$18 = Parser$State$new$($1821,$1813,$1814,$1822,$1823);var $1824 = Parser$Reply$value$(_new_pst$18,$1819);var $1820 = $1824;break;};var $1817 = $1820;break;case 'Parser.Reply.error':var $1825 = _reply$10;var $1817 = $1825;break;};var $1811 = $1817;break;};return $1811;};
  const Parser$block = x0=>x1=>x2=>Parser$block$(x0,x1,x2);
  function Either$(_A$1,_B$2){var $1826 = null;return $1826;};
  const Either = x0=>x1=>Either$(x0,x1);
  function Char$is_upper$(_char$1){var self = ((_char$1>=65)&&(_char$1<=90));if (self) {var $1828 = Bool$true;var $1827 = $1828;} else {var $1829 = Bool$false;var $1827 = $1829;};return $1827;};
  const Char$is_upper = x0=>Char$is_upper$(x0);
  function Char$to_lower$(_char$1){var self = ((_char$1>=65)&&(_char$1<=90));if (self) {var $1831 = ((_char$1+32)&0xFFFF);var $1830 = $1831;} else {var $1832 = _char$1;var $1830 = $1832;};return $1830;};
  const Char$to_lower = x0=>Char$to_lower$(x0);
  function Kind$Parser$dom$prop$camel_to_kebab$go$(_str$1,_result$2){var Kind$Parser$dom$prop$camel_to_kebab$go$=(_str$1,_result$2)=>({ctr:'TCO',arg:[_str$1,_result$2]});var Kind$Parser$dom$prop$camel_to_kebab$go=_str$1=>_result$2=>Kind$Parser$dom$prop$camel_to_kebab$go$(_str$1,_result$2);var arg=[_str$1,_result$2];while(true){let [_str$1,_result$2]=arg;var R=(()=>{var self = _str$1;if (self.length===0) {var $1833 = _result$2;return $1833;} else {var $1834=self.charCodeAt(0);var $1835=self.slice(1);var self = Char$is_upper$($1834);if (self) {var $1837 = Kind$Parser$dom$prop$camel_to_kebab$go$($1835,String$cons$(Char$to_lower$($1834),String$cons$(45,_result$2)));var $1836 = $1837;} else {var $1838 = Kind$Parser$dom$prop$camel_to_kebab$go$($1835,String$cons$($1834,_result$2));var $1836 = $1838;};return $1836;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Parser$dom$prop$camel_to_kebab$go = x0=>x1=>Kind$Parser$dom$prop$camel_to_kebab$go$(x0,x1);
  function Kind$Parser$dom$prop$camel_to_kebab$(_str$1){var $1839 = String$reverse$(Kind$Parser$dom$prop$camel_to_kebab$go$(_str$1,""));return $1839;};
  const Kind$Parser$dom$prop$camel_to_kebab = x0=>Kind$Parser$dom$prop$camel_to_kebab$(x0);
  function Kind$Parser$dom$prop$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $1841=self.err;var _reply$7 = Kind$Parser$name1$(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $1843=self.err;var self = $1841;switch(self._){case 'Maybe.some':var $1845=self.value;var $1846 = Parser$Reply$error$(Parser$Error$combine$($1845,$1843));var $1844 = $1846;break;case 'Maybe.none':var $1847 = Parser$Reply$error$($1843);var $1844 = $1847;break;};var $1842 = $1844;break;case 'Parser.Reply.value':var $1848=self.pst;var $1849=self.val;var self = $1848;switch(self._){case 'Parser.State.new':var $1851=self.err;var $1852=self.nam;var $1853=self.ini;var $1854=self.idx;var $1855=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($1841,$1851),$1852,$1853,$1854,$1855);var _prop$16 = Kind$Parser$dom$prop$camel_to_kebab$($1849);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $1857=self.err;var _reply$22 = Kind$Parser$text$("=",_reply$pst$15);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $1859=self.err;var self = $1857;switch(self._){case 'Maybe.some':var $1861=self.value;var $1862 = Parser$Reply$error$(Parser$Error$combine$($1861,$1859));var $1860 = $1862;break;case 'Maybe.none':var $1863 = Parser$Reply$error$($1859);var $1860 = $1863;break;};var $1858 = $1860;break;case 'Parser.Reply.value':var $1864=self.pst;var self = $1864;switch(self._){case 'Parser.State.new':var $1866=self.err;var $1867=self.nam;var $1868=self.ini;var $1869=self.idx;var $1870=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($1857,$1866),$1867,$1868,$1869,$1870);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $1872=self.err;var _reply$36 = Kind$Parser$term(_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $1874=self.err;var self = $1872;switch(self._){case 'Maybe.some':var $1876=self.value;var $1877 = Parser$Reply$error$(Parser$Error$combine$($1876,$1874));var $1875 = $1877;break;case 'Maybe.none':var $1878 = Parser$Reply$error$($1874);var $1875 = $1878;break;};var $1873 = $1875;break;case 'Parser.Reply.value':var $1879=self.pst;var $1880=self.val;var self = $1879;switch(self._){case 'Parser.State.new':var $1882=self.err;var $1883=self.nam;var $1884=self.ini;var $1885=self.idx;var $1886=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($1872,$1882),$1883,$1884,$1885,$1886);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $1888=self.err;var _reply$50 = Kind$Parser$spaces(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $1890=self.err;var self = $1888;switch(self._){case 'Maybe.some':var $1892=self.value;var $1893 = Parser$Reply$error$(Parser$Error$combine$($1892,$1890));var $1891 = $1893;break;case 'Maybe.none':var $1894 = Parser$Reply$error$($1890);var $1891 = $1894;break;};var $1889 = $1891;break;case 'Parser.Reply.value':var $1895=self.pst;var self = $1895;switch(self._){case 'Parser.State.new':var $1897=self.err;var $1898=self.nam;var $1899=self.ini;var $1900=self.idx;var $1901=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($1888,$1897),$1898,$1899,$1900,$1901);var $1902 = Parser$Reply$value$(_reply$pst$58,Pair$new$(_prop$16,$1880));var $1896 = $1902;break;};var $1889 = $1896;break;};var $1887 = $1889;break;};var $1881 = $1887;break;};var $1873 = $1881;break;};var $1871 = $1873;break;};var $1865 = $1871;break;};var $1858 = $1865;break;};var $1856 = $1858;break;};var $1850 = $1856;break;};var $1842 = $1850;break;};var $1840 = $1842;break;};return $1840;};
  const Kind$Parser$dom$prop = x0=>Kind$Parser$dom$prop$(x0);
  function Kind$Term$hol$(_path$1){var $1903 = ({_:'Kind.Term.hol','path':_path$1});return $1903;};
  const Kind$Term$hol = x0=>Kind$Term$hol$(x0);
  function Kind$Parser$dom$gen_prop$go$(_values$1,_result$2){var Kind$Parser$dom$gen_prop$go$=(_values$1,_result$2)=>({ctr:'TCO',arg:[_values$1,_result$2]});var Kind$Parser$dom$gen_prop$go=_values$1=>_result$2=>Kind$Parser$dom$gen_prop$go$(_values$1,_result$2);var arg=[_values$1,_result$2];while(true){let [_values$1,_result$2]=arg;var R=(()=>{var self = _values$1;switch(self._){case 'List.cons':var $1904=self.head;var $1905=self.tail;var self = $1904;switch(self._){case 'Pair.new':var $1907=self.fst;var $1908=self.snd;var self = ($1907==="style");if (self) {var $1910 = Kind$Parser$dom$gen_prop$go$($1905,Pair$new$((()=>{var self = _result$2;switch(self._){case 'Pair.new':var $1911=self.fst;var $1912 = $1911;return $1912;};})(),$1908));var $1909 = $1910;} else {var _pair$7 = Kind$Term$ref$("Pair.new");var _pair$8 = Kind$Term$app$(_pair$7,Kind$Term$hol$(Bits$e));var _pair$9 = Kind$Term$app$(_pair$8,Kind$Term$hol$(Bits$e));var _pair$10 = Kind$Term$app$(_pair$9,Kind$Term$str$($1907));var _pair$11 = Kind$Term$app$(_pair$10,$1908);var _term$12 = Kind$Term$ref$("List.cons");var _term$13 = Kind$Term$app$(_term$12,Kind$Term$hol$(Bits$e));var _term$14 = Kind$Term$app$(_term$13,_pair$11);var _term$15 = Kind$Term$app$(_term$14,(()=>{var self = _result$2;switch(self._){case 'Pair.new':var $1914=self.fst;var $1915 = $1914;return $1915;};})());var $1913 = Kind$Parser$dom$gen_prop$go$($1905,Pair$new$(_term$15,(()=>{var self = _result$2;switch(self._){case 'Pair.new':var $1916=self.snd;var $1917 = $1916;return $1917;};})()));var $1909 = $1913;};var $1906 = $1909;break;};return $1906;case 'List.nil':var $1918 = _result$2;return $1918;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Parser$dom$gen_prop$go = x0=>x1=>Kind$Parser$dom$gen_prop$go$(x0,x1);
  function Kind$Parser$dom$gen_prop$(_values$1){var _empty_list$2 = Kind$Term$app$(Kind$Term$ref$("List.nil"),Kind$Term$hol$(Bits$e));var _empty_map$3 = Kind$Term$app$(Kind$Term$ref$("Map.new"),Kind$Term$hol$(Bits$e));var self = Kind$Parser$dom$gen_prop$go$(_values$1,Pair$new$(_empty_list$2,_empty_map$3));switch(self._){case 'Pair.new':var $1920=self.fst;var $1921=self.snd;var _term_prop$6 = Kind$Term$ref$("Map.from_list");var _term_prop$7 = Kind$Term$app$(_term_prop$6,Kind$Term$hol$(Bits$e));var _term_prop$8 = Kind$Term$app$(_term_prop$7,$1920);var $1922 = Pair$new$(_term_prop$8,$1921);var $1919 = $1922;break;};return $1919;};
  const Kind$Parser$dom$gen_prop = x0=>Kind$Parser$dom$gen_prop$(x0);
  const empty_list = Kind$Term$app$(Kind$Term$ref$("List.nil"),Kind$Term$hol$(Bits$e));
  const list_cons = Kind$Term$app$(Kind$Term$ref$("List.cons"),Kind$Term$hol$(Bits$e));
  const Kind$Parser$dom$for = Kind$Parser$block("for_dom")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $1924=self.err;var _reply$7 = Kind$Parser$text$("for ",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $1926=self.err;var self = $1924;switch(self._){case 'Maybe.some':var $1928=self.value;var $1929 = Parser$Reply$error$(Parser$Error$combine$($1928,$1926));var $1927 = $1929;break;case 'Maybe.none':var $1930 = Parser$Reply$error$($1926);var $1927 = $1930;break;};var $1925 = $1927;break;case 'Parser.Reply.value':var $1931=self.pst;var self = $1931;switch(self._){case 'Parser.State.new':var $1933=self.err;var $1934=self.nam;var $1935=self.ini;var $1936=self.idx;var $1937=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($1924,$1933),$1934,$1935,$1936,$1937);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $1939=self.err;var _reply$21 = Kind$Parser$name1$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $1941=self.err;var self = $1939;switch(self._){case 'Maybe.some':var $1943=self.value;var $1944 = Parser$Reply$error$(Parser$Error$combine$($1943,$1941));var $1942 = $1944;break;case 'Maybe.none':var $1945 = Parser$Reply$error$($1941);var $1942 = $1945;break;};var $1940 = $1942;break;case 'Parser.Reply.value':var $1946=self.pst;var $1947=self.val;var self = $1946;switch(self._){case 'Parser.State.new':var $1949=self.err;var $1950=self.nam;var $1951=self.ini;var $1952=self.idx;var $1953=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($1939,$1949),$1950,$1951,$1952,$1953);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $1955=self.err;var _reply$35 = Kind$Parser$text$("in",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $1957=self.err;var self = $1955;switch(self._){case 'Maybe.some':var $1959=self.value;var $1960 = Parser$Reply$error$(Parser$Error$combine$($1959,$1957));var $1958 = $1960;break;case 'Maybe.none':var $1961 = Parser$Reply$error$($1957);var $1958 = $1961;break;};var $1956 = $1958;break;case 'Parser.Reply.value':var $1962=self.pst;var self = $1962;switch(self._){case 'Parser.State.new':var $1964=self.err;var $1965=self.nam;var $1966=self.ini;var $1967=self.idx;var $1968=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($1955,$1964),$1965,$1966,$1967,$1968);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $1970=self.err;var _reply$49 = Kind$Parser$term(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $1972=self.err;var self = $1970;switch(self._){case 'Maybe.some':var $1974=self.value;var $1975 = Parser$Reply$error$(Parser$Error$combine$($1974,$1972));var $1973 = $1975;break;case 'Maybe.none':var $1976 = Parser$Reply$error$($1972);var $1973 = $1976;break;};var $1971 = $1973;break;case 'Parser.Reply.value':var $1977=self.pst;var $1978=self.val;var self = $1977;switch(self._){case 'Parser.State.new':var $1980=self.err;var $1981=self.nam;var $1982=self.ini;var $1983=self.idx;var $1984=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($1970,$1980),$1981,$1982,$1983,$1984);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $1986=self.err;var _reply$63 = Kind$Parser$text$(":",_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $1988=self.err;var self = $1986;switch(self._){case 'Maybe.some':var $1990=self.value;var $1991 = Parser$Reply$error$(Parser$Error$combine$($1990,$1988));var $1989 = $1991;break;case 'Maybe.none':var $1992 = Parser$Reply$error$($1988);var $1989 = $1992;break;};var $1987 = $1989;break;case 'Parser.Reply.value':var $1993=self.pst;var self = $1993;switch(self._){case 'Parser.State.new':var $1995=self.err;var $1996=self.nam;var $1997=self.ini;var $1998=self.idx;var $1999=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($1986,$1995),$1996,$1997,$1998,$1999);var self = _reply$pst$71;switch(self._){case 'Parser.State.new':var $2001=self.err;var _reply$77 = Kind$Parser$term(_reply$pst$71);var self = _reply$77;switch(self._){case 'Parser.Reply.error':var $2003=self.err;var self = $2001;switch(self._){case 'Maybe.some':var $2005=self.value;var $2006 = Parser$Reply$error$(Parser$Error$combine$($2005,$2003));var $2004 = $2006;break;case 'Maybe.none':var $2007 = Parser$Reply$error$($2003);var $2004 = $2007;break;};var $2002 = $2004;break;case 'Parser.Reply.value':var $2008=self.pst;var $2009=self.val;var self = $2008;switch(self._){case 'Parser.State.new':var $2011=self.err;var $2012=self.nam;var $2013=self.ini;var $2014=self.idx;var $2015=self.str;var _reply$pst$85 = Parser$State$new$(Parser$Error$maybe_combine$($2001,$2011),$2012,$2013,$2014,$2015);var _term$86 = Kind$Term$ref$("List.fold");var _term$87 = Kind$Term$app$(_term$86,Kind$Term$hol$(Bits$e));var _term$88 = Kind$Term$app$(_term$87,$1978);var _term$89 = Kind$Term$app$(_term$88,Kind$Term$hol$(Bits$e));var _term$90 = Kind$Term$app$(_term$89,empty_list);var _lamb$91 = Kind$Term$lam$($1947,(_i$91=>{var $2017 = Kind$Term$lam$("placeholder",(_b$92=>{var $2018 = Kind$Term$app$(Kind$Term$app$(list_cons,$2009),_b$92);return $2018;}));return $2017;}));var _term$92 = Kind$Term$app$(_term$90,_lamb$91);var $2016 = Parser$Reply$value$(_reply$pst$85,_term$92);var $2010 = $2016;break;};var $2002 = $2010;break;};var $2000 = $2002;break;};var $1994 = $2000;break;};var $1987 = $1994;break;};var $1985 = $1987;break;};var $1979 = $1985;break;};var $1971 = $1979;break;};var $1969 = $1971;break;};var $1963 = $1969;break;};var $1956 = $1963;break;};var $1954 = $1956;break;};var $1948 = $1954;break;};var $1940 = $1948;break;};var $1938 = $1940;break;};var $1932 = $1938;break;};var $1925 = $1932;break;};var $1923 = $1925;break;};return $1923;}));
  const Kind$Parser$dom$formap = Kind$Parser$block("formap_dom")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $2020=self.err;var _reply$7 = Kind$Parser$text$("for ",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2022=self.err;var self = $2020;switch(self._){case 'Maybe.some':var $2024=self.value;var $2025 = Parser$Reply$error$(Parser$Error$combine$($2024,$2022));var $2023 = $2025;break;case 'Maybe.none':var $2026 = Parser$Reply$error$($2022);var $2023 = $2026;break;};var $2021 = $2023;break;case 'Parser.Reply.value':var $2027=self.pst;var self = $2027;switch(self._){case 'Parser.State.new':var $2029=self.err;var $2030=self.nam;var $2031=self.ini;var $2032=self.idx;var $2033=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2020,$2029),$2030,$2031,$2032,$2033);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $2035=self.err;var _reply$21 = Kind$Parser$name1$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $2037=self.err;var self = $2035;switch(self._){case 'Maybe.some':var $2039=self.value;var $2040 = Parser$Reply$error$(Parser$Error$combine$($2039,$2037));var $2038 = $2040;break;case 'Maybe.none':var $2041 = Parser$Reply$error$($2037);var $2038 = $2041;break;};var $2036 = $2038;break;case 'Parser.Reply.value':var $2042=self.pst;var $2043=self.val;var self = $2042;switch(self._){case 'Parser.State.new':var $2045=self.err;var $2046=self.nam;var $2047=self.ini;var $2048=self.idx;var $2049=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($2035,$2045),$2046,$2047,$2048,$2049);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $2051=self.err;var _reply$35 = Kind$Parser$text$(":",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $2053=self.err;var self = $2051;switch(self._){case 'Maybe.some':var $2055=self.value;var $2056 = Parser$Reply$error$(Parser$Error$combine$($2055,$2053));var $2054 = $2056;break;case 'Maybe.none':var $2057 = Parser$Reply$error$($2053);var $2054 = $2057;break;};var $2052 = $2054;break;case 'Parser.Reply.value':var $2058=self.pst;var self = $2058;switch(self._){case 'Parser.State.new':var $2060=self.err;var $2061=self.nam;var $2062=self.ini;var $2063=self.idx;var $2064=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($2051,$2060),$2061,$2062,$2063,$2064);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $2066=self.err;var _reply$49 = Kind$Parser$name1$(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $2068=self.err;var self = $2066;switch(self._){case 'Maybe.some':var $2070=self.value;var $2071 = Parser$Reply$error$(Parser$Error$combine$($2070,$2068));var $2069 = $2071;break;case 'Maybe.none':var $2072 = Parser$Reply$error$($2068);var $2069 = $2072;break;};var $2067 = $2069;break;case 'Parser.Reply.value':var $2073=self.pst;var $2074=self.val;var self = $2073;switch(self._){case 'Parser.State.new':var $2076=self.err;var $2077=self.nam;var $2078=self.ini;var $2079=self.idx;var $2080=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($2066,$2076),$2077,$2078,$2079,$2080);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $2082=self.err;var _reply$63 = Kind$Parser$text$("in",_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $2084=self.err;var self = $2082;switch(self._){case 'Maybe.some':var $2086=self.value;var $2087 = Parser$Reply$error$(Parser$Error$combine$($2086,$2084));var $2085 = $2087;break;case 'Maybe.none':var $2088 = Parser$Reply$error$($2084);var $2085 = $2088;break;};var $2083 = $2085;break;case 'Parser.Reply.value':var $2089=self.pst;var self = $2089;switch(self._){case 'Parser.State.new':var $2091=self.err;var $2092=self.nam;var $2093=self.ini;var $2094=self.idx;var $2095=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($2082,$2091),$2092,$2093,$2094,$2095);var self = _reply$pst$71;switch(self._){case 'Parser.State.new':var $2097=self.err;var _reply$77 = Kind$Parser$term(_reply$pst$71);var self = _reply$77;switch(self._){case 'Parser.Reply.error':var $2099=self.err;var self = $2097;switch(self._){case 'Maybe.some':var $2101=self.value;var $2102 = Parser$Reply$error$(Parser$Error$combine$($2101,$2099));var $2100 = $2102;break;case 'Maybe.none':var $2103 = Parser$Reply$error$($2099);var $2100 = $2103;break;};var $2098 = $2100;break;case 'Parser.Reply.value':var $2104=self.pst;var $2105=self.val;var self = $2104;switch(self._){case 'Parser.State.new':var $2107=self.err;var $2108=self.nam;var $2109=self.ini;var $2110=self.idx;var $2111=self.str;var _reply$pst$85 = Parser$State$new$(Parser$Error$maybe_combine$($2097,$2107),$2108,$2109,$2110,$2111);var self = _reply$pst$85;switch(self._){case 'Parser.State.new':var $2113=self.err;var _reply$91 = Kind$Parser$text$(":",_reply$pst$85);var self = _reply$91;switch(self._){case 'Parser.Reply.error':var $2115=self.err;var self = $2113;switch(self._){case 'Maybe.some':var $2117=self.value;var $2118 = Parser$Reply$error$(Parser$Error$combine$($2117,$2115));var $2116 = $2118;break;case 'Maybe.none':var $2119 = Parser$Reply$error$($2115);var $2116 = $2119;break;};var $2114 = $2116;break;case 'Parser.Reply.value':var $2120=self.pst;var self = $2120;switch(self._){case 'Parser.State.new':var $2122=self.err;var $2123=self.nam;var $2124=self.ini;var $2125=self.idx;var $2126=self.str;var _reply$pst$99 = Parser$State$new$(Parser$Error$maybe_combine$($2113,$2122),$2123,$2124,$2125,$2126);var self = _reply$pst$99;switch(self._){case 'Parser.State.new':var $2128=self.err;var _reply$105 = Kind$Parser$term(_reply$pst$99);var self = _reply$105;switch(self._){case 'Parser.Reply.error':var $2130=self.err;var self = $2128;switch(self._){case 'Maybe.some':var $2132=self.value;var $2133 = Parser$Reply$error$(Parser$Error$combine$($2132,$2130));var $2131 = $2133;break;case 'Maybe.none':var $2134 = Parser$Reply$error$($2130);var $2131 = $2134;break;};var $2129 = $2131;break;case 'Parser.Reply.value':var $2135=self.pst;var $2136=self.val;var self = $2135;switch(self._){case 'Parser.State.new':var $2138=self.err;var $2139=self.nam;var $2140=self.ini;var $2141=self.idx;var $2142=self.str;var _reply$pst$113 = Parser$State$new$(Parser$Error$maybe_combine$($2128,$2138),$2139,$2140,$2141,$2142);var _term$114 = Kind$Term$ref$("BBT.for");var _term$115 = Kind$Term$app$(_term$114,Kind$Term$hol$(Bits$e));var _term$116 = Kind$Term$app$(_term$115,Kind$Term$hol$(Bits$e));var _term$117 = Kind$Term$app$(_term$116,$2105);var _term$118 = Kind$Term$app$(_term$117,Kind$Term$hol$(Bits$e));var _term$119 = Kind$Term$app$(_term$118,empty_list);var _lamb$120 = Kind$Term$lam$($2043,(_k$120=>{var $2144 = Kind$Term$lam$($2074,(_v$121=>{var $2145 = Kind$Term$lam$("placeholder",(_z$122=>{var $2146 = Kind$Term$app$(Kind$Term$app$(list_cons,$2136),_z$122);return $2146;}));return $2145;}));return $2144;}));var _term$121 = Kind$Term$app$(_term$119,_lamb$120);var $2143 = Parser$Reply$value$(_reply$pst$113,_term$121);var $2137 = $2143;break;};var $2129 = $2137;break;};var $2127 = $2129;break;};var $2121 = $2127;break;};var $2114 = $2121;break;};var $2112 = $2114;break;};var $2106 = $2112;break;};var $2098 = $2106;break;};var $2096 = $2098;break;};var $2090 = $2096;break;};var $2083 = $2090;break;};var $2081 = $2083;break;};var $2075 = $2081;break;};var $2067 = $2075;break;};var $2065 = $2067;break;};var $2059 = $2065;break;};var $2052 = $2059;break;};var $2050 = $2052;break;};var $2044 = $2050;break;};var $2036 = $2044;break;};var $2034 = $2036;break;};var $2028 = $2034;break;};var $2021 = $2028;break;};var $2019 = $2021;break;};return $2019;}));
  const Kind$Parser$dom$dynamic = Kind$Parser$block("DOM_dynamic")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $2148=self.err;var _reply$7 = Kind$Parser$text$("{",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2150=self.err;var self = $2148;switch(self._){case 'Maybe.some':var $2152=self.value;var $2153 = Parser$Reply$error$(Parser$Error$combine$($2152,$2150));var $2151 = $2153;break;case 'Maybe.none':var $2154 = Parser$Reply$error$($2150);var $2151 = $2154;break;};var $2149 = $2151;break;case 'Parser.Reply.value':var $2155=self.pst;var self = $2155;switch(self._){case 'Parser.State.new':var $2157=self.err;var $2158=self.nam;var $2159=self.ini;var $2160=self.idx;var $2161=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2148,$2157),$2158,$2159,$2160,$2161);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $2163=self.err;var _reply$21 = Parser$choice$(List$cons$(Kind$Parser$term,List$nil),_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $2165=self.err;var self = $2163;switch(self._){case 'Maybe.some':var $2167=self.value;var $2168 = Parser$Reply$error$(Parser$Error$combine$($2167,$2165));var $2166 = $2168;break;case 'Maybe.none':var $2169 = Parser$Reply$error$($2165);var $2166 = $2169;break;};var $2164 = $2166;break;case 'Parser.Reply.value':var $2170=self.pst;var $2171=self.val;var self = $2170;switch(self._){case 'Parser.State.new':var $2173=self.err;var $2174=self.nam;var $2175=self.ini;var $2176=self.idx;var $2177=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($2163,$2173),$2174,$2175,$2176,$2177);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $2179=self.err;var _reply$35 = Kind$Parser$text$("}",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $2181=self.err;var self = $2179;switch(self._){case 'Maybe.some':var $2183=self.value;var $2184 = Parser$Reply$error$(Parser$Error$combine$($2183,$2181));var $2182 = $2184;break;case 'Maybe.none':var $2185 = Parser$Reply$error$($2181);var $2182 = $2185;break;};var $2180 = $2182;break;case 'Parser.Reply.value':var $2186=self.pst;var self = $2186;switch(self._){case 'Parser.State.new':var $2188=self.err;var $2189=self.nam;var $2190=self.ini;var $2191=self.idx;var $2192=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($2179,$2188),$2189,$2190,$2191,$2192);var _term$44 = Kind$Term$ref$("List.cons");var _term$45 = Kind$Term$app$(_term$44,Kind$Term$hol$(Bits$e));var _term$46 = Kind$Term$app$(_term$45,$2171);var _term$47 = Kind$Term$app$(_term$46,empty_list);var $2193 = Parser$Reply$value$(_reply$pst$43,_term$47);var $2187 = $2193;break;};var $2180 = $2187;break;};var $2178 = $2180;break;};var $2172 = $2178;break;};var $2164 = $2172;break;};var $2162 = $2164;break;};var $2156 = $2162;break;};var $2149 = $2156;break;};var $2147 = $2149;break;};return $2147;}));
  const Kind$Parser$dom$text = Kind$Parser$block("DOM_text")((()=>{var _term$1 = Kind$Term$ref$("DOM.text");var $2194 = (_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $2196=self.err;var _reply$8 = Kind$Parser$term(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $2198=self.err;var self = $2196;switch(self._){case 'Maybe.some':var $2200=self.value;var $2201 = Parser$Reply$error$(Parser$Error$combine$($2200,$2198));var $2199 = $2201;break;case 'Maybe.none':var $2202 = Parser$Reply$error$($2198);var $2199 = $2202;break;};var $2197 = $2199;break;case 'Parser.Reply.value':var $2203=self.pst;var $2204=self.val;var self = $2203;switch(self._){case 'Parser.State.new':var $2206=self.err;var $2207=self.nam;var $2208=self.ini;var $2209=self.idx;var $2210=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($2196,$2206),$2207,$2208,$2209,$2210);var _item$17 = Kind$Term$app$(_term$1,$2204);var _term$18 = Kind$Term$ref$("List.cons");var _term$19 = Kind$Term$app$(_term$18,Kind$Term$hol$(Bits$e));var _term$20 = Kind$Term$app$(_term$19,_item$17);var _term$21 = Kind$Term$app$(_term$20,empty_list);var $2211 = Parser$Reply$value$(_reply$pst$16,_term$21);var $2205 = $2211;break;};var $2197 = $2205;break;};var $2195 = $2197;break;};return $2195;});return $2194;})());
  function Either$right$(_value$3){var $2212 = ({_:'Either.right','value':_value$3});return $2212;};
  const Either$right = x0=>Either$right$(x0);
  const Kind$Parser$dom$leaf = Parser$block("DOM_leaf")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $2214=self.err;var _reply$7 = Parser$choice$(List$cons$(Kind$Parser$dom$for,List$cons$(Kind$Parser$dom$formap,List$cons$(Kind$Parser$dom$dynamic,List$cons$(Kind$Parser$dom$text,List$nil)))),_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2216=self.err;var self = $2214;switch(self._){case 'Maybe.some':var $2218=self.value;var $2219 = Parser$Reply$error$(Parser$Error$combine$($2218,$2216));var $2217 = $2219;break;case 'Maybe.none':var $2220 = Parser$Reply$error$($2216);var $2217 = $2220;break;};var $2215 = $2217;break;case 'Parser.Reply.value':var $2221=self.pst;var $2222=self.val;var self = $2221;switch(self._){case 'Parser.State.new':var $2224=self.err;var $2225=self.nam;var $2226=self.ini;var $2227=self.idx;var $2228=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2214,$2224),$2225,$2226,$2227,$2228);var $2229 = Parser$Reply$value$(_reply$pst$15,Either$right$($2222));var $2223 = $2229;break;};var $2215 = $2223;break;};var $2213 = $2215;break;};return $2213;}));
  function Kind$Parser$dom$transform_children$(_a$1){var self = _a$1;switch(self._){case 'List.cons':var $2231=self.head;var $2232=self.tail;var self = $2231;switch(self._){case 'Either.left':var $2234=self.value;var _term$5 = Kind$Term$app$(Kind$Term$ref$("List.cons"),Kind$Term$hol$(Bits$e));var _term$6 = Kind$Term$app$(_term$5,$2234);var _term$7 = Kind$Term$app$(_term$6,Kind$Parser$dom$transform_children$($2232));var $2235 = _term$7;var $2233 = $2235;break;case 'Either.right':var $2236=self.value;var _term$5 = Kind$Term$app$(Kind$Term$ref$("List.concat"),Kind$Term$hol$(Bits$e));var _term$6 = Kind$Term$app$(_term$5,$2236);var _term$7 = Kind$Term$app$(_term$6,Kind$Parser$dom$transform_children$($2232));var $2237 = _term$7;var $2233 = $2237;break;};var $2230 = $2233;break;case 'List.nil':var $2238 = Kind$Term$app$(Kind$Term$ref$("List.nil"),Kind$Term$hol$(Bits$e));var $2230 = $2238;break;};return $2230;};
  const Kind$Parser$dom$transform_children = x0=>Kind$Parser$dom$transform_children$(x0);
  function Either$left$(_value$3){var $2239 = ({_:'Either.left','value':_value$3});return $2239;};
  const Either$left = x0=>Either$left$(x0);
  const Kind$Parser$dom$node = Parser$block("DOM.node")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $2241=self.err;var _reply$7 = Kind$Parser$text$("<",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2243=self.err;var self = $2241;switch(self._){case 'Maybe.some':var $2245=self.value;var $2246 = Parser$Reply$error$(Parser$Error$combine$($2245,$2243));var $2244 = $2246;break;case 'Maybe.none':var $2247 = Parser$Reply$error$($2243);var $2244 = $2247;break;};var $2242 = $2244;break;case 'Parser.Reply.value':var $2248=self.pst;var self = $2248;switch(self._){case 'Parser.State.new':var $2250=self.err;var $2251=self.nam;var $2252=self.ini;var $2253=self.idx;var $2254=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2241,$2250),$2251,$2252,$2253,$2254);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $2256=self.err;var _reply$21 = Kind$Parser$name1$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $2258=self.err;var self = $2256;switch(self._){case 'Maybe.some':var $2260=self.value;var $2261 = Parser$Reply$error$(Parser$Error$combine$($2260,$2258));var $2259 = $2261;break;case 'Maybe.none':var $2262 = Parser$Reply$error$($2258);var $2259 = $2262;break;};var $2257 = $2259;break;case 'Parser.Reply.value':var $2263=self.pst;var $2264=self.val;var self = $2263;switch(self._){case 'Parser.State.new':var $2266=self.err;var $2267=self.nam;var $2268=self.ini;var $2269=self.idx;var $2270=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($2256,$2266),$2267,$2268,$2269,$2270);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $2272=self.err;var _reply$35 = Kind$Parser$spaces(_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $2274=self.err;var self = $2272;switch(self._){case 'Maybe.some':var $2276=self.value;var $2277 = Parser$Reply$error$(Parser$Error$combine$($2276,$2274));var $2275 = $2277;break;case 'Maybe.none':var $2278 = Parser$Reply$error$($2274);var $2275 = $2278;break;};var $2273 = $2275;break;case 'Parser.Reply.value':var $2279=self.pst;var self = $2279;switch(self._){case 'Parser.State.new':var $2281=self.err;var $2282=self.nam;var $2283=self.ini;var $2284=self.idx;var $2285=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($2272,$2281),$2282,$2283,$2284,$2285);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $2287=self.err;var _reply$49 = Parser$until$(Kind$Parser$text(">"),Kind$Parser$dom$prop)(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $2289=self.err;var self = $2287;switch(self._){case 'Maybe.some':var $2291=self.value;var $2292 = Parser$Reply$error$(Parser$Error$combine$($2291,$2289));var $2290 = $2292;break;case 'Maybe.none':var $2293 = Parser$Reply$error$($2289);var $2290 = $2293;break;};var $2288 = $2290;break;case 'Parser.Reply.value':var $2294=self.pst;var $2295=self.val;var self = $2294;switch(self._){case 'Parser.State.new':var $2297=self.err;var $2298=self.nam;var $2299=self.ini;var $2300=self.idx;var $2301=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($2287,$2297),$2298,$2299,$2300,$2301);var _props$58 = Kind$Parser$dom$gen_prop$($2295);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $2303=self.err;var _reply$64 = Parser$many$(Parser$choice(List$cons$(Kind$Parser$dom$node,List$cons$(Kind$Parser$dom$leaf,List$nil))))(_reply$pst$57);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $2305=self.err;var self = $2303;switch(self._){case 'Maybe.some':var $2307=self.value;var $2308 = Parser$Reply$error$(Parser$Error$combine$($2307,$2305));var $2306 = $2308;break;case 'Maybe.none':var $2309 = Parser$Reply$error$($2305);var $2306 = $2309;break;};var $2304 = $2306;break;case 'Parser.Reply.value':var $2310=self.pst;var $2311=self.val;var self = $2310;switch(self._){case 'Parser.State.new':var $2313=self.err;var $2314=self.nam;var $2315=self.ini;var $2316=self.idx;var $2317=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($2303,$2313),$2314,$2315,$2316,$2317);var _children$73 = Kind$Parser$dom$transform_children$($2311);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $2319=self.err;var _reply$79 = Kind$Parser$text$(("</"+($2264+">")),_reply$pst$72);var self = _reply$79;switch(self._){case 'Parser.Reply.error':var $2321=self.err;var self = $2319;switch(self._){case 'Maybe.some':var $2323=self.value;var $2324 = Parser$Reply$error$(Parser$Error$combine$($2323,$2321));var $2322 = $2324;break;case 'Maybe.none':var $2325 = Parser$Reply$error$($2321);var $2322 = $2325;break;};var $2320 = $2322;break;case 'Parser.Reply.value':var $2326=self.pst;var self = $2326;switch(self._){case 'Parser.State.new':var $2328=self.err;var $2329=self.nam;var $2330=self.ini;var $2331=self.idx;var $2332=self.str;var _reply$pst$87 = Parser$State$new$(Parser$Error$maybe_combine$($2319,$2328),$2329,$2330,$2331,$2332);var _term$88 = Kind$Term$ref$("DOM.node");var _term$89 = Kind$Term$app$(_term$88,Kind$Term$str$($2264));var _term$90 = Kind$Term$app$(_term$89,(()=>{var self = _props$58;switch(self._){case 'Pair.new':var $2334=self.fst;var $2335 = $2334;return $2335;};})());var _term$91 = Kind$Term$app$(_term$90,(()=>{var self = _props$58;switch(self._){case 'Pair.new':var $2336=self.snd;var $2337 = $2336;return $2337;};})());var _term$92 = Kind$Term$app$(_term$91,_children$73);var $2333 = Parser$Reply$value$(_reply$pst$87,Either$left$(_term$92));var $2327 = $2333;break;};var $2320 = $2327;break;};var $2318 = $2320;break;};var $2312 = $2318;break;};var $2304 = $2312;break;};var $2302 = $2304;break;};var $2296 = $2302;break;};var $2288 = $2296;break;};var $2286 = $2288;break;};var $2280 = $2286;break;};var $2273 = $2280;break;};var $2271 = $2273;break;};var $2265 = $2271;break;};var $2257 = $2265;break;};var $2255 = $2257;break;};var $2249 = $2255;break;};var $2242 = $2249;break;};var $2240 = $2242;break;};return $2240;}));
  const empty_map = Kind$Term$app$(Kind$Term$ref$("Map.new"),Kind$Term$hol$(Bits$e));
  function Kind$Parser$dom$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $2339=self.err;var _reply$7 = Kind$Parser$dom$node(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2341=self.err;var self = $2339;switch(self._){case 'Maybe.some':var $2343=self.value;var $2344 = Parser$Reply$error$(Parser$Error$combine$($2343,$2341));var $2342 = $2344;break;case 'Maybe.none':var $2345 = Parser$Reply$error$($2341);var $2342 = $2345;break;};var $2340 = $2342;break;case 'Parser.Reply.value':var $2346=self.pst;var $2347=self.val;var self = $2346;switch(self._){case 'Parser.State.new':var $2349=self.err;var $2350=self.nam;var $2351=self.ini;var $2352=self.idx;var $2353=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2339,$2349),$2350,$2351,$2352,$2353);var self = $2347;switch(self._){case 'Either.left':var $2355=self.value;var $2356 = (_pst$17=>{var $2357 = Parser$Reply$value$(_pst$17,$2355);return $2357;});var $2354 = $2356;break;case 'Either.right':var $2358=self.value;var _resu$17 = Kind$Term$ref$("DOM.node");var _resu$18 = Kind$Term$app$(_resu$17,Kind$Term$str$("div"));var _resu$19 = Kind$Term$app$(_resu$18,empty_map);var _resu$20 = Kind$Term$app$(_resu$19,empty_map);var _resu$21 = Kind$Term$app$(_resu$20,$2358);var $2359 = (_pst$22=>{var $2360 = Parser$Reply$value$(_pst$22,_resu$21);return $2360;});var $2354 = $2359;break;};var $2354 = $2354(_reply$pst$15);var $2348 = $2354;break;};var $2340 = $2348;break;};var $2338 = $2340;break;};return $2338;};
  const Kind$Parser$dom = x0=>Kind$Parser$dom$(x0);
  const Kind$Parser$forall = Kind$Parser$block("forall")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $2362=self.err;var _reply$7 = Kind$Parser$name$(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2364=self.err;var self = $2362;switch(self._){case 'Maybe.some':var $2366=self.value;var $2367 = Parser$Reply$error$(Parser$Error$combine$($2366,$2364));var $2365 = $2367;break;case 'Maybe.none':var $2368 = Parser$Reply$error$($2364);var $2365 = $2368;break;};var $2363 = $2365;break;case 'Parser.Reply.value':var $2369=self.pst;var $2370=self.val;var self = $2369;switch(self._){case 'Parser.State.new':var $2372=self.err;var $2373=self.nam;var $2374=self.ini;var $2375=self.idx;var $2376=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2362,$2372),$2373,$2374,$2375,$2376);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $2378=self.err;var _reply$21 = Kind$Parser$binder$(":",Bool$true,_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $2380=self.err;var self = $2378;switch(self._){case 'Maybe.some':var $2382=self.value;var $2383 = Parser$Reply$error$(Parser$Error$combine$($2382,$2380));var $2381 = $2383;break;case 'Maybe.none':var $2384 = Parser$Reply$error$($2380);var $2381 = $2384;break;};var $2379 = $2381;break;case 'Parser.Reply.value':var $2385=self.pst;var $2386=self.val;var self = $2385;switch(self._){case 'Parser.State.new':var $2388=self.err;var $2389=self.nam;var $2390=self.ini;var $2391=self.idx;var $2392=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($2378,$2388),$2389,$2390,$2391,$2392);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $2394=self.err;var _reply$35 = Kind$Parser$text$("->",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $2396=self.err;var self = $2394;switch(self._){case 'Maybe.some':var $2398=self.value;var $2399 = Parser$Reply$error$(Parser$Error$combine$($2398,$2396));var $2397 = $2399;break;case 'Maybe.none':var $2400 = Parser$Reply$error$($2396);var $2397 = $2400;break;};var $2395 = $2397;break;case 'Parser.Reply.value':var $2401=self.pst;var self = $2401;switch(self._){case 'Parser.State.new':var $2403=self.err;var $2404=self.nam;var $2405=self.ini;var $2406=self.idx;var $2407=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($2394,$2403),$2404,$2405,$2406,$2407);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $2409=self.err;var _reply$49 = Kind$Parser$term(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $2411=self.err;var self = $2409;switch(self._){case 'Maybe.some':var $2413=self.value;var $2414 = Parser$Reply$error$(Parser$Error$combine$($2413,$2411));var $2412 = $2414;break;case 'Maybe.none':var $2415 = Parser$Reply$error$($2411);var $2412 = $2415;break;};var $2410 = $2412;break;case 'Parser.Reply.value':var $2416=self.pst;var $2417=self.val;var self = $2416;switch(self._){case 'Parser.State.new':var $2419=self.err;var $2420=self.nam;var $2421=self.ini;var $2422=self.idx;var $2423=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($2409,$2419),$2420,$2421,$2422,$2423);var _term$58 = List$fold$($2386,$2417,(_x$58=>_t$59=>{var self = _x$58;switch(self._){case 'Kind.Binder.new':var $2426=self.eras;var $2427=self.name;var $2428=self.term;var $2429 = Kind$Term$all$($2426,"",$2427,$2428,(_s$63=>_x$64=>{var $2430 = _t$59;return $2430;}));var $2425 = $2429;break;};return $2425;}));var $2424 = Parser$Reply$value$(_reply$pst$57,(()=>{var self = _term$58;switch(self._){case 'Kind.Term.all':var $2431=self.eras;var $2432=self.name;var $2433=self.xtyp;var $2434=self.body;var $2435 = Kind$Term$all$($2431,$2370,$2432,$2433,$2434);return $2435;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $2436 = _term$58;return $2436;};})());var $2418 = $2424;break;};var $2410 = $2418;break;};var $2408 = $2410;break;};var $2402 = $2408;break;};var $2395 = $2402;break;};var $2393 = $2395;break;};var $2387 = $2393;break;};var $2379 = $2387;break;};var $2377 = $2379;break;};var $2371 = $2377;break;};var $2363 = $2371;break;};var $2361 = $2363;break;};return $2361;}));
  function Parser$try$(_parse$2,_pst$3){var self = _parse$2(_pst$3);switch(self._){case 'Parser.Reply.error':var $2438 = Parser$Reply$value$(_pst$3,Bool$false);var $2437 = $2438;break;case 'Parser.Reply.value':var $2439 = Parser$Reply$value$(_pst$3,Bool$true);var $2437 = $2439;break;};return $2437;};
  const Parser$try = x0=>x1=>Parser$try$(x0,x1);
  function Parser$avoiding$(_test$2,_parse$3,_pst$4){var self = _pst$4;switch(self._){case 'Parser.State.new':var $2441=self.err;var _reply$10 = Parser$try$(_test$2,_pst$4);var self = _reply$10;switch(self._){case 'Parser.Reply.error':var $2443=self.err;var self = $2441;switch(self._){case 'Maybe.some':var $2445=self.value;var $2446 = Parser$Reply$error$(Parser$Error$combine$($2445,$2443));var $2444 = $2446;break;case 'Maybe.none':var $2447 = Parser$Reply$error$($2443);var $2444 = $2447;break;};var $2442 = $2444;break;case 'Parser.Reply.value':var $2448=self.pst;var $2449=self.val;var self = $2448;switch(self._){case 'Parser.State.new':var $2451=self.err;var $2452=self.nam;var $2453=self.ini;var $2454=self.idx;var $2455=self.str;var _reply$pst$18 = Parser$State$new$(Parser$Error$maybe_combine$($2441,$2451),$2452,$2453,$2454,$2455);var self = $2449;if (self) {var $2457 = Parser$fail("Avoided.");var $2456 = $2457;} else {var $2458 = _parse$3;var $2456 = $2458;};var $2456 = $2456(_reply$pst$18);var $2450 = $2456;break;};var $2442 = $2450;break;};var $2440 = $2442;break;};return $2440;};
  const Parser$avoiding = x0=>x1=>x2=>Parser$avoiding$(x0,x1,x2);
  function Kind$Parser$lambda$make$(_names$1,_body$2){var self = _names$1;switch(self._){case 'List.cons':var $2460=self.head;var $2461=self.tail;var $2462 = Kind$Term$lam$($2460,(_x$5=>{var $2463 = Kind$Parser$lambda$make$($2461,_body$2);return $2463;}));var $2459 = $2462;break;case 'List.nil':var $2464 = _body$2;var $2459 = $2464;break;};return $2459;};
  const Kind$Parser$lambda$make = x0=>x1=>Kind$Parser$lambda$make$(x0,x1);
  function Kind$Parser$lambda$make$start$(_names$1,_body$2){var self = _names$1;switch(self._){case 'List.nil':var $2466 = Kind$Term$lam$("",(_x$3=>{var $2467 = _body$2;return $2467;}));var $2465 = $2466;break;case 'List.cons':var $2468 = Kind$Parser$lambda$make$(_names$1,_body$2);var $2465 = $2468;break;};return $2465;};
  const Kind$Parser$lambda$make$start = x0=>x1=>Kind$Parser$lambda$make$start$(x0,x1);
  const Kind$Parser$lambda$1 = Kind$Parser$block("lambda")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $2470=self.err;var _reply$7 = Kind$Parser$items$("(",Kind$Parser$name1,")")(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2472=self.err;var self = $2470;switch(self._){case 'Maybe.some':var $2474=self.value;var $2475 = Parser$Reply$error$(Parser$Error$combine$($2474,$2472));var $2473 = $2475;break;case 'Maybe.none':var $2476 = Parser$Reply$error$($2472);var $2473 = $2476;break;};var $2471 = $2473;break;case 'Parser.Reply.value':var $2477=self.pst;var $2478=self.val;var self = $2477;switch(self._){case 'Parser.State.new':var $2480=self.err;var $2481=self.nam;var $2482=self.ini;var $2483=self.idx;var $2484=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2470,$2480),$2481,$2482,$2483,$2484);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $2486=self.err;var _reply$21 = Parser$avoiding$(Kind$Parser$text_now$("("),Kind$Parser$term,_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $2488=self.err;var self = $2486;switch(self._){case 'Maybe.some':var $2490=self.value;var $2491 = Parser$Reply$error$(Parser$Error$combine$($2490,$2488));var $2489 = $2491;break;case 'Maybe.none':var $2492 = Parser$Reply$error$($2488);var $2489 = $2492;break;};var $2487 = $2489;break;case 'Parser.Reply.value':var $2493=self.pst;var $2494=self.val;var self = $2493;switch(self._){case 'Parser.State.new':var $2496=self.err;var $2497=self.nam;var $2498=self.ini;var $2499=self.idx;var $2500=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($2486,$2496),$2497,$2498,$2499,$2500);var $2501 = Parser$Reply$value$(_reply$pst$29,Kind$Parser$lambda$make$start$($2478,$2494));var $2495 = $2501;break;};var $2487 = $2495;break;};var $2485 = $2487;break;};var $2479 = $2485;break;};var $2471 = $2479;break;};var $2469 = $2471;break;};return $2469;}));
  function Kind$Parser$lambda$name_term$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $2503=self.err;var _reply$7 = Kind$Parser$name1$(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2505=self.err;var self = $2503;switch(self._){case 'Maybe.some':var $2507=self.value;var $2508 = Parser$Reply$error$(Parser$Error$combine$($2507,$2505));var $2506 = $2508;break;case 'Maybe.none':var $2509 = Parser$Reply$error$($2505);var $2506 = $2509;break;};var $2504 = $2506;break;case 'Parser.Reply.value':var $2510=self.pst;var $2511=self.val;var self = $2510;switch(self._){case 'Parser.State.new':var $2513=self.err;var $2514=self.nam;var $2515=self.ini;var $2516=self.idx;var $2517=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2503,$2513),$2514,$2515,$2516,$2517);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $2519=self.err;var _reply$21 = Parser$maybe$((_pst$21=>{var self = _pst$21;switch(self._){case 'Parser.State.new':var $2522=self.err;var _reply$27 = Kind$Parser$text$(":",_pst$21);var self = _reply$27;switch(self._){case 'Parser.Reply.error':var $2524=self.err;var self = $2522;switch(self._){case 'Maybe.some':var $2526=self.value;var $2527 = Parser$Reply$error$(Parser$Error$combine$($2526,$2524));var $2525 = $2527;break;case 'Maybe.none':var $2528 = Parser$Reply$error$($2524);var $2525 = $2528;break;};var $2523 = $2525;break;case 'Parser.Reply.value':var $2529=self.pst;var self = $2529;switch(self._){case 'Parser.State.new':var $2531=self.err;var $2532=self.nam;var $2533=self.ini;var $2534=self.idx;var $2535=self.str;var _reply$pst$35 = Parser$State$new$(Parser$Error$maybe_combine$($2522,$2531),$2532,$2533,$2534,$2535);var self = _reply$pst$35;switch(self._){case 'Parser.State.new':var $2537=self.err;var _reply$41 = Kind$Parser$term(_reply$pst$35);var self = _reply$41;switch(self._){case 'Parser.Reply.error':var $2539=self.err;var self = $2537;switch(self._){case 'Maybe.some':var $2541=self.value;var $2542 = Parser$Reply$error$(Parser$Error$combine$($2541,$2539));var $2540 = $2542;break;case 'Maybe.none':var $2543 = Parser$Reply$error$($2539);var $2540 = $2543;break;};var $2538 = $2540;break;case 'Parser.Reply.value':var $2544=self.pst;var $2545=self.val;var self = $2544;switch(self._){case 'Parser.State.new':var $2547=self.err;var $2548=self.nam;var $2549=self.ini;var $2550=self.idx;var $2551=self.str;var _reply$pst$49 = Parser$State$new$(Parser$Error$maybe_combine$($2537,$2547),$2548,$2549,$2550,$2551);var $2552 = Parser$Reply$value$(_reply$pst$49,$2545);var $2546 = $2552;break;};var $2538 = $2546;break;};var $2536 = $2538;break;};var $2530 = $2536;break;};var $2523 = $2530;break;};var $2521 = $2523;break;};return $2521;}),_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $2553=self.err;var self = $2519;switch(self._){case 'Maybe.some':var $2555=self.value;var $2556 = Parser$Reply$error$(Parser$Error$combine$($2555,$2553));var $2554 = $2556;break;case 'Maybe.none':var $2557 = Parser$Reply$error$($2553);var $2554 = $2557;break;};var $2520 = $2554;break;case 'Parser.Reply.value':var $2558=self.pst;var $2559=self.val;var self = $2558;switch(self._){case 'Parser.State.new':var $2561=self.err;var $2562=self.nam;var $2563=self.ini;var $2564=self.idx;var $2565=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($2519,$2561),$2562,$2563,$2564,$2565);var $2566 = Parser$Reply$value$(_reply$pst$29,Pair$new$($2511,$2559));var $2560 = $2566;break;};var $2520 = $2560;break;};var $2518 = $2520;break;};var $2512 = $2518;break;};var $2504 = $2512;break;};var $2502 = $2504;break;};return $2502;};
  const Kind$Parser$lambda$name_term = x0=>Kind$Parser$lambda$name_term$(x0);
  function List$unzip$(_xs$3){var self = _xs$3;switch(self._){case 'List.cons':var $2568=self.head;var $2569=self.tail;var _rec$6 = List$unzip$($2569);var self = $2568;switch(self._){case 'Pair.new':var $2571=self.fst;var $2572=self.snd;var self = _rec$6;switch(self._){case 'Pair.new':var $2574=self.fst;var $2575=self.snd;var $2576 = Pair$new$(List$cons$($2571,$2574),List$cons$($2572,$2575));var $2573 = $2576;break;};var $2570 = $2573;break;};var $2567 = $2570;break;case 'List.nil':var $2577 = Pair$new$(List$nil,List$nil);var $2567 = $2577;break;};return $2567;};
  const List$unzip = x0=>List$unzip$(x0);
  function Kind$Parser$lambda$get_type$(_types$1){var self = _types$1;switch(self._){case 'List.cons':var $2579=self.head;var $2580=self.tail;var self = $2579;switch(self._){case 'Maybe.some':var $2582=self.value;var $2583 = $2582;var _type$4 = $2583;break;case 'Maybe.none':var $2584 = Kind$Term$hol$(Bits$e);var _type$4 = $2584;break;};var $2581 = Kind$Term$all$(Bool$false,"","",_type$4,(_s$5=>_x$6=>{var $2585 = Kind$Parser$lambda$get_type$($2580);return $2585;}));var $2578 = $2581;break;case 'List.nil':var $2586 = Kind$Term$hol$(Bits$e);var $2578 = $2586;break;};return $2578;};
  const Kind$Parser$lambda$get_type = x0=>Kind$Parser$lambda$get_type$(x0);
  const Kind$Parser$lambda$2 = Kind$Parser$block("lambda")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $2588=self.err;var _reply$7 = Kind$Parser$items$("(",Kind$Parser$lambda$name_term,")")(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2590=self.err;var self = $2588;switch(self._){case 'Maybe.some':var $2592=self.value;var $2593 = Parser$Reply$error$(Parser$Error$combine$($2592,$2590));var $2591 = $2593;break;case 'Maybe.none':var $2594 = Parser$Reply$error$($2590);var $2591 = $2594;break;};var $2589 = $2591;break;case 'Parser.Reply.value':var $2595=self.pst;var $2596=self.val;var self = $2595;switch(self._){case 'Parser.State.new':var $2598=self.err;var $2599=self.nam;var $2600=self.ini;var $2601=self.idx;var $2602=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2588,$2598),$2599,$2600,$2601,$2602);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $2604=self.err;var _reply$21 = Parser$avoiding$(Kind$Parser$text_now$("("),Kind$Parser$term,_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $2606=self.err;var self = $2604;switch(self._){case 'Maybe.some':var $2608=self.value;var $2609 = Parser$Reply$error$(Parser$Error$combine$($2608,$2606));var $2607 = $2609;break;case 'Maybe.none':var $2610 = Parser$Reply$error$($2606);var $2607 = $2610;break;};var $2605 = $2607;break;case 'Parser.Reply.value':var $2611=self.pst;var $2612=self.val;var self = $2611;switch(self._){case 'Parser.State.new':var $2614=self.err;var $2615=self.nam;var $2616=self.ini;var $2617=self.idx;var $2618=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($2604,$2614),$2615,$2616,$2617,$2618);var self = List$unzip$($2596);switch(self._){case 'Pair.new':var $2620=self.fst;var $2621=self.snd;var _lamb$32 = Kind$Parser$lambda$make$start$($2620,$2612);var _type$33 = Kind$Parser$lambda$get_type$($2621);var _term$34 = Kind$Term$ann$(Bool$false,_lamb$32,_type$33);var $2622 = (_pst$35=>{var $2623 = Parser$Reply$value$(_pst$35,_term$34);return $2623;});var $2619 = $2622;break;};var $2619 = $2619(_reply$pst$29);var $2613 = $2619;break;};var $2605 = $2613;break;};var $2603 = $2605;break;};var $2597 = $2603;break;};var $2589 = $2597;break;};var $2587 = $2589;break;};return $2587;}));
  const Kind$Parser$lambda = Kind$Parser$block("term")(Parser$choice(List$cons$(Kind$Parser$lambda$1,List$cons$(Kind$Parser$lambda$2,List$nil))));
  const Kind$Parser$lambda$erased = Kind$Parser$block("lambda")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $2625=self.err;var _reply$7 = Kind$Parser$items$("<",Kind$Parser$name1,">")(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2627=self.err;var self = $2625;switch(self._){case 'Maybe.some':var $2629=self.value;var $2630 = Parser$Reply$error$(Parser$Error$combine$($2629,$2627));var $2628 = $2630;break;case 'Maybe.none':var $2631 = Parser$Reply$error$($2627);var $2628 = $2631;break;};var $2626 = $2628;break;case 'Parser.Reply.value':var $2632=self.pst;var $2633=self.val;var self = $2632;switch(self._){case 'Parser.State.new':var $2635=self.err;var $2636=self.nam;var $2637=self.ini;var $2638=self.idx;var $2639=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2625,$2635),$2636,$2637,$2638,$2639);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $2641=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $2643=self.err;var self = $2641;switch(self._){case 'Maybe.some':var $2645=self.value;var $2646 = Parser$Reply$error$(Parser$Error$combine$($2645,$2643));var $2644 = $2646;break;case 'Maybe.none':var $2647 = Parser$Reply$error$($2643);var $2644 = $2647;break;};var $2642 = $2644;break;case 'Parser.Reply.value':var $2648=self.pst;var $2649=self.val;var self = $2648;switch(self._){case 'Parser.State.new':var $2651=self.err;var $2652=self.nam;var $2653=self.ini;var $2654=self.idx;var $2655=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($2641,$2651),$2652,$2653,$2654,$2655);var $2656 = Parser$Reply$value$(_reply$pst$29,Kind$Parser$lambda$make$start$($2633,$2649));var $2650 = $2656;break;};var $2642 = $2650;break;};var $2640 = $2642;break;};var $2634 = $2640;break;};var $2626 = $2634;break;};var $2624 = $2626;break;};return $2624;}));
  const Kind$Parser$parenthesis = Kind$Parser$block("parenthesis")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $2658=self.err;var _reply$7 = Kind$Parser$text$("(",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $2660=self.err;var self = $2658;switch(self._){case 'Maybe.some':var $2662=self.value;var $2663 = Parser$Reply$error$(Parser$Error$combine$($2662,$2660));var $2661 = $2663;break;case 'Maybe.none':var $2664 = Parser$Reply$error$($2660);var $2661 = $2664;break;};var $2659 = $2661;break;case 'Parser.Reply.value':var $2665=self.pst;var self = $2665;switch(self._){case 'Parser.State.new':var $2667=self.err;var $2668=self.nam;var $2669=self.ini;var $2670=self.idx;var $2671=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($2658,$2667),$2668,$2669,$2670,$2671);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $2673=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $2675=self.err;var self = $2673;switch(self._){case 'Maybe.some':var $2677=self.value;var $2678 = Parser$Reply$error$(Parser$Error$combine$($2677,$2675));var $2676 = $2678;break;case 'Maybe.none':var $2679 = Parser$Reply$error$($2675);var $2676 = $2679;break;};var $2674 = $2676;break;case 'Parser.Reply.value':var $2680=self.pst;var $2681=self.val;var self = $2680;switch(self._){case 'Parser.State.new':var $2683=self.err;var $2684=self.nam;var $2685=self.ini;var $2686=self.idx;var $2687=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($2673,$2683),$2684,$2685,$2686,$2687);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $2689=self.err;var _reply$35 = Kind$Parser$text$(")",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $2691=self.err;var self = $2689;switch(self._){case 'Maybe.some':var $2693=self.value;var $2694 = Parser$Reply$error$(Parser$Error$combine$($2693,$2691));var $2692 = $2694;break;case 'Maybe.none':var $2695 = Parser$Reply$error$($2691);var $2692 = $2695;break;};var $2690 = $2692;break;case 'Parser.Reply.value':var $2696=self.pst;var self = $2696;switch(self._){case 'Parser.State.new':var $2698=self.err;var $2699=self.nam;var $2700=self.ini;var $2701=self.idx;var $2702=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($2689,$2698),$2699,$2700,$2701,$2702);var $2703 = Parser$Reply$value$(_reply$pst$43,$2681);var $2697 = $2703;break;};var $2690 = $2697;break;};var $2688 = $2690;break;};var $2682 = $2688;break;};var $2674 = $2682;break;};var $2672 = $2674;break;};var $2666 = $2672;break;};var $2659 = $2666;break;};var $2657 = $2659;break;};return $2657;}));
  function Kind$Parser$letforrange$(_typename$1,_body$2){var $2704 = Kind$Parser$block("let-for")((_pst$3=>{var self = _pst$3;switch(self._){case 'Parser.State.new':var $2706=self.err;var _reply$9 = Kind$Parser$text$("let ",_pst$3);var self = _reply$9;switch(self._){case 'Parser.Reply.error':var $2708=self.err;var self = $2706;switch(self._){case 'Maybe.some':var $2710=self.value;var $2711 = Parser$Reply$error$(Parser$Error$combine$($2710,$2708));var $2709 = $2711;break;case 'Maybe.none':var $2712 = Parser$Reply$error$($2708);var $2709 = $2712;break;};var $2707 = $2709;break;case 'Parser.Reply.value':var $2713=self.pst;var self = $2713;switch(self._){case 'Parser.State.new':var $2715=self.err;var $2716=self.nam;var $2717=self.ini;var $2718=self.idx;var $2719=self.str;var _reply$pst$17 = Parser$State$new$(Parser$Error$maybe_combine$($2706,$2715),$2716,$2717,$2718,$2719);var self = _reply$pst$17;switch(self._){case 'Parser.State.new':var $2721=self.err;var _reply$23 = Kind$Parser$name1$(_reply$pst$17);var self = _reply$23;switch(self._){case 'Parser.Reply.error':var $2723=self.err;var self = $2721;switch(self._){case 'Maybe.some':var $2725=self.value;var $2726 = Parser$Reply$error$(Parser$Error$combine$($2725,$2723));var $2724 = $2726;break;case 'Maybe.none':var $2727 = Parser$Reply$error$($2723);var $2724 = $2727;break;};var $2722 = $2724;break;case 'Parser.Reply.value':var $2728=self.pst;var $2729=self.val;var self = $2728;switch(self._){case 'Parser.State.new':var $2731=self.err;var $2732=self.nam;var $2733=self.ini;var $2734=self.idx;var $2735=self.str;var _reply$pst$31 = Parser$State$new$(Parser$Error$maybe_combine$($2721,$2731),$2732,$2733,$2734,$2735);var self = _reply$pst$31;switch(self._){case 'Parser.State.new':var $2737=self.err;var _reply$37 = Kind$Parser$text$("=",_reply$pst$31);var self = _reply$37;switch(self._){case 'Parser.Reply.error':var $2739=self.err;var self = $2737;switch(self._){case 'Maybe.some':var $2741=self.value;var $2742 = Parser$Reply$error$(Parser$Error$combine$($2741,$2739));var $2740 = $2742;break;case 'Maybe.none':var $2743 = Parser$Reply$error$($2739);var $2740 = $2743;break;};var $2738 = $2740;break;case 'Parser.Reply.value':var $2744=self.pst;var self = $2744;switch(self._){case 'Parser.State.new':var $2746=self.err;var $2747=self.nam;var $2748=self.ini;var $2749=self.idx;var $2750=self.str;var _reply$pst$45 = Parser$State$new$(Parser$Error$maybe_combine$($2737,$2746),$2747,$2748,$2749,$2750);var self = _reply$pst$45;switch(self._){case 'Parser.State.new':var $2752=self.err;var _reply$51 = Kind$Parser$text$("for ",_reply$pst$45);var self = _reply$51;switch(self._){case 'Parser.Reply.error':var $2754=self.err;var self = $2752;switch(self._){case 'Maybe.some':var $2756=self.value;var $2757 = Parser$Reply$error$(Parser$Error$combine$($2756,$2754));var $2755 = $2757;break;case 'Maybe.none':var $2758 = Parser$Reply$error$($2754);var $2755 = $2758;break;};var $2753 = $2755;break;case 'Parser.Reply.value':var $2759=self.pst;var self = $2759;switch(self._){case 'Parser.State.new':var $2761=self.err;var $2762=self.nam;var $2763=self.ini;var $2764=self.idx;var $2765=self.str;var _reply$pst$59 = Parser$State$new$(Parser$Error$maybe_combine$($2752,$2761),$2762,$2763,$2764,$2765);var self = _reply$pst$59;switch(self._){case 'Parser.State.new':var $2767=self.err;var _reply$65 = Kind$Parser$name1$(_reply$pst$59);var self = _reply$65;switch(self._){case 'Parser.Reply.error':var $2769=self.err;var self = $2767;switch(self._){case 'Maybe.some':var $2771=self.value;var $2772 = Parser$Reply$error$(Parser$Error$combine$($2771,$2769));var $2770 = $2772;break;case 'Maybe.none':var $2773 = Parser$Reply$error$($2769);var $2770 = $2773;break;};var $2768 = $2770;break;case 'Parser.Reply.value':var $2774=self.pst;var $2775=self.val;var self = $2774;switch(self._){case 'Parser.State.new':var $2777=self.err;var $2778=self.nam;var $2779=self.ini;var $2780=self.idx;var $2781=self.str;var _reply$pst$73 = Parser$State$new$(Parser$Error$maybe_combine$($2767,$2777),$2778,$2779,$2780,$2781);var self = _reply$pst$73;switch(self._){case 'Parser.State.new':var $2783=self.err;var _reply$79 = Kind$Parser$text$(":",_reply$pst$73);var self = _reply$79;switch(self._){case 'Parser.Reply.error':var $2785=self.err;var self = $2783;switch(self._){case 'Maybe.some':var $2787=self.value;var $2788 = Parser$Reply$error$(Parser$Error$combine$($2787,$2785));var $2786 = $2788;break;case 'Maybe.none':var $2789 = Parser$Reply$error$($2785);var $2786 = $2789;break;};var $2784 = $2786;break;case 'Parser.Reply.value':var $2790=self.pst;var self = $2790;switch(self._){case 'Parser.State.new':var $2792=self.err;var $2793=self.nam;var $2794=self.ini;var $2795=self.idx;var $2796=self.str;var _reply$pst$87 = Parser$State$new$(Parser$Error$maybe_combine$($2783,$2792),$2793,$2794,$2795,$2796);var self = _reply$pst$87;switch(self._){case 'Parser.State.new':var $2798=self.err;var _reply$93 = Kind$Parser$text$(_typename$1,_reply$pst$87);var self = _reply$93;switch(self._){case 'Parser.Reply.error':var $2800=self.err;var self = $2798;switch(self._){case 'Maybe.some':var $2802=self.value;var $2803 = Parser$Reply$error$(Parser$Error$combine$($2802,$2800));var $2801 = $2803;break;case 'Maybe.none':var $2804 = Parser$Reply$error$($2800);var $2801 = $2804;break;};var $2799 = $2801;break;case 'Parser.Reply.value':var $2805=self.pst;var self = $2805;switch(self._){case 'Parser.State.new':var $2807=self.err;var $2808=self.nam;var $2809=self.ini;var $2810=self.idx;var $2811=self.str;var _reply$pst$101 = Parser$State$new$(Parser$Error$maybe_combine$($2798,$2807),$2808,$2809,$2810,$2811);var self = _reply$pst$101;switch(self._){case 'Parser.State.new':var $2813=self.err;var _reply$107 = Kind$Parser$text$("from",_reply$pst$101);var self = _reply$107;switch(self._){case 'Parser.Reply.error':var $2815=self.err;var self = $2813;switch(self._){case 'Maybe.some':var $2817=self.value;var $2818 = Parser$Reply$error$(Parser$Error$combine$($2817,$2815));var $2816 = $2818;break;case 'Maybe.none':var $2819 = Parser$Reply$error$($2815);var $2816 = $2819;break;};var $2814 = $2816;break;case 'Parser.Reply.value':var $2820=self.pst;var self = $2820;switch(self._){case 'Parser.State.new':var $2822=self.err;var $2823=self.nam;var $2824=self.ini;var $2825=self.idx;var $2826=self.str;var _reply$pst$115 = Parser$State$new$(Parser$Error$maybe_combine$($2813,$2822),$2823,$2824,$2825,$2826);var self = _reply$pst$115;switch(self._){case 'Parser.State.new':var $2828=self.err;var _reply$121 = Kind$Parser$term(_reply$pst$115);var self = _reply$121;switch(self._){case 'Parser.Reply.error':var $2830=self.err;var self = $2828;switch(self._){case 'Maybe.some':var $2832=self.value;var $2833 = Parser$Reply$error$(Parser$Error$combine$($2832,$2830));var $2831 = $2833;break;case 'Maybe.none':var $2834 = Parser$Reply$error$($2830);var $2831 = $2834;break;};var $2829 = $2831;break;case 'Parser.Reply.value':var $2835=self.pst;var $2836=self.val;var self = $2835;switch(self._){case 'Parser.State.new':var $2838=self.err;var $2839=self.nam;var $2840=self.ini;var $2841=self.idx;var $2842=self.str;var _reply$pst$129 = Parser$State$new$(Parser$Error$maybe_combine$($2828,$2838),$2839,$2840,$2841,$2842);var self = _reply$pst$129;switch(self._){case 'Parser.State.new':var $2844=self.err;var _reply$135 = Kind$Parser$text$("to",_reply$pst$129);var self = _reply$135;switch(self._){case 'Parser.Reply.error':var $2846=self.err;var self = $2844;switch(self._){case 'Maybe.some':var $2848=self.value;var $2849 = Parser$Reply$error$(Parser$Error$combine$($2848,$2846));var $2847 = $2849;break;case 'Maybe.none':var $2850 = Parser$Reply$error$($2846);var $2847 = $2850;break;};var $2845 = $2847;break;case 'Parser.Reply.value':var $2851=self.pst;var self = $2851;switch(self._){case 'Parser.State.new':var $2853=self.err;var $2854=self.nam;var $2855=self.ini;var $2856=self.idx;var $2857=self.str;var _reply$pst$143 = Parser$State$new$(Parser$Error$maybe_combine$($2844,$2853),$2854,$2855,$2856,$2857);var self = _reply$pst$143;switch(self._){case 'Parser.State.new':var $2859=self.err;var _reply$149 = Kind$Parser$term(_reply$pst$143);var self = _reply$149;switch(self._){case 'Parser.Reply.error':var $2861=self.err;var self = $2859;switch(self._){case 'Maybe.some':var $2863=self.value;var $2864 = Parser$Reply$error$(Parser$Error$combine$($2863,$2861));var $2862 = $2864;break;case 'Maybe.none':var $2865 = Parser$Reply$error$($2861);var $2862 = $2865;break;};var $2860 = $2862;break;case 'Parser.Reply.value':var $2866=self.pst;var $2867=self.val;var self = $2866;switch(self._){case 'Parser.State.new':var $2869=self.err;var $2870=self.nam;var $2871=self.ini;var $2872=self.idx;var $2873=self.str;var _reply$pst$157 = Parser$State$new$(Parser$Error$maybe_combine$($2859,$2869),$2870,$2871,$2872,$2873);var self = _reply$pst$157;switch(self._){case 'Parser.State.new':var $2875=self.err;var _reply$163 = Kind$Parser$text$(":",_reply$pst$157);var self = _reply$163;switch(self._){case 'Parser.Reply.error':var $2877=self.err;var self = $2875;switch(self._){case 'Maybe.some':var $2879=self.value;var $2880 = Parser$Reply$error$(Parser$Error$combine$($2879,$2877));var $2878 = $2880;break;case 'Maybe.none':var $2881 = Parser$Reply$error$($2877);var $2878 = $2881;break;};var $2876 = $2878;break;case 'Parser.Reply.value':var $2882=self.pst;var self = $2882;switch(self._){case 'Parser.State.new':var $2884=self.err;var $2885=self.nam;var $2886=self.ini;var $2887=self.idx;var $2888=self.str;var _reply$pst$171 = Parser$State$new$(Parser$Error$maybe_combine$($2875,$2884),$2885,$2886,$2887,$2888);var self = _reply$pst$171;switch(self._){case 'Parser.State.new':var $2890=self.err;var _reply$177 = Kind$Parser$term(_reply$pst$171);var self = _reply$177;switch(self._){case 'Parser.Reply.error':var $2892=self.err;var self = $2890;switch(self._){case 'Maybe.some':var $2894=self.value;var $2895 = Parser$Reply$error$(Parser$Error$combine$($2894,$2892));var $2893 = $2895;break;case 'Maybe.none':var $2896 = Parser$Reply$error$($2892);var $2893 = $2896;break;};var $2891 = $2893;break;case 'Parser.Reply.value':var $2897=self.pst;var $2898=self.val;var self = $2897;switch(self._){case 'Parser.State.new':var $2900=self.err;var $2901=self.nam;var $2902=self.ini;var $2903=self.idx;var $2904=self.str;var _reply$pst$185 = Parser$State$new$(Parser$Error$maybe_combine$($2890,$2900),$2901,$2902,$2903,$2904);var self = _reply$pst$185;switch(self._){case 'Parser.State.new':var $2906=self.err;var _reply$191 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$185);var self = _reply$191;switch(self._){case 'Parser.Reply.error':var $2908=self.err;var self = $2906;switch(self._){case 'Maybe.some':var $2910=self.value;var $2911 = Parser$Reply$error$(Parser$Error$combine$($2910,$2908));var $2909 = $2911;break;case 'Maybe.none':var $2912 = Parser$Reply$error$($2908);var $2909 = $2912;break;};var $2907 = $2909;break;case 'Parser.Reply.value':var $2913=self.pst;var self = $2913;switch(self._){case 'Parser.State.new':var $2915=self.err;var $2916=self.nam;var $2917=self.ini;var $2918=self.idx;var $2919=self.str;var _reply$pst$199 = Parser$State$new$(Parser$Error$maybe_combine$($2906,$2915),$2916,$2917,$2918,$2919);var self = _reply$pst$199;switch(self._){case 'Parser.State.new':var $2921=self.err;var _reply$205 = _body$2(Unit$new)(_reply$pst$199);var self = _reply$205;switch(self._){case 'Parser.Reply.error':var $2923=self.err;var self = $2921;switch(self._){case 'Maybe.some':var $2925=self.value;var $2926 = Parser$Reply$error$(Parser$Error$combine$($2925,$2923));var $2924 = $2926;break;case 'Maybe.none':var $2927 = Parser$Reply$error$($2923);var $2924 = $2927;break;};var $2922 = $2924;break;case 'Parser.Reply.value':var $2928=self.pst;var $2929=self.val;var self = $2928;switch(self._){case 'Parser.State.new':var $2931=self.err;var $2932=self.nam;var $2933=self.ini;var $2934=self.idx;var $2935=self.str;var _reply$pst$213 = Parser$State$new$(Parser$Error$maybe_combine$($2921,$2931),$2932,$2933,$2934,$2935);var _term$214 = Kind$Term$ref$((_typename$1+".for"));var _term$215 = Kind$Term$app$(_term$214,Kind$Term$hol$(Bits$e));var _term$216 = Kind$Term$app$(_term$215,Kind$Term$ref$($2729));var _term$217 = Kind$Term$app$(_term$216,$2836);var _term$218 = Kind$Term$app$(_term$217,$2867);var _lamb$219 = Kind$Term$lam$($2775,(_e$219=>{var $2937 = Kind$Term$lam$($2729,(_s$220=>{var $2938 = $2898;return $2938;}));return $2937;}));var _term$220 = Kind$Term$app$(_term$218,_lamb$219);var _term$221 = Kind$Term$let$($2729,_term$220,(_x$221=>{var $2939 = $2929;return $2939;}));var $2936 = Parser$Reply$value$(_reply$pst$213,_term$221);var $2930 = $2936;break;};var $2922 = $2930;break;};var $2920 = $2922;break;};var $2914 = $2920;break;};var $2907 = $2914;break;};var $2905 = $2907;break;};var $2899 = $2905;break;};var $2891 = $2899;break;};var $2889 = $2891;break;};var $2883 = $2889;break;};var $2876 = $2883;break;};var $2874 = $2876;break;};var $2868 = $2874;break;};var $2860 = $2868;break;};var $2858 = $2860;break;};var $2852 = $2858;break;};var $2845 = $2852;break;};var $2843 = $2845;break;};var $2837 = $2843;break;};var $2829 = $2837;break;};var $2827 = $2829;break;};var $2821 = $2827;break;};var $2814 = $2821;break;};var $2812 = $2814;break;};var $2806 = $2812;break;};var $2799 = $2806;break;};var $2797 = $2799;break;};var $2791 = $2797;break;};var $2784 = $2791;break;};var $2782 = $2784;break;};var $2776 = $2782;break;};var $2768 = $2776;break;};var $2766 = $2768;break;};var $2760 = $2766;break;};var $2753 = $2760;break;};var $2751 = $2753;break;};var $2745 = $2751;break;};var $2738 = $2745;break;};var $2736 = $2738;break;};var $2730 = $2736;break;};var $2722 = $2730;break;};var $2720 = $2722;break;};var $2714 = $2720;break;};var $2707 = $2714;break;};var $2705 = $2707;break;};return $2705;}));return $2704;};
  const Kind$Parser$letforrange = x0=>x1=>Kind$Parser$letforrange$(x0,x1);
  function Kind$Parser$letforrange$u32$(_body$1){var $2940 = Kind$Parser$letforrange$("U32",_body$1);return $2940;};
  const Kind$Parser$letforrange$u32 = x0=>Kind$Parser$letforrange$u32$(x0);
  function Kind$Parser$letforrange$with$(_typename$1,_body$2){var $2941 = Kind$Parser$block("for")((_pst$3=>{var self = _pst$3;switch(self._){case 'Parser.State.new':var $2943=self.err;var _reply$9 = Kind$Parser$text$("for ",_pst$3);var self = _reply$9;switch(self._){case 'Parser.Reply.error':var $2945=self.err;var self = $2943;switch(self._){case 'Maybe.some':var $2947=self.value;var $2948 = Parser$Reply$error$(Parser$Error$combine$($2947,$2945));var $2946 = $2948;break;case 'Maybe.none':var $2949 = Parser$Reply$error$($2945);var $2946 = $2949;break;};var $2944 = $2946;break;case 'Parser.Reply.value':var $2950=self.pst;var self = $2950;switch(self._){case 'Parser.State.new':var $2952=self.err;var $2953=self.nam;var $2954=self.ini;var $2955=self.idx;var $2956=self.str;var _reply$pst$17 = Parser$State$new$(Parser$Error$maybe_combine$($2943,$2952),$2953,$2954,$2955,$2956);var self = _reply$pst$17;switch(self._){case 'Parser.State.new':var $2958=self.err;var _reply$23 = Kind$Parser$name1$(_reply$pst$17);var self = _reply$23;switch(self._){case 'Parser.Reply.error':var $2960=self.err;var self = $2958;switch(self._){case 'Maybe.some':var $2962=self.value;var $2963 = Parser$Reply$error$(Parser$Error$combine$($2962,$2960));var $2961 = $2963;break;case 'Maybe.none':var $2964 = Parser$Reply$error$($2960);var $2961 = $2964;break;};var $2959 = $2961;break;case 'Parser.Reply.value':var $2965=self.pst;var $2966=self.val;var self = $2965;switch(self._){case 'Parser.State.new':var $2968=self.err;var $2969=self.nam;var $2970=self.ini;var $2971=self.idx;var $2972=self.str;var _reply$pst$31 = Parser$State$new$(Parser$Error$maybe_combine$($2958,$2968),$2969,$2970,$2971,$2972);var self = _reply$pst$31;switch(self._){case 'Parser.State.new':var $2974=self.err;var _reply$37 = Kind$Parser$text$(":",_reply$pst$31);var self = _reply$37;switch(self._){case 'Parser.Reply.error':var $2976=self.err;var self = $2974;switch(self._){case 'Maybe.some':var $2978=self.value;var $2979 = Parser$Reply$error$(Parser$Error$combine$($2978,$2976));var $2977 = $2979;break;case 'Maybe.none':var $2980 = Parser$Reply$error$($2976);var $2977 = $2980;break;};var $2975 = $2977;break;case 'Parser.Reply.value':var $2981=self.pst;var self = $2981;switch(self._){case 'Parser.State.new':var $2983=self.err;var $2984=self.nam;var $2985=self.ini;var $2986=self.idx;var $2987=self.str;var _reply$pst$45 = Parser$State$new$(Parser$Error$maybe_combine$($2974,$2983),$2984,$2985,$2986,$2987);var self = _reply$pst$45;switch(self._){case 'Parser.State.new':var $2989=self.err;var _reply$51 = Kind$Parser$text$(_typename$1,_reply$pst$45);var self = _reply$51;switch(self._){case 'Parser.Reply.error':var $2991=self.err;var self = $2989;switch(self._){case 'Maybe.some':var $2993=self.value;var $2994 = Parser$Reply$error$(Parser$Error$combine$($2993,$2991));var $2992 = $2994;break;case 'Maybe.none':var $2995 = Parser$Reply$error$($2991);var $2992 = $2995;break;};var $2990 = $2992;break;case 'Parser.Reply.value':var $2996=self.pst;var self = $2996;switch(self._){case 'Parser.State.new':var $2998=self.err;var $2999=self.nam;var $3000=self.ini;var $3001=self.idx;var $3002=self.str;var _reply$pst$59 = Parser$State$new$(Parser$Error$maybe_combine$($2989,$2998),$2999,$3000,$3001,$3002);var self = _reply$pst$59;switch(self._){case 'Parser.State.new':var $3004=self.err;var _reply$65 = Kind$Parser$text$("from",_reply$pst$59);var self = _reply$65;switch(self._){case 'Parser.Reply.error':var $3006=self.err;var self = $3004;switch(self._){case 'Maybe.some':var $3008=self.value;var $3009 = Parser$Reply$error$(Parser$Error$combine$($3008,$3006));var $3007 = $3009;break;case 'Maybe.none':var $3010 = Parser$Reply$error$($3006);var $3007 = $3010;break;};var $3005 = $3007;break;case 'Parser.Reply.value':var $3011=self.pst;var self = $3011;switch(self._){case 'Parser.State.new':var $3013=self.err;var $3014=self.nam;var $3015=self.ini;var $3016=self.idx;var $3017=self.str;var _reply$pst$73 = Parser$State$new$(Parser$Error$maybe_combine$($3004,$3013),$3014,$3015,$3016,$3017);var self = _reply$pst$73;switch(self._){case 'Parser.State.new':var $3019=self.err;var _reply$79 = Kind$Parser$term(_reply$pst$73);var self = _reply$79;switch(self._){case 'Parser.Reply.error':var $3021=self.err;var self = $3019;switch(self._){case 'Maybe.some':var $3023=self.value;var $3024 = Parser$Reply$error$(Parser$Error$combine$($3023,$3021));var $3022 = $3024;break;case 'Maybe.none':var $3025 = Parser$Reply$error$($3021);var $3022 = $3025;break;};var $3020 = $3022;break;case 'Parser.Reply.value':var $3026=self.pst;var $3027=self.val;var self = $3026;switch(self._){case 'Parser.State.new':var $3029=self.err;var $3030=self.nam;var $3031=self.ini;var $3032=self.idx;var $3033=self.str;var _reply$pst$87 = Parser$State$new$(Parser$Error$maybe_combine$($3019,$3029),$3030,$3031,$3032,$3033);var self = _reply$pst$87;switch(self._){case 'Parser.State.new':var $3035=self.err;var _reply$93 = Kind$Parser$text$("to",_reply$pst$87);var self = _reply$93;switch(self._){case 'Parser.Reply.error':var $3037=self.err;var self = $3035;switch(self._){case 'Maybe.some':var $3039=self.value;var $3040 = Parser$Reply$error$(Parser$Error$combine$($3039,$3037));var $3038 = $3040;break;case 'Maybe.none':var $3041 = Parser$Reply$error$($3037);var $3038 = $3041;break;};var $3036 = $3038;break;case 'Parser.Reply.value':var $3042=self.pst;var self = $3042;switch(self._){case 'Parser.State.new':var $3044=self.err;var $3045=self.nam;var $3046=self.ini;var $3047=self.idx;var $3048=self.str;var _reply$pst$101 = Parser$State$new$(Parser$Error$maybe_combine$($3035,$3044),$3045,$3046,$3047,$3048);var self = _reply$pst$101;switch(self._){case 'Parser.State.new':var $3050=self.err;var _reply$107 = Kind$Parser$term(_reply$pst$101);var self = _reply$107;switch(self._){case 'Parser.Reply.error':var $3052=self.err;var self = $3050;switch(self._){case 'Maybe.some':var $3054=self.value;var $3055 = Parser$Reply$error$(Parser$Error$combine$($3054,$3052));var $3053 = $3055;break;case 'Maybe.none':var $3056 = Parser$Reply$error$($3052);var $3053 = $3056;break;};var $3051 = $3053;break;case 'Parser.Reply.value':var $3057=self.pst;var $3058=self.val;var self = $3057;switch(self._){case 'Parser.State.new':var $3060=self.err;var $3061=self.nam;var $3062=self.ini;var $3063=self.idx;var $3064=self.str;var _reply$pst$115 = Parser$State$new$(Parser$Error$maybe_combine$($3050,$3060),$3061,$3062,$3063,$3064);var self = _reply$pst$115;switch(self._){case 'Parser.State.new':var $3066=self.err;var _reply$121 = Kind$Parser$text$("with ",_reply$pst$115);var self = _reply$121;switch(self._){case 'Parser.Reply.error':var $3068=self.err;var self = $3066;switch(self._){case 'Maybe.some':var $3070=self.value;var $3071 = Parser$Reply$error$(Parser$Error$combine$($3070,$3068));var $3069 = $3071;break;case 'Maybe.none':var $3072 = Parser$Reply$error$($3068);var $3069 = $3072;break;};var $3067 = $3069;break;case 'Parser.Reply.value':var $3073=self.pst;var self = $3073;switch(self._){case 'Parser.State.new':var $3075=self.err;var $3076=self.nam;var $3077=self.ini;var $3078=self.idx;var $3079=self.str;var _reply$pst$129 = Parser$State$new$(Parser$Error$maybe_combine$($3066,$3075),$3076,$3077,$3078,$3079);var self = _reply$pst$129;switch(self._){case 'Parser.State.new':var $3081=self.err;var _reply$135 = Kind$Parser$name1$(_reply$pst$129);var self = _reply$135;switch(self._){case 'Parser.Reply.error':var $3083=self.err;var self = $3081;switch(self._){case 'Maybe.some':var $3085=self.value;var $3086 = Parser$Reply$error$(Parser$Error$combine$($3085,$3083));var $3084 = $3086;break;case 'Maybe.none':var $3087 = Parser$Reply$error$($3083);var $3084 = $3087;break;};var $3082 = $3084;break;case 'Parser.Reply.value':var $3088=self.pst;var $3089=self.val;var self = $3088;switch(self._){case 'Parser.State.new':var $3091=self.err;var $3092=self.nam;var $3093=self.ini;var $3094=self.idx;var $3095=self.str;var _reply$pst$143 = Parser$State$new$(Parser$Error$maybe_combine$($3081,$3091),$3092,$3093,$3094,$3095);var self = _reply$pst$143;switch(self._){case 'Parser.State.new':var $3097=self.err;var _reply$149 = Kind$Parser$text$(":",_reply$pst$143);var self = _reply$149;switch(self._){case 'Parser.Reply.error':var $3099=self.err;var self = $3097;switch(self._){case 'Maybe.some':var $3101=self.value;var $3102 = Parser$Reply$error$(Parser$Error$combine$($3101,$3099));var $3100 = $3102;break;case 'Maybe.none':var $3103 = Parser$Reply$error$($3099);var $3100 = $3103;break;};var $3098 = $3100;break;case 'Parser.Reply.value':var $3104=self.pst;var self = $3104;switch(self._){case 'Parser.State.new':var $3106=self.err;var $3107=self.nam;var $3108=self.ini;var $3109=self.idx;var $3110=self.str;var _reply$pst$157 = Parser$State$new$(Parser$Error$maybe_combine$($3097,$3106),$3107,$3108,$3109,$3110);var self = _reply$pst$157;switch(self._){case 'Parser.State.new':var $3112=self.err;var _reply$163 = Kind$Parser$term(_reply$pst$157);var self = _reply$163;switch(self._){case 'Parser.Reply.error':var $3114=self.err;var self = $3112;switch(self._){case 'Maybe.some':var $3116=self.value;var $3117 = Parser$Reply$error$(Parser$Error$combine$($3116,$3114));var $3115 = $3117;break;case 'Maybe.none':var $3118 = Parser$Reply$error$($3114);var $3115 = $3118;break;};var $3113 = $3115;break;case 'Parser.Reply.value':var $3119=self.pst;var $3120=self.val;var self = $3119;switch(self._){case 'Parser.State.new':var $3122=self.err;var $3123=self.nam;var $3124=self.ini;var $3125=self.idx;var $3126=self.str;var _reply$pst$171 = Parser$State$new$(Parser$Error$maybe_combine$($3112,$3122),$3123,$3124,$3125,$3126);var self = _reply$pst$171;switch(self._){case 'Parser.State.new':var $3128=self.err;var _reply$177 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$171);var self = _reply$177;switch(self._){case 'Parser.Reply.error':var $3130=self.err;var self = $3128;switch(self._){case 'Maybe.some':var $3132=self.value;var $3133 = Parser$Reply$error$(Parser$Error$combine$($3132,$3130));var $3131 = $3133;break;case 'Maybe.none':var $3134 = Parser$Reply$error$($3130);var $3131 = $3134;break;};var $3129 = $3131;break;case 'Parser.Reply.value':var $3135=self.pst;var self = $3135;switch(self._){case 'Parser.State.new':var $3137=self.err;var $3138=self.nam;var $3139=self.ini;var $3140=self.idx;var $3141=self.str;var _reply$pst$185 = Parser$State$new$(Parser$Error$maybe_combine$($3128,$3137),$3138,$3139,$3140,$3141);var self = _reply$pst$185;switch(self._){case 'Parser.State.new':var $3143=self.err;var _reply$191 = _body$2(Unit$new)(_reply$pst$185);var self = _reply$191;switch(self._){case 'Parser.Reply.error':var $3145=self.err;var self = $3143;switch(self._){case 'Maybe.some':var $3147=self.value;var $3148 = Parser$Reply$error$(Parser$Error$combine$($3147,$3145));var $3146 = $3148;break;case 'Maybe.none':var $3149 = Parser$Reply$error$($3145);var $3146 = $3149;break;};var $3144 = $3146;break;case 'Parser.Reply.value':var $3150=self.pst;var $3151=self.val;var self = $3150;switch(self._){case 'Parser.State.new':var $3153=self.err;var $3154=self.nam;var $3155=self.ini;var $3156=self.idx;var $3157=self.str;var _reply$pst$199 = Parser$State$new$(Parser$Error$maybe_combine$($3143,$3153),$3154,$3155,$3156,$3157);var _term$200 = Kind$Term$ref$((_typename$1+".for"));var _term$201 = Kind$Term$app$(_term$200,Kind$Term$hol$(Bits$e));var _term$202 = Kind$Term$app$(_term$201,Kind$Term$ref$($3089));var _term$203 = Kind$Term$app$(_term$202,$3027);var _term$204 = Kind$Term$app$(_term$203,$3058);var _lamb$205 = Kind$Term$lam$($2966,(_e$205=>{var $3159 = Kind$Term$lam$($3089,(_s$206=>{var $3160 = $3120;return $3160;}));return $3159;}));var _term$206 = Kind$Term$app$(_term$204,_lamb$205);var _term$207 = Kind$Term$let$($3089,_term$206,(_x$207=>{var $3161 = $3151;return $3161;}));var $3158 = Parser$Reply$value$(_reply$pst$199,_term$207);var $3152 = $3158;break;};var $3144 = $3152;break;};var $3142 = $3144;break;};var $3136 = $3142;break;};var $3129 = $3136;break;};var $3127 = $3129;break;};var $3121 = $3127;break;};var $3113 = $3121;break;};var $3111 = $3113;break;};var $3105 = $3111;break;};var $3098 = $3105;break;};var $3096 = $3098;break;};var $3090 = $3096;break;};var $3082 = $3090;break;};var $3080 = $3082;break;};var $3074 = $3080;break;};var $3067 = $3074;break;};var $3065 = $3067;break;};var $3059 = $3065;break;};var $3051 = $3059;break;};var $3049 = $3051;break;};var $3043 = $3049;break;};var $3036 = $3043;break;};var $3034 = $3036;break;};var $3028 = $3034;break;};var $3020 = $3028;break;};var $3018 = $3020;break;};var $3012 = $3018;break;};var $3005 = $3012;break;};var $3003 = $3005;break;};var $2997 = $3003;break;};var $2990 = $2997;break;};var $2988 = $2990;break;};var $2982 = $2988;break;};var $2975 = $2982;break;};var $2973 = $2975;break;};var $2967 = $2973;break;};var $2959 = $2967;break;};var $2957 = $2959;break;};var $2951 = $2957;break;};var $2944 = $2951;break;};var $2942 = $2944;break;};return $2942;}));return $2941;};
  const Kind$Parser$letforrange$with = x0=>x1=>Kind$Parser$letforrange$with$(x0,x1);
  function Kind$Parser$letforrange$u32$with$(_body$1){var $3162 = Kind$Parser$letforrange$with$("U32",_body$1);return $3162;};
  const Kind$Parser$letforrange$u32$with = x0=>Kind$Parser$letforrange$u32$with$(x0);
  function Kind$Parser$letforrange$i32$(_body$1){var $3163 = Kind$Parser$letforrange$("I32",_body$1);return $3163;};
  const Kind$Parser$letforrange$i32 = x0=>Kind$Parser$letforrange$i32$(x0);
  function Kind$Parser$letforrange$i32$with$(_body$1){var $3164 = Kind$Parser$letforrange$with$("I32",_body$1);return $3164;};
  const Kind$Parser$letforrange$i32$with = x0=>Kind$Parser$letforrange$i32$with$(x0);
  function Kind$Parser$letforrange$nat$(_body$1){var $3165 = Kind$Parser$block("let-for")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $3167=self.err;var _reply$8 = Kind$Parser$text$("let ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $3169=self.err;var self = $3167;switch(self._){case 'Maybe.some':var $3171=self.value;var $3172 = Parser$Reply$error$(Parser$Error$combine$($3171,$3169));var $3170 = $3172;break;case 'Maybe.none':var $3173 = Parser$Reply$error$($3169);var $3170 = $3173;break;};var $3168 = $3170;break;case 'Parser.Reply.value':var $3174=self.pst;var self = $3174;switch(self._){case 'Parser.State.new':var $3176=self.err;var $3177=self.nam;var $3178=self.ini;var $3179=self.idx;var $3180=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($3167,$3176),$3177,$3178,$3179,$3180);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $3182=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $3184=self.err;var self = $3182;switch(self._){case 'Maybe.some':var $3186=self.value;var $3187 = Parser$Reply$error$(Parser$Error$combine$($3186,$3184));var $3185 = $3187;break;case 'Maybe.none':var $3188 = Parser$Reply$error$($3184);var $3185 = $3188;break;};var $3183 = $3185;break;case 'Parser.Reply.value':var $3189=self.pst;var $3190=self.val;var self = $3189;switch(self._){case 'Parser.State.new':var $3192=self.err;var $3193=self.nam;var $3194=self.ini;var $3195=self.idx;var $3196=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($3182,$3192),$3193,$3194,$3195,$3196);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $3198=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $3200=self.err;var self = $3198;switch(self._){case 'Maybe.some':var $3202=self.value;var $3203 = Parser$Reply$error$(Parser$Error$combine$($3202,$3200));var $3201 = $3203;break;case 'Maybe.none':var $3204 = Parser$Reply$error$($3200);var $3201 = $3204;break;};var $3199 = $3201;break;case 'Parser.Reply.value':var $3205=self.pst;var self = $3205;switch(self._){case 'Parser.State.new':var $3207=self.err;var $3208=self.nam;var $3209=self.ini;var $3210=self.idx;var $3211=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($3198,$3207),$3208,$3209,$3210,$3211);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $3213=self.err;var _reply$50 = Kind$Parser$text$("for ",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $3215=self.err;var self = $3213;switch(self._){case 'Maybe.some':var $3217=self.value;var $3218 = Parser$Reply$error$(Parser$Error$combine$($3217,$3215));var $3216 = $3218;break;case 'Maybe.none':var $3219 = Parser$Reply$error$($3215);var $3216 = $3219;break;};var $3214 = $3216;break;case 'Parser.Reply.value':var $3220=self.pst;var self = $3220;switch(self._){case 'Parser.State.new':var $3222=self.err;var $3223=self.nam;var $3224=self.ini;var $3225=self.idx;var $3226=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($3213,$3222),$3223,$3224,$3225,$3226);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $3228=self.err;var _reply$64 = Kind$Parser$name1$(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $3230=self.err;var self = $3228;switch(self._){case 'Maybe.some':var $3232=self.value;var $3233 = Parser$Reply$error$(Parser$Error$combine$($3232,$3230));var $3231 = $3233;break;case 'Maybe.none':var $3234 = Parser$Reply$error$($3230);var $3231 = $3234;break;};var $3229 = $3231;break;case 'Parser.Reply.value':var $3235=self.pst;var $3236=self.val;var self = $3235;switch(self._){case 'Parser.State.new':var $3238=self.err;var $3239=self.nam;var $3240=self.ini;var $3241=self.idx;var $3242=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($3228,$3238),$3239,$3240,$3241,$3242);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $3244=self.err;var _reply$78 = Kind$Parser$text$("from",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $3246=self.err;var self = $3244;switch(self._){case 'Maybe.some':var $3248=self.value;var $3249 = Parser$Reply$error$(Parser$Error$combine$($3248,$3246));var $3247 = $3249;break;case 'Maybe.none':var $3250 = Parser$Reply$error$($3246);var $3247 = $3250;break;};var $3245 = $3247;break;case 'Parser.Reply.value':var $3251=self.pst;var self = $3251;switch(self._){case 'Parser.State.new':var $3253=self.err;var $3254=self.nam;var $3255=self.ini;var $3256=self.idx;var $3257=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($3244,$3253),$3254,$3255,$3256,$3257);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $3259=self.err;var _reply$92 = Kind$Parser$term(_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $3261=self.err;var self = $3259;switch(self._){case 'Maybe.some':var $3263=self.value;var $3264 = Parser$Reply$error$(Parser$Error$combine$($3263,$3261));var $3262 = $3264;break;case 'Maybe.none':var $3265 = Parser$Reply$error$($3261);var $3262 = $3265;break;};var $3260 = $3262;break;case 'Parser.Reply.value':var $3266=self.pst;var $3267=self.val;var self = $3266;switch(self._){case 'Parser.State.new':var $3269=self.err;var $3270=self.nam;var $3271=self.ini;var $3272=self.idx;var $3273=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($3259,$3269),$3270,$3271,$3272,$3273);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $3275=self.err;var _reply$106 = Kind$Parser$text$("to",_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $3277=self.err;var self = $3275;switch(self._){case 'Maybe.some':var $3279=self.value;var $3280 = Parser$Reply$error$(Parser$Error$combine$($3279,$3277));var $3278 = $3280;break;case 'Maybe.none':var $3281 = Parser$Reply$error$($3277);var $3278 = $3281;break;};var $3276 = $3278;break;case 'Parser.Reply.value':var $3282=self.pst;var self = $3282;switch(self._){case 'Parser.State.new':var $3284=self.err;var $3285=self.nam;var $3286=self.ini;var $3287=self.idx;var $3288=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($3275,$3284),$3285,$3286,$3287,$3288);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $3290=self.err;var _reply$120 = Kind$Parser$term(_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $3292=self.err;var self = $3290;switch(self._){case 'Maybe.some':var $3294=self.value;var $3295 = Parser$Reply$error$(Parser$Error$combine$($3294,$3292));var $3293 = $3295;break;case 'Maybe.none':var $3296 = Parser$Reply$error$($3292);var $3293 = $3296;break;};var $3291 = $3293;break;case 'Parser.Reply.value':var $3297=self.pst;var $3298=self.val;var self = $3297;switch(self._){case 'Parser.State.new':var $3300=self.err;var $3301=self.nam;var $3302=self.ini;var $3303=self.idx;var $3304=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($3290,$3300),$3301,$3302,$3303,$3304);var self = _reply$pst$128;switch(self._){case 'Parser.State.new':var $3306=self.err;var _reply$134 = Kind$Parser$text$(":",_reply$pst$128);var self = _reply$134;switch(self._){case 'Parser.Reply.error':var $3308=self.err;var self = $3306;switch(self._){case 'Maybe.some':var $3310=self.value;var $3311 = Parser$Reply$error$(Parser$Error$combine$($3310,$3308));var $3309 = $3311;break;case 'Maybe.none':var $3312 = Parser$Reply$error$($3308);var $3309 = $3312;break;};var $3307 = $3309;break;case 'Parser.Reply.value':var $3313=self.pst;var self = $3313;switch(self._){case 'Parser.State.new':var $3315=self.err;var $3316=self.nam;var $3317=self.ini;var $3318=self.idx;var $3319=self.str;var _reply$pst$142 = Parser$State$new$(Parser$Error$maybe_combine$($3306,$3315),$3316,$3317,$3318,$3319);var self = _reply$pst$142;switch(self._){case 'Parser.State.new':var $3321=self.err;var _reply$148 = Kind$Parser$term(_reply$pst$142);var self = _reply$148;switch(self._){case 'Parser.Reply.error':var $3323=self.err;var self = $3321;switch(self._){case 'Maybe.some':var $3325=self.value;var $3326 = Parser$Reply$error$(Parser$Error$combine$($3325,$3323));var $3324 = $3326;break;case 'Maybe.none':var $3327 = Parser$Reply$error$($3323);var $3324 = $3327;break;};var $3322 = $3324;break;case 'Parser.Reply.value':var $3328=self.pst;var $3329=self.val;var self = $3328;switch(self._){case 'Parser.State.new':var $3331=self.err;var $3332=self.nam;var $3333=self.ini;var $3334=self.idx;var $3335=self.str;var _reply$pst$156 = Parser$State$new$(Parser$Error$maybe_combine$($3321,$3331),$3332,$3333,$3334,$3335);var self = _reply$pst$156;switch(self._){case 'Parser.State.new':var $3337=self.err;var _reply$162 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$156);var self = _reply$162;switch(self._){case 'Parser.Reply.error':var $3339=self.err;var self = $3337;switch(self._){case 'Maybe.some':var $3341=self.value;var $3342 = Parser$Reply$error$(Parser$Error$combine$($3341,$3339));var $3340 = $3342;break;case 'Maybe.none':var $3343 = Parser$Reply$error$($3339);var $3340 = $3343;break;};var $3338 = $3340;break;case 'Parser.Reply.value':var $3344=self.pst;var self = $3344;switch(self._){case 'Parser.State.new':var $3346=self.err;var $3347=self.nam;var $3348=self.ini;var $3349=self.idx;var $3350=self.str;var _reply$pst$170 = Parser$State$new$(Parser$Error$maybe_combine$($3337,$3346),$3347,$3348,$3349,$3350);var self = _reply$pst$170;switch(self._){case 'Parser.State.new':var $3352=self.err;var _reply$176 = _body$1(Unit$new)(_reply$pst$170);var self = _reply$176;switch(self._){case 'Parser.Reply.error':var $3354=self.err;var self = $3352;switch(self._){case 'Maybe.some':var $3356=self.value;var $3357 = Parser$Reply$error$(Parser$Error$combine$($3356,$3354));var $3355 = $3357;break;case 'Maybe.none':var $3358 = Parser$Reply$error$($3354);var $3355 = $3358;break;};var $3353 = $3355;break;case 'Parser.Reply.value':var $3359=self.pst;var $3360=self.val;var self = $3359;switch(self._){case 'Parser.State.new':var $3362=self.err;var $3363=self.nam;var $3364=self.ini;var $3365=self.idx;var $3366=self.str;var _reply$pst$184 = Parser$State$new$(Parser$Error$maybe_combine$($3352,$3362),$3363,$3364,$3365,$3366);var _term$185 = Kind$Term$ref$("Nat.for");var _term$186 = Kind$Term$app$(_term$185,Kind$Term$hol$(Bits$e));var _term$187 = Kind$Term$app$(_term$186,Kind$Term$ref$($3190));var _term$188 = Kind$Term$app$(_term$187,$3267);var _term$189 = Kind$Term$app$(_term$188,$3298);var _lamb$190 = Kind$Term$lam$($3236,(_e$190=>{var $3368 = Kind$Term$lam$($3190,(_s$191=>{var $3369 = $3329;return $3369;}));return $3368;}));var _term$191 = Kind$Term$app$(_term$189,_lamb$190);var _term$192 = Kind$Term$let$($3190,_term$191,(_x$192=>{var $3370 = $3360;return $3370;}));var $3367 = Parser$Reply$value$(_reply$pst$184,_term$192);var $3361 = $3367;break;};var $3353 = $3361;break;};var $3351 = $3353;break;};var $3345 = $3351;break;};var $3338 = $3345;break;};var $3336 = $3338;break;};var $3330 = $3336;break;};var $3322 = $3330;break;};var $3320 = $3322;break;};var $3314 = $3320;break;};var $3307 = $3314;break;};var $3305 = $3307;break;};var $3299 = $3305;break;};var $3291 = $3299;break;};var $3289 = $3291;break;};var $3283 = $3289;break;};var $3276 = $3283;break;};var $3274 = $3276;break;};var $3268 = $3274;break;};var $3260 = $3268;break;};var $3258 = $3260;break;};var $3252 = $3258;break;};var $3245 = $3252;break;};var $3243 = $3245;break;};var $3237 = $3243;break;};var $3229 = $3237;break;};var $3227 = $3229;break;};var $3221 = $3227;break;};var $3214 = $3221;break;};var $3212 = $3214;break;};var $3206 = $3212;break;};var $3199 = $3206;break;};var $3197 = $3199;break;};var $3191 = $3197;break;};var $3183 = $3191;break;};var $3181 = $3183;break;};var $3175 = $3181;break;};var $3168 = $3175;break;};var $3166 = $3168;break;};return $3166;}));return $3165;};
  const Kind$Parser$letforrange$nat = x0=>Kind$Parser$letforrange$nat$(x0);
  function Kind$Parser$letforrange$nat$with$(_body$1){var $3371 = Kind$Parser$block("for")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $3373=self.err;var _reply$8 = Kind$Parser$text$("for ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $3375=self.err;var self = $3373;switch(self._){case 'Maybe.some':var $3377=self.value;var $3378 = Parser$Reply$error$(Parser$Error$combine$($3377,$3375));var $3376 = $3378;break;case 'Maybe.none':var $3379 = Parser$Reply$error$($3375);var $3376 = $3379;break;};var $3374 = $3376;break;case 'Parser.Reply.value':var $3380=self.pst;var self = $3380;switch(self._){case 'Parser.State.new':var $3382=self.err;var $3383=self.nam;var $3384=self.ini;var $3385=self.idx;var $3386=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($3373,$3382),$3383,$3384,$3385,$3386);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $3388=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $3390=self.err;var self = $3388;switch(self._){case 'Maybe.some':var $3392=self.value;var $3393 = Parser$Reply$error$(Parser$Error$combine$($3392,$3390));var $3391 = $3393;break;case 'Maybe.none':var $3394 = Parser$Reply$error$($3390);var $3391 = $3394;break;};var $3389 = $3391;break;case 'Parser.Reply.value':var $3395=self.pst;var $3396=self.val;var self = $3395;switch(self._){case 'Parser.State.new':var $3398=self.err;var $3399=self.nam;var $3400=self.ini;var $3401=self.idx;var $3402=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($3388,$3398),$3399,$3400,$3401,$3402);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $3404=self.err;var _reply$36 = Kind$Parser$text$("from",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $3406=self.err;var self = $3404;switch(self._){case 'Maybe.some':var $3408=self.value;var $3409 = Parser$Reply$error$(Parser$Error$combine$($3408,$3406));var $3407 = $3409;break;case 'Maybe.none':var $3410 = Parser$Reply$error$($3406);var $3407 = $3410;break;};var $3405 = $3407;break;case 'Parser.Reply.value':var $3411=self.pst;var self = $3411;switch(self._){case 'Parser.State.new':var $3413=self.err;var $3414=self.nam;var $3415=self.ini;var $3416=self.idx;var $3417=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($3404,$3413),$3414,$3415,$3416,$3417);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $3419=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $3421=self.err;var self = $3419;switch(self._){case 'Maybe.some':var $3423=self.value;var $3424 = Parser$Reply$error$(Parser$Error$combine$($3423,$3421));var $3422 = $3424;break;case 'Maybe.none':var $3425 = Parser$Reply$error$($3421);var $3422 = $3425;break;};var $3420 = $3422;break;case 'Parser.Reply.value':var $3426=self.pst;var $3427=self.val;var self = $3426;switch(self._){case 'Parser.State.new':var $3429=self.err;var $3430=self.nam;var $3431=self.ini;var $3432=self.idx;var $3433=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($3419,$3429),$3430,$3431,$3432,$3433);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $3435=self.err;var _reply$64 = Kind$Parser$text$("to",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $3437=self.err;var self = $3435;switch(self._){case 'Maybe.some':var $3439=self.value;var $3440 = Parser$Reply$error$(Parser$Error$combine$($3439,$3437));var $3438 = $3440;break;case 'Maybe.none':var $3441 = Parser$Reply$error$($3437);var $3438 = $3441;break;};var $3436 = $3438;break;case 'Parser.Reply.value':var $3442=self.pst;var self = $3442;switch(self._){case 'Parser.State.new':var $3444=self.err;var $3445=self.nam;var $3446=self.ini;var $3447=self.idx;var $3448=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($3435,$3444),$3445,$3446,$3447,$3448);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $3450=self.err;var _reply$78 = Kind$Parser$term(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $3452=self.err;var self = $3450;switch(self._){case 'Maybe.some':var $3454=self.value;var $3455 = Parser$Reply$error$(Parser$Error$combine$($3454,$3452));var $3453 = $3455;break;case 'Maybe.none':var $3456 = Parser$Reply$error$($3452);var $3453 = $3456;break;};var $3451 = $3453;break;case 'Parser.Reply.value':var $3457=self.pst;var $3458=self.val;var self = $3457;switch(self._){case 'Parser.State.new':var $3460=self.err;var $3461=self.nam;var $3462=self.ini;var $3463=self.idx;var $3464=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($3450,$3460),$3461,$3462,$3463,$3464);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $3466=self.err;var _reply$92 = Kind$Parser$text$("with ",_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $3468=self.err;var self = $3466;switch(self._){case 'Maybe.some':var $3470=self.value;var $3471 = Parser$Reply$error$(Parser$Error$combine$($3470,$3468));var $3469 = $3471;break;case 'Maybe.none':var $3472 = Parser$Reply$error$($3468);var $3469 = $3472;break;};var $3467 = $3469;break;case 'Parser.Reply.value':var $3473=self.pst;var self = $3473;switch(self._){case 'Parser.State.new':var $3475=self.err;var $3476=self.nam;var $3477=self.ini;var $3478=self.idx;var $3479=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($3466,$3475),$3476,$3477,$3478,$3479);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $3481=self.err;var _reply$106 = Kind$Parser$name1$(_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $3483=self.err;var self = $3481;switch(self._){case 'Maybe.some':var $3485=self.value;var $3486 = Parser$Reply$error$(Parser$Error$combine$($3485,$3483));var $3484 = $3486;break;case 'Maybe.none':var $3487 = Parser$Reply$error$($3483);var $3484 = $3487;break;};var $3482 = $3484;break;case 'Parser.Reply.value':var $3488=self.pst;var $3489=self.val;var self = $3488;switch(self._){case 'Parser.State.new':var $3491=self.err;var $3492=self.nam;var $3493=self.ini;var $3494=self.idx;var $3495=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($3481,$3491),$3492,$3493,$3494,$3495);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $3497=self.err;var _reply$120 = Kind$Parser$text$(":",_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $3499=self.err;var self = $3497;switch(self._){case 'Maybe.some':var $3501=self.value;var $3502 = Parser$Reply$error$(Parser$Error$combine$($3501,$3499));var $3500 = $3502;break;case 'Maybe.none':var $3503 = Parser$Reply$error$($3499);var $3500 = $3503;break;};var $3498 = $3500;break;case 'Parser.Reply.value':var $3504=self.pst;var self = $3504;switch(self._){case 'Parser.State.new':var $3506=self.err;var $3507=self.nam;var $3508=self.ini;var $3509=self.idx;var $3510=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($3497,$3506),$3507,$3508,$3509,$3510);var self = _reply$pst$128;switch(self._){case 'Parser.State.new':var $3512=self.err;var _reply$134 = Kind$Parser$term(_reply$pst$128);var self = _reply$134;switch(self._){case 'Parser.Reply.error':var $3514=self.err;var self = $3512;switch(self._){case 'Maybe.some':var $3516=self.value;var $3517 = Parser$Reply$error$(Parser$Error$combine$($3516,$3514));var $3515 = $3517;break;case 'Maybe.none':var $3518 = Parser$Reply$error$($3514);var $3515 = $3518;break;};var $3513 = $3515;break;case 'Parser.Reply.value':var $3519=self.pst;var $3520=self.val;var self = $3519;switch(self._){case 'Parser.State.new':var $3522=self.err;var $3523=self.nam;var $3524=self.ini;var $3525=self.idx;var $3526=self.str;var _reply$pst$142 = Parser$State$new$(Parser$Error$maybe_combine$($3512,$3522),$3523,$3524,$3525,$3526);var self = _reply$pst$142;switch(self._){case 'Parser.State.new':var $3528=self.err;var _reply$148 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$142);var self = _reply$148;switch(self._){case 'Parser.Reply.error':var $3530=self.err;var self = $3528;switch(self._){case 'Maybe.some':var $3532=self.value;var $3533 = Parser$Reply$error$(Parser$Error$combine$($3532,$3530));var $3531 = $3533;break;case 'Maybe.none':var $3534 = Parser$Reply$error$($3530);var $3531 = $3534;break;};var $3529 = $3531;break;case 'Parser.Reply.value':var $3535=self.pst;var self = $3535;switch(self._){case 'Parser.State.new':var $3537=self.err;var $3538=self.nam;var $3539=self.ini;var $3540=self.idx;var $3541=self.str;var _reply$pst$156 = Parser$State$new$(Parser$Error$maybe_combine$($3528,$3537),$3538,$3539,$3540,$3541);var self = _reply$pst$156;switch(self._){case 'Parser.State.new':var $3543=self.err;var _reply$162 = _body$1(Unit$new)(_reply$pst$156);var self = _reply$162;switch(self._){case 'Parser.Reply.error':var $3545=self.err;var self = $3543;switch(self._){case 'Maybe.some':var $3547=self.value;var $3548 = Parser$Reply$error$(Parser$Error$combine$($3547,$3545));var $3546 = $3548;break;case 'Maybe.none':var $3549 = Parser$Reply$error$($3545);var $3546 = $3549;break;};var $3544 = $3546;break;case 'Parser.Reply.value':var $3550=self.pst;var $3551=self.val;var self = $3550;switch(self._){case 'Parser.State.new':var $3553=self.err;var $3554=self.nam;var $3555=self.ini;var $3556=self.idx;var $3557=self.str;var _reply$pst$170 = Parser$State$new$(Parser$Error$maybe_combine$($3543,$3553),$3554,$3555,$3556,$3557);var _term$171 = Kind$Term$ref$("Nat.for");var _term$172 = Kind$Term$app$(_term$171,Kind$Term$hol$(Bits$e));var _term$173 = Kind$Term$app$(_term$172,Kind$Term$ref$($3489));var _term$174 = Kind$Term$app$(_term$173,$3427);var _term$175 = Kind$Term$app$(_term$174,$3458);var _lamb$176 = Kind$Term$lam$($3396,(_e$176=>{var $3559 = Kind$Term$lam$($3489,(_s$177=>{var $3560 = $3520;return $3560;}));return $3559;}));var _term$177 = Kind$Term$app$(_term$175,_lamb$176);var _term$178 = Kind$Term$let$($3489,_term$177,(_x$178=>{var $3561 = $3551;return $3561;}));var $3558 = Parser$Reply$value$(_reply$pst$170,_term$178);var $3552 = $3558;break;};var $3544 = $3552;break;};var $3542 = $3544;break;};var $3536 = $3542;break;};var $3529 = $3536;break;};var $3527 = $3529;break;};var $3521 = $3527;break;};var $3513 = $3521;break;};var $3511 = $3513;break;};var $3505 = $3511;break;};var $3498 = $3505;break;};var $3496 = $3498;break;};var $3490 = $3496;break;};var $3482 = $3490;break;};var $3480 = $3482;break;};var $3474 = $3480;break;};var $3467 = $3474;break;};var $3465 = $3467;break;};var $3459 = $3465;break;};var $3451 = $3459;break;};var $3449 = $3451;break;};var $3443 = $3449;break;};var $3436 = $3443;break;};var $3434 = $3436;break;};var $3428 = $3434;break;};var $3420 = $3428;break;};var $3418 = $3420;break;};var $3412 = $3418;break;};var $3405 = $3412;break;};var $3403 = $3405;break;};var $3397 = $3403;break;};var $3389 = $3397;break;};var $3387 = $3389;break;};var $3381 = $3387;break;};var $3374 = $3381;break;};var $3372 = $3374;break;};return $3372;}));return $3371;};
  const Kind$Parser$letforrange$nat$with = x0=>Kind$Parser$letforrange$nat$with$(x0);
  function Kind$Parser$letforin$(_body$1){var $3562 = Kind$Parser$block("let-for")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $3564=self.err;var _reply$8 = Kind$Parser$text$("let ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $3566=self.err;var self = $3564;switch(self._){case 'Maybe.some':var $3568=self.value;var $3569 = Parser$Reply$error$(Parser$Error$combine$($3568,$3566));var $3567 = $3569;break;case 'Maybe.none':var $3570 = Parser$Reply$error$($3566);var $3567 = $3570;break;};var $3565 = $3567;break;case 'Parser.Reply.value':var $3571=self.pst;var self = $3571;switch(self._){case 'Parser.State.new':var $3573=self.err;var $3574=self.nam;var $3575=self.ini;var $3576=self.idx;var $3577=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($3564,$3573),$3574,$3575,$3576,$3577);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $3579=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $3581=self.err;var self = $3579;switch(self._){case 'Maybe.some':var $3583=self.value;var $3584 = Parser$Reply$error$(Parser$Error$combine$($3583,$3581));var $3582 = $3584;break;case 'Maybe.none':var $3585 = Parser$Reply$error$($3581);var $3582 = $3585;break;};var $3580 = $3582;break;case 'Parser.Reply.value':var $3586=self.pst;var $3587=self.val;var self = $3586;switch(self._){case 'Parser.State.new':var $3589=self.err;var $3590=self.nam;var $3591=self.ini;var $3592=self.idx;var $3593=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($3579,$3589),$3590,$3591,$3592,$3593);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $3595=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $3597=self.err;var self = $3595;switch(self._){case 'Maybe.some':var $3599=self.value;var $3600 = Parser$Reply$error$(Parser$Error$combine$($3599,$3597));var $3598 = $3600;break;case 'Maybe.none':var $3601 = Parser$Reply$error$($3597);var $3598 = $3601;break;};var $3596 = $3598;break;case 'Parser.Reply.value':var $3602=self.pst;var self = $3602;switch(self._){case 'Parser.State.new':var $3604=self.err;var $3605=self.nam;var $3606=self.ini;var $3607=self.idx;var $3608=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($3595,$3604),$3605,$3606,$3607,$3608);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $3610=self.err;var _reply$50 = Kind$Parser$text$("for ",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $3612=self.err;var self = $3610;switch(self._){case 'Maybe.some':var $3614=self.value;var $3615 = Parser$Reply$error$(Parser$Error$combine$($3614,$3612));var $3613 = $3615;break;case 'Maybe.none':var $3616 = Parser$Reply$error$($3612);var $3613 = $3616;break;};var $3611 = $3613;break;case 'Parser.Reply.value':var $3617=self.pst;var self = $3617;switch(self._){case 'Parser.State.new':var $3619=self.err;var $3620=self.nam;var $3621=self.ini;var $3622=self.idx;var $3623=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($3610,$3619),$3620,$3621,$3622,$3623);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $3625=self.err;var _reply$64 = Kind$Parser$name1$(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $3627=self.err;var self = $3625;switch(self._){case 'Maybe.some':var $3629=self.value;var $3630 = Parser$Reply$error$(Parser$Error$combine$($3629,$3627));var $3628 = $3630;break;case 'Maybe.none':var $3631 = Parser$Reply$error$($3627);var $3628 = $3631;break;};var $3626 = $3628;break;case 'Parser.Reply.value':var $3632=self.pst;var $3633=self.val;var self = $3632;switch(self._){case 'Parser.State.new':var $3635=self.err;var $3636=self.nam;var $3637=self.ini;var $3638=self.idx;var $3639=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($3625,$3635),$3636,$3637,$3638,$3639);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $3641=self.err;var _reply$78 = Kind$Parser$text$("in",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $3643=self.err;var self = $3641;switch(self._){case 'Maybe.some':var $3645=self.value;var $3646 = Parser$Reply$error$(Parser$Error$combine$($3645,$3643));var $3644 = $3646;break;case 'Maybe.none':var $3647 = Parser$Reply$error$($3643);var $3644 = $3647;break;};var $3642 = $3644;break;case 'Parser.Reply.value':var $3648=self.pst;var self = $3648;switch(self._){case 'Parser.State.new':var $3650=self.err;var $3651=self.nam;var $3652=self.ini;var $3653=self.idx;var $3654=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($3641,$3650),$3651,$3652,$3653,$3654);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $3656=self.err;var _reply$92 = Kind$Parser$term(_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $3658=self.err;var self = $3656;switch(self._){case 'Maybe.some':var $3660=self.value;var $3661 = Parser$Reply$error$(Parser$Error$combine$($3660,$3658));var $3659 = $3661;break;case 'Maybe.none':var $3662 = Parser$Reply$error$($3658);var $3659 = $3662;break;};var $3657 = $3659;break;case 'Parser.Reply.value':var $3663=self.pst;var $3664=self.val;var self = $3663;switch(self._){case 'Parser.State.new':var $3666=self.err;var $3667=self.nam;var $3668=self.ini;var $3669=self.idx;var $3670=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($3656,$3666),$3667,$3668,$3669,$3670);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $3672=self.err;var _reply$106 = Kind$Parser$text$(":",_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $3674=self.err;var self = $3672;switch(self._){case 'Maybe.some':var $3676=self.value;var $3677 = Parser$Reply$error$(Parser$Error$combine$($3676,$3674));var $3675 = $3677;break;case 'Maybe.none':var $3678 = Parser$Reply$error$($3674);var $3675 = $3678;break;};var $3673 = $3675;break;case 'Parser.Reply.value':var $3679=self.pst;var self = $3679;switch(self._){case 'Parser.State.new':var $3681=self.err;var $3682=self.nam;var $3683=self.ini;var $3684=self.idx;var $3685=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($3672,$3681),$3682,$3683,$3684,$3685);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $3687=self.err;var _reply$120 = Kind$Parser$term(_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $3689=self.err;var self = $3687;switch(self._){case 'Maybe.some':var $3691=self.value;var $3692 = Parser$Reply$error$(Parser$Error$combine$($3691,$3689));var $3690 = $3692;break;case 'Maybe.none':var $3693 = Parser$Reply$error$($3689);var $3690 = $3693;break;};var $3688 = $3690;break;case 'Parser.Reply.value':var $3694=self.pst;var $3695=self.val;var self = $3694;switch(self._){case 'Parser.State.new':var $3697=self.err;var $3698=self.nam;var $3699=self.ini;var $3700=self.idx;var $3701=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($3687,$3697),$3698,$3699,$3700,$3701);var self = _reply$pst$128;switch(self._){case 'Parser.State.new':var $3703=self.err;var _reply$134 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$128);var self = _reply$134;switch(self._){case 'Parser.Reply.error':var $3705=self.err;var self = $3703;switch(self._){case 'Maybe.some':var $3707=self.value;var $3708 = Parser$Reply$error$(Parser$Error$combine$($3707,$3705));var $3706 = $3708;break;case 'Maybe.none':var $3709 = Parser$Reply$error$($3705);var $3706 = $3709;break;};var $3704 = $3706;break;case 'Parser.Reply.value':var $3710=self.pst;var self = $3710;switch(self._){case 'Parser.State.new':var $3712=self.err;var $3713=self.nam;var $3714=self.ini;var $3715=self.idx;var $3716=self.str;var _reply$pst$142 = Parser$State$new$(Parser$Error$maybe_combine$($3703,$3712),$3713,$3714,$3715,$3716);var self = _reply$pst$142;switch(self._){case 'Parser.State.new':var $3718=self.err;var _reply$148 = _body$1(Unit$new)(_reply$pst$142);var self = _reply$148;switch(self._){case 'Parser.Reply.error':var $3720=self.err;var self = $3718;switch(self._){case 'Maybe.some':var $3722=self.value;var $3723 = Parser$Reply$error$(Parser$Error$combine$($3722,$3720));var $3721 = $3723;break;case 'Maybe.none':var $3724 = Parser$Reply$error$($3720);var $3721 = $3724;break;};var $3719 = $3721;break;case 'Parser.Reply.value':var $3725=self.pst;var $3726=self.val;var self = $3725;switch(self._){case 'Parser.State.new':var $3728=self.err;var $3729=self.nam;var $3730=self.ini;var $3731=self.idx;var $3732=self.str;var _reply$pst$156 = Parser$State$new$(Parser$Error$maybe_combine$($3718,$3728),$3729,$3730,$3731,$3732);var _term$157 = Kind$Term$ref$("List.for");var _term$158 = Kind$Term$app$(_term$157,Kind$Term$hol$(Bits$e));var _term$159 = Kind$Term$app$(_term$158,$3664);var _term$160 = Kind$Term$app$(_term$159,Kind$Term$hol$(Bits$e));var _term$161 = Kind$Term$app$(_term$160,Kind$Term$ref$($3587));var _lamb$162 = Kind$Term$lam$($3633,(_i$162=>{var $3734 = Kind$Term$lam$($3587,(_x$163=>{var $3735 = $3695;return $3735;}));return $3734;}));var _term$163 = Kind$Term$app$(_term$161,_lamb$162);var _term$164 = Kind$Term$let$($3587,_term$163,(_x$164=>{var $3736 = $3726;return $3736;}));var $3733 = Parser$Reply$value$(_reply$pst$156,_term$164);var $3727 = $3733;break;};var $3719 = $3727;break;};var $3717 = $3719;break;};var $3711 = $3717;break;};var $3704 = $3711;break;};var $3702 = $3704;break;};var $3696 = $3702;break;};var $3688 = $3696;break;};var $3686 = $3688;break;};var $3680 = $3686;break;};var $3673 = $3680;break;};var $3671 = $3673;break;};var $3665 = $3671;break;};var $3657 = $3665;break;};var $3655 = $3657;break;};var $3649 = $3655;break;};var $3642 = $3649;break;};var $3640 = $3642;break;};var $3634 = $3640;break;};var $3626 = $3634;break;};var $3624 = $3626;break;};var $3618 = $3624;break;};var $3611 = $3618;break;};var $3609 = $3611;break;};var $3603 = $3609;break;};var $3596 = $3603;break;};var $3594 = $3596;break;};var $3588 = $3594;break;};var $3580 = $3588;break;};var $3578 = $3580;break;};var $3572 = $3578;break;};var $3565 = $3572;break;};var $3563 = $3565;break;};return $3563;}));return $3562;};
  const Kind$Parser$letforin = x0=>Kind$Parser$letforin$(x0);
  function Kind$Parser$letforin$with$(_body$1){var $3737 = Kind$Parser$block("for")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $3739=self.err;var _reply$8 = Kind$Parser$text$("for ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $3741=self.err;var self = $3739;switch(self._){case 'Maybe.some':var $3743=self.value;var $3744 = Parser$Reply$error$(Parser$Error$combine$($3743,$3741));var $3742 = $3744;break;case 'Maybe.none':var $3745 = Parser$Reply$error$($3741);var $3742 = $3745;break;};var $3740 = $3742;break;case 'Parser.Reply.value':var $3746=self.pst;var self = $3746;switch(self._){case 'Parser.State.new':var $3748=self.err;var $3749=self.nam;var $3750=self.ini;var $3751=self.idx;var $3752=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($3739,$3748),$3749,$3750,$3751,$3752);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $3754=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $3756=self.err;var self = $3754;switch(self._){case 'Maybe.some':var $3758=self.value;var $3759 = Parser$Reply$error$(Parser$Error$combine$($3758,$3756));var $3757 = $3759;break;case 'Maybe.none':var $3760 = Parser$Reply$error$($3756);var $3757 = $3760;break;};var $3755 = $3757;break;case 'Parser.Reply.value':var $3761=self.pst;var $3762=self.val;var self = $3761;switch(self._){case 'Parser.State.new':var $3764=self.err;var $3765=self.nam;var $3766=self.ini;var $3767=self.idx;var $3768=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($3754,$3764),$3765,$3766,$3767,$3768);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $3770=self.err;var _reply$36 = Kind$Parser$text$("in",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $3772=self.err;var self = $3770;switch(self._){case 'Maybe.some':var $3774=self.value;var $3775 = Parser$Reply$error$(Parser$Error$combine$($3774,$3772));var $3773 = $3775;break;case 'Maybe.none':var $3776 = Parser$Reply$error$($3772);var $3773 = $3776;break;};var $3771 = $3773;break;case 'Parser.Reply.value':var $3777=self.pst;var self = $3777;switch(self._){case 'Parser.State.new':var $3779=self.err;var $3780=self.nam;var $3781=self.ini;var $3782=self.idx;var $3783=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($3770,$3779),$3780,$3781,$3782,$3783);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $3785=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $3787=self.err;var self = $3785;switch(self._){case 'Maybe.some':var $3789=self.value;var $3790 = Parser$Reply$error$(Parser$Error$combine$($3789,$3787));var $3788 = $3790;break;case 'Maybe.none':var $3791 = Parser$Reply$error$($3787);var $3788 = $3791;break;};var $3786 = $3788;break;case 'Parser.Reply.value':var $3792=self.pst;var $3793=self.val;var self = $3792;switch(self._){case 'Parser.State.new':var $3795=self.err;var $3796=self.nam;var $3797=self.ini;var $3798=self.idx;var $3799=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($3785,$3795),$3796,$3797,$3798,$3799);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $3801=self.err;var _reply$64 = Kind$Parser$text$("with",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $3803=self.err;var self = $3801;switch(self._){case 'Maybe.some':var $3805=self.value;var $3806 = Parser$Reply$error$(Parser$Error$combine$($3805,$3803));var $3804 = $3806;break;case 'Maybe.none':var $3807 = Parser$Reply$error$($3803);var $3804 = $3807;break;};var $3802 = $3804;break;case 'Parser.Reply.value':var $3808=self.pst;var self = $3808;switch(self._){case 'Parser.State.new':var $3810=self.err;var $3811=self.nam;var $3812=self.ini;var $3813=self.idx;var $3814=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($3801,$3810),$3811,$3812,$3813,$3814);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $3816=self.err;var _reply$78 = Kind$Parser$name1$(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $3818=self.err;var self = $3816;switch(self._){case 'Maybe.some':var $3820=self.value;var $3821 = Parser$Reply$error$(Parser$Error$combine$($3820,$3818));var $3819 = $3821;break;case 'Maybe.none':var $3822 = Parser$Reply$error$($3818);var $3819 = $3822;break;};var $3817 = $3819;break;case 'Parser.Reply.value':var $3823=self.pst;var $3824=self.val;var self = $3823;switch(self._){case 'Parser.State.new':var $3826=self.err;var $3827=self.nam;var $3828=self.ini;var $3829=self.idx;var $3830=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($3816,$3826),$3827,$3828,$3829,$3830);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $3832=self.err;var _reply$92 = Kind$Parser$text$(":",_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $3834=self.err;var self = $3832;switch(self._){case 'Maybe.some':var $3836=self.value;var $3837 = Parser$Reply$error$(Parser$Error$combine$($3836,$3834));var $3835 = $3837;break;case 'Maybe.none':var $3838 = Parser$Reply$error$($3834);var $3835 = $3838;break;};var $3833 = $3835;break;case 'Parser.Reply.value':var $3839=self.pst;var self = $3839;switch(self._){case 'Parser.State.new':var $3841=self.err;var $3842=self.nam;var $3843=self.ini;var $3844=self.idx;var $3845=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($3832,$3841),$3842,$3843,$3844,$3845);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $3847=self.err;var _reply$106 = Kind$Parser$term(_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $3849=self.err;var self = $3847;switch(self._){case 'Maybe.some':var $3851=self.value;var $3852 = Parser$Reply$error$(Parser$Error$combine$($3851,$3849));var $3850 = $3852;break;case 'Maybe.none':var $3853 = Parser$Reply$error$($3849);var $3850 = $3853;break;};var $3848 = $3850;break;case 'Parser.Reply.value':var $3854=self.pst;var $3855=self.val;var self = $3854;switch(self._){case 'Parser.State.new':var $3857=self.err;var $3858=self.nam;var $3859=self.ini;var $3860=self.idx;var $3861=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($3847,$3857),$3858,$3859,$3860,$3861);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $3863=self.err;var _reply$120 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $3865=self.err;var self = $3863;switch(self._){case 'Maybe.some':var $3867=self.value;var $3868 = Parser$Reply$error$(Parser$Error$combine$($3867,$3865));var $3866 = $3868;break;case 'Maybe.none':var $3869 = Parser$Reply$error$($3865);var $3866 = $3869;break;};var $3864 = $3866;break;case 'Parser.Reply.value':var $3870=self.pst;var self = $3870;switch(self._){case 'Parser.State.new':var $3872=self.err;var $3873=self.nam;var $3874=self.ini;var $3875=self.idx;var $3876=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($3863,$3872),$3873,$3874,$3875,$3876);var self = _reply$pst$128;switch(self._){case 'Parser.State.new':var $3878=self.err;var _reply$134 = _body$1(Unit$new)(_reply$pst$128);var self = _reply$134;switch(self._){case 'Parser.Reply.error':var $3880=self.err;var self = $3878;switch(self._){case 'Maybe.some':var $3882=self.value;var $3883 = Parser$Reply$error$(Parser$Error$combine$($3882,$3880));var $3881 = $3883;break;case 'Maybe.none':var $3884 = Parser$Reply$error$($3880);var $3881 = $3884;break;};var $3879 = $3881;break;case 'Parser.Reply.value':var $3885=self.pst;var $3886=self.val;var self = $3885;switch(self._){case 'Parser.State.new':var $3888=self.err;var $3889=self.nam;var $3890=self.ini;var $3891=self.idx;var $3892=self.str;var _reply$pst$142 = Parser$State$new$(Parser$Error$maybe_combine$($3878,$3888),$3889,$3890,$3891,$3892);var _term$143 = Kind$Term$ref$("List.for");var _term$144 = Kind$Term$app$(_term$143,Kind$Term$hol$(Bits$e));var _term$145 = Kind$Term$app$(_term$144,$3793);var _term$146 = Kind$Term$app$(_term$145,Kind$Term$hol$(Bits$e));var _term$147 = Kind$Term$app$(_term$146,Kind$Term$ref$($3824));var _lamb$148 = Kind$Term$lam$($3762,(_i$148=>{var $3894 = Kind$Term$lam$($3824,(_x$149=>{var $3895 = $3855;return $3895;}));return $3894;}));var _term$149 = Kind$Term$app$(_term$147,_lamb$148);var _term$150 = Kind$Term$let$($3824,_term$149,(_x$150=>{var $3896 = $3886;return $3896;}));var $3893 = Parser$Reply$value$(_reply$pst$142,_term$150);var $3887 = $3893;break;};var $3879 = $3887;break;};var $3877 = $3879;break;};var $3871 = $3877;break;};var $3864 = $3871;break;};var $3862 = $3864;break;};var $3856 = $3862;break;};var $3848 = $3856;break;};var $3846 = $3848;break;};var $3840 = $3846;break;};var $3833 = $3840;break;};var $3831 = $3833;break;};var $3825 = $3831;break;};var $3817 = $3825;break;};var $3815 = $3817;break;};var $3809 = $3815;break;};var $3802 = $3809;break;};var $3800 = $3802;break;};var $3794 = $3800;break;};var $3786 = $3794;break;};var $3784 = $3786;break;};var $3778 = $3784;break;};var $3771 = $3778;break;};var $3769 = $3771;break;};var $3763 = $3769;break;};var $3755 = $3763;break;};var $3753 = $3755;break;};var $3747 = $3753;break;};var $3740 = $3747;break;};var $3738 = $3740;break;};return $3738;}));return $3737;};
  const Kind$Parser$letforin$with = x0=>Kind$Parser$letforin$with$(x0);
  function Kind$Parser$letforinmap$(_body$1){var $3897 = Kind$Parser$block("let-for-map")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $3899=self.err;var _reply$8 = Kind$Parser$text$("let ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $3901=self.err;var self = $3899;switch(self._){case 'Maybe.some':var $3903=self.value;var $3904 = Parser$Reply$error$(Parser$Error$combine$($3903,$3901));var $3902 = $3904;break;case 'Maybe.none':var $3905 = Parser$Reply$error$($3901);var $3902 = $3905;break;};var $3900 = $3902;break;case 'Parser.Reply.value':var $3906=self.pst;var self = $3906;switch(self._){case 'Parser.State.new':var $3908=self.err;var $3909=self.nam;var $3910=self.ini;var $3911=self.idx;var $3912=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($3899,$3908),$3909,$3910,$3911,$3912);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $3914=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $3916=self.err;var self = $3914;switch(self._){case 'Maybe.some':var $3918=self.value;var $3919 = Parser$Reply$error$(Parser$Error$combine$($3918,$3916));var $3917 = $3919;break;case 'Maybe.none':var $3920 = Parser$Reply$error$($3916);var $3917 = $3920;break;};var $3915 = $3917;break;case 'Parser.Reply.value':var $3921=self.pst;var $3922=self.val;var self = $3921;switch(self._){case 'Parser.State.new':var $3924=self.err;var $3925=self.nam;var $3926=self.ini;var $3927=self.idx;var $3928=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($3914,$3924),$3925,$3926,$3927,$3928);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $3930=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $3932=self.err;var self = $3930;switch(self._){case 'Maybe.some':var $3934=self.value;var $3935 = Parser$Reply$error$(Parser$Error$combine$($3934,$3932));var $3933 = $3935;break;case 'Maybe.none':var $3936 = Parser$Reply$error$($3932);var $3933 = $3936;break;};var $3931 = $3933;break;case 'Parser.Reply.value':var $3937=self.pst;var self = $3937;switch(self._){case 'Parser.State.new':var $3939=self.err;var $3940=self.nam;var $3941=self.ini;var $3942=self.idx;var $3943=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($3930,$3939),$3940,$3941,$3942,$3943);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $3945=self.err;var _reply$50 = Kind$Parser$text$("for ",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $3947=self.err;var self = $3945;switch(self._){case 'Maybe.some':var $3949=self.value;var $3950 = Parser$Reply$error$(Parser$Error$combine$($3949,$3947));var $3948 = $3950;break;case 'Maybe.none':var $3951 = Parser$Reply$error$($3947);var $3948 = $3951;break;};var $3946 = $3948;break;case 'Parser.Reply.value':var $3952=self.pst;var self = $3952;switch(self._){case 'Parser.State.new':var $3954=self.err;var $3955=self.nam;var $3956=self.ini;var $3957=self.idx;var $3958=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($3945,$3954),$3955,$3956,$3957,$3958);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $3960=self.err;var _reply$64 = Kind$Parser$name1$(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $3962=self.err;var self = $3960;switch(self._){case 'Maybe.some':var $3964=self.value;var $3965 = Parser$Reply$error$(Parser$Error$combine$($3964,$3962));var $3963 = $3965;break;case 'Maybe.none':var $3966 = Parser$Reply$error$($3962);var $3963 = $3966;break;};var $3961 = $3963;break;case 'Parser.Reply.value':var $3967=self.pst;var $3968=self.val;var self = $3967;switch(self._){case 'Parser.State.new':var $3970=self.err;var $3971=self.nam;var $3972=self.ini;var $3973=self.idx;var $3974=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($3960,$3970),$3971,$3972,$3973,$3974);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $3976=self.err;var _reply$78 = Kind$Parser$text$(":",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $3978=self.err;var self = $3976;switch(self._){case 'Maybe.some':var $3980=self.value;var $3981 = Parser$Reply$error$(Parser$Error$combine$($3980,$3978));var $3979 = $3981;break;case 'Maybe.none':var $3982 = Parser$Reply$error$($3978);var $3979 = $3982;break;};var $3977 = $3979;break;case 'Parser.Reply.value':var $3983=self.pst;var self = $3983;switch(self._){case 'Parser.State.new':var $3985=self.err;var $3986=self.nam;var $3987=self.ini;var $3988=self.idx;var $3989=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($3976,$3985),$3986,$3987,$3988,$3989);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $3991=self.err;var _reply$92 = Kind$Parser$name1$(_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $3993=self.err;var self = $3991;switch(self._){case 'Maybe.some':var $3995=self.value;var $3996 = Parser$Reply$error$(Parser$Error$combine$($3995,$3993));var $3994 = $3996;break;case 'Maybe.none':var $3997 = Parser$Reply$error$($3993);var $3994 = $3997;break;};var $3992 = $3994;break;case 'Parser.Reply.value':var $3998=self.pst;var $3999=self.val;var self = $3998;switch(self._){case 'Parser.State.new':var $4001=self.err;var $4002=self.nam;var $4003=self.ini;var $4004=self.idx;var $4005=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($3991,$4001),$4002,$4003,$4004,$4005);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $4007=self.err;var _reply$106 = Kind$Parser$text$("in",_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $4009=self.err;var self = $4007;switch(self._){case 'Maybe.some':var $4011=self.value;var $4012 = Parser$Reply$error$(Parser$Error$combine$($4011,$4009));var $4010 = $4012;break;case 'Maybe.none':var $4013 = Parser$Reply$error$($4009);var $4010 = $4013;break;};var $4008 = $4010;break;case 'Parser.Reply.value':var $4014=self.pst;var self = $4014;switch(self._){case 'Parser.State.new':var $4016=self.err;var $4017=self.nam;var $4018=self.ini;var $4019=self.idx;var $4020=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($4007,$4016),$4017,$4018,$4019,$4020);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $4022=self.err;var _reply$120 = Kind$Parser$term(_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $4024=self.err;var self = $4022;switch(self._){case 'Maybe.some':var $4026=self.value;var $4027 = Parser$Reply$error$(Parser$Error$combine$($4026,$4024));var $4025 = $4027;break;case 'Maybe.none':var $4028 = Parser$Reply$error$($4024);var $4025 = $4028;break;};var $4023 = $4025;break;case 'Parser.Reply.value':var $4029=self.pst;var $4030=self.val;var self = $4029;switch(self._){case 'Parser.State.new':var $4032=self.err;var $4033=self.nam;var $4034=self.ini;var $4035=self.idx;var $4036=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($4022,$4032),$4033,$4034,$4035,$4036);var self = _reply$pst$128;switch(self._){case 'Parser.State.new':var $4038=self.err;var _reply$134 = Kind$Parser$text$(":",_reply$pst$128);var self = _reply$134;switch(self._){case 'Parser.Reply.error':var $4040=self.err;var self = $4038;switch(self._){case 'Maybe.some':var $4042=self.value;var $4043 = Parser$Reply$error$(Parser$Error$combine$($4042,$4040));var $4041 = $4043;break;case 'Maybe.none':var $4044 = Parser$Reply$error$($4040);var $4041 = $4044;break;};var $4039 = $4041;break;case 'Parser.Reply.value':var $4045=self.pst;var self = $4045;switch(self._){case 'Parser.State.new':var $4047=self.err;var $4048=self.nam;var $4049=self.ini;var $4050=self.idx;var $4051=self.str;var _reply$pst$142 = Parser$State$new$(Parser$Error$maybe_combine$($4038,$4047),$4048,$4049,$4050,$4051);var self = _reply$pst$142;switch(self._){case 'Parser.State.new':var $4053=self.err;var _reply$148 = Kind$Parser$term(_reply$pst$142);var self = _reply$148;switch(self._){case 'Parser.Reply.error':var $4055=self.err;var self = $4053;switch(self._){case 'Maybe.some':var $4057=self.value;var $4058 = Parser$Reply$error$(Parser$Error$combine$($4057,$4055));var $4056 = $4058;break;case 'Maybe.none':var $4059 = Parser$Reply$error$($4055);var $4056 = $4059;break;};var $4054 = $4056;break;case 'Parser.Reply.value':var $4060=self.pst;var $4061=self.val;var self = $4060;switch(self._){case 'Parser.State.new':var $4063=self.err;var $4064=self.nam;var $4065=self.ini;var $4066=self.idx;var $4067=self.str;var _reply$pst$156 = Parser$State$new$(Parser$Error$maybe_combine$($4053,$4063),$4064,$4065,$4066,$4067);var self = _reply$pst$156;switch(self._){case 'Parser.State.new':var $4069=self.err;var _reply$162 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$156);var self = _reply$162;switch(self._){case 'Parser.Reply.error':var $4071=self.err;var self = $4069;switch(self._){case 'Maybe.some':var $4073=self.value;var $4074 = Parser$Reply$error$(Parser$Error$combine$($4073,$4071));var $4072 = $4074;break;case 'Maybe.none':var $4075 = Parser$Reply$error$($4071);var $4072 = $4075;break;};var $4070 = $4072;break;case 'Parser.Reply.value':var $4076=self.pst;var self = $4076;switch(self._){case 'Parser.State.new':var $4078=self.err;var $4079=self.nam;var $4080=self.ini;var $4081=self.idx;var $4082=self.str;var _reply$pst$170 = Parser$State$new$(Parser$Error$maybe_combine$($4069,$4078),$4079,$4080,$4081,$4082);var self = _reply$pst$170;switch(self._){case 'Parser.State.new':var $4084=self.err;var _reply$176 = _body$1(Unit$new)(_reply$pst$170);var self = _reply$176;switch(self._){case 'Parser.Reply.error':var $4086=self.err;var self = $4084;switch(self._){case 'Maybe.some':var $4088=self.value;var $4089 = Parser$Reply$error$(Parser$Error$combine$($4088,$4086));var $4087 = $4089;break;case 'Maybe.none':var $4090 = Parser$Reply$error$($4086);var $4087 = $4090;break;};var $4085 = $4087;break;case 'Parser.Reply.value':var $4091=self.pst;var $4092=self.val;var self = $4091;switch(self._){case 'Parser.State.new':var $4094=self.err;var $4095=self.nam;var $4096=self.ini;var $4097=self.idx;var $4098=self.str;var _reply$pst$184 = Parser$State$new$(Parser$Error$maybe_combine$($4084,$4094),$4095,$4096,$4097,$4098);var _term$185 = Kind$Term$ref$("BBT.for");var _term$186 = Kind$Term$app$(_term$185,Kind$Term$hol$(Bits$e));var _term$187 = Kind$Term$app$(_term$186,Kind$Term$hol$(Bits$e));var _term$188 = Kind$Term$app$(_term$187,$4030);var _term$189 = Kind$Term$app$(_term$188,Kind$Term$hol$(Bits$e));var _term$190 = Kind$Term$app$(_term$189,Kind$Term$ref$($3922));var _lamb$191 = Kind$Term$lam$($3968,(_k$191=>{var $4100 = Kind$Term$lam$($3999,(_i$192=>{var $4101 = Kind$Term$lam$($3922,(_x$193=>{var $4102 = $4061;return $4102;}));return $4101;}));return $4100;}));var _term$192 = Kind$Term$app$(_term$190,_lamb$191);var _term$193 = Kind$Term$let$($3922,_term$192,(_x$193=>{var $4103 = $4092;return $4103;}));var $4099 = Parser$Reply$value$(_reply$pst$184,_term$193);var $4093 = $4099;break;};var $4085 = $4093;break;};var $4083 = $4085;break;};var $4077 = $4083;break;};var $4070 = $4077;break;};var $4068 = $4070;break;};var $4062 = $4068;break;};var $4054 = $4062;break;};var $4052 = $4054;break;};var $4046 = $4052;break;};var $4039 = $4046;break;};var $4037 = $4039;break;};var $4031 = $4037;break;};var $4023 = $4031;break;};var $4021 = $4023;break;};var $4015 = $4021;break;};var $4008 = $4015;break;};var $4006 = $4008;break;};var $4000 = $4006;break;};var $3992 = $4000;break;};var $3990 = $3992;break;};var $3984 = $3990;break;};var $3977 = $3984;break;};var $3975 = $3977;break;};var $3969 = $3975;break;};var $3961 = $3969;break;};var $3959 = $3961;break;};var $3953 = $3959;break;};var $3946 = $3953;break;};var $3944 = $3946;break;};var $3938 = $3944;break;};var $3931 = $3938;break;};var $3929 = $3931;break;};var $3923 = $3929;break;};var $3915 = $3923;break;};var $3913 = $3915;break;};var $3907 = $3913;break;};var $3900 = $3907;break;};var $3898 = $3900;break;};return $3898;}));return $3897;};
  const Kind$Parser$letforinmap = x0=>Kind$Parser$letforinmap$(x0);
  function Kind$Parser$letforinmap$with$(_body$1){var $4104 = Kind$Parser$block("for-map")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $4106=self.err;var _reply$8 = Kind$Parser$text$("for ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $4108=self.err;var self = $4106;switch(self._){case 'Maybe.some':var $4110=self.value;var $4111 = Parser$Reply$error$(Parser$Error$combine$($4110,$4108));var $4109 = $4111;break;case 'Maybe.none':var $4112 = Parser$Reply$error$($4108);var $4109 = $4112;break;};var $4107 = $4109;break;case 'Parser.Reply.value':var $4113=self.pst;var self = $4113;switch(self._){case 'Parser.State.new':var $4115=self.err;var $4116=self.nam;var $4117=self.ini;var $4118=self.idx;var $4119=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($4106,$4115),$4116,$4117,$4118,$4119);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $4121=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $4123=self.err;var self = $4121;switch(self._){case 'Maybe.some':var $4125=self.value;var $4126 = Parser$Reply$error$(Parser$Error$combine$($4125,$4123));var $4124 = $4126;break;case 'Maybe.none':var $4127 = Parser$Reply$error$($4123);var $4124 = $4127;break;};var $4122 = $4124;break;case 'Parser.Reply.value':var $4128=self.pst;var $4129=self.val;var self = $4128;switch(self._){case 'Parser.State.new':var $4131=self.err;var $4132=self.nam;var $4133=self.ini;var $4134=self.idx;var $4135=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($4121,$4131),$4132,$4133,$4134,$4135);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $4137=self.err;var _reply$36 = Kind$Parser$text$(":",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $4139=self.err;var self = $4137;switch(self._){case 'Maybe.some':var $4141=self.value;var $4142 = Parser$Reply$error$(Parser$Error$combine$($4141,$4139));var $4140 = $4142;break;case 'Maybe.none':var $4143 = Parser$Reply$error$($4139);var $4140 = $4143;break;};var $4138 = $4140;break;case 'Parser.Reply.value':var $4144=self.pst;var self = $4144;switch(self._){case 'Parser.State.new':var $4146=self.err;var $4147=self.nam;var $4148=self.ini;var $4149=self.idx;var $4150=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($4137,$4146),$4147,$4148,$4149,$4150);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $4152=self.err;var _reply$50 = Kind$Parser$name1$(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $4154=self.err;var self = $4152;switch(self._){case 'Maybe.some':var $4156=self.value;var $4157 = Parser$Reply$error$(Parser$Error$combine$($4156,$4154));var $4155 = $4157;break;case 'Maybe.none':var $4158 = Parser$Reply$error$($4154);var $4155 = $4158;break;};var $4153 = $4155;break;case 'Parser.Reply.value':var $4159=self.pst;var $4160=self.val;var self = $4159;switch(self._){case 'Parser.State.new':var $4162=self.err;var $4163=self.nam;var $4164=self.ini;var $4165=self.idx;var $4166=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($4152,$4162),$4163,$4164,$4165,$4166);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $4168=self.err;var _reply$64 = Kind$Parser$text$("in",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $4170=self.err;var self = $4168;switch(self._){case 'Maybe.some':var $4172=self.value;var $4173 = Parser$Reply$error$(Parser$Error$combine$($4172,$4170));var $4171 = $4173;break;case 'Maybe.none':var $4174 = Parser$Reply$error$($4170);var $4171 = $4174;break;};var $4169 = $4171;break;case 'Parser.Reply.value':var $4175=self.pst;var self = $4175;switch(self._){case 'Parser.State.new':var $4177=self.err;var $4178=self.nam;var $4179=self.ini;var $4180=self.idx;var $4181=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($4168,$4177),$4178,$4179,$4180,$4181);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $4183=self.err;var _reply$78 = Kind$Parser$term(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $4185=self.err;var self = $4183;switch(self._){case 'Maybe.some':var $4187=self.value;var $4188 = Parser$Reply$error$(Parser$Error$combine$($4187,$4185));var $4186 = $4188;break;case 'Maybe.none':var $4189 = Parser$Reply$error$($4185);var $4186 = $4189;break;};var $4184 = $4186;break;case 'Parser.Reply.value':var $4190=self.pst;var $4191=self.val;var self = $4190;switch(self._){case 'Parser.State.new':var $4193=self.err;var $4194=self.nam;var $4195=self.ini;var $4196=self.idx;var $4197=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($4183,$4193),$4194,$4195,$4196,$4197);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $4199=self.err;var _reply$92 = Kind$Parser$text$("with",_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $4201=self.err;var self = $4199;switch(self._){case 'Maybe.some':var $4203=self.value;var $4204 = Parser$Reply$error$(Parser$Error$combine$($4203,$4201));var $4202 = $4204;break;case 'Maybe.none':var $4205 = Parser$Reply$error$($4201);var $4202 = $4205;break;};var $4200 = $4202;break;case 'Parser.Reply.value':var $4206=self.pst;var self = $4206;switch(self._){case 'Parser.State.new':var $4208=self.err;var $4209=self.nam;var $4210=self.ini;var $4211=self.idx;var $4212=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($4199,$4208),$4209,$4210,$4211,$4212);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $4214=self.err;var _reply$106 = Kind$Parser$name1$(_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $4216=self.err;var self = $4214;switch(self._){case 'Maybe.some':var $4218=self.value;var $4219 = Parser$Reply$error$(Parser$Error$combine$($4218,$4216));var $4217 = $4219;break;case 'Maybe.none':var $4220 = Parser$Reply$error$($4216);var $4217 = $4220;break;};var $4215 = $4217;break;case 'Parser.Reply.value':var $4221=self.pst;var $4222=self.val;var self = $4221;switch(self._){case 'Parser.State.new':var $4224=self.err;var $4225=self.nam;var $4226=self.ini;var $4227=self.idx;var $4228=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($4214,$4224),$4225,$4226,$4227,$4228);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $4230=self.err;var _reply$120 = Kind$Parser$text$(":",_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $4232=self.err;var self = $4230;switch(self._){case 'Maybe.some':var $4234=self.value;var $4235 = Parser$Reply$error$(Parser$Error$combine$($4234,$4232));var $4233 = $4235;break;case 'Maybe.none':var $4236 = Parser$Reply$error$($4232);var $4233 = $4236;break;};var $4231 = $4233;break;case 'Parser.Reply.value':var $4237=self.pst;var self = $4237;switch(self._){case 'Parser.State.new':var $4239=self.err;var $4240=self.nam;var $4241=self.ini;var $4242=self.idx;var $4243=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($4230,$4239),$4240,$4241,$4242,$4243);var self = _reply$pst$128;switch(self._){case 'Parser.State.new':var $4245=self.err;var _reply$134 = Kind$Parser$term(_reply$pst$128);var self = _reply$134;switch(self._){case 'Parser.Reply.error':var $4247=self.err;var self = $4245;switch(self._){case 'Maybe.some':var $4249=self.value;var $4250 = Parser$Reply$error$(Parser$Error$combine$($4249,$4247));var $4248 = $4250;break;case 'Maybe.none':var $4251 = Parser$Reply$error$($4247);var $4248 = $4251;break;};var $4246 = $4248;break;case 'Parser.Reply.value':var $4252=self.pst;var $4253=self.val;var self = $4252;switch(self._){case 'Parser.State.new':var $4255=self.err;var $4256=self.nam;var $4257=self.ini;var $4258=self.idx;var $4259=self.str;var _reply$pst$142 = Parser$State$new$(Parser$Error$maybe_combine$($4245,$4255),$4256,$4257,$4258,$4259);var self = _reply$pst$142;switch(self._){case 'Parser.State.new':var $4261=self.err;var _reply$148 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$142);var self = _reply$148;switch(self._){case 'Parser.Reply.error':var $4263=self.err;var self = $4261;switch(self._){case 'Maybe.some':var $4265=self.value;var $4266 = Parser$Reply$error$(Parser$Error$combine$($4265,$4263));var $4264 = $4266;break;case 'Maybe.none':var $4267 = Parser$Reply$error$($4263);var $4264 = $4267;break;};var $4262 = $4264;break;case 'Parser.Reply.value':var $4268=self.pst;var self = $4268;switch(self._){case 'Parser.State.new':var $4270=self.err;var $4271=self.nam;var $4272=self.ini;var $4273=self.idx;var $4274=self.str;var _reply$pst$156 = Parser$State$new$(Parser$Error$maybe_combine$($4261,$4270),$4271,$4272,$4273,$4274);var self = _reply$pst$156;switch(self._){case 'Parser.State.new':var $4276=self.err;var _reply$162 = _body$1(Unit$new)(_reply$pst$156);var self = _reply$162;switch(self._){case 'Parser.Reply.error':var $4278=self.err;var self = $4276;switch(self._){case 'Maybe.some':var $4280=self.value;var $4281 = Parser$Reply$error$(Parser$Error$combine$($4280,$4278));var $4279 = $4281;break;case 'Maybe.none':var $4282 = Parser$Reply$error$($4278);var $4279 = $4282;break;};var $4277 = $4279;break;case 'Parser.Reply.value':var $4283=self.pst;var $4284=self.val;var self = $4283;switch(self._){case 'Parser.State.new':var $4286=self.err;var $4287=self.nam;var $4288=self.ini;var $4289=self.idx;var $4290=self.str;var _reply$pst$170 = Parser$State$new$(Parser$Error$maybe_combine$($4276,$4286),$4287,$4288,$4289,$4290);var _term$171 = Kind$Term$ref$("BBT.for");var _term$172 = Kind$Term$app$(_term$171,Kind$Term$hol$(Bits$e));var _term$173 = Kind$Term$app$(_term$172,Kind$Term$hol$(Bits$e));var _term$174 = Kind$Term$app$(_term$173,$4191);var _term$175 = Kind$Term$app$(_term$174,Kind$Term$hol$(Bits$e));var _term$176 = Kind$Term$app$(_term$175,Kind$Term$ref$($4222));var _lamb$177 = Kind$Term$lam$($4129,(_k$177=>{var $4292 = Kind$Term$lam$($4160,(_i$178=>{var $4293 = Kind$Term$lam$($4222,(_x$179=>{var $4294 = $4253;return $4294;}));return $4293;}));return $4292;}));var _term$178 = Kind$Term$app$(_term$176,_lamb$177);var _term$179 = Kind$Term$let$($4222,_term$178,(_x$179=>{var $4295 = $4284;return $4295;}));var $4291 = Parser$Reply$value$(_reply$pst$170,_term$179);var $4285 = $4291;break;};var $4277 = $4285;break;};var $4275 = $4277;break;};var $4269 = $4275;break;};var $4262 = $4269;break;};var $4260 = $4262;break;};var $4254 = $4260;break;};var $4246 = $4254;break;};var $4244 = $4246;break;};var $4238 = $4244;break;};var $4231 = $4238;break;};var $4229 = $4231;break;};var $4223 = $4229;break;};var $4215 = $4223;break;};var $4213 = $4215;break;};var $4207 = $4213;break;};var $4200 = $4207;break;};var $4198 = $4200;break;};var $4192 = $4198;break;};var $4184 = $4192;break;};var $4182 = $4184;break;};var $4176 = $4182;break;};var $4169 = $4176;break;};var $4167 = $4169;break;};var $4161 = $4167;break;};var $4153 = $4161;break;};var $4151 = $4153;break;};var $4145 = $4151;break;};var $4138 = $4145;break;};var $4136 = $4138;break;};var $4130 = $4136;break;};var $4122 = $4130;break;};var $4120 = $4122;break;};var $4114 = $4120;break;};var $4107 = $4114;break;};var $4105 = $4107;break;};return $4105;}));return $4104;};
  const Kind$Parser$letforinmap$with = x0=>Kind$Parser$letforinmap$with$(x0);
  function Kind$Parser$letwhile$(_body$1){var $4296 = Kind$Parser$block("let-while")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $4298=self.err;var _reply$8 = Kind$Parser$text$("let ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $4300=self.err;var self = $4298;switch(self._){case 'Maybe.some':var $4302=self.value;var $4303 = Parser$Reply$error$(Parser$Error$combine$($4302,$4300));var $4301 = $4303;break;case 'Maybe.none':var $4304 = Parser$Reply$error$($4300);var $4301 = $4304;break;};var $4299 = $4301;break;case 'Parser.Reply.value':var $4305=self.pst;var self = $4305;switch(self._){case 'Parser.State.new':var $4307=self.err;var $4308=self.nam;var $4309=self.ini;var $4310=self.idx;var $4311=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($4298,$4307),$4308,$4309,$4310,$4311);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $4313=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $4315=self.err;var self = $4313;switch(self._){case 'Maybe.some':var $4317=self.value;var $4318 = Parser$Reply$error$(Parser$Error$combine$($4317,$4315));var $4316 = $4318;break;case 'Maybe.none':var $4319 = Parser$Reply$error$($4315);var $4316 = $4319;break;};var $4314 = $4316;break;case 'Parser.Reply.value':var $4320=self.pst;var $4321=self.val;var self = $4320;switch(self._){case 'Parser.State.new':var $4323=self.err;var $4324=self.nam;var $4325=self.ini;var $4326=self.idx;var $4327=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($4313,$4323),$4324,$4325,$4326,$4327);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $4329=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $4331=self.err;var self = $4329;switch(self._){case 'Maybe.some':var $4333=self.value;var $4334 = Parser$Reply$error$(Parser$Error$combine$($4333,$4331));var $4332 = $4334;break;case 'Maybe.none':var $4335 = Parser$Reply$error$($4331);var $4332 = $4335;break;};var $4330 = $4332;break;case 'Parser.Reply.value':var $4336=self.pst;var self = $4336;switch(self._){case 'Parser.State.new':var $4338=self.err;var $4339=self.nam;var $4340=self.ini;var $4341=self.idx;var $4342=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($4329,$4338),$4339,$4340,$4341,$4342);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $4344=self.err;var _reply$50 = Kind$Parser$text$("while ",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $4346=self.err;var self = $4344;switch(self._){case 'Maybe.some':var $4348=self.value;var $4349 = Parser$Reply$error$(Parser$Error$combine$($4348,$4346));var $4347 = $4349;break;case 'Maybe.none':var $4350 = Parser$Reply$error$($4346);var $4347 = $4350;break;};var $4345 = $4347;break;case 'Parser.Reply.value':var $4351=self.pst;var self = $4351;switch(self._){case 'Parser.State.new':var $4353=self.err;var $4354=self.nam;var $4355=self.ini;var $4356=self.idx;var $4357=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($4344,$4353),$4354,$4355,$4356,$4357);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $4359=self.err;var _reply$64 = Kind$Parser$term(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $4361=self.err;var self = $4359;switch(self._){case 'Maybe.some':var $4363=self.value;var $4364 = Parser$Reply$error$(Parser$Error$combine$($4363,$4361));var $4362 = $4364;break;case 'Maybe.none':var $4365 = Parser$Reply$error$($4361);var $4362 = $4365;break;};var $4360 = $4362;break;case 'Parser.Reply.value':var $4366=self.pst;var $4367=self.val;var self = $4366;switch(self._){case 'Parser.State.new':var $4369=self.err;var $4370=self.nam;var $4371=self.ini;var $4372=self.idx;var $4373=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($4359,$4369),$4370,$4371,$4372,$4373);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $4375=self.err;var _reply$78 = Kind$Parser$text$(":",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $4377=self.err;var self = $4375;switch(self._){case 'Maybe.some':var $4379=self.value;var $4380 = Parser$Reply$error$(Parser$Error$combine$($4379,$4377));var $4378 = $4380;break;case 'Maybe.none':var $4381 = Parser$Reply$error$($4377);var $4378 = $4381;break;};var $4376 = $4378;break;case 'Parser.Reply.value':var $4382=self.pst;var self = $4382;switch(self._){case 'Parser.State.new':var $4384=self.err;var $4385=self.nam;var $4386=self.ini;var $4387=self.idx;var $4388=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($4375,$4384),$4385,$4386,$4387,$4388);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $4390=self.err;var _reply$92 = Kind$Parser$term(_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $4392=self.err;var self = $4390;switch(self._){case 'Maybe.some':var $4394=self.value;var $4395 = Parser$Reply$error$(Parser$Error$combine$($4394,$4392));var $4393 = $4395;break;case 'Maybe.none':var $4396 = Parser$Reply$error$($4392);var $4393 = $4396;break;};var $4391 = $4393;break;case 'Parser.Reply.value':var $4397=self.pst;var $4398=self.val;var self = $4397;switch(self._){case 'Parser.State.new':var $4400=self.err;var $4401=self.nam;var $4402=self.ini;var $4403=self.idx;var $4404=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($4390,$4400),$4401,$4402,$4403,$4404);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $4406=self.err;var _reply$106 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $4408=self.err;var self = $4406;switch(self._){case 'Maybe.some':var $4410=self.value;var $4411 = Parser$Reply$error$(Parser$Error$combine$($4410,$4408));var $4409 = $4411;break;case 'Maybe.none':var $4412 = Parser$Reply$error$($4408);var $4409 = $4412;break;};var $4407 = $4409;break;case 'Parser.Reply.value':var $4413=self.pst;var self = $4413;switch(self._){case 'Parser.State.new':var $4415=self.err;var $4416=self.nam;var $4417=self.ini;var $4418=self.idx;var $4419=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($4406,$4415),$4416,$4417,$4418,$4419);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $4421=self.err;var _reply$120 = _body$1(Unit$new)(_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $4423=self.err;var self = $4421;switch(self._){case 'Maybe.some':var $4425=self.value;var $4426 = Parser$Reply$error$(Parser$Error$combine$($4425,$4423));var $4424 = $4426;break;case 'Maybe.none':var $4427 = Parser$Reply$error$($4423);var $4424 = $4427;break;};var $4422 = $4424;break;case 'Parser.Reply.value':var $4428=self.pst;var $4429=self.val;var self = $4428;switch(self._){case 'Parser.State.new':var $4431=self.err;var $4432=self.nam;var $4433=self.ini;var $4434=self.idx;var $4435=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($4421,$4431),$4432,$4433,$4434,$4435);var _term$129 = Kind$Term$ref$("Function.while");var _term$130 = Kind$Term$app$(_term$129,Kind$Term$hol$(Bits$e));var _term$131 = Kind$Term$app$(_term$130,Kind$Term$ref$($4321));var _term$132 = Kind$Term$app$(_term$131,Kind$Term$lam$($4321,(_s$132=>{var $4437 = $4367;return $4437;})));var _term$133 = Kind$Term$app$(_term$132,Kind$Term$lam$($4321,(_s$133=>{var $4438 = $4398;return $4438;})));var _term$134 = Kind$Term$let$($4321,_term$133,(_x$134=>{var $4439 = $4429;return $4439;}));var $4436 = Parser$Reply$value$(_reply$pst$128,_term$134);var $4430 = $4436;break;};var $4422 = $4430;break;};var $4420 = $4422;break;};var $4414 = $4420;break;};var $4407 = $4414;break;};var $4405 = $4407;break;};var $4399 = $4405;break;};var $4391 = $4399;break;};var $4389 = $4391;break;};var $4383 = $4389;break;};var $4376 = $4383;break;};var $4374 = $4376;break;};var $4368 = $4374;break;};var $4360 = $4368;break;};var $4358 = $4360;break;};var $4352 = $4358;break;};var $4345 = $4352;break;};var $4343 = $4345;break;};var $4337 = $4343;break;};var $4330 = $4337;break;};var $4328 = $4330;break;};var $4322 = $4328;break;};var $4314 = $4322;break;};var $4312 = $4314;break;};var $4306 = $4312;break;};var $4299 = $4306;break;};var $4297 = $4299;break;};return $4297;}));return $4296;};
  const Kind$Parser$letwhile = x0=>Kind$Parser$letwhile$(x0);
  function Kind$Parser$letwhile$with$(_body$1){var $4440 = Kind$Parser$block("let-while")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $4442=self.err;var _reply$8 = Kind$Parser$text$("while ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $4444=self.err;var self = $4442;switch(self._){case 'Maybe.some':var $4446=self.value;var $4447 = Parser$Reply$error$(Parser$Error$combine$($4446,$4444));var $4445 = $4447;break;case 'Maybe.none':var $4448 = Parser$Reply$error$($4444);var $4445 = $4448;break;};var $4443 = $4445;break;case 'Parser.Reply.value':var $4449=self.pst;var self = $4449;switch(self._){case 'Parser.State.new':var $4451=self.err;var $4452=self.nam;var $4453=self.ini;var $4454=self.idx;var $4455=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($4442,$4451),$4452,$4453,$4454,$4455);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $4457=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $4459=self.err;var self = $4457;switch(self._){case 'Maybe.some':var $4461=self.value;var $4462 = Parser$Reply$error$(Parser$Error$combine$($4461,$4459));var $4460 = $4462;break;case 'Maybe.none':var $4463 = Parser$Reply$error$($4459);var $4460 = $4463;break;};var $4458 = $4460;break;case 'Parser.Reply.value':var $4464=self.pst;var $4465=self.val;var self = $4464;switch(self._){case 'Parser.State.new':var $4467=self.err;var $4468=self.nam;var $4469=self.ini;var $4470=self.idx;var $4471=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($4457,$4467),$4468,$4469,$4470,$4471);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $4473=self.err;var _reply$36 = Kind$Parser$text$("with ",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $4475=self.err;var self = $4473;switch(self._){case 'Maybe.some':var $4477=self.value;var $4478 = Parser$Reply$error$(Parser$Error$combine$($4477,$4475));var $4476 = $4478;break;case 'Maybe.none':var $4479 = Parser$Reply$error$($4475);var $4476 = $4479;break;};var $4474 = $4476;break;case 'Parser.Reply.value':var $4480=self.pst;var self = $4480;switch(self._){case 'Parser.State.new':var $4482=self.err;var $4483=self.nam;var $4484=self.ini;var $4485=self.idx;var $4486=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($4473,$4482),$4483,$4484,$4485,$4486);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $4488=self.err;var _reply$50 = Kind$Parser$name1$(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $4490=self.err;var self = $4488;switch(self._){case 'Maybe.some':var $4492=self.value;var $4493 = Parser$Reply$error$(Parser$Error$combine$($4492,$4490));var $4491 = $4493;break;case 'Maybe.none':var $4494 = Parser$Reply$error$($4490);var $4491 = $4494;break;};var $4489 = $4491;break;case 'Parser.Reply.value':var $4495=self.pst;var $4496=self.val;var self = $4495;switch(self._){case 'Parser.State.new':var $4498=self.err;var $4499=self.nam;var $4500=self.ini;var $4501=self.idx;var $4502=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($4488,$4498),$4499,$4500,$4501,$4502);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $4504=self.err;var _reply$64 = Kind$Parser$text$(":",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $4506=self.err;var self = $4504;switch(self._){case 'Maybe.some':var $4508=self.value;var $4509 = Parser$Reply$error$(Parser$Error$combine$($4508,$4506));var $4507 = $4509;break;case 'Maybe.none':var $4510 = Parser$Reply$error$($4506);var $4507 = $4510;break;};var $4505 = $4507;break;case 'Parser.Reply.value':var $4511=self.pst;var self = $4511;switch(self._){case 'Parser.State.new':var $4513=self.err;var $4514=self.nam;var $4515=self.ini;var $4516=self.idx;var $4517=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($4504,$4513),$4514,$4515,$4516,$4517);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $4519=self.err;var _reply$78 = Kind$Parser$term(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $4521=self.err;var self = $4519;switch(self._){case 'Maybe.some':var $4523=self.value;var $4524 = Parser$Reply$error$(Parser$Error$combine$($4523,$4521));var $4522 = $4524;break;case 'Maybe.none':var $4525 = Parser$Reply$error$($4521);var $4522 = $4525;break;};var $4520 = $4522;break;case 'Parser.Reply.value':var $4526=self.pst;var $4527=self.val;var self = $4526;switch(self._){case 'Parser.State.new':var $4529=self.err;var $4530=self.nam;var $4531=self.ini;var $4532=self.idx;var $4533=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($4519,$4529),$4530,$4531,$4532,$4533);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $4535=self.err;var _reply$92 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $4537=self.err;var self = $4535;switch(self._){case 'Maybe.some':var $4539=self.value;var $4540 = Parser$Reply$error$(Parser$Error$combine$($4539,$4537));var $4538 = $4540;break;case 'Maybe.none':var $4541 = Parser$Reply$error$($4537);var $4538 = $4541;break;};var $4536 = $4538;break;case 'Parser.Reply.value':var $4542=self.pst;var self = $4542;switch(self._){case 'Parser.State.new':var $4544=self.err;var $4545=self.nam;var $4546=self.ini;var $4547=self.idx;var $4548=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($4535,$4544),$4545,$4546,$4547,$4548);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $4550=self.err;var _reply$106 = _body$1(Unit$new)(_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $4552=self.err;var self = $4550;switch(self._){case 'Maybe.some':var $4554=self.value;var $4555 = Parser$Reply$error$(Parser$Error$combine$($4554,$4552));var $4553 = $4555;break;case 'Maybe.none':var $4556 = Parser$Reply$error$($4552);var $4553 = $4556;break;};var $4551 = $4553;break;case 'Parser.Reply.value':var $4557=self.pst;var $4558=self.val;var self = $4557;switch(self._){case 'Parser.State.new':var $4560=self.err;var $4561=self.nam;var $4562=self.ini;var $4563=self.idx;var $4564=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($4550,$4560),$4561,$4562,$4563,$4564);var _term$115 = Kind$Term$ref$("Function.while");var _term$116 = Kind$Term$app$(_term$115,Kind$Term$hol$(Bits$e));var _term$117 = Kind$Term$app$(_term$116,Kind$Term$ref$($4496));var _term$118 = Kind$Term$app$(_term$117,Kind$Term$lam$($4496,(_s$118=>{var $4566 = $4465;return $4566;})));var _term$119 = Kind$Term$app$(_term$118,Kind$Term$lam$($4496,(_s$119=>{var $4567 = $4527;return $4567;})));var _term$120 = Kind$Term$let$($4496,_term$119,(_x$120=>{var $4568 = $4558;return $4568;}));var $4565 = Parser$Reply$value$(_reply$pst$114,_term$120);var $4559 = $4565;break;};var $4551 = $4559;break;};var $4549 = $4551;break;};var $4543 = $4549;break;};var $4536 = $4543;break;};var $4534 = $4536;break;};var $4528 = $4534;break;};var $4520 = $4528;break;};var $4518 = $4520;break;};var $4512 = $4518;break;};var $4505 = $4512;break;};var $4503 = $4505;break;};var $4497 = $4503;break;};var $4489 = $4497;break;};var $4487 = $4489;break;};var $4481 = $4487;break;};var $4474 = $4481;break;};var $4472 = $4474;break;};var $4466 = $4472;break;};var $4458 = $4466;break;};var $4456 = $4458;break;};var $4450 = $4456;break;};var $4443 = $4450;break;};var $4441 = $4443;break;};return $4441;}));return $4440;};
  const Kind$Parser$letwhile$with = x0=>Kind$Parser$letwhile$with$(x0);
  function Kind$Parser$let$abort$(_body$1){var $4569 = Kind$Parser$block("let")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $4571=self.err;var _reply$8 = Kind$Parser$text$("let ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $4573=self.err;var self = $4571;switch(self._){case 'Maybe.some':var $4575=self.value;var $4576 = Parser$Reply$error$(Parser$Error$combine$($4575,$4573));var $4574 = $4576;break;case 'Maybe.none':var $4577 = Parser$Reply$error$($4573);var $4574 = $4577;break;};var $4572 = $4574;break;case 'Parser.Reply.value':var $4578=self.pst;var self = $4578;switch(self._){case 'Parser.State.new':var $4580=self.err;var $4581=self.nam;var $4582=self.ini;var $4583=self.idx;var $4584=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($4571,$4580),$4581,$4582,$4583,$4584);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $4586=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $4588=self.err;var self = $4586;switch(self._){case 'Maybe.some':var $4590=self.value;var $4591 = Parser$Reply$error$(Parser$Error$combine$($4590,$4588));var $4589 = $4591;break;case 'Maybe.none':var $4592 = Parser$Reply$error$($4588);var $4589 = $4592;break;};var $4587 = $4589;break;case 'Parser.Reply.value':var $4593=self.pst;var $4594=self.val;var self = $4593;switch(self._){case 'Parser.State.new':var $4596=self.err;var $4597=self.nam;var $4598=self.ini;var $4599=self.idx;var $4600=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($4586,$4596),$4597,$4598,$4599,$4600);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $4602=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $4604=self.err;var self = $4602;switch(self._){case 'Maybe.some':var $4606=self.value;var $4607 = Parser$Reply$error$(Parser$Error$combine$($4606,$4604));var $4605 = $4607;break;case 'Maybe.none':var $4608 = Parser$Reply$error$($4604);var $4605 = $4608;break;};var $4603 = $4605;break;case 'Parser.Reply.value':var $4609=self.pst;var self = $4609;switch(self._){case 'Parser.State.new':var $4611=self.err;var $4612=self.nam;var $4613=self.ini;var $4614=self.idx;var $4615=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($4602,$4611),$4612,$4613,$4614,$4615);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $4617=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $4619=self.err;var self = $4617;switch(self._){case 'Maybe.some':var $4621=self.value;var $4622 = Parser$Reply$error$(Parser$Error$combine$($4621,$4619));var $4620 = $4622;break;case 'Maybe.none':var $4623 = Parser$Reply$error$($4619);var $4620 = $4623;break;};var $4618 = $4620;break;case 'Parser.Reply.value':var $4624=self.pst;var $4625=self.val;var self = $4624;switch(self._){case 'Parser.State.new':var $4627=self.err;var $4628=self.nam;var $4629=self.ini;var $4630=self.idx;var $4631=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($4617,$4627),$4628,$4629,$4630,$4631);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $4633=self.err;var _reply$64 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $4635=self.err;var self = $4633;switch(self._){case 'Maybe.some':var $4637=self.value;var $4638 = Parser$Reply$error$(Parser$Error$combine$($4637,$4635));var $4636 = $4638;break;case 'Maybe.none':var $4639 = Parser$Reply$error$($4635);var $4636 = $4639;break;};var $4634 = $4636;break;case 'Parser.Reply.value':var $4640=self.pst;var self = $4640;switch(self._){case 'Parser.State.new':var $4642=self.err;var $4643=self.nam;var $4644=self.ini;var $4645=self.idx;var $4646=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($4633,$4642),$4643,$4644,$4645,$4646);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $4648=self.err;var _reply$78 = Kind$Parser$text$("abort",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $4650=self.err;var self = $4648;switch(self._){case 'Maybe.some':var $4652=self.value;var $4653 = Parser$Reply$error$(Parser$Error$combine$($4652,$4650));var $4651 = $4653;break;case 'Maybe.none':var $4654 = Parser$Reply$error$($4650);var $4651 = $4654;break;};var $4649 = $4651;break;case 'Parser.Reply.value':var $4655=self.pst;var self = $4655;switch(self._){case 'Parser.State.new':var $4657=self.err;var $4658=self.nam;var $4659=self.ini;var $4660=self.idx;var $4661=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($4648,$4657),$4658,$4659,$4660,$4661);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $4663=self.err;var _reply$92 = Kind$Parser$term(_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $4665=self.err;var self = $4663;switch(self._){case 'Maybe.some':var $4667=self.value;var $4668 = Parser$Reply$error$(Parser$Error$combine$($4667,$4665));var $4666 = $4668;break;case 'Maybe.none':var $4669 = Parser$Reply$error$($4665);var $4666 = $4669;break;};var $4664 = $4666;break;case 'Parser.Reply.value':var $4670=self.pst;var $4671=self.val;var self = $4670;switch(self._){case 'Parser.State.new':var $4673=self.err;var $4674=self.nam;var $4675=self.ini;var $4676=self.idx;var $4677=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($4663,$4673),$4674,$4675,$4676,$4677);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $4679=self.err;var _reply$106 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $4681=self.err;var self = $4679;switch(self._){case 'Maybe.some':var $4683=self.value;var $4684 = Parser$Reply$error$(Parser$Error$combine$($4683,$4681));var $4682 = $4684;break;case 'Maybe.none':var $4685 = Parser$Reply$error$($4681);var $4682 = $4685;break;};var $4680 = $4682;break;case 'Parser.Reply.value':var $4686=self.pst;var self = $4686;switch(self._){case 'Parser.State.new':var $4688=self.err;var $4689=self.nam;var $4690=self.ini;var $4691=self.idx;var $4692=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($4679,$4688),$4689,$4690,$4691,$4692);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $4694=self.err;var _reply$120 = _body$1(Unit$new)(_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $4696=self.err;var self = $4694;switch(self._){case 'Maybe.some':var $4698=self.value;var $4699 = Parser$Reply$error$(Parser$Error$combine$($4698,$4696));var $4697 = $4699;break;case 'Maybe.none':var $4700 = Parser$Reply$error$($4696);var $4697 = $4700;break;};var $4695 = $4697;break;case 'Parser.Reply.value':var $4701=self.pst;var $4702=self.val;var self = $4701;switch(self._){case 'Parser.State.new':var $4704=self.err;var $4705=self.nam;var $4706=self.ini;var $4707=self.idx;var $4708=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($4694,$4704),$4705,$4706,$4707,$4708);var _term$129 = $4625;var _term$130 = Kind$Term$app$(_term$129,Kind$Term$lam$("",(_$130=>{var $4710 = Kind$Term$hol$(Bits$e);return $4710;})));var _term$131 = Kind$Term$app$(_term$130,$4671);var _term$132 = Kind$Term$app$(_term$131,Kind$Term$lam$($4594,(_$132=>{var $4711 = $4702;return $4711;})));var $4709 = Parser$Reply$value$(_reply$pst$128,_term$132);var $4703 = $4709;break;};var $4695 = $4703;break;};var $4693 = $4695;break;};var $4687 = $4693;break;};var $4680 = $4687;break;};var $4678 = $4680;break;};var $4672 = $4678;break;};var $4664 = $4672;break;};var $4662 = $4664;break;};var $4656 = $4662;break;};var $4649 = $4656;break;};var $4647 = $4649;break;};var $4641 = $4647;break;};var $4634 = $4641;break;};var $4632 = $4634;break;};var $4626 = $4632;break;};var $4618 = $4626;break;};var $4616 = $4618;break;};var $4610 = $4616;break;};var $4603 = $4610;break;};var $4601 = $4603;break;};var $4595 = $4601;break;};var $4587 = $4595;break;};var $4585 = $4587;break;};var $4579 = $4585;break;};var $4572 = $4579;break;};var $4570 = $4572;break;};return $4570;}));return $4569;};
  const Kind$Parser$let$abort = x0=>Kind$Parser$let$abort$(x0);
  function Kind$Parser$let$(_body$1){var $4712 = Kind$Parser$block("let")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $4714=self.err;var _reply$8 = Kind$Parser$text$("let ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $4716=self.err;var self = $4714;switch(self._){case 'Maybe.some':var $4718=self.value;var $4719 = Parser$Reply$error$(Parser$Error$combine$($4718,$4716));var $4717 = $4719;break;case 'Maybe.none':var $4720 = Parser$Reply$error$($4716);var $4717 = $4720;break;};var $4715 = $4717;break;case 'Parser.Reply.value':var $4721=self.pst;var self = $4721;switch(self._){case 'Parser.State.new':var $4723=self.err;var $4724=self.nam;var $4725=self.ini;var $4726=self.idx;var $4727=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($4714,$4723),$4724,$4725,$4726,$4727);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $4729=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $4731=self.err;var self = $4729;switch(self._){case 'Maybe.some':var $4733=self.value;var $4734 = Parser$Reply$error$(Parser$Error$combine$($4733,$4731));var $4732 = $4734;break;case 'Maybe.none':var $4735 = Parser$Reply$error$($4731);var $4732 = $4735;break;};var $4730 = $4732;break;case 'Parser.Reply.value':var $4736=self.pst;var $4737=self.val;var self = $4736;switch(self._){case 'Parser.State.new':var $4739=self.err;var $4740=self.nam;var $4741=self.ini;var $4742=self.idx;var $4743=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($4729,$4739),$4740,$4741,$4742,$4743);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $4745=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $4747=self.err;var self = $4745;switch(self._){case 'Maybe.some':var $4749=self.value;var $4750 = Parser$Reply$error$(Parser$Error$combine$($4749,$4747));var $4748 = $4750;break;case 'Maybe.none':var $4751 = Parser$Reply$error$($4747);var $4748 = $4751;break;};var $4746 = $4748;break;case 'Parser.Reply.value':var $4752=self.pst;var self = $4752;switch(self._){case 'Parser.State.new':var $4754=self.err;var $4755=self.nam;var $4756=self.ini;var $4757=self.idx;var $4758=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($4745,$4754),$4755,$4756,$4757,$4758);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $4760=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $4762=self.err;var self = $4760;switch(self._){case 'Maybe.some':var $4764=self.value;var $4765 = Parser$Reply$error$(Parser$Error$combine$($4764,$4762));var $4763 = $4765;break;case 'Maybe.none':var $4766 = Parser$Reply$error$($4762);var $4763 = $4766;break;};var $4761 = $4763;break;case 'Parser.Reply.value':var $4767=self.pst;var $4768=self.val;var self = $4767;switch(self._){case 'Parser.State.new':var $4770=self.err;var $4771=self.nam;var $4772=self.ini;var $4773=self.idx;var $4774=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($4760,$4770),$4771,$4772,$4773,$4774);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $4776=self.err;var _reply$64 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $4778=self.err;var self = $4776;switch(self._){case 'Maybe.some':var $4780=self.value;var $4781 = Parser$Reply$error$(Parser$Error$combine$($4780,$4778));var $4779 = $4781;break;case 'Maybe.none':var $4782 = Parser$Reply$error$($4778);var $4779 = $4782;break;};var $4777 = $4779;break;case 'Parser.Reply.value':var $4783=self.pst;var self = $4783;switch(self._){case 'Parser.State.new':var $4785=self.err;var $4786=self.nam;var $4787=self.ini;var $4788=self.idx;var $4789=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($4776,$4785),$4786,$4787,$4788,$4789);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $4791=self.err;var _reply$78 = _body$1(Unit$new)(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $4793=self.err;var self = $4791;switch(self._){case 'Maybe.some':var $4795=self.value;var $4796 = Parser$Reply$error$(Parser$Error$combine$($4795,$4793));var $4794 = $4796;break;case 'Maybe.none':var $4797 = Parser$Reply$error$($4793);var $4794 = $4797;break;};var $4792 = $4794;break;case 'Parser.Reply.value':var $4798=self.pst;var $4799=self.val;var self = $4798;switch(self._){case 'Parser.State.new':var $4801=self.err;var $4802=self.nam;var $4803=self.ini;var $4804=self.idx;var $4805=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($4791,$4801),$4802,$4803,$4804,$4805);var $4806 = Parser$Reply$value$(_reply$pst$86,Kind$Term$let$($4737,$4768,(_x$87=>{var $4807 = $4799;return $4807;})));var $4800 = $4806;break;};var $4792 = $4800;break;};var $4790 = $4792;break;};var $4784 = $4790;break;};var $4777 = $4784;break;};var $4775 = $4777;break;};var $4769 = $4775;break;};var $4761 = $4769;break;};var $4759 = $4761;break;};var $4753 = $4759;break;};var $4746 = $4753;break;};var $4744 = $4746;break;};var $4738 = $4744;break;};var $4730 = $4738;break;};var $4728 = $4730;break;};var $4722 = $4728;break;};var $4715 = $4722;break;};var $4713 = $4715;break;};return $4713;}));return $4712;};
  const Kind$Parser$let = x0=>Kind$Parser$let$(x0);
  function Kind$Parser$let$omit$(_body$1){var $4808 = Kind$Parser$block("let")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $4810=self.err;var _reply$8 = Kind$Parser$name1$(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $4812=self.err;var self = $4810;switch(self._){case 'Maybe.some':var $4814=self.value;var $4815 = Parser$Reply$error$(Parser$Error$combine$($4814,$4812));var $4813 = $4815;break;case 'Maybe.none':var $4816 = Parser$Reply$error$($4812);var $4813 = $4816;break;};var $4811 = $4813;break;case 'Parser.Reply.value':var $4817=self.pst;var $4818=self.val;var self = $4817;switch(self._){case 'Parser.State.new':var $4820=self.err;var $4821=self.nam;var $4822=self.ini;var $4823=self.idx;var $4824=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($4810,$4820),$4821,$4822,$4823,$4824);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $4826=self.err;var _reply$22 = Kind$Parser$text$("= ",_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $4828=self.err;var self = $4826;switch(self._){case 'Maybe.some':var $4830=self.value;var $4831 = Parser$Reply$error$(Parser$Error$combine$($4830,$4828));var $4829 = $4831;break;case 'Maybe.none':var $4832 = Parser$Reply$error$($4828);var $4829 = $4832;break;};var $4827 = $4829;break;case 'Parser.Reply.value':var $4833=self.pst;var self = $4833;switch(self._){case 'Parser.State.new':var $4835=self.err;var $4836=self.nam;var $4837=self.ini;var $4838=self.idx;var $4839=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($4826,$4835),$4836,$4837,$4838,$4839);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $4841=self.err;var _reply$36 = Kind$Parser$term(_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $4843=self.err;var self = $4841;switch(self._){case 'Maybe.some':var $4845=self.value;var $4846 = Parser$Reply$error$(Parser$Error$combine$($4845,$4843));var $4844 = $4846;break;case 'Maybe.none':var $4847 = Parser$Reply$error$($4843);var $4844 = $4847;break;};var $4842 = $4844;break;case 'Parser.Reply.value':var $4848=self.pst;var $4849=self.val;var self = $4848;switch(self._){case 'Parser.State.new':var $4851=self.err;var $4852=self.nam;var $4853=self.ini;var $4854=self.idx;var $4855=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($4841,$4851),$4852,$4853,$4854,$4855);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $4857=self.err;var _reply$50 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $4859=self.err;var self = $4857;switch(self._){case 'Maybe.some':var $4861=self.value;var $4862 = Parser$Reply$error$(Parser$Error$combine$($4861,$4859));var $4860 = $4862;break;case 'Maybe.none':var $4863 = Parser$Reply$error$($4859);var $4860 = $4863;break;};var $4858 = $4860;break;case 'Parser.Reply.value':var $4864=self.pst;var self = $4864;switch(self._){case 'Parser.State.new':var $4866=self.err;var $4867=self.nam;var $4868=self.ini;var $4869=self.idx;var $4870=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($4857,$4866),$4867,$4868,$4869,$4870);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $4872=self.err;var _reply$64 = _body$1(Unit$new)(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $4874=self.err;var self = $4872;switch(self._){case 'Maybe.some':var $4876=self.value;var $4877 = Parser$Reply$error$(Parser$Error$combine$($4876,$4874));var $4875 = $4877;break;case 'Maybe.none':var $4878 = Parser$Reply$error$($4874);var $4875 = $4878;break;};var $4873 = $4875;break;case 'Parser.Reply.value':var $4879=self.pst;var $4880=self.val;var self = $4879;switch(self._){case 'Parser.State.new':var $4882=self.err;var $4883=self.nam;var $4884=self.ini;var $4885=self.idx;var $4886=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($4872,$4882),$4883,$4884,$4885,$4886);var $4887 = Parser$Reply$value$(_reply$pst$72,Kind$Term$let$($4818,$4849,(_x$73=>{var $4888 = $4880;return $4888;})));var $4881 = $4887;break;};var $4873 = $4881;break;};var $4871 = $4873;break;};var $4865 = $4871;break;};var $4858 = $4865;break;};var $4856 = $4858;break;};var $4850 = $4856;break;};var $4842 = $4850;break;};var $4840 = $4842;break;};var $4834 = $4840;break;};var $4827 = $4834;break;};var $4825 = $4827;break;};var $4819 = $4825;break;};var $4811 = $4819;break;};var $4809 = $4811;break;};return $4809;}));return $4808;};
  const Kind$Parser$let$omit = x0=>Kind$Parser$let$omit$(x0);
  function Kind$Parser$getwhile$(_body$1){var $4889 = Kind$Parser$block("let-while")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $4891=self.err;var _reply$8 = Parser$maybe$(Kind$Parser$text("let "),_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $4893=self.err;var self = $4891;switch(self._){case 'Maybe.some':var $4895=self.value;var $4896 = Parser$Reply$error$(Parser$Error$combine$($4895,$4893));var $4894 = $4896;break;case 'Maybe.none':var $4897 = Parser$Reply$error$($4893);var $4894 = $4897;break;};var $4892 = $4894;break;case 'Parser.Reply.value':var $4898=self.pst;var self = $4898;switch(self._){case 'Parser.State.new':var $4900=self.err;var $4901=self.nam;var $4902=self.ini;var $4903=self.idx;var $4904=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($4891,$4900),$4901,$4902,$4903,$4904);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $4906=self.err;var _reply$22 = Kind$Parser$text$("{",_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $4908=self.err;var self = $4906;switch(self._){case 'Maybe.some':var $4910=self.value;var $4911 = Parser$Reply$error$(Parser$Error$combine$($4910,$4908));var $4909 = $4911;break;case 'Maybe.none':var $4912 = Parser$Reply$error$($4908);var $4909 = $4912;break;};var $4907 = $4909;break;case 'Parser.Reply.value':var $4913=self.pst;var self = $4913;switch(self._){case 'Parser.State.new':var $4915=self.err;var $4916=self.nam;var $4917=self.ini;var $4918=self.idx;var $4919=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($4906,$4915),$4916,$4917,$4918,$4919);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $4921=self.err;var _reply$36 = Kind$Parser$name1$(_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $4923=self.err;var self = $4921;switch(self._){case 'Maybe.some':var $4925=self.value;var $4926 = Parser$Reply$error$(Parser$Error$combine$($4925,$4923));var $4924 = $4926;break;case 'Maybe.none':var $4927 = Parser$Reply$error$($4923);var $4924 = $4927;break;};var $4922 = $4924;break;case 'Parser.Reply.value':var $4928=self.pst;var $4929=self.val;var self = $4928;switch(self._){case 'Parser.State.new':var $4931=self.err;var $4932=self.nam;var $4933=self.ini;var $4934=self.idx;var $4935=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($4921,$4931),$4932,$4933,$4934,$4935);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $4937=self.err;var _reply$50 = Kind$Parser$text$(",",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $4939=self.err;var self = $4937;switch(self._){case 'Maybe.some':var $4941=self.value;var $4942 = Parser$Reply$error$(Parser$Error$combine$($4941,$4939));var $4940 = $4942;break;case 'Maybe.none':var $4943 = Parser$Reply$error$($4939);var $4940 = $4943;break;};var $4938 = $4940;break;case 'Parser.Reply.value':var $4944=self.pst;var self = $4944;switch(self._){case 'Parser.State.new':var $4946=self.err;var $4947=self.nam;var $4948=self.ini;var $4949=self.idx;var $4950=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($4937,$4946),$4947,$4948,$4949,$4950);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $4952=self.err;var _reply$64 = Kind$Parser$name1$(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $4954=self.err;var self = $4952;switch(self._){case 'Maybe.some':var $4956=self.value;var $4957 = Parser$Reply$error$(Parser$Error$combine$($4956,$4954));var $4955 = $4957;break;case 'Maybe.none':var $4958 = Parser$Reply$error$($4954);var $4955 = $4958;break;};var $4953 = $4955;break;case 'Parser.Reply.value':var $4959=self.pst;var $4960=self.val;var self = $4959;switch(self._){case 'Parser.State.new':var $4962=self.err;var $4963=self.nam;var $4964=self.ini;var $4965=self.idx;var $4966=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($4952,$4962),$4963,$4964,$4965,$4966);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $4968=self.err;var _reply$78 = Kind$Parser$text$("}",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $4970=self.err;var self = $4968;switch(self._){case 'Maybe.some':var $4972=self.value;var $4973 = Parser$Reply$error$(Parser$Error$combine$($4972,$4970));var $4971 = $4973;break;case 'Maybe.none':var $4974 = Parser$Reply$error$($4970);var $4971 = $4974;break;};var $4969 = $4971;break;case 'Parser.Reply.value':var $4975=self.pst;var self = $4975;switch(self._){case 'Parser.State.new':var $4977=self.err;var $4978=self.nam;var $4979=self.ini;var $4980=self.idx;var $4981=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($4968,$4977),$4978,$4979,$4980,$4981);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $4983=self.err;var _reply$92 = Kind$Parser$text$("=",_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $4985=self.err;var self = $4983;switch(self._){case 'Maybe.some':var $4987=self.value;var $4988 = Parser$Reply$error$(Parser$Error$combine$($4987,$4985));var $4986 = $4988;break;case 'Maybe.none':var $4989 = Parser$Reply$error$($4985);var $4986 = $4989;break;};var $4984 = $4986;break;case 'Parser.Reply.value':var $4990=self.pst;var self = $4990;switch(self._){case 'Parser.State.new':var $4992=self.err;var $4993=self.nam;var $4994=self.ini;var $4995=self.idx;var $4996=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($4983,$4992),$4993,$4994,$4995,$4996);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $4998=self.err;var _reply$106 = Kind$Parser$text$("while ",_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $5000=self.err;var self = $4998;switch(self._){case 'Maybe.some':var $5002=self.value;var $5003 = Parser$Reply$error$(Parser$Error$combine$($5002,$5000));var $5001 = $5003;break;case 'Maybe.none':var $5004 = Parser$Reply$error$($5000);var $5001 = $5004;break;};var $4999 = $5001;break;case 'Parser.Reply.value':var $5005=self.pst;var self = $5005;switch(self._){case 'Parser.State.new':var $5007=self.err;var $5008=self.nam;var $5009=self.ini;var $5010=self.idx;var $5011=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($4998,$5007),$5008,$5009,$5010,$5011);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $5013=self.err;var _reply$120 = Kind$Parser$term(_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $5015=self.err;var self = $5013;switch(self._){case 'Maybe.some':var $5017=self.value;var $5018 = Parser$Reply$error$(Parser$Error$combine$($5017,$5015));var $5016 = $5018;break;case 'Maybe.none':var $5019 = Parser$Reply$error$($5015);var $5016 = $5019;break;};var $5014 = $5016;break;case 'Parser.Reply.value':var $5020=self.pst;var $5021=self.val;var self = $5020;switch(self._){case 'Parser.State.new':var $5023=self.err;var $5024=self.nam;var $5025=self.ini;var $5026=self.idx;var $5027=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($5013,$5023),$5024,$5025,$5026,$5027);var self = _reply$pst$128;switch(self._){case 'Parser.State.new':var $5029=self.err;var _reply$134 = Kind$Parser$text$(":",_reply$pst$128);var self = _reply$134;switch(self._){case 'Parser.Reply.error':var $5031=self.err;var self = $5029;switch(self._){case 'Maybe.some':var $5033=self.value;var $5034 = Parser$Reply$error$(Parser$Error$combine$($5033,$5031));var $5032 = $5034;break;case 'Maybe.none':var $5035 = Parser$Reply$error$($5031);var $5032 = $5035;break;};var $5030 = $5032;break;case 'Parser.Reply.value':var $5036=self.pst;var self = $5036;switch(self._){case 'Parser.State.new':var $5038=self.err;var $5039=self.nam;var $5040=self.ini;var $5041=self.idx;var $5042=self.str;var _reply$pst$142 = Parser$State$new$(Parser$Error$maybe_combine$($5029,$5038),$5039,$5040,$5041,$5042);var self = _reply$pst$142;switch(self._){case 'Parser.State.new':var $5044=self.err;var _reply$148 = Kind$Parser$term(_reply$pst$142);var self = _reply$148;switch(self._){case 'Parser.Reply.error':var $5046=self.err;var self = $5044;switch(self._){case 'Maybe.some':var $5048=self.value;var $5049 = Parser$Reply$error$(Parser$Error$combine$($5048,$5046));var $5047 = $5049;break;case 'Maybe.none':var $5050 = Parser$Reply$error$($5046);var $5047 = $5050;break;};var $5045 = $5047;break;case 'Parser.Reply.value':var $5051=self.pst;var $5052=self.val;var self = $5051;switch(self._){case 'Parser.State.new':var $5054=self.err;var $5055=self.nam;var $5056=self.ini;var $5057=self.idx;var $5058=self.str;var _reply$pst$156 = Parser$State$new$(Parser$Error$maybe_combine$($5044,$5054),$5055,$5056,$5057,$5058);var self = _reply$pst$156;switch(self._){case 'Parser.State.new':var $5060=self.err;var _reply$162 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$156);var self = _reply$162;switch(self._){case 'Parser.Reply.error':var $5062=self.err;var self = $5060;switch(self._){case 'Maybe.some':var $5064=self.value;var $5065 = Parser$Reply$error$(Parser$Error$combine$($5064,$5062));var $5063 = $5065;break;case 'Maybe.none':var $5066 = Parser$Reply$error$($5062);var $5063 = $5066;break;};var $5061 = $5063;break;case 'Parser.Reply.value':var $5067=self.pst;var self = $5067;switch(self._){case 'Parser.State.new':var $5069=self.err;var $5070=self.nam;var $5071=self.ini;var $5072=self.idx;var $5073=self.str;var _reply$pst$170 = Parser$State$new$(Parser$Error$maybe_combine$($5060,$5069),$5070,$5071,$5072,$5073);var self = _reply$pst$170;switch(self._){case 'Parser.State.new':var $5075=self.err;var _reply$176 = _body$1(Unit$new)(_reply$pst$170);var self = _reply$176;switch(self._){case 'Parser.Reply.error':var $5077=self.err;var self = $5075;switch(self._){case 'Maybe.some':var $5079=self.value;var $5080 = Parser$Reply$error$(Parser$Error$combine$($5079,$5077));var $5078 = $5080;break;case 'Maybe.none':var $5081 = Parser$Reply$error$($5077);var $5078 = $5081;break;};var $5076 = $5078;break;case 'Parser.Reply.value':var $5082=self.pst;var $5083=self.val;var self = $5082;switch(self._){case 'Parser.State.new':var $5085=self.err;var $5086=self.nam;var $5087=self.ini;var $5088=self.idx;var $5089=self.str;var _reply$pst$184 = Parser$State$new$(Parser$Error$maybe_combine$($5075,$5085),$5086,$5087,$5088,$5089);var _moti$185 = Kind$Term$lam$("",(_x$185=>{var $5091 = Kind$Term$hol$(Bits$e);return $5091;}));var _term$186 = Kind$Term$ref$("Function.while");var _term$187 = Kind$Term$app$(_term$186,Kind$Term$hol$(Bits$e));var _init$188 = Kind$Term$ref$("Pair.new");var _init$189 = Kind$Term$app$(_init$188,Kind$Term$hol$(Bits$e));var _init$190 = Kind$Term$app$(_init$189,Kind$Term$hol$(Bits$e));var _init$191 = Kind$Term$app$(_init$190,Kind$Term$ref$($4929));var _init$192 = Kind$Term$app$(_init$191,Kind$Term$ref$($4960));var _term$193 = Kind$Term$app$(_term$187,_init$192);var _term$194 = Kind$Term$app$(_term$193,Kind$Term$lam$("s",(_s$194=>{var $5092 = Kind$Term$app$(Kind$Term$app$(_s$194,_moti$185),Kind$Term$lam$($4929,(_x$195=>{var $5093 = Kind$Term$lam$($4960,(_y$196=>{var $5094 = $5021;return $5094;}));return $5093;})));return $5092;})));var _term$195 = Kind$Term$app$(_term$194,Kind$Term$lam$("s",(_s$195=>{var $5095 = Kind$Term$app$(Kind$Term$app$(_s$195,_moti$185),Kind$Term$lam$($4929,(_x$196=>{var $5096 = Kind$Term$lam$($4960,(_y$197=>{var $5097 = $5052;return $5097;}));return $5096;})));return $5095;})));var _term$196 = Kind$Term$app$(Kind$Term$app$(_term$195,_moti$185),Kind$Term$lam$($4929,(_x$196=>{var $5098 = Kind$Term$lam$($4960,(_y$197=>{var $5099 = $5083;return $5099;}));return $5098;})));var $5090 = Parser$Reply$value$(_reply$pst$184,_term$196);var $5084 = $5090;break;};var $5076 = $5084;break;};var $5074 = $5076;break;};var $5068 = $5074;break;};var $5061 = $5068;break;};var $5059 = $5061;break;};var $5053 = $5059;break;};var $5045 = $5053;break;};var $5043 = $5045;break;};var $5037 = $5043;break;};var $5030 = $5037;break;};var $5028 = $5030;break;};var $5022 = $5028;break;};var $5014 = $5022;break;};var $5012 = $5014;break;};var $5006 = $5012;break;};var $4999 = $5006;break;};var $4997 = $4999;break;};var $4991 = $4997;break;};var $4984 = $4991;break;};var $4982 = $4984;break;};var $4976 = $4982;break;};var $4969 = $4976;break;};var $4967 = $4969;break;};var $4961 = $4967;break;};var $4953 = $4961;break;};var $4951 = $4953;break;};var $4945 = $4951;break;};var $4938 = $4945;break;};var $4936 = $4938;break;};var $4930 = $4936;break;};var $4922 = $4930;break;};var $4920 = $4922;break;};var $4914 = $4920;break;};var $4907 = $4914;break;};var $4905 = $4907;break;};var $4899 = $4905;break;};var $4892 = $4899;break;};var $4890 = $4892;break;};return $4890;}));return $4889;};
  const Kind$Parser$getwhile = x0=>Kind$Parser$getwhile$(x0);
  function Kind$Parser$getwhile$with$(_body$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $5101=self.err;var _reply$8 = Kind$Parser$text$("while ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $5103=self.err;var self = $5101;switch(self._){case 'Maybe.some':var $5105=self.value;var $5106 = Parser$Reply$error$(Parser$Error$combine$($5105,$5103));var $5104 = $5106;break;case 'Maybe.none':var $5107 = Parser$Reply$error$($5103);var $5104 = $5107;break;};var $5102 = $5104;break;case 'Parser.Reply.value':var $5108=self.pst;var self = $5108;switch(self._){case 'Parser.State.new':var $5110=self.err;var $5111=self.nam;var $5112=self.ini;var $5113=self.idx;var $5114=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($5101,$5110),$5111,$5112,$5113,$5114);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $5116=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $5118=self.err;var self = $5116;switch(self._){case 'Maybe.some':var $5120=self.value;var $5121 = Parser$Reply$error$(Parser$Error$combine$($5120,$5118));var $5119 = $5121;break;case 'Maybe.none':var $5122 = Parser$Reply$error$($5118);var $5119 = $5122;break;};var $5117 = $5119;break;case 'Parser.Reply.value':var $5123=self.pst;var $5124=self.val;var self = $5123;switch(self._){case 'Parser.State.new':var $5126=self.err;var $5127=self.nam;var $5128=self.ini;var $5129=self.idx;var $5130=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($5116,$5126),$5127,$5128,$5129,$5130);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $5132=self.err;var _reply$36 = Kind$Parser$text$("with ",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $5134=self.err;var self = $5132;switch(self._){case 'Maybe.some':var $5136=self.value;var $5137 = Parser$Reply$error$(Parser$Error$combine$($5136,$5134));var $5135 = $5137;break;case 'Maybe.none':var $5138 = Parser$Reply$error$($5134);var $5135 = $5138;break;};var $5133 = $5135;break;case 'Parser.Reply.value':var $5139=self.pst;var self = $5139;switch(self._){case 'Parser.State.new':var $5141=self.err;var $5142=self.nam;var $5143=self.ini;var $5144=self.idx;var $5145=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($5132,$5141),$5142,$5143,$5144,$5145);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $5147=self.err;var _reply$50 = Kind$Parser$text$("{",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $5149=self.err;var self = $5147;switch(self._){case 'Maybe.some':var $5151=self.value;var $5152 = Parser$Reply$error$(Parser$Error$combine$($5151,$5149));var $5150 = $5152;break;case 'Maybe.none':var $5153 = Parser$Reply$error$($5149);var $5150 = $5153;break;};var $5148 = $5150;break;case 'Parser.Reply.value':var $5154=self.pst;var self = $5154;switch(self._){case 'Parser.State.new':var $5156=self.err;var $5157=self.nam;var $5158=self.ini;var $5159=self.idx;var $5160=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($5147,$5156),$5157,$5158,$5159,$5160);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $5162=self.err;var _reply$64 = Kind$Parser$name1$(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $5164=self.err;var self = $5162;switch(self._){case 'Maybe.some':var $5166=self.value;var $5167 = Parser$Reply$error$(Parser$Error$combine$($5166,$5164));var $5165 = $5167;break;case 'Maybe.none':var $5168 = Parser$Reply$error$($5164);var $5165 = $5168;break;};var $5163 = $5165;break;case 'Parser.Reply.value':var $5169=self.pst;var $5170=self.val;var self = $5169;switch(self._){case 'Parser.State.new':var $5172=self.err;var $5173=self.nam;var $5174=self.ini;var $5175=self.idx;var $5176=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($5162,$5172),$5173,$5174,$5175,$5176);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $5178=self.err;var _reply$78 = Kind$Parser$text$(",",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $5180=self.err;var self = $5178;switch(self._){case 'Maybe.some':var $5182=self.value;var $5183 = Parser$Reply$error$(Parser$Error$combine$($5182,$5180));var $5181 = $5183;break;case 'Maybe.none':var $5184 = Parser$Reply$error$($5180);var $5181 = $5184;break;};var $5179 = $5181;break;case 'Parser.Reply.value':var $5185=self.pst;var self = $5185;switch(self._){case 'Parser.State.new':var $5187=self.err;var $5188=self.nam;var $5189=self.ini;var $5190=self.idx;var $5191=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($5178,$5187),$5188,$5189,$5190,$5191);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $5193=self.err;var _reply$92 = Kind$Parser$name1$(_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $5195=self.err;var self = $5193;switch(self._){case 'Maybe.some':var $5197=self.value;var $5198 = Parser$Reply$error$(Parser$Error$combine$($5197,$5195));var $5196 = $5198;break;case 'Maybe.none':var $5199 = Parser$Reply$error$($5195);var $5196 = $5199;break;};var $5194 = $5196;break;case 'Parser.Reply.value':var $5200=self.pst;var $5201=self.val;var self = $5200;switch(self._){case 'Parser.State.new':var $5203=self.err;var $5204=self.nam;var $5205=self.ini;var $5206=self.idx;var $5207=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($5193,$5203),$5204,$5205,$5206,$5207);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $5209=self.err;var _reply$106 = Kind$Parser$text$("}",_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $5211=self.err;var self = $5209;switch(self._){case 'Maybe.some':var $5213=self.value;var $5214 = Parser$Reply$error$(Parser$Error$combine$($5213,$5211));var $5212 = $5214;break;case 'Maybe.none':var $5215 = Parser$Reply$error$($5211);var $5212 = $5215;break;};var $5210 = $5212;break;case 'Parser.Reply.value':var $5216=self.pst;var self = $5216;switch(self._){case 'Parser.State.new':var $5218=self.err;var $5219=self.nam;var $5220=self.ini;var $5221=self.idx;var $5222=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($5209,$5218),$5219,$5220,$5221,$5222);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $5224=self.err;var _reply$120 = Kind$Parser$text$(":",_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $5226=self.err;var self = $5224;switch(self._){case 'Maybe.some':var $5228=self.value;var $5229 = Parser$Reply$error$(Parser$Error$combine$($5228,$5226));var $5227 = $5229;break;case 'Maybe.none':var $5230 = Parser$Reply$error$($5226);var $5227 = $5230;break;};var $5225 = $5227;break;case 'Parser.Reply.value':var $5231=self.pst;var self = $5231;switch(self._){case 'Parser.State.new':var $5233=self.err;var $5234=self.nam;var $5235=self.ini;var $5236=self.idx;var $5237=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($5224,$5233),$5234,$5235,$5236,$5237);var self = _reply$pst$128;switch(self._){case 'Parser.State.new':var $5239=self.err;var _reply$134 = Kind$Parser$term(_reply$pst$128);var self = _reply$134;switch(self._){case 'Parser.Reply.error':var $5241=self.err;var self = $5239;switch(self._){case 'Maybe.some':var $5243=self.value;var $5244 = Parser$Reply$error$(Parser$Error$combine$($5243,$5241));var $5242 = $5244;break;case 'Maybe.none':var $5245 = Parser$Reply$error$($5241);var $5242 = $5245;break;};var $5240 = $5242;break;case 'Parser.Reply.value':var $5246=self.pst;var $5247=self.val;var self = $5246;switch(self._){case 'Parser.State.new':var $5249=self.err;var $5250=self.nam;var $5251=self.ini;var $5252=self.idx;var $5253=self.str;var _reply$pst$142 = Parser$State$new$(Parser$Error$maybe_combine$($5239,$5249),$5250,$5251,$5252,$5253);var self = _reply$pst$142;switch(self._){case 'Parser.State.new':var $5255=self.err;var _reply$148 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$142);var self = _reply$148;switch(self._){case 'Parser.Reply.error':var $5257=self.err;var self = $5255;switch(self._){case 'Maybe.some':var $5259=self.value;var $5260 = Parser$Reply$error$(Parser$Error$combine$($5259,$5257));var $5258 = $5260;break;case 'Maybe.none':var $5261 = Parser$Reply$error$($5257);var $5258 = $5261;break;};var $5256 = $5258;break;case 'Parser.Reply.value':var $5262=self.pst;var self = $5262;switch(self._){case 'Parser.State.new':var $5264=self.err;var $5265=self.nam;var $5266=self.ini;var $5267=self.idx;var $5268=self.str;var _reply$pst$156 = Parser$State$new$(Parser$Error$maybe_combine$($5255,$5264),$5265,$5266,$5267,$5268);var self = _reply$pst$156;switch(self._){case 'Parser.State.new':var $5270=self.err;var _reply$162 = _body$1(Unit$new)(_reply$pst$156);var self = _reply$162;switch(self._){case 'Parser.Reply.error':var $5272=self.err;var self = $5270;switch(self._){case 'Maybe.some':var $5274=self.value;var $5275 = Parser$Reply$error$(Parser$Error$combine$($5274,$5272));var $5273 = $5275;break;case 'Maybe.none':var $5276 = Parser$Reply$error$($5272);var $5273 = $5276;break;};var $5271 = $5273;break;case 'Parser.Reply.value':var $5277=self.pst;var $5278=self.val;var self = $5277;switch(self._){case 'Parser.State.new':var $5280=self.err;var $5281=self.nam;var $5282=self.ini;var $5283=self.idx;var $5284=self.str;var _reply$pst$170 = Parser$State$new$(Parser$Error$maybe_combine$($5270,$5280),$5281,$5282,$5283,$5284);var _moti$171 = Kind$Term$lam$("",(_x$171=>{var $5286 = Kind$Term$hol$(Bits$e);return $5286;}));var _term$172 = Kind$Term$ref$("Function.while");var _term$173 = Kind$Term$app$(_term$172,Kind$Term$hol$(Bits$e));var _init$174 = Kind$Term$ref$("Pair.new");var _init$175 = Kind$Term$app$(_init$174,Kind$Term$hol$(Bits$e));var _init$176 = Kind$Term$app$(_init$175,Kind$Term$hol$(Bits$e));var _init$177 = Kind$Term$app$(_init$176,Kind$Term$ref$($5170));var _init$178 = Kind$Term$app$(_init$177,Kind$Term$ref$($5201));var _term$179 = Kind$Term$app$(_term$173,_init$178);var _term$180 = Kind$Term$app$(_term$179,Kind$Term$lam$("s",(_s$180=>{var $5287 = Kind$Term$app$(Kind$Term$app$(_s$180,_moti$171),Kind$Term$lam$($5170,(_x$181=>{var $5288 = Kind$Term$lam$($5201,(_y$182=>{var $5289 = $5124;return $5289;}));return $5288;})));return $5287;})));var _term$181 = Kind$Term$app$(_term$180,Kind$Term$lam$("s",(_s$181=>{var $5290 = Kind$Term$app$(Kind$Term$app$(_s$181,_moti$171),Kind$Term$lam$($5170,(_x$182=>{var $5291 = Kind$Term$lam$($5201,(_y$183=>{var $5292 = $5247;return $5292;}));return $5291;})));return $5290;})));var _term$182 = Kind$Term$app$(Kind$Term$app$(_term$181,_moti$171),Kind$Term$lam$($5170,(_x$182=>{var $5293 = Kind$Term$lam$($5201,(_y$183=>{var $5294 = $5278;return $5294;}));return $5293;})));var $5285 = Parser$Reply$value$(_reply$pst$170,_term$182);var $5279 = $5285;break;};var $5271 = $5279;break;};var $5269 = $5271;break;};var $5263 = $5269;break;};var $5256 = $5263;break;};var $5254 = $5256;break;};var $5248 = $5254;break;};var $5240 = $5248;break;};var $5238 = $5240;break;};var $5232 = $5238;break;};var $5225 = $5232;break;};var $5223 = $5225;break;};var $5217 = $5223;break;};var $5210 = $5217;break;};var $5208 = $5210;break;};var $5202 = $5208;break;};var $5194 = $5202;break;};var $5192 = $5194;break;};var $5186 = $5192;break;};var $5179 = $5186;break;};var $5177 = $5179;break;};var $5171 = $5177;break;};var $5163 = $5171;break;};var $5161 = $5163;break;};var $5155 = $5161;break;};var $5148 = $5155;break;};var $5146 = $5148;break;};var $5140 = $5146;break;};var $5133 = $5140;break;};var $5131 = $5133;break;};var $5125 = $5131;break;};var $5117 = $5125;break;};var $5115 = $5117;break;};var $5109 = $5115;break;};var $5102 = $5109;break;};var $5100 = $5102;break;};return $5100;};
  const Kind$Parser$getwhile$with = x0=>x1=>Kind$Parser$getwhile$with$(x0,x1);
  function Kind$Parser$get$(_body$1){var $5295 = Kind$Parser$block("let")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $5297=self.err;var _reply$8 = Kind$Parser$text$("let ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $5299=self.err;var self = $5297;switch(self._){case 'Maybe.some':var $5301=self.value;var $5302 = Parser$Reply$error$(Parser$Error$combine$($5301,$5299));var $5300 = $5302;break;case 'Maybe.none':var $5303 = Parser$Reply$error$($5299);var $5300 = $5303;break;};var $5298 = $5300;break;case 'Parser.Reply.value':var $5304=self.pst;var self = $5304;switch(self._){case 'Parser.State.new':var $5306=self.err;var $5307=self.nam;var $5308=self.ini;var $5309=self.idx;var $5310=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($5297,$5306),$5307,$5308,$5309,$5310);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $5312=self.err;var _reply$22 = Kind$Parser$text$("{",_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $5314=self.err;var self = $5312;switch(self._){case 'Maybe.some':var $5316=self.value;var $5317 = Parser$Reply$error$(Parser$Error$combine$($5316,$5314));var $5315 = $5317;break;case 'Maybe.none':var $5318 = Parser$Reply$error$($5314);var $5315 = $5318;break;};var $5313 = $5315;break;case 'Parser.Reply.value':var $5319=self.pst;var self = $5319;switch(self._){case 'Parser.State.new':var $5321=self.err;var $5322=self.nam;var $5323=self.ini;var $5324=self.idx;var $5325=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($5312,$5321),$5322,$5323,$5324,$5325);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $5327=self.err;var _reply$36 = Kind$Parser$name1$(_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $5329=self.err;var self = $5327;switch(self._){case 'Maybe.some':var $5331=self.value;var $5332 = Parser$Reply$error$(Parser$Error$combine$($5331,$5329));var $5330 = $5332;break;case 'Maybe.none':var $5333 = Parser$Reply$error$($5329);var $5330 = $5333;break;};var $5328 = $5330;break;case 'Parser.Reply.value':var $5334=self.pst;var $5335=self.val;var self = $5334;switch(self._){case 'Parser.State.new':var $5337=self.err;var $5338=self.nam;var $5339=self.ini;var $5340=self.idx;var $5341=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($5327,$5337),$5338,$5339,$5340,$5341);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $5343=self.err;var _reply$50 = Kind$Parser$text$(",",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $5345=self.err;var self = $5343;switch(self._){case 'Maybe.some':var $5347=self.value;var $5348 = Parser$Reply$error$(Parser$Error$combine$($5347,$5345));var $5346 = $5348;break;case 'Maybe.none':var $5349 = Parser$Reply$error$($5345);var $5346 = $5349;break;};var $5344 = $5346;break;case 'Parser.Reply.value':var $5350=self.pst;var self = $5350;switch(self._){case 'Parser.State.new':var $5352=self.err;var $5353=self.nam;var $5354=self.ini;var $5355=self.idx;var $5356=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($5343,$5352),$5353,$5354,$5355,$5356);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $5358=self.err;var _reply$64 = Kind$Parser$name1$(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $5360=self.err;var self = $5358;switch(self._){case 'Maybe.some':var $5362=self.value;var $5363 = Parser$Reply$error$(Parser$Error$combine$($5362,$5360));var $5361 = $5363;break;case 'Maybe.none':var $5364 = Parser$Reply$error$($5360);var $5361 = $5364;break;};var $5359 = $5361;break;case 'Parser.Reply.value':var $5365=self.pst;var $5366=self.val;var self = $5365;switch(self._){case 'Parser.State.new':var $5368=self.err;var $5369=self.nam;var $5370=self.ini;var $5371=self.idx;var $5372=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($5358,$5368),$5369,$5370,$5371,$5372);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $5374=self.err;var _reply$78 = Kind$Parser$text$("}",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $5376=self.err;var self = $5374;switch(self._){case 'Maybe.some':var $5378=self.value;var $5379 = Parser$Reply$error$(Parser$Error$combine$($5378,$5376));var $5377 = $5379;break;case 'Maybe.none':var $5380 = Parser$Reply$error$($5376);var $5377 = $5380;break;};var $5375 = $5377;break;case 'Parser.Reply.value':var $5381=self.pst;var self = $5381;switch(self._){case 'Parser.State.new':var $5383=self.err;var $5384=self.nam;var $5385=self.ini;var $5386=self.idx;var $5387=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($5374,$5383),$5384,$5385,$5386,$5387);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $5389=self.err;var _reply$92 = Kind$Parser$text$("=",_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $5391=self.err;var self = $5389;switch(self._){case 'Maybe.some':var $5393=self.value;var $5394 = Parser$Reply$error$(Parser$Error$combine$($5393,$5391));var $5392 = $5394;break;case 'Maybe.none':var $5395 = Parser$Reply$error$($5391);var $5392 = $5395;break;};var $5390 = $5392;break;case 'Parser.Reply.value':var $5396=self.pst;var self = $5396;switch(self._){case 'Parser.State.new':var $5398=self.err;var $5399=self.nam;var $5400=self.ini;var $5401=self.idx;var $5402=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($5389,$5398),$5399,$5400,$5401,$5402);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $5404=self.err;var _reply$106 = Kind$Parser$term(_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $5406=self.err;var self = $5404;switch(self._){case 'Maybe.some':var $5408=self.value;var $5409 = Parser$Reply$error$(Parser$Error$combine$($5408,$5406));var $5407 = $5409;break;case 'Maybe.none':var $5410 = Parser$Reply$error$($5406);var $5407 = $5410;break;};var $5405 = $5407;break;case 'Parser.Reply.value':var $5411=self.pst;var $5412=self.val;var self = $5411;switch(self._){case 'Parser.State.new':var $5414=self.err;var $5415=self.nam;var $5416=self.ini;var $5417=self.idx;var $5418=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($5404,$5414),$5415,$5416,$5417,$5418);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $5420=self.err;var _reply$120 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $5422=self.err;var self = $5420;switch(self._){case 'Maybe.some':var $5424=self.value;var $5425 = Parser$Reply$error$(Parser$Error$combine$($5424,$5422));var $5423 = $5425;break;case 'Maybe.none':var $5426 = Parser$Reply$error$($5422);var $5423 = $5426;break;};var $5421 = $5423;break;case 'Parser.Reply.value':var $5427=self.pst;var self = $5427;switch(self._){case 'Parser.State.new':var $5429=self.err;var $5430=self.nam;var $5431=self.ini;var $5432=self.idx;var $5433=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($5420,$5429),$5430,$5431,$5432,$5433);var self = _reply$pst$128;switch(self._){case 'Parser.State.new':var $5435=self.err;var _reply$134 = _body$1(Unit$new)(_reply$pst$128);var self = _reply$134;switch(self._){case 'Parser.Reply.error':var $5437=self.err;var self = $5435;switch(self._){case 'Maybe.some':var $5439=self.value;var $5440 = Parser$Reply$error$(Parser$Error$combine$($5439,$5437));var $5438 = $5440;break;case 'Maybe.none':var $5441 = Parser$Reply$error$($5437);var $5438 = $5441;break;};var $5436 = $5438;break;case 'Parser.Reply.value':var $5442=self.pst;var $5443=self.val;var self = $5442;switch(self._){case 'Parser.State.new':var $5445=self.err;var $5446=self.nam;var $5447=self.ini;var $5448=self.idx;var $5449=self.str;var _reply$pst$142 = Parser$State$new$(Parser$Error$maybe_combine$($5435,$5445),$5446,$5447,$5448,$5449);var _term$143 = $5412;var _term$144 = Kind$Term$app$(_term$143,Kind$Term$lam$("",(_x$144=>{var $5451 = Kind$Term$hol$(Bits$e);return $5451;})));var _term$145 = Kind$Term$app$(_term$144,Kind$Term$lam$($5335,(_x$145=>{var $5452 = Kind$Term$lam$($5366,(_y$146=>{var $5453 = $5443;return $5453;}));return $5452;})));var $5450 = Parser$Reply$value$(_reply$pst$142,_term$145);var $5444 = $5450;break;};var $5436 = $5444;break;};var $5434 = $5436;break;};var $5428 = $5434;break;};var $5421 = $5428;break;};var $5419 = $5421;break;};var $5413 = $5419;break;};var $5405 = $5413;break;};var $5403 = $5405;break;};var $5397 = $5403;break;};var $5390 = $5397;break;};var $5388 = $5390;break;};var $5382 = $5388;break;};var $5375 = $5382;break;};var $5373 = $5375;break;};var $5367 = $5373;break;};var $5359 = $5367;break;};var $5357 = $5359;break;};var $5351 = $5357;break;};var $5344 = $5351;break;};var $5342 = $5344;break;};var $5336 = $5342;break;};var $5328 = $5336;break;};var $5326 = $5328;break;};var $5320 = $5326;break;};var $5313 = $5320;break;};var $5311 = $5313;break;};var $5305 = $5311;break;};var $5298 = $5305;break;};var $5296 = $5298;break;};return $5296;}));return $5295;};
  const Kind$Parser$get = x0=>Kind$Parser$get$(x0);
  function Kind$Parser$get$omit$(_body$1){var $5454 = Kind$Parser$block("let")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $5456=self.err;var _reply$8 = Kind$Parser$text$("{",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $5458=self.err;var self = $5456;switch(self._){case 'Maybe.some':var $5460=self.value;var $5461 = Parser$Reply$error$(Parser$Error$combine$($5460,$5458));var $5459 = $5461;break;case 'Maybe.none':var $5462 = Parser$Reply$error$($5458);var $5459 = $5462;break;};var $5457 = $5459;break;case 'Parser.Reply.value':var $5463=self.pst;var self = $5463;switch(self._){case 'Parser.State.new':var $5465=self.err;var $5466=self.nam;var $5467=self.ini;var $5468=self.idx;var $5469=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($5456,$5465),$5466,$5467,$5468,$5469);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $5471=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $5473=self.err;var self = $5471;switch(self._){case 'Maybe.some':var $5475=self.value;var $5476 = Parser$Reply$error$(Parser$Error$combine$($5475,$5473));var $5474 = $5476;break;case 'Maybe.none':var $5477 = Parser$Reply$error$($5473);var $5474 = $5477;break;};var $5472 = $5474;break;case 'Parser.Reply.value':var $5478=self.pst;var $5479=self.val;var self = $5478;switch(self._){case 'Parser.State.new':var $5481=self.err;var $5482=self.nam;var $5483=self.ini;var $5484=self.idx;var $5485=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($5471,$5481),$5482,$5483,$5484,$5485);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $5487=self.err;var _reply$36 = Kind$Parser$text$(",",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $5489=self.err;var self = $5487;switch(self._){case 'Maybe.some':var $5491=self.value;var $5492 = Parser$Reply$error$(Parser$Error$combine$($5491,$5489));var $5490 = $5492;break;case 'Maybe.none':var $5493 = Parser$Reply$error$($5489);var $5490 = $5493;break;};var $5488 = $5490;break;case 'Parser.Reply.value':var $5494=self.pst;var self = $5494;switch(self._){case 'Parser.State.new':var $5496=self.err;var $5497=self.nam;var $5498=self.ini;var $5499=self.idx;var $5500=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($5487,$5496),$5497,$5498,$5499,$5500);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $5502=self.err;var _reply$50 = Kind$Parser$name1$(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $5504=self.err;var self = $5502;switch(self._){case 'Maybe.some':var $5506=self.value;var $5507 = Parser$Reply$error$(Parser$Error$combine$($5506,$5504));var $5505 = $5507;break;case 'Maybe.none':var $5508 = Parser$Reply$error$($5504);var $5505 = $5508;break;};var $5503 = $5505;break;case 'Parser.Reply.value':var $5509=self.pst;var $5510=self.val;var self = $5509;switch(self._){case 'Parser.State.new':var $5512=self.err;var $5513=self.nam;var $5514=self.ini;var $5515=self.idx;var $5516=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($5502,$5512),$5513,$5514,$5515,$5516);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $5518=self.err;var _reply$64 = Kind$Parser$text$("}",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $5520=self.err;var self = $5518;switch(self._){case 'Maybe.some':var $5522=self.value;var $5523 = Parser$Reply$error$(Parser$Error$combine$($5522,$5520));var $5521 = $5523;break;case 'Maybe.none':var $5524 = Parser$Reply$error$($5520);var $5521 = $5524;break;};var $5519 = $5521;break;case 'Parser.Reply.value':var $5525=self.pst;var self = $5525;switch(self._){case 'Parser.State.new':var $5527=self.err;var $5528=self.nam;var $5529=self.ini;var $5530=self.idx;var $5531=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($5518,$5527),$5528,$5529,$5530,$5531);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $5533=self.err;var _reply$78 = Kind$Parser$text$("= ",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $5535=self.err;var self = $5533;switch(self._){case 'Maybe.some':var $5537=self.value;var $5538 = Parser$Reply$error$(Parser$Error$combine$($5537,$5535));var $5536 = $5538;break;case 'Maybe.none':var $5539 = Parser$Reply$error$($5535);var $5536 = $5539;break;};var $5534 = $5536;break;case 'Parser.Reply.value':var $5540=self.pst;var self = $5540;switch(self._){case 'Parser.State.new':var $5542=self.err;var $5543=self.nam;var $5544=self.ini;var $5545=self.idx;var $5546=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($5533,$5542),$5543,$5544,$5545,$5546);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $5548=self.err;var _reply$92 = Kind$Parser$term(_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $5550=self.err;var self = $5548;switch(self._){case 'Maybe.some':var $5552=self.value;var $5553 = Parser$Reply$error$(Parser$Error$combine$($5552,$5550));var $5551 = $5553;break;case 'Maybe.none':var $5554 = Parser$Reply$error$($5550);var $5551 = $5554;break;};var $5549 = $5551;break;case 'Parser.Reply.value':var $5555=self.pst;var $5556=self.val;var self = $5555;switch(self._){case 'Parser.State.new':var $5558=self.err;var $5559=self.nam;var $5560=self.ini;var $5561=self.idx;var $5562=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($5548,$5558),$5559,$5560,$5561,$5562);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $5564=self.err;var _reply$106 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $5566=self.err;var self = $5564;switch(self._){case 'Maybe.some':var $5568=self.value;var $5569 = Parser$Reply$error$(Parser$Error$combine$($5568,$5566));var $5567 = $5569;break;case 'Maybe.none':var $5570 = Parser$Reply$error$($5566);var $5567 = $5570;break;};var $5565 = $5567;break;case 'Parser.Reply.value':var $5571=self.pst;var self = $5571;switch(self._){case 'Parser.State.new':var $5573=self.err;var $5574=self.nam;var $5575=self.ini;var $5576=self.idx;var $5577=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($5564,$5573),$5574,$5575,$5576,$5577);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $5579=self.err;var _reply$120 = _body$1(Unit$new)(_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $5581=self.err;var self = $5579;switch(self._){case 'Maybe.some':var $5583=self.value;var $5584 = Parser$Reply$error$(Parser$Error$combine$($5583,$5581));var $5582 = $5584;break;case 'Maybe.none':var $5585 = Parser$Reply$error$($5581);var $5582 = $5585;break;};var $5580 = $5582;break;case 'Parser.Reply.value':var $5586=self.pst;var $5587=self.val;var self = $5586;switch(self._){case 'Parser.State.new':var $5589=self.err;var $5590=self.nam;var $5591=self.ini;var $5592=self.idx;var $5593=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($5579,$5589),$5590,$5591,$5592,$5593);var _term$129 = $5556;var _term$130 = Kind$Term$app$(_term$129,Kind$Term$lam$("",(_x$130=>{var $5595 = Kind$Term$hol$(Bits$e);return $5595;})));var _term$131 = Kind$Term$app$(_term$130,Kind$Term$lam$($5479,(_x$131=>{var $5596 = Kind$Term$lam$($5510,(_y$132=>{var $5597 = $5587;return $5597;}));return $5596;})));var $5594 = Parser$Reply$value$(_reply$pst$128,_term$131);var $5588 = $5594;break;};var $5580 = $5588;break;};var $5578 = $5580;break;};var $5572 = $5578;break;};var $5565 = $5572;break;};var $5563 = $5565;break;};var $5557 = $5563;break;};var $5549 = $5557;break;};var $5547 = $5549;break;};var $5541 = $5547;break;};var $5534 = $5541;break;};var $5532 = $5534;break;};var $5526 = $5532;break;};var $5519 = $5526;break;};var $5517 = $5519;break;};var $5511 = $5517;break;};var $5503 = $5511;break;};var $5501 = $5503;break;};var $5495 = $5501;break;};var $5488 = $5495;break;};var $5486 = $5488;break;};var $5480 = $5486;break;};var $5472 = $5480;break;};var $5470 = $5472;break;};var $5464 = $5470;break;};var $5457 = $5464;break;};var $5455 = $5457;break;};return $5455;}));return $5454;};
  const Kind$Parser$get$omit = x0=>Kind$Parser$get$omit$(x0);
  function Kind$Parser$def$(_body$1){var $5598 = Kind$Parser$block("def")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $5600=self.err;var _reply$8 = Kind$Parser$text$("def ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $5602=self.err;var self = $5600;switch(self._){case 'Maybe.some':var $5604=self.value;var $5605 = Parser$Reply$error$(Parser$Error$combine$($5604,$5602));var $5603 = $5605;break;case 'Maybe.none':var $5606 = Parser$Reply$error$($5602);var $5603 = $5606;break;};var $5601 = $5603;break;case 'Parser.Reply.value':var $5607=self.pst;var self = $5607;switch(self._){case 'Parser.State.new':var $5609=self.err;var $5610=self.nam;var $5611=self.ini;var $5612=self.idx;var $5613=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($5600,$5609),$5610,$5611,$5612,$5613);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $5615=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $5617=self.err;var self = $5615;switch(self._){case 'Maybe.some':var $5619=self.value;var $5620 = Parser$Reply$error$(Parser$Error$combine$($5619,$5617));var $5618 = $5620;break;case 'Maybe.none':var $5621 = Parser$Reply$error$($5617);var $5618 = $5621;break;};var $5616 = $5618;break;case 'Parser.Reply.value':var $5622=self.pst;var $5623=self.val;var self = $5622;switch(self._){case 'Parser.State.new':var $5625=self.err;var $5626=self.nam;var $5627=self.ini;var $5628=self.idx;var $5629=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($5615,$5625),$5626,$5627,$5628,$5629);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $5631=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $5633=self.err;var self = $5631;switch(self._){case 'Maybe.some':var $5635=self.value;var $5636 = Parser$Reply$error$(Parser$Error$combine$($5635,$5633));var $5634 = $5636;break;case 'Maybe.none':var $5637 = Parser$Reply$error$($5633);var $5634 = $5637;break;};var $5632 = $5634;break;case 'Parser.Reply.value':var $5638=self.pst;var self = $5638;switch(self._){case 'Parser.State.new':var $5640=self.err;var $5641=self.nam;var $5642=self.ini;var $5643=self.idx;var $5644=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($5631,$5640),$5641,$5642,$5643,$5644);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $5646=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $5648=self.err;var self = $5646;switch(self._){case 'Maybe.some':var $5650=self.value;var $5651 = Parser$Reply$error$(Parser$Error$combine$($5650,$5648));var $5649 = $5651;break;case 'Maybe.none':var $5652 = Parser$Reply$error$($5648);var $5649 = $5652;break;};var $5647 = $5649;break;case 'Parser.Reply.value':var $5653=self.pst;var $5654=self.val;var self = $5653;switch(self._){case 'Parser.State.new':var $5656=self.err;var $5657=self.nam;var $5658=self.ini;var $5659=self.idx;var $5660=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($5646,$5656),$5657,$5658,$5659,$5660);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $5662=self.err;var _reply$64 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $5664=self.err;var self = $5662;switch(self._){case 'Maybe.some':var $5666=self.value;var $5667 = Parser$Reply$error$(Parser$Error$combine$($5666,$5664));var $5665 = $5667;break;case 'Maybe.none':var $5668 = Parser$Reply$error$($5664);var $5665 = $5668;break;};var $5663 = $5665;break;case 'Parser.Reply.value':var $5669=self.pst;var self = $5669;switch(self._){case 'Parser.State.new':var $5671=self.err;var $5672=self.nam;var $5673=self.ini;var $5674=self.idx;var $5675=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($5662,$5671),$5672,$5673,$5674,$5675);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $5677=self.err;var _reply$78 = _body$1(Unit$new)(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $5679=self.err;var self = $5677;switch(self._){case 'Maybe.some':var $5681=self.value;var $5682 = Parser$Reply$error$(Parser$Error$combine$($5681,$5679));var $5680 = $5682;break;case 'Maybe.none':var $5683 = Parser$Reply$error$($5679);var $5680 = $5683;break;};var $5678 = $5680;break;case 'Parser.Reply.value':var $5684=self.pst;var $5685=self.val;var self = $5684;switch(self._){case 'Parser.State.new':var $5687=self.err;var $5688=self.nam;var $5689=self.ini;var $5690=self.idx;var $5691=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($5677,$5687),$5688,$5689,$5690,$5691);var $5692 = Parser$Reply$value$(_reply$pst$86,Kind$Term$def$($5623,$5654,(_x$87=>{var $5693 = $5685;return $5693;})));var $5686 = $5692;break;};var $5678 = $5686;break;};var $5676 = $5678;break;};var $5670 = $5676;break;};var $5663 = $5670;break;};var $5661 = $5663;break;};var $5655 = $5661;break;};var $5647 = $5655;break;};var $5645 = $5647;break;};var $5639 = $5645;break;};var $5632 = $5639;break;};var $5630 = $5632;break;};var $5624 = $5630;break;};var $5616 = $5624;break;};var $5614 = $5616;break;};var $5608 = $5614;break;};var $5601 = $5608;break;};var $5599 = $5601;break;};return $5599;}));return $5598;};
  const Kind$Parser$def = x0=>Kind$Parser$def$(x0);
  function Kind$Term$cse$(_path$1,_expr$2,_name$3,_with$4,_cses$5,_moti$6){var $5694 = ({_:'Kind.Term.cse','path':_path$1,'expr':_expr$2,'name':_name$3,'with':_with$4,'cses':_cses$5,'moti':_moti$6});return $5694;};
  const Kind$Term$cse = x0=>x1=>x2=>x3=>x4=>x5=>Kind$Term$cse$(x0,x1,x2,x3,x4,x5);
  function Kind$Parser$use$abort$(_body$1){var $5695 = Kind$Parser$block("use")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $5697=self.err;var _reply$8 = Kind$Parser$text$("use ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $5699=self.err;var self = $5697;switch(self._){case 'Maybe.some':var $5701=self.value;var $5702 = Parser$Reply$error$(Parser$Error$combine$($5701,$5699));var $5700 = $5702;break;case 'Maybe.none':var $5703 = Parser$Reply$error$($5699);var $5700 = $5703;break;};var $5698 = $5700;break;case 'Parser.Reply.value':var $5704=self.pst;var self = $5704;switch(self._){case 'Parser.State.new':var $5706=self.err;var $5707=self.nam;var $5708=self.ini;var $5709=self.idx;var $5710=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($5697,$5706),$5707,$5708,$5709,$5710);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $5712=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $5714=self.err;var self = $5712;switch(self._){case 'Maybe.some':var $5716=self.value;var $5717 = Parser$Reply$error$(Parser$Error$combine$($5716,$5714));var $5715 = $5717;break;case 'Maybe.none':var $5718 = Parser$Reply$error$($5714);var $5715 = $5718;break;};var $5713 = $5715;break;case 'Parser.Reply.value':var $5719=self.pst;var $5720=self.val;var self = $5719;switch(self._){case 'Parser.State.new':var $5722=self.err;var $5723=self.nam;var $5724=self.ini;var $5725=self.idx;var $5726=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($5712,$5722),$5723,$5724,$5725,$5726);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $5728=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $5730=self.err;var self = $5728;switch(self._){case 'Maybe.some':var $5732=self.value;var $5733 = Parser$Reply$error$(Parser$Error$combine$($5732,$5730));var $5731 = $5733;break;case 'Maybe.none':var $5734 = Parser$Reply$error$($5730);var $5731 = $5734;break;};var $5729 = $5731;break;case 'Parser.Reply.value':var $5735=self.pst;var self = $5735;switch(self._){case 'Parser.State.new':var $5737=self.err;var $5738=self.nam;var $5739=self.ini;var $5740=self.idx;var $5741=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($5728,$5737),$5738,$5739,$5740,$5741);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $5743=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $5745=self.err;var self = $5743;switch(self._){case 'Maybe.some':var $5747=self.value;var $5748 = Parser$Reply$error$(Parser$Error$combine$($5747,$5745));var $5746 = $5748;break;case 'Maybe.none':var $5749 = Parser$Reply$error$($5745);var $5746 = $5749;break;};var $5744 = $5746;break;case 'Parser.Reply.value':var $5750=self.pst;var $5751=self.val;var self = $5750;switch(self._){case 'Parser.State.new':var $5753=self.err;var $5754=self.nam;var $5755=self.ini;var $5756=self.idx;var $5757=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($5743,$5753),$5754,$5755,$5756,$5757);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $5759=self.err;var _reply$64 = Kind$Parser$text$("abort ",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $5761=self.err;var self = $5759;switch(self._){case 'Maybe.some':var $5763=self.value;var $5764 = Parser$Reply$error$(Parser$Error$combine$($5763,$5761));var $5762 = $5764;break;case 'Maybe.none':var $5765 = Parser$Reply$error$($5761);var $5762 = $5765;break;};var $5760 = $5762;break;case 'Parser.Reply.value':var $5766=self.pst;var self = $5766;switch(self._){case 'Parser.State.new':var $5768=self.err;var $5769=self.nam;var $5770=self.ini;var $5771=self.idx;var $5772=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($5759,$5768),$5769,$5770,$5771,$5772);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $5774=self.err;var _reply$78 = Kind$Parser$term(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $5776=self.err;var self = $5774;switch(self._){case 'Maybe.some':var $5778=self.value;var $5779 = Parser$Reply$error$(Parser$Error$combine$($5778,$5776));var $5777 = $5779;break;case 'Maybe.none':var $5780 = Parser$Reply$error$($5776);var $5777 = $5780;break;};var $5775 = $5777;break;case 'Parser.Reply.value':var $5781=self.pst;var $5782=self.val;var self = $5781;switch(self._){case 'Parser.State.new':var $5784=self.err;var $5785=self.nam;var $5786=self.ini;var $5787=self.idx;var $5788=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($5774,$5784),$5785,$5786,$5787,$5788);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $5790=self.err;var _reply$92 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $5792=self.err;var self = $5790;switch(self._){case 'Maybe.some':var $5794=self.value;var $5795 = Parser$Reply$error$(Parser$Error$combine$($5794,$5792));var $5793 = $5795;break;case 'Maybe.none':var $5796 = Parser$Reply$error$($5792);var $5793 = $5796;break;};var $5791 = $5793;break;case 'Parser.Reply.value':var $5797=self.pst;var self = $5797;switch(self._){case 'Parser.State.new':var $5799=self.err;var $5800=self.nam;var $5801=self.ini;var $5802=self.idx;var $5803=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($5790,$5799),$5800,$5801,$5802,$5803);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $5805=self.err;var _reply$106 = _body$1(Unit$new)(_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $5807=self.err;var self = $5805;switch(self._){case 'Maybe.some':var $5809=self.value;var $5810 = Parser$Reply$error$(Parser$Error$combine$($5809,$5807));var $5808 = $5810;break;case 'Maybe.none':var $5811 = Parser$Reply$error$($5807);var $5808 = $5811;break;};var $5806 = $5808;break;case 'Parser.Reply.value':var $5812=self.pst;var $5813=self.val;var self = $5812;switch(self._){case 'Parser.State.new':var $5815=self.err;var $5816=self.nam;var $5817=self.ini;var $5818=self.idx;var $5819=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($5805,$5815),$5816,$5817,$5818,$5819);var _term$115 = $5751;var _term$116 = Kind$Term$app$(_term$115,Kind$Term$lam$("",(_$116=>{var $5821 = Kind$Term$hol$(Bits$e);return $5821;})));var _term$117 = Kind$Term$app$(_term$116,$5782);var _term$118 = Kind$Term$app$(_term$117,Kind$Term$lam$($5720,(_$118=>{var _wyth$119 = List$nil;var _cses$120 = Kind$Map$set$("_",$5813,Kind$Map$new);var _moti$121 = Maybe$some$(Kind$Term$hol$(Bits$e));var _term$122 = Kind$Term$let$($5720,Kind$Term$ref$($5720),(_$122=>{var $5823 = Kind$Term$cse$(Bits$e,Kind$Term$ref$($5720),$5720,_wyth$119,_cses$120,_moti$121);return $5823;}));var $5822 = _term$122;return $5822;})));var $5820 = Parser$Reply$value$(_reply$pst$114,_term$118);var $5814 = $5820;break;};var $5806 = $5814;break;};var $5804 = $5806;break;};var $5798 = $5804;break;};var $5791 = $5798;break;};var $5789 = $5791;break;};var $5783 = $5789;break;};var $5775 = $5783;break;};var $5773 = $5775;break;};var $5767 = $5773;break;};var $5760 = $5767;break;};var $5758 = $5760;break;};var $5752 = $5758;break;};var $5744 = $5752;break;};var $5742 = $5744;break;};var $5736 = $5742;break;};var $5729 = $5736;break;};var $5727 = $5729;break;};var $5721 = $5727;break;};var $5713 = $5721;break;};var $5711 = $5713;break;};var $5705 = $5711;break;};var $5698 = $5705;break;};var $5696 = $5698;break;};return $5696;}));return $5695;};
  const Kind$Parser$use$abort = x0=>Kind$Parser$use$abort$(x0);
  function Kind$Parser$use$(_body$1){var $5824 = Kind$Parser$block("use")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $5826=self.err;var _reply$8 = Kind$Parser$text$("use ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $5828=self.err;var self = $5826;switch(self._){case 'Maybe.some':var $5830=self.value;var $5831 = Parser$Reply$error$(Parser$Error$combine$($5830,$5828));var $5829 = $5831;break;case 'Maybe.none':var $5832 = Parser$Reply$error$($5828);var $5829 = $5832;break;};var $5827 = $5829;break;case 'Parser.Reply.value':var $5833=self.pst;var self = $5833;switch(self._){case 'Parser.State.new':var $5835=self.err;var $5836=self.nam;var $5837=self.ini;var $5838=self.idx;var $5839=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($5826,$5835),$5836,$5837,$5838,$5839);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $5841=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $5843=self.err;var self = $5841;switch(self._){case 'Maybe.some':var $5845=self.value;var $5846 = Parser$Reply$error$(Parser$Error$combine$($5845,$5843));var $5844 = $5846;break;case 'Maybe.none':var $5847 = Parser$Reply$error$($5843);var $5844 = $5847;break;};var $5842 = $5844;break;case 'Parser.Reply.value':var $5848=self.pst;var $5849=self.val;var self = $5848;switch(self._){case 'Parser.State.new':var $5851=self.err;var $5852=self.nam;var $5853=self.ini;var $5854=self.idx;var $5855=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($5841,$5851),$5852,$5853,$5854,$5855);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $5857=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $5859=self.err;var self = $5857;switch(self._){case 'Maybe.some':var $5861=self.value;var $5862 = Parser$Reply$error$(Parser$Error$combine$($5861,$5859));var $5860 = $5862;break;case 'Maybe.none':var $5863 = Parser$Reply$error$($5859);var $5860 = $5863;break;};var $5858 = $5860;break;case 'Parser.Reply.value':var $5864=self.pst;var self = $5864;switch(self._){case 'Parser.State.new':var $5866=self.err;var $5867=self.nam;var $5868=self.ini;var $5869=self.idx;var $5870=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($5857,$5866),$5867,$5868,$5869,$5870);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $5872=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $5874=self.err;var self = $5872;switch(self._){case 'Maybe.some':var $5876=self.value;var $5877 = Parser$Reply$error$(Parser$Error$combine$($5876,$5874));var $5875 = $5877;break;case 'Maybe.none':var $5878 = Parser$Reply$error$($5874);var $5875 = $5878;break;};var $5873 = $5875;break;case 'Parser.Reply.value':var $5879=self.pst;var $5880=self.val;var self = $5879;switch(self._){case 'Parser.State.new':var $5882=self.err;var $5883=self.nam;var $5884=self.ini;var $5885=self.idx;var $5886=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($5872,$5882),$5883,$5884,$5885,$5886);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $5888=self.err;var _reply$64 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $5890=self.err;var self = $5888;switch(self._){case 'Maybe.some':var $5892=self.value;var $5893 = Parser$Reply$error$(Parser$Error$combine$($5892,$5890));var $5891 = $5893;break;case 'Maybe.none':var $5894 = Parser$Reply$error$($5890);var $5891 = $5894;break;};var $5889 = $5891;break;case 'Parser.Reply.value':var $5895=self.pst;var self = $5895;switch(self._){case 'Parser.State.new':var $5897=self.err;var $5898=self.nam;var $5899=self.ini;var $5900=self.idx;var $5901=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($5888,$5897),$5898,$5899,$5900,$5901);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $5903=self.err;var _reply$78 = _body$1(Unit$new)(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $5905=self.err;var self = $5903;switch(self._){case 'Maybe.some':var $5907=self.value;var $5908 = Parser$Reply$error$(Parser$Error$combine$($5907,$5905));var $5906 = $5908;break;case 'Maybe.none':var $5909 = Parser$Reply$error$($5905);var $5906 = $5909;break;};var $5904 = $5906;break;case 'Parser.Reply.value':var $5910=self.pst;var $5911=self.val;var self = $5910;switch(self._){case 'Parser.State.new':var $5913=self.err;var $5914=self.nam;var $5915=self.ini;var $5916=self.idx;var $5917=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($5903,$5913),$5914,$5915,$5916,$5917);var _wyth$87 = List$nil;var _cses$88 = Kind$Map$set$("_",$5911,Kind$Map$new);var _moti$89 = Maybe$some$(Kind$Term$hol$(Bits$e));var _term$90 = Kind$Term$let$($5849,$5880,(_$90=>{var $5919 = Kind$Term$cse$(Bits$e,Kind$Term$ref$($5849),$5849,_wyth$87,_cses$88,_moti$89);return $5919;}));var $5918 = Parser$Reply$value$(_reply$pst$86,_term$90);var $5912 = $5918;break;};var $5904 = $5912;break;};var $5902 = $5904;break;};var $5896 = $5902;break;};var $5889 = $5896;break;};var $5887 = $5889;break;};var $5881 = $5887;break;};var $5873 = $5881;break;};var $5871 = $5873;break;};var $5865 = $5871;break;};var $5858 = $5865;break;};var $5856 = $5858;break;};var $5850 = $5856;break;};var $5842 = $5850;break;};var $5840 = $5842;break;};var $5834 = $5840;break;};var $5827 = $5834;break;};var $5825 = $5827;break;};return $5825;}));return $5824;};
  const Kind$Parser$use = x0=>Kind$Parser$use$(x0);
  const Kind$Parser$goal_rewrite = Kind$Parser$block("goal-rewrite")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $5921=self.err;var _reply$7 = Kind$Parser$text$("rewrite ",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $5923=self.err;var self = $5921;switch(self._){case 'Maybe.some':var $5925=self.value;var $5926 = Parser$Reply$error$(Parser$Error$combine$($5925,$5923));var $5924 = $5926;break;case 'Maybe.none':var $5927 = Parser$Reply$error$($5923);var $5924 = $5927;break;};var $5922 = $5924;break;case 'Parser.Reply.value':var $5928=self.pst;var self = $5928;switch(self._){case 'Parser.State.new':var $5930=self.err;var $5931=self.nam;var $5932=self.ini;var $5933=self.idx;var $5934=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($5921,$5930),$5931,$5932,$5933,$5934);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $5936=self.err;var _reply$21 = Kind$Parser$name1$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $5938=self.err;var self = $5936;switch(self._){case 'Maybe.some':var $5940=self.value;var $5941 = Parser$Reply$error$(Parser$Error$combine$($5940,$5938));var $5939 = $5941;break;case 'Maybe.none':var $5942 = Parser$Reply$error$($5938);var $5939 = $5942;break;};var $5937 = $5939;break;case 'Parser.Reply.value':var $5943=self.pst;var $5944=self.val;var self = $5943;switch(self._){case 'Parser.State.new':var $5946=self.err;var $5947=self.nam;var $5948=self.ini;var $5949=self.idx;var $5950=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($5936,$5946),$5947,$5948,$5949,$5950);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $5952=self.err;var _reply$35 = Kind$Parser$text$("in",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $5954=self.err;var self = $5952;switch(self._){case 'Maybe.some':var $5956=self.value;var $5957 = Parser$Reply$error$(Parser$Error$combine$($5956,$5954));var $5955 = $5957;break;case 'Maybe.none':var $5958 = Parser$Reply$error$($5954);var $5955 = $5958;break;};var $5953 = $5955;break;case 'Parser.Reply.value':var $5959=self.pst;var self = $5959;switch(self._){case 'Parser.State.new':var $5961=self.err;var $5962=self.nam;var $5963=self.ini;var $5964=self.idx;var $5965=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($5952,$5961),$5962,$5963,$5964,$5965);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $5967=self.err;var _reply$49 = Kind$Parser$term(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $5969=self.err;var self = $5967;switch(self._){case 'Maybe.some':var $5971=self.value;var $5972 = Parser$Reply$error$(Parser$Error$combine$($5971,$5969));var $5970 = $5972;break;case 'Maybe.none':var $5973 = Parser$Reply$error$($5969);var $5970 = $5973;break;};var $5968 = $5970;break;case 'Parser.Reply.value':var $5974=self.pst;var $5975=self.val;var self = $5974;switch(self._){case 'Parser.State.new':var $5977=self.err;var $5978=self.nam;var $5979=self.ini;var $5980=self.idx;var $5981=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($5967,$5977),$5978,$5979,$5980,$5981);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $5983=self.err;var _reply$63 = Kind$Parser$text$("with",_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $5985=self.err;var self = $5983;switch(self._){case 'Maybe.some':var $5987=self.value;var $5988 = Parser$Reply$error$(Parser$Error$combine$($5987,$5985));var $5986 = $5988;break;case 'Maybe.none':var $5989 = Parser$Reply$error$($5985);var $5986 = $5989;break;};var $5984 = $5986;break;case 'Parser.Reply.value':var $5990=self.pst;var self = $5990;switch(self._){case 'Parser.State.new':var $5992=self.err;var $5993=self.nam;var $5994=self.ini;var $5995=self.idx;var $5996=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($5983,$5992),$5993,$5994,$5995,$5996);var self = _reply$pst$71;switch(self._){case 'Parser.State.new':var $5998=self.err;var _reply$77 = Kind$Parser$term(_reply$pst$71);var self = _reply$77;switch(self._){case 'Parser.Reply.error':var $6000=self.err;var self = $5998;switch(self._){case 'Maybe.some':var $6002=self.value;var $6003 = Parser$Reply$error$(Parser$Error$combine$($6002,$6000));var $6001 = $6003;break;case 'Maybe.none':var $6004 = Parser$Reply$error$($6000);var $6001 = $6004;break;};var $5999 = $6001;break;case 'Parser.Reply.value':var $6005=self.pst;var $6006=self.val;var self = $6005;switch(self._){case 'Parser.State.new':var $6008=self.err;var $6009=self.nam;var $6010=self.ini;var $6011=self.idx;var $6012=self.str;var _reply$pst$85 = Parser$State$new$(Parser$Error$maybe_combine$($5998,$6008),$6009,$6010,$6011,$6012);var self = _reply$pst$85;switch(self._){case 'Parser.State.new':var $6014=self.err;var _reply$91 = Kind$Parser$term(_reply$pst$85);var self = _reply$91;switch(self._){case 'Parser.Reply.error':var $6016=self.err;var self = $6014;switch(self._){case 'Maybe.some':var $6018=self.value;var $6019 = Parser$Reply$error$(Parser$Error$combine$($6018,$6016));var $6017 = $6019;break;case 'Maybe.none':var $6020 = Parser$Reply$error$($6016);var $6017 = $6020;break;};var $6015 = $6017;break;case 'Parser.Reply.value':var $6021=self.pst;var $6022=self.val;var self = $6021;switch(self._){case 'Parser.State.new':var $6024=self.err;var $6025=self.nam;var $6026=self.ini;var $6027=self.idx;var $6028=self.str;var _reply$pst$99 = Parser$State$new$(Parser$Error$maybe_combine$($6014,$6024),$6025,$6026,$6027,$6028);var _moti$100 = Kind$Term$lam$($5944,(_s$100=>{var $6030 = Kind$Term$lam$("",(_x$101=>{var $6031 = $5975;return $6031;}));return $6030;}));var _term$101 = Kind$Term$ref$("Equal.mirror");var _term$102 = Kind$Term$app$(_term$101,Kind$Term$hol$(Bits$e));var _term$103 = Kind$Term$app$(_term$102,Kind$Term$hol$(Bits$e));var _term$104 = Kind$Term$app$(_term$103,Kind$Term$hol$(Bits$e));var _term$105 = Kind$Term$app$(_term$104,$6006);var _term$106 = Kind$Term$app$(_term$105,_moti$100);var _term$107 = Kind$Term$app$(_term$106,$6022);var $6029 = Parser$Reply$value$(_reply$pst$99,_term$107);var $6023 = $6029;break;};var $6015 = $6023;break;};var $6013 = $6015;break;};var $6007 = $6013;break;};var $5999 = $6007;break;};var $5997 = $5999;break;};var $5991 = $5997;break;};var $5984 = $5991;break;};var $5982 = $5984;break;};var $5976 = $5982;break;};var $5968 = $5976;break;};var $5966 = $5968;break;};var $5960 = $5966;break;};var $5953 = $5960;break;};var $5951 = $5953;break;};var $5945 = $5951;break;};var $5937 = $5945;break;};var $5935 = $5937;break;};var $5929 = $5935;break;};var $5922 = $5929;break;};var $5920 = $5922;break;};return $5920;}));
  const Kind$Parser$if = Kind$Parser$block("if")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6033=self.err;var _reply$7 = Kind$Parser$text$("if ",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6035=self.err;var self = $6033;switch(self._){case 'Maybe.some':var $6037=self.value;var $6038 = Parser$Reply$error$(Parser$Error$combine$($6037,$6035));var $6036 = $6038;break;case 'Maybe.none':var $6039 = Parser$Reply$error$($6035);var $6036 = $6039;break;};var $6034 = $6036;break;case 'Parser.Reply.value':var $6040=self.pst;var self = $6040;switch(self._){case 'Parser.State.new':var $6042=self.err;var $6043=self.nam;var $6044=self.ini;var $6045=self.idx;var $6046=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6033,$6042),$6043,$6044,$6045,$6046);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6048=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6050=self.err;var self = $6048;switch(self._){case 'Maybe.some':var $6052=self.value;var $6053 = Parser$Reply$error$(Parser$Error$combine$($6052,$6050));var $6051 = $6053;break;case 'Maybe.none':var $6054 = Parser$Reply$error$($6050);var $6051 = $6054;break;};var $6049 = $6051;break;case 'Parser.Reply.value':var $6055=self.pst;var $6056=self.val;var self = $6055;switch(self._){case 'Parser.State.new':var $6058=self.err;var $6059=self.nam;var $6060=self.ini;var $6061=self.idx;var $6062=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6048,$6058),$6059,$6060,$6061,$6062);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6064=self.err;var _reply$35 = Kind$Parser$text$("then",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6066=self.err;var self = $6064;switch(self._){case 'Maybe.some':var $6068=self.value;var $6069 = Parser$Reply$error$(Parser$Error$combine$($6068,$6066));var $6067 = $6069;break;case 'Maybe.none':var $6070 = Parser$Reply$error$($6066);var $6067 = $6070;break;};var $6065 = $6067;break;case 'Parser.Reply.value':var $6071=self.pst;var self = $6071;switch(self._){case 'Parser.State.new':var $6073=self.err;var $6074=self.nam;var $6075=self.ini;var $6076=self.idx;var $6077=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6064,$6073),$6074,$6075,$6076,$6077);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $6079=self.err;var _reply$49 = Kind$Parser$term(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $6081=self.err;var self = $6079;switch(self._){case 'Maybe.some':var $6083=self.value;var $6084 = Parser$Reply$error$(Parser$Error$combine$($6083,$6081));var $6082 = $6084;break;case 'Maybe.none':var $6085 = Parser$Reply$error$($6081);var $6082 = $6085;break;};var $6080 = $6082;break;case 'Parser.Reply.value':var $6086=self.pst;var $6087=self.val;var self = $6086;switch(self._){case 'Parser.State.new':var $6089=self.err;var $6090=self.nam;var $6091=self.ini;var $6092=self.idx;var $6093=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($6079,$6089),$6090,$6091,$6092,$6093);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $6095=self.err;var _reply$63 = Kind$Parser$text$("else",_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $6097=self.err;var self = $6095;switch(self._){case 'Maybe.some':var $6099=self.value;var $6100 = Parser$Reply$error$(Parser$Error$combine$($6099,$6097));var $6098 = $6100;break;case 'Maybe.none':var $6101 = Parser$Reply$error$($6097);var $6098 = $6101;break;};var $6096 = $6098;break;case 'Parser.Reply.value':var $6102=self.pst;var self = $6102;switch(self._){case 'Parser.State.new':var $6104=self.err;var $6105=self.nam;var $6106=self.ini;var $6107=self.idx;var $6108=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($6095,$6104),$6105,$6106,$6107,$6108);var self = _reply$pst$71;switch(self._){case 'Parser.State.new':var $6110=self.err;var _reply$77 = Kind$Parser$term(_reply$pst$71);var self = _reply$77;switch(self._){case 'Parser.Reply.error':var $6112=self.err;var self = $6110;switch(self._){case 'Maybe.some':var $6114=self.value;var $6115 = Parser$Reply$error$(Parser$Error$combine$($6114,$6112));var $6113 = $6115;break;case 'Maybe.none':var $6116 = Parser$Reply$error$($6112);var $6113 = $6116;break;};var $6111 = $6113;break;case 'Parser.Reply.value':var $6117=self.pst;var $6118=self.val;var self = $6117;switch(self._){case 'Parser.State.new':var $6120=self.err;var $6121=self.nam;var $6122=self.ini;var $6123=self.idx;var $6124=self.str;var _reply$pst$85 = Parser$State$new$(Parser$Error$maybe_combine$($6110,$6120),$6121,$6122,$6123,$6124);var _term$86 = $6056;var _term$87 = Kind$Term$app$(_term$86,Kind$Term$lam$("",(_x$87=>{var $6126 = Kind$Term$hol$(Bits$e);return $6126;})));var _term$88 = Kind$Term$app$(_term$87,$6087);var _term$89 = Kind$Term$app$(_term$88,$6118);var $6125 = Parser$Reply$value$(_reply$pst$85,_term$89);var $6119 = $6125;break;};var $6111 = $6119;break;};var $6109 = $6111;break;};var $6103 = $6109;break;};var $6096 = $6103;break;};var $6094 = $6096;break;};var $6088 = $6094;break;};var $6080 = $6088;break;};var $6078 = $6080;break;};var $6072 = $6078;break;};var $6065 = $6072;break;};var $6063 = $6065;break;};var $6057 = $6063;break;};var $6049 = $6057;break;};var $6047 = $6049;break;};var $6041 = $6047;break;};var $6034 = $6041;break;};var $6032 = $6034;break;};return $6032;}));
  const Kind$Code$backslash = 92;
  const Kind$Code$escapes = List$cons$(Pair$new$("\\b",8),List$cons$(Pair$new$("\\f",12),List$cons$(Pair$new$("\\n",10),List$cons$(Pair$new$("\\r",13),List$cons$(Pair$new$("\\t",9),List$cons$(Pair$new$("\\v",11),List$cons$(Pair$new$(String$cons$(Kind$Code$backslash,String$cons$(Kind$Code$backslash,String$nil)),Kind$Code$backslash),List$cons$(Pair$new$("\\\"",34),List$cons$(Pair$new$("\\0",0),List$cons$(Pair$new$("\\\'",39),List$nil))))))))));
  const Kind$Parser$char$single = Parser$choice(List$cons$(Parser$choice(List$mapped$(Kind$Code$escapes,(_esc$1=>{var self = _esc$1;switch(self._){case 'Pair.new':var $6128=self.fst;var $6129=self.snd;var $6130 = (_pst$4=>{var self = _pst$4;switch(self._){case 'Parser.State.new':var $6132=self.err;var _reply$10 = Parser$text$($6128,_pst$4);var self = _reply$10;switch(self._){case 'Parser.Reply.error':var $6134=self.err;var self = $6132;switch(self._){case 'Maybe.some':var $6136=self.value;var $6137 = Parser$Reply$error$(Parser$Error$combine$($6136,$6134));var $6135 = $6137;break;case 'Maybe.none':var $6138 = Parser$Reply$error$($6134);var $6135 = $6138;break;};var $6133 = $6135;break;case 'Parser.Reply.value':var $6139=self.pst;var self = $6139;switch(self._){case 'Parser.State.new':var $6141=self.err;var $6142=self.nam;var $6143=self.ini;var $6144=self.idx;var $6145=self.str;var _reply$pst$18 = Parser$State$new$(Parser$Error$maybe_combine$($6132,$6141),$6142,$6143,$6144,$6145);var $6146 = Parser$Reply$value$(_reply$pst$18,$6129);var $6140 = $6146;break;};var $6133 = $6140;break;};var $6131 = $6133;break;};return $6131;});var $6127 = $6130;break;};return $6127;}))),List$cons$(Parser$one,List$nil)));
  const Kind$Parser$char = Kind$Parser$block("char")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6148=self.err;var _reply$7 = Kind$Parser$text$("\'",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6150=self.err;var self = $6148;switch(self._){case 'Maybe.some':var $6152=self.value;var $6153 = Parser$Reply$error$(Parser$Error$combine$($6152,$6150));var $6151 = $6153;break;case 'Maybe.none':var $6154 = Parser$Reply$error$($6150);var $6151 = $6154;break;};var $6149 = $6151;break;case 'Parser.Reply.value':var $6155=self.pst;var self = $6155;switch(self._){case 'Parser.State.new':var $6157=self.err;var $6158=self.nam;var $6159=self.ini;var $6160=self.idx;var $6161=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6148,$6157),$6158,$6159,$6160,$6161);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6163=self.err;var _reply$21 = Kind$Parser$char$single(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6165=self.err;var self = $6163;switch(self._){case 'Maybe.some':var $6167=self.value;var $6168 = Parser$Reply$error$(Parser$Error$combine$($6167,$6165));var $6166 = $6168;break;case 'Maybe.none':var $6169 = Parser$Reply$error$($6165);var $6166 = $6169;break;};var $6164 = $6166;break;case 'Parser.Reply.value':var $6170=self.pst;var $6171=self.val;var self = $6170;switch(self._){case 'Parser.State.new':var $6173=self.err;var $6174=self.nam;var $6175=self.ini;var $6176=self.idx;var $6177=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6163,$6173),$6174,$6175,$6176,$6177);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6179=self.err;var _reply$35 = Kind$Parser$text$("\'",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6181=self.err;var self = $6179;switch(self._){case 'Maybe.some':var $6183=self.value;var $6184 = Parser$Reply$error$(Parser$Error$combine$($6183,$6181));var $6182 = $6184;break;case 'Maybe.none':var $6185 = Parser$Reply$error$($6181);var $6182 = $6185;break;};var $6180 = $6182;break;case 'Parser.Reply.value':var $6186=self.pst;var self = $6186;switch(self._){case 'Parser.State.new':var $6188=self.err;var $6189=self.nam;var $6190=self.ini;var $6191=self.idx;var $6192=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6179,$6188),$6189,$6190,$6191,$6192);var $6193 = Parser$Reply$value$(_reply$pst$43,Kind$Term$chr$($6171));var $6187 = $6193;break;};var $6180 = $6187;break;};var $6178 = $6180;break;};var $6172 = $6178;break;};var $6164 = $6172;break;};var $6162 = $6164;break;};var $6156 = $6162;break;};var $6149 = $6156;break;};var $6147 = $6149;break;};return $6147;}));
  function Kind$Parser$string$go$(_delim$1,_str$2,_pst$3){var Kind$Parser$string$go$=(_delim$1,_str$2,_pst$3)=>({ctr:'TCO',arg:[_delim$1,_str$2,_pst$3]});var Kind$Parser$string$go=_delim$1=>_str$2=>_pst$3=>Kind$Parser$string$go$(_delim$1,_str$2,_pst$3);var arg=[_delim$1,_str$2,_pst$3];while(true){let [_delim$1,_str$2,_pst$3]=arg;var R=(()=>{var self = _pst$3;switch(self._){case 'Parser.State.new':var $6194=self.err;var $6195=self.nam;var $6196=self.ini;var $6197=self.idx;var $6198=self.str;var self = $6198;if (self.length===0) {var $6200 = Parser$Reply$fail$($6195,$6196,$6197,"Non-terminating string.");var $6199 = $6200;} else {var $6201=self.charCodeAt(0);var $6202=self.slice(1);var self = ($6201===_delim$1);if (self) {var _pst$11 = Parser$State$new$($6194,$6195,$6196,Nat$succ$($6197),$6202);var $6204 = Parser$Reply$value$(_pst$11,String$reverse$(_str$2));var $6203 = $6204;} else {var self = Kind$Parser$char$single(_pst$3);switch(self._){case 'Parser.Reply.error':var $6206=self.err;var $6207 = Parser$Reply$error$($6206);var $6205 = $6207;break;case 'Parser.Reply.value':var $6208=self.pst;var $6209=self.val;var $6210 = Kind$Parser$string$go$(_delim$1,String$cons$($6209,_str$2),$6208);var $6205 = $6210;break;};var $6203 = $6205;};var $6199 = $6203;};return $6199;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Parser$string$go = x0=>x1=>x2=>Kind$Parser$string$go$(x0,x1,x2);
  function Kind$Parser$string$(_delim$1){var $6211 = Kind$Parser$block("string")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $6213=self.err;var _reply$8 = Kind$Parser$text$(String$cons$(_delim$1,String$nil),_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $6215=self.err;var self = $6213;switch(self._){case 'Maybe.some':var $6217=self.value;var $6218 = Parser$Reply$error$(Parser$Error$combine$($6217,$6215));var $6216 = $6218;break;case 'Maybe.none':var $6219 = Parser$Reply$error$($6215);var $6216 = $6219;break;};var $6214 = $6216;break;case 'Parser.Reply.value':var $6220=self.pst;var self = $6220;switch(self._){case 'Parser.State.new':var $6222=self.err;var $6223=self.nam;var $6224=self.ini;var $6225=self.idx;var $6226=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($6213,$6222),$6223,$6224,$6225,$6226);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $6228=self.err;var _reply$22 = Kind$Parser$string$go$(_delim$1,"",_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $6230=self.err;var self = $6228;switch(self._){case 'Maybe.some':var $6232=self.value;var $6233 = Parser$Reply$error$(Parser$Error$combine$($6232,$6230));var $6231 = $6233;break;case 'Maybe.none':var $6234 = Parser$Reply$error$($6230);var $6231 = $6234;break;};var $6229 = $6231;break;case 'Parser.Reply.value':var $6235=self.pst;var $6236=self.val;var self = $6235;switch(self._){case 'Parser.State.new':var $6238=self.err;var $6239=self.nam;var $6240=self.ini;var $6241=self.idx;var $6242=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($6228,$6238),$6239,$6240,$6241,$6242);var $6243 = Parser$Reply$value$(_reply$pst$30,Kind$Term$str$($6236));var $6237 = $6243;break;};var $6229 = $6237;break;};var $6227 = $6229;break;};var $6221 = $6227;break;};var $6214 = $6221;break;};var $6212 = $6214;break;};return $6212;}));return $6211;};
  const Kind$Parser$string = x0=>Kind$Parser$string$(x0);
  function Kind$Parser$items1$(_ini$2,_parser$3,_end$4){var $6244 = Parser$wrap1(Kind$Parser$text(_ini$2))((_pst$5=>{var self = _pst$5;switch(self._){case 'Parser.State.new':var $6246=self.err;var _reply$11 = Kind$Parser$spaces(_pst$5);var self = _reply$11;switch(self._){case 'Parser.Reply.error':var $6248=self.err;var self = $6246;switch(self._){case 'Maybe.some':var $6250=self.value;var $6251 = Parser$Reply$error$(Parser$Error$combine$($6250,$6248));var $6249 = $6251;break;case 'Maybe.none':var $6252 = Parser$Reply$error$($6248);var $6249 = $6252;break;};var $6247 = $6249;break;case 'Parser.Reply.value':var $6253=self.pst;var self = $6253;switch(self._){case 'Parser.State.new':var $6255=self.err;var $6256=self.nam;var $6257=self.ini;var $6258=self.idx;var $6259=self.str;var _reply$pst$19 = Parser$State$new$(Parser$Error$maybe_combine$($6246,$6255),$6256,$6257,$6258,$6259);var self = _reply$pst$19;switch(self._){case 'Parser.State.new':var $6261=self.err;var _reply$25 = _parser$3(_reply$pst$19);var self = _reply$25;switch(self._){case 'Parser.Reply.error':var $6263=self.err;var self = $6261;switch(self._){case 'Maybe.some':var $6265=self.value;var $6266 = Parser$Reply$error$(Parser$Error$combine$($6265,$6263));var $6264 = $6266;break;case 'Maybe.none':var $6267 = Parser$Reply$error$($6263);var $6264 = $6267;break;};var $6262 = $6264;break;case 'Parser.Reply.value':var $6268=self.pst;var $6269=self.val;var self = $6268;switch(self._){case 'Parser.State.new':var $6271=self.err;var $6272=self.nam;var $6273=self.ini;var $6274=self.idx;var $6275=self.str;var _reply$pst$33 = Parser$State$new$(Parser$Error$maybe_combine$($6261,$6271),$6272,$6273,$6274,$6275);var self = _reply$pst$33;switch(self._){case 'Parser.State.new':var $6277=self.err;var _reply$39 = Parser$maybe$(Kind$Parser$text(","),_reply$pst$33);var self = _reply$39;switch(self._){case 'Parser.Reply.error':var $6279=self.err;var self = $6277;switch(self._){case 'Maybe.some':var $6281=self.value;var $6282 = Parser$Reply$error$(Parser$Error$combine$($6281,$6279));var $6280 = $6282;break;case 'Maybe.none':var $6283 = Parser$Reply$error$($6279);var $6280 = $6283;break;};var $6278 = $6280;break;case 'Parser.Reply.value':var $6284=self.pst;var self = $6284;switch(self._){case 'Parser.State.new':var $6286=self.err;var $6287=self.nam;var $6288=self.ini;var $6289=self.idx;var $6290=self.str;var _reply$pst$47 = Parser$State$new$(Parser$Error$maybe_combine$($6277,$6286),$6287,$6288,$6289,$6290);var $6291 = Parser$Reply$value$(_reply$pst$47,$6269);var $6285 = $6291;break;};var $6278 = $6285;break;};var $6276 = $6278;break;};var $6270 = $6276;break;};var $6262 = $6270;break;};var $6260 = $6262;break;};var $6254 = $6260;break;};var $6247 = $6254;break;};var $6245 = $6247;break;};return $6245;}))(Kind$Parser$text(_end$4));return $6244;};
  const Kind$Parser$items1 = x0=>x1=>x2=>Kind$Parser$items1$(x0,x1,x2);
  function Kind$Term$new$(_args$1){var $6292 = ({_:'Kind.Term.new','args':_args$1});return $6292;};
  const Kind$Term$new = x0=>Kind$Term$new$(x0);
  const Kind$Parser$new = Kind$Parser$block("new-struct")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6294=self.err;var _reply$7 = Kind$Parser$items1$("{",Kind$Parser$term,"}")(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6296=self.err;var self = $6294;switch(self._){case 'Maybe.some':var $6298=self.value;var $6299 = Parser$Reply$error$(Parser$Error$combine$($6298,$6296));var $6297 = $6299;break;case 'Maybe.none':var $6300 = Parser$Reply$error$($6296);var $6297 = $6300;break;};var $6295 = $6297;break;case 'Parser.Reply.value':var $6301=self.pst;var $6302=self.val;var self = $6301;switch(self._){case 'Parser.State.new':var $6304=self.err;var $6305=self.nam;var $6306=self.ini;var $6307=self.idx;var $6308=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6294,$6304),$6305,$6306,$6307,$6308);var $6309 = Parser$Reply$value$(_reply$pst$15,Kind$Term$new$($6302));var $6303 = $6309;break;};var $6295 = $6303;break;};var $6293 = $6295;break;};return $6293;}));
  const Kind$Parser$sigma$type = Kind$Parser$block("sigma")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6311=self.err;var _reply$7 = Kind$Parser$text$("[",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6313=self.err;var self = $6311;switch(self._){case 'Maybe.some':var $6315=self.value;var $6316 = Parser$Reply$error$(Parser$Error$combine$($6315,$6313));var $6314 = $6316;break;case 'Maybe.none':var $6317 = Parser$Reply$error$($6313);var $6314 = $6317;break;};var $6312 = $6314;break;case 'Parser.Reply.value':var $6318=self.pst;var self = $6318;switch(self._){case 'Parser.State.new':var $6320=self.err;var $6321=self.nam;var $6322=self.ini;var $6323=self.idx;var $6324=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6311,$6320),$6321,$6322,$6323,$6324);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6326=self.err;var _reply$21 = Kind$Parser$name1$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6328=self.err;var self = $6326;switch(self._){case 'Maybe.some':var $6330=self.value;var $6331 = Parser$Reply$error$(Parser$Error$combine$($6330,$6328));var $6329 = $6331;break;case 'Maybe.none':var $6332 = Parser$Reply$error$($6328);var $6329 = $6332;break;};var $6327 = $6329;break;case 'Parser.Reply.value':var $6333=self.pst;var $6334=self.val;var self = $6333;switch(self._){case 'Parser.State.new':var $6336=self.err;var $6337=self.nam;var $6338=self.ini;var $6339=self.idx;var $6340=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6326,$6336),$6337,$6338,$6339,$6340);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6342=self.err;var _reply$35 = Kind$Parser$text$(":",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6344=self.err;var self = $6342;switch(self._){case 'Maybe.some':var $6346=self.value;var $6347 = Parser$Reply$error$(Parser$Error$combine$($6346,$6344));var $6345 = $6347;break;case 'Maybe.none':var $6348 = Parser$Reply$error$($6344);var $6345 = $6348;break;};var $6343 = $6345;break;case 'Parser.Reply.value':var $6349=self.pst;var self = $6349;switch(self._){case 'Parser.State.new':var $6351=self.err;var $6352=self.nam;var $6353=self.ini;var $6354=self.idx;var $6355=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6342,$6351),$6352,$6353,$6354,$6355);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $6357=self.err;var _reply$49 = Kind$Parser$term(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $6359=self.err;var self = $6357;switch(self._){case 'Maybe.some':var $6361=self.value;var $6362 = Parser$Reply$error$(Parser$Error$combine$($6361,$6359));var $6360 = $6362;break;case 'Maybe.none':var $6363 = Parser$Reply$error$($6359);var $6360 = $6363;break;};var $6358 = $6360;break;case 'Parser.Reply.value':var $6364=self.pst;var $6365=self.val;var self = $6364;switch(self._){case 'Parser.State.new':var $6367=self.err;var $6368=self.nam;var $6369=self.ini;var $6370=self.idx;var $6371=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($6357,$6367),$6368,$6369,$6370,$6371);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $6373=self.err;var _reply$63 = Kind$Parser$text$("]",_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $6375=self.err;var self = $6373;switch(self._){case 'Maybe.some':var $6377=self.value;var $6378 = Parser$Reply$error$(Parser$Error$combine$($6377,$6375));var $6376 = $6378;break;case 'Maybe.none':var $6379 = Parser$Reply$error$($6375);var $6376 = $6379;break;};var $6374 = $6376;break;case 'Parser.Reply.value':var $6380=self.pst;var self = $6380;switch(self._){case 'Parser.State.new':var $6382=self.err;var $6383=self.nam;var $6384=self.ini;var $6385=self.idx;var $6386=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($6373,$6382),$6383,$6384,$6385,$6386);var self = _reply$pst$71;switch(self._){case 'Parser.State.new':var $6388=self.err;var _reply$77 = Kind$Parser$term(_reply$pst$71);var self = _reply$77;switch(self._){case 'Parser.Reply.error':var $6390=self.err;var self = $6388;switch(self._){case 'Maybe.some':var $6392=self.value;var $6393 = Parser$Reply$error$(Parser$Error$combine$($6392,$6390));var $6391 = $6393;break;case 'Maybe.none':var $6394 = Parser$Reply$error$($6390);var $6391 = $6394;break;};var $6389 = $6391;break;case 'Parser.Reply.value':var $6395=self.pst;var $6396=self.val;var self = $6395;switch(self._){case 'Parser.State.new':var $6398=self.err;var $6399=self.nam;var $6400=self.ini;var $6401=self.idx;var $6402=self.str;var _reply$pst$85 = Parser$State$new$(Parser$Error$maybe_combine$($6388,$6398),$6399,$6400,$6401,$6402);var _term$86 = Kind$Term$ref$("Sigma");var _term$87 = Kind$Term$app$(_term$86,$6365);var _term$88 = Kind$Term$app$(_term$87,Kind$Term$lam$($6334,(_x$88=>{var $6404 = $6396;return $6404;})));var $6403 = Parser$Reply$value$(_reply$pst$85,_term$88);var $6397 = $6403;break;};var $6389 = $6397;break;};var $6387 = $6389;break;};var $6381 = $6387;break;};var $6374 = $6381;break;};var $6372 = $6374;break;};var $6366 = $6372;break;};var $6358 = $6366;break;};var $6356 = $6358;break;};var $6350 = $6356;break;};var $6343 = $6350;break;};var $6341 = $6343;break;};var $6335 = $6341;break;};var $6327 = $6335;break;};var $6325 = $6327;break;};var $6319 = $6325;break;};var $6312 = $6319;break;};var $6310 = $6312;break;};return $6310;}));
  const Kind$Parser$some = Kind$Parser$block("some")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6406=self.err;var _reply$7 = Kind$Parser$text$("some(",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6408=self.err;var self = $6406;switch(self._){case 'Maybe.some':var $6410=self.value;var $6411 = Parser$Reply$error$(Parser$Error$combine$($6410,$6408));var $6409 = $6411;break;case 'Maybe.none':var $6412 = Parser$Reply$error$($6408);var $6409 = $6412;break;};var $6407 = $6409;break;case 'Parser.Reply.value':var $6413=self.pst;var self = $6413;switch(self._){case 'Parser.State.new':var $6415=self.err;var $6416=self.nam;var $6417=self.ini;var $6418=self.idx;var $6419=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6406,$6415),$6416,$6417,$6418,$6419);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6421=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6423=self.err;var self = $6421;switch(self._){case 'Maybe.some':var $6425=self.value;var $6426 = Parser$Reply$error$(Parser$Error$combine$($6425,$6423));var $6424 = $6426;break;case 'Maybe.none':var $6427 = Parser$Reply$error$($6423);var $6424 = $6427;break;};var $6422 = $6424;break;case 'Parser.Reply.value':var $6428=self.pst;var $6429=self.val;var self = $6428;switch(self._){case 'Parser.State.new':var $6431=self.err;var $6432=self.nam;var $6433=self.ini;var $6434=self.idx;var $6435=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6421,$6431),$6432,$6433,$6434,$6435);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6437=self.err;var _reply$35 = Kind$Parser$text$(")",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6439=self.err;var self = $6437;switch(self._){case 'Maybe.some':var $6441=self.value;var $6442 = Parser$Reply$error$(Parser$Error$combine$($6441,$6439));var $6440 = $6442;break;case 'Maybe.none':var $6443 = Parser$Reply$error$($6439);var $6440 = $6443;break;};var $6438 = $6440;break;case 'Parser.Reply.value':var $6444=self.pst;var self = $6444;switch(self._){case 'Parser.State.new':var $6446=self.err;var $6447=self.nam;var $6448=self.ini;var $6449=self.idx;var $6450=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6437,$6446),$6447,$6448,$6449,$6450);var _term$44 = Kind$Term$ref$("Maybe.some");var _term$45 = Kind$Term$app$(_term$44,Kind$Term$hol$(Bits$e));var _term$46 = Kind$Term$app$(_term$45,$6429);var $6451 = Parser$Reply$value$(_reply$pst$43,_term$46);var $6445 = $6451;break;};var $6438 = $6445;break;};var $6436 = $6438;break;};var $6430 = $6436;break;};var $6422 = $6430;break;};var $6420 = $6422;break;};var $6414 = $6420;break;};var $6407 = $6414;break;};var $6405 = $6407;break;};return $6405;}));
  const Kind$Parser$not = Kind$Parser$block("not")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6453=self.err;var _reply$7 = Kind$Parser$text$("not(",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6455=self.err;var self = $6453;switch(self._){case 'Maybe.some':var $6457=self.value;var $6458 = Parser$Reply$error$(Parser$Error$combine$($6457,$6455));var $6456 = $6458;break;case 'Maybe.none':var $6459 = Parser$Reply$error$($6455);var $6456 = $6459;break;};var $6454 = $6456;break;case 'Parser.Reply.value':var $6460=self.pst;var self = $6460;switch(self._){case 'Parser.State.new':var $6462=self.err;var $6463=self.nam;var $6464=self.ini;var $6465=self.idx;var $6466=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6453,$6462),$6463,$6464,$6465,$6466);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6468=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6470=self.err;var self = $6468;switch(self._){case 'Maybe.some':var $6472=self.value;var $6473 = Parser$Reply$error$(Parser$Error$combine$($6472,$6470));var $6471 = $6473;break;case 'Maybe.none':var $6474 = Parser$Reply$error$($6470);var $6471 = $6474;break;};var $6469 = $6471;break;case 'Parser.Reply.value':var $6475=self.pst;var $6476=self.val;var self = $6475;switch(self._){case 'Parser.State.new':var $6478=self.err;var $6479=self.nam;var $6480=self.ini;var $6481=self.idx;var $6482=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6468,$6478),$6479,$6480,$6481,$6482);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6484=self.err;var _reply$35 = Kind$Parser$text$(")",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6486=self.err;var self = $6484;switch(self._){case 'Maybe.some':var $6488=self.value;var $6489 = Parser$Reply$error$(Parser$Error$combine$($6488,$6486));var $6487 = $6489;break;case 'Maybe.none':var $6490 = Parser$Reply$error$($6486);var $6487 = $6490;break;};var $6485 = $6487;break;case 'Parser.Reply.value':var $6491=self.pst;var self = $6491;switch(self._){case 'Parser.State.new':var $6493=self.err;var $6494=self.nam;var $6495=self.ini;var $6496=self.idx;var $6497=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6484,$6493),$6494,$6495,$6496,$6497);var _term$44 = Kind$Term$ref$("Bool.not");var _term$45 = Kind$Term$app$(_term$44,$6476);var $6498 = Parser$Reply$value$(_reply$pst$43,_term$45);var $6492 = $6498;break;};var $6485 = $6492;break;};var $6483 = $6485;break;};var $6477 = $6483;break;};var $6469 = $6477;break;};var $6467 = $6469;break;};var $6461 = $6467;break;};var $6454 = $6461;break;};var $6452 = $6454;break;};return $6452;}));
  const Kind$Parser$left = Kind$Parser$block("left")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6500=self.err;var _reply$7 = Kind$Parser$text$("left(",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6502=self.err;var self = $6500;switch(self._){case 'Maybe.some':var $6504=self.value;var $6505 = Parser$Reply$error$(Parser$Error$combine$($6504,$6502));var $6503 = $6505;break;case 'Maybe.none':var $6506 = Parser$Reply$error$($6502);var $6503 = $6506;break;};var $6501 = $6503;break;case 'Parser.Reply.value':var $6507=self.pst;var self = $6507;switch(self._){case 'Parser.State.new':var $6509=self.err;var $6510=self.nam;var $6511=self.ini;var $6512=self.idx;var $6513=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6500,$6509),$6510,$6511,$6512,$6513);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6515=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6517=self.err;var self = $6515;switch(self._){case 'Maybe.some':var $6519=self.value;var $6520 = Parser$Reply$error$(Parser$Error$combine$($6519,$6517));var $6518 = $6520;break;case 'Maybe.none':var $6521 = Parser$Reply$error$($6517);var $6518 = $6521;break;};var $6516 = $6518;break;case 'Parser.Reply.value':var $6522=self.pst;var $6523=self.val;var self = $6522;switch(self._){case 'Parser.State.new':var $6525=self.err;var $6526=self.nam;var $6527=self.ini;var $6528=self.idx;var $6529=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6515,$6525),$6526,$6527,$6528,$6529);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6531=self.err;var _reply$35 = Kind$Parser$text$(")",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6533=self.err;var self = $6531;switch(self._){case 'Maybe.some':var $6535=self.value;var $6536 = Parser$Reply$error$(Parser$Error$combine$($6535,$6533));var $6534 = $6536;break;case 'Maybe.none':var $6537 = Parser$Reply$error$($6533);var $6534 = $6537;break;};var $6532 = $6534;break;case 'Parser.Reply.value':var $6538=self.pst;var self = $6538;switch(self._){case 'Parser.State.new':var $6540=self.err;var $6541=self.nam;var $6542=self.ini;var $6543=self.idx;var $6544=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6531,$6540),$6541,$6542,$6543,$6544);var _term$44 = Kind$Term$ref$("Either.left");var _term$45 = Kind$Term$app$(_term$44,Kind$Term$hol$(Bits$e));var _term$46 = Kind$Term$app$(_term$45,Kind$Term$hol$(Bits$e));var _term$47 = Kind$Term$app$(_term$46,$6523);var $6545 = Parser$Reply$value$(_reply$pst$43,_term$47);var $6539 = $6545;break;};var $6532 = $6539;break;};var $6530 = $6532;break;};var $6524 = $6530;break;};var $6516 = $6524;break;};var $6514 = $6516;break;};var $6508 = $6514;break;};var $6501 = $6508;break;};var $6499 = $6501;break;};return $6499;}));
  const Kind$Parser$right = Kind$Parser$block("right")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6547=self.err;var _reply$7 = Kind$Parser$text$("right(",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6549=self.err;var self = $6547;switch(self._){case 'Maybe.some':var $6551=self.value;var $6552 = Parser$Reply$error$(Parser$Error$combine$($6551,$6549));var $6550 = $6552;break;case 'Maybe.none':var $6553 = Parser$Reply$error$($6549);var $6550 = $6553;break;};var $6548 = $6550;break;case 'Parser.Reply.value':var $6554=self.pst;var self = $6554;switch(self._){case 'Parser.State.new':var $6556=self.err;var $6557=self.nam;var $6558=self.ini;var $6559=self.idx;var $6560=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6547,$6556),$6557,$6558,$6559,$6560);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6562=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6564=self.err;var self = $6562;switch(self._){case 'Maybe.some':var $6566=self.value;var $6567 = Parser$Reply$error$(Parser$Error$combine$($6566,$6564));var $6565 = $6567;break;case 'Maybe.none':var $6568 = Parser$Reply$error$($6564);var $6565 = $6568;break;};var $6563 = $6565;break;case 'Parser.Reply.value':var $6569=self.pst;var $6570=self.val;var self = $6569;switch(self._){case 'Parser.State.new':var $6572=self.err;var $6573=self.nam;var $6574=self.ini;var $6575=self.idx;var $6576=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6562,$6572),$6573,$6574,$6575,$6576);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6578=self.err;var _reply$35 = Kind$Parser$text$(")",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6580=self.err;var self = $6578;switch(self._){case 'Maybe.some':var $6582=self.value;var $6583 = Parser$Reply$error$(Parser$Error$combine$($6582,$6580));var $6581 = $6583;break;case 'Maybe.none':var $6584 = Parser$Reply$error$($6580);var $6581 = $6584;break;};var $6579 = $6581;break;case 'Parser.Reply.value':var $6585=self.pst;var self = $6585;switch(self._){case 'Parser.State.new':var $6587=self.err;var $6588=self.nam;var $6589=self.ini;var $6590=self.idx;var $6591=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6578,$6587),$6588,$6589,$6590,$6591);var _term$44 = Kind$Term$ref$("Either.right");var _term$45 = Kind$Term$app$(_term$44,Kind$Term$hol$(Bits$e));var _term$46 = Kind$Term$app$(_term$45,Kind$Term$hol$(Bits$e));var _term$47 = Kind$Term$app$(_term$46,$6570);var $6592 = Parser$Reply$value$(_reply$pst$43,_term$47);var $6586 = $6592;break;};var $6579 = $6586;break;};var $6577 = $6579;break;};var $6571 = $6577;break;};var $6563 = $6571;break;};var $6561 = $6563;break;};var $6555 = $6561;break;};var $6548 = $6555;break;};var $6546 = $6548;break;};return $6546;}));
  const Kind$Parser$apply = Kind$Parser$block("apply")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6594=self.err;var _reply$7 = Kind$Parser$text$("apply(",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6596=self.err;var self = $6594;switch(self._){case 'Maybe.some':var $6598=self.value;var $6599 = Parser$Reply$error$(Parser$Error$combine$($6598,$6596));var $6597 = $6599;break;case 'Maybe.none':var $6600 = Parser$Reply$error$($6596);var $6597 = $6600;break;};var $6595 = $6597;break;case 'Parser.Reply.value':var $6601=self.pst;var self = $6601;switch(self._){case 'Parser.State.new':var $6603=self.err;var $6604=self.nam;var $6605=self.ini;var $6606=self.idx;var $6607=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6594,$6603),$6604,$6605,$6606,$6607);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6609=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6611=self.err;var self = $6609;switch(self._){case 'Maybe.some':var $6613=self.value;var $6614 = Parser$Reply$error$(Parser$Error$combine$($6613,$6611));var $6612 = $6614;break;case 'Maybe.none':var $6615 = Parser$Reply$error$($6611);var $6612 = $6615;break;};var $6610 = $6612;break;case 'Parser.Reply.value':var $6616=self.pst;var $6617=self.val;var self = $6616;switch(self._){case 'Parser.State.new':var $6619=self.err;var $6620=self.nam;var $6621=self.ini;var $6622=self.idx;var $6623=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6609,$6619),$6620,$6621,$6622,$6623);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6625=self.err;var _reply$35 = Kind$Parser$text$(",",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6627=self.err;var self = $6625;switch(self._){case 'Maybe.some':var $6629=self.value;var $6630 = Parser$Reply$error$(Parser$Error$combine$($6629,$6627));var $6628 = $6630;break;case 'Maybe.none':var $6631 = Parser$Reply$error$($6627);var $6628 = $6631;break;};var $6626 = $6628;break;case 'Parser.Reply.value':var $6632=self.pst;var self = $6632;switch(self._){case 'Parser.State.new':var $6634=self.err;var $6635=self.nam;var $6636=self.ini;var $6637=self.idx;var $6638=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6625,$6634),$6635,$6636,$6637,$6638);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $6640=self.err;var _reply$49 = Kind$Parser$term(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $6642=self.err;var self = $6640;switch(self._){case 'Maybe.some':var $6644=self.value;var $6645 = Parser$Reply$error$(Parser$Error$combine$($6644,$6642));var $6643 = $6645;break;case 'Maybe.none':var $6646 = Parser$Reply$error$($6642);var $6643 = $6646;break;};var $6641 = $6643;break;case 'Parser.Reply.value':var $6647=self.pst;var $6648=self.val;var self = $6647;switch(self._){case 'Parser.State.new':var $6650=self.err;var $6651=self.nam;var $6652=self.ini;var $6653=self.idx;var $6654=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($6640,$6650),$6651,$6652,$6653,$6654);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $6656=self.err;var _reply$63 = Kind$Parser$text$(")",_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $6658=self.err;var self = $6656;switch(self._){case 'Maybe.some':var $6660=self.value;var $6661 = Parser$Reply$error$(Parser$Error$combine$($6660,$6658));var $6659 = $6661;break;case 'Maybe.none':var $6662 = Parser$Reply$error$($6658);var $6659 = $6662;break;};var $6657 = $6659;break;case 'Parser.Reply.value':var $6663=self.pst;var self = $6663;switch(self._){case 'Parser.State.new':var $6665=self.err;var $6666=self.nam;var $6667=self.ini;var $6668=self.idx;var $6669=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($6656,$6665),$6666,$6667,$6668,$6669);var _term$72 = Kind$Term$ref$("Equal.apply");var _term$73 = Kind$Term$app$(_term$72,Kind$Term$hol$(Bits$e));var _term$74 = Kind$Term$app$(_term$73,Kind$Term$hol$(Bits$e));var _term$75 = Kind$Term$app$(_term$74,Kind$Term$hol$(Bits$e));var _term$76 = Kind$Term$app$(_term$75,Kind$Term$hol$(Bits$e));var _term$77 = Kind$Term$app$(_term$76,$6617);var _term$78 = Kind$Term$app$(_term$77,$6648);var $6670 = Parser$Reply$value$(_reply$pst$71,_term$78);var $6664 = $6670;break;};var $6657 = $6664;break;};var $6655 = $6657;break;};var $6649 = $6655;break;};var $6641 = $6649;break;};var $6639 = $6641;break;};var $6633 = $6639;break;};var $6626 = $6633;break;};var $6624 = $6626;break;};var $6618 = $6624;break;};var $6610 = $6618;break;};var $6608 = $6610;break;};var $6602 = $6608;break;};var $6595 = $6602;break;};var $6593 = $6595;break;};return $6593;}));
  const Kind$Parser$chain = Kind$Parser$block("chain")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6672=self.err;var _reply$7 = Kind$Parser$text$("chain(",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6674=self.err;var self = $6672;switch(self._){case 'Maybe.some':var $6676=self.value;var $6677 = Parser$Reply$error$(Parser$Error$combine$($6676,$6674));var $6675 = $6677;break;case 'Maybe.none':var $6678 = Parser$Reply$error$($6674);var $6675 = $6678;break;};var $6673 = $6675;break;case 'Parser.Reply.value':var $6679=self.pst;var self = $6679;switch(self._){case 'Parser.State.new':var $6681=self.err;var $6682=self.nam;var $6683=self.ini;var $6684=self.idx;var $6685=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6672,$6681),$6682,$6683,$6684,$6685);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6687=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6689=self.err;var self = $6687;switch(self._){case 'Maybe.some':var $6691=self.value;var $6692 = Parser$Reply$error$(Parser$Error$combine$($6691,$6689));var $6690 = $6692;break;case 'Maybe.none':var $6693 = Parser$Reply$error$($6689);var $6690 = $6693;break;};var $6688 = $6690;break;case 'Parser.Reply.value':var $6694=self.pst;var $6695=self.val;var self = $6694;switch(self._){case 'Parser.State.new':var $6697=self.err;var $6698=self.nam;var $6699=self.ini;var $6700=self.idx;var $6701=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6687,$6697),$6698,$6699,$6700,$6701);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6703=self.err;var _reply$35 = Kind$Parser$text$(",",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6705=self.err;var self = $6703;switch(self._){case 'Maybe.some':var $6707=self.value;var $6708 = Parser$Reply$error$(Parser$Error$combine$($6707,$6705));var $6706 = $6708;break;case 'Maybe.none':var $6709 = Parser$Reply$error$($6705);var $6706 = $6709;break;};var $6704 = $6706;break;case 'Parser.Reply.value':var $6710=self.pst;var self = $6710;switch(self._){case 'Parser.State.new':var $6712=self.err;var $6713=self.nam;var $6714=self.ini;var $6715=self.idx;var $6716=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6703,$6712),$6713,$6714,$6715,$6716);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $6718=self.err;var _reply$49 = Kind$Parser$term(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $6720=self.err;var self = $6718;switch(self._){case 'Maybe.some':var $6722=self.value;var $6723 = Parser$Reply$error$(Parser$Error$combine$($6722,$6720));var $6721 = $6723;break;case 'Maybe.none':var $6724 = Parser$Reply$error$($6720);var $6721 = $6724;break;};var $6719 = $6721;break;case 'Parser.Reply.value':var $6725=self.pst;var $6726=self.val;var self = $6725;switch(self._){case 'Parser.State.new':var $6728=self.err;var $6729=self.nam;var $6730=self.ini;var $6731=self.idx;var $6732=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($6718,$6728),$6729,$6730,$6731,$6732);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $6734=self.err;var _reply$63 = Kind$Parser$text$(")",_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $6736=self.err;var self = $6734;switch(self._){case 'Maybe.some':var $6738=self.value;var $6739 = Parser$Reply$error$(Parser$Error$combine$($6738,$6736));var $6737 = $6739;break;case 'Maybe.none':var $6740 = Parser$Reply$error$($6736);var $6737 = $6740;break;};var $6735 = $6737;break;case 'Parser.Reply.value':var $6741=self.pst;var self = $6741;switch(self._){case 'Parser.State.new':var $6743=self.err;var $6744=self.nam;var $6745=self.ini;var $6746=self.idx;var $6747=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($6734,$6743),$6744,$6745,$6746,$6747);var _term$72 = Kind$Term$ref$("Equal.chain");var _term$73 = Kind$Term$app$(_term$72,Kind$Term$hol$(Bits$e));var _term$74 = Kind$Term$app$(_term$73,Kind$Term$hol$(Bits$e));var _term$75 = Kind$Term$app$(_term$74,Kind$Term$hol$(Bits$e));var _term$76 = Kind$Term$app$(_term$75,Kind$Term$hol$(Bits$e));var _term$77 = Kind$Term$app$(_term$76,$6695);var _term$78 = Kind$Term$app$(_term$77,$6726);var $6748 = Parser$Reply$value$(_reply$pst$71,_term$78);var $6742 = $6748;break;};var $6735 = $6742;break;};var $6733 = $6735;break;};var $6727 = $6733;break;};var $6719 = $6727;break;};var $6717 = $6719;break;};var $6711 = $6717;break;};var $6704 = $6711;break;};var $6702 = $6704;break;};var $6696 = $6702;break;};var $6688 = $6696;break;};var $6686 = $6688;break;};var $6680 = $6686;break;};var $6673 = $6680;break;};var $6671 = $6673;break;};return $6671;}));
  const Kind$Parser$mirror = Kind$Parser$block("mirror")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $6750=self.err;var _reply$7 = Kind$Parser$text$("mirror(",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6752=self.err;var self = $6750;switch(self._){case 'Maybe.some':var $6754=self.value;var $6755 = Parser$Reply$error$(Parser$Error$combine$($6754,$6752));var $6753 = $6755;break;case 'Maybe.none':var $6756 = Parser$Reply$error$($6752);var $6753 = $6756;break;};var $6751 = $6753;break;case 'Parser.Reply.value':var $6757=self.pst;var self = $6757;switch(self._){case 'Parser.State.new':var $6759=self.err;var $6760=self.nam;var $6761=self.ini;var $6762=self.idx;var $6763=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6750,$6759),$6760,$6761,$6762,$6763);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6765=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6767=self.err;var self = $6765;switch(self._){case 'Maybe.some':var $6769=self.value;var $6770 = Parser$Reply$error$(Parser$Error$combine$($6769,$6767));var $6768 = $6770;break;case 'Maybe.none':var $6771 = Parser$Reply$error$($6767);var $6768 = $6771;break;};var $6766 = $6768;break;case 'Parser.Reply.value':var $6772=self.pst;var $6773=self.val;var self = $6772;switch(self._){case 'Parser.State.new':var $6775=self.err;var $6776=self.nam;var $6777=self.ini;var $6778=self.idx;var $6779=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6765,$6775),$6776,$6777,$6778,$6779);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6781=self.err;var _reply$35 = Kind$Parser$text$(")",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6783=self.err;var self = $6781;switch(self._){case 'Maybe.some':var $6785=self.value;var $6786 = Parser$Reply$error$(Parser$Error$combine$($6785,$6783));var $6784 = $6786;break;case 'Maybe.none':var $6787 = Parser$Reply$error$($6783);var $6784 = $6787;break;};var $6782 = $6784;break;case 'Parser.Reply.value':var $6788=self.pst;var self = $6788;switch(self._){case 'Parser.State.new':var $6790=self.err;var $6791=self.nam;var $6792=self.ini;var $6793=self.idx;var $6794=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6781,$6790),$6791,$6792,$6793,$6794);var _term$44 = Kind$Term$ref$("Equal.mirror");var _term$45 = Kind$Term$app$(_term$44,Kind$Term$hol$(Bits$e));var _term$46 = Kind$Term$app$(_term$45,Kind$Term$hol$(Bits$e));var _term$47 = Kind$Term$app$(_term$46,Kind$Term$hol$(Bits$e));var _term$48 = Kind$Term$app$(_term$47,$6773);var $6795 = Parser$Reply$value$(_reply$pst$43,_term$48);var $6789 = $6795;break;};var $6782 = $6789;break;};var $6780 = $6782;break;};var $6774 = $6780;break;};var $6766 = $6774;break;};var $6764 = $6766;break;};var $6758 = $6764;break;};var $6751 = $6758;break;};var $6749 = $6751;break;};return $6749;}));
  function Kind$Parser$comprehension$and_all$(_a$1){var self = _a$1;switch(self._){case 'List.cons':var $6797=self.head;var $6798=self.tail;var _and$4 = Kind$Term$ref$("Bool.and");var _and$5 = Kind$Term$app$(_and$4,$6797);var _and$6 = Kind$Term$app$(_and$5,Kind$Parser$comprehension$and_all$($6798));var $6799 = _and$6;var $6796 = $6799;break;case 'List.nil':var $6800 = Kind$Term$ref$("Bool.true");var $6796 = $6800;break;};return $6796;};
  const Kind$Parser$comprehension$and_all = x0=>Kind$Parser$comprehension$and_all$(x0);
  function Kind$Parser$comprehension$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $6802=self.err;var _reply$7 = Kind$Parser$text$("[",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $6804=self.err;var self = $6802;switch(self._){case 'Maybe.some':var $6806=self.value;var $6807 = Parser$Reply$error$(Parser$Error$combine$($6806,$6804));var $6805 = $6807;break;case 'Maybe.none':var $6808 = Parser$Reply$error$($6804);var $6805 = $6808;break;};var $6803 = $6805;break;case 'Parser.Reply.value':var $6809=self.pst;var self = $6809;switch(self._){case 'Parser.State.new':var $6811=self.err;var $6812=self.nam;var $6813=self.ini;var $6814=self.idx;var $6815=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($6802,$6811),$6812,$6813,$6814,$6815);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $6817=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $6819=self.err;var self = $6817;switch(self._){case 'Maybe.some':var $6821=self.value;var $6822 = Parser$Reply$error$(Parser$Error$combine$($6821,$6819));var $6820 = $6822;break;case 'Maybe.none':var $6823 = Parser$Reply$error$($6819);var $6820 = $6823;break;};var $6818 = $6820;break;case 'Parser.Reply.value':var $6824=self.pst;var $6825=self.val;var self = $6824;switch(self._){case 'Parser.State.new':var $6827=self.err;var $6828=self.nam;var $6829=self.ini;var $6830=self.idx;var $6831=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($6817,$6827),$6828,$6829,$6830,$6831);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $6833=self.err;var _reply$35 = Kind$Parser$text$("for",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $6835=self.err;var self = $6833;switch(self._){case 'Maybe.some':var $6837=self.value;var $6838 = Parser$Reply$error$(Parser$Error$combine$($6837,$6835));var $6836 = $6838;break;case 'Maybe.none':var $6839 = Parser$Reply$error$($6835);var $6836 = $6839;break;};var $6834 = $6836;break;case 'Parser.Reply.value':var $6840=self.pst;var self = $6840;switch(self._){case 'Parser.State.new':var $6842=self.err;var $6843=self.nam;var $6844=self.ini;var $6845=self.idx;var $6846=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($6833,$6842),$6843,$6844,$6845,$6846);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $6848=self.err;var _reply$49 = Kind$Parser$name1$(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $6850=self.err;var self = $6848;switch(self._){case 'Maybe.some':var $6852=self.value;var $6853 = Parser$Reply$error$(Parser$Error$combine$($6852,$6850));var $6851 = $6853;break;case 'Maybe.none':var $6854 = Parser$Reply$error$($6850);var $6851 = $6854;break;};var $6849 = $6851;break;case 'Parser.Reply.value':var $6855=self.pst;var $6856=self.val;var self = $6855;switch(self._){case 'Parser.State.new':var $6858=self.err;var $6859=self.nam;var $6860=self.ini;var $6861=self.idx;var $6862=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($6848,$6858),$6859,$6860,$6861,$6862);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $6864=self.err;var _reply$63 = Kind$Parser$text$("in",_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $6866=self.err;var self = $6864;switch(self._){case 'Maybe.some':var $6868=self.value;var $6869 = Parser$Reply$error$(Parser$Error$combine$($6868,$6866));var $6867 = $6869;break;case 'Maybe.none':var $6870 = Parser$Reply$error$($6866);var $6867 = $6870;break;};var $6865 = $6867;break;case 'Parser.Reply.value':var $6871=self.pst;var self = $6871;switch(self._){case 'Parser.State.new':var $6873=self.err;var $6874=self.nam;var $6875=self.ini;var $6876=self.idx;var $6877=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($6864,$6873),$6874,$6875,$6876,$6877);var self = _reply$pst$71;switch(self._){case 'Parser.State.new':var $6879=self.err;var _reply$77 = Kind$Parser$term(_reply$pst$71);var self = _reply$77;switch(self._){case 'Parser.Reply.error':var $6881=self.err;var self = $6879;switch(self._){case 'Maybe.some':var $6883=self.value;var $6884 = Parser$Reply$error$(Parser$Error$combine$($6883,$6881));var $6882 = $6884;break;case 'Maybe.none':var $6885 = Parser$Reply$error$($6881);var $6882 = $6885;break;};var $6880 = $6882;break;case 'Parser.Reply.value':var $6886=self.pst;var $6887=self.val;var self = $6886;switch(self._){case 'Parser.State.new':var $6889=self.err;var $6890=self.nam;var $6891=self.ini;var $6892=self.idx;var $6893=self.str;var _reply$pst$85 = Parser$State$new$(Parser$Error$maybe_combine$($6879,$6889),$6890,$6891,$6892,$6893);var self = _reply$pst$85;switch(self._){case 'Parser.State.new':var $6895=self.err;var _reply$91 = Parser$maybe$(Kind$Parser$text("where"),_reply$pst$85);var self = _reply$91;switch(self._){case 'Parser.Reply.error':var $6897=self.err;var self = $6895;switch(self._){case 'Maybe.some':var $6899=self.value;var $6900 = Parser$Reply$error$(Parser$Error$combine$($6899,$6897));var $6898 = $6900;break;case 'Maybe.none':var $6901 = Parser$Reply$error$($6897);var $6898 = $6901;break;};var $6896 = $6898;break;case 'Parser.Reply.value':var $6902=self.pst;var self = $6902;switch(self._){case 'Parser.State.new':var $6904=self.err;var $6905=self.nam;var $6906=self.ini;var $6907=self.idx;var $6908=self.str;var _reply$pst$99 = Parser$State$new$(Parser$Error$maybe_combine$($6895,$6904),$6905,$6906,$6907,$6908);var self = _reply$pst$99;switch(self._){case 'Parser.State.new':var $6910=self.err;var _reply$105 = Parser$until$(Kind$Parser$text("]"),(_pst$105=>{var self = _pst$105;switch(self._){case 'Parser.State.new':var $6913=self.err;var _reply$111 = Kind$Parser$spaces(_pst$105);var self = _reply$111;switch(self._){case 'Parser.Reply.error':var $6915=self.err;var self = $6913;switch(self._){case 'Maybe.some':var $6917=self.value;var $6918 = Parser$Reply$error$(Parser$Error$combine$($6917,$6915));var $6916 = $6918;break;case 'Maybe.none':var $6919 = Parser$Reply$error$($6915);var $6916 = $6919;break;};var $6914 = $6916;break;case 'Parser.Reply.value':var $6920=self.pst;var self = $6920;switch(self._){case 'Parser.State.new':var $6922=self.err;var $6923=self.nam;var $6924=self.ini;var $6925=self.idx;var $6926=self.str;var _reply$pst$119 = Parser$State$new$(Parser$Error$maybe_combine$($6913,$6922),$6923,$6924,$6925,$6926);var self = _reply$pst$119;switch(self._){case 'Parser.State.new':var $6928=self.err;var _reply$125 = Kind$Parser$term(_reply$pst$119);var self = _reply$125;switch(self._){case 'Parser.Reply.error':var $6930=self.err;var self = $6928;switch(self._){case 'Maybe.some':var $6932=self.value;var $6933 = Parser$Reply$error$(Parser$Error$combine$($6932,$6930));var $6931 = $6933;break;case 'Maybe.none':var $6934 = Parser$Reply$error$($6930);var $6931 = $6934;break;};var $6929 = $6931;break;case 'Parser.Reply.value':var $6935=self.pst;var $6936=self.val;var self = $6935;switch(self._){case 'Parser.State.new':var $6938=self.err;var $6939=self.nam;var $6940=self.ini;var $6941=self.idx;var $6942=self.str;var _reply$pst$133 = Parser$State$new$(Parser$Error$maybe_combine$($6928,$6938),$6939,$6940,$6941,$6942);var self = _reply$pst$133;switch(self._){case 'Parser.State.new':var $6944=self.err;var _reply$139 = Parser$maybe$(Kind$Parser$text(","),_reply$pst$133);var self = _reply$139;switch(self._){case 'Parser.Reply.error':var $6946=self.err;var self = $6944;switch(self._){case 'Maybe.some':var $6948=self.value;var $6949 = Parser$Reply$error$(Parser$Error$combine$($6948,$6946));var $6947 = $6949;break;case 'Maybe.none':var $6950 = Parser$Reply$error$($6946);var $6947 = $6950;break;};var $6945 = $6947;break;case 'Parser.Reply.value':var $6951=self.pst;var self = $6951;switch(self._){case 'Parser.State.new':var $6953=self.err;var $6954=self.nam;var $6955=self.ini;var $6956=self.idx;var $6957=self.str;var _reply$pst$147 = Parser$State$new$(Parser$Error$maybe_combine$($6944,$6953),$6954,$6955,$6956,$6957);var $6958 = Parser$Reply$value$(_reply$pst$147,$6936);var $6952 = $6958;break;};var $6945 = $6952;break;};var $6943 = $6945;break;};var $6937 = $6943;break;};var $6929 = $6937;break;};var $6927 = $6929;break;};var $6921 = $6927;break;};var $6914 = $6921;break;};var $6912 = $6914;break;};return $6912;}))(_reply$pst$99);var self = _reply$105;switch(self._){case 'Parser.Reply.error':var $6959=self.err;var self = $6910;switch(self._){case 'Maybe.some':var $6961=self.value;var $6962 = Parser$Reply$error$(Parser$Error$combine$($6961,$6959));var $6960 = $6962;break;case 'Maybe.none':var $6963 = Parser$Reply$error$($6959);var $6960 = $6963;break;};var $6911 = $6960;break;case 'Parser.Reply.value':var $6964=self.pst;var $6965=self.val;var self = $6964;switch(self._){case 'Parser.State.new':var $6967=self.err;var $6968=self.nam;var $6969=self.ini;var $6970=self.idx;var $6971=self.str;var _reply$pst$113 = Parser$State$new$(Parser$Error$maybe_combine$($6910,$6967),$6968,$6969,$6970,$6971);var _and$114 = Kind$Parser$comprehension$and_all$($6965);var _filter_fun$115 = Kind$Term$ref$("List.filter");var _filter_fun$116 = Kind$Term$app$(_filter_fun$115,Kind$Term$hol$(Bits$e));var _lamb_filter$117 = Kind$Term$lam$($6856,(_i$117=>{var $6973 = _and$114;return $6973;}));var _filter_fun$118 = Kind$Term$app$(_filter_fun$116,_lamb_filter$117);var _filter_fun$119 = Kind$Term$app$(_filter_fun$118,$6887);var _term$120 = Kind$Term$ref$("List.map");var _term$121 = Kind$Term$app$(_term$120,Kind$Term$hol$(Bits$e));var _term$122 = Kind$Term$app$(_term$121,Kind$Term$hol$(Bits$e));var _lamb$123 = Kind$Term$lam$($6856,(_i$123=>{var $6974 = $6825;return $6974;}));var _term$124 = Kind$Term$app$(_term$122,_lamb$123);var _term$125 = Kind$Term$app$(_term$124,_filter_fun$119);var $6972 = Parser$Reply$value$(_reply$pst$113,_term$125);var $6966 = $6972;break;};var $6911 = $6966;break;};var $6909 = $6911;break;};var $6903 = $6909;break;};var $6896 = $6903;break;};var $6894 = $6896;break;};var $6888 = $6894;break;};var $6880 = $6888;break;};var $6878 = $6880;break;};var $6872 = $6878;break;};var $6865 = $6872;break;};var $6863 = $6865;break;};var $6857 = $6863;break;};var $6849 = $6857;break;};var $6847 = $6849;break;};var $6841 = $6847;break;};var $6834 = $6841;break;};var $6832 = $6834;break;};var $6826 = $6832;break;};var $6818 = $6826;break;};var $6816 = $6818;break;};var $6810 = $6816;break;};var $6803 = $6810;break;};var $6801 = $6803;break;};return $6801;};
  const Kind$Parser$comprehension = x0=>Kind$Parser$comprehension$(x0);
  function Kind$Parser$comprehension_range$go$(_typename$1){var $6975 = Kind$Parser$block("comprehension_range")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $6977=self.err;var _reply$8 = Kind$Parser$text$("[",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $6979=self.err;var self = $6977;switch(self._){case 'Maybe.some':var $6981=self.value;var $6982 = Parser$Reply$error$(Parser$Error$combine$($6981,$6979));var $6980 = $6982;break;case 'Maybe.none':var $6983 = Parser$Reply$error$($6979);var $6980 = $6983;break;};var $6978 = $6980;break;case 'Parser.Reply.value':var $6984=self.pst;var self = $6984;switch(self._){case 'Parser.State.new':var $6986=self.err;var $6987=self.nam;var $6988=self.ini;var $6989=self.idx;var $6990=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($6977,$6986),$6987,$6988,$6989,$6990);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $6992=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $6994=self.err;var self = $6992;switch(self._){case 'Maybe.some':var $6996=self.value;var $6997 = Parser$Reply$error$(Parser$Error$combine$($6996,$6994));var $6995 = $6997;break;case 'Maybe.none':var $6998 = Parser$Reply$error$($6994);var $6995 = $6998;break;};var $6993 = $6995;break;case 'Parser.Reply.value':var $6999=self.pst;var $7000=self.val;var self = $6999;switch(self._){case 'Parser.State.new':var $7002=self.err;var $7003=self.nam;var $7004=self.ini;var $7005=self.idx;var $7006=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($6992,$7002),$7003,$7004,$7005,$7006);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $7008=self.err;var _reply$36 = Kind$Parser$text$("to",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $7010=self.err;var self = $7008;switch(self._){case 'Maybe.some':var $7012=self.value;var $7013 = Parser$Reply$error$(Parser$Error$combine$($7012,$7010));var $7011 = $7013;break;case 'Maybe.none':var $7014 = Parser$Reply$error$($7010);var $7011 = $7014;break;};var $7009 = $7011;break;case 'Parser.Reply.value':var $7015=self.pst;var self = $7015;switch(self._){case 'Parser.State.new':var $7017=self.err;var $7018=self.nam;var $7019=self.ini;var $7020=self.idx;var $7021=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($7008,$7017),$7018,$7019,$7020,$7021);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $7023=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $7025=self.err;var self = $7023;switch(self._){case 'Maybe.some':var $7027=self.value;var $7028 = Parser$Reply$error$(Parser$Error$combine$($7027,$7025));var $7026 = $7028;break;case 'Maybe.none':var $7029 = Parser$Reply$error$($7025);var $7026 = $7029;break;};var $7024 = $7026;break;case 'Parser.Reply.value':var $7030=self.pst;var $7031=self.val;var self = $7030;switch(self._){case 'Parser.State.new':var $7033=self.err;var $7034=self.nam;var $7035=self.ini;var $7036=self.idx;var $7037=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($7023,$7033),$7034,$7035,$7036,$7037);var _list$59 = (_x$59=>{var _term$60 = Kind$Term$ref$((_x$59+".range"));var _term$61 = Kind$Term$app$(_term$60,$7000);var _term$62 = Kind$Term$app$(_term$61,$7031);var $7039 = _term$62;return $7039;});var self = _typename$1;switch(self._){case 'Maybe.some':var $7040=self.value;var $7041 = (_pst$61=>{var self = _pst$61;switch(self._){case 'Parser.State.new':var $7043=self.err;var _reply$67 = Kind$Parser$text$(":",_pst$61);var self = _reply$67;switch(self._){case 'Parser.Reply.error':var $7045=self.err;var self = $7043;switch(self._){case 'Maybe.some':var $7047=self.value;var $7048 = Parser$Reply$error$(Parser$Error$combine$($7047,$7045));var $7046 = $7048;break;case 'Maybe.none':var $7049 = Parser$Reply$error$($7045);var $7046 = $7049;break;};var $7044 = $7046;break;case 'Parser.Reply.value':var $7050=self.pst;var self = $7050;switch(self._){case 'Parser.State.new':var $7052=self.err;var $7053=self.nam;var $7054=self.ini;var $7055=self.idx;var $7056=self.str;var _reply$pst$75 = Parser$State$new$(Parser$Error$maybe_combine$($7043,$7052),$7053,$7054,$7055,$7056);var self = _reply$pst$75;switch(self._){case 'Parser.State.new':var $7058=self.err;var _reply$81 = Kind$Parser$text$($7040,_reply$pst$75);var self = _reply$81;switch(self._){case 'Parser.Reply.error':var $7060=self.err;var self = $7058;switch(self._){case 'Maybe.some':var $7062=self.value;var $7063 = Parser$Reply$error$(Parser$Error$combine$($7062,$7060));var $7061 = $7063;break;case 'Maybe.none':var $7064 = Parser$Reply$error$($7060);var $7061 = $7064;break;};var $7059 = $7061;break;case 'Parser.Reply.value':var $7065=self.pst;var self = $7065;switch(self._){case 'Parser.State.new':var $7067=self.err;var $7068=self.nam;var $7069=self.ini;var $7070=self.idx;var $7071=self.str;var _reply$pst$89 = Parser$State$new$(Parser$Error$maybe_combine$($7058,$7067),$7068,$7069,$7070,$7071);var self = _reply$pst$89;switch(self._){case 'Parser.State.new':var $7073=self.err;var _reply$95 = Kind$Parser$text$("]",_reply$pst$89);var self = _reply$95;switch(self._){case 'Parser.Reply.error':var $7075=self.err;var self = $7073;switch(self._){case 'Maybe.some':var $7077=self.value;var $7078 = Parser$Reply$error$(Parser$Error$combine$($7077,$7075));var $7076 = $7078;break;case 'Maybe.none':var $7079 = Parser$Reply$error$($7075);var $7076 = $7079;break;};var $7074 = $7076;break;case 'Parser.Reply.value':var $7080=self.pst;var self = $7080;switch(self._){case 'Parser.State.new':var $7082=self.err;var $7083=self.nam;var $7084=self.ini;var $7085=self.idx;var $7086=self.str;var _reply$pst$103 = Parser$State$new$(Parser$Error$maybe_combine$($7073,$7082),$7083,$7084,$7085,$7086);var $7087 = Parser$Reply$value$(_reply$pst$103,_list$59($7040));var $7081 = $7087;break;};var $7074 = $7081;break;};var $7072 = $7074;break;};var $7066 = $7072;break;};var $7059 = $7066;break;};var $7057 = $7059;break;};var $7051 = $7057;break;};var $7044 = $7051;break;};var $7042 = $7044;break;};return $7042;});var $7038 = $7041;break;case 'Maybe.none':var $7088 = (_pst$60=>{var self = _pst$60;switch(self._){case 'Parser.State.new':var $7090=self.err;var _reply$66 = Parser$maybe$((_pst$66=>{var self = _pst$66;switch(self._){case 'Parser.State.new':var $7093=self.err;var _reply$72 = Kind$Parser$text$(":",_pst$66);var self = _reply$72;switch(self._){case 'Parser.Reply.error':var $7095=self.err;var self = $7093;switch(self._){case 'Maybe.some':var $7097=self.value;var $7098 = Parser$Reply$error$(Parser$Error$combine$($7097,$7095));var $7096 = $7098;break;case 'Maybe.none':var $7099 = Parser$Reply$error$($7095);var $7096 = $7099;break;};var $7094 = $7096;break;case 'Parser.Reply.value':var $7100=self.pst;var self = $7100;switch(self._){case 'Parser.State.new':var $7102=self.err;var $7103=self.nam;var $7104=self.ini;var $7105=self.idx;var $7106=self.str;var _reply$pst$80 = Parser$State$new$(Parser$Error$maybe_combine$($7093,$7102),$7103,$7104,$7105,$7106);var $7107 = Kind$Parser$text$("Nat",_reply$pst$80);var $7101 = $7107;break;};var $7094 = $7101;break;};var $7092 = $7094;break;};return $7092;}),_pst$60);var self = _reply$66;switch(self._){case 'Parser.Reply.error':var $7108=self.err;var self = $7090;switch(self._){case 'Maybe.some':var $7110=self.value;var $7111 = Parser$Reply$error$(Parser$Error$combine$($7110,$7108));var $7109 = $7111;break;case 'Maybe.none':var $7112 = Parser$Reply$error$($7108);var $7109 = $7112;break;};var $7091 = $7109;break;case 'Parser.Reply.value':var $7113=self.pst;var self = $7113;switch(self._){case 'Parser.State.new':var $7115=self.err;var $7116=self.nam;var $7117=self.ini;var $7118=self.idx;var $7119=self.str;var _reply$pst$74 = Parser$State$new$(Parser$Error$maybe_combine$($7090,$7115),$7116,$7117,$7118,$7119);var self = _reply$pst$74;switch(self._){case 'Parser.State.new':var $7121=self.err;var _reply$80 = Kind$Parser$text$("]",_reply$pst$74);var self = _reply$80;switch(self._){case 'Parser.Reply.error':var $7123=self.err;var self = $7121;switch(self._){case 'Maybe.some':var $7125=self.value;var $7126 = Parser$Reply$error$(Parser$Error$combine$($7125,$7123));var $7124 = $7126;break;case 'Maybe.none':var $7127 = Parser$Reply$error$($7123);var $7124 = $7127;break;};var $7122 = $7124;break;case 'Parser.Reply.value':var $7128=self.pst;var self = $7128;switch(self._){case 'Parser.State.new':var $7130=self.err;var $7131=self.nam;var $7132=self.ini;var $7133=self.idx;var $7134=self.str;var _reply$pst$88 = Parser$State$new$(Parser$Error$maybe_combine$($7121,$7130),$7131,$7132,$7133,$7134);var $7135 = Parser$Reply$value$(_reply$pst$88,_list$59("Nat"));var $7129 = $7135;break;};var $7122 = $7129;break;};var $7120 = $7122;break;};var $7114 = $7120;break;};var $7091 = $7114;break;};var $7089 = $7091;break;};return $7089;});var $7038 = $7088;break;};var $7038 = $7038(_reply$pst$58);var $7032 = $7038;break;};var $7024 = $7032;break;};var $7022 = $7024;break;};var $7016 = $7022;break;};var $7009 = $7016;break;};var $7007 = $7009;break;};var $7001 = $7007;break;};var $6993 = $7001;break;};var $6991 = $6993;break;};var $6985 = $6991;break;};var $6978 = $6985;break;};var $6976 = $6978;break;};return $6976;}));return $6975;};
  const Kind$Parser$comprehension_range$go = x0=>Kind$Parser$comprehension_range$go$(x0);
  const Kind$Parser$comprehension_range = Parser$choice(List$cons$(Kind$Parser$comprehension_range$go$(Maybe$none),List$cons$(Kind$Parser$comprehension_range$go$(Maybe$some$("I32")),List$cons$(Kind$Parser$comprehension_range$go$(Maybe$some$("U32")),List$nil))));
  function Kind$Name$read$(_str$1){var $7136 = _str$1;return $7136;};
  const Kind$Name$read = x0=>Kind$Name$read$(x0);
  const Kind$Parser$list = Kind$Parser$block("list")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $7138=self.err;var _reply$7 = Kind$Parser$items$("[",Kind$Parser$term,"]")(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $7140=self.err;var self = $7138;switch(self._){case 'Maybe.some':var $7142=self.value;var $7143 = Parser$Reply$error$(Parser$Error$combine$($7142,$7140));var $7141 = $7143;break;case 'Maybe.none':var $7144 = Parser$Reply$error$($7140);var $7141 = $7144;break;};var $7139 = $7141;break;case 'Parser.Reply.value':var $7145=self.pst;var $7146=self.val;var self = $7145;switch(self._){case 'Parser.State.new':var $7148=self.err;var $7149=self.nam;var $7150=self.ini;var $7151=self.idx;var $7152=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($7138,$7148),$7149,$7150,$7151,$7152);var $7153 = Parser$Reply$value$(_reply$pst$15,List$fold$($7146,Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")),Kind$Term$hol$(Bits$e)),(_x$16=>_xs$17=>{var _term$18 = Kind$Term$ref$(Kind$Name$read$("List.cons"));var _term$19 = Kind$Term$app$(_term$18,Kind$Term$hol$(Bits$e));var _term$20 = Kind$Term$app$(_term$19,_x$16);var _term$21 = Kind$Term$app$(_term$20,_xs$17);var $7154 = _term$21;return $7154;})));var $7147 = $7153;break;};var $7139 = $7147;break;};var $7137 = $7139;break;};return $7137;}));
  const Kind$Parser$map = Kind$Parser$block("map")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $7156=self.err;var _reply$7 = Kind$Parser$items$("{",(_pst$7=>{var self = _pst$7;switch(self._){case 'Parser.State.new':var $7159=self.err;var _reply$13 = Kind$Parser$term(_pst$7);var self = _reply$13;switch(self._){case 'Parser.Reply.error':var $7161=self.err;var self = $7159;switch(self._){case 'Maybe.some':var $7163=self.value;var $7164 = Parser$Reply$error$(Parser$Error$combine$($7163,$7161));var $7162 = $7164;break;case 'Maybe.none':var $7165 = Parser$Reply$error$($7161);var $7162 = $7165;break;};var $7160 = $7162;break;case 'Parser.Reply.value':var $7166=self.pst;var $7167=self.val;var self = $7166;switch(self._){case 'Parser.State.new':var $7169=self.err;var $7170=self.nam;var $7171=self.ini;var $7172=self.idx;var $7173=self.str;var _reply$pst$21 = Parser$State$new$(Parser$Error$maybe_combine$($7159,$7169),$7170,$7171,$7172,$7173);var self = _reply$pst$21;switch(self._){case 'Parser.State.new':var $7175=self.err;var _reply$27 = Kind$Parser$text$(":",_reply$pst$21);var self = _reply$27;switch(self._){case 'Parser.Reply.error':var $7177=self.err;var self = $7175;switch(self._){case 'Maybe.some':var $7179=self.value;var $7180 = Parser$Reply$error$(Parser$Error$combine$($7179,$7177));var $7178 = $7180;break;case 'Maybe.none':var $7181 = Parser$Reply$error$($7177);var $7178 = $7181;break;};var $7176 = $7178;break;case 'Parser.Reply.value':var $7182=self.pst;var self = $7182;switch(self._){case 'Parser.State.new':var $7184=self.err;var $7185=self.nam;var $7186=self.ini;var $7187=self.idx;var $7188=self.str;var _reply$pst$35 = Parser$State$new$(Parser$Error$maybe_combine$($7175,$7184),$7185,$7186,$7187,$7188);var self = _reply$pst$35;switch(self._){case 'Parser.State.new':var $7190=self.err;var _reply$41 = Kind$Parser$term(_reply$pst$35);var self = _reply$41;switch(self._){case 'Parser.Reply.error':var $7192=self.err;var self = $7190;switch(self._){case 'Maybe.some':var $7194=self.value;var $7195 = Parser$Reply$error$(Parser$Error$combine$($7194,$7192));var $7193 = $7195;break;case 'Maybe.none':var $7196 = Parser$Reply$error$($7192);var $7193 = $7196;break;};var $7191 = $7193;break;case 'Parser.Reply.value':var $7197=self.pst;var $7198=self.val;var self = $7197;switch(self._){case 'Parser.State.new':var $7200=self.err;var $7201=self.nam;var $7202=self.ini;var $7203=self.idx;var $7204=self.str;var _reply$pst$49 = Parser$State$new$(Parser$Error$maybe_combine$($7190,$7200),$7201,$7202,$7203,$7204);var $7205 = Parser$Reply$value$(_reply$pst$49,Pair$new$($7167,$7198));var $7199 = $7205;break;};var $7191 = $7199;break;};var $7189 = $7191;break;};var $7183 = $7189;break;};var $7176 = $7183;break;};var $7174 = $7176;break;};var $7168 = $7174;break;};var $7160 = $7168;break;};var $7158 = $7160;break;};return $7158;}),"}")(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $7206=self.err;var self = $7156;switch(self._){case 'Maybe.some':var $7208=self.value;var $7209 = Parser$Reply$error$(Parser$Error$combine$($7208,$7206));var $7207 = $7209;break;case 'Maybe.none':var $7210 = Parser$Reply$error$($7206);var $7207 = $7210;break;};var $7157 = $7207;break;case 'Parser.Reply.value':var $7211=self.pst;var $7212=self.val;var self = $7211;switch(self._){case 'Parser.State.new':var $7214=self.err;var $7215=self.nam;var $7216=self.ini;var $7217=self.idx;var $7218=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($7156,$7214),$7215,$7216,$7217,$7218);var _list$16 = List$fold$($7212,Kind$Term$app$(Kind$Term$ref$("List.nil"),Kind$Term$hol$(Bits$e)),(_kv$16=>_xs$17=>{var self = _kv$16;switch(self._){case 'Pair.new':var $7221=self.fst;var $7222=self.snd;var _pair$20 = Kind$Term$ref$("Pair.new");var _pair$21 = Kind$Term$app$(_pair$20,Kind$Term$hol$(Bits$e));var _pair$22 = Kind$Term$app$(_pair$21,Kind$Term$hol$(Bits$e));var _pair$23 = Kind$Term$app$(_pair$22,$7221);var _pair$24 = Kind$Term$app$(_pair$23,$7222);var _term$25 = Kind$Term$ref$("List.cons");var _term$26 = Kind$Term$app$(_term$25,Kind$Term$hol$(Bits$e));var _term$27 = Kind$Term$app$(_term$26,_pair$24);var _term$28 = Kind$Term$app$(_term$27,_xs$17);var $7223 = _term$28;var $7220 = $7223;break;};return $7220;}));var _term$17 = Kind$Term$ref$("Map.from_list");var _term$18 = Kind$Term$app$(_term$17,Kind$Term$hol$(Bits$e));var _term$19 = Kind$Term$app$(_term$18,_list$16);var $7219 = Parser$Reply$value$(_reply$pst$15,_term$19);var $7213 = $7219;break;};var $7157 = $7213;break;};var $7155 = $7157;break;};return $7155;}));
  function Kind$Parser$log$(_body$1){var $7224 = Kind$Parser$block("log")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $7226=self.err;var _reply$8 = Kind$Parser$text$("log(",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $7228=self.err;var self = $7226;switch(self._){case 'Maybe.some':var $7230=self.value;var $7231 = Parser$Reply$error$(Parser$Error$combine$($7230,$7228));var $7229 = $7231;break;case 'Maybe.none':var $7232 = Parser$Reply$error$($7228);var $7229 = $7232;break;};var $7227 = $7229;break;case 'Parser.Reply.value':var $7233=self.pst;var self = $7233;switch(self._){case 'Parser.State.new':var $7235=self.err;var $7236=self.nam;var $7237=self.ini;var $7238=self.idx;var $7239=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($7226,$7235),$7236,$7237,$7238,$7239);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $7241=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $7243=self.err;var self = $7241;switch(self._){case 'Maybe.some':var $7245=self.value;var $7246 = Parser$Reply$error$(Parser$Error$combine$($7245,$7243));var $7244 = $7246;break;case 'Maybe.none':var $7247 = Parser$Reply$error$($7243);var $7244 = $7247;break;};var $7242 = $7244;break;case 'Parser.Reply.value':var $7248=self.pst;var $7249=self.val;var self = $7248;switch(self._){case 'Parser.State.new':var $7251=self.err;var $7252=self.nam;var $7253=self.ini;var $7254=self.idx;var $7255=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($7241,$7251),$7252,$7253,$7254,$7255);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $7257=self.err;var _reply$36 = Kind$Parser$text$(")",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $7259=self.err;var self = $7257;switch(self._){case 'Maybe.some':var $7261=self.value;var $7262 = Parser$Reply$error$(Parser$Error$combine$($7261,$7259));var $7260 = $7262;break;case 'Maybe.none':var $7263 = Parser$Reply$error$($7259);var $7260 = $7263;break;};var $7258 = $7260;break;case 'Parser.Reply.value':var $7264=self.pst;var self = $7264;switch(self._){case 'Parser.State.new':var $7266=self.err;var $7267=self.nam;var $7268=self.ini;var $7269=self.idx;var $7270=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($7257,$7266),$7267,$7268,$7269,$7270);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $7272=self.err;var _reply$50 = _body$1(Unit$new)(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $7274=self.err;var self = $7272;switch(self._){case 'Maybe.some':var $7276=self.value;var $7277 = Parser$Reply$error$(Parser$Error$combine$($7276,$7274));var $7275 = $7277;break;case 'Maybe.none':var $7278 = Parser$Reply$error$($7274);var $7275 = $7278;break;};var $7273 = $7275;break;case 'Parser.Reply.value':var $7279=self.pst;var $7280=self.val;var self = $7279;switch(self._){case 'Parser.State.new':var $7282=self.err;var $7283=self.nam;var $7284=self.ini;var $7285=self.idx;var $7286=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($7272,$7282),$7283,$7284,$7285,$7286);var _term$59 = Kind$Term$ref$("Debug.log");var _term$60 = Kind$Term$app$(_term$59,Kind$Term$hol$(Bits$e));var _term$61 = Kind$Term$app$(_term$60,$7249);var _term$62 = Kind$Term$app$(_term$61,Kind$Term$lam$("",(_x$62=>{var $7288 = $7280;return $7288;})));var $7287 = Parser$Reply$value$(_reply$pst$58,_term$62);var $7281 = $7287;break;};var $7273 = $7281;break;};var $7271 = $7273;break;};var $7265 = $7271;break;};var $7258 = $7265;break;};var $7256 = $7258;break;};var $7250 = $7256;break;};var $7242 = $7250;break;};var $7240 = $7242;break;};var $7234 = $7240;break;};var $7227 = $7234;break;};var $7225 = $7227;break;};return $7225;}));return $7224;};
  const Kind$Parser$log = x0=>Kind$Parser$log$(x0);
  const Nat$sub = a0=>a1=>(a0-a1<=0n?0n:a0-a1);
  function String$slice$(_i$1,_j$2,_xs$3){var $7289 = String$take$((_j$2-_i$1<=0n?0n:_j$2-_i$1),String$drop$(_i$1,_xs$3));return $7289;};
  const String$slice = x0=>x1=>x2=>String$slice$(x0,x1,x2);
  function Kind$Term$unroll_nat$(_natx$1){var self = _natx$1;if (self===0n) {var $7291 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));var $7290 = $7291;} else {var $7292=(self-1n);var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));var _argm$4 = Kind$Term$nat$($7292);var $7293 = Kind$Term$app$(_func$3,_argm$4);var $7290 = $7293;};return $7290;};
  const Kind$Term$unroll_nat = x0=>Kind$Term$unroll_nat$(x0);
  function Word$to_bits$(_a$2){var self = _a$2;switch(self._){case 'Word.o':var $7295=self.pred;var $7296 = (Word$to_bits$($7295)+'0');var $7294 = $7296;break;case 'Word.i':var $7297=self.pred;var $7298 = (Word$to_bits$($7297)+'1');var $7294 = $7298;break;case 'Word.e':var $7299 = Bits$e;var $7294 = $7299;break;};return $7294;};
  const Word$to_bits = x0=>Word$to_bits$(x0);
  const U16$to_bits = a0=>(u16_to_bits(a0));
  function Kind$Term$unroll_chr$bits$(_bits$1){var self = _bits$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $7301=self.slice(0,-1);var $7302 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")),Kind$Term$unroll_chr$bits$($7301));var $7300 = $7302;break;case 'i':var $7303=self.slice(0,-1);var $7304 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")),Kind$Term$unroll_chr$bits$($7303));var $7300 = $7304;break;case 'e':var $7305 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));var $7300 = $7305;break;};return $7300;};
  const Kind$Term$unroll_chr$bits = x0=>Kind$Term$unroll_chr$bits$(x0);
  function Kind$Term$unroll_chr$(_chrx$1){var _bits$2 = (u16_to_bits(_chrx$1));var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));var _term$4 = Kind$Term$app$(_term$3,Kind$Term$nat$(16n));var _term$5 = Kind$Term$app$(_term$4,Kind$Term$unroll_chr$bits$(_bits$2));var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")),_term$5);var $7306 = _term$6;return $7306;};
  const Kind$Term$unroll_chr = x0=>Kind$Term$unroll_chr$(x0);
  function Kind$Term$unroll_str$(_strx$1){var self = _strx$1;if (self.length===0) {var $7308 = Kind$Term$ref$(Kind$Name$read$("String.nil"));var $7307 = $7308;} else {var $7309=self.charCodeAt(0);var $7310=self.slice(1);var _char$4 = Kind$Term$chr$($7309);var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));var _term$6 = Kind$Term$app$(_term$5,_char$4);var _term$7 = Kind$Term$app$(_term$6,Kind$Term$str$($7310));var $7311 = _term$7;var $7307 = $7311;};return $7307;};
  const Kind$Term$unroll_str = x0=>Kind$Term$unroll_str$(x0);
  function Kind$Term$reduce$(_term$1,_defs$2){var self = _term$1;switch(self._){case 'Kind.Term.ref':var $7313=self.name;var self = Kind$Map$get$($7313,_defs$2);switch(self._){case 'Maybe.some':var $7315=self.value;var self = $7315;switch(self._){case 'Kind.Def.new':var $7317=self.term;var $7318 = Kind$Term$reduce$($7317,_defs$2);var $7316 = $7318;break;};var $7314 = $7316;break;case 'Maybe.none':var $7319 = Kind$Term$ref$($7313);var $7314 = $7319;break;};var $7312 = $7314;break;case 'Kind.Term.app':var $7320=self.func;var $7321=self.argm;var _func$5 = Kind$Term$reduce$($7320,_defs$2);var self = _func$5;switch(self._){case 'Kind.Term.lam':var $7323=self.body;var $7324 = Kind$Term$reduce$($7323($7321),_defs$2);var $7322 = $7324;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $7325 = _term$1;var $7322 = $7325;break;};var $7312 = $7322;break;case 'Kind.Term.let':var $7326=self.expr;var $7327=self.body;var $7328 = Kind$Term$reduce$($7327($7326),_defs$2);var $7312 = $7328;break;case 'Kind.Term.def':var $7329=self.expr;var $7330=self.body;var $7331 = Kind$Term$reduce$($7330($7329),_defs$2);var $7312 = $7331;break;case 'Kind.Term.ann':var $7332=self.term;var $7333 = Kind$Term$reduce$($7332,_defs$2);var $7312 = $7333;break;case 'Kind.Term.nat':var $7334=self.natx;var $7335 = Kind$Term$reduce$(Kind$Term$unroll_nat$($7334),_defs$2);var $7312 = $7335;break;case 'Kind.Term.chr':var $7336=self.chrx;var $7337 = Kind$Term$reduce$(Kind$Term$unroll_chr$($7336),_defs$2);var $7312 = $7337;break;case 'Kind.Term.str':var $7338=self.strx;var $7339 = Kind$Term$reduce$(Kind$Term$unroll_str$($7338),_defs$2);var $7312 = $7339;break;case 'Kind.Term.ori':var $7340=self.expr;var $7341 = Kind$Term$reduce$($7340,_defs$2);var $7312 = $7341;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $7342 = _term$1;var $7312 = $7342;break;};return $7312;};
  const Kind$Term$reduce = x0=>x1=>Kind$Term$reduce$(x0,x1);
  function Kind$Parser$open$(_body$1){var $7343 = Kind$Parser$block("open")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $7345=self.err;var _reply$8 = Kind$Parser$text$("open ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $7347=self.err;var self = $7345;switch(self._){case 'Maybe.some':var $7349=self.value;var $7350 = Parser$Reply$error$(Parser$Error$combine$($7349,$7347));var $7348 = $7350;break;case 'Maybe.none':var $7351 = Parser$Reply$error$($7347);var $7348 = $7351;break;};var $7346 = $7348;break;case 'Parser.Reply.value':var $7352=self.pst;var self = $7352;switch(self._){case 'Parser.State.new':var $7354=self.err;var $7355=self.nam;var $7356=self.ini;var $7357=self.idx;var $7358=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($7345,$7354),$7355,$7356,$7357,$7358);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $7360=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $7362=self.err;var self = $7360;switch(self._){case 'Maybe.some':var $7364=self.value;var $7365 = Parser$Reply$error$(Parser$Error$combine$($7364,$7362));var $7363 = $7365;break;case 'Maybe.none':var $7366 = Parser$Reply$error$($7362);var $7363 = $7366;break;};var $7361 = $7363;break;case 'Parser.Reply.value':var $7367=self.pst;var $7368=self.val;var self = $7367;switch(self._){case 'Parser.State.new':var $7370=self.err;var $7371=self.nam;var $7372=self.ini;var $7373=self.idx;var $7374=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($7360,$7370),$7371,$7372,$7373,$7374);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $7376=self.err;var _reply$36 = Parser$maybe$((_pst$36=>{var self = _pst$36;switch(self._){case 'Parser.State.new':var $7379=self.err;var _reply$42 = Kind$Parser$text$("as",_pst$36);var self = _reply$42;switch(self._){case 'Parser.Reply.error':var $7381=self.err;var self = $7379;switch(self._){case 'Maybe.some':var $7383=self.value;var $7384 = Parser$Reply$error$(Parser$Error$combine$($7383,$7381));var $7382 = $7384;break;case 'Maybe.none':var $7385 = Parser$Reply$error$($7381);var $7382 = $7385;break;};var $7380 = $7382;break;case 'Parser.Reply.value':var $7386=self.pst;var self = $7386;switch(self._){case 'Parser.State.new':var $7388=self.err;var $7389=self.nam;var $7390=self.ini;var $7391=self.idx;var $7392=self.str;var _reply$pst$50 = Parser$State$new$(Parser$Error$maybe_combine$($7379,$7388),$7389,$7390,$7391,$7392);var $7393 = Kind$Parser$name1$(_reply$pst$50);var $7387 = $7393;break;};var $7380 = $7387;break;};var $7378 = $7380;break;};return $7378;}),_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $7394=self.err;var self = $7376;switch(self._){case 'Maybe.some':var $7396=self.value;var $7397 = Parser$Reply$error$(Parser$Error$combine$($7396,$7394));var $7395 = $7397;break;case 'Maybe.none':var $7398 = Parser$Reply$error$($7394);var $7395 = $7398;break;};var $7377 = $7395;break;case 'Parser.Reply.value':var $7399=self.pst;var $7400=self.val;var self = $7399;switch(self._){case 'Parser.State.new':var $7402=self.err;var $7403=self.nam;var $7404=self.ini;var $7405=self.idx;var $7406=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($7376,$7402),$7403,$7404,$7405,$7406);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $7408=self.err;var _reply$50 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $7410=self.err;var self = $7408;switch(self._){case 'Maybe.some':var $7412=self.value;var $7413 = Parser$Reply$error$(Parser$Error$combine$($7412,$7410));var $7411 = $7413;break;case 'Maybe.none':var $7414 = Parser$Reply$error$($7410);var $7411 = $7414;break;};var $7409 = $7411;break;case 'Parser.Reply.value':var $7415=self.pst;var self = $7415;switch(self._){case 'Parser.State.new':var $7417=self.err;var $7418=self.nam;var $7419=self.ini;var $7420=self.idx;var $7421=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($7408,$7417),$7418,$7419,$7420,$7421);var self = $7400;switch(self._){case 'Maybe.some':var $7423=self.value;var $7424 = $7423;var _name$59 = $7424;break;case 'Maybe.none':var self = Kind$Term$reduce$($7368,Kind$Map$new);switch(self._){case 'Kind.Term.var':var $7426=self.name;var $7427 = $7426;var $7425 = $7427;break;case 'Kind.Term.ref':var $7428=self.name;var $7429 = $7428;var $7425 = $7429;break;case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $7430 = Kind$Name$read$("self");var $7425 = $7430;break;};var _name$59 = $7425;break;};var _wyth$60 = List$nil;var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $7431=self.err;var _reply$66 = _body$1(Unit$new)(_reply$pst$58);var self = _reply$66;switch(self._){case 'Parser.Reply.error':var $7433=self.err;var self = $7431;switch(self._){case 'Maybe.some':var $7435=self.value;var $7436 = Parser$Reply$error$(Parser$Error$combine$($7435,$7433));var $7434 = $7436;break;case 'Maybe.none':var $7437 = Parser$Reply$error$($7433);var $7434 = $7437;break;};var $7432 = $7434;break;case 'Parser.Reply.value':var $7438=self.pst;var $7439=self.val;var self = $7438;switch(self._){case 'Parser.State.new':var $7441=self.err;var $7442=self.nam;var $7443=self.ini;var $7444=self.idx;var $7445=self.str;var _reply$pst$74 = Parser$State$new$(Parser$Error$maybe_combine$($7431,$7441),$7442,$7443,$7444,$7445);var _cses$75 = Kind$Map$set$("_",$7439,Kind$Map$new);var _moti$76 = Maybe$some$(Kind$Term$hol$(Bits$e));var $7446 = Parser$Reply$value$(_reply$pst$74,Kind$Term$cse$(Bits$e,$7368,_name$59,_wyth$60,_cses$75,_moti$76));var $7440 = $7446;break;};var $7432 = $7440;break;};var $7422 = $7432;break;};var $7416 = $7422;break;};var $7409 = $7416;break;};var $7407 = $7409;break;};var $7401 = $7407;break;};var $7377 = $7401;break;};var $7375 = $7377;break;};var $7369 = $7375;break;};var $7361 = $7369;break;};var $7359 = $7361;break;};var $7353 = $7359;break;};var $7346 = $7353;break;};var $7344 = $7346;break;};return $7344;}));return $7343;};
  const Kind$Parser$open = x0=>Kind$Parser$open$(x0);
  function Kind$Parser$do$statements$(_monad_name$1){var $7447 = Parser$choice(List$cons$(Kind$Parser$block("do-get")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $7449=self.err;var _reply$8 = Parser$choice$(List$cons$(Kind$Parser$text("var "),List$cons$(Kind$Parser$text("get "),List$nil)),_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $7451=self.err;var self = $7449;switch(self._){case 'Maybe.some':var $7453=self.value;var $7454 = Parser$Reply$error$(Parser$Error$combine$($7453,$7451));var $7452 = $7454;break;case 'Maybe.none':var $7455 = Parser$Reply$error$($7451);var $7452 = $7455;break;};var $7450 = $7452;break;case 'Parser.Reply.value':var $7456=self.pst;var self = $7456;switch(self._){case 'Parser.State.new':var $7458=self.err;var $7459=self.nam;var $7460=self.ini;var $7461=self.idx;var $7462=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($7449,$7458),$7459,$7460,$7461,$7462);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $7464=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $7466=self.err;var self = $7464;switch(self._){case 'Maybe.some':var $7468=self.value;var $7469 = Parser$Reply$error$(Parser$Error$combine$($7468,$7466));var $7467 = $7469;break;case 'Maybe.none':var $7470 = Parser$Reply$error$($7466);var $7467 = $7470;break;};var $7465 = $7467;break;case 'Parser.Reply.value':var $7471=self.pst;var $7472=self.val;var self = $7471;switch(self._){case 'Parser.State.new':var $7474=self.err;var $7475=self.nam;var $7476=self.ini;var $7477=self.idx;var $7478=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($7464,$7474),$7475,$7476,$7477,$7478);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $7480=self.err;var _reply$36 = Kind$Parser$text$("=",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $7482=self.err;var self = $7480;switch(self._){case 'Maybe.some':var $7484=self.value;var $7485 = Parser$Reply$error$(Parser$Error$combine$($7484,$7482));var $7483 = $7485;break;case 'Maybe.none':var $7486 = Parser$Reply$error$($7482);var $7483 = $7486;break;};var $7481 = $7483;break;case 'Parser.Reply.value':var $7487=self.pst;var self = $7487;switch(self._){case 'Parser.State.new':var $7489=self.err;var $7490=self.nam;var $7491=self.ini;var $7492=self.idx;var $7493=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($7480,$7489),$7490,$7491,$7492,$7493);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $7495=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $7497=self.err;var self = $7495;switch(self._){case 'Maybe.some':var $7499=self.value;var $7500 = Parser$Reply$error$(Parser$Error$combine$($7499,$7497));var $7498 = $7500;break;case 'Maybe.none':var $7501 = Parser$Reply$error$($7497);var $7498 = $7501;break;};var $7496 = $7498;break;case 'Parser.Reply.value':var $7502=self.pst;var $7503=self.val;var self = $7502;switch(self._){case 'Parser.State.new':var $7505=self.err;var $7506=self.nam;var $7507=self.ini;var $7508=self.idx;var $7509=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($7495,$7505),$7506,$7507,$7508,$7509);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $7511=self.err;var _reply$64 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $7513=self.err;var self = $7511;switch(self._){case 'Maybe.some':var $7515=self.value;var $7516 = Parser$Reply$error$(Parser$Error$combine$($7515,$7513));var $7514 = $7516;break;case 'Maybe.none':var $7517 = Parser$Reply$error$($7513);var $7514 = $7517;break;};var $7512 = $7514;break;case 'Parser.Reply.value':var $7518=self.pst;var self = $7518;switch(self._){case 'Parser.State.new':var $7520=self.err;var $7521=self.nam;var $7522=self.ini;var $7523=self.idx;var $7524=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($7511,$7520),$7521,$7522,$7523,$7524);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $7526=self.err;var _reply$78 = Kind$Parser$do$statements$(_monad_name$1)(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $7528=self.err;var self = $7526;switch(self._){case 'Maybe.some':var $7530=self.value;var $7531 = Parser$Reply$error$(Parser$Error$combine$($7530,$7528));var $7529 = $7531;break;case 'Maybe.none':var $7532 = Parser$Reply$error$($7528);var $7529 = $7532;break;};var $7527 = $7529;break;case 'Parser.Reply.value':var $7533=self.pst;var $7534=self.val;var self = $7533;switch(self._){case 'Parser.State.new':var $7536=self.err;var $7537=self.nam;var $7538=self.ini;var $7539=self.idx;var $7540=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($7526,$7536),$7537,$7538,$7539,$7540);var _term$87 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"),Kind$Term$ref$(_monad_name$1));var _term$88 = Kind$Term$app$(_term$87,Kind$Term$ref$((_monad_name$1+".monad")));var _term$89 = Kind$Term$app$(_term$88,Kind$Term$hol$(Bits$e));var _term$90 = Kind$Term$app$(_term$89,Kind$Term$hol$(Bits$e));var _term$91 = Kind$Term$app$(_term$90,$7503);var _term$92 = Kind$Term$app$(_term$91,Kind$Term$lam$($7472,(_x$92=>{var $7542 = $7534;return $7542;})));var $7541 = Parser$Reply$value$(_reply$pst$86,_term$92);var $7535 = $7541;break;};var $7527 = $7535;break;};var $7525 = $7527;break;};var $7519 = $7525;break;};var $7512 = $7519;break;};var $7510 = $7512;break;};var $7504 = $7510;break;};var $7496 = $7504;break;};var $7494 = $7496;break;};var $7488 = $7494;break;};var $7481 = $7488;break;};var $7479 = $7481;break;};var $7473 = $7479;break;};var $7465 = $7473;break;};var $7463 = $7465;break;};var $7457 = $7463;break;};var $7450 = $7457;break;};var $7448 = $7450;break;};return $7448;})),List$cons$(Kind$Parser$block("do-return")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $7544=self.err;var _reply$8 = Kind$Parser$text$("return ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $7546=self.err;var self = $7544;switch(self._){case 'Maybe.some':var $7548=self.value;var $7549 = Parser$Reply$error$(Parser$Error$combine$($7548,$7546));var $7547 = $7549;break;case 'Maybe.none':var $7550 = Parser$Reply$error$($7546);var $7547 = $7550;break;};var $7545 = $7547;break;case 'Parser.Reply.value':var $7551=self.pst;var self = $7551;switch(self._){case 'Parser.State.new':var $7553=self.err;var $7554=self.nam;var $7555=self.ini;var $7556=self.idx;var $7557=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($7544,$7553),$7554,$7555,$7556,$7557);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $7559=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $7561=self.err;var self = $7559;switch(self._){case 'Maybe.some':var $7563=self.value;var $7564 = Parser$Reply$error$(Parser$Error$combine$($7563,$7561));var $7562 = $7564;break;case 'Maybe.none':var $7565 = Parser$Reply$error$($7561);var $7562 = $7565;break;};var $7560 = $7562;break;case 'Parser.Reply.value':var $7566=self.pst;var $7567=self.val;var self = $7566;switch(self._){case 'Parser.State.new':var $7569=self.err;var $7570=self.nam;var $7571=self.ini;var $7572=self.idx;var $7573=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($7559,$7569),$7570,$7571,$7572,$7573);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $7575=self.err;var _reply$36 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $7577=self.err;var self = $7575;switch(self._){case 'Maybe.some':var $7579=self.value;var $7580 = Parser$Reply$error$(Parser$Error$combine$($7579,$7577));var $7578 = $7580;break;case 'Maybe.none':var $7581 = Parser$Reply$error$($7577);var $7578 = $7581;break;};var $7576 = $7578;break;case 'Parser.Reply.value':var $7582=self.pst;var self = $7582;switch(self._){case 'Parser.State.new':var $7584=self.err;var $7585=self.nam;var $7586=self.ini;var $7587=self.idx;var $7588=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($7575,$7584),$7585,$7586,$7587,$7588);var _term$45 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"),Kind$Term$ref$(_monad_name$1));var _term$46 = Kind$Term$app$(_term$45,Kind$Term$ref$((_monad_name$1+".monad")));var _term$47 = Kind$Term$app$(_term$46,Kind$Term$hol$(Bits$e));var _term$48 = Kind$Term$app$(_term$47,$7567);var $7589 = Parser$Reply$value$(_reply$pst$44,_term$48);var $7583 = $7589;break;};var $7576 = $7583;break;};var $7574 = $7576;break;};var $7568 = $7574;break;};var $7560 = $7568;break;};var $7558 = $7560;break;};var $7552 = $7558;break;};var $7545 = $7552;break;};var $7543 = $7545;break;};return $7543;})),List$cons$(Kind$Parser$block("do-for-range")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $7591=self.err;var _reply$8 = Kind$Parser$text$("for ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $7593=self.err;var self = $7591;switch(self._){case 'Maybe.some':var $7595=self.value;var $7596 = Parser$Reply$error$(Parser$Error$combine$($7595,$7593));var $7594 = $7596;break;case 'Maybe.none':var $7597 = Parser$Reply$error$($7593);var $7594 = $7597;break;};var $7592 = $7594;break;case 'Parser.Reply.value':var $7598=self.pst;var self = $7598;switch(self._){case 'Parser.State.new':var $7600=self.err;var $7601=self.nam;var $7602=self.ini;var $7603=self.idx;var $7604=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($7591,$7600),$7601,$7602,$7603,$7604);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $7606=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $7608=self.err;var self = $7606;switch(self._){case 'Maybe.some':var $7610=self.value;var $7611 = Parser$Reply$error$(Parser$Error$combine$($7610,$7608));var $7609 = $7611;break;case 'Maybe.none':var $7612 = Parser$Reply$error$($7608);var $7609 = $7612;break;};var $7607 = $7609;break;case 'Parser.Reply.value':var $7613=self.pst;var $7614=self.val;var self = $7613;switch(self._){case 'Parser.State.new':var $7616=self.err;var $7617=self.nam;var $7618=self.ini;var $7619=self.idx;var $7620=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($7606,$7616),$7617,$7618,$7619,$7620);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $7622=self.err;var _reply$36 = Kind$Parser$text$("from",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $7624=self.err;var self = $7622;switch(self._){case 'Maybe.some':var $7626=self.value;var $7627 = Parser$Reply$error$(Parser$Error$combine$($7626,$7624));var $7625 = $7627;break;case 'Maybe.none':var $7628 = Parser$Reply$error$($7624);var $7625 = $7628;break;};var $7623 = $7625;break;case 'Parser.Reply.value':var $7629=self.pst;var self = $7629;switch(self._){case 'Parser.State.new':var $7631=self.err;var $7632=self.nam;var $7633=self.ini;var $7634=self.idx;var $7635=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($7622,$7631),$7632,$7633,$7634,$7635);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $7637=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $7639=self.err;var self = $7637;switch(self._){case 'Maybe.some':var $7641=self.value;var $7642 = Parser$Reply$error$(Parser$Error$combine$($7641,$7639));var $7640 = $7642;break;case 'Maybe.none':var $7643 = Parser$Reply$error$($7639);var $7640 = $7643;break;};var $7638 = $7640;break;case 'Parser.Reply.value':var $7644=self.pst;var $7645=self.val;var self = $7644;switch(self._){case 'Parser.State.new':var $7647=self.err;var $7648=self.nam;var $7649=self.ini;var $7650=self.idx;var $7651=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($7637,$7647),$7648,$7649,$7650,$7651);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $7653=self.err;var _reply$64 = Kind$Parser$text$("to",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $7655=self.err;var self = $7653;switch(self._){case 'Maybe.some':var $7657=self.value;var $7658 = Parser$Reply$error$(Parser$Error$combine$($7657,$7655));var $7656 = $7658;break;case 'Maybe.none':var $7659 = Parser$Reply$error$($7655);var $7656 = $7659;break;};var $7654 = $7656;break;case 'Parser.Reply.value':var $7660=self.pst;var self = $7660;switch(self._){case 'Parser.State.new':var $7662=self.err;var $7663=self.nam;var $7664=self.ini;var $7665=self.idx;var $7666=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($7653,$7662),$7663,$7664,$7665,$7666);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $7668=self.err;var _reply$78 = Kind$Parser$term(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $7670=self.err;var self = $7668;switch(self._){case 'Maybe.some':var $7672=self.value;var $7673 = Parser$Reply$error$(Parser$Error$combine$($7672,$7670));var $7671 = $7673;break;case 'Maybe.none':var $7674 = Parser$Reply$error$($7670);var $7671 = $7674;break;};var $7669 = $7671;break;case 'Parser.Reply.value':var $7675=self.pst;var $7676=self.val;var self = $7675;switch(self._){case 'Parser.State.new':var $7678=self.err;var $7679=self.nam;var $7680=self.ini;var $7681=self.idx;var $7682=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($7668,$7678),$7679,$7680,$7681,$7682);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $7684=self.err;var _reply$92 = Kind$Parser$text$(":",_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $7686=self.err;var self = $7684;switch(self._){case 'Maybe.some':var $7688=self.value;var $7689 = Parser$Reply$error$(Parser$Error$combine$($7688,$7686));var $7687 = $7689;break;case 'Maybe.none':var $7690 = Parser$Reply$error$($7686);var $7687 = $7690;break;};var $7685 = $7687;break;case 'Parser.Reply.value':var $7691=self.pst;var self = $7691;switch(self._){case 'Parser.State.new':var $7693=self.err;var $7694=self.nam;var $7695=self.ini;var $7696=self.idx;var $7697=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($7684,$7693),$7694,$7695,$7696,$7697);var self = _reply$pst$100;switch(self._){case 'Parser.State.new':var $7699=self.err;var _reply$106 = Kind$Parser$term(_reply$pst$100);var self = _reply$106;switch(self._){case 'Parser.Reply.error':var $7701=self.err;var self = $7699;switch(self._){case 'Maybe.some':var $7703=self.value;var $7704 = Parser$Reply$error$(Parser$Error$combine$($7703,$7701));var $7702 = $7704;break;case 'Maybe.none':var $7705 = Parser$Reply$error$($7701);var $7702 = $7705;break;};var $7700 = $7702;break;case 'Parser.Reply.value':var $7706=self.pst;var $7707=self.val;var self = $7706;switch(self._){case 'Parser.State.new':var $7709=self.err;var $7710=self.nam;var $7711=self.ini;var $7712=self.idx;var $7713=self.str;var _reply$pst$114 = Parser$State$new$(Parser$Error$maybe_combine$($7699,$7709),$7710,$7711,$7712,$7713);var self = _reply$pst$114;switch(self._){case 'Parser.State.new':var $7715=self.err;var _reply$120 = Parser$maybe$(Kind$Parser$do$statements$(_monad_name$1),_reply$pst$114);var self = _reply$120;switch(self._){case 'Parser.Reply.error':var $7717=self.err;var self = $7715;switch(self._){case 'Maybe.some':var $7719=self.value;var $7720 = Parser$Reply$error$(Parser$Error$combine$($7719,$7717));var $7718 = $7720;break;case 'Maybe.none':var $7721 = Parser$Reply$error$($7717);var $7718 = $7721;break;};var $7716 = $7718;break;case 'Parser.Reply.value':var $7722=self.pst;var $7723=self.val;var self = $7722;switch(self._){case 'Parser.State.new':var $7725=self.err;var $7726=self.nam;var $7727=self.ini;var $7728=self.idx;var $7729=self.str;var _reply$pst$128 = Parser$State$new$(Parser$Error$maybe_combine$($7715,$7725),$7726,$7727,$7728,$7729);var _expr$129 = Kind$Term$ref$("Nat.for.io");var _expr$130 = Kind$Term$app$(_expr$129,$7645);var _expr$131 = Kind$Term$app$(_expr$130,$7676);var _expr$132 = Kind$Term$app$(_expr$131,Kind$Term$lam$($7614,(_x$132=>{var $7731 = $7707;return $7731;})));var self = $7723;switch(self._){case 'Maybe.some':var $7732=self.value;var _term$134 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"),Kind$Term$ref$(_monad_name$1));var _term$135 = Kind$Term$app$(_term$134,Kind$Term$ref$((_monad_name$1+".monad")));var _term$136 = Kind$Term$app$(_term$135,Kind$Term$hol$(Bits$e));var _term$137 = Kind$Term$app$(_term$136,Kind$Term$hol$(Bits$e));var _term$138 = Kind$Term$app$(_term$137,_expr$132);var _term$139 = Kind$Term$app$(_term$138,Kind$Term$lam$("",(_x$139=>{var $7734 = $7732;return $7734;})));var $7733 = (_pst$140=>{var $7735 = Parser$Reply$value$(_pst$140,_term$139);return $7735;});var $7730 = $7733;break;case 'Maybe.none':var $7736 = (_pst$133=>{var $7737 = Parser$Reply$value$(_pst$133,_expr$132);return $7737;});var $7730 = $7736;break;};var $7730 = $7730(_reply$pst$128);var $7724 = $7730;break;};var $7716 = $7724;break;};var $7714 = $7716;break;};var $7708 = $7714;break;};var $7700 = $7708;break;};var $7698 = $7700;break;};var $7692 = $7698;break;};var $7685 = $7692;break;};var $7683 = $7685;break;};var $7677 = $7683;break;};var $7669 = $7677;break;};var $7667 = $7669;break;};var $7661 = $7667;break;};var $7654 = $7661;break;};var $7652 = $7654;break;};var $7646 = $7652;break;};var $7638 = $7646;break;};var $7636 = $7638;break;};var $7630 = $7636;break;};var $7623 = $7630;break;};var $7621 = $7623;break;};var $7615 = $7621;break;};var $7607 = $7615;break;};var $7605 = $7607;break;};var $7599 = $7605;break;};var $7592 = $7599;break;};var $7590 = $7592;break;};return $7590;})),List$cons$(Kind$Parser$block("do-for-in")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $7739=self.err;var _reply$8 = Kind$Parser$text$("for ",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $7741=self.err;var self = $7739;switch(self._){case 'Maybe.some':var $7743=self.value;var $7744 = Parser$Reply$error$(Parser$Error$combine$($7743,$7741));var $7742 = $7744;break;case 'Maybe.none':var $7745 = Parser$Reply$error$($7741);var $7742 = $7745;break;};var $7740 = $7742;break;case 'Parser.Reply.value':var $7746=self.pst;var self = $7746;switch(self._){case 'Parser.State.new':var $7748=self.err;var $7749=self.nam;var $7750=self.ini;var $7751=self.idx;var $7752=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($7739,$7748),$7749,$7750,$7751,$7752);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $7754=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $7756=self.err;var self = $7754;switch(self._){case 'Maybe.some':var $7758=self.value;var $7759 = Parser$Reply$error$(Parser$Error$combine$($7758,$7756));var $7757 = $7759;break;case 'Maybe.none':var $7760 = Parser$Reply$error$($7756);var $7757 = $7760;break;};var $7755 = $7757;break;case 'Parser.Reply.value':var $7761=self.pst;var $7762=self.val;var self = $7761;switch(self._){case 'Parser.State.new':var $7764=self.err;var $7765=self.nam;var $7766=self.ini;var $7767=self.idx;var $7768=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($7754,$7764),$7765,$7766,$7767,$7768);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $7770=self.err;var _reply$36 = Kind$Parser$text$("in",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $7772=self.err;var self = $7770;switch(self._){case 'Maybe.some':var $7774=self.value;var $7775 = Parser$Reply$error$(Parser$Error$combine$($7774,$7772));var $7773 = $7775;break;case 'Maybe.none':var $7776 = Parser$Reply$error$($7772);var $7773 = $7776;break;};var $7771 = $7773;break;case 'Parser.Reply.value':var $7777=self.pst;var self = $7777;switch(self._){case 'Parser.State.new':var $7779=self.err;var $7780=self.nam;var $7781=self.ini;var $7782=self.idx;var $7783=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($7770,$7779),$7780,$7781,$7782,$7783);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $7785=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $7787=self.err;var self = $7785;switch(self._){case 'Maybe.some':var $7789=self.value;var $7790 = Parser$Reply$error$(Parser$Error$combine$($7789,$7787));var $7788 = $7790;break;case 'Maybe.none':var $7791 = Parser$Reply$error$($7787);var $7788 = $7791;break;};var $7786 = $7788;break;case 'Parser.Reply.value':var $7792=self.pst;var $7793=self.val;var self = $7792;switch(self._){case 'Parser.State.new':var $7795=self.err;var $7796=self.nam;var $7797=self.ini;var $7798=self.idx;var $7799=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($7785,$7795),$7796,$7797,$7798,$7799);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $7801=self.err;var _reply$64 = Kind$Parser$text$(":",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $7803=self.err;var self = $7801;switch(self._){case 'Maybe.some':var $7805=self.value;var $7806 = Parser$Reply$error$(Parser$Error$combine$($7805,$7803));var $7804 = $7806;break;case 'Maybe.none':var $7807 = Parser$Reply$error$($7803);var $7804 = $7807;break;};var $7802 = $7804;break;case 'Parser.Reply.value':var $7808=self.pst;var self = $7808;switch(self._){case 'Parser.State.new':var $7810=self.err;var $7811=self.nam;var $7812=self.ini;var $7813=self.idx;var $7814=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($7801,$7810),$7811,$7812,$7813,$7814);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $7816=self.err;var _reply$78 = Kind$Parser$term(_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $7818=self.err;var self = $7816;switch(self._){case 'Maybe.some':var $7820=self.value;var $7821 = Parser$Reply$error$(Parser$Error$combine$($7820,$7818));var $7819 = $7821;break;case 'Maybe.none':var $7822 = Parser$Reply$error$($7818);var $7819 = $7822;break;};var $7817 = $7819;break;case 'Parser.Reply.value':var $7823=self.pst;var $7824=self.val;var self = $7823;switch(self._){case 'Parser.State.new':var $7826=self.err;var $7827=self.nam;var $7828=self.ini;var $7829=self.idx;var $7830=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($7816,$7826),$7827,$7828,$7829,$7830);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $7832=self.err;var _reply$92 = Parser$maybe$(Kind$Parser$do$statements$(_monad_name$1),_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $7834=self.err;var self = $7832;switch(self._){case 'Maybe.some':var $7836=self.value;var $7837 = Parser$Reply$error$(Parser$Error$combine$($7836,$7834));var $7835 = $7837;break;case 'Maybe.none':var $7838 = Parser$Reply$error$($7834);var $7835 = $7838;break;};var $7833 = $7835;break;case 'Parser.Reply.value':var $7839=self.pst;var $7840=self.val;var self = $7839;switch(self._){case 'Parser.State.new':var $7842=self.err;var $7843=self.nam;var $7844=self.ini;var $7845=self.idx;var $7846=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($7832,$7842),$7843,$7844,$7845,$7846);var _expr$101 = Kind$Term$ref$("List.for.io");var _expr$102 = Kind$Term$app$(_expr$101,Kind$Term$hol$(Bits$e));var _expr$103 = Kind$Term$app$(_expr$102,$7793);var _expr$104 = Kind$Term$app$(_expr$103,Kind$Term$lam$($7762,(_x$104=>{var $7848 = $7824;return $7848;})));var self = $7840;switch(self._){case 'Maybe.some':var $7849=self.value;var _term$106 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"),Kind$Term$ref$(_monad_name$1));var _term$107 = Kind$Term$app$(_term$106,Kind$Term$ref$((_monad_name$1+".monad")));var _term$108 = Kind$Term$app$(_term$107,Kind$Term$hol$(Bits$e));var _term$109 = Kind$Term$app$(_term$108,Kind$Term$hol$(Bits$e));var _term$110 = Kind$Term$app$(_term$109,_expr$104);var _term$111 = Kind$Term$app$(_term$110,Kind$Term$lam$("",(_x$111=>{var $7851 = $7849;return $7851;})));var $7850 = (_pst$112=>{var $7852 = Parser$Reply$value$(_pst$112,_term$111);return $7852;});var $7847 = $7850;break;case 'Maybe.none':var $7853 = (_pst$105=>{var $7854 = Parser$Reply$value$(_pst$105,_expr$104);return $7854;});var $7847 = $7853;break;};var $7847 = $7847(_reply$pst$100);var $7841 = $7847;break;};var $7833 = $7841;break;};var $7831 = $7833;break;};var $7825 = $7831;break;};var $7817 = $7825;break;};var $7815 = $7817;break;};var $7809 = $7815;break;};var $7802 = $7809;break;};var $7800 = $7802;break;};var $7794 = $7800;break;};var $7786 = $7794;break;};var $7784 = $7786;break;};var $7778 = $7784;break;};var $7771 = $7778;break;};var $7769 = $7771;break;};var $7763 = $7769;break;};var $7755 = $7763;break;};var $7753 = $7755;break;};var $7747 = $7753;break;};var $7740 = $7747;break;};var $7738 = $7740;break;};return $7738;})),List$cons$(Kind$Parser$letforrange$u32$((_x$2=>{var $7855 = Kind$Parser$do$statements$(_monad_name$1);return $7855;})),List$cons$(Kind$Parser$letforrange$u32$with$((_x$2=>{var $7856 = Kind$Parser$do$statements$(_monad_name$1);return $7856;})),List$cons$(Kind$Parser$letforrange$nat$((_x$2=>{var $7857 = Kind$Parser$do$statements$(_monad_name$1);return $7857;})),List$cons$(Kind$Parser$letforrange$nat$with$((_x$2=>{var $7858 = Kind$Parser$do$statements$(_monad_name$1);return $7858;})),List$cons$(Kind$Parser$letforin$((_x$2=>{var $7859 = Kind$Parser$do$statements$(_monad_name$1);return $7859;})),List$cons$(Kind$Parser$letforin$with$((_x$2=>{var $7860 = Kind$Parser$do$statements$(_monad_name$1);return $7860;})),List$cons$(Kind$Parser$letwhile$((_x$2=>{var $7861 = Kind$Parser$do$statements$(_monad_name$1);return $7861;})),List$cons$(Kind$Parser$letwhile$with$((_x$2=>{var $7862 = Kind$Parser$do$statements$(_monad_name$1);return $7862;})),List$cons$(Kind$Parser$let$abort$((_x$2=>{var $7863 = Kind$Parser$do$statements$(_monad_name$1);return $7863;})),List$cons$(Kind$Parser$let$((_x$2=>{var $7864 = Kind$Parser$do$statements$(_monad_name$1);return $7864;})),List$cons$(Kind$Parser$getwhile$((_x$2=>{var $7865 = Kind$Parser$do$statements$(_monad_name$1);return $7865;})),List$cons$(Kind$Parser$getwhile$with((_x$2=>{var $7866 = Kind$Parser$do$statements$(_monad_name$1);return $7866;})),List$cons$(Kind$Parser$get$((_x$2=>{var $7867 = Kind$Parser$do$statements$(_monad_name$1);return $7867;})),List$cons$(Kind$Parser$def$((_x$2=>{var $7868 = Kind$Parser$do$statements$(_monad_name$1);return $7868;})),List$cons$(Kind$Parser$use$abort$((_x$2=>{var $7869 = Kind$Parser$do$statements$(_monad_name$1);return $7869;})),List$cons$(Kind$Parser$use$((_x$2=>{var $7870 = Kind$Parser$do$statements$(_monad_name$1);return $7870;})),List$cons$(Kind$Parser$log$((_x$2=>{var $7871 = Kind$Parser$do$statements$(_monad_name$1);return $7871;})),List$cons$(Kind$Parser$open$((_x$2=>{var $7872 = Kind$Parser$do$statements$(_monad_name$1);return $7872;})),List$cons$(Kind$Parser$block("do-statement")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $7874=self.err;var _reply$8 = Kind$Parser$term(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $7876=self.err;var self = $7874;switch(self._){case 'Maybe.some':var $7878=self.value;var $7879 = Parser$Reply$error$(Parser$Error$combine$($7878,$7876));var $7877 = $7879;break;case 'Maybe.none':var $7880 = Parser$Reply$error$($7876);var $7877 = $7880;break;};var $7875 = $7877;break;case 'Parser.Reply.value':var $7881=self.pst;var $7882=self.val;var self = $7881;switch(self._){case 'Parser.State.new':var $7884=self.err;var $7885=self.nam;var $7886=self.ini;var $7887=self.idx;var $7888=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($7874,$7884),$7885,$7886,$7887,$7888);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $7890=self.err;var _reply$22 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $7892=self.err;var self = $7890;switch(self._){case 'Maybe.some':var $7894=self.value;var $7895 = Parser$Reply$error$(Parser$Error$combine$($7894,$7892));var $7893 = $7895;break;case 'Maybe.none':var $7896 = Parser$Reply$error$($7892);var $7893 = $7896;break;};var $7891 = $7893;break;case 'Parser.Reply.value':var $7897=self.pst;var self = $7897;switch(self._){case 'Parser.State.new':var $7899=self.err;var $7900=self.nam;var $7901=self.ini;var $7902=self.idx;var $7903=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($7890,$7899),$7900,$7901,$7902,$7903);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $7905=self.err;var _reply$36 = Kind$Parser$do$statements$(_monad_name$1)(_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $7907=self.err;var self = $7905;switch(self._){case 'Maybe.some':var $7909=self.value;var $7910 = Parser$Reply$error$(Parser$Error$combine$($7909,$7907));var $7908 = $7910;break;case 'Maybe.none':var $7911 = Parser$Reply$error$($7907);var $7908 = $7911;break;};var $7906 = $7908;break;case 'Parser.Reply.value':var $7912=self.pst;var $7913=self.val;var self = $7912;switch(self._){case 'Parser.State.new':var $7915=self.err;var $7916=self.nam;var $7917=self.ini;var $7918=self.idx;var $7919=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($7905,$7915),$7916,$7917,$7918,$7919);var _term$45 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"),Kind$Term$ref$(_monad_name$1));var _term$46 = Kind$Term$app$(_term$45,Kind$Term$ref$((_monad_name$1+".monad")));var _term$47 = Kind$Term$app$(_term$46,Kind$Term$hol$(Bits$e));var _term$48 = Kind$Term$app$(_term$47,Kind$Term$hol$(Bits$e));var _term$49 = Kind$Term$app$(_term$48,$7882);var _term$50 = Kind$Term$app$(_term$49,Kind$Term$lam$("",(_x$50=>{var $7921 = $7913;return $7921;})));var $7920 = Parser$Reply$value$(_reply$pst$44,_term$50);var $7914 = $7920;break;};var $7906 = $7914;break;};var $7904 = $7906;break;};var $7898 = $7904;break;};var $7891 = $7898;break;};var $7889 = $7891;break;};var $7883 = $7889;break;};var $7875 = $7883;break;};var $7873 = $7875;break;};return $7873;})),List$cons$(Kind$Parser$block("do-end")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $7923=self.err;var _reply$8 = Kind$Parser$term(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $7925=self.err;var self = $7923;switch(self._){case 'Maybe.some':var $7927=self.value;var $7928 = Parser$Reply$error$(Parser$Error$combine$($7927,$7925));var $7926 = $7928;break;case 'Maybe.none':var $7929 = Parser$Reply$error$($7925);var $7926 = $7929;break;};var $7924 = $7926;break;case 'Parser.Reply.value':var $7930=self.pst;var $7931=self.val;var self = $7930;switch(self._){case 'Parser.State.new':var $7933=self.err;var $7934=self.nam;var $7935=self.ini;var $7936=self.idx;var $7937=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($7923,$7933),$7934,$7935,$7936,$7937);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $7939=self.err;var _reply$22 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $7941=self.err;var self = $7939;switch(self._){case 'Maybe.some':var $7943=self.value;var $7944 = Parser$Reply$error$(Parser$Error$combine$($7943,$7941));var $7942 = $7944;break;case 'Maybe.none':var $7945 = Parser$Reply$error$($7941);var $7942 = $7945;break;};var $7940 = $7942;break;case 'Parser.Reply.value':var $7946=self.pst;var self = $7946;switch(self._){case 'Parser.State.new':var $7948=self.err;var $7949=self.nam;var $7950=self.ini;var $7951=self.idx;var $7952=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($7939,$7948),$7949,$7950,$7951,$7952);var $7953 = Parser$Reply$value$(_reply$pst$30,$7931);var $7947 = $7953;break;};var $7940 = $7947;break;};var $7938 = $7940;break;};var $7932 = $7938;break;};var $7924 = $7932;break;};var $7922 = $7924;break;};return $7922;})),List$nil)))))))))))))))))))))))));return $7447;};
  const Kind$Parser$do$statements = x0=>Kind$Parser$do$statements$(x0);
  const Kind$Parser$do = Kind$Parser$block("do")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $7955=self.err;var _reply$7 = Parser$maybe$(Kind$Parser$text("do "),_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $7957=self.err;var self = $7955;switch(self._){case 'Maybe.some':var $7959=self.value;var $7960 = Parser$Reply$error$(Parser$Error$combine$($7959,$7957));var $7958 = $7960;break;case 'Maybe.none':var $7961 = Parser$Reply$error$($7957);var $7958 = $7961;break;};var $7956 = $7958;break;case 'Parser.Reply.value':var $7962=self.pst;var self = $7962;switch(self._){case 'Parser.State.new':var $7964=self.err;var $7965=self.nam;var $7966=self.ini;var $7967=self.idx;var $7968=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($7955,$7964),$7965,$7966,$7967,$7968);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $7970=self.err;var _reply$21 = Kind$Parser$name1$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $7972=self.err;var self = $7970;switch(self._){case 'Maybe.some':var $7974=self.value;var $7975 = Parser$Reply$error$(Parser$Error$combine$($7974,$7972));var $7973 = $7975;break;case 'Maybe.none':var $7976 = Parser$Reply$error$($7972);var $7973 = $7976;break;};var $7971 = $7973;break;case 'Parser.Reply.value':var $7977=self.pst;var $7978=self.val;var self = $7977;switch(self._){case 'Parser.State.new':var $7980=self.err;var $7981=self.nam;var $7982=self.ini;var $7983=self.idx;var $7984=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($7970,$7980),$7981,$7982,$7983,$7984);var self = String$is_upper$(String$slice$(0n,1n,$7978));if (self) {var $7986 = (_pst$30=>{var self = _pst$30;switch(self._){case 'Parser.State.new':var $7988=self.err;var _reply$36 = Parser$text$(" {",_pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $7990=self.err;var self = $7988;switch(self._){case 'Maybe.some':var $7992=self.value;var $7993 = Parser$Reply$error$(Parser$Error$combine$($7992,$7990));var $7991 = $7993;break;case 'Maybe.none':var $7994 = Parser$Reply$error$($7990);var $7991 = $7994;break;};var $7989 = $7991;break;case 'Parser.Reply.value':var $7995=self.pst;var self = $7995;switch(self._){case 'Parser.State.new':var $7997=self.err;var $7998=self.nam;var $7999=self.ini;var $8000=self.idx;var $8001=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($7988,$7997),$7998,$7999,$8000,$8001);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $8003=self.err;var _reply$50 = Kind$Parser$do$statements$($7978)(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $8005=self.err;var self = $8003;switch(self._){case 'Maybe.some':var $8007=self.value;var $8008 = Parser$Reply$error$(Parser$Error$combine$($8007,$8005));var $8006 = $8008;break;case 'Maybe.none':var $8009 = Parser$Reply$error$($8005);var $8006 = $8009;break;};var $8004 = $8006;break;case 'Parser.Reply.value':var $8010=self.pst;var $8011=self.val;var self = $8010;switch(self._){case 'Parser.State.new':var $8013=self.err;var $8014=self.nam;var $8015=self.ini;var $8016=self.idx;var $8017=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($8003,$8013),$8014,$8015,$8016,$8017);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $8019=self.err;var _reply$64 = Kind$Parser$text$("}",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $8021=self.err;var self = $8019;switch(self._){case 'Maybe.some':var $8023=self.value;var $8024 = Parser$Reply$error$(Parser$Error$combine$($8023,$8021));var $8022 = $8024;break;case 'Maybe.none':var $8025 = Parser$Reply$error$($8021);var $8022 = $8025;break;};var $8020 = $8022;break;case 'Parser.Reply.value':var $8026=self.pst;var self = $8026;switch(self._){case 'Parser.State.new':var $8028=self.err;var $8029=self.nam;var $8030=self.ini;var $8031=self.idx;var $8032=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($8019,$8028),$8029,$8030,$8031,$8032);var $8033 = Parser$Reply$value$(_reply$pst$72,$8011);var $8027 = $8033;break;};var $8020 = $8027;break;};var $8018 = $8020;break;};var $8012 = $8018;break;};var $8004 = $8012;break;};var $8002 = $8004;break;};var $7996 = $8002;break;};var $7989 = $7996;break;};var $7987 = $7989;break;};return $7987;});var $7985 = $7986;} else {var $8034 = Parser$fail("Not a do-block.");var $7985 = $8034;};var $7985 = $7985(_reply$pst$29);var $7979 = $7985;break;};var $7971 = $7979;break;};var $7969 = $7971;break;};var $7963 = $7969;break;};var $7956 = $7963;break;};var $7954 = $7956;break;};return $7954;}));
  function Kind$Term$extract_name$(_term$1){var _term$2 = Kind$Term$reduce$(_term$1,Kind$Map$new);var self = _term$2;switch(self._){case 'Kind.Term.var':var $8036=self.name;var $8037 = $8036;var $8035 = $8037;break;case 'Kind.Term.ref':var $8038=self.name;var $8039 = $8038;var $8035 = $8039;break;case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $8040 = "self";var $8035 = $8040;break;};return $8035;};
  const Kind$Term$extract_name = x0=>Kind$Term$extract_name$(x0);
  function Kind$Ann$new$(_name$1,_term$2,_type$3){var $8041 = ({_:'Kind.Ann.new','name':_name$1,'term':_term$2,'type':_type$3});return $8041;};
  const Kind$Ann$new = x0=>x1=>x2=>Kind$Ann$new$(x0,x1,x2);
  const Kind$Parser$case$with = Parser$choice(List$cons$((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $8043=self.err;var _reply$7 = Kind$Parser$text$("with ",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8045=self.err;var self = $8043;switch(self._){case 'Maybe.some':var $8047=self.value;var $8048 = Parser$Reply$error$(Parser$Error$combine$($8047,$8045));var $8046 = $8048;break;case 'Maybe.none':var $8049 = Parser$Reply$error$($8045);var $8046 = $8049;break;};var $8044 = $8046;break;case 'Parser.Reply.value':var $8050=self.pst;var self = $8050;switch(self._){case 'Parser.State.new':var $8052=self.err;var $8053=self.nam;var $8054=self.ini;var $8055=self.idx;var $8056=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8043,$8052),$8053,$8054,$8055,$8056);var $8057 = Parser$many$((_pst$16=>{var self = _pst$16;switch(self._){case 'Parser.State.new':var $8059=self.err;var _reply$22 = Kind$Parser$name1$(_pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $8061=self.err;var self = $8059;switch(self._){case 'Maybe.some':var $8063=self.value;var $8064 = Parser$Reply$error$(Parser$Error$combine$($8063,$8061));var $8062 = $8064;break;case 'Maybe.none':var $8065 = Parser$Reply$error$($8061);var $8062 = $8065;break;};var $8060 = $8062;break;case 'Parser.Reply.value':var $8066=self.pst;var $8067=self.val;var self = $8066;switch(self._){case 'Parser.State.new':var $8069=self.err;var $8070=self.nam;var $8071=self.ini;var $8072=self.idx;var $8073=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($8059,$8069),$8070,$8071,$8072,$8073);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $8075=self.err;var _reply$36 = Parser$maybe$((_pst$36=>{var self = _pst$36;switch(self._){case 'Parser.State.new':var $8078=self.err;var _reply$42 = Kind$Parser$text$(":",_pst$36);var self = _reply$42;switch(self._){case 'Parser.Reply.error':var $8080=self.err;var self = $8078;switch(self._){case 'Maybe.some':var $8082=self.value;var $8083 = Parser$Reply$error$(Parser$Error$combine$($8082,$8080));var $8081 = $8083;break;case 'Maybe.none':var $8084 = Parser$Reply$error$($8080);var $8081 = $8084;break;};var $8079 = $8081;break;case 'Parser.Reply.value':var $8085=self.pst;var self = $8085;switch(self._){case 'Parser.State.new':var $8087=self.err;var $8088=self.nam;var $8089=self.ini;var $8090=self.idx;var $8091=self.str;var _reply$pst$50 = Parser$State$new$(Parser$Error$maybe_combine$($8078,$8087),$8088,$8089,$8090,$8091);var self = _reply$pst$50;switch(self._){case 'Parser.State.new':var $8093=self.err;var _reply$56 = Kind$Parser$term(_reply$pst$50);var self = _reply$56;switch(self._){case 'Parser.Reply.error':var $8095=self.err;var self = $8093;switch(self._){case 'Maybe.some':var $8097=self.value;var $8098 = Parser$Reply$error$(Parser$Error$combine$($8097,$8095));var $8096 = $8098;break;case 'Maybe.none':var $8099 = Parser$Reply$error$($8095);var $8096 = $8099;break;};var $8094 = $8096;break;case 'Parser.Reply.value':var $8100=self.pst;var $8101=self.val;var self = $8100;switch(self._){case 'Parser.State.new':var $8103=self.err;var $8104=self.nam;var $8105=self.ini;var $8106=self.idx;var $8107=self.str;var _reply$pst$64 = Parser$State$new$(Parser$Error$maybe_combine$($8093,$8103),$8104,$8105,$8106,$8107);var self = _reply$pst$64;switch(self._){case 'Parser.State.new':var $8109=self.err;var _reply$70 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$64);var self = _reply$70;switch(self._){case 'Parser.Reply.error':var $8111=self.err;var self = $8109;switch(self._){case 'Maybe.some':var $8113=self.value;var $8114 = Parser$Reply$error$(Parser$Error$combine$($8113,$8111));var $8112 = $8114;break;case 'Maybe.none':var $8115 = Parser$Reply$error$($8111);var $8112 = $8115;break;};var $8110 = $8112;break;case 'Parser.Reply.value':var $8116=self.pst;var self = $8116;switch(self._){case 'Parser.State.new':var $8118=self.err;var $8119=self.nam;var $8120=self.ini;var $8121=self.idx;var $8122=self.str;var _reply$pst$78 = Parser$State$new$(Parser$Error$maybe_combine$($8109,$8118),$8119,$8120,$8121,$8122);var $8123 = Parser$Reply$value$(_reply$pst$78,$8101);var $8117 = $8123;break;};var $8110 = $8117;break;};var $8108 = $8110;break;};var $8102 = $8108;break;};var $8094 = $8102;break;};var $8092 = $8094;break;};var $8086 = $8092;break;};var $8079 = $8086;break;};var $8077 = $8079;break;};return $8077;}),_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $8124=self.err;var self = $8075;switch(self._){case 'Maybe.some':var $8126=self.value;var $8127 = Parser$Reply$error$(Parser$Error$combine$($8126,$8124));var $8125 = $8127;break;case 'Maybe.none':var $8128 = Parser$Reply$error$($8124);var $8125 = $8128;break;};var $8076 = $8125;break;case 'Parser.Reply.value':var $8129=self.pst;var $8130=self.val;var self = $8129;switch(self._){case 'Parser.State.new':var $8132=self.err;var $8133=self.nam;var $8134=self.ini;var $8135=self.idx;var $8136=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($8075,$8132),$8133,$8134,$8135,$8136);var $8137 = Parser$Reply$value$(_reply$pst$44,Kind$Ann$new$($8067,Kind$Term$ref$($8067),$8130));var $8131 = $8137;break;};var $8076 = $8131;break;};var $8074 = $8076;break;};var $8068 = $8074;break;};var $8060 = $8068;break;};var $8058 = $8060;break;};return $8058;}))(_reply$pst$15);var $8051 = $8057;break;};var $8044 = $8051;break;};var $8042 = $8044;break;};return $8042;}),List$cons$((_pst$1=>{var $8138 = Parser$Reply$value$(_pst$1,List$nil);return $8138;}),List$nil)));
  function Kind$Parser$case$case$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $8140=self.err;var _reply$7 = Parser$try$(Kind$Parser$text(":"),_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8142=self.err;var self = $8140;switch(self._){case 'Maybe.some':var $8144=self.value;var $8145 = Parser$Reply$error$(Parser$Error$combine$($8144,$8142));var $8143 = $8145;break;case 'Maybe.none':var $8146 = Parser$Reply$error$($8142);var $8143 = $8146;break;};var $8141 = $8143;break;case 'Parser.Reply.value':var $8147=self.pst;var $8148=self.val;var self = $8147;switch(self._){case 'Parser.State.new':var $8150=self.err;var $8151=self.nam;var $8152=self.ini;var $8153=self.idx;var $8154=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8140,$8150),$8151,$8152,$8153,$8154);var self = $8148;if (self) {var $8156 = (_pst$16=>{var self = _pst$16;switch(self._){case 'Parser.State.new':var $8158=self.err;var _reply$22 = Kind$Parser$spaces(_pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $8160=self.err;var self = $8158;switch(self._){case 'Maybe.some':var $8162=self.value;var $8163 = Parser$Reply$error$(Parser$Error$combine$($8162,$8160));var $8161 = $8163;break;case 'Maybe.none':var $8164 = Parser$Reply$error$($8160);var $8161 = $8164;break;};var $8159 = $8161;break;case 'Parser.Reply.value':var $8165=self.pst;var self = $8165;switch(self._){case 'Parser.State.new':var $8167=self.err;var $8168=self.nam;var $8169=self.ini;var $8170=self.idx;var $8171=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($8158,$8167),$8168,$8169,$8170,$8171);var $8172 = Parser$fail$("Expected constructor names.",_reply$pst$30);var $8166 = $8172;break;};var $8159 = $8166;break;};var $8157 = $8159;break;};return $8157;});var $8155 = $8156;} else {var $8173 = (_pst$16=>{var self = _pst$16;switch(self._){case 'Parser.State.new':var $8175=self.err;var _reply$22 = Parser$until$(Kind$Parser$text(":"),Kind$Parser$name1)(_pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $8177=self.err;var self = $8175;switch(self._){case 'Maybe.some':var $8179=self.value;var $8180 = Parser$Reply$error$(Parser$Error$combine$($8179,$8177));var $8178 = $8180;break;case 'Maybe.none':var $8181 = Parser$Reply$error$($8177);var $8178 = $8181;break;};var $8176 = $8178;break;case 'Parser.Reply.value':var $8182=self.pst;var $8183=self.val;var self = $8182;switch(self._){case 'Parser.State.new':var $8185=self.err;var $8186=self.nam;var $8187=self.ini;var $8188=self.idx;var $8189=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($8175,$8185),$8186,$8187,$8188,$8189);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $8191=self.err;var _reply$36 = Kind$Parser$term(_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $8193=self.err;var self = $8191;switch(self._){case 'Maybe.some':var $8195=self.value;var $8196 = Parser$Reply$error$(Parser$Error$combine$($8195,$8193));var $8194 = $8196;break;case 'Maybe.none':var $8197 = Parser$Reply$error$($8193);var $8194 = $8197;break;};var $8192 = $8194;break;case 'Parser.Reply.value':var $8198=self.pst;var $8199=self.val;var self = $8198;switch(self._){case 'Parser.State.new':var $8201=self.err;var $8202=self.nam;var $8203=self.ini;var $8204=self.idx;var $8205=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($8191,$8201),$8202,$8203,$8204,$8205);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $8207=self.err;var _reply$50 = Parser$maybe$(Kind$Parser$text(","),_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $8209=self.err;var self = $8207;switch(self._){case 'Maybe.some':var $8211=self.value;var $8212 = Parser$Reply$error$(Parser$Error$combine$($8211,$8209));var $8210 = $8212;break;case 'Maybe.none':var $8213 = Parser$Reply$error$($8209);var $8210 = $8213;break;};var $8208 = $8210;break;case 'Parser.Reply.value':var $8214=self.pst;var self = $8214;switch(self._){case 'Parser.State.new':var $8216=self.err;var $8217=self.nam;var $8218=self.ini;var $8219=self.idx;var $8220=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($8207,$8216),$8217,$8218,$8219,$8220);var $8221 = Parser$Reply$value$(_reply$pst$58,Pair$new$($8183,$8199));var $8215 = $8221;break;};var $8208 = $8215;break;};var $8206 = $8208;break;};var $8200 = $8206;break;};var $8192 = $8200;break;};var $8190 = $8192;break;};var $8184 = $8190;break;};var $8176 = $8184;break;};var $8174 = $8176;break;};return $8174;});var $8155 = $8173;};var $8155 = $8155(_reply$pst$15);var $8149 = $8155;break;};var $8141 = $8149;break;};var $8139 = $8141;break;};return $8139;};
  const Kind$Parser$case$case = x0=>Kind$Parser$case$case$(x0);
  function Parser$append_error$(_parse$2,_msg$3,_pst$4){var _reply$5 = _parse$2(_pst$4);var self = _reply$5;switch(self._){case 'Parser.Reply.error':var $8223=self.err;var self = $8223;switch(self._){case 'Parser.Error.new':var $8225=self.nam;var $8226=self.ini;var $8227=self.idx;var $8228=self.msg;var $8229 = Parser$Reply$fail$($8225,$8226,$8227,($8228+_msg$3));var $8224 = $8229;break;};var $8222 = $8224;break;case 'Parser.Reply.value':var $8230 = _reply$5;var $8222 = $8230;break;};return $8222;};
  const Parser$append_error = x0=>x1=>x2=>Parser$append_error$(x0,x1,x2);
  function Kind$Parser$case$group$(_dflt$1,_cses$2){var self = _cses$2;switch(self._){case 'List.cons':var $8232=self.head;var $8233=self.tail;var _map$5 = Kind$Parser$case$group$(_dflt$1,$8233);var self = $8232;switch(self._){case 'Pair.new':var $8235=self.fst;var $8236=self.snd;var self = $8235;switch(self._){case 'List.cons':var $8238=self.head;var $8239=self.tail;var _rest$10 = Maybe$default$(Kind$Map$get$($8238,_map$5),List$nil);var $8240 = Kind$Map$set$($8238,List$cons$(Pair$new$($8239,$8236),_rest$10),_map$5);var $8237 = $8240;break;case 'List.nil':var $8241 = _map$5;var $8237 = $8241;break;};var $8234 = $8237;break;};var $8231 = $8234;break;case 'List.nil':var self = _dflt$1;switch(self._){case 'Maybe.some':var $8243=self.value;var $8244 = Kind$Map$set$("_",List$cons$(Pair$new$(List$nil,$8243),List$nil),Kind$Map$new);var $8242 = $8244;break;case 'Maybe.none':var $8245 = Kind$Map$new;var $8242 = $8245;break;};var $8231 = $8242;break;};return $8231;};
  const Kind$Parser$case$group = x0=>x1=>Kind$Parser$case$group$(x0,x1);
  function BitsMap$map$(_fn$3,_map$4){var self = _map$4;switch(self._){case 'BitsMap.tie':var $8247=self.val;var $8248=self.lft;var $8249=self.rgt;var self = $8247;switch(self._){case 'Maybe.some':var $8251=self.value;var $8252 = Maybe$some$(_fn$3($8251));var _val$8 = $8252;break;case 'Maybe.none':var $8253 = Maybe$none;var _val$8 = $8253;break;};var _lft$9 = BitsMap$map$(_fn$3,$8248);var _rgt$10 = BitsMap$map$(_fn$3,$8249);var $8250 = BitsMap$tie$(_val$8,_lft$9,_rgt$10);var $8246 = $8250;break;case 'BitsMap.new':var $8254 = BitsMap$new;var $8246 = $8254;break;};return $8246;};
  const BitsMap$map = x0=>x1=>BitsMap$map$(x0,x1);
  function Kind$Map$map$(_fn$3,_map$4){var $8255 = BitsMap$map$(_fn$3,_map$4);return $8255;};
  const Kind$Map$map = x0=>x1=>Kind$Map$map$(x0,x1);
  function Kind$Parser$case$build$(_vals$1,_wyth$2,_cses$3,_dflt$4,_moti$5){var self = _vals$1;switch(self._){case 'List.cons':var $8257=self.head;var $8258=self.tail;var _group$8 = Kind$Parser$case$group$(_dflt$4,_cses$3);var _name$9 = Pair$fst$($8257);var _expr$10 = Pair$snd$($8257);var _cses$11 = Kind$Map$map$((_cses$11=>{var $8260 = Kind$Parser$case$build$($8258,_wyth$2,_cses$11,_dflt$4,_moti$5);return $8260;}),_group$8);var $8259 = Kind$Term$cse$(Bits$e,_expr$10,_name$9,_wyth$2,_cses$11,_moti$5);var $8256 = $8259;break;case 'List.nil':var self = _cses$3;switch(self._){case 'List.cons':var $8262=self.head;var $8263 = Pair$snd$($8262);var $8261 = $8263;break;case 'List.nil':var $8264 = Kind$Term$ref$("missing_case");var $8261 = $8264;break;};var $8256 = $8261;break;};return $8256;};
  const Kind$Parser$case$build = x0=>x1=>x2=>x3=>x4=>Kind$Parser$case$build$(x0,x1,x2,x3,x4);
  const Kind$Parser$case = Kind$Parser$block("case")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $8266=self.err;var _reply$7 = Kind$Parser$text$("case ",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8268=self.err;var self = $8266;switch(self._){case 'Maybe.some':var $8270=self.value;var $8271 = Parser$Reply$error$(Parser$Error$combine$($8270,$8268));var $8269 = $8271;break;case 'Maybe.none':var $8272 = Parser$Reply$error$($8268);var $8269 = $8272;break;};var $8267 = $8269;break;case 'Parser.Reply.value':var $8273=self.pst;var self = $8273;switch(self._){case 'Parser.State.new':var $8275=self.err;var $8276=self.nam;var $8277=self.ini;var $8278=self.idx;var $8279=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8266,$8275),$8276,$8277,$8278,$8279);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $8281=self.err;var _reply$21 = Parser$many1$((_pst$21=>{var self = _pst$21;switch(self._){case 'Parser.State.new':var $8284=self.err;var _reply$27 = Parser$avoiding$(Kind$Parser$text("{"),Kind$Parser$term,_pst$21);var self = _reply$27;switch(self._){case 'Parser.Reply.error':var $8286=self.err;var self = $8284;switch(self._){case 'Maybe.some':var $8288=self.value;var $8289 = Parser$Reply$error$(Parser$Error$combine$($8288,$8286));var $8287 = $8289;break;case 'Maybe.none':var $8290 = Parser$Reply$error$($8286);var $8287 = $8290;break;};var $8285 = $8287;break;case 'Parser.Reply.value':var $8291=self.pst;var $8292=self.val;var self = $8291;switch(self._){case 'Parser.State.new':var $8294=self.err;var $8295=self.nam;var $8296=self.ini;var $8297=self.idx;var $8298=self.str;var _reply$pst$35 = Parser$State$new$(Parser$Error$maybe_combine$($8284,$8294),$8295,$8296,$8297,$8298);var self = _reply$pst$35;switch(self._){case 'Parser.State.new':var $8300=self.err;var _reply$41 = Parser$maybe$((_pst$41=>{var self = _pst$41;switch(self._){case 'Parser.State.new':var $8303=self.err;var _reply$47 = Kind$Parser$text$("as",_pst$41);var self = _reply$47;switch(self._){case 'Parser.Reply.error':var $8305=self.err;var self = $8303;switch(self._){case 'Maybe.some':var $8307=self.value;var $8308 = Parser$Reply$error$(Parser$Error$combine$($8307,$8305));var $8306 = $8308;break;case 'Maybe.none':var $8309 = Parser$Reply$error$($8305);var $8306 = $8309;break;};var $8304 = $8306;break;case 'Parser.Reply.value':var $8310=self.pst;var self = $8310;switch(self._){case 'Parser.State.new':var $8312=self.err;var $8313=self.nam;var $8314=self.ini;var $8315=self.idx;var $8316=self.str;var _reply$pst$55 = Parser$State$new$(Parser$Error$maybe_combine$($8303,$8312),$8313,$8314,$8315,$8316);var self = _reply$pst$55;switch(self._){case 'Parser.State.new':var $8318=self.err;var _reply$61 = Kind$Parser$name1$(_reply$pst$55);var self = _reply$61;switch(self._){case 'Parser.Reply.error':var $8320=self.err;var self = $8318;switch(self._){case 'Maybe.some':var $8322=self.value;var $8323 = Parser$Reply$error$(Parser$Error$combine$($8322,$8320));var $8321 = $8323;break;case 'Maybe.none':var $8324 = Parser$Reply$error$($8320);var $8321 = $8324;break;};var $8319 = $8321;break;case 'Parser.Reply.value':var $8325=self.pst;var $8326=self.val;var self = $8325;switch(self._){case 'Parser.State.new':var $8328=self.err;var $8329=self.nam;var $8330=self.ini;var $8331=self.idx;var $8332=self.str;var _reply$pst$69 = Parser$State$new$(Parser$Error$maybe_combine$($8318,$8328),$8329,$8330,$8331,$8332);var self = _reply$pst$69;switch(self._){case 'Parser.State.new':var $8334=self.err;var _reply$75 = Parser$maybe$(Kind$Parser$text(";"),_reply$pst$69);var self = _reply$75;switch(self._){case 'Parser.Reply.error':var $8336=self.err;var self = $8334;switch(self._){case 'Maybe.some':var $8338=self.value;var $8339 = Parser$Reply$error$(Parser$Error$combine$($8338,$8336));var $8337 = $8339;break;case 'Maybe.none':var $8340 = Parser$Reply$error$($8336);var $8337 = $8340;break;};var $8335 = $8337;break;case 'Parser.Reply.value':var $8341=self.pst;var self = $8341;switch(self._){case 'Parser.State.new':var $8343=self.err;var $8344=self.nam;var $8345=self.ini;var $8346=self.idx;var $8347=self.str;var _reply$pst$83 = Parser$State$new$(Parser$Error$maybe_combine$($8334,$8343),$8344,$8345,$8346,$8347);var $8348 = Parser$Reply$value$(_reply$pst$83,$8326);var $8342 = $8348;break;};var $8335 = $8342;break;};var $8333 = $8335;break;};var $8327 = $8333;break;};var $8319 = $8327;break;};var $8317 = $8319;break;};var $8311 = $8317;break;};var $8304 = $8311;break;};var $8302 = $8304;break;};return $8302;}),_reply$pst$35);var self = _reply$41;switch(self._){case 'Parser.Reply.error':var $8349=self.err;var self = $8300;switch(self._){case 'Maybe.some':var $8351=self.value;var $8352 = Parser$Reply$error$(Parser$Error$combine$($8351,$8349));var $8350 = $8352;break;case 'Maybe.none':var $8353 = Parser$Reply$error$($8349);var $8350 = $8353;break;};var $8301 = $8350;break;case 'Parser.Reply.value':var $8354=self.pst;var $8355=self.val;var self = $8354;switch(self._){case 'Parser.State.new':var $8357=self.err;var $8358=self.nam;var $8359=self.ini;var $8360=self.idx;var $8361=self.str;var _reply$pst$49 = Parser$State$new$(Parser$Error$maybe_combine$($8300,$8357),$8358,$8359,$8360,$8361);var _name$50 = Maybe$default$($8355,Kind$Term$extract_name$($8292));var $8362 = Parser$Reply$value$(_reply$pst$49,Pair$new$(_name$50,$8292));var $8356 = $8362;break;};var $8301 = $8356;break;};var $8299 = $8301;break;};var $8293 = $8299;break;};var $8285 = $8293;break;};var $8283 = $8285;break;};return $8283;}),_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $8363=self.err;var self = $8281;switch(self._){case 'Maybe.some':var $8365=self.value;var $8366 = Parser$Reply$error$(Parser$Error$combine$($8365,$8363));var $8364 = $8366;break;case 'Maybe.none':var $8367 = Parser$Reply$error$($8363);var $8364 = $8367;break;};var $8282 = $8364;break;case 'Parser.Reply.value':var $8368=self.pst;var $8369=self.val;var self = $8368;switch(self._){case 'Parser.State.new':var $8371=self.err;var $8372=self.nam;var $8373=self.ini;var $8374=self.idx;var $8375=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($8281,$8371),$8372,$8373,$8374,$8375);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $8377=self.err;var _reply$35 = Kind$Parser$case$with(_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $8379=self.err;var self = $8377;switch(self._){case 'Maybe.some':var $8381=self.value;var $8382 = Parser$Reply$error$(Parser$Error$combine$($8381,$8379));var $8380 = $8382;break;case 'Maybe.none':var $8383 = Parser$Reply$error$($8379);var $8380 = $8383;break;};var $8378 = $8380;break;case 'Parser.Reply.value':var $8384=self.pst;var $8385=self.val;var self = $8384;switch(self._){case 'Parser.State.new':var $8387=self.err;var $8388=self.nam;var $8389=self.ini;var $8390=self.idx;var $8391=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($8377,$8387),$8388,$8389,$8390,$8391);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $8393=self.err;var _reply$49 = Kind$Parser$items$("{",Kind$Parser$case$case,"}")(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $8395=self.err;var self = $8393;switch(self._){case 'Maybe.some':var $8397=self.value;var $8398 = Parser$Reply$error$(Parser$Error$combine$($8397,$8395));var $8396 = $8398;break;case 'Maybe.none':var $8399 = Parser$Reply$error$($8395);var $8396 = $8399;break;};var $8394 = $8396;break;case 'Parser.Reply.value':var $8400=self.pst;var $8401=self.val;var self = $8400;switch(self._){case 'Parser.State.new':var $8403=self.err;var $8404=self.nam;var $8405=self.ini;var $8406=self.idx;var $8407=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($8393,$8403),$8404,$8405,$8406,$8407);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $8409=self.err;var _reply$63 = Parser$maybe$(Kind$Parser$text("!"),_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $8411=self.err;var self = $8409;switch(self._){case 'Maybe.some':var $8413=self.value;var $8414 = Parser$Reply$error$(Parser$Error$combine$($8413,$8411));var $8412 = $8414;break;case 'Maybe.none':var $8415 = Parser$Reply$error$($8411);var $8412 = $8415;break;};var $8410 = $8412;break;case 'Parser.Reply.value':var $8416=self.pst;var $8417=self.val;var self = $8416;switch(self._){case 'Parser.State.new':var $8419=self.err;var $8420=self.nam;var $8421=self.ini;var $8422=self.idx;var $8423=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($8409,$8419),$8420,$8421,$8422,$8423);var self = _reply$pst$71;switch(self._){case 'Parser.State.new':var $8425=self.err;var _reply$77 = Parser$maybe$((_pst$77=>{var self = _pst$77;switch(self._){case 'Parser.State.new':var $8428=self.err;var _reply$83 = Kind$Parser$text$("default",_pst$77);var self = _reply$83;switch(self._){case 'Parser.Reply.error':var $8430=self.err;var self = $8428;switch(self._){case 'Maybe.some':var $8432=self.value;var $8433 = Parser$Reply$error$(Parser$Error$combine$($8432,$8430));var $8431 = $8433;break;case 'Maybe.none':var $8434 = Parser$Reply$error$($8430);var $8431 = $8434;break;};var $8429 = $8431;break;case 'Parser.Reply.value':var $8435=self.pst;var self = $8435;switch(self._){case 'Parser.State.new':var $8437=self.err;var $8438=self.nam;var $8439=self.ini;var $8440=self.idx;var $8441=self.str;var _reply$pst$91 = Parser$State$new$(Parser$Error$maybe_combine$($8428,$8437),$8438,$8439,$8440,$8441);var self = _reply$pst$91;switch(self._){case 'Parser.State.new':var $8443=self.err;var _reply$97 = Kind$Parser$term(_reply$pst$91);var self = _reply$97;switch(self._){case 'Parser.Reply.error':var $8445=self.err;var self = $8443;switch(self._){case 'Maybe.some':var $8447=self.value;var $8448 = Parser$Reply$error$(Parser$Error$combine$($8447,$8445));var $8446 = $8448;break;case 'Maybe.none':var $8449 = Parser$Reply$error$($8445);var $8446 = $8449;break;};var $8444 = $8446;break;case 'Parser.Reply.value':var $8450=self.pst;var $8451=self.val;var self = $8450;switch(self._){case 'Parser.State.new':var $8453=self.err;var $8454=self.nam;var $8455=self.ini;var $8456=self.idx;var $8457=self.str;var _reply$pst$105 = Parser$State$new$(Parser$Error$maybe_combine$($8443,$8453),$8454,$8455,$8456,$8457);var $8458 = Parser$Reply$value$(_reply$pst$105,$8451);var $8452 = $8458;break;};var $8444 = $8452;break;};var $8442 = $8444;break;};var $8436 = $8442;break;};var $8429 = $8436;break;};var $8427 = $8429;break;};return $8427;}),_reply$pst$71);var self = _reply$77;switch(self._){case 'Parser.Reply.error':var $8459=self.err;var self = $8425;switch(self._){case 'Maybe.some':var $8461=self.value;var $8462 = Parser$Reply$error$(Parser$Error$combine$($8461,$8459));var $8460 = $8462;break;case 'Maybe.none':var $8463 = Parser$Reply$error$($8459);var $8460 = $8463;break;};var $8426 = $8460;break;case 'Parser.Reply.value':var $8464=self.pst;var $8465=self.val;var self = $8464;switch(self._){case 'Parser.State.new':var $8467=self.err;var $8468=self.nam;var $8469=self.ini;var $8470=self.idx;var $8471=self.str;var _reply$pst$85 = Parser$State$new$(Parser$Error$maybe_combine$($8425,$8467),$8468,$8469,$8470,$8471);var self = _reply$pst$85;switch(self._){case 'Parser.State.new':var $8473=self.err;var _reply$91 = Parser$maybe$((_pst$91=>{var self = _pst$91;switch(self._){case 'Parser.State.new':var $8476=self.err;var _reply$97 = Kind$Parser$text$(":",_pst$91);var self = _reply$97;switch(self._){case 'Parser.Reply.error':var $8478=self.err;var self = $8476;switch(self._){case 'Maybe.some':var $8480=self.value;var $8481 = Parser$Reply$error$(Parser$Error$combine$($8480,$8478));var $8479 = $8481;break;case 'Maybe.none':var $8482 = Parser$Reply$error$($8478);var $8479 = $8482;break;};var $8477 = $8479;break;case 'Parser.Reply.value':var $8483=self.pst;var self = $8483;switch(self._){case 'Parser.State.new':var $8485=self.err;var $8486=self.nam;var $8487=self.ini;var $8488=self.idx;var $8489=self.str;var _reply$pst$105 = Parser$State$new$(Parser$Error$maybe_combine$($8476,$8485),$8486,$8487,$8488,$8489);var $8490 = Parser$append_error$(Kind$Parser$term,"\u{a}Inside motive.",_reply$pst$105);var $8484 = $8490;break;};var $8477 = $8484;break;};var $8475 = $8477;break;};return $8475;}),_reply$pst$85);var self = _reply$91;switch(self._){case 'Parser.Reply.error':var $8491=self.err;var self = $8473;switch(self._){case 'Maybe.some':var $8493=self.value;var $8494 = Parser$Reply$error$(Parser$Error$combine$($8493,$8491));var $8492 = $8494;break;case 'Maybe.none':var $8495 = Parser$Reply$error$($8491);var $8492 = $8495;break;};var $8474 = $8492;break;case 'Parser.Reply.value':var $8496=self.pst;var $8497=self.val;var self = $8496;switch(self._){case 'Parser.State.new':var $8499=self.err;var $8500=self.nam;var $8501=self.ini;var $8502=self.idx;var $8503=self.str;var _reply$pst$99 = Parser$State$new$(Parser$Error$maybe_combine$($8473,$8499),$8500,$8501,$8502,$8503);var self = $8497;switch(self._){case 'Maybe.some':var $8505=self.value;var $8506 = Maybe$some$($8505);var _moti$100 = $8506;break;case 'Maybe.none':var self = $8417;switch(self._){case 'Maybe.none':var $8508 = Maybe$some$(Kind$Term$hol$(Bits$e));var $8507 = $8508;break;case 'Maybe.some':var $8509 = Maybe$none;var $8507 = $8509;break;};var _moti$100 = $8507;break;};var $8504 = Parser$Reply$value$(_reply$pst$99,Kind$Parser$case$build$($8369,$8385,$8401,$8465,_moti$100));var $8498 = $8504;break;};var $8474 = $8498;break;};var $8472 = $8474;break;};var $8466 = $8472;break;};var $8426 = $8466;break;};var $8424 = $8426;break;};var $8418 = $8424;break;};var $8410 = $8418;break;};var $8408 = $8410;break;};var $8402 = $8408;break;};var $8394 = $8402;break;};var $8392 = $8394;break;};var $8386 = $8392;break;};var $8378 = $8386;break;};var $8376 = $8378;break;};var $8370 = $8376;break;};var $8282 = $8370;break;};var $8280 = $8282;break;};var $8274 = $8280;break;};var $8267 = $8274;break;};var $8265 = $8267;break;};return $8265;}));
  const Kind$Parser$without = Kind$Parser$block("without")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $8511=self.err;var _reply$7 = Kind$Parser$text$("without ",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8513=self.err;var self = $8511;switch(self._){case 'Maybe.some':var $8515=self.value;var $8516 = Parser$Reply$error$(Parser$Error$combine$($8515,$8513));var $8514 = $8516;break;case 'Maybe.none':var $8517 = Parser$Reply$error$($8513);var $8514 = $8517;break;};var $8512 = $8514;break;case 'Parser.Reply.value':var $8518=self.pst;var self = $8518;switch(self._){case 'Parser.State.new':var $8520=self.err;var $8521=self.nam;var $8522=self.ini;var $8523=self.idx;var $8524=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8511,$8520),$8521,$8522,$8523,$8524);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $8526=self.err;var _reply$21 = Kind$Parser$name1$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $8528=self.err;var self = $8526;switch(self._){case 'Maybe.some':var $8530=self.value;var $8531 = Parser$Reply$error$(Parser$Error$combine$($8530,$8528));var $8529 = $8531;break;case 'Maybe.none':var $8532 = Parser$Reply$error$($8528);var $8529 = $8532;break;};var $8527 = $8529;break;case 'Parser.Reply.value':var $8533=self.pst;var $8534=self.val;var self = $8533;switch(self._){case 'Parser.State.new':var $8536=self.err;var $8537=self.nam;var $8538=self.ini;var $8539=self.idx;var $8540=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($8526,$8536),$8537,$8538,$8539,$8540);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $8542=self.err;var _reply$35 = Kind$Parser$text$(":",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $8544=self.err;var self = $8542;switch(self._){case 'Maybe.some':var $8546=self.value;var $8547 = Parser$Reply$error$(Parser$Error$combine$($8546,$8544));var $8545 = $8547;break;case 'Maybe.none':var $8548 = Parser$Reply$error$($8544);var $8545 = $8548;break;};var $8543 = $8545;break;case 'Parser.Reply.value':var $8549=self.pst;var self = $8549;switch(self._){case 'Parser.State.new':var $8551=self.err;var $8552=self.nam;var $8553=self.ini;var $8554=self.idx;var $8555=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($8542,$8551),$8552,$8553,$8554,$8555);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $8557=self.err;var _reply$49 = Kind$Parser$term(_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $8559=self.err;var self = $8557;switch(self._){case 'Maybe.some':var $8561=self.value;var $8562 = Parser$Reply$error$(Parser$Error$combine$($8561,$8559));var $8560 = $8562;break;case 'Maybe.none':var $8563 = Parser$Reply$error$($8559);var $8560 = $8563;break;};var $8558 = $8560;break;case 'Parser.Reply.value':var $8564=self.pst;var $8565=self.val;var self = $8564;switch(self._){case 'Parser.State.new':var $8567=self.err;var $8568=self.nam;var $8569=self.ini;var $8570=self.idx;var $8571=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($8557,$8567),$8568,$8569,$8570,$8571);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $8573=self.err;var _reply$63 = Kind$Parser$term(_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $8575=self.err;var self = $8573;switch(self._){case 'Maybe.some':var $8577=self.value;var $8578 = Parser$Reply$error$(Parser$Error$combine$($8577,$8575));var $8576 = $8578;break;case 'Maybe.none':var $8579 = Parser$Reply$error$($8575);var $8576 = $8579;break;};var $8574 = $8576;break;case 'Parser.Reply.value':var $8580=self.pst;var $8581=self.val;var self = $8580;switch(self._){case 'Parser.State.new':var $8583=self.err;var $8584=self.nam;var $8585=self.ini;var $8586=self.idx;var $8587=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($8573,$8583),$8584,$8585,$8586,$8587);var _term$72 = Kind$Term$ref$($8534);var _term$73 = Kind$Term$app$(_term$72,Kind$Term$lam$("",(_x$73=>{var $8589 = Kind$Term$hol$(Bits$e);return $8589;})));var _term$74 = Kind$Term$app$(_term$73,$8565);var _term$75 = Kind$Term$app$(_term$74,Kind$Term$lam$($8534,(_x$75=>{var $8590 = $8581;return $8590;})));var $8588 = Parser$Reply$value$(_reply$pst$71,_term$75);var $8582 = $8588;break;};var $8574 = $8582;break;};var $8572 = $8574;break;};var $8566 = $8572;break;};var $8558 = $8566;break;};var $8556 = $8558;break;};var $8550 = $8556;break;};var $8543 = $8550;break;};var $8541 = $8543;break;};var $8535 = $8541;break;};var $8527 = $8535;break;};var $8525 = $8527;break;};var $8519 = $8525;break;};var $8512 = $8519;break;};var $8510 = $8512;break;};return $8510;}));
  function Kind$Parser$switch$case$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $8592=self.err;var _reply$7 = Kind$Parser$term(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8594=self.err;var self = $8592;switch(self._){case 'Maybe.some':var $8596=self.value;var $8597 = Parser$Reply$error$(Parser$Error$combine$($8596,$8594));var $8595 = $8597;break;case 'Maybe.none':var $8598 = Parser$Reply$error$($8594);var $8595 = $8598;break;};var $8593 = $8595;break;case 'Parser.Reply.value':var $8599=self.pst;var $8600=self.val;var self = $8599;switch(self._){case 'Parser.State.new':var $8602=self.err;var $8603=self.nam;var $8604=self.ini;var $8605=self.idx;var $8606=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8592,$8602),$8603,$8604,$8605,$8606);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $8608=self.err;var _reply$21 = Kind$Parser$text$(":",_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $8610=self.err;var self = $8608;switch(self._){case 'Maybe.some':var $8612=self.value;var $8613 = Parser$Reply$error$(Parser$Error$combine$($8612,$8610));var $8611 = $8613;break;case 'Maybe.none':var $8614 = Parser$Reply$error$($8610);var $8611 = $8614;break;};var $8609 = $8611;break;case 'Parser.Reply.value':var $8615=self.pst;var self = $8615;switch(self._){case 'Parser.State.new':var $8617=self.err;var $8618=self.nam;var $8619=self.ini;var $8620=self.idx;var $8621=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($8608,$8617),$8618,$8619,$8620,$8621);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $8623=self.err;var _reply$35 = Kind$Parser$term(_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $8625=self.err;var self = $8623;switch(self._){case 'Maybe.some':var $8627=self.value;var $8628 = Parser$Reply$error$(Parser$Error$combine$($8627,$8625));var $8626 = $8628;break;case 'Maybe.none':var $8629 = Parser$Reply$error$($8625);var $8626 = $8629;break;};var $8624 = $8626;break;case 'Parser.Reply.value':var $8630=self.pst;var $8631=self.val;var self = $8630;switch(self._){case 'Parser.State.new':var $8633=self.err;var $8634=self.nam;var $8635=self.ini;var $8636=self.idx;var $8637=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($8623,$8633),$8634,$8635,$8636,$8637);var $8638 = Parser$Reply$value$(_reply$pst$43,Pair$new$($8600,$8631));var $8632 = $8638;break;};var $8624 = $8632;break;};var $8622 = $8624;break;};var $8616 = $8622;break;};var $8609 = $8616;break;};var $8607 = $8609;break;};var $8601 = $8607;break;};var $8593 = $8601;break;};var $8591 = $8593;break;};return $8591;};
  const Kind$Parser$switch$case = x0=>Kind$Parser$switch$case$(x0);
  const Kind$Parser$switch = Kind$Parser$block("switch")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $8640=self.err;var _reply$7 = Kind$Parser$text$("switch",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8642=self.err;var self = $8640;switch(self._){case 'Maybe.some':var $8644=self.value;var $8645 = Parser$Reply$error$(Parser$Error$combine$($8644,$8642));var $8643 = $8645;break;case 'Maybe.none':var $8646 = Parser$Reply$error$($8642);var $8643 = $8646;break;};var $8641 = $8643;break;case 'Parser.Reply.value':var $8647=self.pst;var self = $8647;switch(self._){case 'Parser.State.new':var $8649=self.err;var $8650=self.nam;var $8651=self.ini;var $8652=self.idx;var $8653=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8640,$8649),$8650,$8651,$8652,$8653);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $8655=self.err;var _reply$21 = Kind$Parser$term(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $8657=self.err;var self = $8655;switch(self._){case 'Maybe.some':var $8659=self.value;var $8660 = Parser$Reply$error$(Parser$Error$combine$($8659,$8657));var $8658 = $8660;break;case 'Maybe.none':var $8661 = Parser$Reply$error$($8657);var $8658 = $8661;break;};var $8656 = $8658;break;case 'Parser.Reply.value':var $8662=self.pst;var $8663=self.val;var self = $8662;switch(self._){case 'Parser.State.new':var $8665=self.err;var $8666=self.nam;var $8667=self.ini;var $8668=self.idx;var $8669=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($8655,$8665),$8666,$8667,$8668,$8669);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $8671=self.err;var _reply$35 = Kind$Parser$items$("{",Kind$Parser$switch$case,"}")(_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $8673=self.err;var self = $8671;switch(self._){case 'Maybe.some':var $8675=self.value;var $8676 = Parser$Reply$error$(Parser$Error$combine$($8675,$8673));var $8674 = $8676;break;case 'Maybe.none':var $8677 = Parser$Reply$error$($8673);var $8674 = $8677;break;};var $8672 = $8674;break;case 'Parser.Reply.value':var $8678=self.pst;var $8679=self.val;var self = $8678;switch(self._){case 'Parser.State.new':var $8681=self.err;var $8682=self.nam;var $8683=self.ini;var $8684=self.idx;var $8685=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($8671,$8681),$8682,$8683,$8684,$8685);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $8687=self.err;var _reply$49 = Kind$Parser$text$("default",_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $8689=self.err;var self = $8687;switch(self._){case 'Maybe.some':var $8691=self.value;var $8692 = Parser$Reply$error$(Parser$Error$combine$($8691,$8689));var $8690 = $8692;break;case 'Maybe.none':var $8693 = Parser$Reply$error$($8689);var $8690 = $8693;break;};var $8688 = $8690;break;case 'Parser.Reply.value':var $8694=self.pst;var self = $8694;switch(self._){case 'Parser.State.new':var $8696=self.err;var $8697=self.nam;var $8698=self.ini;var $8699=self.idx;var $8700=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($8687,$8696),$8697,$8698,$8699,$8700);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $8702=self.err;var _reply$63 = Kind$Parser$term(_reply$pst$57);var self = _reply$63;switch(self._){case 'Parser.Reply.error':var $8704=self.err;var self = $8702;switch(self._){case 'Maybe.some':var $8706=self.value;var $8707 = Parser$Reply$error$(Parser$Error$combine$($8706,$8704));var $8705 = $8707;break;case 'Maybe.none':var $8708 = Parser$Reply$error$($8704);var $8705 = $8708;break;};var $8703 = $8705;break;case 'Parser.Reply.value':var $8709=self.pst;var $8710=self.val;var self = $8709;switch(self._){case 'Parser.State.new':var $8712=self.err;var $8713=self.nam;var $8714=self.ini;var $8715=self.idx;var $8716=self.str;var _reply$pst$71 = Parser$State$new$(Parser$Error$maybe_combine$($8702,$8712),$8713,$8714,$8715,$8716);var _term$72 = List$fold$($8679,$8710,(_cse$72=>_rest$73=>{var self = _cse$72;switch(self._){case 'Pair.new':var $8719=self.fst;var $8720=self.snd;var _term$76 = Kind$Term$app$($8663,$8719);var _term$77 = Kind$Term$app$(_term$76,Kind$Term$lam$("",(_x$77=>{var $8722 = Kind$Term$hol$(Bits$e);return $8722;})));var _term$78 = Kind$Term$app$(_term$77,$8720);var _term$79 = Kind$Term$app$(_term$78,_rest$73);var $8721 = _term$79;var $8718 = $8721;break;};return $8718;}));var $8717 = Parser$Reply$value$(_reply$pst$71,_term$72);var $8711 = $8717;break;};var $8703 = $8711;break;};var $8701 = $8703;break;};var $8695 = $8701;break;};var $8688 = $8695;break;};var $8686 = $8688;break;};var $8680 = $8686;break;};var $8672 = $8680;break;};var $8670 = $8672;break;};var $8664 = $8670;break;};var $8656 = $8664;break;};var $8654 = $8656;break;};var $8648 = $8654;break;};var $8641 = $8648;break;};var $8639 = $8641;break;};return $8639;}));
  function Bits$tail$(_a$1){var self = _a$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $8724=self.slice(0,-1);var $8725 = $8724;var $8723 = $8725;break;case 'i':var $8726=self.slice(0,-1);var $8727 = $8726;var $8723 = $8727;break;case 'e':var $8728 = Bits$e;var $8723 = $8728;break;};return $8723;};
  const Bits$tail = x0=>Bits$tail$(x0);
  function Bits$inc$(_a$1){var self = _a$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $8730=self.slice(0,-1);var $8731 = ($8730+'1');var $8729 = $8731;break;case 'i':var $8732=self.slice(0,-1);var $8733 = (Bits$inc$($8732)+'0');var $8729 = $8733;break;case 'e':var $8734 = (Bits$e+'1');var $8729 = $8734;break;};return $8729;};
  const Bits$inc = x0=>Bits$inc$(x0);
  const Nat$to_bits = a0=>(nat_to_bits(a0));
  function Maybe$is_some$(_m$2){var self = _m$2;switch(self._){case 'Maybe.none':var $8736 = Bool$false;var $8735 = $8736;break;case 'Maybe.some':var $8737 = Bool$true;var $8735 = $8737;break;};return $8735;};
  const Maybe$is_some = x0=>Maybe$is_some$(x0);
  function Kind$Term$gol$(_name$1,_dref$2,_verb$3){var $8738 = ({_:'Kind.Term.gol','name':_name$1,'dref':_dref$2,'verb':_verb$3});return $8738;};
  const Kind$Term$gol = x0=>x1=>x2=>Kind$Term$gol$(x0,x1,x2);
  const Kind$Parser$goal = Kind$Parser$block("goal")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $8740=self.err;var _reply$7 = Kind$Parser$text$("?",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8742=self.err;var self = $8740;switch(self._){case 'Maybe.some':var $8744=self.value;var $8745 = Parser$Reply$error$(Parser$Error$combine$($8744,$8742));var $8743 = $8745;break;case 'Maybe.none':var $8746 = Parser$Reply$error$($8742);var $8743 = $8746;break;};var $8741 = $8743;break;case 'Parser.Reply.value':var $8747=self.pst;var self = $8747;switch(self._){case 'Parser.State.new':var $8749=self.err;var $8750=self.nam;var $8751=self.ini;var $8752=self.idx;var $8753=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8740,$8749),$8750,$8751,$8752,$8753);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $8755=self.err;var _reply$21 = Kind$Parser$name$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $8757=self.err;var self = $8755;switch(self._){case 'Maybe.some':var $8759=self.value;var $8760 = Parser$Reply$error$(Parser$Error$combine$($8759,$8757));var $8758 = $8760;break;case 'Maybe.none':var $8761 = Parser$Reply$error$($8757);var $8758 = $8761;break;};var $8756 = $8758;break;case 'Parser.Reply.value':var $8762=self.pst;var $8763=self.val;var self = $8762;switch(self._){case 'Parser.State.new':var $8765=self.err;var $8766=self.nam;var $8767=self.ini;var $8768=self.idx;var $8769=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($8755,$8765),$8766,$8767,$8768,$8769);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $8771=self.err;var _reply$35 = Parser$many$((_pst$35=>{var self = _pst$35;switch(self._){case 'Parser.State.new':var $8774=self.err;var _reply$41 = Kind$Parser$text$("-",_pst$35);var self = _reply$41;switch(self._){case 'Parser.Reply.error':var $8776=self.err;var self = $8774;switch(self._){case 'Maybe.some':var $8778=self.value;var $8779 = Parser$Reply$error$(Parser$Error$combine$($8778,$8776));var $8777 = $8779;break;case 'Maybe.none':var $8780 = Parser$Reply$error$($8776);var $8777 = $8780;break;};var $8775 = $8777;break;case 'Parser.Reply.value':var $8781=self.pst;var self = $8781;switch(self._){case 'Parser.State.new':var $8783=self.err;var $8784=self.nam;var $8785=self.ini;var $8786=self.idx;var $8787=self.str;var _reply$pst$49 = Parser$State$new$(Parser$Error$maybe_combine$($8774,$8783),$8784,$8785,$8786,$8787);var self = _reply$pst$49;switch(self._){case 'Parser.State.new':var $8789=self.err;var _reply$55 = Parser$nat$(_reply$pst$49);var self = _reply$55;switch(self._){case 'Parser.Reply.error':var $8791=self.err;var self = $8789;switch(self._){case 'Maybe.some':var $8793=self.value;var $8794 = Parser$Reply$error$(Parser$Error$combine$($8793,$8791));var $8792 = $8794;break;case 'Maybe.none':var $8795 = Parser$Reply$error$($8791);var $8792 = $8795;break;};var $8790 = $8792;break;case 'Parser.Reply.value':var $8796=self.pst;var $8797=self.val;var self = $8796;switch(self._){case 'Parser.State.new':var $8799=self.err;var $8800=self.nam;var $8801=self.ini;var $8802=self.idx;var $8803=self.str;var _reply$pst$63 = Parser$State$new$(Parser$Error$maybe_combine$($8789,$8799),$8800,$8801,$8802,$8803);var _bits$64 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($8797)))));var $8804 = Parser$Reply$value$(_reply$pst$63,_bits$64);var $8798 = $8804;break;};var $8790 = $8798;break;};var $8788 = $8790;break;};var $8782 = $8788;break;};var $8775 = $8782;break;};var $8773 = $8775;break;};return $8773;}))(_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $8805=self.err;var self = $8771;switch(self._){case 'Maybe.some':var $8807=self.value;var $8808 = Parser$Reply$error$(Parser$Error$combine$($8807,$8805));var $8806 = $8808;break;case 'Maybe.none':var $8809 = Parser$Reply$error$($8805);var $8806 = $8809;break;};var $8772 = $8806;break;case 'Parser.Reply.value':var $8810=self.pst;var $8811=self.val;var self = $8810;switch(self._){case 'Parser.State.new':var $8813=self.err;var $8814=self.nam;var $8815=self.ini;var $8816=self.idx;var $8817=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($8771,$8813),$8814,$8815,$8816,$8817);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $8819=self.err;var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $8821=self.err;var _reply$54 = Parser$maybe$(Parser$text("-"),_reply$pst$43);var self = _reply$54;switch(self._){case 'Parser.Reply.error':var $8823=self.err;var self = $8821;switch(self._){case 'Maybe.some':var $8825=self.value;var $8826 = Parser$Reply$error$(Parser$Error$combine$($8825,$8823));var $8824 = $8826;break;case 'Maybe.none':var $8827 = Parser$Reply$error$($8823);var $8824 = $8827;break;};var $8822 = $8824;break;case 'Parser.Reply.value':var $8828=self.pst;var $8829=self.val;var self = $8828;switch(self._){case 'Parser.State.new':var $8831=self.err;var $8832=self.nam;var $8833=self.ini;var $8834=self.idx;var $8835=self.str;var _reply$pst$62 = Parser$State$new$(Parser$Error$maybe_combine$($8821,$8831),$8832,$8833,$8834,$8835);var $8836 = Parser$Reply$value$(_reply$pst$62,Maybe$is_some$($8829));var $8830 = $8836;break;};var $8822 = $8830;break;};var _reply$49 = $8822;break;};var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $8837=self.err;var self = $8819;switch(self._){case 'Maybe.some':var $8839=self.value;var $8840 = Parser$Reply$error$(Parser$Error$combine$($8839,$8837));var $8838 = $8840;break;case 'Maybe.none':var $8841 = Parser$Reply$error$($8837);var $8838 = $8841;break;};var $8820 = $8838;break;case 'Parser.Reply.value':var $8842=self.pst;var $8843=self.val;var self = $8842;switch(self._){case 'Parser.State.new':var $8845=self.err;var $8846=self.nam;var $8847=self.ini;var $8848=self.idx;var $8849=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($8819,$8845),$8846,$8847,$8848,$8849);var $8850 = Parser$Reply$value$(_reply$pst$57,Kind$Term$gol$($8763,$8811,$8843));var $8844 = $8850;break;};var $8820 = $8844;break;};var $8818 = $8820;break;};var $8812 = $8818;break;};var $8772 = $8812;break;};var $8770 = $8772;break;};var $8764 = $8770;break;};var $8756 = $8764;break;};var $8754 = $8756;break;};var $8748 = $8754;break;};var $8741 = $8748;break;};var $8739 = $8741;break;};return $8739;}));
  const Kind$Parser$hole = Kind$Parser$block("hole")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $8852=self.err;var _reply$7 = Kind$Parser$text$("_",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8854=self.err;var self = $8852;switch(self._){case 'Maybe.some':var $8856=self.value;var $8857 = Parser$Reply$error$(Parser$Error$combine$($8856,$8854));var $8855 = $8857;break;case 'Maybe.none':var $8858 = Parser$Reply$error$($8854);var $8855 = $8858;break;};var $8853 = $8855;break;case 'Parser.Reply.value':var $8859=self.pst;var self = $8859;switch(self._){case 'Parser.State.new':var $8861=self.err;var $8862=self.nam;var $8863=self.ini;var $8864=self.idx;var $8865=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8852,$8861),$8862,$8863,$8864,$8865);var $8866 = Parser$Reply$value$(_reply$pst$15,Kind$Term$hol$(Bits$e));var $8860 = $8866;break;};var $8853 = $8860;break;};var $8851 = $8853;break;};return $8851;}));
  function Kind$Parser$float$sign$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $8868=self.nam;var $8869=self.ini;var $8870=self.idx;var $8871=self.str;var self = $8871;if (self.length===0) {var $8873 = Parser$Reply$fail$($8868,$8869,$8870,"Expected \'+\' or \'-\'.");var $8872 = $8873;} else {var $8874=self.charCodeAt(0);var $8875=self.slice(1);var self = (($8874===43)||($8874===45));if (self) {var $8877 = Parser$Reply$value$(_pst$1,$8874);var $8876 = $8877;} else {var $8878 = Parser$Reply$fail$($8868,$8869,$8870,"Expected \'+\' ou \'-\'.");var $8876 = $8878;};var $8872 = $8876;};var $8867 = $8872;break;};return $8867;};
  const Kind$Parser$float$sign = x0=>Kind$Parser$float$sign$(x0);
  function List$any$(_cond$2,_list$3){var List$any$=(_cond$2,_list$3)=>({ctr:'TCO',arg:[_cond$2,_list$3]});var List$any=_cond$2=>_list$3=>List$any$(_cond$2,_list$3);var arg=[_cond$2,_list$3];while(true){let [_cond$2,_list$3]=arg;var R=(()=>{var self = _list$3;switch(self._){case 'List.cons':var $8879=self.head;var $8880=self.tail;var self = _cond$2($8879);if (self) {var $8882 = Bool$true;var $8881 = $8882;} else {var $8883 = List$any$(_cond$2,$8880);var $8881 = $8883;};return $8881;case 'List.nil':var $8884 = Bool$false;return $8884;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const List$any = x0=>x1=>List$any$(x0,x1);
  function Kind$Parser$float$str_digit$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $8886=self.err;var $8887=self.nam;var $8888=self.ini;var $8889=self.idx;var $8890=self.str;var self = $8890;if (self.length===0) {var $8892 = Parser$Reply$fail$($8887,$8888,$8889,"Not a digit.");var $8891 = $8892;} else {var $8893=self.charCodeAt(0);var $8894=self.slice(1);var _digits$9 = List$cons$(48,List$cons$(49,List$cons$(50,List$cons$(51,List$cons$(52,List$cons$(52,List$cons$(53,List$cons$(54,List$cons$(55,List$cons$(56,List$cons$(57,List$nil)))))))))));var _pst$10 = Parser$State$new$($8886,$8887,$8888,Nat$succ$($8889),$8894);var self = List$any$(a1=>($8893===a1),_digits$9);if (self) {var $8896 = Parser$Reply$value$(_pst$10,$8893);var $8895 = $8896;} else {var $8897 = Parser$Reply$fail$($8887,$8888,$8889,"Not a digit.");var $8895 = $8897;};var $8891 = $8895;};var $8885 = $8891;break;};return $8885;};
  const Kind$Parser$float$str_digit = x0=>Kind$Parser$float$str_digit$(x0);
  function String$from_list$(_xs$1){var self = _xs$1;switch(self._){case 'List.cons':var $8899=self.head;var $8900=self.tail;var $8901 = String$cons$($8899,String$from_list$($8900));var $8898 = $8901;break;case 'List.nil':var $8902 = String$nil;var $8898 = $8902;break;};return $8898;};
  const String$from_list = x0=>String$from_list$(x0);
  const Kind$Parser$float$64 = Kind$Parser$block("float")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $8904=self.err;var _reply$7 = Parser$maybe$(Kind$Parser$float$sign,_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8906=self.err;var self = $8904;switch(self._){case 'Maybe.some':var $8908=self.value;var $8909 = Parser$Reply$error$(Parser$Error$combine$($8908,$8906));var $8907 = $8909;break;case 'Maybe.none':var $8910 = Parser$Reply$error$($8906);var $8907 = $8910;break;};var $8905 = $8907;break;case 'Parser.Reply.value':var $8911=self.pst;var $8912=self.val;var self = $8911;switch(self._){case 'Parser.State.new':var $8914=self.err;var $8915=self.nam;var $8916=self.ini;var $8917=self.idx;var $8918=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8904,$8914),$8915,$8916,$8917,$8918);var _sign$16 = Maybe$default$($8912,43);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $8920=self.err;var _reply$22 = Parser$many1$(Kind$Parser$float$str_digit,_reply$pst$15);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $8922=self.err;var self = $8920;switch(self._){case 'Maybe.some':var $8924=self.value;var $8925 = Parser$Reply$error$(Parser$Error$combine$($8924,$8922));var $8923 = $8925;break;case 'Maybe.none':var $8926 = Parser$Reply$error$($8922);var $8923 = $8926;break;};var $8921 = $8923;break;case 'Parser.Reply.value':var $8927=self.pst;var $8928=self.val;var self = $8927;switch(self._){case 'Parser.State.new':var $8930=self.err;var $8931=self.nam;var $8932=self.ini;var $8933=self.idx;var $8934=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($8920,$8930),$8931,$8932,$8933,$8934);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $8936=self.err;var _reply$36 = Parser$text$(".",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $8938=self.err;var self = $8936;switch(self._){case 'Maybe.some':var $8940=self.value;var $8941 = Parser$Reply$error$(Parser$Error$combine$($8940,$8938));var $8939 = $8941;break;case 'Maybe.none':var $8942 = Parser$Reply$error$($8938);var $8939 = $8942;break;};var $8937 = $8939;break;case 'Parser.Reply.value':var $8943=self.pst;var self = $8943;switch(self._){case 'Parser.State.new':var $8945=self.err;var $8946=self.nam;var $8947=self.ini;var $8948=self.idx;var $8949=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($8936,$8945),$8946,$8947,$8948,$8949);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $8951=self.err;var _reply$50 = Parser$many1$(Kind$Parser$float$str_digit,_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $8953=self.err;var self = $8951;switch(self._){case 'Maybe.some':var $8955=self.value;var $8956 = Parser$Reply$error$(Parser$Error$combine$($8955,$8953));var $8954 = $8956;break;case 'Maybe.none':var $8957 = Parser$Reply$error$($8953);var $8954 = $8957;break;};var $8952 = $8954;break;case 'Parser.Reply.value':var $8958=self.pst;var $8959=self.val;var self = $8958;switch(self._){case 'Parser.State.new':var $8961=self.err;var $8962=self.nam;var $8963=self.ini;var $8964=self.idx;var $8965=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($8951,$8961),$8962,$8963,$8964,$8965);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $8967=self.err;var _reply$64 = Parser$text$("#64",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $8969=self.err;var self = $8967;switch(self._){case 'Maybe.some':var $8971=self.value;var $8972 = Parser$Reply$error$(Parser$Error$combine$($8971,$8969));var $8970 = $8972;break;case 'Maybe.none':var $8973 = Parser$Reply$error$($8969);var $8970 = $8973;break;};var $8968 = $8970;break;case 'Parser.Reply.value':var $8974=self.pst;var self = $8974;switch(self._){case 'Parser.State.new':var $8976=self.err;var $8977=self.nam;var $8978=self.ini;var $8979=self.idx;var $8980=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($8967,$8976),$8977,$8978,$8979,$8980);var _float_str$73 = Kind$Term$str$((String$cons$(_sign$16,String$from_list$($8928))+("."+String$from_list$($8959))));var _conv$74 = Kind$Term$ref$("F64.parse");var _term$75 = Kind$Term$app$(_conv$74,_float_str$73);var $8981 = Parser$Reply$value$(_reply$pst$72,_term$75);var $8975 = $8981;break;};var $8968 = $8975;break;};var $8966 = $8968;break;};var $8960 = $8966;break;};var $8952 = $8960;break;};var $8950 = $8952;break;};var $8944 = $8950;break;};var $8937 = $8944;break;};var $8935 = $8937;break;};var $8929 = $8935;break;};var $8921 = $8929;break;};var $8919 = $8921;break;};var $8913 = $8919;break;};var $8905 = $8913;break;};var $8903 = $8905;break;};return $8903;}));
  const Kind$Parser$float$32 = Kind$Parser$block("float")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $8983=self.err;var _reply$7 = Parser$maybe$(Kind$Parser$float$sign,_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $8985=self.err;var self = $8983;switch(self._){case 'Maybe.some':var $8987=self.value;var $8988 = Parser$Reply$error$(Parser$Error$combine$($8987,$8985));var $8986 = $8988;break;case 'Maybe.none':var $8989 = Parser$Reply$error$($8985);var $8986 = $8989;break;};var $8984 = $8986;break;case 'Parser.Reply.value':var $8990=self.pst;var $8991=self.val;var self = $8990;switch(self._){case 'Parser.State.new':var $8993=self.err;var $8994=self.nam;var $8995=self.ini;var $8996=self.idx;var $8997=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($8983,$8993),$8994,$8995,$8996,$8997);var _sign$16 = Maybe$default$($8991,43);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $8999=self.err;var _reply$22 = Parser$many1$(Kind$Parser$float$str_digit,_reply$pst$15);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $9001=self.err;var self = $8999;switch(self._){case 'Maybe.some':var $9003=self.value;var $9004 = Parser$Reply$error$(Parser$Error$combine$($9003,$9001));var $9002 = $9004;break;case 'Maybe.none':var $9005 = Parser$Reply$error$($9001);var $9002 = $9005;break;};var $9000 = $9002;break;case 'Parser.Reply.value':var $9006=self.pst;var $9007=self.val;var self = $9006;switch(self._){case 'Parser.State.new':var $9009=self.err;var $9010=self.nam;var $9011=self.ini;var $9012=self.idx;var $9013=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($8999,$9009),$9010,$9011,$9012,$9013);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $9015=self.err;var _reply$36 = Parser$text$(".",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $9017=self.err;var self = $9015;switch(self._){case 'Maybe.some':var $9019=self.value;var $9020 = Parser$Reply$error$(Parser$Error$combine$($9019,$9017));var $9018 = $9020;break;case 'Maybe.none':var $9021 = Parser$Reply$error$($9017);var $9018 = $9021;break;};var $9016 = $9018;break;case 'Parser.Reply.value':var $9022=self.pst;var self = $9022;switch(self._){case 'Parser.State.new':var $9024=self.err;var $9025=self.nam;var $9026=self.ini;var $9027=self.idx;var $9028=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($9015,$9024),$9025,$9026,$9027,$9028);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $9030=self.err;var _reply$50 = Parser$many1$(Kind$Parser$float$str_digit,_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $9032=self.err;var self = $9030;switch(self._){case 'Maybe.some':var $9034=self.value;var $9035 = Parser$Reply$error$(Parser$Error$combine$($9034,$9032));var $9033 = $9035;break;case 'Maybe.none':var $9036 = Parser$Reply$error$($9032);var $9033 = $9036;break;};var $9031 = $9033;break;case 'Parser.Reply.value':var $9037=self.pst;var $9038=self.val;var self = $9037;switch(self._){case 'Parser.State.new':var $9040=self.err;var $9041=self.nam;var $9042=self.ini;var $9043=self.idx;var $9044=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($9030,$9040),$9041,$9042,$9043,$9044);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $9046=self.err;var _reply$64 = Parser$text$("#32",_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $9048=self.err;var self = $9046;switch(self._){case 'Maybe.some':var $9050=self.value;var $9051 = Parser$Reply$error$(Parser$Error$combine$($9050,$9048));var $9049 = $9051;break;case 'Maybe.none':var $9052 = Parser$Reply$error$($9048);var $9049 = $9052;break;};var $9047 = $9049;break;case 'Parser.Reply.value':var $9053=self.pst;var self = $9053;switch(self._){case 'Parser.State.new':var $9055=self.err;var $9056=self.nam;var $9057=self.ini;var $9058=self.idx;var $9059=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($9046,$9055),$9056,$9057,$9058,$9059);var _float_str$73 = Kind$Term$str$((String$cons$(_sign$16,String$from_list$($9007))+("."+String$from_list$($9038))));var _conv$74 = Kind$Term$ref$("F32.parse");var _term$75 = Kind$Term$app$(_conv$74,_float_str$73);var $9060 = Parser$Reply$value$(_reply$pst$72,_term$75);var $9054 = $9060;break;};var $9047 = $9054;break;};var $9045 = $9047;break;};var $9039 = $9045;break;};var $9031 = $9039;break;};var $9029 = $9031;break;};var $9023 = $9029;break;};var $9016 = $9023;break;};var $9014 = $9016;break;};var $9008 = $9014;break;};var $9000 = $9008;break;};var $8998 = $9000;break;};var $8992 = $8998;break;};var $8984 = $8992;break;};var $8982 = $8984;break;};return $8982;}));
  function Nat$sub_rem$(_n$1,_m$2){var Nat$sub_rem$=(_n$1,_m$2)=>({ctr:'TCO',arg:[_n$1,_m$2]});var Nat$sub_rem=_n$1=>_m$2=>Nat$sub_rem$(_n$1,_m$2);var arg=[_n$1,_m$2];while(true){let [_n$1,_m$2]=arg;var R=(()=>{var self = _m$2;if (self===0n) {var $9061 = Either$left$(_n$1);return $9061;} else {var $9062=(self-1n);var self = _n$1;if (self===0n) {var $9064 = Either$right$(Nat$succ$($9062));var $9063 = $9064;} else {var $9065=(self-1n);var $9066 = Nat$sub_rem$($9065,$9062);var $9063 = $9066;};return $9063;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Nat$sub_rem = x0=>x1=>Nat$sub_rem$(x0,x1);
  function Nat$div_mod$go$(_n$1,_m$2,_d$3){var Nat$div_mod$go$=(_n$1,_m$2,_d$3)=>({ctr:'TCO',arg:[_n$1,_m$2,_d$3]});var Nat$div_mod$go=_n$1=>_m$2=>_d$3=>Nat$div_mod$go$(_n$1,_m$2,_d$3);var arg=[_n$1,_m$2,_d$3];while(true){let [_n$1,_m$2,_d$3]=arg;var R=(()=>{var self = Nat$sub_rem$(_n$1,_m$2);switch(self._){case 'Either.left':var $9067=self.value;var $9068 = Nat$div_mod$go$($9067,_m$2,Nat$succ$(_d$3));return $9068;case 'Either.right':var $9069 = Pair$new$(_d$3,_n$1);return $9069;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Nat$div_mod$go = x0=>x1=>x2=>Nat$div_mod$go$(x0,x1,x2);
  const Nat$div_mod = a0=>a1=>(({_:'Pair.new','fst':a0/a1,'snd':a0%a1}));
  function Nat$to_base$go$(_base$1,_nat$2,_res$3){var Nat$to_base$go$=(_base$1,_nat$2,_res$3)=>({ctr:'TCO',arg:[_base$1,_nat$2,_res$3]});var Nat$to_base$go=_base$1=>_nat$2=>_res$3=>Nat$to_base$go$(_base$1,_nat$2,_res$3);var arg=[_base$1,_nat$2,_res$3];while(true){let [_base$1,_nat$2,_res$3]=arg;var R=(()=>{var self = (({_:'Pair.new','fst':_nat$2/_base$1,'snd':_nat$2%_base$1}));switch(self._){case 'Pair.new':var $9070=self.fst;var $9071=self.snd;var self = $9070;if (self===0n) {var $9073 = List$cons$($9071,_res$3);var $9072 = $9073;} else {var $9074=(self-1n);var $9075 = Nat$to_base$go$(_base$1,$9070,List$cons$($9071,_res$3));var $9072 = $9075;};return $9072;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Nat$to_base$go = x0=>x1=>x2=>Nat$to_base$go$(x0,x1,x2);
  function Nat$to_base$(_base$1,_nat$2){var $9076 = Nat$to_base$go$(_base$1,_nat$2,List$nil);return $9076;};
  const Nat$to_base = x0=>x1=>Nat$to_base$(x0,x1);
  function Nat$mod$go$(_n$1,_m$2,_r$3){var Nat$mod$go$=(_n$1,_m$2,_r$3)=>({ctr:'TCO',arg:[_n$1,_m$2,_r$3]});var Nat$mod$go=_n$1=>_m$2=>_r$3=>Nat$mod$go$(_n$1,_m$2,_r$3);var arg=[_n$1,_m$2,_r$3];while(true){let [_n$1,_m$2,_r$3]=arg;var R=(()=>{var self = _m$2;if (self===0n) {var $9077 = Nat$mod$go$(_n$1,_r$3,_m$2);return $9077;} else {var $9078=(self-1n);var self = _n$1;if (self===0n) {var $9080 = _r$3;var $9079 = $9080;} else {var $9081=(self-1n);var $9082 = Nat$mod$go$($9081,$9078,Nat$succ$(_r$3));var $9079 = $9082;};return $9079;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Nat$mod$go = x0=>x1=>x2=>Nat$mod$go$(x0,x1,x2);
  const Nat$mod = a0=>a1=>(a0%a1);
  const Nat$lte = a0=>a1=>(a0<=a1);
  function List$at$(_index$2,_list$3){var List$at$=(_index$2,_list$3)=>({ctr:'TCO',arg:[_index$2,_list$3]});var List$at=_index$2=>_list$3=>List$at$(_index$2,_list$3);var arg=[_index$2,_list$3];while(true){let [_index$2,_list$3]=arg;var R=(()=>{var self = _list$3;switch(self._){case 'List.cons':var $9083=self.head;var $9084=self.tail;var self = _index$2;if (self===0n) {var $9086 = Maybe$some$($9083);var $9085 = $9086;} else {var $9087=(self-1n);var $9088 = List$at$($9087,$9084);var $9085 = $9088;};return $9085;case 'List.nil':var $9089 = Maybe$none;return $9089;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const List$at = x0=>x1=>List$at$(x0,x1);
  function Nat$show_digit$(_base$1,_n$2){var _m$3 = (_n$2%_base$1);var _base64$4 = List$cons$(48,List$cons$(49,List$cons$(50,List$cons$(51,List$cons$(52,List$cons$(53,List$cons$(54,List$cons$(55,List$cons$(56,List$cons$(57,List$cons$(97,List$cons$(98,List$cons$(99,List$cons$(100,List$cons$(101,List$cons$(102,List$cons$(103,List$cons$(104,List$cons$(105,List$cons$(106,List$cons$(107,List$cons$(108,List$cons$(109,List$cons$(110,List$cons$(111,List$cons$(112,List$cons$(113,List$cons$(114,List$cons$(115,List$cons$(116,List$cons$(117,List$cons$(118,List$cons$(119,List$cons$(120,List$cons$(121,List$cons$(122,List$cons$(65,List$cons$(66,List$cons$(67,List$cons$(68,List$cons$(69,List$cons$(70,List$cons$(71,List$cons$(72,List$cons$(73,List$cons$(74,List$cons$(75,List$cons$(76,List$cons$(77,List$cons$(78,List$cons$(79,List$cons$(80,List$cons$(81,List$cons$(82,List$cons$(83,List$cons$(84,List$cons$(85,List$cons$(86,List$cons$(87,List$cons$(88,List$cons$(89,List$cons$(90,List$cons$(43,List$cons$(47,List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));var self = ((_base$1>0n)&&(_base$1<=64n));if (self) {var self = List$at$(_m$3,_base64$4);switch(self._){case 'Maybe.some':var $9092=self.value;var $9093 = $9092;var $9091 = $9093;break;case 'Maybe.none':var $9094 = 35;var $9091 = $9094;break;};var $9090 = $9091;} else {var $9095 = 35;var $9090 = $9095;};return $9090;};
  const Nat$show_digit = x0=>x1=>Nat$show_digit$(x0,x1);
  function Nat$to_string_base$(_base$1,_nat$2){var $9096 = List$fold$(Nat$to_base$(_base$1,_nat$2),String$nil,(_n$3=>_str$4=>{var $9097 = String$cons$(Nat$show_digit$(_base$1,_n$3),_str$4);return $9097;}));return $9096;};
  const Nat$to_string_base = x0=>x1=>Nat$to_string_base$(x0,x1);
  function Nat$show$(_n$1){var $9098 = Nat$to_string_base$(10n,_n$1);return $9098;};
  const Nat$show = x0=>Nat$show$(x0);
  function Kind$Parser$int_pos$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $9100=self.err;var _reply$7 = Parser$text$("+",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9102=self.err;var self = $9100;switch(self._){case 'Maybe.some':var $9104=self.value;var $9105 = Parser$Reply$error$(Parser$Error$combine$($9104,$9102));var $9103 = $9105;break;case 'Maybe.none':var $9106 = Parser$Reply$error$($9102);var $9103 = $9106;break;};var $9101 = $9103;break;case 'Parser.Reply.value':var $9107=self.pst;var self = $9107;switch(self._){case 'Parser.State.new':var $9109=self.err;var $9110=self.nam;var $9111=self.ini;var $9112=self.idx;var $9113=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9100,$9109),$9110,$9111,$9112,$9113);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $9115=self.err;var _reply$21 = Parser$many1$(Parser$digit,_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $9117=self.err;var self = $9115;switch(self._){case 'Maybe.some':var $9119=self.value;var $9120 = Parser$Reply$error$(Parser$Error$combine$($9119,$9117));var $9118 = $9120;break;case 'Maybe.none':var $9121 = Parser$Reply$error$($9117);var $9118 = $9121;break;};var $9116 = $9118;break;case 'Parser.Reply.value':var $9122=self.pst;var $9123=self.val;var self = $9122;switch(self._){case 'Parser.State.new':var $9125=self.err;var $9126=self.nam;var $9127=self.ini;var $9128=self.idx;var $9129=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($9115,$9125),$9126,$9127,$9128,$9129);var $9130 = Parser$Reply$value$(_reply$pst$29,Pair$new$(Bool$true,Nat$from_base$(10n,$9123)));var $9124 = $9130;break;};var $9116 = $9124;break;};var $9114 = $9116;break;};var $9108 = $9114;break;};var $9101 = $9108;break;};var $9099 = $9101;break;};return $9099;};
  const Kind$Parser$int_pos = x0=>Kind$Parser$int_pos$(x0);
  function Kind$Parser$int_neg$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $9132=self.err;var _reply$7 = Parser$text$("-",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9134=self.err;var self = $9132;switch(self._){case 'Maybe.some':var $9136=self.value;var $9137 = Parser$Reply$error$(Parser$Error$combine$($9136,$9134));var $9135 = $9137;break;case 'Maybe.none':var $9138 = Parser$Reply$error$($9134);var $9135 = $9138;break;};var $9133 = $9135;break;case 'Parser.Reply.value':var $9139=self.pst;var self = $9139;switch(self._){case 'Parser.State.new':var $9141=self.err;var $9142=self.nam;var $9143=self.ini;var $9144=self.idx;var $9145=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9132,$9141),$9142,$9143,$9144,$9145);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $9147=self.err;var _reply$21 = Parser$many1$(Parser$digit,_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $9149=self.err;var self = $9147;switch(self._){case 'Maybe.some':var $9151=self.value;var $9152 = Parser$Reply$error$(Parser$Error$combine$($9151,$9149));var $9150 = $9152;break;case 'Maybe.none':var $9153 = Parser$Reply$error$($9149);var $9150 = $9153;break;};var $9148 = $9150;break;case 'Parser.Reply.value':var $9154=self.pst;var $9155=self.val;var self = $9154;switch(self._){case 'Parser.State.new':var $9157=self.err;var $9158=self.nam;var $9159=self.ini;var $9160=self.idx;var $9161=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($9147,$9157),$9158,$9159,$9160,$9161);var $9162 = Parser$Reply$value$(_reply$pst$29,Pair$new$(Bool$false,Nat$from_base$(10n,$9155)));var $9156 = $9162;break;};var $9148 = $9156;break;};var $9146 = $9148;break;};var $9140 = $9146;break;};var $9133 = $9140;break;};var $9131 = $9133;break;};return $9131;};
  const Kind$Parser$int_neg = x0=>Kind$Parser$int_neg$(x0);
  function Kind$Parser$machine_integer$signed$(_size$1){var $9163 = Kind$Parser$block("int")((()=>{var _size_str$2 = Nat$show$(_size$1);var $9164 = (_pst$3=>{var self = _pst$3;switch(self._){case 'Parser.State.new':var $9166=self.err;var _reply$9 = Kind$Parser$spaces(_pst$3);var self = _reply$9;switch(self._){case 'Parser.Reply.error':var $9168=self.err;var self = $9166;switch(self._){case 'Maybe.some':var $9170=self.value;var $9171 = Parser$Reply$error$(Parser$Error$combine$($9170,$9168));var $9169 = $9171;break;case 'Maybe.none':var $9172 = Parser$Reply$error$($9168);var $9169 = $9172;break;};var $9167 = $9169;break;case 'Parser.Reply.value':var $9173=self.pst;var self = $9173;switch(self._){case 'Parser.State.new':var $9175=self.err;var $9176=self.nam;var $9177=self.ini;var $9178=self.idx;var $9179=self.str;var _reply$pst$17 = Parser$State$new$(Parser$Error$maybe_combine$($9166,$9175),$9176,$9177,$9178,$9179);var self = _reply$pst$17;switch(self._){case 'Parser.State.new':var $9181=self.err;var _reply$23 = Parser$choice$(List$cons$(Kind$Parser$int_pos,List$cons$(Kind$Parser$int_neg,List$nil)),_reply$pst$17);var self = _reply$23;switch(self._){case 'Parser.Reply.error':var $9183=self.err;var self = $9181;switch(self._){case 'Maybe.some':var $9185=self.value;var $9186 = Parser$Reply$error$(Parser$Error$combine$($9185,$9183));var $9184 = $9186;break;case 'Maybe.none':var $9187 = Parser$Reply$error$($9183);var $9184 = $9187;break;};var $9182 = $9184;break;case 'Parser.Reply.value':var $9188=self.pst;var $9189=self.val;var self = $9188;switch(self._){case 'Parser.State.new':var $9191=self.err;var $9192=self.nam;var $9193=self.ini;var $9194=self.idx;var $9195=self.str;var _reply$pst$31 = Parser$State$new$(Parser$Error$maybe_combine$($9181,$9191),$9192,$9193,$9194,$9195);var self = _reply$pst$31;switch(self._){case 'Parser.State.new':var $9197=self.err;var _reply$37 = Parser$text$(("#"+_size_str$2),_reply$pst$31);var self = _reply$37;switch(self._){case 'Parser.Reply.error':var $9199=self.err;var self = $9197;switch(self._){case 'Maybe.some':var $9201=self.value;var $9202 = Parser$Reply$error$(Parser$Error$combine$($9201,$9199));var $9200 = $9202;break;case 'Maybe.none':var $9203 = Parser$Reply$error$($9199);var $9200 = $9203;break;};var $9198 = $9200;break;case 'Parser.Reply.value':var $9204=self.pst;var self = $9204;switch(self._){case 'Parser.State.new':var $9206=self.err;var $9207=self.nam;var $9208=self.ini;var $9209=self.idx;var $9210=self.str;var _reply$pst$45 = Parser$State$new$(Parser$Error$maybe_combine$($9197,$9206),$9207,$9208,$9209,$9210);var $9211 = Parser$Reply$value$(_reply$pst$45,(()=>{var self = $9189;switch(self._){case 'Pair.new':var $9212=self.fst;var $9213=self.snd;var _term$48 = Kind$Term$ref$(("I"+(_size_str$2+".from_nat")));var _term$49 = Kind$Term$app$(_term$48,Kind$Term$nat$($9213));var self = $9212;if (self) {var $9215 = _term$49;var _term$50 = $9215;} else {var $9216 = Kind$Term$app$(Kind$Term$ref$(("I"+(_size_str$2+".neg"))),_term$49);var _term$50 = $9216;};var $9214 = _term$50;return $9214;};})());var $9205 = $9211;break;};var $9198 = $9205;break;};var $9196 = $9198;break;};var $9190 = $9196;break;};var $9182 = $9190;break;};var $9180 = $9182;break;};var $9174 = $9180;break;};var $9167 = $9174;break;};var $9165 = $9167;break;};return $9165;});return $9164;})());return $9163;};
  const Kind$Parser$machine_integer$signed = x0=>Kind$Parser$machine_integer$signed$(x0);
  function Parser$hex_digit$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $9218=self.err;var $9219=self.nam;var $9220=self.ini;var $9221=self.idx;var $9222=self.str;var self = $9222;if (self.length===0) {var $9224 = Parser$Reply$fail$($9219,$9220,$9221,"Not a digit.");var $9223 = $9224;} else {var $9225=self.charCodeAt(0);var $9226=self.slice(1);var _pst$9 = Parser$State$new$($9218,$9219,$9220,Nat$succ$($9221),$9226);var self = ($9225===48);if (self) {var $9228 = Parser$Reply$value$(_pst$9,0n);var $9227 = $9228;} else {var self = ($9225===49);if (self) {var $9230 = Parser$Reply$value$(_pst$9,1n);var $9229 = $9230;} else {var self = ($9225===50);if (self) {var $9232 = Parser$Reply$value$(_pst$9,2n);var $9231 = $9232;} else {var self = ($9225===51);if (self) {var $9234 = Parser$Reply$value$(_pst$9,3n);var $9233 = $9234;} else {var self = ($9225===52);if (self) {var $9236 = Parser$Reply$value$(_pst$9,4n);var $9235 = $9236;} else {var self = ($9225===53);if (self) {var $9238 = Parser$Reply$value$(_pst$9,5n);var $9237 = $9238;} else {var self = ($9225===54);if (self) {var $9240 = Parser$Reply$value$(_pst$9,6n);var $9239 = $9240;} else {var self = ($9225===55);if (self) {var $9242 = Parser$Reply$value$(_pst$9,7n);var $9241 = $9242;} else {var self = ($9225===56);if (self) {var $9244 = Parser$Reply$value$(_pst$9,8n);var $9243 = $9244;} else {var self = ($9225===57);if (self) {var $9246 = Parser$Reply$value$(_pst$9,9n);var $9245 = $9246;} else {var self = ($9225===97);if (self) {var $9248 = Parser$Reply$value$(_pst$9,10n);var $9247 = $9248;} else {var self = ($9225===98);if (self) {var $9250 = Parser$Reply$value$(_pst$9,11n);var $9249 = $9250;} else {var self = ($9225===99);if (self) {var $9252 = Parser$Reply$value$(_pst$9,12n);var $9251 = $9252;} else {var self = ($9225===100);if (self) {var $9254 = Parser$Reply$value$(_pst$9,13n);var $9253 = $9254;} else {var self = ($9225===101);if (self) {var $9256 = Parser$Reply$value$(_pst$9,14n);var $9255 = $9256;} else {var self = ($9225===102);if (self) {var $9258 = Parser$Reply$value$(_pst$9,15n);var $9257 = $9258;} else {var self = ($9225===65);if (self) {var $9260 = Parser$Reply$value$(_pst$9,10n);var $9259 = $9260;} else {var self = ($9225===66);if (self) {var $9262 = Parser$Reply$value$(_pst$9,11n);var $9261 = $9262;} else {var self = ($9225===67);if (self) {var $9264 = Parser$Reply$value$(_pst$9,12n);var $9263 = $9264;} else {var self = ($9225===68);if (self) {var $9266 = Parser$Reply$value$(_pst$9,13n);var $9265 = $9266;} else {var self = ($9225===69);if (self) {var $9268 = Parser$Reply$value$(_pst$9,14n);var $9267 = $9268;} else {var self = ($9225===70);if (self) {var $9270 = Parser$Reply$value$(_pst$9,15n);var $9269 = $9270;} else {var $9271 = Parser$Reply$fail$($9219,$9220,$9221,"Not a digit.");var $9269 = $9271;};var $9267 = $9269;};var $9265 = $9267;};var $9263 = $9265;};var $9261 = $9263;};var $9259 = $9261;};var $9257 = $9259;};var $9255 = $9257;};var $9253 = $9255;};var $9251 = $9253;};var $9249 = $9251;};var $9247 = $9249;};var $9245 = $9247;};var $9243 = $9245;};var $9241 = $9243;};var $9239 = $9241;};var $9237 = $9239;};var $9235 = $9237;};var $9233 = $9235;};var $9231 = $9233;};var $9229 = $9231;};var $9227 = $9229;};var $9223 = $9227;};var $9217 = $9223;break;};return $9217;};
  const Parser$hex_digit = x0=>Parser$hex_digit$(x0);
  function Parser$hex_nat$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $9273=self.err;var _reply$7 = Parser$text$("0x",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9275=self.err;var self = $9273;switch(self._){case 'Maybe.some':var $9277=self.value;var $9278 = Parser$Reply$error$(Parser$Error$combine$($9277,$9275));var $9276 = $9278;break;case 'Maybe.none':var $9279 = Parser$Reply$error$($9275);var $9276 = $9279;break;};var $9274 = $9276;break;case 'Parser.Reply.value':var $9280=self.pst;var self = $9280;switch(self._){case 'Parser.State.new':var $9282=self.err;var $9283=self.nam;var $9284=self.ini;var $9285=self.idx;var $9286=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9273,$9282),$9283,$9284,$9285,$9286);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $9288=self.err;var _reply$21 = Parser$many1$(Parser$hex_digit,_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $9290=self.err;var self = $9288;switch(self._){case 'Maybe.some':var $9292=self.value;var $9293 = Parser$Reply$error$(Parser$Error$combine$($9292,$9290));var $9291 = $9293;break;case 'Maybe.none':var $9294 = Parser$Reply$error$($9290);var $9291 = $9294;break;};var $9289 = $9291;break;case 'Parser.Reply.value':var $9295=self.pst;var $9296=self.val;var self = $9295;switch(self._){case 'Parser.State.new':var $9298=self.err;var $9299=self.nam;var $9300=self.ini;var $9301=self.idx;var $9302=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($9288,$9298),$9299,$9300,$9301,$9302);var $9303 = Parser$Reply$value$(_reply$pst$29,Nat$from_base$(16n,$9296));var $9297 = $9303;break;};var $9289 = $9297;break;};var $9287 = $9289;break;};var $9281 = $9287;break;};var $9274 = $9281;break;};var $9272 = $9274;break;};return $9272;};
  const Parser$hex_nat = x0=>Parser$hex_nat$(x0);
  const Kind$Parser$nat = Kind$Parser$block("nat")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $9305=self.err;var _reply$7 = Kind$Parser$spaces(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9307=self.err;var self = $9305;switch(self._){case 'Maybe.some':var $9309=self.value;var $9310 = Parser$Reply$error$(Parser$Error$combine$($9309,$9307));var $9308 = $9310;break;case 'Maybe.none':var $9311 = Parser$Reply$error$($9307);var $9308 = $9311;break;};var $9306 = $9308;break;case 'Parser.Reply.value':var $9312=self.pst;var self = $9312;switch(self._){case 'Parser.State.new':var $9314=self.err;var $9315=self.nam;var $9316=self.ini;var $9317=self.idx;var $9318=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9305,$9314),$9315,$9316,$9317,$9318);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $9320=self.err;var _reply$21 = Parser$choice$(List$cons$(Parser$hex_nat,List$cons$(Parser$nat,List$nil)),_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $9322=self.err;var self = $9320;switch(self._){case 'Maybe.some':var $9324=self.value;var $9325 = Parser$Reply$error$(Parser$Error$combine$($9324,$9322));var $9323 = $9325;break;case 'Maybe.none':var $9326 = Parser$Reply$error$($9322);var $9323 = $9326;break;};var $9321 = $9323;break;case 'Parser.Reply.value':var $9327=self.pst;var $9328=self.val;var self = $9327;switch(self._){case 'Parser.State.new':var $9330=self.err;var $9331=self.nam;var $9332=self.ini;var $9333=self.idx;var $9334=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($9320,$9330),$9331,$9332,$9333,$9334);var $9335 = Parser$Reply$value$(_reply$pst$29,Kind$Term$nat$($9328));var $9329 = $9335;break;};var $9321 = $9329;break;};var $9319 = $9321;break;};var $9313 = $9319;break;};var $9306 = $9313;break;};var $9304 = $9306;break;};return $9304;}));
  function Kind$Parser$machine_integer$unsigned$(_size$1){var $9336 = Kind$Parser$block("int")((()=>{var _size_str$2 = Nat$show$(_size$1);var $9337 = (_pst$3=>{var self = _pst$3;switch(self._){case 'Parser.State.new':var $9339=self.err;var _reply$9 = Kind$Parser$spaces(_pst$3);var self = _reply$9;switch(self._){case 'Parser.Reply.error':var $9341=self.err;var self = $9339;switch(self._){case 'Maybe.some':var $9343=self.value;var $9344 = Parser$Reply$error$(Parser$Error$combine$($9343,$9341));var $9342 = $9344;break;case 'Maybe.none':var $9345 = Parser$Reply$error$($9341);var $9342 = $9345;break;};var $9340 = $9342;break;case 'Parser.Reply.value':var $9346=self.pst;var self = $9346;switch(self._){case 'Parser.State.new':var $9348=self.err;var $9349=self.nam;var $9350=self.ini;var $9351=self.idx;var $9352=self.str;var _reply$pst$17 = Parser$State$new$(Parser$Error$maybe_combine$($9339,$9348),$9349,$9350,$9351,$9352);var self = _reply$pst$17;switch(self._){case 'Parser.State.new':var $9354=self.err;var _reply$23 = Kind$Parser$nat(_reply$pst$17);var self = _reply$23;switch(self._){case 'Parser.Reply.error':var $9356=self.err;var self = $9354;switch(self._){case 'Maybe.some':var $9358=self.value;var $9359 = Parser$Reply$error$(Parser$Error$combine$($9358,$9356));var $9357 = $9359;break;case 'Maybe.none':var $9360 = Parser$Reply$error$($9356);var $9357 = $9360;break;};var $9355 = $9357;break;case 'Parser.Reply.value':var $9361=self.pst;var $9362=self.val;var self = $9361;switch(self._){case 'Parser.State.new':var $9364=self.err;var $9365=self.nam;var $9366=self.ini;var $9367=self.idx;var $9368=self.str;var _reply$pst$31 = Parser$State$new$(Parser$Error$maybe_combine$($9354,$9364),$9365,$9366,$9367,$9368);var self = _reply$pst$31;switch(self._){case 'Parser.State.new':var $9370=self.err;var _reply$37 = Parser$text$(("#"+Nat$show$(_size$1)),_reply$pst$31);var self = _reply$37;switch(self._){case 'Parser.Reply.error':var $9372=self.err;var self = $9370;switch(self._){case 'Maybe.some':var $9374=self.value;var $9375 = Parser$Reply$error$(Parser$Error$combine$($9374,$9372));var $9373 = $9375;break;case 'Maybe.none':var $9376 = Parser$Reply$error$($9372);var $9373 = $9376;break;};var $9371 = $9373;break;case 'Parser.Reply.value':var $9377=self.pst;var self = $9377;switch(self._){case 'Parser.State.new':var $9379=self.err;var $9380=self.nam;var $9381=self.ini;var $9382=self.idx;var $9383=self.str;var _reply$pst$45 = Parser$State$new$(Parser$Error$maybe_combine$($9370,$9379),$9380,$9381,$9382,$9383);var _term$46 = Kind$Term$ref$(("Nat.to_u"+Nat$show$(_size$1)));var _term$47 = Kind$Term$app$(_term$46,$9362);var $9384 = Parser$Reply$value$(_reply$pst$45,_term$47);var $9378 = $9384;break;};var $9371 = $9378;break;};var $9369 = $9371;break;};var $9363 = $9369;break;};var $9355 = $9363;break;};var $9353 = $9355;break;};var $9347 = $9353;break;};var $9340 = $9347;break;};var $9338 = $9340;break;};return $9338;});return $9337;})());return $9336;};
  const Kind$Parser$machine_integer$unsigned = x0=>Kind$Parser$machine_integer$unsigned$(x0);
  const Kind$Parser$u64 = Kind$Parser$block("u64")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $9386=self.err;var _reply$7 = Kind$Parser$spaces(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9388=self.err;var self = $9386;switch(self._){case 'Maybe.some':var $9390=self.value;var $9391 = Parser$Reply$error$(Parser$Error$combine$($9390,$9388));var $9389 = $9391;break;case 'Maybe.none':var $9392 = Parser$Reply$error$($9388);var $9389 = $9392;break;};var $9387 = $9389;break;case 'Parser.Reply.value':var $9393=self.pst;var self = $9393;switch(self._){case 'Parser.State.new':var $9395=self.err;var $9396=self.nam;var $9397=self.ini;var $9398=self.idx;var $9399=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9386,$9395),$9396,$9397,$9398,$9399);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $9401=self.err;var _reply$21 = Parser$nat$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $9403=self.err;var self = $9401;switch(self._){case 'Maybe.some':var $9405=self.value;var $9406 = Parser$Reply$error$(Parser$Error$combine$($9405,$9403));var $9404 = $9406;break;case 'Maybe.none':var $9407 = Parser$Reply$error$($9403);var $9404 = $9407;break;};var $9402 = $9404;break;case 'Parser.Reply.value':var $9408=self.pst;var $9409=self.val;var self = $9408;switch(self._){case 'Parser.State.new':var $9411=self.err;var $9412=self.nam;var $9413=self.ini;var $9414=self.idx;var $9415=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($9401,$9411),$9412,$9413,$9414,$9415);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $9417=self.err;var _reply$35 = Parser$text$("l",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $9419=self.err;var self = $9417;switch(self._){case 'Maybe.some':var $9421=self.value;var $9422 = Parser$Reply$error$(Parser$Error$combine$($9421,$9419));var $9420 = $9422;break;case 'Maybe.none':var $9423 = Parser$Reply$error$($9419);var $9420 = $9423;break;};var $9418 = $9420;break;case 'Parser.Reply.value':var $9424=self.pst;var self = $9424;switch(self._){case 'Parser.State.new':var $9426=self.err;var $9427=self.nam;var $9428=self.ini;var $9429=self.idx;var $9430=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($9417,$9426),$9427,$9428,$9429,$9430);var _term$44 = Kind$Term$ref$("U64.from_nat");var _term$45 = Kind$Term$app$(_term$44,Kind$Term$nat$($9409));var $9431 = Parser$Reply$value$(_reply$pst$43,_term$45);var $9425 = $9431;break;};var $9418 = $9425;break;};var $9416 = $9418;break;};var $9410 = $9416;break;};var $9402 = $9410;break;};var $9400 = $9402;break;};var $9394 = $9400;break;};var $9387 = $9394;break;};var $9385 = $9387;break;};return $9385;}));
  const Kind$Parser$u32 = Kind$Parser$block("u32")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $9433=self.err;var _reply$7 = Kind$Parser$spaces(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9435=self.err;var self = $9433;switch(self._){case 'Maybe.some':var $9437=self.value;var $9438 = Parser$Reply$error$(Parser$Error$combine$($9437,$9435));var $9436 = $9438;break;case 'Maybe.none':var $9439 = Parser$Reply$error$($9435);var $9436 = $9439;break;};var $9434 = $9436;break;case 'Parser.Reply.value':var $9440=self.pst;var self = $9440;switch(self._){case 'Parser.State.new':var $9442=self.err;var $9443=self.nam;var $9444=self.ini;var $9445=self.idx;var $9446=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9433,$9442),$9443,$9444,$9445,$9446);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $9448=self.err;var _reply$21 = Parser$nat$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $9450=self.err;var self = $9448;switch(self._){case 'Maybe.some':var $9452=self.value;var $9453 = Parser$Reply$error$(Parser$Error$combine$($9452,$9450));var $9451 = $9453;break;case 'Maybe.none':var $9454 = Parser$Reply$error$($9450);var $9451 = $9454;break;};var $9449 = $9451;break;case 'Parser.Reply.value':var $9455=self.pst;var $9456=self.val;var self = $9455;switch(self._){case 'Parser.State.new':var $9458=self.err;var $9459=self.nam;var $9460=self.ini;var $9461=self.idx;var $9462=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($9448,$9458),$9459,$9460,$9461,$9462);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $9464=self.err;var _reply$35 = Parser$text$("u",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $9466=self.err;var self = $9464;switch(self._){case 'Maybe.some':var $9468=self.value;var $9469 = Parser$Reply$error$(Parser$Error$combine$($9468,$9466));var $9467 = $9469;break;case 'Maybe.none':var $9470 = Parser$Reply$error$($9466);var $9467 = $9470;break;};var $9465 = $9467;break;case 'Parser.Reply.value':var $9471=self.pst;var self = $9471;switch(self._){case 'Parser.State.new':var $9473=self.err;var $9474=self.nam;var $9475=self.ini;var $9476=self.idx;var $9477=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($9464,$9473),$9474,$9475,$9476,$9477);var _term$44 = Kind$Term$ref$("U32.from_nat");var _term$45 = Kind$Term$app$(_term$44,Kind$Term$nat$($9456));var $9478 = Parser$Reply$value$(_reply$pst$43,_term$45);var $9472 = $9478;break;};var $9465 = $9472;break;};var $9463 = $9465;break;};var $9457 = $9463;break;};var $9449 = $9457;break;};var $9447 = $9449;break;};var $9441 = $9447;break;};var $9434 = $9441;break;};var $9432 = $9434;break;};return $9432;}));
  const Kind$Parser$u16 = Kind$Parser$block("u16")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $9480=self.err;var _reply$7 = Kind$Parser$spaces(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9482=self.err;var self = $9480;switch(self._){case 'Maybe.some':var $9484=self.value;var $9485 = Parser$Reply$error$(Parser$Error$combine$($9484,$9482));var $9483 = $9485;break;case 'Maybe.none':var $9486 = Parser$Reply$error$($9482);var $9483 = $9486;break;};var $9481 = $9483;break;case 'Parser.Reply.value':var $9487=self.pst;var self = $9487;switch(self._){case 'Parser.State.new':var $9489=self.err;var $9490=self.nam;var $9491=self.ini;var $9492=self.idx;var $9493=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9480,$9489),$9490,$9491,$9492,$9493);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $9495=self.err;var _reply$21 = Parser$nat$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $9497=self.err;var self = $9495;switch(self._){case 'Maybe.some':var $9499=self.value;var $9500 = Parser$Reply$error$(Parser$Error$combine$($9499,$9497));var $9498 = $9500;break;case 'Maybe.none':var $9501 = Parser$Reply$error$($9497);var $9498 = $9501;break;};var $9496 = $9498;break;case 'Parser.Reply.value':var $9502=self.pst;var $9503=self.val;var self = $9502;switch(self._){case 'Parser.State.new':var $9505=self.err;var $9506=self.nam;var $9507=self.ini;var $9508=self.idx;var $9509=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($9495,$9505),$9506,$9507,$9508,$9509);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $9511=self.err;var _reply$35 = Parser$text$("s",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $9513=self.err;var self = $9511;switch(self._){case 'Maybe.some':var $9515=self.value;var $9516 = Parser$Reply$error$(Parser$Error$combine$($9515,$9513));var $9514 = $9516;break;case 'Maybe.none':var $9517 = Parser$Reply$error$($9513);var $9514 = $9517;break;};var $9512 = $9514;break;case 'Parser.Reply.value':var $9518=self.pst;var self = $9518;switch(self._){case 'Parser.State.new':var $9520=self.err;var $9521=self.nam;var $9522=self.ini;var $9523=self.idx;var $9524=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($9511,$9520),$9521,$9522,$9523,$9524);var _term$44 = Kind$Term$ref$("U16.from_nat");var _term$45 = Kind$Term$app$(_term$44,Kind$Term$nat$($9503));var $9525 = Parser$Reply$value$(_reply$pst$43,_term$45);var $9519 = $9525;break;};var $9512 = $9519;break;};var $9510 = $9512;break;};var $9504 = $9510;break;};var $9496 = $9504;break;};var $9494 = $9496;break;};var $9488 = $9494;break;};var $9481 = $9488;break;};var $9479 = $9481;break;};return $9479;}));
  const Kind$Parser$u8 = Kind$Parser$block("u8")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $9527=self.err;var _reply$7 = Kind$Parser$spaces(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9529=self.err;var self = $9527;switch(self._){case 'Maybe.some':var $9531=self.value;var $9532 = Parser$Reply$error$(Parser$Error$combine$($9531,$9529));var $9530 = $9532;break;case 'Maybe.none':var $9533 = Parser$Reply$error$($9529);var $9530 = $9533;break;};var $9528 = $9530;break;case 'Parser.Reply.value':var $9534=self.pst;var self = $9534;switch(self._){case 'Parser.State.new':var $9536=self.err;var $9537=self.nam;var $9538=self.ini;var $9539=self.idx;var $9540=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9527,$9536),$9537,$9538,$9539,$9540);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $9542=self.err;var _reply$21 = Parser$nat$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $9544=self.err;var self = $9542;switch(self._){case 'Maybe.some':var $9546=self.value;var $9547 = Parser$Reply$error$(Parser$Error$combine$($9546,$9544));var $9545 = $9547;break;case 'Maybe.none':var $9548 = Parser$Reply$error$($9544);var $9545 = $9548;break;};var $9543 = $9545;break;case 'Parser.Reply.value':var $9549=self.pst;var $9550=self.val;var self = $9549;switch(self._){case 'Parser.State.new':var $9552=self.err;var $9553=self.nam;var $9554=self.ini;var $9555=self.idx;var $9556=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($9542,$9552),$9553,$9554,$9555,$9556);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $9558=self.err;var _reply$35 = Parser$text$("b",_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $9560=self.err;var self = $9558;switch(self._){case 'Maybe.some':var $9562=self.value;var $9563 = Parser$Reply$error$(Parser$Error$combine$($9562,$9560));var $9561 = $9563;break;case 'Maybe.none':var $9564 = Parser$Reply$error$($9560);var $9561 = $9564;break;};var $9559 = $9561;break;case 'Parser.Reply.value':var $9565=self.pst;var self = $9565;switch(self._){case 'Parser.State.new':var $9567=self.err;var $9568=self.nam;var $9569=self.ini;var $9570=self.idx;var $9571=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($9558,$9567),$9568,$9569,$9570,$9571);var _term$44 = Kind$Term$ref$("U8.from_nat");var _term$45 = Kind$Term$app$(_term$44,Kind$Term$nat$($9550));var $9572 = Parser$Reply$value$(_reply$pst$43,_term$45);var $9566 = $9572;break;};var $9559 = $9566;break;};var $9557 = $9559;break;};var $9551 = $9557;break;};var $9543 = $9551;break;};var $9541 = $9543;break;};var $9535 = $9541;break;};var $9528 = $9535;break;};var $9526 = $9528;break;};return $9526;}));
  function Parser$Number$new$(_sign$1,_numb$2,_frac$3){var $9573 = ({_:'Parser.Number.new','sign':_sign$1,'numb':_numb$2,'frac':_frac$3});return $9573;};
  const Parser$Number$new = x0=>x1=>x2=>Parser$Number$new$(x0,x1,x2);
  function Parser$num$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $9575=self.err;var _reply$7 = Parser$choice$(List$cons$((_pst$7=>{var self = _pst$7;switch(self._){case 'Parser.State.new':var $9578=self.err;var _reply$13 = Parser$text$("+",_pst$7);var self = _reply$13;switch(self._){case 'Parser.Reply.error':var $9580=self.err;var self = $9578;switch(self._){case 'Maybe.some':var $9582=self.value;var $9583 = Parser$Reply$error$(Parser$Error$combine$($9582,$9580));var $9581 = $9583;break;case 'Maybe.none':var $9584 = Parser$Reply$error$($9580);var $9581 = $9584;break;};var $9579 = $9581;break;case 'Parser.Reply.value':var $9585=self.pst;var self = $9585;switch(self._){case 'Parser.State.new':var $9587=self.err;var $9588=self.nam;var $9589=self.ini;var $9590=self.idx;var $9591=self.str;var _reply$pst$21 = Parser$State$new$(Parser$Error$maybe_combine$($9578,$9587),$9588,$9589,$9590,$9591);var $9592 = Parser$Reply$value$(_reply$pst$21,Maybe$some$(Bool$true));var $9586 = $9592;break;};var $9579 = $9586;break;};var $9577 = $9579;break;};return $9577;}),List$cons$((_pst$7=>{var self = _pst$7;switch(self._){case 'Parser.State.new':var $9594=self.err;var _reply$13 = Parser$text$("-",_pst$7);var self = _reply$13;switch(self._){case 'Parser.Reply.error':var $9596=self.err;var self = $9594;switch(self._){case 'Maybe.some':var $9598=self.value;var $9599 = Parser$Reply$error$(Parser$Error$combine$($9598,$9596));var $9597 = $9599;break;case 'Maybe.none':var $9600 = Parser$Reply$error$($9596);var $9597 = $9600;break;};var $9595 = $9597;break;case 'Parser.Reply.value':var $9601=self.pst;var self = $9601;switch(self._){case 'Parser.State.new':var $9603=self.err;var $9604=self.nam;var $9605=self.ini;var $9606=self.idx;var $9607=self.str;var _reply$pst$21 = Parser$State$new$(Parser$Error$maybe_combine$($9594,$9603),$9604,$9605,$9606,$9607);var $9608 = Parser$Reply$value$(_reply$pst$21,Maybe$some$(Bool$false));var $9602 = $9608;break;};var $9595 = $9602;break;};var $9593 = $9595;break;};return $9593;}),List$cons$((_pst$7=>{var $9609 = Parser$Reply$value$(_pst$7,Maybe$none);return $9609;}),List$nil))),_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9610=self.err;var self = $9575;switch(self._){case 'Maybe.some':var $9612=self.value;var $9613 = Parser$Reply$error$(Parser$Error$combine$($9612,$9610));var $9611 = $9613;break;case 'Maybe.none':var $9614 = Parser$Reply$error$($9610);var $9611 = $9614;break;};var $9576 = $9611;break;case 'Parser.Reply.value':var $9615=self.pst;var $9616=self.val;var self = $9615;switch(self._){case 'Parser.State.new':var $9618=self.err;var $9619=self.nam;var $9620=self.ini;var $9621=self.idx;var $9622=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9575,$9618),$9619,$9620,$9621,$9622);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $9624=self.err;var _reply$21 = Parser$choice$(List$cons$(Parser$hex_nat,List$cons$(Parser$nat,List$nil)),_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $9626=self.err;var self = $9624;switch(self._){case 'Maybe.some':var $9628=self.value;var $9629 = Parser$Reply$error$(Parser$Error$combine$($9628,$9626));var $9627 = $9629;break;case 'Maybe.none':var $9630 = Parser$Reply$error$($9626);var $9627 = $9630;break;};var $9625 = $9627;break;case 'Parser.Reply.value':var $9631=self.pst;var $9632=self.val;var self = $9631;switch(self._){case 'Parser.State.new':var $9634=self.err;var $9635=self.nam;var $9636=self.ini;var $9637=self.idx;var $9638=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($9624,$9634),$9635,$9636,$9637,$9638);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $9640=self.err;var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $9642=self.err;var _reply$40 = Parser$maybe$(Parser$text("."),_reply$pst$29);var self = _reply$40;switch(self._){case 'Parser.Reply.error':var $9644=self.err;var self = $9642;switch(self._){case 'Maybe.some':var $9646=self.value;var $9647 = Parser$Reply$error$(Parser$Error$combine$($9646,$9644));var $9645 = $9647;break;case 'Maybe.none':var $9648 = Parser$Reply$error$($9644);var $9645 = $9648;break;};var $9643 = $9645;break;case 'Parser.Reply.value':var $9649=self.pst;var self = $9649;switch(self._){case 'Parser.State.new':var $9651=self.err;var $9652=self.nam;var $9653=self.ini;var $9654=self.idx;var $9655=self.str;var _reply$pst$48 = Parser$State$new$(Parser$Error$maybe_combine$($9642,$9651),$9652,$9653,$9654,$9655);var self = _reply$pst$48;switch(self._){case 'Parser.State.new':var $9657=self.err;var _reply$54 = Parser$maybe$(Parser$nat,_reply$pst$48);var self = _reply$54;switch(self._){case 'Parser.Reply.error':var $9659=self.err;var self = $9657;switch(self._){case 'Maybe.some':var $9661=self.value;var $9662 = Parser$Reply$error$(Parser$Error$combine$($9661,$9659));var $9660 = $9662;break;case 'Maybe.none':var $9663 = Parser$Reply$error$($9659);var $9660 = $9663;break;};var $9658 = $9660;break;case 'Parser.Reply.value':var $9664=self.pst;var $9665=self.val;var self = $9664;switch(self._){case 'Parser.State.new':var $9667=self.err;var $9668=self.nam;var $9669=self.ini;var $9670=self.idx;var $9671=self.str;var _reply$pst$62 = Parser$State$new$(Parser$Error$maybe_combine$($9657,$9667),$9668,$9669,$9670,$9671);var $9672 = Parser$Reply$value$(_reply$pst$62,$9665);var $9666 = $9672;break;};var $9658 = $9666;break;};var $9656 = $9658;break;};var $9650 = $9656;break;};var $9643 = $9650;break;};var _reply$35 = $9643;break;};var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $9673=self.err;var self = $9640;switch(self._){case 'Maybe.some':var $9675=self.value;var $9676 = Parser$Reply$error$(Parser$Error$combine$($9675,$9673));var $9674 = $9676;break;case 'Maybe.none':var $9677 = Parser$Reply$error$($9673);var $9674 = $9677;break;};var $9641 = $9674;break;case 'Parser.Reply.value':var $9678=self.pst;var $9679=self.val;var self = $9678;switch(self._){case 'Parser.State.new':var $9681=self.err;var $9682=self.nam;var $9683=self.ini;var $9684=self.idx;var $9685=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($9640,$9681),$9682,$9683,$9684,$9685);var $9686 = Parser$Reply$value$(_reply$pst$43,Parser$Number$new$($9616,$9632,$9679));var $9680 = $9686;break;};var $9641 = $9680;break;};var $9639 = $9641;break;};var $9633 = $9639;break;};var $9625 = $9633;break;};var $9623 = $9625;break;};var $9617 = $9623;break;};var $9576 = $9617;break;};var $9574 = $9576;break;};return $9574;};
  const Parser$num = x0=>Parser$num$(x0);
  function Kind$Term$num$(_sign$1,_numb$2,_frac$3){var $9687 = ({_:'Kind.Term.num','sign':_sign$1,'numb':_numb$2,'frac':_frac$3});return $9687;};
  const Kind$Term$num = x0=>x1=>x2=>Kind$Term$num$(x0,x1,x2);
  function Kind$Parser$num$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $9689=self.err;var _reply$7 = Parser$num$(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9691=self.err;var self = $9689;switch(self._){case 'Maybe.some':var $9693=self.value;var $9694 = Parser$Reply$error$(Parser$Error$combine$($9693,$9691));var $9692 = $9694;break;case 'Maybe.none':var $9695 = Parser$Reply$error$($9691);var $9692 = $9695;break;};var $9690 = $9692;break;case 'Parser.Reply.value':var $9696=self.pst;var $9697=self.val;var self = $9696;switch(self._){case 'Parser.State.new':var $9699=self.err;var $9700=self.nam;var $9701=self.ini;var $9702=self.idx;var $9703=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9689,$9699),$9700,$9701,$9702,$9703);var self = $9697;switch(self._){case 'Parser.Number.new':var $9705=self.sign;var $9706=self.numb;var $9707=self.frac;var self = $9705;switch(self._){case 'Maybe.none':var self = $9707;switch(self._){case 'Maybe.none':var $9710 = (_pst$19=>{var $9711 = Parser$Reply$value$(_pst$19,Kind$Term$nat$($9706));return $9711;});var $9709 = $9710;break;case 'Maybe.some':var $9712 = (_pst$20=>{var $9713 = Parser$Reply$value$(_pst$20,Kind$Term$num$($9705,$9706,$9707));return $9713;});var $9709 = $9712;break;};var $9708 = $9709;break;case 'Maybe.some':var $9714 = (_pst$20=>{var $9715 = Parser$Reply$value$(_pst$20,Kind$Term$num$($9705,$9706,$9707));return $9715;});var $9708 = $9714;break;};var $9704 = $9708;break;};var $9704 = $9704(_reply$pst$15);var $9698 = $9704;break;};var $9690 = $9698;break;};var $9688 = $9690;break;};return $9688;};
  const Kind$Parser$num = x0=>Kind$Parser$num$(x0);
  const Kind$Parser$reference = Kind$Parser$block("reference")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $9717=self.err;var _reply$7 = Kind$Parser$name1$(_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $9719=self.err;var self = $9717;switch(self._){case 'Maybe.some':var $9721=self.value;var $9722 = Parser$Reply$error$(Parser$Error$combine$($9721,$9719));var $9720 = $9722;break;case 'Maybe.none':var $9723 = Parser$Reply$error$($9719);var $9720 = $9723;break;};var $9718 = $9720;break;case 'Parser.Reply.value':var $9724=self.pst;var $9725=self.val;var self = $9724;switch(self._){case 'Parser.State.new':var $9727=self.err;var $9728=self.nam;var $9729=self.ini;var $9730=self.idx;var $9731=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($9717,$9727),$9728,$9729,$9730,$9731);var self = ($9725==="Type");if (self) {var $9733 = (_pst$16=>{var $9734 = Parser$Reply$value$(_pst$16,Kind$Term$typ);return $9734;});var $9732 = $9733;} else {var self = ($9725==="true");if (self) {var $9736 = (_pst$16=>{var $9737 = Parser$Reply$value$(_pst$16,Kind$Term$ref$("Bool.true"));return $9737;});var $9735 = $9736;} else {var self = ($9725==="false");if (self) {var $9739 = (_pst$16=>{var $9740 = Parser$Reply$value$(_pst$16,Kind$Term$ref$("Bool.false"));return $9740;});var $9738 = $9739;} else {var self = ($9725==="unit");if (self) {var $9742 = (_pst$16=>{var $9743 = Parser$Reply$value$(_pst$16,Kind$Term$ref$("Unit.new"));return $9743;});var $9741 = $9742;} else {var self = ($9725==="none");if (self) {var _term$16 = Kind$Term$ref$("Maybe.none");var _term$17 = Kind$Term$app$(_term$16,Kind$Term$hol$(Bits$e));var $9745 = (_pst$18=>{var $9746 = Parser$Reply$value$(_pst$18,_term$17);return $9746;});var $9744 = $9745;} else {var self = ($9725==="refl");if (self) {var _term$16 = Kind$Term$ref$("Equal.refl");var _term$17 = Kind$Term$app$(_term$16,Kind$Term$hol$(Bits$e));var _term$18 = Kind$Term$app$(_term$17,Kind$Term$hol$(Bits$e));var $9748 = (_pst$19=>{var $9749 = Parser$Reply$value$(_pst$19,_term$18);return $9749;});var $9747 = $9748;} else {var $9750 = (_pst$16=>{var $9751 = Parser$Reply$value$(_pst$16,Kind$Term$ref$($9725));return $9751;});var $9747 = $9750;};var $9744 = $9747;};var $9741 = $9744;};var $9738 = $9741;};var $9735 = $9738;};var $9732 = $9735;};var $9732 = $9732(_reply$pst$15);var $9726 = $9732;break;};var $9718 = $9726;break;};var $9716 = $9718;break;};return $9716;}));
  const List$for = a0=>a1=>a2=>(list_for(a0)(a1)(a2));
  function Kind$Parser$application$(_func$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $9753=self.err;var _reply$8 = Kind$Parser$items_now$("(",Kind$Parser$term,")")(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $9755=self.err;var self = $9753;switch(self._){case 'Maybe.some':var $9757=self.value;var $9758 = Parser$Reply$error$(Parser$Error$combine$($9757,$9755));var $9756 = $9758;break;case 'Maybe.none':var $9759 = Parser$Reply$error$($9755);var $9756 = $9759;break;};var $9754 = $9756;break;case 'Parser.Reply.value':var $9760=self.pst;var $9761=self.val;var self = $9760;switch(self._){case 'Parser.State.new':var $9763=self.err;var $9764=self.nam;var $9765=self.ini;var $9766=self.idx;var $9767=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($9753,$9763),$9764,$9765,$9766,$9767);var _expr$17 = (()=>{var $9770 = _func$1;var $9771 = $9761;let _f$18=$9770;let _x$17;while ($9771._==='List.cons') {_x$17=$9771.head;var $9770 = Kind$Term$app$(_f$18,_x$17);_f$18=$9770;$9771=$9771.tail;}return _f$18;})();var $9768 = Parser$Reply$value$(_reply$pst$16,_expr$17);var $9762 = $9768;break;};var $9754 = $9762;break;};var $9752 = $9754;break;};return $9752;};
  const Kind$Parser$application = x0=>x1=>Kind$Parser$application$(x0,x1);
  function Kind$Parser$application$erased$(_func$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $9773=self.err;var _reply$8 = Kind$Parser$items_now$("<",Kind$Parser$term,">")(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $9775=self.err;var self = $9773;switch(self._){case 'Maybe.some':var $9777=self.value;var $9778 = Parser$Reply$error$(Parser$Error$combine$($9777,$9775));var $9776 = $9778;break;case 'Maybe.none':var $9779 = Parser$Reply$error$($9775);var $9776 = $9779;break;};var $9774 = $9776;break;case 'Parser.Reply.value':var $9780=self.pst;var $9781=self.val;var self = $9780;switch(self._){case 'Parser.State.new':var $9783=self.err;var $9784=self.nam;var $9785=self.ini;var $9786=self.idx;var $9787=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($9773,$9783),$9784,$9785,$9786,$9787);var _expr$17 = (()=>{var $9790 = _func$1;var $9791 = $9781;let _f$18=$9790;let _x$17;while ($9791._==='List.cons') {_x$17=$9791.head;var $9790 = Kind$Term$app$(_f$18,_x$17);_f$18=$9790;$9791=$9791.tail;}return _f$18;})();var $9788 = Parser$Reply$value$(_reply$pst$16,_expr$17);var $9782 = $9788;break;};var $9774 = $9782;break;};var $9772 = $9774;break;};return $9772;};
  const Kind$Parser$application$erased = x0=>x1=>Kind$Parser$application$erased$(x0,x1);
  function Kind$Parser$list_set$(_list$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $9793=self.err;var _reply$8 = Kind$Parser$text_now$("[")(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $9795=self.err;var self = $9793;switch(self._){case 'Maybe.some':var $9797=self.value;var $9798 = Parser$Reply$error$(Parser$Error$combine$($9797,$9795));var $9796 = $9798;break;case 'Maybe.none':var $9799 = Parser$Reply$error$($9795);var $9796 = $9799;break;};var $9794 = $9796;break;case 'Parser.Reply.value':var $9800=self.pst;var self = $9800;switch(self._){case 'Parser.State.new':var $9802=self.err;var $9803=self.nam;var $9804=self.ini;var $9805=self.idx;var $9806=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($9793,$9802),$9803,$9804,$9805,$9806);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $9808=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $9810=self.err;var self = $9808;switch(self._){case 'Maybe.some':var $9812=self.value;var $9813 = Parser$Reply$error$(Parser$Error$combine$($9812,$9810));var $9811 = $9813;break;case 'Maybe.none':var $9814 = Parser$Reply$error$($9810);var $9811 = $9814;break;};var $9809 = $9811;break;case 'Parser.Reply.value':var $9815=self.pst;var $9816=self.val;var self = $9815;switch(self._){case 'Parser.State.new':var $9818=self.err;var $9819=self.nam;var $9820=self.ini;var $9821=self.idx;var $9822=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($9808,$9818),$9819,$9820,$9821,$9822);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $9824=self.err;var _reply$36 = Kind$Parser$text$("]",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $9826=self.err;var self = $9824;switch(self._){case 'Maybe.some':var $9828=self.value;var $9829 = Parser$Reply$error$(Parser$Error$combine$($9828,$9826));var $9827 = $9829;break;case 'Maybe.none':var $9830 = Parser$Reply$error$($9826);var $9827 = $9830;break;};var $9825 = $9827;break;case 'Parser.Reply.value':var $9831=self.pst;var self = $9831;switch(self._){case 'Parser.State.new':var $9833=self.err;var $9834=self.nam;var $9835=self.ini;var $9836=self.idx;var $9837=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($9824,$9833),$9834,$9835,$9836,$9837);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $9839=self.err;var _reply$50 = Kind$Parser$text$("<-",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $9841=self.err;var self = $9839;switch(self._){case 'Maybe.some':var $9843=self.value;var $9844 = Parser$Reply$error$(Parser$Error$combine$($9843,$9841));var $9842 = $9844;break;case 'Maybe.none':var $9845 = Parser$Reply$error$($9841);var $9842 = $9845;break;};var $9840 = $9842;break;case 'Parser.Reply.value':var $9846=self.pst;var self = $9846;switch(self._){case 'Parser.State.new':var $9848=self.err;var $9849=self.nam;var $9850=self.ini;var $9851=self.idx;var $9852=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($9839,$9848),$9849,$9850,$9851,$9852);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $9854=self.err;var _reply$64 = Kind$Parser$term(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $9856=self.err;var self = $9854;switch(self._){case 'Maybe.some':var $9858=self.value;var $9859 = Parser$Reply$error$(Parser$Error$combine$($9858,$9856));var $9857 = $9859;break;case 'Maybe.none':var $9860 = Parser$Reply$error$($9856);var $9857 = $9860;break;};var $9855 = $9857;break;case 'Parser.Reply.value':var $9861=self.pst;var $9862=self.val;var self = $9861;switch(self._){case 'Parser.State.new':var $9864=self.err;var $9865=self.nam;var $9866=self.ini;var $9867=self.idx;var $9868=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($9854,$9864),$9865,$9866,$9867,$9868);var _term$73 = Kind$Term$ref$("List.set");var _term$74 = Kind$Term$app$(_term$73,Kind$Term$hol$(Bits$e));var _term$75 = Kind$Term$app$(_term$74,$9816);var _term$76 = Kind$Term$app$(_term$75,$9862);var _term$77 = Kind$Term$app$(_term$76,_list$1);var $9869 = Parser$Reply$value$(_reply$pst$72,_term$77);var $9863 = $9869;break;};var $9855 = $9863;break;};var $9853 = $9855;break;};var $9847 = $9853;break;};var $9840 = $9847;break;};var $9838 = $9840;break;};var $9832 = $9838;break;};var $9825 = $9832;break;};var $9823 = $9825;break;};var $9817 = $9823;break;};var $9809 = $9817;break;};var $9807 = $9809;break;};var $9801 = $9807;break;};var $9794 = $9801;break;};var $9792 = $9794;break;};return $9792;};
  const Kind$Parser$list_set = x0=>x1=>Kind$Parser$list_set$(x0,x1);
  function Kind$Parser$list_get$(_list$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $9871=self.err;var _reply$8 = Kind$Parser$text_now$("[")(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $9873=self.err;var self = $9871;switch(self._){case 'Maybe.some':var $9875=self.value;var $9876 = Parser$Reply$error$(Parser$Error$combine$($9875,$9873));var $9874 = $9876;break;case 'Maybe.none':var $9877 = Parser$Reply$error$($9873);var $9874 = $9877;break;};var $9872 = $9874;break;case 'Parser.Reply.value':var $9878=self.pst;var self = $9878;switch(self._){case 'Parser.State.new':var $9880=self.err;var $9881=self.nam;var $9882=self.ini;var $9883=self.idx;var $9884=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($9871,$9880),$9881,$9882,$9883,$9884);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $9886=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $9888=self.err;var self = $9886;switch(self._){case 'Maybe.some':var $9890=self.value;var $9891 = Parser$Reply$error$(Parser$Error$combine$($9890,$9888));var $9889 = $9891;break;case 'Maybe.none':var $9892 = Parser$Reply$error$($9888);var $9889 = $9892;break;};var $9887 = $9889;break;case 'Parser.Reply.value':var $9893=self.pst;var $9894=self.val;var self = $9893;switch(self._){case 'Parser.State.new':var $9896=self.err;var $9897=self.nam;var $9898=self.ini;var $9899=self.idx;var $9900=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($9886,$9896),$9897,$9898,$9899,$9900);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $9902=self.err;var _reply$36 = Kind$Parser$text$("]",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $9904=self.err;var self = $9902;switch(self._){case 'Maybe.some':var $9906=self.value;var $9907 = Parser$Reply$error$(Parser$Error$combine$($9906,$9904));var $9905 = $9907;break;case 'Maybe.none':var $9908 = Parser$Reply$error$($9904);var $9905 = $9908;break;};var $9903 = $9905;break;case 'Parser.Reply.value':var $9909=self.pst;var self = $9909;switch(self._){case 'Parser.State.new':var $9911=self.err;var $9912=self.nam;var $9913=self.ini;var $9914=self.idx;var $9915=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($9902,$9911),$9912,$9913,$9914,$9915);var _term$45 = Kind$Term$ref$("List.get");var _term$46 = Kind$Term$app$(_term$45,Kind$Term$hol$(Bits$e));var _term$47 = Kind$Term$app$(_term$46,$9894);var _term$48 = Kind$Term$app$(_term$47,_list$1);var $9916 = Parser$Reply$value$(_reply$pst$44,_term$48);var $9910 = $9916;break;};var $9903 = $9910;break;};var $9901 = $9903;break;};var $9895 = $9901;break;};var $9887 = $9895;break;};var $9885 = $9887;break;};var $9879 = $9885;break;};var $9872 = $9879;break;};var $9870 = $9872;break;};return $9870;};
  const Kind$Parser$list_get = x0=>x1=>Kind$Parser$list_get$(x0,x1);
  function Kind$Parser$map_set$(_map$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $9918=self.err;var _reply$8 = Kind$Parser$text_now$("{")(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $9920=self.err;var self = $9918;switch(self._){case 'Maybe.some':var $9922=self.value;var $9923 = Parser$Reply$error$(Parser$Error$combine$($9922,$9920));var $9921 = $9923;break;case 'Maybe.none':var $9924 = Parser$Reply$error$($9920);var $9921 = $9924;break;};var $9919 = $9921;break;case 'Parser.Reply.value':var $9925=self.pst;var self = $9925;switch(self._){case 'Parser.State.new':var $9927=self.err;var $9928=self.nam;var $9929=self.ini;var $9930=self.idx;var $9931=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($9918,$9927),$9928,$9929,$9930,$9931);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $9933=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $9935=self.err;var self = $9933;switch(self._){case 'Maybe.some':var $9937=self.value;var $9938 = Parser$Reply$error$(Parser$Error$combine$($9937,$9935));var $9936 = $9938;break;case 'Maybe.none':var $9939 = Parser$Reply$error$($9935);var $9936 = $9939;break;};var $9934 = $9936;break;case 'Parser.Reply.value':var $9940=self.pst;var $9941=self.val;var self = $9940;switch(self._){case 'Parser.State.new':var $9943=self.err;var $9944=self.nam;var $9945=self.ini;var $9946=self.idx;var $9947=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($9933,$9943),$9944,$9945,$9946,$9947);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $9949=self.err;var _reply$36 = Kind$Parser$text$("}",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $9951=self.err;var self = $9949;switch(self._){case 'Maybe.some':var $9953=self.value;var $9954 = Parser$Reply$error$(Parser$Error$combine$($9953,$9951));var $9952 = $9954;break;case 'Maybe.none':var $9955 = Parser$Reply$error$($9951);var $9952 = $9955;break;};var $9950 = $9952;break;case 'Parser.Reply.value':var $9956=self.pst;var self = $9956;switch(self._){case 'Parser.State.new':var $9958=self.err;var $9959=self.nam;var $9960=self.ini;var $9961=self.idx;var $9962=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($9949,$9958),$9959,$9960,$9961,$9962);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $9964=self.err;var _reply$50 = Kind$Parser$text$("<-",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $9966=self.err;var self = $9964;switch(self._){case 'Maybe.some':var $9968=self.value;var $9969 = Parser$Reply$error$(Parser$Error$combine$($9968,$9966));var $9967 = $9969;break;case 'Maybe.none':var $9970 = Parser$Reply$error$($9966);var $9967 = $9970;break;};var $9965 = $9967;break;case 'Parser.Reply.value':var $9971=self.pst;var self = $9971;switch(self._){case 'Parser.State.new':var $9973=self.err;var $9974=self.nam;var $9975=self.ini;var $9976=self.idx;var $9977=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($9964,$9973),$9974,$9975,$9976,$9977);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $9979=self.err;var _reply$64 = Kind$Parser$term(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $9981=self.err;var self = $9979;switch(self._){case 'Maybe.some':var $9983=self.value;var $9984 = Parser$Reply$error$(Parser$Error$combine$($9983,$9981));var $9982 = $9984;break;case 'Maybe.none':var $9985 = Parser$Reply$error$($9981);var $9982 = $9985;break;};var $9980 = $9982;break;case 'Parser.Reply.value':var $9986=self.pst;var $9987=self.val;var self = $9986;switch(self._){case 'Parser.State.new':var $9989=self.err;var $9990=self.nam;var $9991=self.ini;var $9992=self.idx;var $9993=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($9979,$9989),$9990,$9991,$9992,$9993);var _term$73 = Kind$Term$ref$("Map.set");var _term$74 = Kind$Term$app$(_term$73,Kind$Term$hol$(Bits$e));var _term$75 = Kind$Term$app$(_term$74,$9941);var _term$76 = Kind$Term$app$(_term$75,$9987);var _term$77 = Kind$Term$app$(_term$76,_map$1);var $9994 = Parser$Reply$value$(_reply$pst$72,_term$77);var $9988 = $9994;break;};var $9980 = $9988;break;};var $9978 = $9980;break;};var $9972 = $9978;break;};var $9965 = $9972;break;};var $9963 = $9965;break;};var $9957 = $9963;break;};var $9950 = $9957;break;};var $9948 = $9950;break;};var $9942 = $9948;break;};var $9934 = $9942;break;};var $9932 = $9934;break;};var $9926 = $9932;break;};var $9919 = $9926;break;};var $9917 = $9919;break;};return $9917;};
  const Kind$Parser$map_set = x0=>x1=>Kind$Parser$map_set$(x0,x1);
  function Kind$Parser$map_get$(_map$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $9996=self.err;var _reply$8 = Kind$Parser$text_now$("{")(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $9998=self.err;var self = $9996;switch(self._){case 'Maybe.some':var $10000=self.value;var $10001 = Parser$Reply$error$(Parser$Error$combine$($10000,$9998));var $9999 = $10001;break;case 'Maybe.none':var $10002 = Parser$Reply$error$($9998);var $9999 = $10002;break;};var $9997 = $9999;break;case 'Parser.Reply.value':var $10003=self.pst;var self = $10003;switch(self._){case 'Parser.State.new':var $10005=self.err;var $10006=self.nam;var $10007=self.ini;var $10008=self.idx;var $10009=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($9996,$10005),$10006,$10007,$10008,$10009);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10011=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10013=self.err;var self = $10011;switch(self._){case 'Maybe.some':var $10015=self.value;var $10016 = Parser$Reply$error$(Parser$Error$combine$($10015,$10013));var $10014 = $10016;break;case 'Maybe.none':var $10017 = Parser$Reply$error$($10013);var $10014 = $10017;break;};var $10012 = $10014;break;case 'Parser.Reply.value':var $10018=self.pst;var $10019=self.val;var self = $10018;switch(self._){case 'Parser.State.new':var $10021=self.err;var $10022=self.nam;var $10023=self.ini;var $10024=self.idx;var $10025=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10011,$10021),$10022,$10023,$10024,$10025);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $10027=self.err;var _reply$36 = Kind$Parser$text$("}",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $10029=self.err;var self = $10027;switch(self._){case 'Maybe.some':var $10031=self.value;var $10032 = Parser$Reply$error$(Parser$Error$combine$($10031,$10029));var $10030 = $10032;break;case 'Maybe.none':var $10033 = Parser$Reply$error$($10029);var $10030 = $10033;break;};var $10028 = $10030;break;case 'Parser.Reply.value':var $10034=self.pst;var self = $10034;switch(self._){case 'Parser.State.new':var $10036=self.err;var $10037=self.nam;var $10038=self.ini;var $10039=self.idx;var $10040=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($10027,$10036),$10037,$10038,$10039,$10040);var _term$45 = Kind$Term$ref$("Map.get");var _term$46 = Kind$Term$app$(_term$45,Kind$Term$hol$(Bits$e));var _term$47 = Kind$Term$app$(_term$46,$10019);var _term$48 = Kind$Term$app$(_term$47,_map$1);var $10041 = Parser$Reply$value$(_reply$pst$44,_term$48);var $10035 = $10041;break;};var $10028 = $10035;break;};var $10026 = $10028;break;};var $10020 = $10026;break;};var $10012 = $10020;break;};var $10010 = $10012;break;};var $10004 = $10010;break;};var $9997 = $10004;break;};var $9995 = $9997;break;};return $9995;};
  const Kind$Parser$map_get = x0=>x1=>Kind$Parser$map_get$(x0,x1);
  function Kind$Term$set$(_expr$1,_fkey$2,_fval$3){var $10042 = ({_:'Kind.Term.set','expr':_expr$1,'fkey':_fkey$2,'fval':_fval$3});return $10042;};
  const Kind$Term$set = x0=>x1=>x2=>Kind$Term$set$(x0,x1,x2);
  function Kind$Parser$field_set$(_term$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10044=self.err;var _reply$8 = Kind$Parser$text$("@",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10046=self.err;var self = $10044;switch(self._){case 'Maybe.some':var $10048=self.value;var $10049 = Parser$Reply$error$(Parser$Error$combine$($10048,$10046));var $10047 = $10049;break;case 'Maybe.none':var $10050 = Parser$Reply$error$($10046);var $10047 = $10050;break;};var $10045 = $10047;break;case 'Parser.Reply.value':var $10051=self.pst;var self = $10051;switch(self._){case 'Parser.State.new':var $10053=self.err;var $10054=self.nam;var $10055=self.ini;var $10056=self.idx;var $10057=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10044,$10053),$10054,$10055,$10056,$10057);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10059=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10061=self.err;var self = $10059;switch(self._){case 'Maybe.some':var $10063=self.value;var $10064 = Parser$Reply$error$(Parser$Error$combine$($10063,$10061));var $10062 = $10064;break;case 'Maybe.none':var $10065 = Parser$Reply$error$($10061);var $10062 = $10065;break;};var $10060 = $10062;break;case 'Parser.Reply.value':var $10066=self.pst;var $10067=self.val;var self = $10066;switch(self._){case 'Parser.State.new':var $10069=self.err;var $10070=self.nam;var $10071=self.ini;var $10072=self.idx;var $10073=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10059,$10069),$10070,$10071,$10072,$10073);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $10075=self.err;var _reply$36 = Kind$Parser$text$("<-",_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $10077=self.err;var self = $10075;switch(self._){case 'Maybe.some':var $10079=self.value;var $10080 = Parser$Reply$error$(Parser$Error$combine$($10079,$10077));var $10078 = $10080;break;case 'Maybe.none':var $10081 = Parser$Reply$error$($10077);var $10078 = $10081;break;};var $10076 = $10078;break;case 'Parser.Reply.value':var $10082=self.pst;var self = $10082;switch(self._){case 'Parser.State.new':var $10084=self.err;var $10085=self.nam;var $10086=self.ini;var $10087=self.idx;var $10088=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($10075,$10084),$10085,$10086,$10087,$10088);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $10090=self.err;var _reply$50 = Kind$Parser$term(_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $10092=self.err;var self = $10090;switch(self._){case 'Maybe.some':var $10094=self.value;var $10095 = Parser$Reply$error$(Parser$Error$combine$($10094,$10092));var $10093 = $10095;break;case 'Maybe.none':var $10096 = Parser$Reply$error$($10092);var $10093 = $10096;break;};var $10091 = $10093;break;case 'Parser.Reply.value':var $10097=self.pst;var $10098=self.val;var self = $10097;switch(self._){case 'Parser.State.new':var $10100=self.err;var $10101=self.nam;var $10102=self.ini;var $10103=self.idx;var $10104=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($10090,$10100),$10101,$10102,$10103,$10104);var $10105 = Parser$Reply$value$(_reply$pst$58,Kind$Term$set$(_term$1,$10067,$10098));var $10099 = $10105;break;};var $10091 = $10099;break;};var $10089 = $10091;break;};var $10083 = $10089;break;};var $10076 = $10083;break;};var $10074 = $10076;break;};var $10068 = $10074;break;};var $10060 = $10068;break;};var $10058 = $10060;break;};var $10052 = $10058;break;};var $10045 = $10052;break;};var $10043 = $10045;break;};return $10043;};
  const Kind$Parser$field_set = x0=>x1=>Kind$Parser$field_set$(x0,x1);
  function Kind$Term$get$(_expr$1,_fkey$2){var $10106 = ({_:'Kind.Term.get','expr':_expr$1,'fkey':_fkey$2});return $10106;};
  const Kind$Term$get = x0=>x1=>Kind$Term$get$(x0,x1);
  function Kind$Parser$field_get$(_term$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10108=self.err;var _reply$8 = Kind$Parser$text$("@",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10110=self.err;var self = $10108;switch(self._){case 'Maybe.some':var $10112=self.value;var $10113 = Parser$Reply$error$(Parser$Error$combine$($10112,$10110));var $10111 = $10113;break;case 'Maybe.none':var $10114 = Parser$Reply$error$($10110);var $10111 = $10114;break;};var $10109 = $10111;break;case 'Parser.Reply.value':var $10115=self.pst;var self = $10115;switch(self._){case 'Parser.State.new':var $10117=self.err;var $10118=self.nam;var $10119=self.ini;var $10120=self.idx;var $10121=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10108,$10117),$10118,$10119,$10120,$10121);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10123=self.err;var _reply$22 = Kind$Parser$name1$(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10125=self.err;var self = $10123;switch(self._){case 'Maybe.some':var $10127=self.value;var $10128 = Parser$Reply$error$(Parser$Error$combine$($10127,$10125));var $10126 = $10128;break;case 'Maybe.none':var $10129 = Parser$Reply$error$($10125);var $10126 = $10129;break;};var $10124 = $10126;break;case 'Parser.Reply.value':var $10130=self.pst;var $10131=self.val;var self = $10130;switch(self._){case 'Parser.State.new':var $10133=self.err;var $10134=self.nam;var $10135=self.ini;var $10136=self.idx;var $10137=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10123,$10133),$10134,$10135,$10136,$10137);var $10138 = Parser$Reply$value$(_reply$pst$30,Kind$Term$get$(_term$1,$10131));var $10132 = $10138;break;};var $10124 = $10132;break;};var $10122 = $10124;break;};var $10116 = $10122;break;};var $10109 = $10116;break;};var $10107 = $10109;break;};return $10107;};
  const Kind$Parser$field_get = x0=>x1=>Kind$Parser$field_get$(x0,x1);
  function Kind$Parser$arrow$(_xtyp$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10140=self.err;var _reply$8 = Kind$Parser$text$("->",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10142=self.err;var self = $10140;switch(self._){case 'Maybe.some':var $10144=self.value;var $10145 = Parser$Reply$error$(Parser$Error$combine$($10144,$10142));var $10143 = $10145;break;case 'Maybe.none':var $10146 = Parser$Reply$error$($10142);var $10143 = $10146;break;};var $10141 = $10143;break;case 'Parser.Reply.value':var $10147=self.pst;var self = $10147;switch(self._){case 'Parser.State.new':var $10149=self.err;var $10150=self.nam;var $10151=self.ini;var $10152=self.idx;var $10153=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10140,$10149),$10150,$10151,$10152,$10153);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10155=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10157=self.err;var self = $10155;switch(self._){case 'Maybe.some':var $10159=self.value;var $10160 = Parser$Reply$error$(Parser$Error$combine$($10159,$10157));var $10158 = $10160;break;case 'Maybe.none':var $10161 = Parser$Reply$error$($10157);var $10158 = $10161;break;};var $10156 = $10158;break;case 'Parser.Reply.value':var $10162=self.pst;var $10163=self.val;var self = $10162;switch(self._){case 'Parser.State.new':var $10165=self.err;var $10166=self.nam;var $10167=self.ini;var $10168=self.idx;var $10169=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10155,$10165),$10166,$10167,$10168,$10169);var $10170 = Parser$Reply$value$(_reply$pst$30,Kind$Term$all$(Bool$false,"","",_xtyp$1,(_s$31=>_x$32=>{var $10171 = $10163;return $10171;})));var $10164 = $10170;break;};var $10156 = $10164;break;};var $10154 = $10156;break;};var $10148 = $10154;break;};var $10141 = $10148;break;};var $10139 = $10141;break;};return $10139;};
  const Kind$Parser$arrow = x0=>x1=>Kind$Parser$arrow$(x0,x1);
  function Kind$Parser$concat$(_lst0$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10173=self.err;var _reply$8 = Kind$Parser$text$("++",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10175=self.err;var self = $10173;switch(self._){case 'Maybe.some':var $10177=self.value;var $10178 = Parser$Reply$error$(Parser$Error$combine$($10177,$10175));var $10176 = $10178;break;case 'Maybe.none':var $10179 = Parser$Reply$error$($10175);var $10176 = $10179;break;};var $10174 = $10176;break;case 'Parser.Reply.value':var $10180=self.pst;var self = $10180;switch(self._){case 'Parser.State.new':var $10182=self.err;var $10183=self.nam;var $10184=self.ini;var $10185=self.idx;var $10186=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10173,$10182),$10183,$10184,$10185,$10186);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10188=self.err;var _reply$22 = Parser$text$(" ",_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10190=self.err;var self = $10188;switch(self._){case 'Maybe.some':var $10192=self.value;var $10193 = Parser$Reply$error$(Parser$Error$combine$($10192,$10190));var $10191 = $10193;break;case 'Maybe.none':var $10194 = Parser$Reply$error$($10190);var $10191 = $10194;break;};var $10189 = $10191;break;case 'Parser.Reply.value':var $10195=self.pst;var self = $10195;switch(self._){case 'Parser.State.new':var $10197=self.err;var $10198=self.nam;var $10199=self.ini;var $10200=self.idx;var $10201=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10188,$10197),$10198,$10199,$10200,$10201);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $10203=self.err;var _reply$36 = Kind$Parser$term(_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $10205=self.err;var self = $10203;switch(self._){case 'Maybe.some':var $10207=self.value;var $10208 = Parser$Reply$error$(Parser$Error$combine$($10207,$10205));var $10206 = $10208;break;case 'Maybe.none':var $10209 = Parser$Reply$error$($10205);var $10206 = $10209;break;};var $10204 = $10206;break;case 'Parser.Reply.value':var $10210=self.pst;var $10211=self.val;var self = $10210;switch(self._){case 'Parser.State.new':var $10213=self.err;var $10214=self.nam;var $10215=self.ini;var $10216=self.idx;var $10217=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($10203,$10213),$10214,$10215,$10216,$10217);var _term$45 = Kind$Term$ref$("List.concat");var _term$46 = Kind$Term$app$(_term$45,Kind$Term$hol$(Bits$e));var _term$47 = Kind$Term$app$(_term$46,_lst0$1);var _term$48 = Kind$Term$app$(_term$47,$10211);var $10218 = Parser$Reply$value$(_reply$pst$44,_term$48);var $10212 = $10218;break;};var $10204 = $10212;break;};var $10202 = $10204;break;};var $10196 = $10202;break;};var $10189 = $10196;break;};var $10187 = $10189;break;};var $10181 = $10187;break;};var $10174 = $10181;break;};var $10172 = $10174;break;};return $10172;};
  const Kind$Parser$concat = x0=>x1=>Kind$Parser$concat$(x0,x1);
  function Kind$Parser$equality$(_val0$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10220=self.err;var _reply$8 = Kind$Parser$text$("==",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10222=self.err;var self = $10220;switch(self._){case 'Maybe.some':var $10224=self.value;var $10225 = Parser$Reply$error$(Parser$Error$combine$($10224,$10222));var $10223 = $10225;break;case 'Maybe.none':var $10226 = Parser$Reply$error$($10222);var $10223 = $10226;break;};var $10221 = $10223;break;case 'Parser.Reply.value':var $10227=self.pst;var self = $10227;switch(self._){case 'Parser.State.new':var $10229=self.err;var $10230=self.nam;var $10231=self.ini;var $10232=self.idx;var $10233=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10220,$10229),$10230,$10231,$10232,$10233);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10235=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10237=self.err;var self = $10235;switch(self._){case 'Maybe.some':var $10239=self.value;var $10240 = Parser$Reply$error$(Parser$Error$combine$($10239,$10237));var $10238 = $10240;break;case 'Maybe.none':var $10241 = Parser$Reply$error$($10237);var $10238 = $10241;break;};var $10236 = $10238;break;case 'Parser.Reply.value':var $10242=self.pst;var $10243=self.val;var self = $10242;switch(self._){case 'Parser.State.new':var $10245=self.err;var $10246=self.nam;var $10247=self.ini;var $10248=self.idx;var $10249=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10235,$10245),$10246,$10247,$10248,$10249);var _term$31 = Kind$Term$ref$("Equal");var _term$32 = Kind$Term$app$(_term$31,Kind$Term$hol$(Bits$e));var _term$33 = Kind$Term$app$(_term$32,_val0$1);var _term$34 = Kind$Term$app$(_term$33,$10243);var $10250 = Parser$Reply$value$(_reply$pst$30,_term$34);var $10244 = $10250;break;};var $10236 = $10244;break;};var $10234 = $10236;break;};var $10228 = $10234;break;};var $10221 = $10228;break;};var $10219 = $10221;break;};return $10219;};
  const Kind$Parser$equality = x0=>x1=>Kind$Parser$equality$(x0,x1);
  function Kind$Term$ope$(_name$1,_arg0$2,_arg1$3){var $10251 = ({_:'Kind.Term.ope','name':_name$1,'arg0':_arg0$2,'arg1':_arg1$3});return $10251;};
  const Kind$Term$ope = x0=>x1=>x2=>Kind$Term$ope$(x0,x1,x2);
  function Kind$Parser$op$(_sym$1,_ref$2,_val0$3,_pst$4){var self = _pst$4;switch(self._){case 'Parser.State.new':var $10253=self.err;var _reply$10 = Kind$Parser$text$(_sym$1,_pst$4);var self = _reply$10;switch(self._){case 'Parser.Reply.error':var $10255=self.err;var self = $10253;switch(self._){case 'Maybe.some':var $10257=self.value;var $10258 = Parser$Reply$error$(Parser$Error$combine$($10257,$10255));var $10256 = $10258;break;case 'Maybe.none':var $10259 = Parser$Reply$error$($10255);var $10256 = $10259;break;};var $10254 = $10256;break;case 'Parser.Reply.value':var $10260=self.pst;var self = $10260;switch(self._){case 'Parser.State.new':var $10262=self.err;var $10263=self.nam;var $10264=self.ini;var $10265=self.idx;var $10266=self.str;var _reply$pst$18 = Parser$State$new$(Parser$Error$maybe_combine$($10253,$10262),$10263,$10264,$10265,$10266);var self = _reply$pst$18;switch(self._){case 'Parser.State.new':var $10268=self.err;var _reply$24 = Kind$Parser$term(_reply$pst$18);var self = _reply$24;switch(self._){case 'Parser.Reply.error':var $10270=self.err;var self = $10268;switch(self._){case 'Maybe.some':var $10272=self.value;var $10273 = Parser$Reply$error$(Parser$Error$combine$($10272,$10270));var $10271 = $10273;break;case 'Maybe.none':var $10274 = Parser$Reply$error$($10270);var $10271 = $10274;break;};var $10269 = $10271;break;case 'Parser.Reply.value':var $10275=self.pst;var $10276=self.val;var self = $10275;switch(self._){case 'Parser.State.new':var $10278=self.err;var $10279=self.nam;var $10280=self.ini;var $10281=self.idx;var $10282=self.str;var _reply$pst$32 = Parser$State$new$(Parser$Error$maybe_combine$($10268,$10278),$10279,$10280,$10281,$10282);var $10283 = Parser$Reply$value$(_reply$pst$32,Kind$Term$ope$(_sym$1,_val0$3,$10276));var $10277 = $10283;break;};var $10269 = $10277;break;};var $10267 = $10269;break;};var $10261 = $10267;break;};var $10254 = $10261;break;};var $10252 = $10254;break;};return $10252;};
  const Kind$Parser$op = x0=>x1=>x2=>x3=>Kind$Parser$op$(x0,x1,x2,x3);
  const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
  const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
  const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
  const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
  const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
  const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
  const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
  const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
  const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
  const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
  const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
  const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");
  function Kind$Parser$composition$(_val0$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10285=self.err;var _reply$8 = Kind$Parser$text$(".",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10287=self.err;var self = $10285;switch(self._){case 'Maybe.some':var $10289=self.value;var $10290 = Parser$Reply$error$(Parser$Error$combine$($10289,$10287));var $10288 = $10290;break;case 'Maybe.none':var $10291 = Parser$Reply$error$($10287);var $10288 = $10291;break;};var $10286 = $10288;break;case 'Parser.Reply.value':var $10292=self.pst;var self = $10292;switch(self._){case 'Parser.State.new':var $10294=self.err;var $10295=self.nam;var $10296=self.ini;var $10297=self.idx;var $10298=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10285,$10294),$10295,$10296,$10297,$10298);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10300=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10302=self.err;var self = $10300;switch(self._){case 'Maybe.some':var $10304=self.value;var $10305 = Parser$Reply$error$(Parser$Error$combine$($10304,$10302));var $10303 = $10305;break;case 'Maybe.none':var $10306 = Parser$Reply$error$($10302);var $10303 = $10306;break;};var $10301 = $10303;break;case 'Parser.Reply.value':var $10307=self.pst;var $10308=self.val;var self = $10307;switch(self._){case 'Parser.State.new':var $10310=self.err;var $10311=self.nam;var $10312=self.ini;var $10313=self.idx;var $10314=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10300,$10310),$10311,$10312,$10313,$10314);var _term$31 = Kind$Term$ref$("Function.comp");var _term$32 = Kind$Term$app$(_term$31,Kind$Term$hol$(Bits$e));var _term$33 = Kind$Term$app$(_term$32,Kind$Term$hol$(Bits$e));var _term$34 = Kind$Term$app$(_term$33,Kind$Term$hol$(Bits$e));var _term$35 = Kind$Term$app$(_term$34,_val0$1);var _term$36 = Kind$Term$app$(_term$35,$10308);var $10315 = Parser$Reply$value$(_reply$pst$30,_term$36);var $10309 = $10315;break;};var $10301 = $10309;break;};var $10299 = $10301;break;};var $10293 = $10299;break;};var $10286 = $10293;break;};var $10284 = $10286;break;};return $10284;};
  const Kind$Parser$composition = x0=>x1=>Kind$Parser$composition$(x0,x1);
  function Kind$Parser$default$(_val0$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10317=self.err;var _reply$8 = Kind$Parser$text$("<>",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10319=self.err;var self = $10317;switch(self._){case 'Maybe.some':var $10321=self.value;var $10322 = Parser$Reply$error$(Parser$Error$combine$($10321,$10319));var $10320 = $10322;break;case 'Maybe.none':var $10323 = Parser$Reply$error$($10319);var $10320 = $10323;break;};var $10318 = $10320;break;case 'Parser.Reply.value':var $10324=self.pst;var self = $10324;switch(self._){case 'Parser.State.new':var $10326=self.err;var $10327=self.nam;var $10328=self.ini;var $10329=self.idx;var $10330=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10317,$10326),$10327,$10328,$10329,$10330);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10332=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10334=self.err;var self = $10332;switch(self._){case 'Maybe.some':var $10336=self.value;var $10337 = Parser$Reply$error$(Parser$Error$combine$($10336,$10334));var $10335 = $10337;break;case 'Maybe.none':var $10338 = Parser$Reply$error$($10334);var $10335 = $10338;break;};var $10333 = $10335;break;case 'Parser.Reply.value':var $10339=self.pst;var $10340=self.val;var self = $10339;switch(self._){case 'Parser.State.new':var $10342=self.err;var $10343=self.nam;var $10344=self.ini;var $10345=self.idx;var $10346=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10332,$10342),$10343,$10344,$10345,$10346);var _term$31 = Kind$Term$ref$("Maybe.default");var _term$32 = Kind$Term$app$(_term$31,Kind$Term$hol$(Bits$e));var _term$33 = Kind$Term$app$(_term$32,_val0$1);var _term$34 = Kind$Term$app$(_term$33,$10340);var $10347 = Parser$Reply$value$(_reply$pst$30,_term$34);var $10341 = $10347;break;};var $10333 = $10341;break;};var $10331 = $10333;break;};var $10325 = $10331;break;};var $10318 = $10325;break;};var $10316 = $10318;break;};return $10316;};
  const Kind$Parser$default = x0=>x1=>Kind$Parser$default$(x0,x1);
  function Kind$Parser$cons$(_head$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10349=self.err;var _reply$8 = Kind$Parser$text$("&",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10351=self.err;var self = $10349;switch(self._){case 'Maybe.some':var $10353=self.value;var $10354 = Parser$Reply$error$(Parser$Error$combine$($10353,$10351));var $10352 = $10354;break;case 'Maybe.none':var $10355 = Parser$Reply$error$($10351);var $10352 = $10355;break;};var $10350 = $10352;break;case 'Parser.Reply.value':var $10356=self.pst;var self = $10356;switch(self._){case 'Parser.State.new':var $10358=self.err;var $10359=self.nam;var $10360=self.ini;var $10361=self.idx;var $10362=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10349,$10358),$10359,$10360,$10361,$10362);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10364=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10366=self.err;var self = $10364;switch(self._){case 'Maybe.some':var $10368=self.value;var $10369 = Parser$Reply$error$(Parser$Error$combine$($10368,$10366));var $10367 = $10369;break;case 'Maybe.none':var $10370 = Parser$Reply$error$($10366);var $10367 = $10370;break;};var $10365 = $10367;break;case 'Parser.Reply.value':var $10371=self.pst;var $10372=self.val;var self = $10371;switch(self._){case 'Parser.State.new':var $10374=self.err;var $10375=self.nam;var $10376=self.ini;var $10377=self.idx;var $10378=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10364,$10374),$10375,$10376,$10377,$10378);var _term$31 = Kind$Term$ref$("List.cons");var _term$32 = Kind$Term$app$(_term$31,Kind$Term$hol$(Bits$e));var _term$33 = Kind$Term$app$(_term$32,_head$1);var _term$34 = Kind$Term$app$(_term$33,$10372);var $10379 = Parser$Reply$value$(_reply$pst$30,_term$34);var $10373 = $10379;break;};var $10365 = $10373;break;};var $10363 = $10365;break;};var $10357 = $10363;break;};var $10350 = $10357;break;};var $10348 = $10350;break;};return $10348;};
  const Kind$Parser$cons = x0=>x1=>Kind$Parser$cons$(x0,x1);
  function Kind$Parser$string_concat$(_str0$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10381=self.err;var _reply$8 = Kind$Parser$text$("|",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10383=self.err;var self = $10381;switch(self._){case 'Maybe.some':var $10385=self.value;var $10386 = Parser$Reply$error$(Parser$Error$combine$($10385,$10383));var $10384 = $10386;break;case 'Maybe.none':var $10387 = Parser$Reply$error$($10383);var $10384 = $10387;break;};var $10382 = $10384;break;case 'Parser.Reply.value':var $10388=self.pst;var self = $10388;switch(self._){case 'Parser.State.new':var $10390=self.err;var $10391=self.nam;var $10392=self.ini;var $10393=self.idx;var $10394=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10381,$10390),$10391,$10392,$10393,$10394);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10396=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10398=self.err;var self = $10396;switch(self._){case 'Maybe.some':var $10400=self.value;var $10401 = Parser$Reply$error$(Parser$Error$combine$($10400,$10398));var $10399 = $10401;break;case 'Maybe.none':var $10402 = Parser$Reply$error$($10398);var $10399 = $10402;break;};var $10397 = $10399;break;case 'Parser.Reply.value':var $10403=self.pst;var $10404=self.val;var self = $10403;switch(self._){case 'Parser.State.new':var $10406=self.err;var $10407=self.nam;var $10408=self.ini;var $10409=self.idx;var $10410=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10396,$10406),$10407,$10408,$10409,$10410);var _term$31 = Kind$Term$ref$("String.concat");var _term$32 = Kind$Term$app$(_term$31,_str0$1);var _term$33 = Kind$Term$app$(_term$32,$10404);var $10411 = Parser$Reply$value$(_reply$pst$30,_term$33);var $10405 = $10411;break;};var $10397 = $10405;break;};var $10395 = $10397;break;};var $10389 = $10395;break;};var $10382 = $10389;break;};var $10380 = $10382;break;};return $10380;};
  const Kind$Parser$string_concat = x0=>x1=>Kind$Parser$string_concat$(x0,x1);
  function Kind$Parser$sigma$(_val0$1){var $10412 = Kind$Parser$block("sigma")((_pst$2=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $10414=self.err;var _reply$8 = Kind$Parser$text$("~",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10416=self.err;var self = $10414;switch(self._){case 'Maybe.some':var $10418=self.value;var $10419 = Parser$Reply$error$(Parser$Error$combine$($10418,$10416));var $10417 = $10419;break;case 'Maybe.none':var $10420 = Parser$Reply$error$($10416);var $10417 = $10420;break;};var $10415 = $10417;break;case 'Parser.Reply.value':var $10421=self.pst;var self = $10421;switch(self._){case 'Parser.State.new':var $10423=self.err;var $10424=self.nam;var $10425=self.ini;var $10426=self.idx;var $10427=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10414,$10423),$10424,$10425,$10426,$10427);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10429=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10431=self.err;var self = $10429;switch(self._){case 'Maybe.some':var $10433=self.value;var $10434 = Parser$Reply$error$(Parser$Error$combine$($10433,$10431));var $10432 = $10434;break;case 'Maybe.none':var $10435 = Parser$Reply$error$($10431);var $10432 = $10435;break;};var $10430 = $10432;break;case 'Parser.Reply.value':var $10436=self.pst;var $10437=self.val;var self = $10436;switch(self._){case 'Parser.State.new':var $10439=self.err;var $10440=self.nam;var $10441=self.ini;var $10442=self.idx;var $10443=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10429,$10439),$10440,$10441,$10442,$10443);var _term$31 = Kind$Term$ref$("Sigma.new");var _term$32 = Kind$Term$app$(_term$31,Kind$Term$hol$(Bits$e));var _term$33 = Kind$Term$app$(_term$32,Kind$Term$hol$(Bits$e));var _term$34 = Kind$Term$app$(_term$33,_val0$1);var _term$35 = Kind$Term$app$(_term$34,$10437);var $10444 = Parser$Reply$value$(_reply$pst$30,_term$35);var $10438 = $10444;break;};var $10430 = $10438;break;};var $10428 = $10430;break;};var $10422 = $10428;break;};var $10415 = $10422;break;};var $10413 = $10415;break;};return $10413;}));return $10412;};
  const Kind$Parser$sigma = x0=>Kind$Parser$sigma$(x0);
  function Kind$Parser$inequality$(_val0$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10446=self.err;var _reply$8 = Kind$Parser$text$("!=",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10448=self.err;var self = $10446;switch(self._){case 'Maybe.some':var $10450=self.value;var $10451 = Parser$Reply$error$(Parser$Error$combine$($10450,$10448));var $10449 = $10451;break;case 'Maybe.none':var $10452 = Parser$Reply$error$($10448);var $10449 = $10452;break;};var $10447 = $10449;break;case 'Parser.Reply.value':var $10453=self.pst;var self = $10453;switch(self._){case 'Parser.State.new':var $10455=self.err;var $10456=self.nam;var $10457=self.ini;var $10458=self.idx;var $10459=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10446,$10455),$10456,$10457,$10458,$10459);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10461=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10463=self.err;var self = $10461;switch(self._){case 'Maybe.some':var $10465=self.value;var $10466 = Parser$Reply$error$(Parser$Error$combine$($10465,$10463));var $10464 = $10466;break;case 'Maybe.none':var $10467 = Parser$Reply$error$($10463);var $10464 = $10467;break;};var $10462 = $10464;break;case 'Parser.Reply.value':var $10468=self.pst;var $10469=self.val;var self = $10468;switch(self._){case 'Parser.State.new':var $10471=self.err;var $10472=self.nam;var $10473=self.ini;var $10474=self.idx;var $10475=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10461,$10471),$10472,$10473,$10474,$10475);var _term$31 = Kind$Term$ref$("Equal");var _term$32 = Kind$Term$app$(_term$31,Kind$Term$hol$(Bits$e));var _term$33 = Kind$Term$app$(_term$32,_val0$1);var _term$34 = Kind$Term$app$(_term$33,$10469);var _term$35 = Kind$Term$app$(Kind$Term$ref$("Not"),_term$34);var $10476 = Parser$Reply$value$(_reply$pst$30,_term$35);var $10470 = $10476;break;};var $10462 = $10470;break;};var $10460 = $10462;break;};var $10454 = $10460;break;};var $10447 = $10454;break;};var $10445 = $10447;break;};return $10445;};
  const Kind$Parser$inequality = x0=>x1=>Kind$Parser$inequality$(x0,x1);
  function Kind$Parser$rewrite$(_subt$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10478=self.err;var _reply$8 = Kind$Parser$text$("::",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10480=self.err;var self = $10478;switch(self._){case 'Maybe.some':var $10482=self.value;var $10483 = Parser$Reply$error$(Parser$Error$combine$($10482,$10480));var $10481 = $10483;break;case 'Maybe.none':var $10484 = Parser$Reply$error$($10480);var $10481 = $10484;break;};var $10479 = $10481;break;case 'Parser.Reply.value':var $10485=self.pst;var self = $10485;switch(self._){case 'Parser.State.new':var $10487=self.err;var $10488=self.nam;var $10489=self.ini;var $10490=self.idx;var $10491=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10478,$10487),$10488,$10489,$10490,$10491);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10493=self.err;var _reply$22 = Kind$Parser$text$("rewrite",_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10495=self.err;var self = $10493;switch(self._){case 'Maybe.some':var $10497=self.value;var $10498 = Parser$Reply$error$(Parser$Error$combine$($10497,$10495));var $10496 = $10498;break;case 'Maybe.none':var $10499 = Parser$Reply$error$($10495);var $10496 = $10499;break;};var $10494 = $10496;break;case 'Parser.Reply.value':var $10500=self.pst;var self = $10500;switch(self._){case 'Parser.State.new':var $10502=self.err;var $10503=self.nam;var $10504=self.ini;var $10505=self.idx;var $10506=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10493,$10502),$10503,$10504,$10505,$10506);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $10508=self.err;var _reply$36 = Kind$Parser$name1$(_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $10510=self.err;var self = $10508;switch(self._){case 'Maybe.some':var $10512=self.value;var $10513 = Parser$Reply$error$(Parser$Error$combine$($10512,$10510));var $10511 = $10513;break;case 'Maybe.none':var $10514 = Parser$Reply$error$($10510);var $10511 = $10514;break;};var $10509 = $10511;break;case 'Parser.Reply.value':var $10515=self.pst;var $10516=self.val;var self = $10515;switch(self._){case 'Parser.State.new':var $10518=self.err;var $10519=self.nam;var $10520=self.ini;var $10521=self.idx;var $10522=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($10508,$10518),$10519,$10520,$10521,$10522);var self = _reply$pst$44;switch(self._){case 'Parser.State.new':var $10524=self.err;var _reply$50 = Kind$Parser$text$("in",_reply$pst$44);var self = _reply$50;switch(self._){case 'Parser.Reply.error':var $10526=self.err;var self = $10524;switch(self._){case 'Maybe.some':var $10528=self.value;var $10529 = Parser$Reply$error$(Parser$Error$combine$($10528,$10526));var $10527 = $10529;break;case 'Maybe.none':var $10530 = Parser$Reply$error$($10526);var $10527 = $10530;break;};var $10525 = $10527;break;case 'Parser.Reply.value':var $10531=self.pst;var self = $10531;switch(self._){case 'Parser.State.new':var $10533=self.err;var $10534=self.nam;var $10535=self.ini;var $10536=self.idx;var $10537=self.str;var _reply$pst$58 = Parser$State$new$(Parser$Error$maybe_combine$($10524,$10533),$10534,$10535,$10536,$10537);var self = _reply$pst$58;switch(self._){case 'Parser.State.new':var $10539=self.err;var _reply$64 = Kind$Parser$term(_reply$pst$58);var self = _reply$64;switch(self._){case 'Parser.Reply.error':var $10541=self.err;var self = $10539;switch(self._){case 'Maybe.some':var $10543=self.value;var $10544 = Parser$Reply$error$(Parser$Error$combine$($10543,$10541));var $10542 = $10544;break;case 'Maybe.none':var $10545 = Parser$Reply$error$($10541);var $10542 = $10545;break;};var $10540 = $10542;break;case 'Parser.Reply.value':var $10546=self.pst;var $10547=self.val;var self = $10546;switch(self._){case 'Parser.State.new':var $10549=self.err;var $10550=self.nam;var $10551=self.ini;var $10552=self.idx;var $10553=self.str;var _reply$pst$72 = Parser$State$new$(Parser$Error$maybe_combine$($10539,$10549),$10550,$10551,$10552,$10553);var self = _reply$pst$72;switch(self._){case 'Parser.State.new':var $10555=self.err;var _reply$78 = Kind$Parser$text$("with",_reply$pst$72);var self = _reply$78;switch(self._){case 'Parser.Reply.error':var $10557=self.err;var self = $10555;switch(self._){case 'Maybe.some':var $10559=self.value;var $10560 = Parser$Reply$error$(Parser$Error$combine$($10559,$10557));var $10558 = $10560;break;case 'Maybe.none':var $10561 = Parser$Reply$error$($10557);var $10558 = $10561;break;};var $10556 = $10558;break;case 'Parser.Reply.value':var $10562=self.pst;var self = $10562;switch(self._){case 'Parser.State.new':var $10564=self.err;var $10565=self.nam;var $10566=self.ini;var $10567=self.idx;var $10568=self.str;var _reply$pst$86 = Parser$State$new$(Parser$Error$maybe_combine$($10555,$10564),$10565,$10566,$10567,$10568);var self = _reply$pst$86;switch(self._){case 'Parser.State.new':var $10570=self.err;var _reply$92 = Kind$Parser$term(_reply$pst$86);var self = _reply$92;switch(self._){case 'Parser.Reply.error':var $10572=self.err;var self = $10570;switch(self._){case 'Maybe.some':var $10574=self.value;var $10575 = Parser$Reply$error$(Parser$Error$combine$($10574,$10572));var $10573 = $10575;break;case 'Maybe.none':var $10576 = Parser$Reply$error$($10572);var $10573 = $10576;break;};var $10571 = $10573;break;case 'Parser.Reply.value':var $10577=self.pst;var $10578=self.val;var self = $10577;switch(self._){case 'Parser.State.new':var $10580=self.err;var $10581=self.nam;var $10582=self.ini;var $10583=self.idx;var $10584=self.str;var _reply$pst$100 = Parser$State$new$(Parser$Error$maybe_combine$($10570,$10580),$10581,$10582,$10583,$10584);var _term$101 = Kind$Term$ref$("Equal.rewrite");var _term$102 = Kind$Term$app$(_term$101,Kind$Term$hol$(Bits$e));var _term$103 = Kind$Term$app$(_term$102,Kind$Term$hol$(Bits$e));var _term$104 = Kind$Term$app$(_term$103,Kind$Term$hol$(Bits$e));var _term$105 = Kind$Term$app$(_term$104,$10578);var _term$106 = Kind$Term$app$(_term$105,Kind$Term$lam$($10516,(_x$106=>{var $10586 = $10547;return $10586;})));var _term$107 = Kind$Term$app$(_term$106,_subt$1);var $10585 = Parser$Reply$value$(_reply$pst$100,_term$107);var $10579 = $10585;break;};var $10571 = $10579;break;};var $10569 = $10571;break;};var $10563 = $10569;break;};var $10556 = $10563;break;};var $10554 = $10556;break;};var $10548 = $10554;break;};var $10540 = $10548;break;};var $10538 = $10540;break;};var $10532 = $10538;break;};var $10525 = $10532;break;};var $10523 = $10525;break;};var $10517 = $10523;break;};var $10509 = $10517;break;};var $10507 = $10509;break;};var $10501 = $10507;break;};var $10494 = $10501;break;};var $10492 = $10494;break;};var $10486 = $10492;break;};var $10479 = $10486;break;};var $10477 = $10479;break;};return $10477;};
  const Kind$Parser$rewrite = x0=>x1=>Kind$Parser$rewrite$(x0,x1);
  function Kind$Parser$annotation$(_term$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10588=self.err;var _reply$8 = Kind$Parser$text$("::",_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10590=self.err;var self = $10588;switch(self._){case 'Maybe.some':var $10592=self.value;var $10593 = Parser$Reply$error$(Parser$Error$combine$($10592,$10590));var $10591 = $10593;break;case 'Maybe.none':var $10594 = Parser$Reply$error$($10590);var $10591 = $10594;break;};var $10589 = $10591;break;case 'Parser.Reply.value':var $10595=self.pst;var self = $10595;switch(self._){case 'Parser.State.new':var $10597=self.err;var $10598=self.nam;var $10599=self.ini;var $10600=self.idx;var $10601=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10588,$10597),$10598,$10599,$10600,$10601);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10603=self.err;var _reply$22 = Kind$Parser$term(_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10605=self.err;var self = $10603;switch(self._){case 'Maybe.some':var $10607=self.value;var $10608 = Parser$Reply$error$(Parser$Error$combine$($10607,$10605));var $10606 = $10608;break;case 'Maybe.none':var $10609 = Parser$Reply$error$($10605);var $10606 = $10609;break;};var $10604 = $10606;break;case 'Parser.Reply.value':var $10610=self.pst;var $10611=self.val;var self = $10610;switch(self._){case 'Parser.State.new':var $10613=self.err;var $10614=self.nam;var $10615=self.ini;var $10616=self.idx;var $10617=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10603,$10613),$10614,$10615,$10616,$10617);var $10618 = Parser$Reply$value$(_reply$pst$30,Kind$Term$ann$(Bool$false,_term$1,$10611));var $10612 = $10618;break;};var $10604 = $10612;break;};var $10602 = $10604;break;};var $10596 = $10602;break;};var $10589 = $10596;break;};var $10587 = $10589;break;};return $10587;};
  const Kind$Parser$annotation = x0=>x1=>Kind$Parser$annotation$(x0,x1);
  function Kind$Parser$application$hole$(_term$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10620=self.err;var _reply$8 = Kind$Parser$text_now$("!")(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10622=self.err;var self = $10620;switch(self._){case 'Maybe.some':var $10624=self.value;var $10625 = Parser$Reply$error$(Parser$Error$combine$($10624,$10622));var $10623 = $10625;break;case 'Maybe.none':var $10626 = Parser$Reply$error$($10622);var $10623 = $10626;break;};var $10621 = $10623;break;case 'Parser.Reply.value':var $10627=self.pst;var self = $10627;switch(self._){case 'Parser.State.new':var $10629=self.err;var $10630=self.nam;var $10631=self.ini;var $10632=self.idx;var $10633=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10620,$10629),$10630,$10631,$10632,$10633);var $10634 = Parser$Reply$value$(_reply$pst$16,Kind$Term$app$(_term$1,Kind$Term$hol$(Bits$e)));var $10628 = $10634;break;};var $10621 = $10628;break;};var $10619 = $10621;break;};return $10619;};
  const Kind$Parser$application$hole = x0=>x1=>Kind$Parser$application$hole$(x0,x1);
  function Kind$Parser$term$suffix$(_term$1,_pst$2){var Kind$Parser$term$suffix$=(_term$1,_pst$2)=>({ctr:'TCO',arg:[_term$1,_pst$2]});var Kind$Parser$term$suffix=_term$1=>_pst$2=>Kind$Parser$term$suffix$(_term$1,_pst$2);var arg=[_term$1,_pst$2];while(true){let [_term$1,_pst$2]=arg;var R=(()=>{var self = _pst$2;switch(self._){case 'Parser.State.new':var $10635=self.err;var $10636=self.nam;var $10637=self.ini;var $10638=self.idx;var $10639=self.str;var _suffix_parser$8 = Parser$choice(List$cons$(Kind$Parser$application(_term$1),List$cons$(Kind$Parser$application$erased(_term$1),List$cons$(Kind$Parser$list_set(_term$1),List$cons$(Kind$Parser$list_get(_term$1),List$cons$(Kind$Parser$map_set(_term$1),List$cons$(Kind$Parser$map_get(_term$1),List$cons$(Kind$Parser$field_set(_term$1),List$cons$(Kind$Parser$field_get(_term$1),List$cons$(Kind$Parser$arrow(_term$1),List$cons$(Kind$Parser$concat(_term$1),List$cons$(Kind$Parser$equality(_term$1),List$cons$(Kind$Parser$add(_term$1),List$cons$(Kind$Parser$sub(_term$1),List$cons$(Kind$Parser$mul(_term$1),List$cons$(Kind$Parser$div(_term$1),List$cons$(Kind$Parser$mod(_term$1),List$cons$(Kind$Parser$ltn(_term$1),List$cons$(Kind$Parser$lte(_term$1),List$cons$(Kind$Parser$eql(_term$1),List$cons$(Kind$Parser$gte(_term$1),List$cons$(Kind$Parser$gtn(_term$1),List$cons$(Kind$Parser$and(_term$1),List$cons$(Kind$Parser$or(_term$1),List$cons$(Kind$Parser$composition(_term$1),List$cons$(Kind$Parser$default(_term$1),List$cons$(Kind$Parser$cons(_term$1),List$cons$(Kind$Parser$string_concat(_term$1),List$cons$(Kind$Parser$sigma$(_term$1),List$cons$(Kind$Parser$inequality(_term$1),List$cons$(Kind$Parser$rewrite(_term$1),List$cons$(Kind$Parser$annotation(_term$1),List$cons$(Kind$Parser$application$hole(_term$1),List$nil)))))))))))))))))))))))))))))))));var self = _suffix_parser$8(_pst$2);switch(self._){case 'Parser.Reply.error':var $10641=self.err;var self = $10641;switch(self._){case 'Parser.Error.new':var _err$14 = Parser$Error$maybe_combine$($10635,Maybe$some$($10641));var _pst$15 = Parser$State$new$(_err$14,$10636,$10637,$10638,$10639);var $10643 = Parser$Reply$value$(_pst$15,_term$1);var $10642 = $10643;break;};var $10640 = $10642;break;case 'Parser.Reply.value':var $10644=self.pst;var $10645=self.val;var $10646 = Kind$Parser$term$suffix$($10645,$10644);var $10640 = $10646;break;};return $10640;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Parser$term$suffix = x0=>x1=>Kind$Parser$term$suffix$(x0,x1);
  const Kind$Parser$term = Kind$Parser$block("term")((_pst$1=>{var self = _pst$1;switch(self._){case 'Parser.State.new':var $10648=self.err;var _reply$7 = Parser$choice$(List$cons$(Kind$Parser$dom,List$cons$(Kind$Parser$forall,List$cons$(Kind$Parser$lambda,List$cons$(Kind$Parser$lambda$erased,List$cons$(Kind$Parser$parenthesis,List$cons$(Kind$Parser$letforrange$u32$((_x$7=>{var $10650 = Kind$Parser$term;return $10650;})),List$cons$(Kind$Parser$letforrange$u32$with$((_x$7=>{var $10651 = Kind$Parser$term;return $10651;})),List$cons$(Kind$Parser$letforrange$i32$((_x$7=>{var $10652 = Kind$Parser$term;return $10652;})),List$cons$(Kind$Parser$letforrange$i32$with$((_x$7=>{var $10653 = Kind$Parser$term;return $10653;})),List$cons$(Kind$Parser$letforrange$nat$((_x$7=>{var $10654 = Kind$Parser$term;return $10654;})),List$cons$(Kind$Parser$letforrange$nat$with$((_x$7=>{var $10655 = Kind$Parser$term;return $10655;})),List$cons$(Kind$Parser$letforin$((_x$7=>{var $10656 = Kind$Parser$term;return $10656;})),List$cons$(Kind$Parser$letforin$with$((_x$7=>{var $10657 = Kind$Parser$term;return $10657;})),List$cons$(Kind$Parser$letforinmap$((_x$7=>{var $10658 = Kind$Parser$term;return $10658;})),List$cons$(Kind$Parser$letforinmap$with$((_x$7=>{var $10659 = Kind$Parser$term;return $10659;})),List$cons$(Kind$Parser$letwhile$((_x$7=>{var $10660 = Kind$Parser$term;return $10660;})),List$cons$(Kind$Parser$letwhile$with$((_x$7=>{var $10661 = Kind$Parser$term;return $10661;})),List$cons$(Kind$Parser$let$abort$((_x$7=>{var $10662 = Kind$Parser$term;return $10662;})),List$cons$(Kind$Parser$let$((_x$7=>{var $10663 = Kind$Parser$term;return $10663;})),List$cons$(Kind$Parser$let$omit$((_x$7=>{var $10664 = Kind$Parser$term;return $10664;})),List$cons$(Kind$Parser$getwhile$((_x$7=>{var $10665 = Kind$Parser$term;return $10665;})),List$cons$(Kind$Parser$getwhile$with((_x$7=>{var $10666 = Kind$Parser$term;return $10666;})),List$cons$(Kind$Parser$get$((_x$7=>{var $10667 = Kind$Parser$term;return $10667;})),List$cons$(Kind$Parser$get$omit$((_x$7=>{var $10668 = Kind$Parser$term;return $10668;})),List$cons$(Kind$Parser$def$((_x$7=>{var $10669 = Kind$Parser$term;return $10669;})),List$cons$(Kind$Parser$use$abort$((_x$7=>{var $10670 = Kind$Parser$term;return $10670;})),List$cons$(Kind$Parser$use$((_x$7=>{var $10671 = Kind$Parser$term;return $10671;})),List$cons$(Kind$Parser$goal_rewrite,List$cons$(Kind$Parser$if,List$cons$(Kind$Parser$char,List$cons$(Kind$Parser$string$(34),List$cons$(Kind$Parser$string$(96),List$cons$(Kind$Parser$new,List$cons$(Kind$Parser$sigma$type,List$cons$(Kind$Parser$some,List$cons$(Kind$Parser$not,List$cons$(Kind$Parser$left,List$cons$(Kind$Parser$right,List$cons$(Kind$Parser$apply,List$cons$(Kind$Parser$chain,List$cons$(Kind$Parser$mirror,List$cons$(Kind$Parser$comprehension,List$cons$(Kind$Parser$comprehension_range,List$cons$(Kind$Parser$list,List$cons$(Kind$Parser$map,List$cons$(Kind$Parser$log$((_x$7=>{var $10672 = Kind$Parser$term;return $10672;})),List$cons$(Kind$Parser$do,List$cons$(Kind$Parser$case,List$cons$(Kind$Parser$open$((_x$7=>{var $10673 = Kind$Parser$term;return $10673;})),List$cons$(Kind$Parser$without,List$cons$(Kind$Parser$switch,List$cons$(Kind$Parser$goal,List$cons$(Kind$Parser$hole,List$cons$(Kind$Parser$float$64,List$cons$(Kind$Parser$float$32,List$cons$(Kind$Parser$machine_integer$signed$(256n),List$cons$(Kind$Parser$machine_integer$signed$(128n),List$cons$(Kind$Parser$machine_integer$signed$(64n),List$cons$(Kind$Parser$machine_integer$signed$(32n),List$cons$(Kind$Parser$machine_integer$signed$(16n),List$cons$(Kind$Parser$machine_integer$signed$(8n),List$cons$(Kind$Parser$machine_integer$unsigned$(256n),List$cons$(Kind$Parser$machine_integer$unsigned$(128n),List$cons$(Kind$Parser$machine_integer$unsigned$(64n),List$cons$(Kind$Parser$machine_integer$unsigned$(32n),List$cons$(Kind$Parser$machine_integer$unsigned$(16n),List$cons$(Kind$Parser$machine_integer$unsigned$(8n),List$cons$(Kind$Parser$u64,List$cons$(Kind$Parser$u32,List$cons$(Kind$Parser$u16,List$cons$(Kind$Parser$u8,List$cons$(Kind$Parser$num,List$cons$(Kind$Parser$reference,List$cons$((_pst$7=>{var self = _pst$7;switch(self._){case 'Parser.State.new':var $10675=self.err;var _reply$13 = Kind$Parser$spaces(_pst$7);var self = _reply$13;switch(self._){case 'Parser.Reply.error':var $10677=self.err;var self = $10675;switch(self._){case 'Maybe.some':var $10679=self.value;var $10680 = Parser$Reply$error$(Parser$Error$combine$($10679,$10677));var $10678 = $10680;break;case 'Maybe.none':var $10681 = Parser$Reply$error$($10677);var $10678 = $10681;break;};var $10676 = $10678;break;case 'Parser.Reply.value':var $10682=self.pst;var self = $10682;switch(self._){case 'Parser.State.new':var $10684=self.err;var $10685=self.nam;var $10686=self.ini;var $10687=self.idx;var $10688=self.str;var _reply$pst$21 = Parser$State$new$(Parser$Error$maybe_combine$($10675,$10684),$10685,$10686,$10687,$10688);var $10689 = Parser$fail$("Expected a term.",_reply$pst$21);var $10683 = $10689;break;};var $10676 = $10683;break;};var $10674 = $10676;break;};return $10674;}),List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $10690=self.err;var self = $10648;switch(self._){case 'Maybe.some':var $10692=self.value;var $10693 = Parser$Reply$error$(Parser$Error$combine$($10692,$10690));var $10691 = $10693;break;case 'Maybe.none':var $10694 = Parser$Reply$error$($10690);var $10691 = $10694;break;};var $10649 = $10691;break;case 'Parser.Reply.value':var $10695=self.pst;var $10696=self.val;var self = $10695;switch(self._){case 'Parser.State.new':var $10698=self.err;var $10699=self.nam;var $10700=self.ini;var $10701=self.idx;var $10702=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($10648,$10698),$10699,$10700,$10701,$10702);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $10704=self.err;var _reply$21 = Kind$Parser$term$suffix$($10696,_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $10706=self.err;var self = $10704;switch(self._){case 'Maybe.some':var $10708=self.value;var $10709 = Parser$Reply$error$(Parser$Error$combine$($10708,$10706));var $10707 = $10709;break;case 'Maybe.none':var $10710 = Parser$Reply$error$($10706);var $10707 = $10710;break;};var $10705 = $10707;break;case 'Parser.Reply.value':var $10711=self.pst;var $10712=self.val;var self = $10711;switch(self._){case 'Parser.State.new':var $10714=self.err;var $10715=self.nam;var $10716=self.ini;var $10717=self.idx;var $10718=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($10704,$10714),$10715,$10716,$10717,$10718);var $10719 = Parser$Reply$value$(_reply$pst$29,$10712);var $10713 = $10719;break;};var $10705 = $10713;break;};var $10703 = $10705;break;};var $10697 = $10703;break;};var $10649 = $10697;break;};var $10647 = $10649;break;};return $10647;}));
  function Kind$Parser$name_term$(_sep$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $10721=self.err;var _reply$8 = Kind$Parser$name$(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $10723=self.err;var self = $10721;switch(self._){case 'Maybe.some':var $10725=self.value;var $10726 = Parser$Reply$error$(Parser$Error$combine$($10725,$10723));var $10724 = $10726;break;case 'Maybe.none':var $10727 = Parser$Reply$error$($10723);var $10724 = $10727;break;};var $10722 = $10724;break;case 'Parser.Reply.value':var $10728=self.pst;var $10729=self.val;var self = $10728;switch(self._){case 'Parser.State.new':var $10731=self.err;var $10732=self.nam;var $10733=self.ini;var $10734=self.idx;var $10735=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($10721,$10731),$10732,$10733,$10734,$10735);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $10737=self.err;var _reply$22 = Kind$Parser$text$(_sep$1,_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $10739=self.err;var self = $10737;switch(self._){case 'Maybe.some':var $10741=self.value;var $10742 = Parser$Reply$error$(Parser$Error$combine$($10741,$10739));var $10740 = $10742;break;case 'Maybe.none':var $10743 = Parser$Reply$error$($10739);var $10740 = $10743;break;};var $10738 = $10740;break;case 'Parser.Reply.value':var $10744=self.pst;var self = $10744;switch(self._){case 'Parser.State.new':var $10746=self.err;var $10747=self.nam;var $10748=self.ini;var $10749=self.idx;var $10750=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($10737,$10746),$10747,$10748,$10749,$10750);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $10752=self.err;var _reply$36 = Kind$Parser$term(_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $10754=self.err;var self = $10752;switch(self._){case 'Maybe.some':var $10756=self.value;var $10757 = Parser$Reply$error$(Parser$Error$combine$($10756,$10754));var $10755 = $10757;break;case 'Maybe.none':var $10758 = Parser$Reply$error$($10754);var $10755 = $10758;break;};var $10753 = $10755;break;case 'Parser.Reply.value':var $10759=self.pst;var $10760=self.val;var self = $10759;switch(self._){case 'Parser.State.new':var $10762=self.err;var $10763=self.nam;var $10764=self.ini;var $10765=self.idx;var $10766=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($10752,$10762),$10763,$10764,$10765,$10766);var $10767 = Parser$Reply$value$(_reply$pst$44,Pair$new$($10729,$10760));var $10761 = $10767;break;};var $10753 = $10761;break;};var $10751 = $10753;break;};var $10745 = $10751;break;};var $10738 = $10745;break;};var $10736 = $10738;break;};var $10730 = $10736;break;};var $10722 = $10730;break;};var $10720 = $10722;break;};return $10720;};
  const Kind$Parser$name_term = x0=>x1=>Kind$Parser$name_term$(x0,x1);
  function Kind$Binder$new$(_eras$1,_name$2,_term$3){var $10768 = ({_:'Kind.Binder.new','eras':_eras$1,'name':_name$2,'term':_term$3});return $10768;};
  const Kind$Binder$new = x0=>x1=>x2=>Kind$Binder$new$(x0,x1,x2);
  function Kind$Parser$binder$homo$(_sep$1,_eras$2,_no_spaces$3){var self = _eras$2;if (self) {var $10770 = "<";var _open$4 = $10770;} else {var $10771 = "(";var _open$4 = $10771;};var self = _eras$2;if (self) {var $10772 = ">";var _clos$5 = $10772;} else {var $10773 = ")";var _clos$5 = $10773;};var self = _no_spaces$3;if (self) {var $10774 = Kind$Parser$items_now;var _items_parser$6 = $10774;} else {var $10775 = Kind$Parser$items;var _items_parser$6 = $10775;};var $10769 = (_pst$7=>{var self = _pst$7;switch(self._){case 'Parser.State.new':var $10777=self.err;var _reply$13 = _items_parser$6(_open$4)(Kind$Parser$name_term(_sep$1))(_clos$5)(_pst$7);var self = _reply$13;switch(self._){case 'Parser.Reply.error':var $10779=self.err;var self = $10777;switch(self._){case 'Maybe.some':var $10781=self.value;var $10782 = Parser$Reply$error$(Parser$Error$combine$($10781,$10779));var $10780 = $10782;break;case 'Maybe.none':var $10783 = Parser$Reply$error$($10779);var $10780 = $10783;break;};var $10778 = $10780;break;case 'Parser.Reply.value':var $10784=self.pst;var $10785=self.val;var self = $10784;switch(self._){case 'Parser.State.new':var $10787=self.err;var $10788=self.nam;var $10789=self.ini;var $10790=self.idx;var $10791=self.str;var _reply$pst$21 = Parser$State$new$(Parser$Error$maybe_combine$($10777,$10787),$10788,$10789,$10790,$10791);var $10792 = Parser$Reply$value$(_reply$pst$21,List$mapped$($10785,(_pair$22=>{var self = _pair$22;switch(self._){case 'Pair.new':var $10794=self.fst;var $10795=self.snd;var $10796 = Kind$Binder$new$(_eras$2,$10794,$10795);var $10793 = $10796;break;};return $10793;})));var $10786 = $10792;break;};var $10778 = $10786;break;};var $10776 = $10778;break;};return $10776;});return $10769;};
  const Kind$Parser$binder$homo = x0=>x1=>x2=>Kind$Parser$binder$homo$(x0,x1,x2);
  function List$concat$(_as$2,_bs$3){var self = _as$2;switch(self._){case 'List.cons':var $10798=self.head;var $10799=self.tail;var $10800 = List$cons$($10798,List$concat$($10799,_bs$3));var $10797 = $10800;break;case 'List.nil':var $10801 = _bs$3;var $10797 = $10801;break;};return $10797;};
  const List$concat = x0=>x1=>List$concat$(x0,x1);
  function List$flatten$(_xs$2){var self = _xs$2;switch(self._){case 'List.cons':var $10803=self.head;var $10804=self.tail;var $10805 = List$concat$($10803,List$flatten$($10804));var $10802 = $10805;break;case 'List.nil':var $10806 = List$nil;var $10802 = $10806;break;};return $10802;};
  const List$flatten = x0=>List$flatten$(x0);
  function Kind$Parser$binder$(_sep$1,_no_spaces$2,_pst$3){var self = _pst$3;switch(self._){case 'Parser.State.new':var $10808=self.err;var _reply$9 = Parser$many1$(Parser$choice(List$cons$(Kind$Parser$binder$homo$(_sep$1,Bool$true,_no_spaces$2),List$cons$(Kind$Parser$binder$homo$(_sep$1,Bool$false,_no_spaces$2),List$nil))),_pst$3);var self = _reply$9;switch(self._){case 'Parser.Reply.error':var $10810=self.err;var self = $10808;switch(self._){case 'Maybe.some':var $10812=self.value;var $10813 = Parser$Reply$error$(Parser$Error$combine$($10812,$10810));var $10811 = $10813;break;case 'Maybe.none':var $10814 = Parser$Reply$error$($10810);var $10811 = $10814;break;};var $10809 = $10811;break;case 'Parser.Reply.value':var $10815=self.pst;var $10816=self.val;var self = $10815;switch(self._){case 'Parser.State.new':var $10818=self.err;var $10819=self.nam;var $10820=self.ini;var $10821=self.idx;var $10822=self.str;var _reply$pst$17 = Parser$State$new$(Parser$Error$maybe_combine$($10808,$10818),$10819,$10820,$10821,$10822);var $10823 = Parser$Reply$value$(_reply$pst$17,List$flatten$($10816));var $10817 = $10823;break;};var $10809 = $10817;break;};var $10807 = $10809;break;};return $10807;};
  const Kind$Parser$binder = x0=>x1=>x2=>Kind$Parser$binder$(x0,x1,x2);
  const List$length = a0=>(list_length(a0));
  function Kind$Parser$forall$make$(_binds$1,_body$2){var self = _binds$1;switch(self._){case 'List.cons':var $10825=self.head;var $10826=self.tail;var self = $10825;switch(self._){case 'Kind.Binder.new':var $10828=self.eras;var $10829=self.name;var $10830=self.term;var $10831 = Kind$Term$all$($10828,"",$10829,$10830,(_s$8=>_x$9=>{var $10832 = Kind$Parser$forall$make$($10826,_body$2);return $10832;}));var $10827 = $10831;break;};var $10824 = $10827;break;case 'List.nil':var $10833 = _body$2;var $10824 = $10833;break;};return $10824;};
  const Kind$Parser$forall$make = x0=>x1=>Kind$Parser$forall$make$(x0,x1);
  function List$at_last$(_index$2,_list$3){var $10834 = List$at$(_index$2,List$reverse$(_list$3));return $10834;};
  const List$at_last = x0=>x1=>List$at_last$(x0,x1);
  function Kind$Term$var$(_name$1,_indx$2){var $10835 = ({_:'Kind.Term.var','name':_name$1,'indx':_indx$2});return $10835;};
  const Kind$Term$var = x0=>x1=>Kind$Term$var$(x0,x1);
  function Kind$Context$get_name_skips$(_name$1){var self = _name$1;if (self.length===0) {var $10837 = Pair$new$("",0n);var $10836 = $10837;} else {var $10838=self.charCodeAt(0);var $10839=self.slice(1);var _name_skips$4 = Kind$Context$get_name_skips$($10839);var self = _name_skips$4;switch(self._){case 'Pair.new':var $10841=self.fst;var $10842=self.snd;var self = ($10838===94);if (self) {var $10844 = Pair$new$($10841,Nat$succ$($10842));var $10843 = $10844;} else {var $10845 = Pair$new$(String$cons$($10838,$10841),$10842);var $10843 = $10845;};var $10840 = $10843;break;};var $10836 = $10840;};return $10836;};
  const Kind$Context$get_name_skips = x0=>Kind$Context$get_name_skips$(x0);
  function Kind$Name$eql$(_a$1,_b$2){var $10846 = (_a$1===_b$2);return $10846;};
  const Kind$Name$eql = x0=>x1=>Kind$Name$eql$(x0,x1);
  function Kind$Context$find$go$(_name$1,_skip$2,_ctx$3){var Kind$Context$find$go$=(_name$1,_skip$2,_ctx$3)=>({ctr:'TCO',arg:[_name$1,_skip$2,_ctx$3]});var Kind$Context$find$go=_name$1=>_skip$2=>_ctx$3=>Kind$Context$find$go$(_name$1,_skip$2,_ctx$3);var arg=[_name$1,_skip$2,_ctx$3];while(true){let [_name$1,_skip$2,_ctx$3]=arg;var R=(()=>{var self = _ctx$3;switch(self._){case 'List.cons':var $10847=self.head;var $10848=self.tail;var self = $10847;switch(self._){case 'Pair.new':var $10850=self.fst;var $10851=self.snd;var self = Kind$Name$eql$(_name$1,$10850);if (self) {var self = _skip$2;if (self===0n) {var $10854 = Maybe$some$($10851);var $10853 = $10854;} else {var $10855=(self-1n);var $10856 = Kind$Context$find$go$(_name$1,$10855,$10848);var $10853 = $10856;};var $10852 = $10853;} else {var $10857 = Kind$Context$find$go$(_name$1,_skip$2,$10848);var $10852 = $10857;};var $10849 = $10852;break;};return $10849;case 'List.nil':var $10858 = Maybe$none;return $10858;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Context$find$go = x0=>x1=>x2=>Kind$Context$find$go$(x0,x1,x2);
  function Kind$Context$find$(_name$1,_ctx$2){var self = Kind$Context$get_name_skips$(_name$1);switch(self._){case 'Pair.new':var $10860=self.fst;var $10861=self.snd;var $10862 = Kind$Context$find$go$($10860,$10861,_ctx$2);var $10859 = $10862;break;};return $10859;};
  const Kind$Context$find = x0=>x1=>Kind$Context$find$(x0,x1);
  function Kind$Path$Builder$o$(_path$1,_x$2){var $10863 = _path$1((_x$2+'0'));return $10863;};
  const Kind$Path$Builder$o = x0=>x1=>Kind$Path$Builder$o$(x0,x1);
  function Kind$Path$Builder$i$(_path$1,_x$2){var $10864 = _path$1((_x$2+'1'));return $10864;};
  const Kind$Path$Builder$i = x0=>x1=>Kind$Path$Builder$i$(x0,x1);
  function Kind$Path$Builder$to_bits$(_path$1){var $10865 = _path$1(Bits$e);return $10865;};
  const Kind$Path$Builder$to_bits = x0=>Kind$Path$Builder$to_bits$(x0);
  function List$imapped$(_as$2,_f$4){var self = _as$2;switch(self._){case 'List.cons':var $10867=self.head;var $10868=self.tail;var $10869 = List$cons$(_f$4(0n)($10867),List$imapped$($10868,(_n$7=>{var $10870 = _f$4(Nat$succ$(_n$7));return $10870;})));var $10866 = $10869;break;case 'List.nil':var $10871 = List$nil;var $10866 = $10871;break;};return $10866;};
  const List$imapped = x0=>x1=>List$imapped$(x0,x1);
  function Kind$Path$Builder$nat$(_n$1,_b$2){var self = _n$1;if (self===0n) {var $10873 = Kind$Path$Builder$o(_b$2);var $10872 = $10873;} else {var $10874=(self-1n);var $10875 = Kind$Path$Builder$i(Kind$Path$Builder$nat$($10874,_b$2));var $10872 = $10875;};return $10872;};
  const Kind$Path$Builder$nat = x0=>x1=>Kind$Path$Builder$nat$(x0,x1);
  function Kind$Term$bind$(_vars$1,_path$2,_term$3){var self = _term$3;switch(self._){case 'Kind.Term.var':var $10877=self.name;var $10878=self.indx;var self = List$at_last$($10878,_vars$1);switch(self._){case 'Maybe.some':var $10880=self.value;var $10881 = Pair$snd$($10880);var $10879 = $10881;break;case 'Maybe.none':var $10882 = Kind$Term$var$($10877,$10878);var $10879 = $10882;break;};var $10876 = $10879;break;case 'Kind.Term.ref':var $10883=self.name;var self = Kind$Context$find$($10883,_vars$1);switch(self._){case 'Maybe.some':var $10885=self.value;var $10886 = $10885;var $10884 = $10886;break;case 'Maybe.none':var $10887 = Kind$Term$ref$($10883);var $10884 = $10887;break;};var $10876 = $10884;break;case 'Kind.Term.all':var $10888=self.eras;var $10889=self.self;var $10890=self.name;var $10891=self.xtyp;var $10892=self.body;var _vlen$9 = (list_length(_vars$1));var $10893 = Kind$Term$all$($10888,$10889,$10890,Kind$Term$bind$(_vars$1,Kind$Path$Builder$o(_path$2),$10891),(_s$10=>_x$11=>{var $10894 = Kind$Term$bind$(List$cons$(Pair$new$($10890,_x$11),List$cons$(Pair$new$($10889,_s$10),_vars$1)),Kind$Path$Builder$i(_path$2),$10892(Kind$Term$var$($10889,_vlen$9))(Kind$Term$var$($10890,Nat$succ$(_vlen$9))));return $10894;}));var $10876 = $10893;break;case 'Kind.Term.lam':var $10895=self.name;var $10896=self.body;var _vlen$6 = (list_length(_vars$1));var $10897 = Kind$Term$lam$($10895,(_x$7=>{var $10898 = Kind$Term$bind$(List$cons$(Pair$new$($10895,_x$7),_vars$1),Kind$Path$Builder$o(_path$2),$10896(Kind$Term$var$($10895,_vlen$6)));return $10898;}));var $10876 = $10897;break;case 'Kind.Term.app':var $10899=self.func;var $10900=self.argm;var $10901 = Kind$Term$app$(Kind$Term$bind$(_vars$1,Kind$Path$Builder$o(_path$2),$10899),Kind$Term$bind$(_vars$1,Kind$Path$Builder$i(_path$2),$10900));var $10876 = $10901;break;case 'Kind.Term.let':var $10902=self.name;var $10903=self.expr;var $10904=self.body;var _vlen$7 = (list_length(_vars$1));var $10905 = Kind$Term$let$($10902,Kind$Term$bind$(_vars$1,Kind$Path$Builder$o(_path$2),$10903),(_x$8=>{var $10906 = Kind$Term$bind$(List$cons$(Pair$new$($10902,_x$8),_vars$1),Kind$Path$Builder$i(_path$2),$10904(Kind$Term$var$($10902,_vlen$7)));return $10906;}));var $10876 = $10905;break;case 'Kind.Term.def':var $10907=self.name;var $10908=self.expr;var $10909=self.body;var _vlen$7 = (list_length(_vars$1));var $10910 = Kind$Term$def$($10907,Kind$Term$bind$(_vars$1,Kind$Path$Builder$o(_path$2),$10908),(_x$8=>{var $10911 = Kind$Term$bind$(List$cons$(Pair$new$($10907,_x$8),_vars$1),Kind$Path$Builder$i(_path$2),$10909(Kind$Term$var$($10907,_vlen$7)));return $10911;}));var $10876 = $10910;break;case 'Kind.Term.ann':var $10912=self.done;var $10913=self.term;var $10914=self.type;var $10915 = Kind$Term$ann$($10912,Kind$Term$bind$(_vars$1,Kind$Path$Builder$o(_path$2),$10913),Kind$Term$bind$(_vars$1,Kind$Path$Builder$i(_path$2),$10914));var $10876 = $10915;break;case 'Kind.Term.gol':var $10916=self.name;var $10917=self.dref;var $10918=self.verb;var $10919 = Kind$Term$gol$($10916,$10917,$10918);var $10876 = $10919;break;case 'Kind.Term.nat':var $10920=self.natx;var $10921 = Kind$Term$nat$($10920);var $10876 = $10921;break;case 'Kind.Term.chr':var $10922=self.chrx;var $10923 = Kind$Term$chr$($10922);var $10876 = $10923;break;case 'Kind.Term.str':var $10924=self.strx;var $10925 = Kind$Term$str$($10924);var $10876 = $10925;break;case 'Kind.Term.num':var $10926=self.sign;var $10927=self.numb;var $10928=self.frac;var $10929 = Kind$Term$num$($10926,$10927,$10928);var $10876 = $10929;break;case 'Kind.Term.cse':var $10930=self.expr;var $10931=self.name;var $10932=self.with;var $10933=self.cses;var $10934=self.moti;var _expr$10 = Kind$Term$bind$(_vars$1,Kind$Path$Builder$o(_path$2),$10930);var _name$11 = $10931;var _wyth$12 = List$mapped$($10932,(_with_var$12=>{var self = _with_var$12;switch(self._){case 'Kind.Ann.new':var $10937=self.name;var $10938=self.term;var $10939=self.type;var _with_var_term$16 = Kind$Term$bind$(_vars$1,_path$2,$10938);var self = $10939;switch(self._){case 'Maybe.some':var $10941=self.value;var $10942 = Maybe$some$(Kind$Term$bind$(_vars$1,_path$2,$10941));var _with_var_type$17 = $10942;break;case 'Maybe.none':var $10943 = Maybe$none;var _with_var_type$17 = $10943;break;};var $10940 = Kind$Ann$new$($10937,_with_var_term$16,_with_var_type$17);var $10936 = $10940;break;};return $10936;}));var _cses$13 = $10933;var _moti$14 = $10934;var $10935 = Kind$Term$cse$(Kind$Path$Builder$to_bits$(_path$2),_expr$10,_name$11,_wyth$12,_cses$13,_moti$14);var $10876 = $10935;break;case 'Kind.Term.new':var $10944=self.args;var _args$5 = List$imapped$($10944,(_idx$5=>_arg$6=>{var $10946 = Kind$Term$bind$(_vars$1,Kind$Path$Builder$nat$(_idx$5,_path$2),_arg$6);return $10946;}));var $10945 = Kind$Term$new$(_args$5);var $10876 = $10945;break;case 'Kind.Term.get':var $10947=self.expr;var $10948=self.fkey;var _expr$6 = Kind$Term$bind$(_vars$1,Kind$Path$Builder$o(_path$2),$10947);var $10949 = Kind$Term$get$(_expr$6,$10948);var $10876 = $10949;break;case 'Kind.Term.set':var $10950=self.expr;var $10951=self.fkey;var $10952=self.fval;var _expr$7 = Kind$Term$bind$(_vars$1,Kind$Path$Builder$o(_path$2),$10950);var _fval$8 = Kind$Term$bind$(_vars$1,Kind$Path$Builder$i(_path$2),$10952);var $10953 = Kind$Term$set$(_expr$7,$10951,_fval$8);var $10876 = $10953;break;case 'Kind.Term.ope':var $10954=self.name;var $10955=self.arg0;var $10956=self.arg1;var _arg0$7 = Kind$Term$bind$(_vars$1,Kind$Path$Builder$o(_path$2),$10955);var _arg1$8 = Kind$Term$bind$(_vars$1,Kind$Path$Builder$i(_path$2),$10956);var $10957 = Kind$Term$ope$($10954,_arg0$7,_arg1$8);var $10876 = $10957;break;case 'Kind.Term.ori':var $10958=self.orig;var $10959=self.expr;var $10960 = Kind$Term$ori$($10958,Kind$Term$bind$(_vars$1,_path$2,$10959));var $10876 = $10960;break;case 'Kind.Term.typ':var $10961 = Kind$Term$typ;var $10876 = $10961;break;case 'Kind.Term.hol':var $10962 = Kind$Term$hol$(Kind$Path$Builder$to_bits$(_path$2));var $10876 = $10962;break;};return $10876;};
  const Kind$Term$bind = x0=>x1=>x2=>Kind$Term$bind$(x0,x1,x2);
  function Trampoline$call$(_t$2){var Trampoline$call$=(_t$2)=>({ctr:'TCO',arg:[_t$2]});var Trampoline$call=_t$2=>Trampoline$call$(_t$2);var arg=[_t$2];while(true){let [_t$2]=arg;var R=(()=>{var self = _t$2;switch(self._){case 'Trampoline.done':var $10963=self.value;var $10964 = $10963;return $10964;case 'Trampoline.wrap':var $10965=self.value;var $10966 = Trampoline$call$($10965(Unit$new));return $10966;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Trampoline$call = x0=>Trampoline$call$(x0);
  function Trampoline$(_A$1){var $10967 = null;return $10967;};
  const Trampoline = x0=>Trampoline$(x0);
  function Trampoline$wrap$(_value$2){var $10968 = ({_:'Trampoline.wrap','value':_value$2});return $10968;};
  const Trampoline$wrap = x0=>Trampoline$wrap$(x0);
  function BitsMap$set_if_empty$cps$go$(_bits$2,_val$3,_map$4,_cont$5){var BitsMap$set_if_empty$cps$go$=(_bits$2,_val$3,_map$4,_cont$5)=>({ctr:'TCO',arg:[_bits$2,_val$3,_map$4,_cont$5]});var BitsMap$set_if_empty$cps$go=_bits$2=>_val$3=>_map$4=>_cont$5=>BitsMap$set_if_empty$cps$go$(_bits$2,_val$3,_map$4,_cont$5);var arg=[_bits$2,_val$3,_map$4,_cont$5];while(true){let [_bits$2,_val$3,_map$4,_cont$5]=arg;var R=(()=>{var self = _bits$2;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $10969=self.slice(0,-1);var self = _map$4;switch(self._){case 'BitsMap.tie':var $10971=self.val;var $10972=self.lft;var $10973=self.rgt;var $10974 = BitsMap$set_if_empty$cps$go$($10969,_val$3,$10972,(_lft$10=>{var $10975 = Trampoline$wrap$((_$11=>{var $10976 = _cont$5(BitsMap$tie$($10971,_lft$10,$10973));return $10976;}));return $10975;}));var $10970 = $10974;break;case 'BitsMap.new':var $10977 = BitsMap$set_if_empty$cps$go$($10969,_val$3,BitsMap$new,(_lft$7=>{var $10978 = Trampoline$wrap$((_$8=>{var $10979 = _cont$5(BitsMap$tie$(Maybe$none,_lft$7,BitsMap$new));return $10979;}));return $10978;}));var $10970 = $10977;break;};return $10970;case 'i':var $10980=self.slice(0,-1);var self = _map$4;switch(self._){case 'BitsMap.tie':var $10982=self.val;var $10983=self.lft;var $10984=self.rgt;var $10985 = BitsMap$set_if_empty$cps$go$($10980,_val$3,$10984,(_rgt$10=>{var $10986 = Trampoline$wrap$((_$11=>{var $10987 = _cont$5(BitsMap$tie$($10982,$10983,_rgt$10));return $10987;}));return $10986;}));var $10981 = $10985;break;case 'BitsMap.new':var $10988 = BitsMap$set_if_empty$cps$go$($10980,_val$3,BitsMap$new,(_rgt$7=>{var $10989 = Trampoline$wrap$((_$8=>{var $10990 = _cont$5(BitsMap$tie$(Maybe$none,BitsMap$new,_rgt$7));return $10990;}));return $10989;}));var $10981 = $10988;break;};return $10981;case 'e':var self = _map$4;switch(self._){case 'BitsMap.tie':var $10992=self.val;var $10993=self.lft;var $10994=self.rgt;var $10995 = _cont$5(BitsMap$tie$((()=>{var self = $10992;switch(self._){case 'Maybe.some':var $10996=self.value;var $10997 = Maybe$some$($10996);return $10997;case 'Maybe.none':var $10998 = Maybe$some$(_val$3);return $10998;};})(),$10993,$10994));var $10991 = $10995;break;case 'BitsMap.new':var $10999 = _cont$5(BitsMap$tie$(Maybe$some$(_val$3),BitsMap$new,BitsMap$new));var $10991 = $10999;break;};return $10991;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const BitsMap$set_if_empty$cps$go = x0=>x1=>x2=>x3=>BitsMap$set_if_empty$cps$go$(x0,x1,x2,x3);
  function Trampoline$done$(_value$2){var $11000 = ({_:'Trampoline.done','value':_value$2});return $11000;};
  const Trampoline$done = x0=>Trampoline$done$(x0);
  function BitsMap$set_if_empty$cps$(_bits$2,_val$3,_map$4){var $11001 = Trampoline$call$(BitsMap$set_if_empty$cps$go$(_bits$2,_val$3,_map$4,Trampoline$done));return $11001;};
  const BitsMap$set_if_empty$cps = x0=>x1=>x2=>BitsMap$set_if_empty$cps$(x0,x1,x2);
  function BitsMap$set_if_empty$(_bits$2,_val$3,_map$4){var $11002 = BitsMap$set_if_empty$cps$(_bits$2,_val$3,_map$4);return $11002;};
  const BitsMap$set_if_empty = x0=>x1=>x2=>BitsMap$set_if_empty$(x0,x1,x2);
  function Kind$Map$set_if_empty$(_name$2,_val$3,_map$4){var $11003 = BitsMap$set_if_empty$((kind_name_to_bits(_name$2)),_val$3,_map$4);return $11003;};
  const Kind$Map$set_if_empty = x0=>x1=>x2=>Kind$Map$set_if_empty$(x0,x1,x2);
  const Kind$Status$init = ({_:'Kind.Status.init'});
  function Kind$Map$def$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_done$9,_defs$10){var _defn$11 = Kind$Def$new(_file$1)(_code$2)(_orig$3)(_name$4)(_term$5)(_type$6)(_isct$7)(_arit$8);var self = _done$9;if (self) {var $11005 = Kind$Map$set$(_name$4,_defn$11(Kind$Status$done$(Bool$false)),_defs$10);var $11004 = $11005;} else {var $11006 = Kind$Map$set_if_empty$(_name$4,_defn$11(Kind$Status$init),_defs$10);var $11004 = $11006;};return $11004;};
  const Kind$Map$def = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>x8=>x9=>Kind$Map$def$(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9);
  function Kind$Parser$file$def$(_file$1,_code$2,_defs$3,_pst$4){var self = _pst$4;switch(self._){case 'Parser.State.new':var $11008=self.err;var _reply$10 = Kind$Parser$spaces(_pst$4);var self = _reply$10;switch(self._){case 'Parser.Reply.error':var $11010=self.err;var self = $11008;switch(self._){case 'Maybe.some':var $11012=self.value;var $11013 = Parser$Reply$error$(Parser$Error$combine$($11012,$11010));var $11011 = $11013;break;case 'Maybe.none':var $11014 = Parser$Reply$error$($11010);var $11011 = $11014;break;};var $11009 = $11011;break;case 'Parser.Reply.value':var $11015=self.pst;var self = $11015;switch(self._){case 'Parser.State.new':var $11017=self.err;var $11018=self.nam;var $11019=self.ini;var $11020=self.idx;var $11021=self.str;var _reply$pst$18 = Parser$State$new$(Parser$Error$maybe_combine$($11008,$11017),$11018,$11019,$11020,$11021);var self = _reply$pst$18;switch(self._){case 'Parser.State.new':var $11023=self.err;var _reply$24 = Parser$get_idx$(_reply$pst$18);var self = _reply$24;switch(self._){case 'Parser.Reply.error':var $11025=self.err;var self = $11023;switch(self._){case 'Maybe.some':var $11027=self.value;var $11028 = Parser$Reply$error$(Parser$Error$combine$($11027,$11025));var $11026 = $11028;break;case 'Maybe.none':var $11029 = Parser$Reply$error$($11025);var $11026 = $11029;break;};var $11024 = $11026;break;case 'Parser.Reply.value':var $11030=self.pst;var $11031=self.val;var self = $11030;switch(self._){case 'Parser.State.new':var $11033=self.err;var $11034=self.nam;var $11035=self.ini;var $11036=self.idx;var $11037=self.str;var _reply$pst$32 = Parser$State$new$(Parser$Error$maybe_combine$($11023,$11033),$11034,$11035,$11036,$11037);var self = _reply$pst$32;switch(self._){case 'Parser.State.new':var $11039=self.err;var _reply$38 = Kind$Parser$name1$(_reply$pst$32);var self = _reply$38;switch(self._){case 'Parser.Reply.error':var $11041=self.err;var self = $11039;switch(self._){case 'Maybe.some':var $11043=self.value;var $11044 = Parser$Reply$error$(Parser$Error$combine$($11043,$11041));var $11042 = $11044;break;case 'Maybe.none':var $11045 = Parser$Reply$error$($11041);var $11042 = $11045;break;};var $11040 = $11042;break;case 'Parser.Reply.value':var $11046=self.pst;var $11047=self.val;var self = $11046;switch(self._){case 'Parser.State.new':var $11049=self.err;var $11050=self.nam;var $11051=self.ini;var $11052=self.idx;var $11053=self.str;var _reply$pst$46 = Parser$State$new$(Parser$Error$maybe_combine$($11039,$11049),$11050,$11051,$11052,$11053);var self = _reply$pst$46;switch(self._){case 'Parser.State.new':var $11055=self.err;var _reply$52 = Parser$many$(Kind$Parser$binder(":")(Bool$false))(_reply$pst$46);var self = _reply$52;switch(self._){case 'Parser.Reply.error':var $11057=self.err;var self = $11055;switch(self._){case 'Maybe.some':var $11059=self.value;var $11060 = Parser$Reply$error$(Parser$Error$combine$($11059,$11057));var $11058 = $11060;break;case 'Maybe.none':var $11061 = Parser$Reply$error$($11057);var $11058 = $11061;break;};var $11056 = $11058;break;case 'Parser.Reply.value':var $11062=self.pst;var $11063=self.val;var self = $11062;switch(self._){case 'Parser.State.new':var $11065=self.err;var $11066=self.nam;var $11067=self.ini;var $11068=self.idx;var $11069=self.str;var _reply$pst$60 = Parser$State$new$(Parser$Error$maybe_combine$($11055,$11065),$11066,$11067,$11068,$11069);var _args$61 = List$flatten$($11063);var self = _reply$pst$60;switch(self._){case 'Parser.State.new':var $11071=self.err;var _reply$67 = Kind$Parser$text$(":",_reply$pst$60);var self = _reply$67;switch(self._){case 'Parser.Reply.error':var $11073=self.err;var self = $11071;switch(self._){case 'Maybe.some':var $11075=self.value;var $11076 = Parser$Reply$error$(Parser$Error$combine$($11075,$11073));var $11074 = $11076;break;case 'Maybe.none':var $11077 = Parser$Reply$error$($11073);var $11074 = $11077;break;};var $11072 = $11074;break;case 'Parser.Reply.value':var $11078=self.pst;var self = $11078;switch(self._){case 'Parser.State.new':var $11080=self.err;var $11081=self.nam;var $11082=self.ini;var $11083=self.idx;var $11084=self.str;var _reply$pst$75 = Parser$State$new$(Parser$Error$maybe_combine$($11071,$11080),$11081,$11082,$11083,$11084);var self = _reply$pst$75;switch(self._){case 'Parser.State.new':var $11086=self.err;var _reply$81 = Kind$Parser$term(_reply$pst$75);var self = _reply$81;switch(self._){case 'Parser.Reply.error':var $11088=self.err;var self = $11086;switch(self._){case 'Maybe.some':var $11090=self.value;var $11091 = Parser$Reply$error$(Parser$Error$combine$($11090,$11088));var $11089 = $11091;break;case 'Maybe.none':var $11092 = Parser$Reply$error$($11088);var $11089 = $11092;break;};var $11087 = $11089;break;case 'Parser.Reply.value':var $11093=self.pst;var $11094=self.val;var self = $11093;switch(self._){case 'Parser.State.new':var $11096=self.err;var $11097=self.nam;var $11098=self.ini;var $11099=self.idx;var $11100=self.str;var _reply$pst$89 = Parser$State$new$(Parser$Error$maybe_combine$($11086,$11096),$11097,$11098,$11099,$11100);var self = _reply$pst$89;switch(self._){case 'Parser.State.new':var $11102=self.err;var _reply$95 = Kind$Parser$term(_reply$pst$89);var self = _reply$95;switch(self._){case 'Parser.Reply.error':var $11104=self.err;var self = $11102;switch(self._){case 'Maybe.some':var $11106=self.value;var $11107 = Parser$Reply$error$(Parser$Error$combine$($11106,$11104));var $11105 = $11107;break;case 'Maybe.none':var $11108 = Parser$Reply$error$($11104);var $11105 = $11108;break;};var $11103 = $11105;break;case 'Parser.Reply.value':var $11109=self.pst;var $11110=self.val;var self = $11109;switch(self._){case 'Parser.State.new':var $11112=self.err;var $11113=self.nam;var $11114=self.ini;var $11115=self.idx;var $11116=self.str;var _reply$pst$103 = Parser$State$new$(Parser$Error$maybe_combine$($11102,$11112),$11113,$11114,$11115,$11116);var self = _reply$pst$103;switch(self._){case 'Parser.State.new':var $11118=self.err;var _reply$109 = Parser$get_idx$(_reply$pst$103);var self = _reply$109;switch(self._){case 'Parser.Reply.error':var $11120=self.err;var self = $11118;switch(self._){case 'Maybe.some':var $11122=self.value;var $11123 = Parser$Reply$error$(Parser$Error$combine$($11122,$11120));var $11121 = $11123;break;case 'Maybe.none':var $11124 = Parser$Reply$error$($11120);var $11121 = $11124;break;};var $11119 = $11121;break;case 'Parser.Reply.value':var $11125=self.pst;var $11126=self.val;var self = $11125;switch(self._){case 'Parser.State.new':var $11128=self.err;var $11129=self.nam;var $11130=self.ini;var $11131=self.idx;var $11132=self.str;var _reply$pst$117 = Parser$State$new$(Parser$Error$maybe_combine$($11118,$11128),$11129,$11130,$11131,$11132);var _orig$118 = Pair$new$($11031,$11126);var _arit$119 = (list_length(_args$61));var _type$120 = Kind$Parser$forall$make$(_args$61,$11094);var _term$121 = Kind$Parser$lambda$make$(List$mapped$(_args$61,(_x$121=>{var self = _x$121;switch(self._){case 'Kind.Binder.new':var $11135=self.name;var $11136 = $11135;var $11134 = $11136;break;};return $11134;})),$11110);var _type$122 = Kind$Term$bind$(List$nil,(_x$122=>{var $11137 = (_x$122+'1');return $11137;}),_type$120);var _term$123 = Kind$Term$bind$(List$nil,(_x$123=>{var $11138 = (_x$123+'0');return $11138;}),_term$121);var _defs$124 = Kind$Map$def$(_file$1,_code$2,_orig$118,$11047,_term$123,_type$122,Bool$false,_arit$119,Bool$false,_defs$3);var $11133 = Parser$Reply$value$(_reply$pst$117,_defs$124);var $11127 = $11133;break;};var $11119 = $11127;break;};var $11117 = $11119;break;};var $11111 = $11117;break;};var $11103 = $11111;break;};var $11101 = $11103;break;};var $11095 = $11101;break;};var $11087 = $11095;break;};var $11085 = $11087;break;};var $11079 = $11085;break;};var $11072 = $11079;break;};var $11070 = $11072;break;};var $11064 = $11070;break;};var $11056 = $11064;break;};var $11054 = $11056;break;};var $11048 = $11054;break;};var $11040 = $11048;break;};var $11038 = $11040;break;};var $11032 = $11038;break;};var $11024 = $11032;break;};var $11022 = $11024;break;};var $11016 = $11022;break;};var $11009 = $11016;break;};var $11007 = $11009;break;};return $11007;};
  const Kind$Parser$file$def = x0=>x1=>x2=>x3=>Kind$Parser$file$def$(x0,x1,x2,x3);
  function Kind$Parser$ADT$Constructor$new$(_name$1,_args$2,_inds$3){var $11139 = ({_:'Kind.Parser.ADT.Constructor.new','name':_name$1,'args':_args$2,'inds':_inds$3});return $11139;};
  const Kind$Parser$ADT$Constructor$new = x0=>x1=>x2=>Kind$Parser$ADT$Constructor$new$(x0,x1,x2);
  function Kind$Parser$ADT$ctor$(_namespace$1,_pst$2){var self = _pst$2;switch(self._){case 'Parser.State.new':var $11141=self.err;var _reply$8 = Kind$Parser$name1$(_pst$2);var self = _reply$8;switch(self._){case 'Parser.Reply.error':var $11143=self.err;var self = $11141;switch(self._){case 'Maybe.some':var $11145=self.value;var $11146 = Parser$Reply$error$(Parser$Error$combine$($11145,$11143));var $11144 = $11146;break;case 'Maybe.none':var $11147 = Parser$Reply$error$($11143);var $11144 = $11147;break;};var $11142 = $11144;break;case 'Parser.Reply.value':var $11148=self.pst;var $11149=self.val;var self = $11148;switch(self._){case 'Parser.State.new':var $11151=self.err;var $11152=self.nam;var $11153=self.ini;var $11154=self.idx;var $11155=self.str;var _reply$pst$16 = Parser$State$new$(Parser$Error$maybe_combine$($11141,$11151),$11152,$11153,$11154,$11155);var self = _reply$pst$16;switch(self._){case 'Parser.State.new':var $11157=self.err;var _reply$22 = Parser$maybe$(Kind$Parser$binder(":")(Bool$false),_reply$pst$16);var self = _reply$22;switch(self._){case 'Parser.Reply.error':var $11159=self.err;var self = $11157;switch(self._){case 'Maybe.some':var $11161=self.value;var $11162 = Parser$Reply$error$(Parser$Error$combine$($11161,$11159));var $11160 = $11162;break;case 'Maybe.none':var $11163 = Parser$Reply$error$($11159);var $11160 = $11163;break;};var $11158 = $11160;break;case 'Parser.Reply.value':var $11164=self.pst;var $11165=self.val;var self = $11164;switch(self._){case 'Parser.State.new':var $11167=self.err;var $11168=self.nam;var $11169=self.ini;var $11170=self.idx;var $11171=self.str;var _reply$pst$30 = Parser$State$new$(Parser$Error$maybe_combine$($11157,$11167),$11168,$11169,$11170,$11171);var self = _reply$pst$30;switch(self._){case 'Parser.State.new':var $11173=self.err;var _reply$36 = Parser$maybe$((_pst$36=>{var self = _pst$36;switch(self._){case 'Parser.State.new':var $11176=self.err;var _reply$42 = Kind$Parser$text$("~",_pst$36);var self = _reply$42;switch(self._){case 'Parser.Reply.error':var $11178=self.err;var self = $11176;switch(self._){case 'Maybe.some':var $11180=self.value;var $11181 = Parser$Reply$error$(Parser$Error$combine$($11180,$11178));var $11179 = $11181;break;case 'Maybe.none':var $11182 = Parser$Reply$error$($11178);var $11179 = $11182;break;};var $11177 = $11179;break;case 'Parser.Reply.value':var $11183=self.pst;var self = $11183;switch(self._){case 'Parser.State.new':var $11185=self.err;var $11186=self.nam;var $11187=self.ini;var $11188=self.idx;var $11189=self.str;var _reply$pst$50 = Parser$State$new$(Parser$Error$maybe_combine$($11176,$11185),$11186,$11187,$11188,$11189);var $11190 = Kind$Parser$binder$("=",Bool$false,_reply$pst$50);var $11184 = $11190;break;};var $11177 = $11184;break;};var $11175 = $11177;break;};return $11175;}),_reply$pst$30);var self = _reply$36;switch(self._){case 'Parser.Reply.error':var $11191=self.err;var self = $11173;switch(self._){case 'Maybe.some':var $11193=self.value;var $11194 = Parser$Reply$error$(Parser$Error$combine$($11193,$11191));var $11192 = $11194;break;case 'Maybe.none':var $11195 = Parser$Reply$error$($11191);var $11192 = $11195;break;};var $11174 = $11192;break;case 'Parser.Reply.value':var $11196=self.pst;var $11197=self.val;var self = $11196;switch(self._){case 'Parser.State.new':var $11199=self.err;var $11200=self.nam;var $11201=self.ini;var $11202=self.idx;var $11203=self.str;var _reply$pst$44 = Parser$State$new$(Parser$Error$maybe_combine$($11173,$11199),$11200,$11201,$11202,$11203);var _args$45 = Maybe$default$($11165,List$nil);var _inds$46 = Maybe$default$($11197,List$nil);var $11204 = Parser$Reply$value$(_reply$pst$44,Kind$Parser$ADT$Constructor$new$($11149,_args$45,_inds$46));var $11198 = $11204;break;};var $11174 = $11198;break;};var $11172 = $11174;break;};var $11166 = $11172;break;};var $11158 = $11166;break;};var $11156 = $11158;break;};var $11150 = $11156;break;};var $11142 = $11150;break;};var $11140 = $11142;break;};return $11140;};
  const Kind$Parser$ADT$ctor = x0=>x1=>Kind$Parser$ADT$ctor$(x0,x1);
  function Kind$Parser$ADT$Datatype$new$(_name$1,_pars$2,_inds$3,_ctrs$4,_deri$5){var $11205 = ({_:'Kind.Parser.ADT.Datatype.new','name':_name$1,'pars':_pars$2,'inds':_inds$3,'ctrs':_ctrs$4,'deri':_deri$5});return $11205;};
  const Kind$Parser$ADT$Datatype$new = x0=>x1=>x2=>x3=>x4=>Kind$Parser$ADT$Datatype$new$(x0,x1,x2,x3,x4);
  function Kind$Parser$ADT$adt$(_pst$1){var self = _pst$1;switch(self._){case 'Parser.State.new':var $11207=self.err;var _reply$7 = Kind$Parser$text$("type ",_pst$1);var self = _reply$7;switch(self._){case 'Parser.Reply.error':var $11209=self.err;var self = $11207;switch(self._){case 'Maybe.some':var $11211=self.value;var $11212 = Parser$Reply$error$(Parser$Error$combine$($11211,$11209));var $11210 = $11212;break;case 'Maybe.none':var $11213 = Parser$Reply$error$($11209);var $11210 = $11213;break;};var $11208 = $11210;break;case 'Parser.Reply.value':var $11214=self.pst;var self = $11214;switch(self._){case 'Parser.State.new':var $11216=self.err;var $11217=self.nam;var $11218=self.ini;var $11219=self.idx;var $11220=self.str;var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($11207,$11216),$11217,$11218,$11219,$11220);var self = _reply$pst$15;switch(self._){case 'Parser.State.new':var $11222=self.err;var _reply$21 = Kind$Parser$name1$(_reply$pst$15);var self = _reply$21;switch(self._){case 'Parser.Reply.error':var $11224=self.err;var self = $11222;switch(self._){case 'Maybe.some':var $11226=self.value;var $11227 = Parser$Reply$error$(Parser$Error$combine$($11226,$11224));var $11225 = $11227;break;case 'Maybe.none':var $11228 = Parser$Reply$error$($11224);var $11225 = $11228;break;};var $11223 = $11225;break;case 'Parser.Reply.value':var $11229=self.pst;var $11230=self.val;var self = $11229;switch(self._){case 'Parser.State.new':var $11232=self.err;var $11233=self.nam;var $11234=self.ini;var $11235=self.idx;var $11236=self.str;var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($11222,$11232),$11233,$11234,$11235,$11236);var self = _reply$pst$29;switch(self._){case 'Parser.State.new':var $11238=self.err;var _reply$35 = Parser$maybe$(Kind$Parser$binder(":")(Bool$false),_reply$pst$29);var self = _reply$35;switch(self._){case 'Parser.Reply.error':var $11240=self.err;var self = $11238;switch(self._){case 'Maybe.some':var $11242=self.value;var $11243 = Parser$Reply$error$(Parser$Error$combine$($11242,$11240));var $11241 = $11243;break;case 'Maybe.none':var $11244 = Parser$Reply$error$($11240);var $11241 = $11244;break;};var $11239 = $11241;break;case 'Parser.Reply.value':var $11245=self.pst;var $11246=self.val;var self = $11245;switch(self._){case 'Parser.State.new':var $11248=self.err;var $11249=self.nam;var $11250=self.ini;var $11251=self.idx;var $11252=self.str;var _reply$pst$43 = Parser$State$new$(Parser$Error$maybe_combine$($11238,$11248),$11249,$11250,$11251,$11252);var self = _reply$pst$43;switch(self._){case 'Parser.State.new':var $11254=self.err;var _reply$49 = Parser$maybe$((_pst$49=>{var self = _pst$49;switch(self._){case 'Parser.State.new':var $11257=self.err;var _reply$55 = Kind$Parser$text$("~",_pst$49);var self = _reply$55;switch(self._){case 'Parser.Reply.error':var $11259=self.err;var self = $11257;switch(self._){case 'Maybe.some':var $11261=self.value;var $11262 = Parser$Reply$error$(Parser$Error$combine$($11261,$11259));var $11260 = $11262;break;case 'Maybe.none':var $11263 = Parser$Reply$error$($11259);var $11260 = $11263;break;};var $11258 = $11260;break;case 'Parser.Reply.value':var $11264=self.pst;var self = $11264;switch(self._){case 'Parser.State.new':var $11266=self.err;var $11267=self.nam;var $11268=self.ini;var $11269=self.idx;var $11270=self.str;var _reply$pst$63 = Parser$State$new$(Parser$Error$maybe_combine$($11257,$11266),$11267,$11268,$11269,$11270);var $11271 = Kind$Parser$binder$(":",Bool$false,_reply$pst$63);var $11265 = $11271;break;};var $11258 = $11265;break;};var $11256 = $11258;break;};return $11256;}),_reply$pst$43);var self = _reply$49;switch(self._){case 'Parser.Reply.error':var $11272=self.err;var self = $11254;switch(self._){case 'Maybe.some':var $11274=self.value;var $11275 = Parser$Reply$error$(Parser$Error$combine$($11274,$11272));var $11273 = $11275;break;case 'Maybe.none':var $11276 = Parser$Reply$error$($11272);var $11273 = $11276;break;};var $11255 = $11273;break;case 'Parser.Reply.value':var $11277=self.pst;var $11278=self.val;var self = $11277;switch(self._){case 'Parser.State.new':var $11280=self.err;var $11281=self.nam;var $11282=self.ini;var $11283=self.idx;var $11284=self.str;var _reply$pst$57 = Parser$State$new$(Parser$Error$maybe_combine$($11254,$11280),$11281,$11282,$11283,$11284);var _pars$58 = Maybe$default$($11246,List$nil);var _inds$59 = Maybe$default$($11278,List$nil);var self = _reply$pst$57;switch(self._){case 'Parser.State.new':var $11286=self.err;var _reply$65 = Kind$Parser$items$("{",Kind$Parser$ADT$ctor($11230),"}")(_reply$pst$57);var self = _reply$65;switch(self._){case 'Parser.Reply.error':var $11288=self.err;var self = $11286;switch(self._){case 'Maybe.some':var $11290=self.value;var $11291 = Parser$Reply$error$(Parser$Error$combine$($11290,$11288));var $11289 = $11291;break;case 'Maybe.none':var $11292 = Parser$Reply$error$($11288);var $11289 = $11292;break;};var $11287 = $11289;break;case 'Parser.Reply.value':var $11293=self.pst;var $11294=self.val;var self = $11293;switch(self._){case 'Parser.State.new':var $11296=self.err;var $11297=self.nam;var $11298=self.ini;var $11299=self.idx;var $11300=self.str;var _reply$pst$73 = Parser$State$new$(Parser$Error$maybe_combine$($11286,$11296),$11297,$11298,$11299,$11300);var self = _reply$pst$73;switch(self._){case 'Parser.State.new':var $11302=self.err;var _reply$79 = Parser$maybe$((_pst$79=>{var self = _pst$79;switch(self._){case 'Parser.State.new':var $11305=self.err;var _reply$85 = Kind$Parser$text$("deriving",_pst$79);var self = _reply$85;switch(self._){case 'Parser.Reply.error':var $11307=self.err;var self = $11305;switch(self._){case 'Maybe.some':var $11309=self.value;var $11310 = Parser$Reply$error$(Parser$Error$combine$($11309,$11307));var $11308 = $11310;break;case 'Maybe.none':var $11311 = Parser$Reply$error$($11307);var $11308 = $11311;break;};var $11306 = $11308;break;case 'Parser.Reply.value':var $11312=self.pst;var self = $11312;switch(self._){case 'Parser.State.new':var $11314=self.err;var $11315=self.nam;var $11316=self.ini;var $11317=self.idx;var $11318=self.str;var _reply$pst$93 = Parser$State$new$(Parser$Error$maybe_combine$($11305,$11314),$11315,$11316,$11317,$11318);var $11319 = Kind$Parser$items$("(",Kind$Parser$name1,")")(_reply$pst$93);var $11313 = $11319;break;};var $11306 = $11313;break;};var $11304 = $11306;break;};return $11304;}),_reply$pst$73);var self = _reply$79;switch(self._){case 'Parser.Reply.error':var $11320=self.err;var self = $11302;switch(self._){case 'Maybe.some':var $11322=self.value;var $11323 = Parser$Reply$error$(Parser$Error$combine$($11322,$11320));var $11321 = $11323;break;case 'Maybe.none':var $11324 = Parser$Reply$error$($11320);var $11321 = $11324;break;};var $11303 = $11321;break;case 'Parser.Reply.value':var $11325=self.pst;var $11326=self.val;var self = $11325;switch(self._){case 'Parser.State.new':var $11328=self.err;var $11329=self.nam;var $11330=self.ini;var $11331=self.idx;var $11332=self.str;var _reply$pst$87 = Parser$State$new$(Parser$Error$maybe_combine$($11302,$11328),$11329,$11330,$11331,$11332);var self = $11326;switch(self._){case 'Maybe.some':var $11334=self.value;var $11335 = $11334;var _deri$88 = $11335;break;case 'Maybe.none':var $11336 = List$nil;var _deri$88 = $11336;break;};var $11333 = Parser$Reply$value$(_reply$pst$87,Kind$Parser$ADT$Datatype$new$($11230,_pars$58,_inds$59,$11294,_deri$88));var $11327 = $11333;break;};var $11303 = $11327;break;};var $11301 = $11303;break;};var $11295 = $11301;break;};var $11287 = $11295;break;};var $11285 = $11287;break;};var $11279 = $11285;break;};var $11255 = $11279;break;};var $11253 = $11255;break;};var $11247 = $11253;break;};var $11239 = $11247;break;};var $11237 = $11239;break;};var $11231 = $11237;break;};var $11223 = $11231;break;};var $11221 = $11223;break;};var $11215 = $11221;break;};var $11208 = $11215;break;};var $11206 = $11208;break;};return $11206;};
  const Kind$Parser$ADT$adt = x0=>Kind$Parser$ADT$adt$(x0);
  function Kind$Parser$ADT$Datatype$build_term$motive$go$(_type$1,_name$2,_inds$3){var self = _inds$3;switch(self._){case 'List.cons':var $11338=self.head;var $11339=self.tail;var self = $11338;switch(self._){case 'Kind.Binder.new':var $11341=self.eras;var $11342=self.name;var $11343=self.term;var $11344 = Kind$Term$all$($11341,"",$11342,$11343,(_s$9=>_x$10=>{var $11345 = Kind$Parser$ADT$Datatype$build_term$motive$go$(_type$1,_name$2,$11339);return $11345;}));var $11340 = $11344;break;};var $11337 = $11340;break;case 'List.nil':var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11347=self.pars;var $11348=self.inds;var _slf$9 = Kind$Term$ref$(_name$2);var _slf$10 = (()=>{var $11351 = _slf$9;var $11352 = $11347;let _slf$11=$11351;let _v$10;while ($11352._==='List.cons') {_v$10=$11352.head;var $11351 = Kind$Term$app$(_slf$11,Kind$Term$ref$((()=>{var self = _v$10;switch(self._){case 'Kind.Binder.new':var $11353=self.name;var $11354 = $11353;return $11354;};})()));_slf$11=$11351;$11352=$11352.tail;}return _slf$11;})();var _slf$11 = (()=>{var $11356 = _slf$10;var $11357 = $11348;let _slf$12=$11356;let _v$11;while ($11357._==='List.cons') {_v$11=$11357.head;var $11356 = Kind$Term$app$(_slf$12,Kind$Term$ref$((()=>{var self = _v$11;switch(self._){case 'Kind.Binder.new':var $11358=self.name;var $11359 = $11358;return $11359;};})()));_slf$12=$11356;$11357=$11357.tail;}return _slf$12;})();var $11349 = Kind$Term$all$(Bool$false,"","",_slf$11,(_s$12=>_x$13=>{var $11360 = Kind$Term$typ;return $11360;}));var $11346 = $11349;break;};var $11337 = $11346;break;};return $11337;};
  const Kind$Parser$ADT$Datatype$build_term$motive$go = x0=>x1=>x2=>Kind$Parser$ADT$Datatype$build_term$motive$go$(x0,x1,x2);
  function Kind$Parser$ADT$Datatype$build_term$motive$(_type$1){var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11362=self.name;var $11363=self.inds;var $11364 = Kind$Parser$ADT$Datatype$build_term$motive$go$(_type$1,$11362,$11363);var $11361 = $11364;break;};return $11361;};
  const Kind$Parser$ADT$Datatype$build_term$motive = x0=>Kind$Parser$ADT$Datatype$build_term$motive$(x0);
  function String$flatten$go$(_xs$1,_res$2){var String$flatten$go$=(_xs$1,_res$2)=>({ctr:'TCO',arg:[_xs$1,_res$2]});var String$flatten$go=_xs$1=>_res$2=>String$flatten$go$(_xs$1,_res$2);var arg=[_xs$1,_res$2];while(true){let [_xs$1,_res$2]=arg;var R=(()=>{var self = _xs$1;switch(self._){case 'List.cons':var $11365=self.head;var $11366=self.tail;var $11367 = String$flatten$go$($11366,(_res$2+$11365));return $11367;case 'List.nil':var $11368 = _res$2;return $11368;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const String$flatten$go = x0=>x1=>String$flatten$go$(x0,x1);
  function String$flatten$(_xs$1){var $11369 = String$flatten$go$(_xs$1,"");return $11369;};
  const String$flatten = x0=>String$flatten$(x0);
  function Kind$Parser$ADT$Datatype$build_term$constructor$go$(_type$1,_ctor$2,_args$3){var self = _args$3;switch(self._){case 'List.cons':var $11371=self.head;var $11372=self.tail;var self = $11371;switch(self._){case 'Kind.Binder.new':var $11374=self.eras;var $11375=self.name;var $11376=self.term;var _eras$9 = $11374;var _name$10 = $11375;var _xtyp$11 = $11376;var _body$12 = Kind$Parser$ADT$Datatype$build_term$constructor$go$(_type$1,_ctor$2,$11372);var $11377 = Kind$Term$all$(_eras$9,"",_name$10,_xtyp$11,(_s$13=>_x$14=>{var $11378 = _body$12;return $11378;}));var $11373 = $11377;break;};var $11370 = $11373;break;case 'List.nil':var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11380=self.name;var $11381=self.pars;var self = _ctor$2;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11383=self.name;var $11384=self.args;var $11385=self.inds;var _ret$12 = Kind$Term$ref$(Kind$Name$read$("P"));var _ret$13 = (()=>{var $11388 = _ret$12;var $11389 = $11385;let _ret$14=$11388;let _v$13;while ($11389._==='List.cons') {_v$13=$11389.head;var $11388 = Kind$Term$app$(_ret$14,(()=>{var self = _v$13;switch(self._){case 'Kind.Binder.new':var $11390=self.term;var $11391 = $11390;return $11391;};})());_ret$14=$11388;$11389=$11389.tail;}return _ret$14;})();var _ctr$14 = String$flatten$(List$cons$($11380,List$cons$(Kind$Name$read$("."),List$cons$($11383,List$nil))));var _slf$15 = Kind$Term$ref$(_ctr$14);var _slf$16 = (()=>{var $11393 = _slf$15;var $11394 = $11381;let _slf$17=$11393;let _v$16;while ($11394._==='List.cons') {_v$16=$11394.head;var $11393 = Kind$Term$app$(_slf$17,Kind$Term$ref$((()=>{var self = _v$16;switch(self._){case 'Kind.Binder.new':var $11395=self.name;var $11396 = $11395;return $11396;};})()));_slf$17=$11393;$11394=$11394.tail;}return _slf$17;})();var _slf$17 = (()=>{var $11398 = _slf$16;var $11399 = $11384;let _slf$18=$11398;let _v$17;while ($11399._==='List.cons') {_v$17=$11399.head;var $11398 = Kind$Term$app$(_slf$18,Kind$Term$ref$((()=>{var self = _v$17;switch(self._){case 'Kind.Binder.new':var $11400=self.name;var $11401 = $11400;return $11401;};})()));_slf$18=$11398;$11399=$11399.tail;}return _slf$18;})();var $11386 = Kind$Term$app$(_ret$13,_slf$17);var $11382 = $11386;break;};var $11379 = $11382;break;};var $11370 = $11379;break;};return $11370;};
  const Kind$Parser$ADT$Datatype$build_term$constructor$go = x0=>x1=>x2=>Kind$Parser$ADT$Datatype$build_term$constructor$go$(x0,x1,x2);
  function Kind$Parser$ADT$Datatype$build_term$constructor$(_type$1,_ctor$2){var self = _ctor$2;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11403=self.args;var $11404 = Kind$Parser$ADT$Datatype$build_term$constructor$go$(_type$1,_ctor$2,$11403);var $11402 = $11404;break;};return $11402;};
  const Kind$Parser$ADT$Datatype$build_term$constructor = x0=>x1=>Kind$Parser$ADT$Datatype$build_term$constructor$(x0,x1);
  function Kind$Parser$ADT$Datatype$build_term$constructors$go$(_type$1,_name$2,_ctrs$3){var self = _ctrs$3;switch(self._){case 'List.cons':var $11406=self.head;var $11407=self.tail;var self = $11406;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11409=self.name;var $11410 = Kind$Term$all$(Bool$false,"",$11409,Kind$Parser$ADT$Datatype$build_term$constructor$(_type$1,$11406),(_s$9=>_x$10=>{var $11411 = Kind$Parser$ADT$Datatype$build_term$constructors$go$(_type$1,_name$2,$11407);return $11411;}));var $11408 = $11410;break;};var $11405 = $11408;break;case 'List.nil':var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11413=self.inds;var _ret$9 = Kind$Term$ref$(Kind$Name$read$("P"));var _ret$10 = (()=>{var $11416 = _ret$9;var $11417 = $11413;let _ret$11=$11416;let _v$10;while ($11417._==='List.cons') {_v$10=$11417.head;var $11416 = Kind$Term$app$(_ret$11,Kind$Term$ref$((()=>{var self = _v$10;switch(self._){case 'Kind.Binder.new':var $11418=self.name;var $11419 = $11418;return $11419;};})()));_ret$11=$11416;$11417=$11417.tail;}return _ret$11;})();var $11414 = Kind$Term$app$(_ret$10,Kind$Term$ref$((_name$2+".Self")));var $11412 = $11414;break;};var $11405 = $11412;break;};return $11405;};
  const Kind$Parser$ADT$Datatype$build_term$constructors$go = x0=>x1=>x2=>Kind$Parser$ADT$Datatype$build_term$constructors$go$(x0,x1,x2);
  function Kind$Parser$ADT$Datatype$build_term$constructors$(_type$1){var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11421=self.name;var $11422=self.ctrs;var $11423 = Kind$Parser$ADT$Datatype$build_term$constructors$go$(_type$1,$11421,$11422);var $11420 = $11423;break;};return $11420;};
  const Kind$Parser$ADT$Datatype$build_term$constructors = x0=>Kind$Parser$ADT$Datatype$build_term$constructors$(x0);
  function Kind$Parser$ADT$Datatype$build_term$go$(_type$1,_name$2,_pars$3,_inds$4){var self = _pars$3;switch(self._){case 'List.cons':var $11425=self.head;var $11426=self.tail;var self = $11425;switch(self._){case 'Kind.Binder.new':var $11428=self.name;var $11429 = Kind$Term$lam$($11428,(_x$10=>{var $11430 = Kind$Parser$ADT$Datatype$build_term$go$(_type$1,_name$2,$11426,_inds$4);return $11430;}));var $11427 = $11429;break;};var $11424 = $11427;break;case 'List.nil':var self = _inds$4;switch(self._){case 'List.cons':var $11432=self.head;var $11433=self.tail;var self = $11432;switch(self._){case 'Kind.Binder.new':var $11435=self.name;var $11436 = Kind$Term$lam$($11435,(_x$10=>{var $11437 = Kind$Parser$ADT$Datatype$build_term$go$(_type$1,_name$2,_pars$3,$11433);return $11437;}));var $11434 = $11436;break;};var $11431 = $11434;break;case 'List.nil':var $11438 = Kind$Term$all$(Bool$true,(_name$2+".Self"),Kind$Name$read$("P"),Kind$Parser$ADT$Datatype$build_term$motive$(_type$1),(_s$5=>_x$6=>{var $11439 = Kind$Parser$ADT$Datatype$build_term$constructors$(_type$1);return $11439;}));var $11431 = $11438;break;};var $11424 = $11431;break;};return $11424;};
  const Kind$Parser$ADT$Datatype$build_term$go = x0=>x1=>x2=>x3=>Kind$Parser$ADT$Datatype$build_term$go$(x0,x1,x2,x3);
  function Kind$Parser$ADT$Datatype$build_term$(_type$1){var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11441=self.name;var $11442=self.pars;var $11443=self.inds;var $11444 = Kind$Parser$ADT$Datatype$build_term$go$(_type$1,$11441,$11442,$11443);var $11440 = $11444;break;};return $11440;};
  const Kind$Parser$ADT$Datatype$build_term = x0=>Kind$Parser$ADT$Datatype$build_term$(x0);
  function Kind$Parser$ADT$Datatype$build_type$go$(_type$1,_name$2,_pars$3,_inds$4){var self = _pars$3;switch(self._){case 'List.cons':var $11446=self.head;var $11447=self.tail;var self = $11446;switch(self._){case 'Kind.Binder.new':var $11449=self.name;var $11450=self.term;var $11451 = Kind$Term$all$(Bool$false,"",$11449,$11450,(_s$10=>_x$11=>{var $11452 = Kind$Parser$ADT$Datatype$build_type$go$(_type$1,_name$2,$11447,_inds$4);return $11452;}));var $11448 = $11451;break;};var $11445 = $11448;break;case 'List.nil':var self = _inds$4;switch(self._){case 'List.cons':var $11454=self.head;var $11455=self.tail;var self = $11454;switch(self._){case 'Kind.Binder.new':var $11457=self.name;var $11458=self.term;var $11459 = Kind$Term$all$(Bool$false,"",$11457,$11458,(_s$10=>_x$11=>{var $11460 = Kind$Parser$ADT$Datatype$build_type$go$(_type$1,_name$2,_pars$3,$11455);return $11460;}));var $11456 = $11459;break;};var $11453 = $11456;break;case 'List.nil':var $11461 = Kind$Term$typ;var $11453 = $11461;break;};var $11445 = $11453;break;};return $11445;};
  const Kind$Parser$ADT$Datatype$build_type$go = x0=>x1=>x2=>x3=>Kind$Parser$ADT$Datatype$build_type$go$(x0,x1,x2,x3);
  function Kind$Parser$ADT$Datatype$build_type$(_type$1){var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11463=self.name;var $11464=self.pars;var $11465=self.inds;var $11466 = Kind$Parser$ADT$Datatype$build_type$go$(_type$1,$11463,$11464,$11465);var $11462 = $11466;break;};return $11462;};
  const Kind$Parser$ADT$Datatype$build_type = x0=>Kind$Parser$ADT$Datatype$build_type$(x0);
  function Kind$Parser$ADT$Constructor$build_term$opt$go$(_type$1,_ctor$2,_ctrs$3){var self = _ctrs$3;switch(self._){case 'List.cons':var $11468=self.head;var $11469=self.tail;var self = $11468;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11471=self.name;var $11472 = Kind$Term$lam$($11471,(_x$9=>{var $11473 = Kind$Parser$ADT$Constructor$build_term$opt$go$(_type$1,_ctor$2,$11469);return $11473;}));var $11470 = $11472;break;};var $11467 = $11470;break;case 'List.nil':var self = _ctor$2;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11475=self.name;var $11476=self.args;var _ret$7 = Kind$Term$ref$($11475);var _ret$8 = (()=>{var $11479 = _ret$7;var $11480 = $11476;let _ret$9=$11479;let _arg$8;while ($11480._==='List.cons') {_arg$8=$11480.head;var $11479 = Kind$Term$app$(_ret$9,Kind$Term$ref$((()=>{var self = _arg$8;switch(self._){case 'Kind.Binder.new':var $11481=self.name;var $11482 = $11481;return $11482;};})()));_ret$9=$11479;$11480=$11480.tail;}return _ret$9;})();var $11477 = _ret$8;var $11474 = $11477;break;};var $11467 = $11474;break;};return $11467;};
  const Kind$Parser$ADT$Constructor$build_term$opt$go = x0=>x1=>x2=>Kind$Parser$ADT$Constructor$build_term$opt$go$(x0,x1,x2);
  function Kind$Parser$ADT$Constructor$build_term$opt$(_type$1,_ctor$2){var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11484=self.ctrs;var $11485 = Kind$Parser$ADT$Constructor$build_term$opt$go$(_type$1,_ctor$2,$11484);var $11483 = $11485;break;};return $11483;};
  const Kind$Parser$ADT$Constructor$build_term$opt = x0=>x1=>Kind$Parser$ADT$Constructor$build_term$opt$(x0,x1);
  function Kind$Parser$ADT$Constructor$build_term$go$(_type$1,_ctor$2,_name$3,_pars$4,_args$5){var self = _pars$4;switch(self._){case 'List.cons':var $11487=self.head;var $11488=self.tail;var self = $11487;switch(self._){case 'Kind.Binder.new':var $11490=self.name;var $11491 = Kind$Term$lam$($11490,(_x$11=>{var $11492 = Kind$Parser$ADT$Constructor$build_term$go$(_type$1,_ctor$2,_name$3,$11488,_args$5);return $11492;}));var $11489 = $11491;break;};var $11486 = $11489;break;case 'List.nil':var self = _args$5;switch(self._){case 'List.cons':var $11494=self.head;var $11495=self.tail;var self = $11494;switch(self._){case 'Kind.Binder.new':var $11497=self.name;var $11498 = Kind$Term$lam$($11497,(_x$11=>{var $11499 = Kind$Parser$ADT$Constructor$build_term$go$(_type$1,_ctor$2,_name$3,_pars$4,$11495);return $11499;}));var $11496 = $11498;break;};var $11493 = $11496;break;case 'List.nil':var $11500 = Kind$Term$lam$(Kind$Name$read$("P"),(_x$6=>{var $11501 = Kind$Parser$ADT$Constructor$build_term$opt$(_type$1,_ctor$2);return $11501;}));var $11493 = $11500;break;};var $11486 = $11493;break;};return $11486;};
  const Kind$Parser$ADT$Constructor$build_term$go = x0=>x1=>x2=>x3=>x4=>Kind$Parser$ADT$Constructor$build_term$go$(x0,x1,x2,x3,x4);
  function Kind$Parser$ADT$Constructor$build_term$(_type$1,_ctor$2){var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11503=self.name;var $11504=self.pars;var self = _ctor$2;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11506=self.args;var $11507 = Kind$Parser$ADT$Constructor$build_term$go$(_type$1,_ctor$2,$11503,$11504,$11506);var $11505 = $11507;break;};var $11502 = $11505;break;};return $11502;};
  const Kind$Parser$ADT$Constructor$build_term = x0=>x1=>Kind$Parser$ADT$Constructor$build_term$(x0,x1);
  function Kind$Parser$ADT$Constructor$build_type$go$(_type$1,_ctor$2,_name$3,_pars$4,_args$5){var self = _pars$4;switch(self._){case 'List.cons':var $11509=self.head;var $11510=self.tail;var self = $11509;switch(self._){case 'Kind.Binder.new':var $11512=self.eras;var $11513=self.name;var $11514=self.term;var $11515 = Kind$Term$all$($11512,"",$11513,$11514,(_s$11=>_x$12=>{var $11516 = Kind$Parser$ADT$Constructor$build_type$go$(_type$1,_ctor$2,_name$3,$11510,_args$5);return $11516;}));var $11511 = $11515;break;};var $11508 = $11511;break;case 'List.nil':var self = _args$5;switch(self._){case 'List.cons':var $11518=self.head;var $11519=self.tail;var self = $11518;switch(self._){case 'Kind.Binder.new':var $11521=self.eras;var $11522=self.name;var $11523=self.term;var $11524 = Kind$Term$all$($11521,"",$11522,$11523,(_s$11=>_x$12=>{var $11525 = Kind$Parser$ADT$Constructor$build_type$go$(_type$1,_ctor$2,_name$3,_pars$4,$11519);return $11525;}));var $11520 = $11524;break;};var $11517 = $11520;break;case 'List.nil':var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11527=self.pars;var self = _ctor$2;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11529=self.inds;var _type$14 = Kind$Term$ref$(_name$3);var _type$15 = (()=>{var $11532 = _type$14;var $11533 = $11527;let _type$16=$11532;let _v$15;while ($11533._==='List.cons') {_v$15=$11533.head;var $11532 = Kind$Term$app$(_type$16,Kind$Term$ref$((()=>{var self = _v$15;switch(self._){case 'Kind.Binder.new':var $11534=self.name;var $11535 = $11534;return $11535;};})()));_type$16=$11532;$11533=$11533.tail;}return _type$16;})();var _type$16 = (()=>{var $11537 = _type$15;var $11538 = $11529;let _type$17=$11537;let _v$16;while ($11538._==='List.cons') {_v$16=$11538.head;var $11537 = Kind$Term$app$(_type$17,(()=>{var self = _v$16;switch(self._){case 'Kind.Binder.new':var $11539=self.term;var $11540 = $11539;return $11540;};})());_type$17=$11537;$11538=$11538.tail;}return _type$17;})();var $11530 = _type$16;var $11528 = $11530;break;};var $11526 = $11528;break;};var $11517 = $11526;break;};var $11508 = $11517;break;};return $11508;};
  const Kind$Parser$ADT$Constructor$build_type$go = x0=>x1=>x2=>x3=>x4=>Kind$Parser$ADT$Constructor$build_type$go$(x0,x1,x2,x3,x4);
  function Kind$Parser$ADT$Constructor$build_type$(_type$1,_ctor$2){var self = _type$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11542=self.name;var $11543=self.pars;var self = _ctor$2;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11545=self.args;var $11546 = Kind$Parser$ADT$Constructor$build_type$go$(_type$1,_ctor$2,$11542,$11543,$11545);var $11544 = $11546;break;};var $11541 = $11544;break;};return $11541;};
  const Kind$Parser$ADT$Constructor$build_type = x0=>x1=>Kind$Parser$ADT$Constructor$build_type$(x0,x1);
  function List$is_empty$(_list$2){var self = _list$2;switch(self._){case 'List.nil':var $11548 = Bool$true;var $11547 = $11548;break;case 'List.cons':var $11549 = Bool$false;var $11547 = $11549;break;};return $11547;};
  const List$is_empty = x0=>List$is_empty$(x0);
  function Kind$Term$get_args$go$(_term$1,_args$2){var Kind$Term$get_args$go$=(_term$1,_args$2)=>({ctr:'TCO',arg:[_term$1,_args$2]});var Kind$Term$get_args$go=_term$1=>_args$2=>Kind$Term$get_args$go$(_term$1,_args$2);var arg=[_term$1,_args$2];while(true){let [_term$1,_args$2]=arg;var R=(()=>{var self = _term$1;switch(self._){case 'Kind.Term.app':var $11550=self.func;var $11551=self.argm;var $11552 = Kind$Term$get_args$go$($11550,List$cons$($11551,_args$2));return $11552;case 'Kind.Term.ori':var $11553=self.expr;var $11554 = Kind$Term$get_args$go$($11553,_args$2);return $11554;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $11555 = Pair$new$(_term$1,_args$2);return $11555;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Term$get_args$go = x0=>x1=>Kind$Term$get_args$go$(x0,x1);
  function Kind$Term$get_args$(_term$1){var $11556 = Kind$Term$get_args$go$(_term$1,List$nil);return $11556;};
  const Kind$Term$get_args = x0=>Kind$Term$get_args$(x0);
  function Kind$Parser$ADT$Derive$stringifier$term$cont$(_call$1,_rest$2){var self = Kind$Term$get_args$(_call$1);switch(self._){case 'Pair.new':var $11558=self.fst;var $11559=self.snd;var _term$5 = Kind$Term$ref$((Kind$Term$extract_name$($11558)+".stringifier"));var _term$6 = (()=>{var $11562 = _term$5;var $11563 = $11559;let _term$7=$11562;let _par$6;while ($11563._==='List.cons') {_par$6=$11563.head;var $11562 = Kind$Term$app$(_term$7,Kind$Term$hol$(Bits$e));_term$7=$11562;$11563=$11563.tail;}return _term$7;})();var _term$7 = (()=>{var $11565 = _term$6;var $11566 = $11559;let _term$8=$11565;let _par$7;while ($11566._==='List.cons') {_par$7=$11566.head;var $11565 = Kind$Term$app$(_term$8,Kind$Parser$ADT$Derive$stringifier$term$cont$(_par$7,Maybe$none));_term$8=$11565;$11566=$11566.tail;}return _term$8;})();var self = _rest$2;switch(self._){case 'Maybe.some':var $11567=self.value;var self = $11567;switch(self._){case 'Pair.new':var $11569=self.fst;var $11570=self.snd;var _term$11 = Kind$Term$app$(_term$7,Kind$Term$ref$($11569));var _term$12 = Kind$Term$app$(_term$11,$11570);var $11571 = _term$12;var $11568 = $11571;break;};var $11560 = $11568;break;case 'Maybe.none':var $11572 = _term$7;var $11560 = $11572;break;};var $11557 = $11560;break;};return $11557;};
  const Kind$Parser$ADT$Derive$stringifier$term$cont = x0=>x1=>Kind$Parser$ADT$Derive$stringifier$term$cont$(x0,x1);
  function Kind$Parser$ADT$Derive$stringifier$term$args$(_args$1,_fst$2){var self = _args$1;switch(self._){case 'List.cons':var $11574=self.head;var $11575=self.tail;var self = $11574;switch(self._){case 'Kind.Binder.new':var $11577=self.name;var $11578=self.term;var self = Kind$Term$get_args$($11578);switch(self._){case 'Pair.new':var _rest$10 = Kind$Parser$ADT$Derive$stringifier$term$args$($11575,Bool$false);var _term$11 = Kind$Parser$ADT$Derive$stringifier$term$cont$($11578,Maybe$some$(Pair$new$(("x."+$11577),_rest$10)));var _term$12 = Kind$Term$app$(Kind$Term$app$(Kind$Term$ref$("Stringifier.text"),Kind$Term$str$((()=>{var self = _fst$2;if (self) {var $11581 = "(";return $11581;} else {var $11582 = ",";return $11582;};})())),_term$11);var $11580 = _term$12;var $11579 = $11580;break;};var $11576 = $11579;break;};var $11573 = $11576;break;case 'List.nil':var _term$3 = Kind$Term$ref$("str");var self = _fst$2;if (self) {var $11584 = _term$3;var _term$4 = $11584;} else {var $11585 = Kind$Term$app$(Kind$Term$app$(Kind$Term$ref$("Stringifier.text"),Kind$Term$str$(")")),_term$3);var _term$4 = $11585;};var $11583 = _term$4;var $11573 = $11583;break;};return $11573;};
  const Kind$Parser$ADT$Derive$stringifier$term$args = x0=>x1=>Kind$Parser$ADT$Derive$stringifier$term$args$(x0,x1);
  function Kind$Parser$ADT$Derive$stringifier$ctr$(_adt_name$1,_ctr$2){var self = _ctr$2;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11587=self.name;var $11588=self.args;var _term$6 = Kind$Term$ref$("Stringifier.text");var _term$7 = Kind$Term$app$(_term$6,Kind$Term$str$((_adt_name$1+("."+$11587))));var _term$8 = Kind$Term$app$(_term$7,Kind$Parser$ADT$Derive$stringifier$term$args$($11588,Bool$true));var $11589 = Pair$new$($11587,_term$8);var $11586 = $11589;break;};return $11586;};
  const Kind$Parser$ADT$Derive$stringifier$ctr = x0=>x1=>Kind$Parser$ADT$Derive$stringifier$ctr$(x0,x1);
  function Kind$Parser$ADT$Derive$stringifier$term$ctrs$(_adt_name$1,_ctrs$2){var self = _ctrs$2;switch(self._){case 'List.cons':var $11591=self.head;var $11592=self.tail;var $11593 = List$cons$(Kind$Parser$ADT$Derive$stringifier$ctr$(_adt_name$1,$11591),Kind$Parser$ADT$Derive$stringifier$term$ctrs$(_adt_name$1,$11592));var $11590 = $11593;break;case 'List.nil':var $11594 = List$nil;var $11590 = $11594;break;};return $11590;};
  const Kind$Parser$ADT$Derive$stringifier$term$ctrs = x0=>x1=>Kind$Parser$ADT$Derive$stringifier$term$ctrs$(x0,x1);
  function Kind$Parser$ADT$Derive$stringifier$term$(_adt$1){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11596=self.name;var $11597=self.pars;var $11598=self.inds;var $11599=self.ctrs;var self = (List$is_empty$($11597)&&List$is_empty$($11598));if (self) {var _term$7 = Kind$Term$lam$("x",(_x$7=>{var $11602 = Kind$Term$lam$("str",(_str$8=>{var _ctrs$9 = Kind$Parser$ADT$Derive$stringifier$term$ctrs$($11596,$11599);var _cses$10 = Kind$Map$new;var _cses$11 = (()=>{var $11605 = _cses$10;var $11606 = _ctrs$9;let _cses$12=$11605;let _ctr$11;while ($11606._==='List.cons') {_ctr$11=$11606.head;var self = _ctr$11;switch(self._){case 'Pair.new':var $11607=self.fst;var $11608=self.snd;var $11609 = Kind$Map$set$($11607,$11608,_cses$12);var $11605 = $11609;break;};_cses$12=$11605;$11606=$11606.tail;}return _cses$12;})();var $11603 = Kind$Term$cse$(Bits$e,_x$7,"x",List$nil,_cses$11,Maybe$none);return $11603;}));return $11602;}));var $11601 = Maybe$some$(_term$7);var $11600 = $11601;} else {var $11610 = Maybe$none;var $11600 = $11610;};var $11595 = $11600;break;};return $11595;};
  const Kind$Parser$ADT$Derive$stringifier$term = x0=>Kind$Parser$ADT$Derive$stringifier$term$(x0);
  function Kind$Parser$ADT$Derive$stringifier$type$(_adt$1){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11612=self.name;var $11613=self.pars;var $11614=self.inds;var self = (List$is_empty$($11613)&&List$is_empty$($11614));if (self) {var $11616 = Maybe$some$(Kind$Term$app$(Kind$Term$ref$("Stringifier"),Kind$Term$ref$($11612)));var $11615 = $11616;} else {var $11617 = Maybe$none;var $11615 = $11617;};var $11611 = $11615;break;};return $11611;};
  const Kind$Parser$ADT$Derive$stringifier$type = x0=>Kind$Parser$ADT$Derive$stringifier$type$(x0);
  function Kind$Parser$ADT$Derived$new$(_name$1,_arit$2,_term$3,_type$4){var $11618 = ({_:'Kind.Parser.ADT.Derived.new','name':_name$1,'arit':_arit$2,'term':_term$3,'type':_type$4});return $11618;};
  const Kind$Parser$ADT$Derived$new = x0=>x1=>x2=>x3=>Kind$Parser$ADT$Derived$new$(x0,x1,x2,x3);
  function Kind$Parser$ADT$Derive$parser$term$cont$(_call$1){var self = Kind$Term$get_args$(_call$1);switch(self._){case 'Pair.new':var $11620=self.fst;var $11621=self.snd;var _term$4 = Kind$Term$ref$((Kind$Term$extract_name$($11620)+".parser"));var _term$5 = (()=>{var $11624 = _term$4;var $11625 = $11621;let _term$6=$11624;let _par$5;while ($11625._==='List.cons') {_par$5=$11625.head;var $11624 = Kind$Term$app$(_term$6,Kind$Term$hol$(Bits$e));_term$6=$11624;$11625=$11625.tail;}return _term$6;})();var _term$6 = (()=>{var $11627 = _term$5;var $11628 = $11621;let _term$7=$11627;let _par$6;while ($11628._==='List.cons') {_par$6=$11628.head;var $11627 = Kind$Term$app$(_term$7,Kind$Parser$ADT$Derive$parser$term$cont$(_par$6));_term$7=$11627;$11628=$11628.tail;}return _term$7;})();var $11622 = _term$6;var $11619 = $11622;break;};return $11619;};
  const Kind$Parser$ADT$Derive$parser$term$cont = x0=>Kind$Parser$ADT$Derive$parser$term$cont$(x0);
  function Kind$Parser$ADT$Derive$parser$term$args$(_adt$1,_cnam$2,_args$3,_vars$4,_fst$5){var self = _args$3;switch(self._){case 'List.cons':var $11630=self.head;var $11631=self.tail;var self = $11630;switch(self._){case 'Kind.Binder.new':var $11633=self.name;var $11634=self.term;var _term$11 = Kind$Term$ref$("Parser.bind");var _term$12 = Kind$Term$app$(_term$11,Kind$Term$hol$(Bits$e));var _term$13 = Kind$Term$app$(_term$12,Kind$Term$hol$(Bits$e));var _cont$14 = Kind$Term$ref$("Parser.prefix");var _cont$15 = Kind$Term$app$(_cont$14,Kind$Term$hol$(Bits$e));var _cont$16 = Kind$Term$app$(_cont$15,Kind$Term$str$((()=>{var self = _fst$5;if (self) {var $11636 = "(";return $11636;} else {var $11637 = ",";return $11637;};})()));var _cont$17 = Kind$Term$app$(_cont$16,Kind$Parser$ADT$Derive$parser$term$cont$($11634));var _term$18 = Kind$Term$app$(_term$13,_cont$17);var _term$19 = Kind$Term$app$(_term$18,Kind$Term$lam$($11633,(_x$19=>{var $11638 = Kind$Parser$ADT$Derive$parser$term$args$(_adt$1,_cnam$2,$11631,List$cons$(_x$19,_vars$4),Bool$false);return $11638;})));var $11635 = _term$19;var $11632 = $11635;break;};var $11629 = $11632;break;case 'List.nil':var _body$6 = Kind$Term$ref$("Parser.pure");var _body$7 = Kind$Term$app$(_body$6,Kind$Term$hol$(Bits$e));var _func$8 = Kind$Term$ref$(_cnam$2);var _func$9 = List$fold$(_vars$4,_func$8,(_var$9=>_func$10=>{var $11640 = Kind$Term$app$(_func$10,_var$9);return $11640;}));var _body$10 = Kind$Term$app$(_body$7,_func$9);var self = _fst$5;if (self) {var $11641 = _body$10;var $11639 = $11641;} else {var _term$11 = Kind$Term$ref$("Parser.bind");var _term$12 = Kind$Term$app$(_term$11,Kind$Term$hol$(Bits$e));var _term$13 = Kind$Term$app$(_term$12,Kind$Term$hol$(Bits$e));var _term$14 = Kind$Term$app$(_term$13,Kind$Term$app$(Kind$Term$ref$("Parser.text"),Kind$Term$str$(")")));var _term$15 = Kind$Term$app$(_term$14,Kind$Term$lam$("",(_x$15=>{var $11643 = _body$10;return $11643;})));var $11642 = _term$15;var $11639 = $11642;};var $11629 = $11639;break;};return $11629;};
  const Kind$Parser$ADT$Derive$parser$term$args = x0=>x1=>x2=>x3=>x4=>Kind$Parser$ADT$Derive$parser$term$args$(x0,x1,x2,x3,x4);
  function Kind$Parser$ADT$Derive$parser$term$cses$(_adt$1,_cses$2){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11645=self.name;var self = _cses$2;switch(self._){case 'List.cons':var $11647=self.head;var $11648=self.tail;var self = $11647;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11650=self.name;var $11651=self.args;var _cnam$13 = ($11645+("."+$11650));var _term$14 = Kind$Term$ref$("Parser.bind");var _term$15 = Kind$Term$app$(_term$14,Kind$Term$hol$(Bits$e));var _term$16 = Kind$Term$app$(_term$15,Kind$Term$hol$(Bits$e));var _term$17 = Kind$Term$app$(_term$16,Kind$Term$app$(Kind$Term$ref$("Parser.text"),Kind$Term$str$(_cnam$13)));var _term$18 = Kind$Term$app$(_term$17,Kind$Term$lam$("",(_x$18=>{var $11653 = Kind$Parser$ADT$Derive$parser$term$args$(_adt$1,_cnam$13,$11651,List$nil,Bool$true);return $11653;})));var _list$19 = Kind$Term$ref$("List.cons");var _list$20 = Kind$Term$app$(_list$19,Kind$Term$hol$(Bits$e));var _list$21 = Kind$Term$app$(_list$20,_term$18);var _list$22 = Kind$Term$app$(_list$21,Kind$Parser$ADT$Derive$parser$term$cses$(_adt$1,$11648));var $11652 = _list$22;var $11649 = $11652;break;};var $11646 = $11649;break;case 'List.nil':var _fail$8 = Kind$Term$ref$("Parser.fail");var _fail$9 = Kind$Term$app$(_fail$8,Kind$Term$hol$(Bits$e));var _fail$10 = Kind$Term$app$(_fail$9,Kind$Term$str$(""));var _term$11 = Kind$Term$ref$("List.cons");var _term$12 = Kind$Term$app$(_term$11,Kind$Term$hol$(Bits$e));var _term$13 = Kind$Term$app$(_term$12,_fail$10);var _term$14 = Kind$Term$app$(_term$13,Kind$Term$app$(Kind$Term$ref$("List.nil"),Kind$Term$hol$(Bits$e)));var $11654 = _term$14;var $11646 = $11654;break;};var $11644 = $11646;break;};return $11644;};
  const Kind$Parser$ADT$Derive$parser$term$cses = x0=>x1=>Kind$Parser$ADT$Derive$parser$term$cses$(x0,x1);
  function Kind$Parser$ADT$Derive$parser$term$(_adt$1){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11656=self.pars;var $11657=self.inds;var $11658=self.ctrs;var self = (List$is_empty$($11656)&&List$is_empty$($11657));if (self) {var _term$7 = Kind$Term$ref$("Parser.choice");var _term$8 = Kind$Term$app$(_term$7,Kind$Term$hol$(Bits$e));var _term$9 = Kind$Term$app$(_term$8,Kind$Parser$ADT$Derive$parser$term$cses$(_adt$1,$11658));var $11660 = Maybe$some$(_term$9);var $11659 = $11660;} else {var $11661 = Maybe$none;var $11659 = $11661;};var $11655 = $11659;break;};return $11655;};
  const Kind$Parser$ADT$Derive$parser$term = x0=>Kind$Parser$ADT$Derive$parser$term$(x0);
  function Kind$Parser$ADT$Derive$parser$type$(_adt$1){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11663=self.name;var $11664=self.pars;var $11665=self.inds;var self = (List$is_empty$($11664)&&List$is_empty$($11665));if (self) {var $11667 = Maybe$some$(Kind$Term$app$(Kind$Term$ref$("Parser"),Kind$Term$ref$($11663)));var $11666 = $11667;} else {var $11668 = Maybe$none;var $11666 = $11668;};var $11662 = $11666;break;};return $11662;};
  const Kind$Parser$ADT$Derive$parser$type = x0=>Kind$Parser$ADT$Derive$parser$type$(x0);
  function Kind$Parser$ADT$Derive$serializer$term$cont$(_call$1,_rest$2){var self = Kind$Term$get_args$(_call$1);switch(self._){case 'Pair.new':var $11670=self.fst;var $11671=self.snd;var _term$5 = Kind$Term$ref$((Kind$Term$extract_name$($11670)+".serializer"));var _term$6 = (()=>{var $11674 = _term$5;var $11675 = $11671;let _term$7=$11674;let _par$6;while ($11675._==='List.cons') {_par$6=$11675.head;var $11674 = Kind$Term$app$(_term$7,Kind$Term$hol$(Bits$e));_term$7=$11674;$11675=$11675.tail;}return _term$7;})();var _term$7 = (()=>{var $11677 = _term$6;var $11678 = $11671;let _term$8=$11677;let _par$7;while ($11678._==='List.cons') {_par$7=$11678.head;var $11677 = Kind$Term$app$(_term$8,Kind$Parser$ADT$Derive$serializer$term$cont$(_par$7,Maybe$none));_term$8=$11677;$11678=$11678.tail;}return _term$8;})();var self = _rest$2;switch(self._){case 'Maybe.some':var $11679=self.value;var self = $11679;switch(self._){case 'Pair.new':var $11681=self.fst;var $11682=self.snd;var _term$11 = Kind$Term$app$(_term$7,Kind$Term$ref$($11681));var _term$12 = Kind$Term$app$(_term$11,$11682);var $11683 = _term$12;var $11680 = $11683;break;};var $11672 = $11680;break;case 'Maybe.none':var $11684 = _term$7;var $11672 = $11684;break;};var $11669 = $11672;break;};return $11669;};
  const Kind$Parser$ADT$Derive$serializer$term$cont = x0=>x1=>Kind$Parser$ADT$Derive$serializer$term$cont$(x0,x1);
  function Kind$Parser$ADT$Derive$serializer$term$args$(_args$1){var self = _args$1;switch(self._){case 'List.cons':var $11686=self.head;var $11687=self.tail;var self = $11686;switch(self._){case 'Kind.Binder.new':var $11689=self.name;var $11690=self.term;var self = Kind$Term$get_args$($11690);switch(self._){case 'Pair.new':var _rest$9 = Kind$Parser$ADT$Derive$serializer$term$args$($11687);var _term$10 = Kind$Parser$ADT$Derive$serializer$term$cont$($11690,Maybe$some$(Pair$new$(("x."+$11689),_rest$9)));var $11692 = _term$10;var $11691 = $11692;break;};var $11688 = $11691;break;};var $11685 = $11688;break;case 'List.nil':var $11693 = Kind$Term$ref$("bs");var $11685 = $11693;break;};return $11685;};
  const Kind$Parser$ADT$Derive$serializer$term$args = x0=>Kind$Parser$ADT$Derive$serializer$term$args$(x0);
  function Kind$Parser$ADT$Derive$serializer$ctr$bits$(_bs$1,_rest$2){var self = _bs$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $11695=self.slice(0,-1);var $11696 = Kind$Term$app$(Kind$Term$ref$("Bits.o"),Kind$Parser$ADT$Derive$serializer$ctr$bits$($11695,_rest$2));var $11694 = $11696;break;case 'i':var $11697=self.slice(0,-1);var $11698 = Kind$Term$app$(Kind$Term$ref$("Bits.i"),Kind$Parser$ADT$Derive$serializer$ctr$bits$($11697,_rest$2));var $11694 = $11698;break;case 'e':var $11699 = _rest$2;var $11694 = $11699;break;};return $11694;};
  const Kind$Parser$ADT$Derive$serializer$ctr$bits = x0=>x1=>Kind$Parser$ADT$Derive$serializer$ctr$bits$(x0,x1);
  function Kind$Parser$ADT$Derive$serializer$ctr$(_adt_name$1,_ctr$2,_header$3){var self = _ctr$2;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11701=self.name;var $11702=self.args;var _term$7 = Kind$Parser$ADT$Derive$serializer$term$args$($11702);var _term$8 = Kind$Parser$ADT$Derive$serializer$ctr$bits$(_header$3,_term$7);var $11703 = Pair$new$($11701,_term$8);var $11700 = $11703;break;};return $11700;};
  const Kind$Parser$ADT$Derive$serializer$ctr = x0=>x1=>x2=>Kind$Parser$ADT$Derive$serializer$ctr$(x0,x1,x2);
  function Kind$Parser$ADT$Derive$serializer$term$ctrs$(_adt_name$1,_ctrs$2,_header$3){var self = _ctrs$2;switch(self._){case 'List.cons':var $11705=self.head;var $11706=self.tail;var $11707 = List$cons$(Kind$Parser$ADT$Derive$serializer$ctr$(_adt_name$1,$11705,_header$3),Kind$Parser$ADT$Derive$serializer$term$ctrs$(_adt_name$1,$11706,Bits$inc$(_header$3)));var $11704 = $11707;break;case 'List.nil':var $11708 = List$nil;var $11704 = $11708;break;};return $11704;};
  const Kind$Parser$ADT$Derive$serializer$term$ctrs = x0=>x1=>x2=>Kind$Parser$ADT$Derive$serializer$term$ctrs$(x0,x1,x2);
  function Bits$zeros$(_n$1){var self = _n$1;if (self===0n) {var $11710 = Bits$e;var $11709 = $11710;} else {var $11711=(self-1n);var $11712 = (Bits$zeros$($11711)+'0');var $11709 = $11712;};return $11709;};
  const Bits$zeros = x0=>Bits$zeros$(x0);
  const Nat$div = a0=>a1=>(a0/a1);
  function Nat$bitlen$(_n$1){var self = _n$1;if (self===0n) {var $11714 = 0n;var $11713 = $11714;} else {var $11715=(self-1n);var $11716 = Nat$succ$(Nat$bitlen$((_n$1/2n)));var $11713 = $11716;};return $11713;};
  const Nat$bitlen = x0=>Nat$bitlen$(x0);
  function Kind$Parser$ADT$Derive$serializer$term$(_adt$1){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11718=self.name;var $11719=self.pars;var $11720=self.inds;var $11721=self.ctrs;var self = (List$is_empty$($11719)&&List$is_empty$($11720));if (self) {var _term$7 = Kind$Term$lam$("x",(_x$7=>{var $11724 = Kind$Term$lam$("bs",(_bs$8=>{var _ctrs$9 = Kind$Parser$ADT$Derive$serializer$term$ctrs$($11718,$11721,Bits$zeros$(Nat$bitlen$(Nat$pred$((list_length($11721))))));var _cses$10 = Kind$Map$new;var _cses$11 = (()=>{var $11727 = _cses$10;var $11728 = _ctrs$9;let _cses$12=$11727;let _ctr$11;while ($11728._==='List.cons') {_ctr$11=$11728.head;var self = _ctr$11;switch(self._){case 'Pair.new':var $11729=self.fst;var $11730=self.snd;var $11731 = Kind$Map$set$($11729,$11730,_cses$12);var $11727 = $11731;break;};_cses$12=$11727;$11728=$11728.tail;}return _cses$12;})();var $11725 = Kind$Term$cse$(Bits$e,_x$7,"x",List$nil,_cses$11,Maybe$none);return $11725;}));return $11724;}));var $11723 = Maybe$some$(_term$7);var $11722 = $11723;} else {var $11732 = Maybe$none;var $11722 = $11732;};var $11717 = $11722;break;};return $11717;};
  const Kind$Parser$ADT$Derive$serializer$term = x0=>Kind$Parser$ADT$Derive$serializer$term$(x0);
  function Kind$Parser$ADT$Derive$serializer$type$(_adt$1){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11734=self.name;var $11735=self.pars;var $11736=self.inds;var self = (List$is_empty$($11735)&&List$is_empty$($11736));if (self) {var $11738 = Maybe$some$(Kind$Term$app$(Kind$Term$ref$("Serializer"),Kind$Term$ref$($11734)));var $11737 = $11738;} else {var $11739 = Maybe$none;var $11737 = $11739;};var $11733 = $11737;break;};return $11733;};
  const Kind$Parser$ADT$Derive$serializer$type = x0=>Kind$Parser$ADT$Derive$serializer$type$(x0);
  function Kind$Parser$ADT$Derive$serializer$term$bits$(_bits$1){var self = _bits$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $11741=self.slice(0,-1);var $11742 = Kind$Term$app$(Kind$Term$ref$("Bits.o"),Kind$Parser$ADT$Derive$serializer$term$bits$($11741));var $11740 = $11742;break;case 'i':var $11743=self.slice(0,-1);var $11744 = Kind$Term$app$(Kind$Term$ref$("Bits.i"),Kind$Parser$ADT$Derive$serializer$term$bits$($11743));var $11740 = $11744;break;case 'e':var $11745 = Kind$Term$ref$("Bits.e");var $11740 = $11745;break;};return $11740;};
  const Kind$Parser$ADT$Derive$serializer$term$bits = x0=>Kind$Parser$ADT$Derive$serializer$term$bits$(x0);
  function Kind$Parser$ADT$Derive$deserializer$term$cont$(_call$1){var self = Kind$Term$get_args$(_call$1);switch(self._){case 'Pair.new':var $11747=self.fst;var $11748=self.snd;var _term$4 = Kind$Term$ref$((Kind$Term$extract_name$($11747)+".deserializer"));var _term$5 = (()=>{var $11751 = _term$4;var $11752 = $11748;let _term$6=$11751;let _par$5;while ($11752._==='List.cons') {_par$5=$11752.head;var $11751 = Kind$Term$app$(_term$6,Kind$Term$hol$(Bits$e));_term$6=$11751;$11752=$11752.tail;}return _term$6;})();var _term$6 = (()=>{var $11754 = _term$5;var $11755 = $11748;let _term$7=$11754;let _par$6;while ($11755._==='List.cons') {_par$6=$11755.head;var $11754 = Kind$Term$app$(_term$7,Kind$Parser$ADT$Derive$deserializer$term$cont$(_par$6));_term$7=$11754;$11755=$11755.tail;}return _term$7;})();var $11749 = _term$6;var $11746 = $11749;break;};return $11746;};
  const Kind$Parser$ADT$Derive$deserializer$term$cont = x0=>Kind$Parser$ADT$Derive$deserializer$term$cont$(x0);
  function Kind$Parser$ADT$Derive$deserializer$term$args$(_adt$1,_cnam$2,_args$3,_vars$4,_fst$5){var self = _args$3;switch(self._){case 'List.cons':var $11757=self.head;var $11758=self.tail;var self = $11757;switch(self._){case 'Kind.Binder.new':var $11760=self.name;var $11761=self.term;var _term$11 = Kind$Term$ref$("Deserializer.bind");var _term$12 = Kind$Term$app$(_term$11,Kind$Term$hol$(Bits$e));var _term$13 = Kind$Term$app$(_term$12,Kind$Term$hol$(Bits$e));var _term$14 = Kind$Term$app$(_term$13,Kind$Parser$ADT$Derive$deserializer$term$cont$($11761));var _term$15 = Kind$Term$app$(_term$14,Kind$Term$lam$($11760,(_x$15=>{var $11763 = Kind$Parser$ADT$Derive$deserializer$term$args$(_adt$1,_cnam$2,$11758,List$cons$(_x$15,_vars$4),Bool$false);return $11763;})));var $11762 = _term$15;var $11759 = $11762;break;};var $11756 = $11759;break;case 'List.nil':var _body$6 = Kind$Term$ref$("Deserializer.pure");var _body$7 = Kind$Term$app$(_body$6,Kind$Term$hol$(Bits$e));var _func$8 = Kind$Term$ref$(_cnam$2);var _func$9 = List$fold$(_vars$4,_func$8,(_var$9=>_func$10=>{var $11765 = Kind$Term$app$(_func$10,_var$9);return $11765;}));var _body$10 = Kind$Term$app$(_body$7,_func$9);var $11764 = _body$10;var $11756 = $11764;break;};return $11756;};
  const Kind$Parser$ADT$Derive$deserializer$term$args = x0=>x1=>x2=>x3=>x4=>Kind$Parser$ADT$Derive$deserializer$term$args$(x0,x1,x2,x3,x4);
  function Kind$Parser$ADT$Derive$deserializer$term$cses$(_adt$1,_cses$2,_header$3){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11767=self.name;var self = _cses$2;switch(self._){case 'List.cons':var $11769=self.head;var $11770=self.tail;var self = $11769;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11772=self.name;var $11773=self.args;var _cnam$14 = ($11767+("."+$11772));var _term$15 = Kind$Term$ref$("Deserializer.bind");var _term$16 = Kind$Term$app$(_term$15,Kind$Term$hol$(Bits$e));var _term$17 = Kind$Term$app$(_term$16,Kind$Term$hol$(Bits$e));var _term$18 = Kind$Term$app$(_term$17,Kind$Term$app$(Kind$Term$ref$("Deserializer.bits"),Kind$Parser$ADT$Derive$serializer$term$bits$(_header$3)));var _term$19 = Kind$Term$app$(_term$18,Kind$Term$lam$("",(_x$19=>{var $11775 = Kind$Parser$ADT$Derive$deserializer$term$args$(_adt$1,_cnam$14,$11773,List$nil,Bool$true);return $11775;})));var _list$20 = Kind$Term$ref$("List.cons");var _list$21 = Kind$Term$app$(_list$20,Kind$Term$hol$(Bits$e));var _list$22 = Kind$Term$app$(_list$21,_term$19);var _list$23 = Kind$Term$app$(_list$22,Kind$Parser$ADT$Derive$deserializer$term$cses$(_adt$1,$11770,Bits$inc$(_header$3)));var $11774 = _list$23;var $11771 = $11774;break;};var $11768 = $11771;break;case 'List.nil':var $11776 = Kind$Term$app$(Kind$Term$ref$("List.nil"),Kind$Term$hol$(Bits$e));var $11768 = $11776;break;};var $11766 = $11768;break;};return $11766;};
  const Kind$Parser$ADT$Derive$deserializer$term$cses = x0=>x1=>x2=>Kind$Parser$ADT$Derive$deserializer$term$cses$(x0,x1,x2);
  function Kind$Parser$ADT$Derive$deserializer$term$(_adt$1){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11778=self.pars;var $11779=self.inds;var $11780=self.ctrs;var self = (List$is_empty$($11778)&&List$is_empty$($11779));if (self) {var _term$7 = Kind$Term$ref$("Deserializer.choice");var _term$8 = Kind$Term$app$(_term$7,Kind$Term$hol$(Bits$e));var _term$9 = Kind$Term$app$(_term$8,Kind$Parser$ADT$Derive$deserializer$term$cses$(_adt$1,$11780,Bits$zeros$(Nat$bitlen$(Nat$pred$((list_length($11780)))))));var $11782 = Maybe$some$(_term$9);var $11781 = $11782;} else {var $11783 = Maybe$none;var $11781 = $11783;};var $11777 = $11781;break;};return $11777;};
  const Kind$Parser$ADT$Derive$deserializer$term = x0=>Kind$Parser$ADT$Derive$deserializer$term$(x0);
  function Kind$Parser$ADT$Derive$deserializer$type$(_adt$1){var self = _adt$1;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11785=self.name;var $11786=self.pars;var $11787=self.inds;var self = (List$is_empty$($11786)&&List$is_empty$($11787));if (self) {var $11789 = Maybe$some$(Kind$Term$app$(Kind$Term$ref$("Deserializer"),Kind$Term$ref$($11785)));var $11788 = $11789;} else {var $11790 = Maybe$none;var $11788 = $11790;};var $11784 = $11788;break;};return $11784;};
  const Kind$Parser$ADT$Derive$deserializer$type = x0=>Kind$Parser$ADT$Derive$deserializer$type$(x0);
  function Kind$Parser$ADT$Derive$by_name$(_deri$1,_adt$2){var self = _adt$2;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11792=self.name;var self = (_deri$1==="stringifier");if (self) {var _name$8 = ($11792+("."+_deri$1));var $11794 = Maybe$monad$((_m$bind$9=>_m$pure$10=>{var $11795 = _m$bind$9;return $11795;}))(Kind$Parser$ADT$Derive$stringifier$term$(_adt$2))((_term$9=>{var $11796 = Maybe$monad$((_m$bind$10=>_m$pure$11=>{var $11797 = _m$bind$10;return $11797;}))(Kind$Parser$ADT$Derive$stringifier$type$(_adt$2))((_type$10=>{var $11798 = Maybe$monad$((_m$bind$11=>_m$pure$12=>{var $11799 = _m$pure$12;return $11799;}))(Kind$Parser$ADT$Derived$new$(_name$8,0n,_term$9,_type$10));return $11798;}));return $11796;}));var $11793 = $11794;} else {var self = (_deri$1==="parser");if (self) {var _name$8 = ($11792+("."+_deri$1));var $11801 = Maybe$monad$((_m$bind$9=>_m$pure$10=>{var $11802 = _m$bind$9;return $11802;}))(Kind$Parser$ADT$Derive$parser$term$(_adt$2))((_term$9=>{var $11803 = Maybe$monad$((_m$bind$10=>_m$pure$11=>{var $11804 = _m$bind$10;return $11804;}))(Kind$Parser$ADT$Derive$parser$type$(_adt$2))((_type$10=>{var $11805 = Maybe$monad$((_m$bind$11=>_m$pure$12=>{var $11806 = _m$pure$12;return $11806;}))(Kind$Parser$ADT$Derived$new$(_name$8,0n,_term$9,_type$10));return $11805;}));return $11803;}));var $11800 = $11801;} else {var self = (_deri$1==="serializer");if (self) {var _name$8 = ($11792+("."+_deri$1));var $11808 = Maybe$monad$((_m$bind$9=>_m$pure$10=>{var $11809 = _m$bind$9;return $11809;}))(Kind$Parser$ADT$Derive$serializer$term$(_adt$2))((_term$9=>{var $11810 = Maybe$monad$((_m$bind$10=>_m$pure$11=>{var $11811 = _m$bind$10;return $11811;}))(Kind$Parser$ADT$Derive$serializer$type$(_adt$2))((_type$10=>{var $11812 = Maybe$monad$((_m$bind$11=>_m$pure$12=>{var $11813 = _m$pure$12;return $11813;}))(Kind$Parser$ADT$Derived$new$(_name$8,0n,_term$9,_type$10));return $11812;}));return $11810;}));var $11807 = $11808;} else {var self = (_deri$1==="deserializer");if (self) {var _name$8 = ($11792+("."+_deri$1));var $11815 = Maybe$monad$((_m$bind$9=>_m$pure$10=>{var $11816 = _m$bind$9;return $11816;}))(Kind$Parser$ADT$Derive$deserializer$term$(_adt$2))((_term$9=>{var $11817 = Maybe$monad$((_m$bind$10=>_m$pure$11=>{var $11818 = _m$bind$10;return $11818;}))(Kind$Parser$ADT$Derive$deserializer$type$(_adt$2))((_type$10=>{var $11819 = Maybe$monad$((_m$bind$11=>_m$pure$12=>{var $11820 = _m$pure$12;return $11820;}))(Kind$Parser$ADT$Derived$new$(_name$8,0n,_term$9,_type$10));return $11819;}));return $11817;}));var $11814 = $11815;} else {var $11821 = Maybe$none;var $11814 = $11821;};var $11807 = $11814;};var $11800 = $11807;};var $11793 = $11800;};var $11791 = $11793;break;};return $11791;};
  const Kind$Parser$ADT$Derive$by_name = x0=>x1=>Kind$Parser$ADT$Derive$by_name$(x0,x1);
  function Kind$Parser$file$adt$(_file$1,_code$2,_defs$3,_pst$4){var self = _pst$4;switch(self._){case 'Parser.State.new':var $11823=self.err;var _reply$10 = Kind$Parser$spaces(_pst$4);var self = _reply$10;switch(self._){case 'Parser.Reply.error':var $11825=self.err;var self = $11823;switch(self._){case 'Maybe.some':var $11827=self.value;var $11828 = Parser$Reply$error$(Parser$Error$combine$($11827,$11825));var $11826 = $11828;break;case 'Maybe.none':var $11829 = Parser$Reply$error$($11825);var $11826 = $11829;break;};var $11824 = $11826;break;case 'Parser.Reply.value':var $11830=self.pst;var self = $11830;switch(self._){case 'Parser.State.new':var $11832=self.err;var $11833=self.nam;var $11834=self.ini;var $11835=self.idx;var $11836=self.str;var _reply$pst$18 = Parser$State$new$(Parser$Error$maybe_combine$($11823,$11832),$11833,$11834,$11835,$11836);var self = _reply$pst$18;switch(self._){case 'Parser.State.new':var $11838=self.err;var _reply$24 = Parser$get_idx$(_reply$pst$18);var self = _reply$24;switch(self._){case 'Parser.Reply.error':var $11840=self.err;var self = $11838;switch(self._){case 'Maybe.some':var $11842=self.value;var $11843 = Parser$Reply$error$(Parser$Error$combine$($11842,$11840));var $11841 = $11843;break;case 'Maybe.none':var $11844 = Parser$Reply$error$($11840);var $11841 = $11844;break;};var $11839 = $11841;break;case 'Parser.Reply.value':var $11845=self.pst;var $11846=self.val;var self = $11845;switch(self._){case 'Parser.State.new':var $11848=self.err;var $11849=self.nam;var $11850=self.ini;var $11851=self.idx;var $11852=self.str;var _reply$pst$32 = Parser$State$new$(Parser$Error$maybe_combine$($11838,$11848),$11849,$11850,$11851,$11852);var self = _reply$pst$32;switch(self._){case 'Parser.State.new':var $11854=self.err;var _reply$38 = Kind$Parser$ADT$adt$(_reply$pst$32);var self = _reply$38;switch(self._){case 'Parser.Reply.error':var $11856=self.err;var self = $11854;switch(self._){case 'Maybe.some':var $11858=self.value;var $11859 = Parser$Reply$error$(Parser$Error$combine$($11858,$11856));var $11857 = $11859;break;case 'Maybe.none':var $11860 = Parser$Reply$error$($11856);var $11857 = $11860;break;};var $11855 = $11857;break;case 'Parser.Reply.value':var $11861=self.pst;var $11862=self.val;var self = $11861;switch(self._){case 'Parser.State.new':var $11864=self.err;var $11865=self.nam;var $11866=self.ini;var $11867=self.idx;var $11868=self.str;var _reply$pst$46 = Parser$State$new$(Parser$Error$maybe_combine$($11854,$11864),$11865,$11866,$11867,$11868);var self = _reply$pst$46;switch(self._){case 'Parser.State.new':var $11870=self.err;var _reply$52 = Parser$get_idx$(_reply$pst$46);var self = _reply$52;switch(self._){case 'Parser.Reply.error':var $11872=self.err;var self = $11870;switch(self._){case 'Maybe.some':var $11874=self.value;var $11875 = Parser$Reply$error$(Parser$Error$combine$($11874,$11872));var $11873 = $11875;break;case 'Maybe.none':var $11876 = Parser$Reply$error$($11872);var $11873 = $11876;break;};var $11871 = $11873;break;case 'Parser.Reply.value':var $11877=self.pst;var $11878=self.val;var self = $11877;switch(self._){case 'Parser.State.new':var $11880=self.err;var $11881=self.nam;var $11882=self.ini;var $11883=self.idx;var $11884=self.str;var _reply$pst$60 = Parser$State$new$(Parser$Error$maybe_combine$($11870,$11880),$11881,$11882,$11883,$11884);var _orig$61 = Pair$new$($11846,$11878);var self = $11862;switch(self._){case 'Kind.Parser.ADT.Datatype.new':var $11886=self.name;var $11887=self.pars;var $11888=self.inds;var $11889=self.ctrs;var $11890=self.deri;var _term$67 = Kind$Parser$ADT$Datatype$build_term$($11862);var _term$68 = Kind$Term$bind$(List$nil,(_x$68=>{var $11892 = (_x$68+'1');return $11892;}),_term$67);var _type$69 = Kind$Parser$ADT$Datatype$build_type$($11862);var _type$70 = Kind$Term$bind$(List$nil,(_x$70=>{var $11893 = (_x$70+'0');return $11893;}),_type$69);var _arit$71 = ((list_length($11887))+(list_length($11888)));var _defs$72 = Kind$Map$def$(_file$1,_code$2,_orig$61,$11886,_term$68,_type$70,Bool$false,_arit$71,Bool$false,_defs$3);var _defs$73 = List$fold$($11889,_defs$72,(_ctr$73=>_defs$74=>{var _typ_name$75 = $11886;var _ctr_arit$76 = (_arit$71+(list_length((()=>{var self = _ctr$73;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11895=self.args;var $11896 = $11895;return $11896;};})())));var _ctr_name$77 = String$flatten$(List$cons$(_typ_name$75,List$cons$(Kind$Name$read$("."),List$cons$((()=>{var self = _ctr$73;switch(self._){case 'Kind.Parser.ADT.Constructor.new':var $11897=self.name;var $11898 = $11897;return $11898;};})(),List$nil))));var _ctr_term$78 = Kind$Parser$ADT$Constructor$build_term$($11862,_ctr$73);var _ctr_term$79 = Kind$Term$bind$(List$nil,(_x$79=>{var $11899 = (_x$79+'1');return $11899;}),_ctr_term$78);var _ctr_type$80 = Kind$Parser$ADT$Constructor$build_type$($11862,_ctr$73);var _ctr_type$81 = Kind$Term$bind$(List$nil,(_x$81=>{var $11900 = (_x$81+'0');return $11900;}),_ctr_type$80);var $11894 = Kind$Map$def$(_file$1,_code$2,_orig$61,_ctr_name$77,_ctr_term$79,_ctr_type$81,Bool$true,_ctr_arit$76,Bool$false,_defs$74);return $11894;}));var _defs$74 = List$fold$($11890,Either$right$(_defs$73),(_deri$74=>_defs$75=>{var self = _defs$75;switch(self._){case 'Either.left':var $11902=self.value;var $11903 = Either$left$($11902);var $11901 = $11903;break;case 'Either.right':var $11904=self.value;var self = Kind$Parser$ADT$Derive$by_name$(_deri$74,$11862);switch(self._){case 'Maybe.some':var $11906=self.value;var self = $11906;switch(self._){case 'Kind.Parser.ADT.Derived.new':var $11908=self.name;var $11909=self.arit;var $11910=self.term;var $11911=self.type;var _name$82 = $11908;var _term$83 = $11910;var _term$84 = Kind$Term$bind$(List$nil,(_x$84=>{var $11913 = (_x$84+'1');return $11913;}),_term$83);var _type$85 = $11911;var _type$86 = Kind$Term$bind$(List$nil,(_x$86=>{var $11914 = (_x$86+'0');return $11914;}),_type$85);var _arit$87 = $11909;var $11912 = Either$right$(Kind$Map$def$(_file$1,_code$2,_orig$61,_name$82,_term$84,_type$86,Bool$false,_arit$87,Bool$false,$11904));var $11907 = $11912;break;};var $11905 = $11907;break;case 'Maybe.none':var $11915 = Either$left$(("Can\'t derive \'"+(_deri$74+("\' for \'"+($11886+"\' type.")))));var $11905 = $11915;break;};var $11901 = $11905;break;};return $11901;}));var self = _defs$74;switch(self._){case 'Either.left':var $11916=self.value;var $11917 = Parser$fail($11916);var $11891 = $11917;break;case 'Either.right':var $11918=self.value;var $11919 = (_pst$76=>{var $11920 = Parser$Reply$value$(_pst$76,$11918);return $11920;});var $11891 = $11919;break;};var $11885 = $11891;break;};var $11885 = $11885(_reply$pst$60);var $11879 = $11885;break;};var $11871 = $11879;break;};var $11869 = $11871;break;};var $11863 = $11869;break;};var $11855 = $11863;break;};var $11853 = $11855;break;};var $11847 = $11853;break;};var $11839 = $11847;break;};var $11837 = $11839;break;};var $11831 = $11837;break;};var $11824 = $11831;break;};var $11822 = $11824;break;};return $11822;};
  const Kind$Parser$file$adt = x0=>x1=>x2=>x3=>Kind$Parser$file$adt$(x0,x1,x2,x3);
  function Kind$Parser$file$end$(_file$1,_code$2,_defs$3,_pst$4){var self = _pst$4;switch(self._){case 'Parser.State.new':var $11922=self.err;var _reply$10 = Kind$Parser$spaces(_pst$4);var self = _reply$10;switch(self._){case 'Parser.Reply.error':var $11924=self.err;var self = $11922;switch(self._){case 'Maybe.some':var $11926=self.value;var $11927 = Parser$Reply$error$(Parser$Error$combine$($11926,$11924));var $11925 = $11927;break;case 'Maybe.none':var $11928 = Parser$Reply$error$($11924);var $11925 = $11928;break;};var $11923 = $11925;break;case 'Parser.Reply.value':var $11929=self.pst;var self = $11929;switch(self._){case 'Parser.State.new':var $11931=self.err;var $11932=self.nam;var $11933=self.ini;var $11934=self.idx;var $11935=self.str;var _reply$pst$18 = Parser$State$new$(Parser$Error$maybe_combine$($11922,$11931),$11932,$11933,$11934,$11935);var self = _reply$pst$18;switch(self._){case 'Parser.State.new':var $11937=self.err;var _reply$24 = Parser$eof$(_reply$pst$18);var self = _reply$24;switch(self._){case 'Parser.Reply.error':var $11939=self.err;var self = $11937;switch(self._){case 'Maybe.some':var $11941=self.value;var $11942 = Parser$Reply$error$(Parser$Error$combine$($11941,$11939));var $11940 = $11942;break;case 'Maybe.none':var $11943 = Parser$Reply$error$($11939);var $11940 = $11943;break;};var $11938 = $11940;break;case 'Parser.Reply.value':var $11944=self.pst;var self = $11944;switch(self._){case 'Parser.State.new':var $11946=self.err;var $11947=self.nam;var $11948=self.ini;var $11949=self.idx;var $11950=self.str;var _reply$pst$32 = Parser$State$new$(Parser$Error$maybe_combine$($11937,$11946),$11947,$11948,$11949,$11950);var $11951 = Parser$Reply$value$(_reply$pst$32,_defs$3);var $11945 = $11951;break;};var $11938 = $11945;break;};var $11936 = $11938;break;};var $11930 = $11936;break;};var $11923 = $11930;break;};var $11921 = $11923;break;};return $11921;};
  const Kind$Parser$file$end = x0=>x1=>x2=>x3=>Kind$Parser$file$end$(x0,x1,x2,x3);
  function Kind$Parser$file$(_file$1,_code$2,_defs$3,_pst$4){var self = _pst$4;switch(self._){case 'Parser.State.new':var $11953=self.err;var _reply$10 = Parser$is_eof$(_pst$4);var self = _reply$10;switch(self._){case 'Parser.Reply.error':var $11955=self.err;var self = $11953;switch(self._){case 'Maybe.some':var $11957=self.value;var $11958 = Parser$Reply$error$(Parser$Error$combine$($11957,$11955));var $11956 = $11958;break;case 'Maybe.none':var $11959 = Parser$Reply$error$($11955);var $11956 = $11959;break;};var $11954 = $11956;break;case 'Parser.Reply.value':var $11960=self.pst;var $11961=self.val;var self = $11960;switch(self._){case 'Parser.State.new':var $11963=self.err;var $11964=self.nam;var $11965=self.ini;var $11966=self.idx;var $11967=self.str;var _reply$pst$18 = Parser$State$new$(Parser$Error$maybe_combine$($11953,$11963),$11964,$11965,$11966,$11967);var self = $11961;if (self) {var $11969 = (_pst$19=>{var $11970 = Parser$Reply$value$(_pst$19,_defs$3);return $11970;});var $11968 = $11969;} else {var $11971 = (_pst$19=>{var self = _pst$19;switch(self._){case 'Parser.State.new':var $11973=self.err;var _reply$25 = Parser$choice$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3),List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3),List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3),List$cons$(Parser$fail("Expected a top-level definition or a type declaration."),List$nil)))),_pst$19);var self = _reply$25;switch(self._){case 'Parser.Reply.error':var $11975=self.err;var self = $11973;switch(self._){case 'Maybe.some':var $11977=self.value;var $11978 = Parser$Reply$error$(Parser$Error$combine$($11977,$11975));var $11976 = $11978;break;case 'Maybe.none':var $11979 = Parser$Reply$error$($11975);var $11976 = $11979;break;};var $11974 = $11976;break;case 'Parser.Reply.value':var $11980=self.pst;var $11981=self.val;var self = $11980;switch(self._){case 'Parser.State.new':var $11983=self.err;var $11984=self.nam;var $11985=self.ini;var $11986=self.idx;var $11987=self.str;var _reply$pst$33 = Parser$State$new$(Parser$Error$maybe_combine$($11973,$11983),$11984,$11985,$11986,$11987);var self = _reply$pst$33;switch(self._){case 'Parser.State.new':var $11989=self.err;var _reply$39 = Kind$Parser$file$(_file$1,_code$2,$11981,_reply$pst$33);var self = _reply$39;switch(self._){case 'Parser.Reply.error':var $11991=self.err;var self = $11989;switch(self._){case 'Maybe.some':var $11993=self.value;var $11994 = Parser$Reply$error$(Parser$Error$combine$($11993,$11991));var $11992 = $11994;break;case 'Maybe.none':var $11995 = Parser$Reply$error$($11991);var $11992 = $11995;break;};var $11990 = $11992;break;case 'Parser.Reply.value':var $11996=self.pst;var $11997=self.val;var self = $11996;switch(self._){case 'Parser.State.new':var $11999=self.err;var $12000=self.nam;var $12001=self.ini;var $12002=self.idx;var $12003=self.str;var _reply$pst$47 = Parser$State$new$(Parser$Error$maybe_combine$($11989,$11999),$12000,$12001,$12002,$12003);var $12004 = Parser$Reply$value$(_reply$pst$47,$11997);var $11998 = $12004;break;};var $11990 = $11998;break;};var $11988 = $11990;break;};var $11982 = $11988;break;};var $11974 = $11982;break;};var $11972 = $11974;break;};return $11972;});var $11968 = $11971;};var $11968 = $11968(_reply$pst$18);var $11962 = $11968;break;};var $11954 = $11962;break;};var $11952 = $11954;break;};return $11952;};
  const Kind$Parser$file = x0=>x1=>x2=>x3=>Kind$Parser$file$(x0,x1,x2,x3);
  function String$join$go$(_sep$1,_list$2,_fst$3){var self = _list$2;switch(self._){case 'List.cons':var $12006=self.head;var $12007=self.tail;var $12008 = String$flatten$(List$cons$((()=>{var self = _fst$3;if (self) {var $12009 = "";return $12009;} else {var $12010 = _sep$1;return $12010;};})(),List$cons$($12006,List$cons$(String$join$go$(_sep$1,$12007,Bool$false),List$nil))));var $12005 = $12008;break;case 'List.nil':var $12011 = "";var $12005 = $12011;break;};return $12005;};
  const String$join$go = x0=>x1=>x2=>String$join$go$(x0,x1,x2);
  function String$join$(_sep$1,_list$2){var $12012 = String$join$go$(_sep$1,_list$2,Bool$true);return $12012;};
  const String$join = x0=>x1=>String$join$(x0,x1);
  function Kind$Code$highlight$end$(_col$1,_row$2,_res$3){var $12013 = String$join$("\u{a}",_res$3);return $12013;};
  const Kind$Code$highlight$end = x0=>x1=>x2=>Kind$Code$highlight$end$(x0,x1,x2);
  function Maybe$extract$(_m$2,_a$4,_f$5){var self = _m$2;switch(self._){case 'Maybe.some':var $12015=self.value;var $12016 = _f$5($12015);var $12014 = $12016;break;case 'Maybe.none':var $12017 = _a$4;var $12014 = $12017;break;};return $12014;};
  const Maybe$extract = x0=>x1=>x2=>Maybe$extract$(x0,x1,x2);
  function Nat$is_zero$(_n$1){var self = _n$1;if (self===0n) {var $12019 = Bool$true;var $12018 = $12019;} else {var $12020=(self-1n);var $12021 = Bool$false;var $12018 = $12021;};return $12018;};
  const Nat$is_zero = x0=>Nat$is_zero$(x0);
  function Nat$double$(_n$1){var self = _n$1;if (self===0n) {var $12023 = Nat$zero;var $12022 = $12023;} else {var $12024=(self-1n);var $12025 = Nat$succ$(Nat$succ$(Nat$double$($12024)));var $12022 = $12025;};return $12022;};
  const Nat$double = x0=>Nat$double$(x0);
  function String$pad_right$(_size$1,_chr$2,_str$3){var self = _size$1;if (self===0n) {var $12027 = _str$3;var $12026 = $12027;} else {var $12028=(self-1n);var self = _str$3;if (self.length===0) {var $12030 = String$cons$(_chr$2,String$pad_right$($12028,_chr$2,""));var $12029 = $12030;} else {var $12031=self.charCodeAt(0);var $12032=self.slice(1);var $12033 = String$cons$($12031,String$pad_right$($12028,_chr$2,$12032));var $12029 = $12033;};var $12026 = $12029;};return $12026;};
  const String$pad_right = x0=>x1=>x2=>String$pad_right$(x0,x1,x2);
  function String$pad_left$(_size$1,_chr$2,_str$3){var $12034 = String$reverse$(String$pad_right$(_size$1,_chr$2,String$reverse$(_str$3)));return $12034;};
  const String$pad_left = x0=>x1=>x2=>String$pad_left$(x0,x1,x2);
  function Kind$Code$color$(_col$1,_str$2){var $12035 = String$cons$(27,("["+(_col$1+("m"+(_str$2+String$cons$(27,"[0m"))))));return $12035;};
  const Kind$Code$color = x0=>x1=>Kind$Code$color$(x0,x1);
  function List$take$(_n$2,_xs$3){var self = _xs$3;switch(self._){case 'List.cons':var $12037=self.head;var $12038=self.tail;var self = _n$2;if (self===0n) {var $12040 = List$nil;var $12039 = $12040;} else {var $12041=(self-1n);var $12042 = List$cons$($12037,List$take$($12041,$12038));var $12039 = $12042;};var $12036 = $12039;break;case 'List.nil':var $12043 = List$nil;var $12036 = $12043;break;};return $12036;};
  const List$take = x0=>x1=>List$take$(x0,x1);
  function Kind$Code$highlight$go$(_code$1,_ixi$2,_ix0$3,_ix1$4,_col$5,_row$6,_lft$7,_lin$8,_res$9){var Kind$Code$highlight$go$=(_code$1,_ixi$2,_ix0$3,_ix1$4,_col$5,_row$6,_lft$7,_lin$8,_res$9)=>({ctr:'TCO',arg:[_code$1,_ixi$2,_ix0$3,_ix1$4,_col$5,_row$6,_lft$7,_lin$8,_res$9]});var Kind$Code$highlight$go=_code$1=>_ixi$2=>_ix0$3=>_ix1$4=>_col$5=>_row$6=>_lft$7=>_lin$8=>_res$9=>Kind$Code$highlight$go$(_code$1,_ixi$2,_ix0$3,_ix1$4,_col$5,_row$6,_lft$7,_lin$8,_res$9);var arg=[_code$1,_ixi$2,_ix0$3,_ix1$4,_col$5,_row$6,_lft$7,_lin$8,_res$9];while(true){let [_code$1,_ixi$2,_ix0$3,_ix1$4,_col$5,_row$6,_lft$7,_lin$8,_res$9]=arg;var R=(()=>{var _spa$10 = 3n;var self = _code$1;if (self.length===0) {var $12045 = Kind$Code$highlight$end$(_col$5,_row$6,List$reverse$(_res$9));var $12044 = $12045;} else {var $12046=self.charCodeAt(0);var $12047=self.slice(1);var self = ($12046===10);if (self) {var _stp$13 = Maybe$extract$(_lft$7,Bool$false,Nat$is_zero);var self = _stp$13;if (self) {var $12050 = Kind$Code$highlight$end$(_col$5,_row$6,List$reverse$(_res$9));var $12049 = $12050;} else {var _siz$14 = Nat$succ$(Nat$double$(_spa$10));var self = _ix1$4;if (self===0n) {var self = _lft$7;switch(self._){case 'Maybe.some':var $12053=self.value;var $12054 = Maybe$some$(Nat$pred$($12053));var $12052 = $12054;break;case 'Maybe.none':var $12055 = Maybe$some$(_spa$10);var $12052 = $12055;break;};var _lft$15 = $12052;} else {var $12056=(self-1n);var $12057 = _lft$7;var _lft$15 = $12057;};var _ixi$16 = Nat$pred$(_ixi$2);var _ix0$17 = Nat$pred$(_ix0$3);var _ix1$18 = Nat$pred$(_ix1$4);var _col$19 = 0n;var _row$20 = Nat$succ$(_row$6);var _res$21 = List$cons$(String$reverse$(_lin$8),_res$9);var _lin$22 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n,32,Nat$show$(_row$20)),List$cons$(" | ",List$nil))));var $12051 = Kind$Code$highlight$go$($12047,_ixi$16,_ix0$17,_ix1$18,_col$19,_row$20,_lft$15,_lin$22,_res$21);var $12049 = $12051;};var $12048 = $12049;} else {var _chr$13 = String$cons$($12046,String$nil);var self = (Nat$is_zero$(_ix0$3)&&(!Nat$is_zero$(_ix1$4)));if (self) {var $12059 = String$reverse$(Kind$Code$color$("41",Kind$Code$color$("37",_chr$13)));var _chr$14 = $12059;} else {var self = (Nat$is_zero$(_ixi$2)&&(!Nat$is_zero$(_ix1$4)));if (self) {var $12061 = String$reverse$(Kind$Code$color$("31",Kind$Code$color$("4",_chr$13)));var $12060 = $12061;} else {var $12062 = _chr$13;var $12060 = $12062;};var _chr$14 = $12060;};var self = (_ix0$3===1n);if (self) {var $12063 = List$take$(_spa$10,_res$9);var _res$15 = $12063;} else {var $12064 = _res$9;var _res$15 = $12064;};var _ixi$16 = Nat$pred$(_ixi$2);var _ix0$17 = Nat$pred$(_ix0$3);var _ix1$18 = Nat$pred$(_ix1$4);var _col$19 = Nat$succ$(_col$5);var _lin$20 = String$flatten$(List$cons$(_chr$14,List$cons$(_lin$8,List$nil)));var $12058 = Kind$Code$highlight$go$($12047,_ixi$16,_ix0$17,_ix1$18,_col$19,_row$6,_lft$7,_lin$20,_res$15);var $12048 = $12058;};var $12044 = $12048;};return $12044;})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Code$highlight$go = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>x8=>Kind$Code$highlight$go$(x0,x1,x2,x3,x4,x5,x6,x7,x8);
  function Kind$Code$highlight$(_code$1,_init$2,_idx0$3,_idx1$4){var $12065 = Kind$Code$highlight$go$((_code$1+" \u{a}"),_init$2,_idx0$3,_idx1$4,0n,1n,Maybe$none,String$reverse$("   1 | "),List$nil);return $12065;};
  const Kind$Code$highlight = x0=>x1=>x2=>x3=>Kind$Code$highlight$(x0,x1,x2,x3);
  function Kind$Defs$read$(_file$1,_code$2,_defs$3){var self = Kind$Parser$file$(_file$1,_code$2,_defs$3,Parser$State$new$(Maybe$none,"",0n,0n,_code$2));switch(self._){case 'Parser.Reply.error':var $12067=self.err;var self = $12067;switch(self._){case 'Parser.Error.new':var $12069=self.nam;var $12070=self.ini;var $12071=self.idx;var $12072=self.msg;var _err$9 = ($12072+(()=>{var self = $12069;if (self.length===0) {var $12074 = "";return $12074;} else {var $12075=self.charCodeAt(0);var $12076=self.slice(1);var $12077 = (" Inside "+($12069+":"));return $12077;};})());var _hig$10 = Kind$Code$highlight$(_code$2,$12070,$12071,Nat$succ$($12071));var _str$11 = String$flatten$(List$cons$(_err$9,List$cons$("\u{a}",List$cons$(_hig$10,List$nil))));var $12073 = Either$left$(_str$11);var $12068 = $12073;break;};var $12066 = $12068;break;case 'Parser.Reply.value':var $12078=self.val;var $12079 = Either$right$($12078);var $12066 = $12079;break;};return $12066;};
  const Kind$Defs$read = x0=>x1=>x2=>Kind$Defs$read$(x0,x1,x2);
  function Kind$Synth$load$go$(_name$1,_files$2,_defs$3){var self = _files$2;switch(self._){case 'List.cons':var $12081=self.head;var $12082=self.tail;var $12083 = IO$monad$((_m$bind$6=>_m$pure$7=>{var $12084 = _m$bind$6;return $12084;}))(Kind$Synth$get_kind_code$($12081))((_code$6=>{var _read$7 = Kind$Defs$read$($12081,_code$6,_defs$3);var self = _read$7;switch(self._){case 'Either.right':var $12086=self.value;var _defs$9 = $12086;var self = Kind$Map$get$(_name$1,_defs$9);switch(self._){case 'Maybe.none':var $12088 = Kind$Synth$load$go$(_name$1,$12082,_defs$9);var $12087 = $12088;break;case 'Maybe.some':var $12089 = IO$monad$((_m$bind$11=>_m$pure$12=>{var $12090 = _m$pure$12;return $12090;}))(Maybe$some$(_defs$9));var $12087 = $12089;break;};var $12085 = $12087;break;case 'Either.left':var $12091 = Kind$Synth$load$go$(_name$1,$12082,_defs$3);var $12085 = $12091;break;};return $12085;}));var $12080 = $12083;break;case 'List.nil':var $12092 = IO$monad$((_m$bind$4=>_m$pure$5=>{var $12093 = _m$pure$5;return $12093;}))(Maybe$none);var $12080 = $12092;break;};return $12080;};
  const Kind$Synth$load$go = x0=>x1=>x2=>Kind$Synth$load$go$(x0,x1,x2);
  function Kind$Synth$files_of$make$(_names$1,_last$2){var self = _names$1;switch(self._){case 'List.cons':var $12095=self.head;var $12096=self.tail;var _head$5 = (_last$2+($12095+".kind"));var _tail$6 = Kind$Synth$files_of$make$($12096,(_last$2+($12095+"/")));var $12097 = List$cons$(_head$5,_tail$6);var $12094 = $12097;break;case 'List.nil':var $12098 = List$nil;var $12094 = $12098;break;};return $12094;};
  const Kind$Synth$files_of$make = x0=>x1=>Kind$Synth$files_of$make$(x0,x1);
  function String$length$go$(_xs$1,_n$2){var String$length$go$=(_xs$1,_n$2)=>({ctr:'TCO',arg:[_xs$1,_n$2]});var String$length$go=_xs$1=>_n$2=>String$length$go$(_xs$1,_n$2);var arg=[_xs$1,_n$2];while(true){let [_xs$1,_n$2]=arg;var R=(()=>{var self = _xs$1;if (self.length===0) {var $12099 = _n$2;return $12099;} else {var $12100=self.charCodeAt(0);var $12101=self.slice(1);var $12102 = String$length$go$($12101,Nat$succ$(_n$2));return $12102;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const String$length$go = x0=>x1=>String$length$go$(x0,x1);
  function String$length$(_xs$1){var $12103 = String$length$go$(_xs$1,0n);return $12103;};
  const String$length = x0=>String$length$(x0);
  function String$split$go$(_xs$1,_match$2,_last$3){var self = _xs$1;if (self.length===0) {var $12105 = List$cons$(_last$3,List$nil);var $12104 = $12105;} else {var $12106=self.charCodeAt(0);var $12107=self.slice(1);var self = String$starts_with$(_xs$1,_match$2);if (self) {var _rest$6 = String$drop$(String$length$(_match$2),_xs$1);var $12109 = List$cons$(_last$3,String$split$go$(_rest$6,_match$2,""));var $12108 = $12109;} else {var _next$6 = String$cons$($12106,String$nil);var $12110 = String$split$go$($12107,_match$2,(_last$3+_next$6));var $12108 = $12110;};var $12104 = $12108;};return $12104;};
  const String$split$go = x0=>x1=>x2=>String$split$go$(x0,x1,x2);
  function String$split$(_xs$1,_match$2){var $12111 = String$split$go$(_xs$1,_match$2,"");return $12111;};
  const String$split = x0=>x1=>String$split$(x0,x1);
  function Kind$Synth$files_of$(_name$1){var $12112 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1,"."),""));return $12112;};
  const Kind$Synth$files_of = x0=>Kind$Synth$files_of$(x0);
  function Kind$Synth$load$(_name$1,_defs$2){var $12113 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $12114 = _m$bind$3;return $12114;}))(Kind$Synth$load$cached$(List$cons$(_name$1,List$nil),_defs$2))((_cached_defs$3=>{var self = _cached_defs$3;switch(self._){case 'Maybe.some':var $12116=self.value;var $12117 = IO$monad$((_m$bind$5=>_m$pure$6=>{var $12118 = _m$pure$6;return $12118;}))(Maybe$some$($12116));var $12115 = $12117;break;case 'Maybe.none':var $12119 = Kind$Synth$load$go$(_name$1,Kind$Synth$files_of$(_name$1),_defs$2);var $12115 = $12119;break;};return $12115;}));return $12113;};
  const Kind$Synth$load = x0=>x1=>Kind$Synth$load$(x0,x1);
  const Kind$Status$wait = ({_:'Kind.Status.wait'});
  function Kind$Check$(_V$1){var $12120 = null;return $12120;};
  const Kind$Check = x0=>Kind$Check$(x0);
  function Kind$Check$result$(_value$2,_errors$3){var $12121 = ({_:'Kind.Check.result','value':_value$2,'errors':_errors$3});return $12121;};
  const Kind$Check$result = x0=>x1=>Kind$Check$result$(x0,x1);
  function Kind$Error$undefined_reference$(_origin$1,_name$2){var $12122 = ({_:'Kind.Error.undefined_reference','origin':_origin$1,'name':_name$2});return $12122;};
  const Kind$Error$undefined_reference = x0=>x1=>Kind$Error$undefined_reference$(x0,x1);
  function Kind$Error$waiting$(_name$1){var $12123 = ({_:'Kind.Error.waiting','name':_name$1});return $12123;};
  const Kind$Error$waiting = x0=>Kind$Error$waiting$(x0);
  function Kind$Error$indirect$(_name$1){var $12124 = ({_:'Kind.Error.indirect','name':_name$1});return $12124;};
  const Kind$Error$indirect = x0=>Kind$Error$indirect$(x0);
  function Maybe$mapped$(_m$2,_f$4){var self = _m$2;switch(self._){case 'Maybe.some':var $12126=self.value;var $12127 = Maybe$some$(_f$4($12126));var $12125 = $12127;break;case 'Maybe.none':var $12128 = Maybe$none;var $12125 = $12128;break;};return $12125;};
  const Maybe$mapped = x0=>x1=>Maybe$mapped$(x0,x1);
  function Kind$Path$Maybe$Builder$o$(_path$1){var $12129 = Maybe$mapped$(_path$1,Kind$Path$Builder$o);return $12129;};
  const Kind$Path$Maybe$Builder$o = x0=>Kind$Path$Maybe$Builder$o$(x0);
  function Kind$Path$Maybe$Builder$i$(_path$1){var $12130 = Maybe$mapped$(_path$1,Kind$Path$Builder$i);return $12130;};
  const Kind$Path$Maybe$Builder$i = x0=>Kind$Path$Maybe$Builder$i$(x0);
  function Kind$Error$patch$(_path$1,_term$2){var $12131 = ({_:'Kind.Error.patch','path':_path$1,'term':_term$2});return $12131;};
  const Kind$Error$patch = x0=>x1=>Kind$Error$patch$(x0,x1);
  function Kind$Path$Maybe$Builder$to_bits$(_path$1){var self = _path$1;switch(self._){case 'Maybe.some':var $12133=self.value;var $12134 = $12133(Bits$e);var $12132 = $12134;break;case 'Maybe.none':var $12135 = Bits$e;var $12132 = $12135;break;};return $12132;};
  const Kind$Path$Maybe$Builder$to_bits = x0=>Kind$Path$Maybe$Builder$to_bits$(x0);
  function Kind$Term$check$patch$(_term$1,_type$2,_path$3){var $12136 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$patch$(Kind$Path$Maybe$Builder$to_bits$(_path$3),_term$1),List$nil));return $12136;};
  const Kind$Term$check$patch = x0=>x1=>x2=>Kind$Term$check$patch$(x0,x1,x2);
  function Kind$Error$type_mismatch$(_origin$1,_expected$2,_detected$3,_context$4){var $12137 = ({_:'Kind.Error.type_mismatch','origin':_origin$1,'expected':_expected$2,'detected':_detected$3,'context':_context$4});return $12137;};
  const Kind$Error$type_mismatch = x0=>x1=>x2=>x3=>Kind$Error$type_mismatch$(x0,x1,x2,x3);
  function Kind$Error$show_goal$(_name$1,_dref$2,_verb$3,_goal$4,_context$5){var $12138 = ({_:'Kind.Error.show_goal','name':_name$1,'dref':_dref$2,'verb':_verb$3,'goal':_goal$4,'context':_context$5});return $12138;};
  const Kind$Error$show_goal = x0=>x1=>x2=>x3=>x4=>Kind$Error$show_goal$(x0,x1,x2,x3,x4);
  function Kind$Path$Builder$nil$(_x$1){var $12139 = _x$1;return $12139;};
  const Kind$Path$Builder$nil = x0=>Kind$Path$Builder$nil$(x0);
  const Kind$Path$Maybe$Builder$nil = Maybe$some$(Kind$Path$Builder$nil);
  function Kind$Term$check$direct$(_term$1,_defs$2){var self = Kind$Term$check$(_term$1,Maybe$none,_defs$2,List$nil,Kind$Path$Maybe$Builder$nil,Maybe$none);switch(self._){case 'Kind.Check.result':var $12141=self.value;var $12142=self.errors;var self = $12141;switch(self._){case 'Maybe.none':var $12144 = Kind$Check$result$(Maybe$none,$12142);var $12143 = $12144;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(_term$1),List$nil);switch(self._){case 'Kind.Check.result':var $12146=self.value;var $12147=self.errors;var $12148 = Kind$Check$result$($12146,List$concat$($12142,$12147));var $12145 = $12148;break;};var $12143 = $12145;break;};var $12140 = $12143;break;};return $12140;};
  const Kind$Term$check$direct = x0=>x1=>Kind$Term$check$direct$(x0,x1);
  function Kind$Term$check$get_name_of_self_type$slice$(_self$1){var _len$2 = String$length$(_self$1);var _ini$3 = String$slice$(0n,(_len$2-5n<=0n?0n:_len$2-5n),_self$1);var _end$4 = String$slice$((_len$2-5n<=0n?0n:_len$2-5n),_len$2,_self$1);var self = (_end$4===".Self");if (self) {var $12150 = Maybe$some$(_ini$3);var $12149 = $12150;} else {var $12151 = Maybe$none;var $12149 = $12151;};return $12149;};
  const Kind$Term$check$get_name_of_self_type$slice = x0=>Kind$Term$check$get_name_of_self_type$slice$(x0);
  function Kind$Term$check$get_name_of_self_type$(_type$1,_defs$2){var self = Kind$Term$reduce$(_type$1,Kind$Map$new);switch(self._){case 'Kind.Term.ref':var $12153=self.name;var $12154 = Maybe$some$($12153);var $12152 = $12154;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.get':case 'Kind.Term.ori':var self = Kind$Term$reduce$(_type$1,_defs$2);switch(self._){case 'Kind.Term.ref':var $12156=self.name;var $12157 = Maybe$some$($12156);var $12155 = $12157;break;case 'Kind.Term.all':var $12158=self.self;var $12159 = Kind$Term$check$get_name_of_self_type$slice$($12158);var $12155 = $12159;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12160 = Maybe$none;var $12155 = $12160;break;};var $12152 = $12155;break;case 'Kind.Term.typ':var self = Kind$Term$reduce$(_type$1,_defs$2);switch(self._){case 'Kind.Term.ref':var $12162=self.name;var $12163 = Maybe$some$($12162);var $12161 = $12163;break;case 'Kind.Term.all':var $12164=self.self;var $12165 = Kind$Term$check$get_name_of_self_type$slice$($12164);var $12161 = $12165;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12166 = Maybe$none;var $12161 = $12166;break;};var $12152 = $12161;break;case 'Kind.Term.all':var self = Kind$Term$reduce$(_type$1,_defs$2);switch(self._){case 'Kind.Term.ref':var $12168=self.name;var $12169 = Maybe$some$($12168);var $12167 = $12169;break;case 'Kind.Term.all':var $12170=self.self;var $12171 = Kind$Term$check$get_name_of_self_type$slice$($12170);var $12167 = $12171;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12172 = Maybe$none;var $12167 = $12172;break;};var $12152 = $12167;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.num':case 'Kind.Term.set':case 'Kind.Term.ope':var self = Kind$Term$reduce$(_type$1,_defs$2);switch(self._){case 'Kind.Term.ref':var $12174=self.name;var $12175 = Maybe$some$($12174);var $12173 = $12175;break;case 'Kind.Term.all':var $12176=self.self;var $12177 = Kind$Term$check$get_name_of_self_type$slice$($12176);var $12173 = $12177;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12178 = Maybe$none;var $12173 = $12178;break;};var $12152 = $12173;break;case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.new':var self = Kind$Term$reduce$(_type$1,_defs$2);switch(self._){case 'Kind.Term.ref':var $12180=self.name;var $12181 = Maybe$some$($12180);var $12179 = $12181;break;case 'Kind.Term.all':var $12182=self.self;var $12183 = Kind$Term$check$get_name_of_self_type$slice$($12182);var $12179 = $12183;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12184 = Maybe$none;var $12179 = $12184;break;};var $12152 = $12179;break;case 'Kind.Term.cse':var self = Kind$Term$reduce$(_type$1,_defs$2);switch(self._){case 'Kind.Term.ref':var $12186=self.name;var $12187 = Maybe$some$($12186);var $12185 = $12187;break;case 'Kind.Term.all':var $12188=self.self;var $12189 = Kind$Term$check$get_name_of_self_type$slice$($12188);var $12185 = $12189;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12190 = Maybe$none;var $12185 = $12190;break;};var $12152 = $12185;break;};return $12152;};
  const Kind$Term$check$get_name_of_self_type = x0=>x1=>Kind$Term$check$get_name_of_self_type$(x0,x1);
  function Kind$Term$check$expand$num$nat$(_numb$1){var $12191 = Kind$Term$nat$(_numb$1);return $12191;};
  const Kind$Term$check$expand$num$nat = x0=>Kind$Term$check$expand$num$nat$(x0);
  function Kind$Term$check$expand$num$int$(_sign$1,_numb$2){var _term$3 = Kind$Term$nat$(_numb$2);var _term$4 = Kind$Term$app$(Kind$Term$ref$("Int.from_nat"),_term$3);var self = _sign$1;switch(self._){case 'Maybe.some':var $12193=self.value;var self = $12193;if (self) {var $12195 = _term$4;var $12194 = $12195;} else {var $12196 = Kind$Term$app$(Kind$Term$ref$("Int.neg"),_term$4);var $12194 = $12196;};var _term$5 = $12194;break;case 'Maybe.none':var $12197 = _term$4;var _term$5 = $12197;break;};var $12192 = _term$5;return $12192;};
  const Kind$Term$check$expand$num$int = x0=>x1=>Kind$Term$check$expand$num$int$(x0,x1);
  function Kind$Term$check$expand$num$other$(_name$1,_sign$2,_numb$3,_frac$4){var self = _sign$2;switch(self._){case 'Maybe.some':var $12199=self.value;var self = $12199;if (self) {var $12201 = "+";var $12200 = $12201;} else {var $12202 = "-";var $12200 = $12202;};var _text$5 = $12200;break;case 'Maybe.none':var $12203 = "";var _text$5 = $12203;break;};var _text$6 = (_text$5+Nat$show$(_numb$3));var _text$7 = (_text$6+(()=>{var self = _frac$4;switch(self._){case 'Maybe.some':var $12204=self.value;var $12205 = ("."+Nat$show$($12204));return $12205;case 'Maybe.none':var $12206 = "";return $12206;};})());var $12198 = Kind$Term$app$(Kind$Term$ref$((_name$1+".read")),Kind$Term$str$(_text$7));return $12198;};
  const Kind$Term$check$expand$num$other = x0=>x1=>x2=>x3=>Kind$Term$check$expand$num$other$(x0,x1,x2,x3);
  function Kind$Term$check$expand$num$(_sign$1,_numb$2,_frac$3,_type$4,_defs$5){var self = _type$4;switch(self._){case 'Maybe.some':var $12208=self.value;var self = Kind$Term$check$get_name_of_self_type$($12208,_defs$5);switch(self._){case 'Maybe.some':var $12210=self.value;var self = ($12210==="Nat");if (self) {var $12212 = Maybe$some$(Kind$Term$check$expand$num$nat$(_numb$2));var $12211 = $12212;} else {var self = ($12210==="Int");if (self) {var $12214 = Maybe$some$(Kind$Term$check$expand$num$int$(_sign$1,_numb$2));var $12213 = $12214;} else {var $12215 = Maybe$some$(Kind$Term$check$expand$num$other$($12210,_sign$1,_numb$2,_frac$3));var $12213 = $12215;};var $12211 = $12213;};var $12209 = $12211;break;case 'Maybe.none':var $12216 = Maybe$none;var $12209 = $12216;break;};var _got$6 = $12209;break;case 'Maybe.none':var $12217 = Maybe$none;var _got$6 = $12217;break;};var self = _got$6;switch(self._){case 'Maybe.some':var $12218=self.value;var $12219 = $12218;var $12207 = $12219;break;case 'Maybe.none':var self = _frac$3;switch(self._){case 'Maybe.none':var self = _sign$1;switch(self._){case 'Maybe.none':var $12222 = Kind$Term$check$expand$num$nat$(_numb$2);var $12221 = $12222;break;case 'Maybe.some':var $12223 = Kind$Term$check$expand$num$int$(_sign$1,_numb$2);var $12221 = $12223;break;};var $12220 = $12221;break;case 'Maybe.some':var $12224 = Kind$Term$check$expand$num$other$("F64",_sign$1,_numb$2,_frac$3);var $12220 = $12224;break;};var $12207 = $12220;break;};return $12207;};
  const Kind$Term$check$expand$num = x0=>x1=>x2=>x3=>x4=>Kind$Term$check$expand$num$(x0,x1,x2,x3,x4);
  function Kind$Term$check$infer_types_of_with$(_vars$1,_defs$2,_ctx$3,_path$4,_orig$5){var self = _vars$1;switch(self._){case 'List.cons':var $12226=self.head;var $12227=self.tail;var self = $12226;switch(self._){case 'Kind.Ann.new':var $12229=self.name;var $12230=self.term;var $12231=self.type;var self = $12231;switch(self._){case 'Maybe.some':var $12233=self.value;var $12234 = Kind$Check$result$(Maybe$some$(Maybe$some$($12233)),List$nil);var self = $12234;break;case 'Maybe.none':var self = Kind$Term$check$($12230,Maybe$none,_defs$2,_ctx$3,_path$4,_orig$5);switch(self._){case 'Kind.Check.result':var $12236=self.value;var $12237=self.errors;var self = $12236;switch(self._){case 'Maybe.some':var $12239=self.value;var self = Kind$Check$result$(Maybe$some$(Maybe$some$($12239)),List$nil);switch(self._){case 'Kind.Check.result':var $12241=self.value;var $12242=self.errors;var $12243 = Kind$Check$result$($12241,List$concat$($12237,$12242));var $12240 = $12243;break;};var $12238 = $12240;break;case 'Maybe.none':var $12244 = Kind$Check$result$(Maybe$none,$12237);var $12238 = $12244;break;};var $12235 = $12238;break;};var self = $12235;break;};switch(self._){case 'Kind.Check.result':var $12245=self.value;var $12246=self.errors;var self = $12245;switch(self._){case 'Maybe.some':var $12248=self.value;var self = Kind$Term$check$infer_types_of_with$($12227,_defs$2,_ctx$3,_path$4,_orig$5);switch(self._){case 'Kind.Check.result':var $12250=self.value;var $12251=self.errors;var self = $12250;switch(self._){case 'Maybe.some':var $12253=self.value;var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($12229,$12230,$12248),$12253)),List$nil);switch(self._){case 'Kind.Check.result':var $12255=self.value;var $12256=self.errors;var $12257 = Kind$Check$result$($12255,List$concat$($12251,$12256));var $12254 = $12257;break;};var $12252 = $12254;break;case 'Maybe.none':var $12258 = Kind$Check$result$(Maybe$none,$12251);var $12252 = $12258;break;};var self = $12252;break;};switch(self._){case 'Kind.Check.result':var $12259=self.value;var $12260=self.errors;var $12261 = Kind$Check$result$($12259,List$concat$($12246,$12260));var $12249 = $12261;break;};var $12247 = $12249;break;case 'Maybe.none':var $12262 = Kind$Check$result$(Maybe$none,$12246);var $12247 = $12262;break;};var $12232 = $12247;break;};var $12228 = $12232;break;};var $12225 = $12228;break;case 'List.nil':var $12263 = Kind$Check$result$(Maybe$some$(List$nil),List$nil);var $12225 = $12263;break;};return $12225;};
  const Kind$Term$check$infer_types_of_with = x0=>x1=>x2=>x3=>x4=>Kind$Term$check$infer_types_of_with$(x0,x1,x2,x3,x4);
  function Kind$Term$normalize$(_term$1,_defs$2){var self = Kind$Term$reduce$(_term$1,_defs$2);switch(self._){case 'Kind.Term.var':var $12265=self.name;var $12266=self.indx;var $12267 = Kind$Term$var$($12265,$12266);var $12264 = $12267;break;case 'Kind.Term.ref':var $12268=self.name;var $12269 = Kind$Term$ref$($12268);var $12264 = $12269;break;case 'Kind.Term.all':var $12270=self.eras;var $12271=self.self;var $12272=self.name;var $12273=self.xtyp;var $12274=self.body;var $12275 = Kind$Term$all$($12270,$12271,$12272,Kind$Term$normalize$($12273,_defs$2),(_s$8=>_x$9=>{var $12276 = Kind$Term$normalize$($12274(_s$8)(_x$9),_defs$2);return $12276;}));var $12264 = $12275;break;case 'Kind.Term.lam':var $12277=self.name;var $12278=self.body;var $12279 = Kind$Term$lam$($12277,(_x$5=>{var $12280 = Kind$Term$normalize$($12278(_x$5),_defs$2);return $12280;}));var $12264 = $12279;break;case 'Kind.Term.app':var $12281=self.func;var $12282=self.argm;var $12283 = Kind$Term$app$(Kind$Term$normalize$($12281,_defs$2),Kind$Term$normalize$($12282,_defs$2));var $12264 = $12283;break;case 'Kind.Term.let':var $12284=self.name;var $12285=self.expr;var $12286=self.body;var $12287 = Kind$Term$let$($12284,Kind$Term$normalize$($12285,_defs$2),(_x$6=>{var $12288 = Kind$Term$normalize$($12286(_x$6),_defs$2);return $12288;}));var $12264 = $12287;break;case 'Kind.Term.def':var $12289=self.name;var $12290=self.expr;var $12291=self.body;var $12292 = Kind$Term$def$($12289,Kind$Term$normalize$($12290,_defs$2),(_x$6=>{var $12293 = Kind$Term$normalize$($12291(_x$6),_defs$2);return $12293;}));var $12264 = $12292;break;case 'Kind.Term.ann':var $12294=self.done;var $12295=self.term;var $12296=self.type;var $12297 = Kind$Term$ann$($12294,Kind$Term$normalize$($12295,_defs$2),Kind$Term$normalize$($12296,_defs$2));var $12264 = $12297;break;case 'Kind.Term.gol':var $12298=self.name;var $12299=self.dref;var $12300=self.verb;var $12301 = Kind$Term$gol$($12298,$12299,$12300);var $12264 = $12301;break;case 'Kind.Term.hol':var $12302=self.path;var $12303 = Kind$Term$hol$($12302);var $12264 = $12303;break;case 'Kind.Term.nat':var $12304=self.natx;var $12305 = Kind$Term$nat$($12304);var $12264 = $12305;break;case 'Kind.Term.chr':var $12306=self.chrx;var $12307 = Kind$Term$chr$($12306);var $12264 = $12307;break;case 'Kind.Term.str':var $12308=self.strx;var $12309 = Kind$Term$str$($12308);var $12264 = $12309;break;case 'Kind.Term.ori':var $12310=self.expr;var $12311 = Kind$Term$normalize$($12310,_defs$2);var $12264 = $12311;break;case 'Kind.Term.typ':var $12312 = Kind$Term$typ;var $12264 = $12312;break;case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12313 = _term$1;var $12264 = $12313;break;};return $12264;};
  const Kind$Term$normalize = x0=>x1=>Kind$Term$normalize$(x0,x1);
  function Kind$Term$check$expand$cse$motive$go$(_wyth$1,_moti$2,_name$3,_expr$4,_etyp$5,_rtyp$6,_defs$7,_size$8){var self = _wyth$1;switch(self._){case 'List.cons':var $12315=self.head;var $12316=self.tail;var self = $12315;switch(self._){case 'Kind.Ann.new':var $12318=self.name;var $12319=self.type;var $12320 = Kind$Term$all$(Bool$false,"",$12318,Maybe$default$($12319,Kind$Term$hol$(Bits$e)),(_s$14=>_x$15=>{var $12321 = Kind$Term$check$expand$cse$motive$($12316,_moti$2,_name$3,_expr$4,_etyp$5,_rtyp$6,_defs$7,Nat$succ$(Nat$succ$(_size$8)));return $12321;}));var $12317 = $12320;break;};var $12314 = $12317;break;case 'List.nil':var self = _moti$2;switch(self._){case 'Maybe.some':var $12323=self.value;var $12324 = $12323;var $12322 = $12324;break;case 'Maybe.none':var self = _rtyp$6;switch(self._){case 'Maybe.some':var $12326=self.value;var $12327 = Kind$Term$normalize$($12326,Kind$Map$new);var $12325 = $12327;break;case 'Maybe.none':var $12328 = Kind$Term$hol$(Bits$e);var $12325 = $12328;break;};var $12322 = $12325;break;};var $12314 = $12322;break;};return $12314;};
  const Kind$Term$check$expand$cse$motive$go = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>Kind$Term$check$expand$cse$motive$go$(x0,x1,x2,x3,x4,x5,x6,x7);
  function List$tail$(_xs$2){var self = _xs$2;switch(self._){case 'List.cons':var $12330=self.tail;var $12331 = $12330;var $12329 = $12331;break;case 'List.nil':var $12332 = List$nil;var $12329 = $12332;break;};return $12329;};
  const List$tail = x0=>List$tail$(x0);
  function Kind$Term$SmartMotive$vals$cont$(_expr$1,_term$2,_args$3,_defs$4){var Kind$Term$SmartMotive$vals$cont$=(_expr$1,_term$2,_args$3,_defs$4)=>({ctr:'TCO',arg:[_expr$1,_term$2,_args$3,_defs$4]});var Kind$Term$SmartMotive$vals$cont=_expr$1=>_term$2=>_args$3=>_defs$4=>Kind$Term$SmartMotive$vals$cont$(_expr$1,_term$2,_args$3,_defs$4);var arg=[_expr$1,_term$2,_args$3,_defs$4];while(true){let [_expr$1,_term$2,_args$3,_defs$4]=arg;var R=(()=>{var self = Kind$Term$reduce$(_term$2,_defs$4);switch(self._){case 'Kind.Term.app':var $12333=self.func;var $12334=self.argm;var $12335 = Kind$Term$SmartMotive$vals$cont$(_expr$1,$12333,List$cons$($12334,_args$3),_defs$4);return $12335;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12336 = List$cons$(_expr$1,List$tail$(List$reverse$(_args$3)));return $12336;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Term$SmartMotive$vals$cont = x0=>x1=>x2=>x3=>Kind$Term$SmartMotive$vals$cont$(x0,x1,x2,x3);
  function Kind$Term$SmartMotive$vals$(_expr$1,_type$2,_defs$3){var Kind$Term$SmartMotive$vals$=(_expr$1,_type$2,_defs$3)=>({ctr:'TCO',arg:[_expr$1,_type$2,_defs$3]});var Kind$Term$SmartMotive$vals=_expr$1=>_type$2=>_defs$3=>Kind$Term$SmartMotive$vals$(_expr$1,_type$2,_defs$3);var arg=[_expr$1,_type$2,_defs$3];while(true){let [_expr$1,_type$2,_defs$3]=arg;var R=(()=>{var self = Kind$Term$reduce$(_type$2,_defs$3);switch(self._){case 'Kind.Term.all':var $12337=self.body;var $12338 = Kind$Term$SmartMotive$vals$(_expr$1,$12337(Kind$Term$typ)(Kind$Term$typ),_defs$3);return $12338;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12339 = Kind$Term$SmartMotive$vals$cont$(_expr$1,_type$2,List$nil,_defs$3);return $12339;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Term$SmartMotive$vals = x0=>x1=>x2=>Kind$Term$SmartMotive$vals$(x0,x1,x2);
  function Kind$Term$SmartMotive$nams$cont$(_name$1,_term$2,_binds$3,_defs$4){var Kind$Term$SmartMotive$nams$cont$=(_name$1,_term$2,_binds$3,_defs$4)=>({ctr:'TCO',arg:[_name$1,_term$2,_binds$3,_defs$4]});var Kind$Term$SmartMotive$nams$cont=_name$1=>_term$2=>_binds$3=>_defs$4=>Kind$Term$SmartMotive$nams$cont$(_name$1,_term$2,_binds$3,_defs$4);var arg=[_name$1,_term$2,_binds$3,_defs$4];while(true){let [_name$1,_term$2,_binds$3,_defs$4]=arg;var R=(()=>{var self = Kind$Term$reduce$(_term$2,_defs$4);switch(self._){case 'Kind.Term.all':var $12340=self.self;var $12341=self.name;var $12342=self.body;var $12343 = Kind$Term$SmartMotive$nams$cont$(_name$1,$12342(Kind$Term$ref$($12340))(Kind$Term$ref$($12341)),List$cons$(String$flatten$(List$cons$(_name$1,List$cons$(".",List$cons$($12341,List$nil)))),_binds$3),_defs$4);return $12343;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12344 = List$cons$(_name$1,List$tail$(_binds$3));return $12344;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Term$SmartMotive$nams$cont = x0=>x1=>x2=>x3=>Kind$Term$SmartMotive$nams$cont$(x0,x1,x2,x3);
  function Kind$Term$SmartMotive$nams$(_name$1,_type$2,_defs$3){var self = Kind$Term$reduce$(_type$2,_defs$3);switch(self._){case 'Kind.Term.all':var $12346=self.xtyp;var $12347 = Kind$Term$SmartMotive$nams$cont$(_name$1,$12346,List$nil,_defs$3);var $12345 = $12347;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12348 = List$nil;var $12345 = $12348;break;};return $12345;};
  const Kind$Term$SmartMotive$nams = x0=>x1=>x2=>Kind$Term$SmartMotive$nams$(x0,x1,x2);
  function List$zip$(_as$3,_bs$4){var self = _as$3;switch(self._){case 'List.cons':var $12350=self.head;var $12351=self.tail;var self = _bs$4;switch(self._){case 'List.cons':var $12353=self.head;var $12354=self.tail;var $12355 = List$cons$(Pair$new$($12350,$12353),List$zip$($12351,$12354));var $12352 = $12355;break;case 'List.nil':var $12356 = List$nil;var $12352 = $12356;break;};var $12349 = $12352;break;case 'List.nil':var $12357 = List$nil;var $12349 = $12357;break;};return $12349;};
  const List$zip = x0=>x1=>List$zip$(x0,x1);
  const Nat$gte = a0=>a1=>(a0>=a1);
  const Bits$concat = a0=>a1=>(a1+a0);
  function Kind$Term$serialize$go$(_term$1,_depth$2,_init$3,_diff$4,_x$5){var self = _term$1;switch(self._){case 'Kind.Term.var':var $12359=self.indx;var self = ($12359>=_init$3);if (self) {var _name$8 = a1=>(a1+(nat_to_bits(Nat$pred$((_depth$2-$12359<=0n?0n:_depth$2-$12359)))));var $12361 = (((_name$8(_x$5)+'1')+'0')+'0');var $12360 = $12361;} else {var _name$8 = a1=>(a1+(nat_to_bits($12359)));var $12362 = (((_name$8(_x$5)+'0')+'1')+'0');var $12360 = $12362;};var $12358 = $12360;break;case 'Kind.Term.ref':var $12363=self.name;var _name$7 = a1=>(a1+(kind_name_to_bits($12363)));var $12364 = (((_name$7(_x$5)+'0')+'0')+'0');var $12358 = $12364;break;case 'Kind.Term.all':var $12365=self.eras;var $12366=self.self;var $12367=self.name;var $12368=self.xtyp;var $12369=self.body;var self = $12365;if (self) {var $12371 = Bits$i;var _eras$11 = $12371;} else {var $12372 = Bits$o;var _eras$11 = $12372;};var _self$12 = a1=>(a1+(kind_name_to_bits($12366)));var _xtyp$13 = Kind$Term$serialize$go($12368)(_depth$2)(_init$3)(_diff$4);var _body$14 = Kind$Term$serialize$go($12369(Kind$Term$var$($12366,_depth$2))(Kind$Term$var$($12367,Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);var $12370 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5))))+'0')+'0')+'1');var $12358 = $12370;break;case 'Kind.Term.lam':var $12373=self.name;var $12374=self.body;var _body$8 = Kind$Term$serialize$go($12374(Kind$Term$var$($12373,_depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);var $12375 = (((_body$8(_x$5)+'1')+'0')+'1');var $12358 = $12375;break;case 'Kind.Term.app':var $12376=self.func;var $12377=self.argm;var _func$8 = Kind$Term$serialize$go($12376)(_depth$2)(_init$3)(_diff$4);var _argm$9 = Kind$Term$serialize$go($12377)(_depth$2)(_init$3)(_diff$4);var $12378 = (((_func$8(_argm$9(_x$5))+'0')+'1')+'1');var $12358 = $12378;break;case 'Kind.Term.let':var $12379=self.name;var $12380=self.expr;var $12381=self.body;var _expr$9 = Kind$Term$serialize$go($12380)(_depth$2)(_init$3)(_diff$4);var _body$10 = Kind$Term$serialize$go($12381(Kind$Term$var$($12379,_depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);var $12382 = (((_expr$9(_body$10(_x$5))+'1')+'1')+'1');var $12358 = $12382;break;case 'Kind.Term.def':var $12383=self.expr;var $12384=self.body;var $12385 = Kind$Term$serialize$go$($12384($12383),_depth$2,_init$3,_diff$4,_x$5);var $12358 = $12385;break;case 'Kind.Term.ann':var $12386=self.term;var $12387 = Kind$Term$serialize$go$($12386,_depth$2,_init$3,_diff$4,_x$5);var $12358 = $12387;break;case 'Kind.Term.gol':var $12388=self.name;var _name$9 = a1=>(a1+(kind_name_to_bits($12388)));var $12389 = (((_name$9(_x$5)+'0')+'0')+'0');var $12358 = $12389;break;case 'Kind.Term.nat':var $12390=self.natx;var $12391 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($12390),_depth$2,_init$3,_diff$4,_x$5);var $12358 = $12391;break;case 'Kind.Term.chr':var $12392=self.chrx;var $12393 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($12392),_depth$2,_init$3,_diff$4,_x$5);var $12358 = $12393;break;case 'Kind.Term.str':var $12394=self.strx;var $12395 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($12394),_depth$2,_init$3,_diff$4,_x$5);var $12358 = $12395;break;case 'Kind.Term.ori':var $12396=self.expr;var $12397 = Kind$Term$serialize$go$($12396,_depth$2,_init$3,_diff$4,_x$5);var $12358 = $12397;break;case 'Kind.Term.typ':var $12398 = (((_x$5+'1')+'1')+'0');var $12358 = $12398;break;case 'Kind.Term.hol':var $12399 = _x$5;var $12358 = $12399;break;case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12400 = _diff$4(_x$5);var $12358 = $12400;break;};return $12358;};
  const Kind$Term$serialize$go = x0=>x1=>x2=>x3=>x4=>Kind$Term$serialize$go$(x0,x1,x2,x3,x4);
  function Kind$Term$serialize$(_term$1,_depth$2,_side$3){var self = _side$3;if (self) {var $12402 = Bits$o;var _diff$4 = $12402;} else {var $12403 = Bits$i;var _diff$4 = $12403;};var $12401 = Kind$Term$serialize$go$(_term$1,_depth$2,_depth$2,_diff$4,Bits$e);return $12401;};
  const Kind$Term$serialize = x0=>x1=>x2=>Kind$Term$serialize$(x0,x1,x2);
  const Bits$eql = a0=>a1=>(a1===a0);
  function Kind$Term$identical$(_a$1,_b$2,_lv$3){var _ah$4 = Kind$Term$serialize$(_a$1,_lv$3,Bool$false);var _bh$5 = Kind$Term$serialize$(_b$2,_lv$3,Bool$true);var $12404 = (_bh$5===_ah$4);return $12404;};
  const Kind$Term$identical = x0=>x1=>x2=>Kind$Term$identical$(x0,x1,x2);
  function Kind$Term$SmartMotive$replace$(_term$1,_from$2,_to$3,_lv$4){var self = Kind$Term$identical$(_term$1,_from$2,_lv$4);if (self) {var $12406 = _to$3;var $12405 = $12406;} else {var self = _term$1;switch(self._){case 'Kind.Term.var':var $12408=self.name;var $12409=self.indx;var $12410 = Kind$Term$var$($12408,$12409);var $12407 = $12410;break;case 'Kind.Term.ref':var $12411=self.name;var $12412 = Kind$Term$ref$($12411);var $12407 = $12412;break;case 'Kind.Term.all':var $12413=self.eras;var $12414=self.self;var $12415=self.name;var $12416=self.xtyp;var $12417=self.body;var _xtyp$10 = Kind$Term$SmartMotive$replace$($12416,_from$2,_to$3,_lv$4);var _body$11 = $12417(Kind$Term$ref$($12414))(Kind$Term$ref$($12415));var _body$12 = Kind$Term$SmartMotive$replace$(_body$11,_from$2,_to$3,Nat$succ$(Nat$succ$(_lv$4)));var $12418 = Kind$Term$all$($12413,$12414,$12415,_xtyp$10,(_s$13=>_x$14=>{var $12419 = _body$12;return $12419;}));var $12407 = $12418;break;case 'Kind.Term.lam':var $12420=self.name;var $12421=self.body;var _body$7 = $12421(Kind$Term$ref$($12420));var _body$8 = Kind$Term$SmartMotive$replace$(_body$7,_from$2,_to$3,Nat$succ$(_lv$4));var $12422 = Kind$Term$lam$($12420,(_x$9=>{var $12423 = _body$8;return $12423;}));var $12407 = $12422;break;case 'Kind.Term.app':var $12424=self.func;var $12425=self.argm;var _func$7 = Kind$Term$SmartMotive$replace$($12424,_from$2,_to$3,_lv$4);var _argm$8 = Kind$Term$SmartMotive$replace$($12425,_from$2,_to$3,_lv$4);var $12426 = Kind$Term$app$(_func$7,_argm$8);var $12407 = $12426;break;case 'Kind.Term.let':var $12427=self.name;var $12428=self.expr;var $12429=self.body;var _expr$8 = Kind$Term$SmartMotive$replace$($12428,_from$2,_to$3,_lv$4);var _body$9 = $12429(Kind$Term$ref$($12427));var _body$10 = Kind$Term$SmartMotive$replace$(_body$9,_from$2,_to$3,Nat$succ$(_lv$4));var $12430 = Kind$Term$let$($12427,_expr$8,(_x$11=>{var $12431 = _body$10;return $12431;}));var $12407 = $12430;break;case 'Kind.Term.def':var $12432=self.name;var $12433=self.expr;var $12434=self.body;var _expr$8 = Kind$Term$SmartMotive$replace$($12433,_from$2,_to$3,_lv$4);var _body$9 = $12434(Kind$Term$ref$($12432));var _body$10 = Kind$Term$SmartMotive$replace$(_body$9,_from$2,_to$3,Nat$succ$(_lv$4));var $12435 = Kind$Term$def$($12432,_expr$8,(_x$11=>{var $12436 = _body$10;return $12436;}));var $12407 = $12435;break;case 'Kind.Term.ann':var $12437=self.done;var $12438=self.term;var $12439=self.type;var _term$8 = Kind$Term$SmartMotive$replace$($12438,_from$2,_to$3,_lv$4);var _type$9 = Kind$Term$SmartMotive$replace$($12439,_from$2,_to$3,_lv$4);var $12440 = Kind$Term$ann$($12437,_term$8,_type$9);var $12407 = $12440;break;case 'Kind.Term.get':var $12441=self.expr;var $12442=self.fkey;var _expr$7 = Kind$Term$SmartMotive$replace$($12441,_from$2,_to$3,_lv$4);var _fkey$8 = $12442;var $12443 = Kind$Term$get$(_expr$7,_fkey$8);var $12407 = $12443;break;case 'Kind.Term.set':var $12444=self.expr;var $12445=self.fkey;var $12446=self.fval;var _expr$8 = Kind$Term$SmartMotive$replace$($12444,_from$2,_to$3,_lv$4);var _fkey$9 = $12445;var _fval$10 = Kind$Term$SmartMotive$replace$($12446,_from$2,_to$3,_lv$4);var $12447 = Kind$Term$set$(_expr$8,_fkey$9,_fval$10);var $12407 = $12447;break;case 'Kind.Term.ope':var $12448=self.name;var $12449=self.arg0;var $12450=self.arg1;var _arg0$8 = Kind$Term$SmartMotive$replace$($12449,_from$2,_to$3,_lv$4);var _arg1$9 = Kind$Term$SmartMotive$replace$($12450,_from$2,_to$3,_lv$4);var $12451 = Kind$Term$ope$($12448,_arg0$8,_arg1$9);var $12407 = $12451;break;case 'Kind.Term.ori':var $12452=self.expr;var $12453 = Kind$Term$SmartMotive$replace$($12452,_from$2,_to$3,_lv$4);var $12407 = $12453;break;case 'Kind.Term.typ':var $12454 = Kind$Term$typ;var $12407 = $12454;break;case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':var $12455 = _term$1;var $12407 = $12455;break;};var $12405 = $12407;};return $12405;};
  const Kind$Term$SmartMotive$replace = x0=>x1=>x2=>x3=>Kind$Term$SmartMotive$replace$(x0,x1,x2,x3);
  function Kind$Term$SmartMotive$make$(_name$1,_expr$2,_type$3,_moti$4,_size$5,_defs$6){var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2,_type$3,_defs$6);var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1,_type$3,_defs$6);var _subs$9 = List$zip$(_nams$8,_vals$7);var $12456 = List$fold$(_subs$9,_moti$4,(_sub$10=>_moti$11=>{var self = _sub$10;switch(self._){case 'Pair.new':var $12458=self.fst;var $12459=self.snd;var $12460 = Kind$Term$SmartMotive$replace$(_moti$11,$12459,Kind$Term$ref$($12458),_size$5);var $12457 = $12460;break;};return $12457;}));return $12456;};
  const Kind$Term$SmartMotive$make = x0=>x1=>x2=>x3=>x4=>x5=>Kind$Term$SmartMotive$make$(x0,x1,x2,x3,x4,x5);
  function Kind$Term$check$expand$cse$motive$(_wyth$1,_moti$2,_name$3,_expr$4,_etyp$5,_rtyp$6,_defs$7,_size$8){var _done$9 = Kind$Term$check$expand$cse$motive$go$(_wyth$1,_moti$2,_name$3,_expr$4,_etyp$5,_rtyp$6,_defs$7,_size$8);var self = _moti$2;switch(self._){case 'Maybe.none':var $12462 = Kind$Term$SmartMotive$make$(_name$3,_expr$4,_etyp$5,_done$9,_size$8,_defs$7);var $12461 = $12462;break;case 'Maybe.some':var $12463 = _done$9;var $12461 = $12463;break;};return $12461;};
  const Kind$Term$check$expand$cse$motive = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>Kind$Term$check$expand$cse$motive$(x0,x1,x2,x3,x4,x5,x6,x7);
  function Kind$Term$check$expand$cse$argument$(_name$1,_wyth$2,_type$3,_body$4,_defs$5){var self = Kind$Term$reduce$(_type$3,_defs$5);switch(self._){case 'Kind.Term.all':var $12465=self.self;var $12466=self.name;var $12467=self.body;var $12468 = Kind$Term$lam$((()=>{var self = String$is_empty$($12466);if (self) {var $12469 = _name$1;return $12469;} else {var $12470 = String$flatten$(List$cons$(_name$1,List$cons$(".",List$cons$($12466,List$nil))));return $12470;};})(),(_x$11=>{var $12471 = Kind$Term$check$expand$cse$argument$(_name$1,_wyth$2,$12467(Kind$Term$var$($12465,0n))(Kind$Term$var$($12466,0n)),_body$4,_defs$5);return $12471;}));var $12464 = $12468;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.get':case 'Kind.Term.ori':var self = _wyth$2;switch(self._){case 'List.cons':var $12473=self.head;var $12474=self.tail;var self = $12473;switch(self._){case 'Kind.Ann.new':var $12476=self.name;var $12477 = Kind$Term$lam$($12476,(_x$13=>{var $12478 = Kind$Term$check$expand$cse$argument$(_name$1,$12474,_type$3,_body$4,_defs$5);return $12478;}));var $12475 = $12477;break;};var $12472 = $12475;break;case 'List.nil':var $12479 = _body$4;var $12472 = $12479;break;};var $12464 = $12472;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.new':var self = _wyth$2;switch(self._){case 'List.cons':var $12481=self.head;var $12482=self.tail;var self = $12481;switch(self._){case 'Kind.Ann.new':var $12484=self.name;var $12485 = Kind$Term$lam$($12484,(_x$12=>{var $12486 = Kind$Term$check$expand$cse$argument$(_name$1,$12482,_type$3,_body$4,_defs$5);return $12486;}));var $12483 = $12485;break;};var $12480 = $12483;break;case 'List.nil':var $12487 = _body$4;var $12480 = $12487;break;};var $12464 = $12480;break;case 'Kind.Term.typ':var self = _wyth$2;switch(self._){case 'List.cons':var $12489=self.head;var $12490=self.tail;var self = $12489;switch(self._){case 'Kind.Ann.new':var $12492=self.name;var $12493 = Kind$Term$lam$($12492,(_x$11=>{var $12494 = Kind$Term$check$expand$cse$argument$(_name$1,$12490,_type$3,_body$4,_defs$5);return $12494;}));var $12491 = $12493;break;};var $12488 = $12491;break;case 'List.nil':var $12495 = _body$4;var $12488 = $12495;break;};var $12464 = $12488;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.num':case 'Kind.Term.set':case 'Kind.Term.ope':var self = _wyth$2;switch(self._){case 'List.cons':var $12497=self.head;var $12498=self.tail;var self = $12497;switch(self._){case 'Kind.Ann.new':var $12500=self.name;var $12501 = Kind$Term$lam$($12500,(_x$14=>{var $12502 = Kind$Term$check$expand$cse$argument$(_name$1,$12498,_type$3,_body$4,_defs$5);return $12502;}));var $12499 = $12501;break;};var $12496 = $12499;break;case 'List.nil':var $12503 = _body$4;var $12496 = $12503;break;};var $12464 = $12496;break;case 'Kind.Term.cse':var self = _wyth$2;switch(self._){case 'List.cons':var $12505=self.head;var $12506=self.tail;var self = $12505;switch(self._){case 'Kind.Ann.new':var $12508=self.name;var $12509 = Kind$Term$lam$($12508,(_x$17=>{var $12510 = Kind$Term$check$expand$cse$argument$(_name$1,$12506,_type$3,_body$4,_defs$5);return $12510;}));var $12507 = $12509;break;};var $12504 = $12507;break;case 'List.nil':var $12511 = _body$4;var $12504 = $12511;break;};var $12464 = $12504;break;};return $12464;};
  const Kind$Term$check$expand$cse$argument = x0=>x1=>x2=>x3=>x4=>Kind$Term$check$expand$cse$argument$(x0,x1,x2,x3,x4);
  function Maybe$or$(_a$2,_b$3){var self = _a$2;switch(self._){case 'Maybe.some':var $12513=self.value;var $12514 = Maybe$some$($12513);var $12512 = $12514;break;case 'Maybe.none':var $12515 = _b$3;var $12512 = $12515;break;};return $12512;};
  const Maybe$or = x0=>x1=>Maybe$or$(x0,x1);
  function Kind$Term$check$expand$cse$cases$(_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7){var Kind$Term$check$expand$cse$cases$=(_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7)=>({ctr:'TCO',arg:[_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7]});var Kind$Term$check$expand$cse$cases=_expr$1=>_name$2=>_wyth$3=>_cses$4=>_type$5=>_defs$6=>_ctxt$7=>Kind$Term$check$expand$cse$cases$(_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7);var arg=[_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7];while(true){let [_expr$1,_name$2,_wyth$3,_cses$4,_type$5,_defs$6,_ctxt$7]=arg;var R=(()=>{var self = Kind$Term$reduce$(_type$5,_defs$6);switch(self._){case 'Kind.Term.all':var $12516=self.self;var $12517=self.name;var $12518=self.xtyp;var $12519=self.body;var _argm$13 = Maybe$or$(Kind$Map$get$($12517,_cses$4),Kind$Map$get$("_",_cses$4));var _argm$14 = Maybe$default$(_argm$13,Kind$Term$ref$((_name$2+("_"+($12517+"_case")))));var _argm$15 = Kind$Term$check$expand$cse$argument$(_name$2,_wyth$3,$12518,_argm$14,_defs$6);var _expr$16 = Kind$Term$app$(_expr$1,_argm$15);var _type$17 = $12519(Kind$Term$var$($12516,0n))(Kind$Term$var$($12517,0n));var $12520 = Kind$Term$check$expand$cse$cases$(_expr$16,_name$2,_wyth$3,_cses$4,_type$17,_defs$6,_ctxt$7);return $12520;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.get':case 'Kind.Term.ori':var _expr$10 = (()=>{var $12523 = _expr$1;var $12524 = _wyth$3;let _expr$11=$12523;let _defn$10;while ($12524._==='List.cons') {_defn$10=$12524.head;var $12523 = Kind$Term$app$(_expr$11,(()=>{var self = _defn$10;switch(self._){case 'Kind.Ann.new':var $12525=self.term;var $12526 = $12525;return $12526;};})());_expr$11=$12523;$12524=$12524.tail;}return _expr$11;})();var $12521 = _expr$10;return $12521;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.new':var _expr$9 = (()=>{var $12529 = _expr$1;var $12530 = _wyth$3;let _expr$10=$12529;let _defn$9;while ($12530._==='List.cons') {_defn$9=$12530.head;var $12529 = Kind$Term$app$(_expr$10,(()=>{var self = _defn$9;switch(self._){case 'Kind.Ann.new':var $12531=self.term;var $12532 = $12531;return $12532;};})());_expr$10=$12529;$12530=$12530.tail;}return _expr$10;})();var $12527 = _expr$9;return $12527;case 'Kind.Term.typ':var _expr$8 = (()=>{var $12535 = _expr$1;var $12536 = _wyth$3;let _expr$9=$12535;let _defn$8;while ($12536._==='List.cons') {_defn$8=$12536.head;var $12535 = Kind$Term$app$(_expr$9,(()=>{var self = _defn$8;switch(self._){case 'Kind.Ann.new':var $12537=self.term;var $12538 = $12537;return $12538;};})());_expr$9=$12535;$12536=$12536.tail;}return _expr$9;})();var $12533 = _expr$8;return $12533;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.num':case 'Kind.Term.set':case 'Kind.Term.ope':var _expr$11 = (()=>{var $12541 = _expr$1;var $12542 = _wyth$3;let _expr$12=$12541;let _defn$11;while ($12542._==='List.cons') {_defn$11=$12542.head;var $12541 = Kind$Term$app$(_expr$12,(()=>{var self = _defn$11;switch(self._){case 'Kind.Ann.new':var $12543=self.term;var $12544 = $12543;return $12544;};})());_expr$12=$12541;$12542=$12542.tail;}return _expr$12;})();var $12539 = _expr$11;return $12539;case 'Kind.Term.cse':var _expr$14 = (()=>{var $12547 = _expr$1;var $12548 = _wyth$3;let _expr$15=$12547;let _defn$14;while ($12548._==='List.cons') {_defn$14=$12548.head;var $12547 = Kind$Term$app$(_expr$15,(()=>{var self = _defn$14;switch(self._){case 'Kind.Ann.new':var $12549=self.term;var $12550 = $12549;return $12550;};})());_expr$15=$12547;$12548=$12548.tail;}return _expr$15;})();var $12545 = _expr$14;return $12545;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Term$check$expand$cse$cases = x0=>x1=>x2=>x3=>x4=>x5=>x6=>Kind$Term$check$expand$cse$cases$(x0,x1,x2,x3,x4,x5,x6);
  function Kind$Term$check$expand$cse$(_expr$1,_name$2,_wyth$3,_cses$4,_moti$5,_etyp$6,_rtyp$7,_defs$8,_ctxt$9){var self = Kind$Term$reduce$(_etyp$6,_defs$8);switch(self._){case 'Kind.Term.all':var $12552=self.self;var $12553=self.name;var $12554=self.xtyp;var $12555=self.body;var _moti$15 = Kind$Term$check$expand$cse$motive$(_wyth$3,_moti$5,_name$2,_expr$1,_etyp$6,_rtyp$7,_defs$8,(list_length(_ctxt$9)));var _argm$16 = Kind$Term$check$expand$cse$argument$(_name$2,List$nil,$12554,_moti$15,_defs$8);var _expr$17 = Kind$Term$app$(_expr$1,_argm$16);var _type$18 = $12555(Kind$Term$var$($12552,0n))(Kind$Term$var$($12553,0n));var $12556 = Maybe$some$(Kind$Term$check$expand$cse$cases$(_expr$17,_name$2,_wyth$3,_cses$4,_type$18,_defs$8,_ctxt$9));var $12551 = $12556;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12557 = Maybe$none;var $12551 = $12557;break;};return $12551;};
  const Kind$Term$check$expand$cse = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>x8=>Kind$Term$check$expand$cse$(x0,x1,x2,x3,x4,x5,x6,x7,x8);
  function Kind$Error$cant_infer$(_origin$1,_term$2,_context$3){var $12558 = ({_:'Kind.Error.cant_infer','origin':_origin$1,'term':_term$2,'context':_context$3});return $12558;};
  const Kind$Error$cant_infer = x0=>x1=>x2=>Kind$Error$cant_infer$(x0,x1,x2);
  function Kind$Term$check$cant_infer$(_term$1,_type$2,_ctx$3,_orig$4){var $12559 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$cant_infer$(_orig$4,_term$1,_ctx$3),List$nil));return $12559;};
  const Kind$Term$check$cant_infer = x0=>x1=>x2=>x3=>Kind$Term$check$cant_infer$(x0,x1,x2,x3);
  function Kind$Term$get_bnds$(_term$1,_depth$2){var self = _term$1;switch(self._){case 'Kind.Term.all':var $12561=self.self;var $12562=self.name;var $12563=self.xtyp;var $12564=self.body;var _b$8 = $12564(Kind$Term$var$($12561,_depth$2))(Kind$Term$var$($12562,Nat$succ$(_depth$2)));var self = Kind$Term$get_bnds$(_b$8,Nat$succ$(Nat$succ$(_depth$2)));switch(self._){case 'Pair.new':var $12566=self.fst;var $12567=self.snd;var $12568 = Pair$new$(List$cons$(Pair$new$($12562,$12563),$12566),$12567);var $12565 = $12568;break;};var $12560 = $12565;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12569 = Pair$new$(List$nil,_term$1);var $12560 = $12569;break;};return $12560;};
  const Kind$Term$get_bnds = x0=>x1=>Kind$Term$get_bnds$(x0,x1);
  function List$last$go$(_xs$2,_last$3){var List$last$go$=(_xs$2,_last$3)=>({ctr:'TCO',arg:[_xs$2,_last$3]});var List$last$go=_xs$2=>_last$3=>List$last$go$(_xs$2,_last$3);var arg=[_xs$2,_last$3];while(true){let [_xs$2,_last$3]=arg;var R=(()=>{var self = _xs$2;switch(self._){case 'List.cons':var $12570=self.head;var $12571=self.tail;var $12572 = List$last$go$($12571,Maybe$some$($12570));return $12572;case 'List.nil':var $12573 = _last$3;return $12573;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const List$last$go = x0=>x1=>List$last$go$(x0,x1);
  function List$last$(_xs$2){var $12574 = List$last$go$(_xs$2,Maybe$none);return $12574;};
  const List$last = x0=>List$last$(x0);
  function Kind$Term$check$expand$set$count_params$(_xtyp$1){var self = Kind$Term$get_bnds$(_xtyp$1,0n);switch(self._){case 'Pair.new':var $12576=self.fst;var self = Kind$Term$get_args$(Pair$snd$(Maybe$default$(List$last$($12576),Pair$new$("",Kind$Term$typ))));switch(self._){case 'Pair.new':var $12578=self.snd;var _indexs$6 = Nat$pred$((list_length($12576)));var _params$7 = ((list_length($12578))-_indexs$6<=0n?0n:(list_length($12578))-_indexs$6);var $12579 = _params$7;var $12577 = $12579;break;};var $12575 = $12577;break;};return $12575;};
  const Kind$Term$check$expand$set$count_params = x0=>Kind$Term$check$expand$set$count_params$(x0);
  function Nat$for$(_state$2,_from$3,_til$4,_func$5){var Nat$for$=(_state$2,_from$3,_til$4,_func$5)=>({ctr:'TCO',arg:[_state$2,_from$3,_til$4,_func$5]});var Nat$for=_state$2=>_from$3=>_til$4=>_func$5=>Nat$for$(_state$2,_from$3,_til$4,_func$5);var arg=[_state$2,_from$3,_til$4,_func$5];while(true){let [_state$2,_from$3,_til$4,_func$5]=arg;var R=(()=>{var self = (_from$3===_til$4);if (self) {var $12580 = _state$2;return $12580;} else {var $12581 = Nat$for$(_func$5(_from$3)(_state$2),Nat$succ$(_from$3),_til$4,_func$5);return $12581;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Nat$for = x0=>x1=>x2=>x3=>Nat$for$(x0,x1,x2,x3);
  function List$get$(_index$2,_list$3){var List$get$=(_index$2,_list$3)=>({ctr:'TCO',arg:[_index$2,_list$3]});var List$get=_index$2=>_list$3=>List$get$(_index$2,_list$3);var arg=[_index$2,_list$3];while(true){let [_index$2,_list$3]=arg;var R=(()=>{var self = _list$3;switch(self._){case 'List.cons':var $12582=self.head;var $12583=self.tail;var self = _index$2;if (self===0n) {var $12585 = Maybe$some$($12582);var $12584 = $12585;} else {var $12586=(self-1n);var $12587 = List$get$($12586,$12583);var $12584 = $12587;};return $12584;case 'List.nil':var $12588 = Maybe$none;return $12588;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const List$get = x0=>x1=>List$get$(x0,x1);
  function Kind$Term$check$expand$new$pair$(_args$1,_type$2,_defs$3){var self = ((list_length(_args$1))===2n);if (self) {var _term$4 = Kind$Term$ref$("Pair.new");var _term$5 = Kind$Term$app$(_term$4,Kind$Term$hol$(Bits$e));var _term$6 = Kind$Term$app$(_term$5,Kind$Term$hol$(Bits$e));var _term$7 = Kind$Term$app$(_term$6,Maybe$default$(List$get$(0n,_args$1),Kind$Term$ref$("pair_fst")));var _term$8 = Kind$Term$app$(_term$7,Maybe$default$(List$get$(1n,_args$1),Kind$Term$ref$("pair_snd")));var $12590 = Maybe$some$(_term$8);var $12589 = $12590;} else {var $12591 = Maybe$none;var $12589 = $12591;};return $12589;};
  const Kind$Term$check$expand$new$pair = x0=>x1=>x2=>Kind$Term$check$expand$new$pair$(x0,x1,x2);
  function Kind$Term$check$expand$new$(_args$1,_type$2,_defs$3){var self = _type$2;switch(self._){case 'Maybe.some':var $12593=self.value;var self = Kind$Term$reduce$($12593,_defs$3);switch(self._){case 'Kind.Term.all':var $12595=self.self;var $12596=self.xtyp;var $12597=self.body;var self = Kind$Term$reduce$($12597(Kind$Term$typ)(Kind$Term$typ),_defs$3);switch(self._){case 'Kind.Term.all':var $12599=self.name;var _tnam$15 = Maybe$default$(Kind$Term$check$get_name_of_self_type$slice$($12595),"");var _term$16 = Kind$Term$ref$((_tnam$15+("."+$12599)));var _pars$17 = Kind$Term$check$expand$set$count_params$($12596);var _term$18 = Nat$for$(_term$16,0n,_pars$17,(_i$18=>_term$19=>{var $12601 = Kind$Term$app$(_term$19,Kind$Term$hol$(Bits$e));return $12601;}));var _term$19 = (()=>{var $12603 = _term$18;var $12604 = _args$1;let _term$20=$12603;let _arg$19;while ($12604._==='List.cons') {_arg$19=$12604.head;var $12603 = Kind$Term$app$(_term$20,_arg$19);_term$20=$12603;$12604=$12604.tail;}return _term$20;})();var $12600 = Maybe$some$(_term$19);var $12598 = $12600;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12605 = Maybe$none;var $12598 = $12605;break;};var $12594 = $12598;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12606 = Maybe$none;var $12594 = $12606;break;};var _got$4 = $12594;break;case 'Maybe.none':var $12607 = Maybe$none;var _got$4 = $12607;break;};var self = _got$4;switch(self._){case 'Maybe.some':var $12608=self.value;var $12609 = Maybe$some$($12608);var $12592 = $12609;break;case 'Maybe.none':var $12610 = Kind$Term$check$expand$new$pair$(_args$1,_type$2,_defs$3);var $12592 = $12610;break;};return $12592;};
  const Kind$Term$check$expand$new = x0=>x1=>x2=>Kind$Term$check$expand$new$(x0,x1,x2);
  function Kind$Term$check$expand$get$selector$(_fkey$1,_ctor$2,_defs$3,_rett$4){var self = Kind$Term$reduce$(_ctor$2,_defs$3);switch(self._){case 'Kind.Term.all':var $12612=self.name;var $12613=self.body;var $12614 = Kind$Term$lam$($12612,(_x$10=>{var _body$11 = $12613(Kind$Term$typ)(Kind$Term$typ);var self = ($12612===_fkey$1);if (self) {var $12616 = _x$10;var _rett$12 = $12616;} else {var $12617 = _rett$4;var _rett$12 = $12617;};var $12615 = Kind$Term$check$expand$get$selector$(_fkey$1,_body$11,_defs$3,_rett$12);return $12615;}));var $12611 = $12614;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12618 = _rett$4;var $12611 = $12618;break;};return $12611;};
  const Kind$Term$check$expand$get$selector = x0=>x1=>x2=>x3=>Kind$Term$check$expand$get$selector$(x0,x1,x2,x3);
  function Kind$Term$check$expand$get$(_expr$1,_fkey$2,_etyp$3,_defs$4){var self = Kind$Term$reduce$(_etyp$3,_defs$4);switch(self._){case 'Kind.Term.all':var $12620=self.body;var self = Kind$Term$reduce$($12620(Kind$Term$typ)(Kind$Term$typ),_defs$4);switch(self._){case 'Kind.Term.all':var $12622=self.xtyp;var _term$15 = Kind$Term$app$(_expr$1,Kind$Term$lam$("",(_$15=>{var $12624 = Kind$Term$hol$(Bits$e);return $12624;})));var _rett$16 = Kind$Term$ref$((_fkey$2+"_field"));var _sele$17 = Kind$Term$check$expand$get$selector$(_fkey$2,$12622,_defs$4,_rett$16);var $12623 = Maybe$some$(Kind$Term$app$(_term$15,_sele$17));var $12621 = $12623;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12625 = Maybe$none;var $12621 = $12625;break;};var $12619 = $12621;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12626 = Maybe$none;var $12619 = $12626;break;};return $12619;};
  const Kind$Term$check$expand$get = x0=>x1=>x2=>x3=>Kind$Term$check$expand$get$(x0,x1,x2,x3);
  function Kind$Term$check$expand$set$selector$(_fkey$1,_fval$2,_ctor$3,_defs$4,_rett$5){var self = Kind$Term$reduce$(_ctor$3,_defs$4);switch(self._){case 'Kind.Term.all':var $12628=self.name;var $12629=self.body;var $12630 = Kind$Term$lam$($12628,(_x$11=>{var _body$12 = $12629(Kind$Term$typ)(Kind$Term$typ);var _rett$13 = Kind$Term$app$(_rett$5,(()=>{var self = ($12628===_fkey$1);if (self) {var $12632 = _fval$2;return $12632;} else {var $12633 = _x$11;return $12633;};})());var $12631 = Kind$Term$check$expand$set$selector$(_fkey$1,_fval$2,_body$12,_defs$4,_rett$13);return $12631;}));var $12627 = $12630;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12634 = _rett$5;var $12627 = $12634;break;};return $12627;};
  const Kind$Term$check$expand$set$selector = x0=>x1=>x2=>x3=>x4=>Kind$Term$check$expand$set$selector$(x0,x1,x2,x3,x4);
  function Kind$Term$check$expand$set$(_expr$1,_fkey$2,_fval$3,_etyp$4,_defs$5){var self = Kind$Term$reduce$(_etyp$4,_defs$5);switch(self._){case 'Kind.Term.all':var $12636=self.self;var $12637=self.xtyp;var $12638=self.body;var self = Kind$Term$reduce$($12638(Kind$Term$typ)(Kind$Term$typ),_defs$5);switch(self._){case 'Kind.Term.all':var $12640=self.name;var $12641=self.xtyp;var _term$16 = Kind$Term$app$(_expr$1,Kind$Term$lam$("",(_$16=>{var $12643 = Kind$Term$hol$(Bits$e);return $12643;})));var _tnam$17 = Maybe$default$(Kind$Term$check$get_name_of_self_type$slice$($12636),"");var _rett$18 = Kind$Term$ref$((_tnam$17+("."+$12640)));var _pars$19 = Kind$Term$check$expand$set$count_params$($12637);var _rett$20 = Nat$for$(_rett$18,0n,_pars$19,(_i$20=>_rett$21=>{var $12644 = Kind$Term$app$(_rett$21,Kind$Term$hol$(Bits$e));return $12644;}));var _sele$21 = Kind$Term$check$expand$set$selector$(_fkey$2,_fval$3,$12641,_defs$5,_rett$20);var $12642 = Maybe$some$(Kind$Term$app$(_term$16,_sele$21));var $12639 = $12642;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12645 = Maybe$none;var $12639 = $12645;break;};var $12635 = $12639;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12646 = Maybe$none;var $12635 = $12646;break;};return $12635;};
  const Kind$Term$check$expand$set = x0=>x1=>x2=>x3=>x4=>Kind$Term$check$expand$set$(x0,x1,x2,x3,x4);
  function String$at$(_index$1,_str$2){var String$at$=(_index$1,_str$2)=>({ctr:'TCO',arg:[_index$1,_str$2]});var String$at=_index$1=>_str$2=>String$at$(_index$1,_str$2);var arg=[_index$1,_str$2];while(true){let [_index$1,_str$2]=arg;var R=(()=>{var self = _str$2;if (self.length===0) {var $12647 = Maybe$none;return $12647;} else {var $12648=self.charCodeAt(0);var $12649=self.slice(1);var self = _index$1;if (self===0n) {var $12651 = Maybe$some$($12648);var $12650 = $12651;} else {var $12652=(self-1n);var $12653 = String$at$($12652,$12649);var $12650 = $12653;};return $12650;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const String$at = x0=>x1=>String$at$(x0,x1);
  function String$last$(_xs$1){var $12654 = String$at$(Nat$pred$(String$length$(_xs$1)),_xs$1);return $12654;};
  const String$last = x0=>String$last$(x0);
  function Kind$Term$check$expand$ope$(_skip_cmp$1,_oper$2,_arg0$3,_arg1$4,_otyp$5,_defs$6){var self = ((Maybe$default$(String$last$(_oper$2),120)===63)&&_skip_cmp$1);if (self) {var $12656 = Maybe$none;var $12655 = $12656;} else {var _type_name$7 = Kind$Term$check$get_name_of_self_type$(_otyp$5,_defs$6);var self = _type_name$7;switch(self._){case 'Maybe.some':var $12658=self.value;var self = (_oper$2==="+");if (self) {var $12660 = Maybe$some$("add");var _oper_name$9 = $12660;} else {var self = (_oper$2==="-");if (self) {var $12662 = Maybe$some$("sub");var $12661 = $12662;} else {var self = (_oper$2==="*");if (self) {var $12664 = Maybe$some$("mul");var $12663 = $12664;} else {var self = (_oper$2==="/");if (self) {var $12666 = Maybe$some$("div");var $12665 = $12666;} else {var self = (_oper$2==="**");if (self) {var $12668 = Maybe$some$("pow");var $12667 = $12668;} else {var self = (_oper$2==="%");if (self) {var $12670 = Maybe$some$("mod");var $12669 = $12670;} else {var self = (_oper$2==="<?");if (self) {var $12672 = Maybe$some$("ltn");var $12671 = $12672;} else {var self = (_oper$2==="<=?");if (self) {var $12674 = Maybe$some$("lte");var $12673 = $12674;} else {var self = (_oper$2==="=?");if (self) {var $12676 = Maybe$some$("eql");var $12675 = $12676;} else {var self = (_oper$2===">=?");if (self) {var $12678 = Maybe$some$("gte");var $12677 = $12678;} else {var self = (_oper$2===">?");if (self) {var $12680 = Maybe$some$("gtn");var $12679 = $12680;} else {var self = (_oper$2==="&&");if (self) {var $12682 = Maybe$some$("and");var $12681 = $12682;} else {var self = (_oper$2==="||");if (self) {var $12684 = Maybe$some$("or");var $12683 = $12684;} else {var $12685 = Maybe$none;var $12683 = $12685;};var $12681 = $12683;};var $12679 = $12681;};var $12677 = $12679;};var $12675 = $12677;};var $12673 = $12675;};var $12671 = $12673;};var $12669 = $12671;};var $12667 = $12669;};var $12665 = $12667;};var $12663 = $12665;};var $12661 = $12663;};var _oper_name$9 = $12661;};var self = _oper_name$9;switch(self._){case 'Maybe.some':var $12686=self.value;var _term$11 = Kind$Term$ref$(($12658+("."+$12686)));var _term$12 = Kind$Term$app$(_term$11,_arg0$3);var _term$13 = Kind$Term$app$(_term$12,_arg1$4);var $12687 = Maybe$some$(_term$13);var $12659 = $12687;break;case 'Maybe.none':var $12688 = Maybe$none;var $12659 = $12688;break;};var $12657 = $12659;break;case 'Maybe.none':var $12689 = Maybe$none;var $12657 = $12689;break;};var $12655 = $12657;};return $12655;};
  const Kind$Term$check$expand$ope = x0=>x1=>x2=>x3=>x4=>x5=>Kind$Term$check$expand$ope$(x0,x1,x2,x3,x4,x5);
  function BitsSet$has$(_bits$1,_set$2){var self = (bitsmap_get(_bits$1,_set$2));switch(self._){case 'Maybe.none':var $12691 = Bool$false;var $12690 = $12691;break;case 'Maybe.some':var $12692 = Bool$true;var $12690 = $12692;break;};return $12690;};
  const BitsSet$has = x0=>x1=>BitsSet$has$(x0,x1);
  function BitsSet$mut$has$(_bits$1,_set$2){var $12693 = BitsSet$has$(_bits$1,_set$2);return $12693;};
  const BitsSet$mut$has = x0=>x1=>BitsSet$mut$has$(x0,x1);
  function Kind$Term$equal$extra_holes$funari$(_term$1,_arity$2){var Kind$Term$equal$extra_holes$funari$=(_term$1,_arity$2)=>({ctr:'TCO',arg:[_term$1,_arity$2]});var Kind$Term$equal$extra_holes$funari=_term$1=>_arity$2=>Kind$Term$equal$extra_holes$funari$(_term$1,_arity$2);var arg=[_term$1,_arity$2];while(true){let [_term$1,_arity$2]=arg;var R=(()=>{var self = _term$1;switch(self._){case 'Kind.Term.var':var $12694=self.name;var $12695 = Maybe$some$(Pair$new$($12694,_arity$2));return $12695;case 'Kind.Term.ref':var $12696=self.name;var $12697 = Maybe$some$(Pair$new$($12696,_arity$2));return $12697;case 'Kind.Term.app':var $12698=self.func;var $12699 = Kind$Term$equal$extra_holes$funari$($12698,Nat$succ$(_arity$2));return $12699;case 'Kind.Term.ori':var $12700=self.expr;var $12701 = Kind$Term$equal$extra_holes$funari$($12700,_arity$2);return $12701;case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12702 = Maybe$none;return $12702;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Term$equal$extra_holes$funari = x0=>x1=>Kind$Term$equal$extra_holes$funari$(x0,x1);
  function Kind$Term$has_holes$(_term$1){var self = _term$1;switch(self._){case 'Kind.Term.all':var $12704=self.xtyp;var $12705=self.body;var $12706 = (Kind$Term$has_holes$($12704)||Kind$Term$has_holes$($12705(Kind$Term$typ)(Kind$Term$typ)));var $12703 = $12706;break;case 'Kind.Term.lam':var $12707=self.body;var $12708 = Kind$Term$has_holes$($12707(Kind$Term$typ));var $12703 = $12708;break;case 'Kind.Term.app':var $12709=self.func;var $12710=self.argm;var $12711 = (Kind$Term$has_holes$($12709)||Kind$Term$has_holes$($12710));var $12703 = $12711;break;case 'Kind.Term.let':var $12712=self.expr;var $12713=self.body;var $12714 = (Kind$Term$has_holes$($12712)||Kind$Term$has_holes$($12713(Kind$Term$typ)));var $12703 = $12714;break;case 'Kind.Term.def':var $12715=self.expr;var $12716=self.body;var $12717 = (Kind$Term$has_holes$($12715)||Kind$Term$has_holes$($12716(Kind$Term$typ)));var $12703 = $12717;break;case 'Kind.Term.ann':var $12718=self.term;var $12719=self.type;var $12720 = (Kind$Term$has_holes$($12718)||Kind$Term$has_holes$($12719));var $12703 = $12720;break;case 'Kind.Term.ori':var $12721=self.expr;var $12722 = Kind$Term$has_holes$($12721);var $12703 = $12722;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12723 = Bool$false;var $12703 = $12723;break;case 'Kind.Term.hol':var $12724 = Bool$true;var $12703 = $12724;break;};return $12703;};
  const Kind$Term$has_holes = x0=>Kind$Term$has_holes$(x0);
  function Kind$Term$equal$hole$(_path$1,_term$2){var self = _term$2;switch(self._){case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var self = Kind$Term$has_holes$(_term$2);if (self) {var $12727 = Kind$Check$result$(Maybe$some$(Bool$true),List$nil);var $12726 = $12727;} else {var $12728 = Kind$Check$result$(Maybe$some$(Bool$true),List$cons$(Kind$Error$patch$(_path$1,Kind$Term$normalize$(_term$2,Kind$Map$new)),List$nil));var $12726 = $12728;};var $12725 = $12726;break;case 'Kind.Term.hol':var $12729 = Kind$Check$result$(Maybe$some$(Bool$true),List$nil);var $12725 = $12729;break;};return $12725;};
  const Kind$Term$equal$hole = x0=>x1=>Kind$Term$equal$hole$(x0,x1);
  function Kind$Term$equal$extra_holes$filler$(_a$1,_b$2){var self = _a$1;switch(self._){case 'Kind.Term.app':var $12731=self.func;var $12732=self.argm;var self = _b$2;switch(self._){case 'Kind.Term.app':var $12734=self.func;var $12735=self.argm;var self = Kind$Term$equal$extra_holes$filler$($12731,$12734);switch(self._){case 'Kind.Check.result':var $12737=self.value;var $12738=self.errors;var self = $12737;switch(self._){case 'Maybe.none':var $12740 = Kind$Check$result$(Maybe$none,$12738);var $12739 = $12740;break;case 'Maybe.some':var self = Kind$Term$equal$extra_holes$filler$($12732,$12735);switch(self._){case 'Kind.Check.result':var $12742=self.value;var $12743=self.errors;var $12744 = Kind$Check$result$($12742,List$concat$($12738,$12743));var $12741 = $12744;break;};var $12739 = $12741;break;};var $12736 = $12739;break;};var $12733 = $12736;break;case 'Kind.Term.hol':var $12745=self.path;var self = Kind$Term$equal$hole$($12745,_a$1);switch(self._){case 'Kind.Check.result':var $12747=self.value;var $12748=self.errors;var self = $12747;switch(self._){case 'Maybe.none':var $12750 = Kind$Check$result$(Maybe$none,$12748);var $12749 = $12750;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $12752=self.value;var $12753=self.errors;var $12754 = Kind$Check$result$($12752,List$concat$($12748,$12753));var $12751 = $12754;break;};var $12749 = $12751;break;};var $12746 = $12749;break;};var $12733 = $12746;break;case 'Kind.Term.ori':var $12755=self.expr;var $12756 = Kind$Term$equal$extra_holes$filler$(_a$1,$12755);var $12733 = $12756;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12757 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12733 = $12757;break;};var $12730 = $12733;break;case 'Kind.Term.hol':var $12758=self.path;var self = Kind$Term$equal$hole$($12758,_b$2);switch(self._){case 'Kind.Check.result':var $12760=self.value;var $12761=self.errors;var self = $12760;switch(self._){case 'Maybe.none':var $12763 = Kind$Check$result$(Maybe$none,$12761);var $12762 = $12763;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $12765=self.value;var $12766=self.errors;var $12767 = Kind$Check$result$($12765,List$concat$($12761,$12766));var $12764 = $12767;break;};var $12762 = $12764;break;};var $12759 = $12762;break;};var $12730 = $12759;break;case 'Kind.Term.ori':var $12768=self.expr;var $12769 = Kind$Term$equal$extra_holes$filler$($12768,_b$2);var $12730 = $12769;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.get':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $12771=self.path;var self = Kind$Term$equal$hole$($12771,_a$1);switch(self._){case 'Kind.Check.result':var $12773=self.value;var $12774=self.errors;var self = $12773;switch(self._){case 'Maybe.none':var $12776 = Kind$Check$result$(Maybe$none,$12774);var $12775 = $12776;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $12778=self.value;var $12779=self.errors;var $12780 = Kind$Check$result$($12778,List$concat$($12774,$12779));var $12777 = $12780;break;};var $12775 = $12777;break;};var $12772 = $12775;break;};var $12770 = $12772;break;case 'Kind.Term.ori':var $12781=self.expr;var $12782 = Kind$Term$equal$extra_holes$filler$(_a$1,$12781);var $12770 = $12782;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12783 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12770 = $12783;break;};var $12730 = $12770;break;case 'Kind.Term.ref':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.new':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $12785=self.path;var self = Kind$Term$equal$hole$($12785,_a$1);switch(self._){case 'Kind.Check.result':var $12787=self.value;var $12788=self.errors;var self = $12787;switch(self._){case 'Maybe.none':var $12790 = Kind$Check$result$(Maybe$none,$12788);var $12789 = $12790;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $12792=self.value;var $12793=self.errors;var $12794 = Kind$Check$result$($12792,List$concat$($12788,$12793));var $12791 = $12794;break;};var $12789 = $12791;break;};var $12786 = $12789;break;};var $12784 = $12786;break;case 'Kind.Term.ori':var $12795=self.expr;var $12796 = Kind$Term$equal$extra_holes$filler$(_a$1,$12795);var $12784 = $12796;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12797 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12784 = $12797;break;};var $12730 = $12784;break;case 'Kind.Term.typ':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $12799=self.path;var self = Kind$Term$equal$hole$($12799,_a$1);switch(self._){case 'Kind.Check.result':var $12801=self.value;var $12802=self.errors;var self = $12801;switch(self._){case 'Maybe.none':var $12804 = Kind$Check$result$(Maybe$none,$12802);var $12803 = $12804;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $12806=self.value;var $12807=self.errors;var $12808 = Kind$Check$result$($12806,List$concat$($12802,$12807));var $12805 = $12808;break;};var $12803 = $12805;break;};var $12800 = $12803;break;};var $12798 = $12800;break;case 'Kind.Term.ori':var $12809=self.expr;var $12810 = Kind$Term$equal$extra_holes$filler$(_a$1,$12809);var $12798 = $12810;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12811 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12798 = $12811;break;};var $12730 = $12798;break;case 'Kind.Term.all':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $12813=self.path;var self = Kind$Term$equal$hole$($12813,_a$1);switch(self._){case 'Kind.Check.result':var $12815=self.value;var $12816=self.errors;var self = $12815;switch(self._){case 'Maybe.none':var $12818 = Kind$Check$result$(Maybe$none,$12816);var $12817 = $12818;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $12820=self.value;var $12821=self.errors;var $12822 = Kind$Check$result$($12820,List$concat$($12816,$12821));var $12819 = $12822;break;};var $12817 = $12819;break;};var $12814 = $12817;break;};var $12812 = $12814;break;case 'Kind.Term.ori':var $12823=self.expr;var $12824 = Kind$Term$equal$extra_holes$filler$(_a$1,$12823);var $12812 = $12824;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12825 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12812 = $12825;break;};var $12730 = $12812;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.num':case 'Kind.Term.set':case 'Kind.Term.ope':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $12827=self.path;var self = Kind$Term$equal$hole$($12827,_a$1);switch(self._){case 'Kind.Check.result':var $12829=self.value;var $12830=self.errors;var self = $12829;switch(self._){case 'Maybe.none':var $12832 = Kind$Check$result$(Maybe$none,$12830);var $12831 = $12832;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $12834=self.value;var $12835=self.errors;var $12836 = Kind$Check$result$($12834,List$concat$($12830,$12835));var $12833 = $12836;break;};var $12831 = $12833;break;};var $12828 = $12831;break;};var $12826 = $12828;break;case 'Kind.Term.ori':var $12837=self.expr;var $12838 = Kind$Term$equal$extra_holes$filler$(_a$1,$12837);var $12826 = $12838;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12839 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12826 = $12839;break;};var $12730 = $12826;break;case 'Kind.Term.cse':var self = _b$2;switch(self._){case 'Kind.Term.hol':var $12841=self.path;var self = Kind$Term$equal$hole$($12841,_a$1);switch(self._){case 'Kind.Check.result':var $12843=self.value;var $12844=self.errors;var self = $12843;switch(self._){case 'Maybe.none':var $12846 = Kind$Check$result$(Maybe$none,$12844);var $12845 = $12846;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $12848=self.value;var $12849=self.errors;var $12850 = Kind$Check$result$($12848,List$concat$($12844,$12849));var $12847 = $12850;break;};var $12845 = $12847;break;};var $12842 = $12845;break;};var $12840 = $12842;break;case 'Kind.Term.ori':var $12851=self.expr;var $12852 = Kind$Term$equal$extra_holes$filler$(_a$1,$12851);var $12840 = $12852;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $12853 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12840 = $12853;break;};var $12730 = $12840;break;};return $12730;};
  const Kind$Term$equal$extra_holes$filler = x0=>x1=>Kind$Term$equal$extra_holes$filler$(x0,x1);
  function Kind$Term$equal$extra_holes$(_a$1,_b$2){var self = Kind$Term$equal$extra_holes$funari$(_a$1,0n);switch(self._){case 'Maybe.some':var $12855=self.value;var self = Kind$Term$equal$extra_holes$funari$(_b$2,0n);switch(self._){case 'Maybe.some':var $12857=self.value;var self = $12855;switch(self._){case 'Pair.new':var $12859=self.fst;var $12860=self.snd;var self = $12857;switch(self._){case 'Pair.new':var $12862=self.fst;var $12863=self.snd;var _same_fun$9 = ($12859===$12862);var _same_ari$10 = ($12860===$12863);var self = (_same_fun$9&&_same_ari$10);if (self) {var $12865 = Kind$Term$equal$extra_holes$filler$(_a$1,_b$2);var $12864 = $12865;} else {var $12866 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12864 = $12866;};var $12861 = $12864;break;};var $12858 = $12861;break;};var $12856 = $12858;break;case 'Maybe.none':var $12867 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12856 = $12867;break;};var $12854 = $12856;break;case 'Maybe.none':var $12868 = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);var $12854 = $12868;break;};return $12854;};
  const Kind$Term$equal$extra_holes = x0=>x1=>Kind$Term$equal$extra_holes$(x0,x1);
  function BitsSet$set$(_bits$1,_set$2){var $12869 = (bitsmap_set(_bits$1,Unit$new,_set$2,'set'));return $12869;};
  const BitsSet$set = x0=>x1=>BitsSet$set$(x0,x1);
  function BitsSet$mut$set$(_bits$1,_set$2){var $12870 = BitsSet$set$(_bits$1,_set$2);return $12870;};
  const BitsSet$mut$set = x0=>x1=>BitsSet$mut$set$(x0,x1);
  function Bool$eql$(_a$1,_b$2){var self = _a$1;if (self) {var $12872 = _b$2;var $12871 = $12872;} else {var $12873 = (!_b$2);var $12871 = $12873;};return $12871;};
  const Bool$eql = x0=>x1=>Bool$eql$(x0,x1);
  function Kind$Term$equal$go$(_a$1,_b$2,_defs$3,_lv$4,_seen$5,_reduced$6){var _ah$7 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1,Kind$Map$new),_lv$4,Bool$false);var _bh$8 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2,Kind$Map$new),_lv$4,Bool$true);var self = (_bh$8===_ah$7);if (self) {var $12875 = Kind$Check$result$(Maybe$some$(Bool$true),List$nil);var $12874 = $12875;} else {var _a_s$9 = Kind$Term$serialize$(_a$1,_lv$4,Bool$false);var _b_s$10 = Kind$Term$serialize$(_b$2,_lv$4,Bool$true);var _a1$11 = Maybe$default$((bitsmap_get(_a_s$9,_reduced$6)),Kind$Term$reduce$(_a$1,_defs$3));var _b1$12 = Maybe$default$((bitsmap_get(_b_s$10,_reduced$6)),Kind$Term$reduce$(_b$2,_defs$3));var _ah$13 = Kind$Term$serialize$(_a1$11,_lv$4,Bool$false);var _bh$14 = Kind$Term$serialize$(_b1$12,_lv$4,Bool$true);var self = (_bh$14===_ah$13);if (self) {var $12877 = Kind$Check$result$(Maybe$some$(Bool$true),List$nil);var $12876 = $12877;} else {var _id$15 = (_bh$14+_ah$13);var self = BitsSet$mut$has$(_id$15,_seen$5);if (self) {var self = Kind$Term$equal$extra_holes$(_a$1,_b$2);switch(self._){case 'Kind.Check.result':var $12880=self.value;var $12881=self.errors;var self = $12880;switch(self._){case 'Maybe.none':var $12883 = Kind$Check$result$(Maybe$none,$12881);var $12882 = $12883;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Bool$true),List$nil);switch(self._){case 'Kind.Check.result':var $12885=self.value;var $12886=self.errors;var $12887 = Kind$Check$result$($12885,List$concat$($12881,$12886));var $12884 = $12887;break;};var $12882 = $12884;break;};var $12879 = $12882;break;};var $12878 = $12879;} else {var self = _a1$11;switch(self._){case 'Kind.Term.all':var $12889=self.eras;var $12890=self.self;var $12891=self.name;var $12892=self.xtyp;var $12893=self.body;var self = _b1$12;switch(self._){case 'Kind.Term.all':var $12895=self.eras;var $12896=self.self;var $12897=self.name;var $12898=self.xtyp;var $12899=self.body;var _seen$26 = BitsSet$mut$set$(_id$15,_seen$5);var _a1_body$27 = $12893(Kind$Term$var$($12890,_lv$4))(Kind$Term$var$($12891,Nat$succ$(_lv$4)));var _b1_body$28 = $12899(Kind$Term$var$($12896,_lv$4))(Kind$Term$var$($12897,Nat$succ$(_lv$4)));var _eq_self$29 = ($12890===$12896);var _eq_eras$30 = Bool$eql$($12889,$12895);var self = (_eq_self$29&&_eq_eras$30);if (self) {var self = Kind$Term$equal$go$($12892,$12898,_defs$3,_lv$4,_seen$26,_reduced$6);switch(self._){case 'Kind.Check.result':var $12902=self.value;var $12903=self.errors;var self = $12902;switch(self._){case 'Maybe.some':var $12905=self.value;var self = Kind$Term$equal$go$(_a1_body$27,_b1_body$28,_defs$3,Nat$succ$(Nat$succ$(_lv$4)),_seen$26,_reduced$6);switch(self._){case 'Kind.Check.result':var $12907=self.value;var $12908=self.errors;var self = $12907;switch(self._){case 'Maybe.some':var $12910=self.value;var self = Kind$Check$result$(Maybe$some$(($12905&&$12910)),List$nil);switch(self._){case 'Kind.Check.result':var $12912=self.value;var $12913=self.errors;var $12914 = Kind$Check$result$($12912,List$concat$($12908,$12913));var $12911 = $12914;break;};var $12909 = $12911;break;case 'Maybe.none':var $12915 = Kind$Check$result$(Maybe$none,$12908);var $12909 = $12915;break;};var self = $12909;break;};switch(self._){case 'Kind.Check.result':var $12916=self.value;var $12917=self.errors;var $12918 = Kind$Check$result$($12916,List$concat$($12903,$12917));var $12906 = $12918;break;};var $12904 = $12906;break;case 'Maybe.none':var $12919 = Kind$Check$result$(Maybe$none,$12903);var $12904 = $12919;break;};var $12901 = $12904;break;};var $12900 = $12901;} else {var $12920 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $12900 = $12920;};var $12894 = $12900;break;case 'Kind.Term.hol':var $12921=self.path;var $12922 = Kind$Term$equal$hole$($12921,_a$1);var $12894 = $12922;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12923 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $12894 = $12923;break;};var $12888 = $12894;break;case 'Kind.Term.lam':var $12924=self.name;var $12925=self.body;var self = _b1$12;switch(self._){case 'Kind.Term.lam':var $12927=self.name;var $12928=self.body;var _seen$20 = BitsSet$mut$set$(_id$15,_seen$5);var _a1_body$21 = $12925(Kind$Term$var$($12924,_lv$4));var _b1_body$22 = $12928(Kind$Term$var$($12927,_lv$4));var self = Kind$Term$equal$go$(_a1_body$21,_b1_body$22,_defs$3,Nat$succ$(_lv$4),_seen$20,_reduced$6);switch(self._){case 'Kind.Check.result':var $12930=self.value;var $12931=self.errors;var self = $12930;switch(self._){case 'Maybe.some':var $12933=self.value;var self = Kind$Check$result$(Maybe$some$($12933),List$nil);switch(self._){case 'Kind.Check.result':var $12935=self.value;var $12936=self.errors;var $12937 = Kind$Check$result$($12935,List$concat$($12931,$12936));var $12934 = $12937;break;};var $12932 = $12934;break;case 'Maybe.none':var $12938 = Kind$Check$result$(Maybe$none,$12931);var $12932 = $12938;break;};var $12929 = $12932;break;};var $12926 = $12929;break;case 'Kind.Term.hol':var $12939=self.path;var $12940 = Kind$Term$equal$hole$($12939,_a$1);var $12926 = $12940;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12941 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $12926 = $12941;break;};var $12888 = $12926;break;case 'Kind.Term.app':var $12942=self.func;var $12943=self.argm;var self = _b1$12;switch(self._){case 'Kind.Term.app':var $12945=self.func;var $12946=self.argm;var _seen$20 = BitsSet$mut$set$(_id$15,_seen$5);var self = Kind$Term$equal$go$($12942,$12945,_defs$3,_lv$4,_seen$20,_reduced$6);switch(self._){case 'Kind.Check.result':var $12948=self.value;var $12949=self.errors;var self = $12948;switch(self._){case 'Maybe.some':var $12951=self.value;var self = Kind$Term$equal$go$($12943,$12946,_defs$3,_lv$4,_seen$20,_reduced$6);switch(self._){case 'Kind.Check.result':var $12953=self.value;var $12954=self.errors;var self = $12953;switch(self._){case 'Maybe.some':var $12956=self.value;var self = Kind$Check$result$(Maybe$some$(($12951&&$12956)),List$nil);switch(self._){case 'Kind.Check.result':var $12958=self.value;var $12959=self.errors;var $12960 = Kind$Check$result$($12958,List$concat$($12954,$12959));var $12957 = $12960;break;};var $12955 = $12957;break;case 'Maybe.none':var $12961 = Kind$Check$result$(Maybe$none,$12954);var $12955 = $12961;break;};var self = $12955;break;};switch(self._){case 'Kind.Check.result':var $12962=self.value;var $12963=self.errors;var $12964 = Kind$Check$result$($12962,List$concat$($12949,$12963));var $12952 = $12964;break;};var $12950 = $12952;break;case 'Maybe.none':var $12965 = Kind$Check$result$(Maybe$none,$12949);var $12950 = $12965;break;};var $12947 = $12950;break;};var $12944 = $12947;break;case 'Kind.Term.hol':var $12966=self.path;var $12967 = Kind$Term$equal$hole$($12966,_a$1);var $12944 = $12967;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12968 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $12944 = $12968;break;};var $12888 = $12944;break;case 'Kind.Term.let':var $12969=self.name;var $12970=self.expr;var $12971=self.body;var self = _b1$12;switch(self._){case 'Kind.Term.let':var $12973=self.name;var $12974=self.expr;var $12975=self.body;var _seen$22 = BitsSet$mut$set$(_id$15,_seen$5);var _a1_body$23 = $12971(Kind$Term$var$($12969,_lv$4));var _b1_body$24 = $12975(Kind$Term$var$($12973,_lv$4));var self = Kind$Term$equal$go$($12970,$12974,_defs$3,_lv$4,_seen$22,_reduced$6);switch(self._){case 'Kind.Check.result':var $12977=self.value;var $12978=self.errors;var self = $12977;switch(self._){case 'Maybe.some':var $12980=self.value;var self = Kind$Term$equal$go$(_a1_body$23,_b1_body$24,_defs$3,Nat$succ$(_lv$4),_seen$22,_reduced$6);switch(self._){case 'Kind.Check.result':var $12982=self.value;var $12983=self.errors;var self = $12982;switch(self._){case 'Maybe.some':var $12985=self.value;var self = Kind$Check$result$(Maybe$some$(($12980&&$12985)),List$nil);switch(self._){case 'Kind.Check.result':var $12987=self.value;var $12988=self.errors;var $12989 = Kind$Check$result$($12987,List$concat$($12983,$12988));var $12986 = $12989;break;};var $12984 = $12986;break;case 'Maybe.none':var $12990 = Kind$Check$result$(Maybe$none,$12983);var $12984 = $12990;break;};var self = $12984;break;};switch(self._){case 'Kind.Check.result':var $12991=self.value;var $12992=self.errors;var $12993 = Kind$Check$result$($12991,List$concat$($12978,$12992));var $12981 = $12993;break;};var $12979 = $12981;break;case 'Maybe.none':var $12994 = Kind$Check$result$(Maybe$none,$12978);var $12979 = $12994;break;};var $12976 = $12979;break;};var $12972 = $12976;break;case 'Kind.Term.hol':var $12995=self.path;var $12996 = Kind$Term$equal$hole$($12995,_a$1);var $12972 = $12996;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $12997 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $12972 = $12997;break;};var $12888 = $12972;break;case 'Kind.Term.hol':var $12998=self.path;var $12999 = Kind$Term$equal$hole$($12998,_b$2);var $12888 = $12999;break;case 'Kind.Term.var':case 'Kind.Term.get':case 'Kind.Term.ori':var self = _b1$12;switch(self._){case 'Kind.Term.hol':var $13001=self.path;var $13002 = Kind$Term$equal$hole$($13001,_a$1);var $13000 = $13002;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $13003 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $13000 = $13003;break;};var $12888 = $13000;break;case 'Kind.Term.ref':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.new':var self = _b1$12;switch(self._){case 'Kind.Term.hol':var $13005=self.path;var $13006 = Kind$Term$equal$hole$($13005,_a$1);var $13004 = $13006;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $13007 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $13004 = $13007;break;};var $12888 = $13004;break;case 'Kind.Term.typ':var self = _b1$12;switch(self._){case 'Kind.Term.hol':var $13009=self.path;var $13010 = Kind$Term$equal$hole$($13009,_a$1);var $13008 = $13010;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $13011 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $13008 = $13011;break;};var $12888 = $13008;break;case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.num':case 'Kind.Term.set':case 'Kind.Term.ope':var self = _b1$12;switch(self._){case 'Kind.Term.hol':var $13013=self.path;var $13014 = Kind$Term$equal$hole$($13013,_a$1);var $13012 = $13014;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $13015 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $13012 = $13015;break;};var $12888 = $13012;break;case 'Kind.Term.cse':var self = _b1$12;switch(self._){case 'Kind.Term.hol':var $13017=self.path;var $13018 = Kind$Term$equal$hole$($13017,_a$1);var $13016 = $13018;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $13019 = Kind$Check$result$(Maybe$some$(Bool$false),List$nil);var $13016 = $13019;break;};var $12888 = $13016;break;};var $12878 = $12888;};var $12876 = $12878;};var $12874 = $12876;};return $12874;};
  const Kind$Term$equal$go = x0=>x1=>x2=>x3=>x4=>x5=>Kind$Term$equal$go$(x0,x1,x2,x3,x4,x5);
  const BitsSet$new = BitsMap$new;
  function BitsSet$mut$new$(_a$1){var $13020 = BitsSet$new;return $13020;};
  const BitsSet$mut$new = x0=>BitsSet$mut$new$(x0);
  function Kind$Term$check$(_term$1,_type$2,_defs$3,_ctx$4,_path$5,_orig$6){var self = _term$1;switch(self._){case 'Kind.Term.var':var $13022=self.name;var $13023=self.indx;var self = List$at_last$($13023,_ctx$4);switch(self._){case 'Maybe.some':var $13025=self.value;var $13026 = Kind$Check$result$(Maybe$some$((()=>{var self = $13025;switch(self._){case 'Pair.new':var $13027=self.snd;var $13028 = $13027;return $13028;};})()),List$nil);var $13024 = $13026;break;case 'Maybe.none':var $13029 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$undefined_reference$(_orig$6,$13022),List$nil));var $13024 = $13029;break;};var self = $13024;break;case 'Kind.Term.ref':var $13030=self.name;var self = Kind$Map$get$($13030,_defs$3);switch(self._){case 'Maybe.some':var $13032=self.value;var self = $13032;switch(self._){case 'Kind.Def.new':var $13034=self.name;var $13035=self.term;var $13036=self.type;var $13037=self.stat;var _ref_name$18 = $13034;var _ref_type$19 = $13036;var _ref_term$20 = $13035;var _ref_stat$21 = $13037;var self = _ref_stat$21;switch(self._){case 'Kind.Status.init':var $13039 = Kind$Check$result$(Maybe$some$(_ref_type$19),List$cons$(Kind$Error$waiting$(_ref_name$18),List$nil));var $13038 = $13039;break;case 'Kind.Status.wait':case 'Kind.Status.done':var $13040 = Kind$Check$result$(Maybe$some$(_ref_type$19),List$nil);var $13038 = $13040;break;case 'Kind.Status.fail':var $13041 = Kind$Check$result$(Maybe$some$(_ref_type$19),List$cons$(Kind$Error$indirect$(_ref_name$18),List$nil));var $13038 = $13041;break;};var $13033 = $13038;break;};var $13031 = $13033;break;case 'Maybe.none':var $13042 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$undefined_reference$(_orig$6,$13030),List$nil));var $13031 = $13042;break;};var self = $13031;break;case 'Kind.Term.all':var $13043=self.self;var $13044=self.name;var $13045=self.xtyp;var $13046=self.body;var _ctx_size$12 = (list_length(_ctx$4));var _self_var$13 = Kind$Term$var$($13043,_ctx_size$12);var _body_var$14 = Kind$Term$var$($13044,Nat$succ$(_ctx_size$12));var _body_ctx$15 = List$cons$(Pair$new$($13044,$13045),List$cons$(Pair$new$($13043,_term$1),_ctx$4));var self = Kind$Term$check$($13045,Maybe$some$(Kind$Term$typ),_defs$3,_ctx$4,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13048=self.value;var $13049=self.errors;var self = $13048;switch(self._){case 'Maybe.none':var $13051 = Kind$Check$result$(Maybe$none,$13049);var $13050 = $13051;break;case 'Maybe.some':var self = Kind$Term$check$($13046(_self_var$13)(_body_var$14),Maybe$some$(Kind$Term$typ),_defs$3,_body_ctx$15,Kind$Path$Maybe$Builder$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13053=self.value;var $13054=self.errors;var self = $13053;switch(self._){case 'Maybe.none':var $13056 = Kind$Check$result$(Maybe$none,$13054);var $13055 = $13056;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ),List$nil);switch(self._){case 'Kind.Check.result':var $13058=self.value;var $13059=self.errors;var $13060 = Kind$Check$result$($13058,List$concat$($13054,$13059));var $13057 = $13060;break;};var $13055 = $13057;break;};var self = $13055;break;};switch(self._){case 'Kind.Check.result':var $13061=self.value;var $13062=self.errors;var $13063 = Kind$Check$result$($13061,List$concat$($13049,$13062));var $13052 = $13063;break;};var $13050 = $13052;break;};var $13047 = $13050;break;};var self = $13047;break;case 'Kind.Term.lam':var $13064=self.name;var $13065=self.body;var self = _type$2;switch(self._){case 'Maybe.some':var $13067=self.value;var _typv$10 = Kind$Term$reduce$($13067,_defs$3);var self = _typv$10;switch(self._){case 'Kind.Term.all':var $13069=self.xtyp;var $13070=self.body;var _ctx_size$16 = (list_length(_ctx$4));var _self_var$17 = _term$1;var _body_var$18 = Kind$Term$var$($13064,_ctx_size$16);var _body_typ$19 = $13070(_self_var$17)(_body_var$18);var _body_ctx$20 = List$cons$(Pair$new$($13064,$13069),_ctx$4);var self = Kind$Term$check$($13065(_body_var$18),Maybe$some$(_body_typ$19),_defs$3,_body_ctx$20,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13072=self.value;var $13073=self.errors;var self = $13072;switch(self._){case 'Maybe.none':var $13075 = Kind$Check$result$(Maybe$none,$13073);var $13074 = $13075;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$($13067),List$nil);switch(self._){case 'Kind.Check.result':var $13077=self.value;var $13078=self.errors;var $13079 = Kind$Check$result$($13077,List$concat$($13073,$13078));var $13076 = $13079;break;};var $13074 = $13076;break;};var $13071 = $13074;break;};var $13068 = $13071;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.get':case 'Kind.Term.ori':var _expected$13 = Either$left$("function");var _detected$14 = Either$right$($13067);var $13080 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$13,_detected$14,_ctx$4),List$nil));var $13068 = $13080;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.new':var _expected$12 = Either$left$("function");var _detected$13 = Either$right$($13067);var $13081 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$12,_detected$13,_ctx$4),List$nil));var $13068 = $13081;break;case 'Kind.Term.typ':var _expected$11 = Either$left$("function");var _detected$12 = Either$right$($13067);var $13082 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$11,_detected$12,_ctx$4),List$nil));var $13068 = $13082;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.num':case 'Kind.Term.set':case 'Kind.Term.ope':var _expected$14 = Either$left$("function");var _detected$15 = Either$right$($13067);var $13083 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$14,_detected$15,_ctx$4),List$nil));var $13068 = $13083;break;case 'Kind.Term.cse':var _expected$17 = Either$left$("function");var _detected$18 = Either$right$($13067);var $13084 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,_expected$17,_detected$18,_ctx$4),List$nil));var $13068 = $13084;break;};var $13066 = $13068;break;case 'Maybe.none':var _lam_type$9 = Kind$Term$hol$(Bits$e);var _lam_term$10 = Kind$Term$ann$(Bool$false,_term$1,_lam_type$9);var $13085 = Kind$Term$check$patch$(_lam_term$10,_type$2,_path$5);var $13066 = $13085;break;};var self = $13066;break;case 'Kind.Term.app':var $13086=self.func;var $13087=self.argm;var self = Kind$Term$check$($13086,Maybe$none,_defs$3,_ctx$4,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13089=self.value;var $13090=self.errors;var self = $13089;switch(self._){case 'Maybe.some':var $13092=self.value;var _func_typ$12 = Kind$Term$reduce$($13092,_defs$3);var self = _func_typ$12;switch(self._){case 'Kind.Term.all':var $13094=self.xtyp;var $13095=self.body;var self = Kind$Term$check$($13087,Maybe$some$($13094),_defs$3,_ctx$4,Kind$Path$Maybe$Builder$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13097=self.value;var $13098=self.errors;var self = $13097;switch(self._){case 'Maybe.none':var $13100 = Kind$Check$result$(Maybe$none,$13098);var $13099 = $13100;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$($13095($13086)($13087)),List$nil);switch(self._){case 'Kind.Check.result':var $13102=self.value;var $13103=self.errors;var $13104 = Kind$Check$result$($13102,List$concat$($13098,$13103));var $13101 = $13104;break;};var $13099 = $13101;break;};var $13096 = $13099;break;};var self = $13096;break;case 'Kind.Term.var':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.get':case 'Kind.Term.ori':var _expected$15 = Either$left$("function");var _detected$16 = Either$right$(_func_typ$12);var self = $13086;switch(self._){case 'Kind.Term.ori':var $13106=self.orig;var $13107 = Maybe$some$($13106);var _orig$17 = $13107;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $13108 = _orig$6;var _orig$17 = $13108;break;};var $13105 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$17,_expected$15,_detected$16,_ctx$4),List$nil));var self = $13105;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.new':var _expected$14 = Either$left$("function");var _detected$15 = Either$right$(_func_typ$12);var self = $13086;switch(self._){case 'Kind.Term.ori':var $13110=self.orig;var $13111 = Maybe$some$($13110);var _orig$16 = $13111;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $13112 = _orig$6;var _orig$16 = $13112;break;};var $13109 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$16,_expected$14,_detected$15,_ctx$4),List$nil));var self = $13109;break;case 'Kind.Term.typ':var _expected$13 = Either$left$("function");var _detected$14 = Either$right$(_func_typ$12);var self = $13086;switch(self._){case 'Kind.Term.ori':var $13114=self.orig;var $13115 = Maybe$some$($13114);var _orig$15 = $13115;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $13116 = _orig$6;var _orig$15 = $13116;break;};var $13113 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$15,_expected$13,_detected$14,_ctx$4),List$nil));var self = $13113;break;case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.num':case 'Kind.Term.set':case 'Kind.Term.ope':var _expected$16 = Either$left$("function");var _detected$17 = Either$right$(_func_typ$12);var self = $13086;switch(self._){case 'Kind.Term.ori':var $13118=self.orig;var $13119 = Maybe$some$($13118);var _orig$18 = $13119;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $13120 = _orig$6;var _orig$18 = $13120;break;};var $13117 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$18,_expected$16,_detected$17,_ctx$4),List$nil));var self = $13117;break;case 'Kind.Term.cse':var _expected$19 = Either$left$("function");var _detected$20 = Either$right$(_func_typ$12);var self = $13086;switch(self._){case 'Kind.Term.ori':var $13122=self.orig;var $13123 = Maybe$some$($13122);var _orig$21 = $13123;break;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $13124 = _orig$6;var _orig$21 = $13124;break;};var $13121 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$21,_expected$19,_detected$20,_ctx$4),List$nil));var self = $13121;break;};switch(self._){case 'Kind.Check.result':var $13125=self.value;var $13126=self.errors;var $13127 = Kind$Check$result$($13125,List$concat$($13090,$13126));var $13093 = $13127;break;};var $13091 = $13093;break;case 'Maybe.none':var $13128 = Kind$Check$result$(Maybe$none,$13090);var $13091 = $13128;break;};var $13088 = $13091;break;};var self = $13088;break;case 'Kind.Term.let':var $13129=self.name;var $13130=self.expr;var $13131=self.body;var _ctx_size$10 = (list_length(_ctx$4));var self = Kind$Term$check$($13130,Maybe$none,_defs$3,_ctx$4,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13133=self.value;var $13134=self.errors;var self = $13133;switch(self._){case 'Maybe.some':var $13136=self.value;var _body_val$14 = $13131(Kind$Term$var$($13129,_ctx_size$10));var _body_ctx$15 = List$cons$(Pair$new$($13129,$13136),_ctx$4);var self = Kind$Term$check$(_body_val$14,_type$2,_defs$3,_body_ctx$15,Kind$Path$Maybe$Builder$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13138=self.value;var $13139=self.errors;var self = $13138;switch(self._){case 'Maybe.some':var $13141=self.value;var self = Kind$Check$result$(Maybe$some$($13141),List$nil);switch(self._){case 'Kind.Check.result':var $13143=self.value;var $13144=self.errors;var $13145 = Kind$Check$result$($13143,List$concat$($13139,$13144));var $13142 = $13145;break;};var $13140 = $13142;break;case 'Maybe.none':var $13146 = Kind$Check$result$(Maybe$none,$13139);var $13140 = $13146;break;};var self = $13140;break;};switch(self._){case 'Kind.Check.result':var $13147=self.value;var $13148=self.errors;var $13149 = Kind$Check$result$($13147,List$concat$($13134,$13148));var $13137 = $13149;break;};var $13135 = $13137;break;case 'Maybe.none':var $13150 = Kind$Check$result$(Maybe$none,$13134);var $13135 = $13150;break;};var $13132 = $13135;break;};var self = $13132;break;case 'Kind.Term.def':var $13151=self.name;var $13152=self.expr;var $13153=self.body;var _ctx_size$10 = (list_length(_ctx$4));var self = Kind$Term$check$($13152,Maybe$none,_defs$3,_ctx$4,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13155=self.value;var $13156=self.errors;var self = $13155;switch(self._){case 'Maybe.some':var $13158=self.value;var _body_val$14 = $13153($13152);var _body_ctx$15 = List$cons$(Pair$new$($13151,$13158),_ctx$4);var self = Kind$Term$check$(_body_val$14,_type$2,_defs$3,_body_ctx$15,Kind$Path$Maybe$Builder$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13160=self.value;var $13161=self.errors;var self = $13160;switch(self._){case 'Maybe.some':var $13163=self.value;var self = Kind$Check$result$(Maybe$some$($13163),List$nil);switch(self._){case 'Kind.Check.result':var $13165=self.value;var $13166=self.errors;var $13167 = Kind$Check$result$($13165,List$concat$($13161,$13166));var $13164 = $13167;break;};var $13162 = $13164;break;case 'Maybe.none':var $13168 = Kind$Check$result$(Maybe$none,$13161);var $13162 = $13168;break;};var self = $13162;break;};switch(self._){case 'Kind.Check.result':var $13169=self.value;var $13170=self.errors;var $13171 = Kind$Check$result$($13169,List$concat$($13156,$13170));var $13159 = $13171;break;};var $13157 = $13159;break;case 'Maybe.none':var $13172 = Kind$Check$result$(Maybe$none,$13156);var $13157 = $13172;break;};var $13154 = $13157;break;};var self = $13154;break;case 'Kind.Term.ann':var $13173=self.done;var $13174=self.term;var $13175=self.type;var self = $13173;if (self) {var $13177 = Kind$Check$result$(Maybe$some$($13175),List$nil);var $13176 = $13177;} else {var self = Kind$Term$check$($13174,Maybe$some$($13175),_defs$3,_ctx$4,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13179=self.value;var $13180=self.errors;var self = $13179;switch(self._){case 'Maybe.none':var $13182 = Kind$Check$result$(Maybe$none,$13180);var $13181 = $13182;break;case 'Maybe.some':var self = Kind$Term$check$($13175,Maybe$some$(Kind$Term$typ),_defs$3,_ctx$4,Kind$Path$Maybe$Builder$i$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13184=self.value;var $13185=self.errors;var self = $13184;switch(self._){case 'Maybe.none':var $13187 = Kind$Check$result$(Maybe$none,$13185);var $13186 = $13187;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$($13175),List$nil);switch(self._){case 'Kind.Check.result':var $13189=self.value;var $13190=self.errors;var $13191 = Kind$Check$result$($13189,List$concat$($13185,$13190));var $13188 = $13191;break;};var $13186 = $13188;break;};var self = $13186;break;};switch(self._){case 'Kind.Check.result':var $13192=self.value;var $13193=self.errors;var $13194 = Kind$Check$result$($13192,List$concat$($13180,$13193));var $13183 = $13194;break;};var $13181 = $13183;break;};var $13178 = $13181;break;};var $13176 = $13178;};var self = $13176;break;case 'Kind.Term.gol':var $13195=self.name;var $13196=self.dref;var $13197=self.verb;var $13198 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$show_goal$($13195,$13196,$13197,_type$2,_ctx$4),List$nil));var self = $13198;break;case 'Kind.Term.num':var $13199=self.sign;var $13200=self.numb;var $13201=self.frac;var _dsug$10 = Kind$Term$check$expand$num$($13199,$13200,$13201,_type$2,_defs$3);var $13202 = Kind$Term$check$patch$(_dsug$10,_type$2,_path$5);var self = $13202;break;case 'Kind.Term.cse':var $13203=self.expr;var $13204=self.name;var $13205=self.with;var $13206=self.cses;var $13207=self.moti;var _expr$13 = $13203;var self = Kind$Term$check$(_expr$13,Maybe$none,_defs$3,_ctx$4,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13209=self.value;var $13210=self.errors;var self = $13209;switch(self._){case 'Maybe.some':var $13212=self.value;var self = Kind$Term$check$infer_types_of_with$($13205,_defs$3,_ctx$4,_path$5,_orig$6);switch(self._){case 'Kind.Check.result':var $13214=self.value;var $13215=self.errors;var self = $13214;switch(self._){case 'Maybe.some':var $13217=self.value;var _dsug$20 = Kind$Term$check$expand$cse$($13203,$13204,$13217,$13206,$13207,$13212,_type$2,_defs$3,_ctx$4);var self = _dsug$20;switch(self._){case 'Maybe.some':var $13219=self.value;var $13220 = Kind$Term$check$patch$($13219,_type$2,_path$5);var self = $13220;break;case 'Maybe.none':var $13221 = Kind$Term$check$cant_infer$(_term$1,_type$2,_ctx$4,_orig$6);var self = $13221;break;};switch(self._){case 'Kind.Check.result':var $13222=self.value;var $13223=self.errors;var $13224 = Kind$Check$result$($13222,List$concat$($13215,$13223));var $13218 = $13224;break;};var $13216 = $13218;break;case 'Maybe.none':var $13225 = Kind$Check$result$(Maybe$none,$13215);var $13216 = $13225;break;};var self = $13216;break;};switch(self._){case 'Kind.Check.result':var $13226=self.value;var $13227=self.errors;var $13228 = Kind$Check$result$($13226,List$concat$($13210,$13227));var $13213 = $13228;break;};var $13211 = $13213;break;case 'Maybe.none':var $13229 = Kind$Check$result$(Maybe$none,$13210);var $13211 = $13229;break;};var $13208 = $13211;break;};var self = $13208;break;case 'Kind.Term.new':var $13230=self.args;var _dsug$8 = Kind$Term$check$expand$new$($13230,_type$2,_defs$3);var self = _dsug$8;switch(self._){case 'Maybe.some':var $13232=self.value;var $13233 = Kind$Term$check$patch$($13232,_type$2,_path$5);var $13231 = $13233;break;case 'Maybe.none':var $13234 = Kind$Term$check$cant_infer$(_term$1,_type$2,_ctx$4,_orig$6);var $13231 = $13234;break;};var self = $13231;break;case 'Kind.Term.get':var $13235=self.expr;var $13236=self.fkey;var _expr$9 = $13235;var self = Kind$Term$check$(_expr$9,Maybe$none,_defs$3,_ctx$4,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13238=self.value;var $13239=self.errors;var self = $13238;switch(self._){case 'Maybe.some':var $13241=self.value;var _dsug$13 = Kind$Term$check$expand$get$($13235,$13236,$13241,_defs$3);var self = _dsug$13;switch(self._){case 'Maybe.some':var $13243=self.value;var $13244 = Kind$Term$check$patch$($13243,_type$2,_path$5);var self = $13244;break;case 'Maybe.none':var $13245 = Kind$Term$check$cant_infer$(_term$1,_type$2,_ctx$4,_orig$6);var self = $13245;break;};switch(self._){case 'Kind.Check.result':var $13246=self.value;var $13247=self.errors;var $13248 = Kind$Check$result$($13246,List$concat$($13239,$13247));var $13242 = $13248;break;};var $13240 = $13242;break;case 'Maybe.none':var $13249 = Kind$Check$result$(Maybe$none,$13239);var $13240 = $13249;break;};var $13237 = $13240;break;};var self = $13237;break;case 'Kind.Term.set':var $13250=self.expr;var $13251=self.fkey;var $13252=self.fval;var _expr$10 = $13250;var self = Kind$Term$check$(_expr$10,Maybe$none,_defs$3,_ctx$4,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13254=self.value;var $13255=self.errors;var self = $13254;switch(self._){case 'Maybe.some':var $13257=self.value;var _dsug$14 = Kind$Term$check$expand$set$($13250,$13251,$13252,$13257,_defs$3);var self = _dsug$14;switch(self._){case 'Maybe.some':var $13259=self.value;var $13260 = Kind$Term$check$patch$($13259,_type$2,_path$5);var self = $13260;break;case 'Maybe.none':var $13261 = Kind$Term$check$cant_infer$(_term$1,_type$2,_ctx$4,_orig$6);var self = $13261;break;};switch(self._){case 'Kind.Check.result':var $13262=self.value;var $13263=self.errors;var $13264 = Kind$Check$result$($13262,List$concat$($13255,$13263));var $13258 = $13264;break;};var $13256 = $13258;break;case 'Maybe.none':var $13265 = Kind$Check$result$(Maybe$none,$13255);var $13256 = $13265;break;};var $13253 = $13256;break;};var self = $13253;break;case 'Kind.Term.ope':var $13266=self.name;var $13267=self.arg0;var $13268=self.arg1;var _otyp$10 = Maybe$default$(_type$2,Kind$Term$hol$(Bits$e));var _dsug$11 = Kind$Term$check$expand$ope$(Bool$true,$13266,$13267,$13268,_otyp$10,_defs$3);var self = _dsug$11;switch(self._){case 'Maybe.some':var $13270=self.value;var $13271 = Kind$Term$check$patch$($13270,_type$2,_path$5);var $13269 = $13271;break;case 'Maybe.none':var self = Kind$Term$check$($13267,Maybe$none,_defs$3,_ctx$4,Kind$Path$Maybe$Builder$o$(_path$5),_orig$6);switch(self._){case 'Kind.Check.result':var $13273=self.value;var $13274=self.errors;var self = $13273;switch(self._){case 'Maybe.some':var $13276=self.value;var _dsug$15 = Kind$Term$check$expand$ope$(Bool$false,$13266,$13267,$13268,$13276,_defs$3);var self = _dsug$15;switch(self._){case 'Maybe.some':var $13278=self.value;var $13279 = Kind$Term$check$patch$($13278,_type$2,_path$5);var self = $13279;break;case 'Maybe.none':var $13280 = Kind$Term$check$cant_infer$(_term$1,_type$2,_ctx$4,_orig$6);var self = $13280;break;};switch(self._){case 'Kind.Check.result':var $13281=self.value;var $13282=self.errors;var $13283 = Kind$Check$result$($13281,List$concat$($13274,$13282));var $13277 = $13283;break;};var $13275 = $13277;break;case 'Maybe.none':var $13284 = Kind$Check$result$(Maybe$none,$13274);var $13275 = $13284;break;};var $13272 = $13275;break;};var $13269 = $13272;break;};var self = $13269;break;case 'Kind.Term.ori':var $13285=self.orig;var $13286=self.expr;var $13287 = Kind$Term$check$($13286,_type$2,_defs$3,_ctx$4,_path$5,Maybe$some$($13285));var self = $13287;break;case 'Kind.Term.typ':var $13288 = Kind$Check$result$(Maybe$some$(Kind$Term$typ),List$nil);var self = $13288;break;case 'Kind.Term.hol':var $13289 = Kind$Check$result$(_type$2,List$nil);var self = $13289;break;case 'Kind.Term.nat':var self = _type$2;switch(self._){case 'Maybe.some':var $13291=self.value;var _tnam$9 = Kind$Term$check$get_name_of_self_type$($13291,_defs$3);var self = _tnam$9;switch(self._){case 'Maybe.some':var $13293=self.value;var self = ($13293==="Nat");if (self) {var $13295 = Kind$Term$check$direct$(Kind$Term$ref$("Nat"),_defs$3);var $13294 = $13295;} else {var _cast$11 = Kind$Term$ref$(($13293+".from_nat"));var _cast$12 = Kind$Term$app$(_cast$11,_term$1);var $13296 = Kind$Term$check$patch$(_cast$12,_type$2,_path$5);var $13294 = $13296;};var $13292 = $13294;break;case 'Maybe.none':var $13297 = Kind$Term$check$direct$(Kind$Term$ref$("Nat"),_defs$3);var $13292 = $13297;break;};var $13290 = $13292;break;case 'Maybe.none':var $13298 = Kind$Term$check$direct$(Kind$Term$ref$("Nat"),_defs$3);var $13290 = $13298;break;};var self = $13290;break;case 'Kind.Term.chr':var self = Kind$Term$check$direct$(Kind$Term$ref$("Word.from_bits"),_defs$3);switch(self._){case 'Kind.Check.result':var $13300=self.value;var $13301=self.errors;var self = $13300;switch(self._){case 'Maybe.none':var $13303 = Kind$Check$result$(Maybe$none,$13301);var $13302 = $13303;break;case 'Maybe.some':var self = Kind$Term$check$direct$(Kind$Term$ref$("U16.new"),_defs$3);switch(self._){case 'Kind.Check.result':var $13305=self.value;var $13306=self.errors;var self = $13305;switch(self._){case 'Maybe.none':var $13308 = Kind$Check$result$(Maybe$none,$13306);var $13307 = $13308;break;case 'Maybe.some':var self = Kind$Term$check$direct$(Kind$Term$ref$("Char"),_defs$3);switch(self._){case 'Kind.Check.result':var $13310=self.value;var $13311=self.errors;var $13312 = Kind$Check$result$($13310,List$concat$($13306,$13311));var $13309 = $13312;break;};var $13307 = $13309;break;};var self = $13307;break;};switch(self._){case 'Kind.Check.result':var $13313=self.value;var $13314=self.errors;var $13315 = Kind$Check$result$($13313,List$concat$($13301,$13314));var $13304 = $13315;break;};var $13302 = $13304;break;};var $13299 = $13302;break;};var self = $13299;break;case 'Kind.Term.str':var self = Kind$Term$check$direct$(Kind$Term$ref$("Word.from_bits"),_defs$3);switch(self._){case 'Kind.Check.result':var $13317=self.value;var $13318=self.errors;var self = $13317;switch(self._){case 'Maybe.none':var $13320 = Kind$Check$result$(Maybe$none,$13318);var $13319 = $13320;break;case 'Maybe.some':var self = Kind$Term$check$direct$(Kind$Term$ref$("U16.new"),_defs$3);switch(self._){case 'Kind.Check.result':var $13322=self.value;var $13323=self.errors;var self = $13322;switch(self._){case 'Maybe.none':var $13325 = Kind$Check$result$(Maybe$none,$13323);var $13324 = $13325;break;case 'Maybe.some':var self = Kind$Term$check$direct$(Kind$Term$ref$("String"),_defs$3);switch(self._){case 'Kind.Check.result':var $13327=self.value;var $13328=self.errors;var $13329 = Kind$Check$result$($13327,List$concat$($13323,$13328));var $13326 = $13329;break;};var $13324 = $13326;break;};var self = $13324;break;};switch(self._){case 'Kind.Check.result':var $13330=self.value;var $13331=self.errors;var $13332 = Kind$Check$result$($13330,List$concat$($13318,$13331));var $13321 = $13332;break;};var $13319 = $13321;break;};var $13316 = $13319;break;};var self = $13316;break;};switch(self._){case 'Kind.Check.result':var $13333=self.value;var $13334=self.errors;var self = $13333;switch(self._){case 'Maybe.some':var $13336=self.value;var self = _type$2;switch(self._){case 'Maybe.some':var $13338=self.value;var self = Kind$Term$equal$go$($13338,$13336,_defs$3,(list_length(_ctx$4)),BitsSet$mut$new$(Unit$new),BitsMap$new);switch(self._){case 'Kind.Check.result':var $13340=self.value;var $13341=self.errors;var self = $13340;switch(self._){case 'Maybe.some':var $13343=self.value;var self = $13343;if (self) {var $13345 = Kind$Check$result$(Maybe$some$($13338),List$nil);var self = $13345;} else {var $13346 = Kind$Check$result$(_type$2,List$cons$(Kind$Error$type_mismatch$(_orig$6,Either$right$($13338),Either$right$($13336),_ctx$4),List$nil));var self = $13346;};switch(self._){case 'Kind.Check.result':var $13347=self.value;var $13348=self.errors;var $13349 = Kind$Check$result$($13347,List$concat$($13341,$13348));var $13344 = $13349;break;};var $13342 = $13344;break;case 'Maybe.none':var $13350 = Kind$Check$result$(Maybe$none,$13341);var $13342 = $13350;break;};var $13339 = $13342;break;};var self = $13339;break;case 'Maybe.none':var $13351 = Kind$Check$result$(Maybe$some$($13336),List$nil);var self = $13351;break;};switch(self._){case 'Kind.Check.result':var $13352=self.value;var $13353=self.errors;var $13354 = Kind$Check$result$($13352,List$concat$($13334,$13353));var $13337 = $13354;break;};var $13335 = $13337;break;case 'Maybe.none':var $13355 = Kind$Check$result$(Maybe$none,$13334);var $13335 = $13355;break;};var $13021 = $13335;break;};return $13021;};
  const Kind$Term$check = x0=>x1=>x2=>x3=>x4=>x5=>Kind$Term$check$(x0,x1,x2,x3,x4,x5);
  function Kind$Path$patch_at$list$(_path$2,_list$3,_cont$4){var self = _path$2;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13357=self.slice(0,-1);var self = _list$3;switch(self._){case 'List.cons':var $13359=self.head;var $13360=self.tail;var $13361 = List$cons$(_cont$4($13357)($13359),$13360);var $13358 = $13361;break;case 'List.nil':var $13362 = List$nil;var $13358 = $13362;break;};var $13356 = $13358;break;case 'i':var $13363=self.slice(0,-1);var self = _list$3;switch(self._){case 'List.cons':var $13365=self.head;var $13366=self.tail;var $13367 = List$cons$($13365,Kind$Path$patch_at$list$($13363,$13366,_cont$4));var $13364 = $13367;break;case 'List.nil':var $13368 = List$nil;var $13364 = $13368;break;};var $13356 = $13364;break;case 'e':var $13369 = List$nil;var $13356 = $13369;break;};return $13356;};
  const Kind$Path$patch_at$list = x0=>x1=>x2=>Kind$Path$patch_at$list$(x0,x1,x2);
  function Kind$Term$patch_at$(_path$1,_term$2,_fn$3){var self = _term$2;switch(self._){case 'Kind.Term.all':var $13371=self.eras;var $13372=self.self;var $13373=self.name;var $13374=self.xtyp;var $13375=self.body;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13377=self.slice(0,-1);var $13378 = Kind$Term$all$($13371,$13372,$13373,Kind$Term$patch_at$($13377,$13374,_fn$3),$13375);var $13376 = $13378;break;case 'i':var $13379=self.slice(0,-1);var $13380 = Kind$Term$all$($13371,$13372,$13373,$13374,(_s$10=>_x$11=>{var $13381 = Kind$Term$patch_at$($13379,$13375(_s$10)(_x$11),_fn$3);return $13381;}));var $13376 = $13380;break;case 'e':var $13382 = _fn$3(_term$2);var $13376 = $13382;break;};var $13370 = $13376;break;case 'Kind.Term.lam':var $13383=self.name;var $13384=self.body;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $13386 = _fn$3(_term$2);var $13385 = $13386;break;case 'o':case 'i':var $13387 = Kind$Term$lam$($13383,(_x$7=>{var $13388 = Kind$Term$patch_at$(Bits$tail$(_path$1),$13384(_x$7),_fn$3);return $13388;}));var $13385 = $13387;break;};var $13370 = $13385;break;case 'Kind.Term.app':var $13389=self.func;var $13390=self.argm;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13392=self.slice(0,-1);var $13393 = Kind$Term$app$(Kind$Term$patch_at$($13392,$13389,_fn$3),$13390);var $13391 = $13393;break;case 'i':var $13394=self.slice(0,-1);var $13395 = Kind$Term$app$($13389,Kind$Term$patch_at$($13394,$13390,_fn$3));var $13391 = $13395;break;case 'e':var $13396 = _fn$3(_term$2);var $13391 = $13396;break;};var $13370 = $13391;break;case 'Kind.Term.let':var $13397=self.name;var $13398=self.expr;var $13399=self.body;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13401=self.slice(0,-1);var $13402 = Kind$Term$let$($13397,Kind$Term$patch_at$($13401,$13398,_fn$3),$13399);var $13400 = $13402;break;case 'i':var $13403=self.slice(0,-1);var $13404 = Kind$Term$let$($13397,$13398,(_x$8=>{var $13405 = Kind$Term$patch_at$($13403,$13399(_x$8),_fn$3);return $13405;}));var $13400 = $13404;break;case 'e':var $13406 = _fn$3(_term$2);var $13400 = $13406;break;};var $13370 = $13400;break;case 'Kind.Term.def':var $13407=self.name;var $13408=self.expr;var $13409=self.body;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13411=self.slice(0,-1);var $13412 = Kind$Term$def$($13407,Kind$Term$patch_at$($13411,$13408,_fn$3),$13409);var $13410 = $13412;break;case 'i':var $13413=self.slice(0,-1);var $13414 = Kind$Term$def$($13407,$13408,(_x$8=>{var $13415 = Kind$Term$patch_at$($13413,$13409(_x$8),_fn$3);return $13415;}));var $13410 = $13414;break;case 'e':var $13416 = _fn$3(_term$2);var $13410 = $13416;break;};var $13370 = $13410;break;case 'Kind.Term.ann':var $13417=self.done;var $13418=self.term;var $13419=self.type;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13421=self.slice(0,-1);var $13422 = Kind$Term$ann$($13417,Kind$Term$patch_at$($13421,$13418,_fn$3),$13419);var $13420 = $13422;break;case 'i':var $13423=self.slice(0,-1);var $13424 = Kind$Term$ann$($13417,$13418,Kind$Term$patch_at$($13423,$13419,_fn$3));var $13420 = $13424;break;case 'e':var $13425 = _fn$3(_term$2);var $13420 = $13425;break;};var $13370 = $13420;break;case 'Kind.Term.cse':var $13426=self.path;var $13427=self.expr;var $13428=self.name;var $13429=self.with;var $13430=self.cses;var $13431=self.moti;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13433=self.slice(0,-1);var $13434 = Kind$Term$cse$($13426,Kind$Term$patch_at$($13433,$13427,_fn$3),$13428,$13429,$13430,$13431);var $13432 = $13434;break;case 'e':var $13435 = _fn$3(_term$2);var $13432 = $13435;break;case 'i':var $13436 = _term$2;var $13432 = $13436;break;};var $13370 = $13432;break;case 'Kind.Term.new':var $13437=self.args;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $13439 = _fn$3(_term$2);var $13438 = $13439;break;case 'o':case 'i':var $13440 = Kind$Term$new$(Kind$Path$patch_at$list$(_path$1,$13437,(_arg_path$6=>_arg$7=>{var $13441 = Kind$Term$patch_at$(_arg_path$6,_arg$7,_fn$3);return $13441;})));var $13438 = $13440;break;};var $13370 = $13438;break;case 'Kind.Term.get':var $13442=self.expr;var $13443=self.fkey;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13445=self.slice(0,-1);var $13446 = Kind$Term$get$(Kind$Term$patch_at$($13445,$13442,_fn$3),$13443);var $13444 = $13446;break;case 'i':var $13447=self.slice(0,-1);var $13448 = Kind$Term$get$(Kind$Term$patch_at$($13447,$13442,_fn$3),$13443);var $13444 = $13448;break;case 'e':var $13449 = _fn$3(_term$2);var $13444 = $13449;break;};var $13370 = $13444;break;case 'Kind.Term.set':var $13450=self.expr;var $13451=self.fkey;var $13452=self.fval;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13454=self.slice(0,-1);var $13455 = Kind$Term$set$(Kind$Term$patch_at$($13454,$13450,_fn$3),$13451,$13452);var $13453 = $13455;break;case 'i':var $13456=self.slice(0,-1);var $13457 = Kind$Term$set$($13450,$13451,Kind$Term$patch_at$($13456,$13452,_fn$3));var $13453 = $13457;break;case 'e':var $13458 = _fn$3(_term$2);var $13453 = $13458;break;};var $13370 = $13453;break;case 'Kind.Term.ope':var $13459=self.name;var $13460=self.arg0;var $13461=self.arg1;var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13463=self.slice(0,-1);var $13464 = Kind$Term$ope$($13459,Kind$Term$patch_at$($13463,$13460,_fn$3),$13461);var $13462 = $13464;break;case 'i':var $13465=self.slice(0,-1);var $13466 = Kind$Term$ope$($13459,$13460,Kind$Term$patch_at$($13465,$13461,_fn$3));var $13462 = $13466;break;case 'e':var $13467 = _fn$3(_term$2);var $13462 = $13467;break;};var $13370 = $13462;break;case 'Kind.Term.ori':var $13468=self.orig;var $13469=self.expr;var $13470 = Kind$Term$ori$($13468,Kind$Term$patch_at$(_path$1,$13469,_fn$3));var $13370 = $13470;break;case 'Kind.Term.var':var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $13472 = _fn$3(_term$2);var $13471 = $13472;break;case 'o':case 'i':var $13473 = _term$2;var $13471 = $13473;break;};var $13370 = $13471;break;case 'Kind.Term.ref':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $13475 = _fn$3(_term$2);var $13474 = $13475;break;case 'o':case 'i':var $13476 = _term$2;var $13474 = $13476;break;};var $13370 = $13474;break;case 'Kind.Term.typ':var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $13478 = _fn$3(_term$2);var $13477 = $13478;break;case 'o':case 'i':var $13479 = _term$2;var $13477 = $13479;break;};var $13370 = $13477;break;case 'Kind.Term.gol':case 'Kind.Term.num':var self = _path$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'e':var $13481 = _fn$3(_term$2);var $13480 = $13481;break;case 'o':case 'i':var $13482 = _term$2;var $13480 = $13482;break;};var $13370 = $13480;break;};return $13370;};
  const Kind$Term$patch_at = x0=>x1=>x2=>Kind$Term$patch_at$(x0,x1,x2);
  function Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_defs$9,_errs$10,_fixd$11){var self = _errs$10;switch(self._){case 'List.cons':var $13484=self.head;var $13485=self.tail;var self = $13484;switch(self._){case 'Kind.Error.waiting':var $13487=self.name;var $13488 = IO$monad$((_m$bind$15=>_m$pure$16=>{var $13489 = _m$bind$15;return $13489;}))(Kind$Synth$one$($13487,_defs$9))((_new_defs$15=>{var self = _new_defs$15;switch(self._){case 'Maybe.some':var $13491=self.value;var $13492 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,$13491,$13485,Bool$true);var $13490 = $13492;break;case 'Maybe.none':var $13493 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_defs$9,$13485,_fixd$11);var $13490 = $13493;break;};return $13490;}));var $13486 = $13488;break;case 'Kind.Error.patch':var $13494=self.path;var $13495=self.term;var self = $13494;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13497=self.slice(0,-1);var _term$17 = Kind$Term$patch_at$($13497,_term$5,(_x$17=>{var $13499 = $13495;return $13499;}));var $13498 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$17,_type$6,_isct$7,_arit$8,_defs$9,$13485,Bool$true);var $13496 = $13498;break;case 'i':var $13500=self.slice(0,-1);var _type$17 = Kind$Term$patch_at$($13500,_type$6,(_x$17=>{var $13502 = $13495;return $13502;}));var $13501 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$17,_isct$7,_arit$8,_defs$9,$13485,Bool$true);var $13496 = $13501;break;case 'e':var $13503 = IO$monad$((_m$bind$16=>_m$pure$17=>{var $13504 = _m$pure$17;return $13504;}))(Maybe$none);var $13496 = $13503;break;};var $13486 = $13496;break;case 'Kind.Error.undefined_reference':var $13505=self.name;var $13506 = IO$monad$((_m$bind$16=>_m$pure$17=>{var $13507 = _m$bind$16;return $13507;}))(Kind$Synth$one$($13505,_defs$9))((_new_defs$16=>{var self = _new_defs$16;switch(self._){case 'Maybe.some':var $13509=self.value;var $13510 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,$13509,$13485,Bool$true);var $13508 = $13510;break;case 'Maybe.none':var $13511 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_defs$9,$13485,_fixd$11);var $13508 = $13511;break;};return $13508;}));var $13486 = $13506;break;case 'Kind.Error.type_mismatch':case 'Kind.Error.show_goal':case 'Kind.Error.indirect':case 'Kind.Error.cant_infer':var $13512 = Kind$Synth$fix$(_file$1,_code$2,_orig$3,_name$4,_term$5,_type$6,_isct$7,_arit$8,_defs$9,$13485,_fixd$11);var $13486 = $13512;break;};var $13483 = $13486;break;case 'List.nil':var self = _fixd$11;if (self) {var _type$12 = Kind$Term$bind$(List$nil,(_x$12=>{var $13515 = (_x$12+'1');return $13515;}),_type$6);var _term$13 = Kind$Term$bind$(List$nil,(_x$13=>{var $13516 = (_x$13+'0');return $13516;}),_term$5);var _defs$14 = Kind$Map$set$(_name$4,Kind$Def$new$(_file$1,_code$2,_orig$3,_name$4,_term$13,_type$12,_isct$7,_arit$8,Kind$Status$init),_defs$9);var $13514 = IO$monad$((_m$bind$15=>_m$pure$16=>{var $13517 = _m$pure$16;return $13517;}))(Maybe$some$(_defs$14));var $13513 = $13514;} else {var $13518 = IO$monad$((_m$bind$12=>_m$pure$13=>{var $13519 = _m$pure$13;return $13519;}))(Maybe$none);var $13513 = $13518;};var $13483 = $13513;break;};return $13483;};
  const Kind$Synth$fix = x0=>x1=>x2=>x3=>x4=>x5=>x6=>x7=>x8=>x9=>x10=>Kind$Synth$fix$(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10);
  function Kind$Status$fail$(_errors$1){var $13520 = ({_:'Kind.Status.fail','errors':_errors$1});return $13520;};
  const Kind$Status$fail = x0=>Kind$Status$fail$(x0);
  function Kind$Synth$one$(_name$1,_defs$2){var self = Kind$Map$get$(_name$1,_defs$2);switch(self._){case 'Maybe.some':var $13522=self.value;var self = $13522;switch(self._){case 'Kind.Def.new':var $13524=self.file;var $13525=self.code;var $13526=self.orig;var $13527=self.name;var $13528=self.term;var $13529=self.type;var $13530=self.isct;var $13531=self.arit;var $13532=self.stat;var _file$13 = $13524;var _code$14 = $13525;var _orig$15 = $13526;var _name$16 = $13527;var _term$17 = $13528;var _type$18 = $13529;var _isct$19 = $13530;var _arit$20 = $13531;var _stat$21 = $13532;var self = _stat$21;switch(self._){case 'Kind.Status.init':var _defs$22 = Kind$Map$set$(_name$16,Kind$Def$new$(_file$13,_code$14,_orig$15,_name$16,_term$17,_type$18,_isct$19,_arit$20,Kind$Status$wait),_defs$2);var self = Kind$Term$check$(_type$18,Maybe$some$(Kind$Term$typ),_defs$22,List$nil,Kind$Path$Maybe$Builder$i$(Kind$Path$Maybe$Builder$nil),Maybe$none);switch(self._){case 'Kind.Check.result':var $13535=self.value;var $13536=self.errors;var self = $13535;switch(self._){case 'Maybe.none':var $13538 = Kind$Check$result$(Maybe$none,$13536);var $13537 = $13538;break;case 'Maybe.some':var self = Kind$Term$check$(_term$17,Maybe$some$(_type$18),_defs$22,List$nil,Kind$Path$Maybe$Builder$o$(Kind$Path$Maybe$Builder$nil),Maybe$none);switch(self._){case 'Kind.Check.result':var $13540=self.value;var $13541=self.errors;var self = $13540;switch(self._){case 'Maybe.none':var $13543 = Kind$Check$result$(Maybe$none,$13541);var $13542 = $13543;break;case 'Maybe.some':var self = Kind$Check$result$(Maybe$some$(Unit$new),List$nil);switch(self._){case 'Kind.Check.result':var $13545=self.value;var $13546=self.errors;var $13547 = Kind$Check$result$($13545,List$concat$($13541,$13546));var $13544 = $13547;break;};var $13542 = $13544;break;};var self = $13542;break;};switch(self._){case 'Kind.Check.result':var $13548=self.value;var $13549=self.errors;var $13550 = Kind$Check$result$($13548,List$concat$($13536,$13549));var $13539 = $13550;break;};var $13537 = $13539;break;};var _checked$23 = $13537;break;};var self = _checked$23;switch(self._){case 'Kind.Check.result':var $13551=self.errors;var self = List$is_empty$($13551);if (self) {var _defs$26 = Kind$Map$def$(_file$13,_code$14,_orig$15,_name$16,_term$17,_type$18,_isct$19,_arit$20,Bool$true,_defs$22);var $13553 = IO$monad$((_m$bind$27=>_m$pure$28=>{var $13554 = _m$pure$28;return $13554;}))(Maybe$some$(_defs$26));var $13552 = $13553;} else {var $13555 = IO$monad$((_m$bind$26=>_m$pure$27=>{var $13556 = _m$bind$26;return $13556;}))(Kind$Synth$fix$(_file$13,_code$14,_orig$15,_name$16,_term$17,_type$18,_isct$19,_arit$20,_defs$22,$13551,Bool$false))((_fixed$26=>{var self = _fixed$26;switch(self._){case 'Maybe.some':var $13558=self.value;var $13559 = Kind$Synth$one$(_name$16,$13558);var $13557 = $13559;break;case 'Maybe.none':var _stat$27 = Kind$Status$fail$($13551);var _defs$28 = Kind$Map$set$(_name$16,Kind$Def$new$(_file$13,_code$14,_orig$15,_name$16,_term$17,_type$18,_isct$19,_arit$20,_stat$27),_defs$22);var $13560 = IO$monad$((_m$bind$29=>_m$pure$30=>{var $13561 = _m$pure$30;return $13561;}))(Maybe$some$(_defs$28));var $13557 = $13560;break;};return $13557;}));var $13552 = $13555;};var $13534 = $13552;break;};var $13533 = $13534;break;case 'Kind.Status.wait':var $13562 = IO$monad$((_m$bind$22=>_m$pure$23=>{var $13563 = _m$pure$23;return $13563;}))(Maybe$some$(_defs$2));var $13533 = $13562;break;case 'Kind.Status.done':case 'Kind.Status.fail':var $13564 = IO$monad$((_m$bind$23=>_m$pure$24=>{var $13565 = _m$pure$24;return $13565;}))(Maybe$some$(_defs$2));var $13533 = $13564;break;};var $13523 = $13533;break;};var $13521 = $13523;break;case 'Maybe.none':var $13566 = IO$monad$((_m$bind$3=>_m$pure$4=>{var $13567 = _m$bind$3;return $13567;}))(IO$get_time)((_time_a$3=>{var $13568 = IO$monad$((_m$bind$4=>_m$pure$5=>{var $13569 = _m$bind$4;return $13569;}))(Kind$Synth$load$(_name$1,_defs$2))((_loaded$4=>{var self = _loaded$4;switch(self._){case 'Maybe.some':var $13571=self.value;var $13572 = IO$monad$((_m$bind$6=>_m$pure$7=>{var $13573 = _m$bind$6;return $13573;}))(IO$get_time)((_time_b$6=>{var $13574 = IO$monad$((_m$bind$7=>_m$pure$8=>{var $13575 = _m$bind$7;return $13575;}))(Kind$Synth$one$(_name$1,$13571))((_result$7=>{var $13576 = IO$monad$((_m$bind$8=>_m$pure$9=>{var $13577 = _m$bind$8;return $13577;}))(IO$get_time)((_time_c$8=>{var $13578 = IO$monad$((_m$bind$9=>_m$pure$10=>{var $13579 = _m$pure$10;return $13579;}))(_result$7);return $13578;}));return $13576;}));return $13574;}));var $13570 = $13572;break;case 'Maybe.none':var $13580 = IO$monad$((_m$bind$5=>_m$pure$6=>{var $13581 = _m$pure$6;return $13581;}))(Maybe$none);var $13570 = $13580;break;};return $13570;}));return $13568;}));var $13521 = $13566;break;};return $13521;};
  const Kind$Synth$one = x0=>x1=>Kind$Synth$one$(x0,x1);
  function IO$put_string$(_text$1){var $13582 = IO$ask$("put_string",_text$1,(_skip$2=>{var $13583 = IO$end$(Unit$new);return $13583;}));return $13582;};
  const IO$put_string = x0=>IO$put_string$(x0);
  function IO$print$(_text$1){var $13584 = IO$put_string$((_text$1+"\u{a}"));return $13584;};
  const IO$print = x0=>IO$print$(x0);
  function Kind$Term$show$as_nat$go$(_term$1){var self = _term$1;switch(self._){case 'Kind.Term.ref':var $13586=self.name;var self = ($13586==="Nat.zero");if (self) {var $13588 = Maybe$some$(0n);var $13587 = $13588;} else {var $13589 = Maybe$none;var $13587 = $13589;};var $13585 = $13587;break;case 'Kind.Term.app':var $13590=self.func;var $13591=self.argm;var self = $13590;switch(self._){case 'Kind.Term.ref':var $13593=self.name;var self = ($13593==="Nat.succ");if (self) {var $13595 = Maybe$monad$((_m$bind$5=>_m$pure$6=>{var $13596 = _m$bind$5;return $13596;}))(Kind$Term$show$as_nat$go$($13591))((_pred$5=>{var $13597 = Maybe$monad$((_m$bind$6=>_m$pure$7=>{var $13598 = _m$pure$7;return $13598;}))(Nat$succ$(_pred$5));return $13597;}));var $13594 = $13595;} else {var $13599 = Maybe$none;var $13594 = $13599;};var $13592 = $13594;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $13600 = Maybe$none;var $13592 = $13600;break;};var $13585 = $13592;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $13601 = Maybe$none;var $13585 = $13601;break;};return $13585;};
  const Kind$Term$show$as_nat$go = x0=>Kind$Term$show$as_nat$go$(x0);
  function Kind$Term$show$as_nat$(_term$1){var $13602 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1),Nat$show);return $13602;};
  const Kind$Term$show$as_nat = x0=>Kind$Term$show$as_nat$(x0);
  function Kind$Name$show$(_name$1){var $13603 = _name$1;return $13603;};
  const Kind$Name$show = x0=>Kind$Name$show$(x0);
  function Bits$to_nat$(_b$1){var self = _b$1;switch(self.length===0?'e':self[self.length-1]==='0'?'o':'i'){case 'o':var $13605=self.slice(0,-1);var $13606 = (2n*Bits$to_nat$($13605));var $13604 = $13606;break;case 'i':var $13607=self.slice(0,-1);var $13608 = Nat$succ$((2n*Bits$to_nat$($13607)));var $13604 = $13608;break;case 'e':var $13609 = 0n;var $13604 = $13609;break;};return $13604;};
  const Bits$to_nat = x0=>Bits$to_nat$(x0);
  function Kind$Term$show$is_ref$(_term$1,_name$2){var self = _term$1;switch(self._){case 'Kind.Term.ref':var $13611=self.name;var $13612 = (_name$2===$13611);var $13610 = $13612;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $13613 = Bool$false;var $13610 = $13613;break;};return $13610;};
  const Kind$Term$show$is_ref = x0=>x1=>Kind$Term$show$is_ref$(x0,x1);
  function Kind$Term$show$app$done$(_term$1,_path$2,_args$3){var _arity$4 = (list_length(_args$3));var self = (Kind$Term$show$is_ref$(_term$1,"Equal")&&(_arity$4===3n));if (self) {var _func$5 = Kind$Term$show$go$(_term$1,_path$2);var _eq_lft$6 = Maybe$default$(List$at$(1n,_args$3),"?");var _eq_rgt$7 = Maybe$default$(List$at$(2n,_args$3),"?");var $13615 = String$flatten$(List$cons$(_eq_lft$6,List$cons$(" == ",List$cons$(_eq_rgt$7,List$nil))));var $13614 = $13615;} else {var _func$5 = Kind$Term$show$go$(_term$1,_path$2);var self = _func$5;if (self.length===0) {var $13617 = Bool$false;var _wrap$6 = $13617;} else {var $13618=self.charCodeAt(0);var $13619=self.slice(1);var $13620 = ($13618===40);var _wrap$6 = $13620;};var _args$7 = String$join$(",",_args$3);var self = _wrap$6;if (self) {var $13621 = String$flatten$(List$cons$("(",List$cons$(_func$5,List$cons$(")",List$nil))));var _func$8 = $13621;} else {var $13622 = _func$5;var _func$8 = $13622;};var $13616 = String$flatten$(List$cons$(_func$8,List$cons$("(",List$cons$(_args$7,List$cons$(")",List$nil)))));var $13614 = $13616;};return $13614;};
  const Kind$Term$show$app$done = x0=>x1=>x2=>Kind$Term$show$app$done$(x0,x1,x2);
  function Kind$Term$show$app$(_term$1,_path$2,_args$3){var Kind$Term$show$app$=(_term$1,_path$2,_args$3)=>({ctr:'TCO',arg:[_term$1,_path$2,_args$3]});var Kind$Term$show$app=_term$1=>_path$2=>_args$3=>Kind$Term$show$app$(_term$1,_path$2,_args$3);var arg=[_term$1,_path$2,_args$3];while(true){let [_term$1,_path$2,_args$3]=arg;var R=(()=>{var self = _term$1;switch(self._){case 'Kind.Term.app':var $13623=self.func;var $13624=self.argm;var $13625 = Kind$Term$show$app$($13623,Kind$Path$Maybe$Builder$o$(_path$2),List$cons$(Kind$Term$show$go$($13624,Kind$Path$Maybe$Builder$i$(_path$2)),_args$3));return $13625;case 'Kind.Term.ori':var $13626=self.expr;var $13627 = Kind$Term$show$app$($13626,_path$2,_args$3);return $13627;case 'Kind.Term.var':case 'Kind.Term.ref':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $13628 = Kind$Term$show$app$done$(_term$1,_path$2,_args$3);return $13628;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Term$show$app = x0=>x1=>x2=>Kind$Term$show$app$(x0,x1,x2);
  function U16$show_hex$(_a$1){var self = _a$1;switch('u16'){case 'u16':var $13630=u16_to_word(self);var $13631 = Nat$to_string_base$(16n,Bits$to_nat$(Word$to_bits$($13630)));var $13629 = $13631;break;};return $13629;};
  const U16$show_hex = x0=>U16$show_hex$(x0);
  function Kind$Code$escape$char$(_chr$1){var self = (_chr$1===Kind$Code$backslash);if (self) {var $13633 = String$cons$(Kind$Code$backslash,String$cons$(_chr$1,String$nil));var $13632 = $13633;} else {var self = (_chr$1===34);if (self) {var $13635 = String$cons$(Kind$Code$backslash,String$cons$(_chr$1,String$nil));var $13634 = $13635;} else {var self = (_chr$1===39);if (self) {var $13637 = String$cons$(Kind$Code$backslash,String$cons$(_chr$1,String$nil));var $13636 = $13637;} else {var self = U16$btw$(32,_chr$1,126);if (self) {var $13639 = String$cons$(_chr$1,String$nil);var $13638 = $13639;} else {var $13640 = (String$cons$(Kind$Code$backslash,String$nil)+("u{"+(U16$show_hex$(_chr$1)+"}")));var $13638 = $13640;};var $13636 = $13638;};var $13634 = $13636;};var $13632 = $13634;};return $13632;};
  const Kind$Code$escape$char = x0=>Kind$Code$escape$char$(x0);
  function Kind$Code$escape$go$(_str$1,_result$2){var Kind$Code$escape$go$=(_str$1,_result$2)=>({ctr:'TCO',arg:[_str$1,_result$2]});var Kind$Code$escape$go=_str$1=>_result$2=>Kind$Code$escape$go$(_str$1,_result$2);var arg=[_str$1,_result$2];while(true){let [_str$1,_result$2]=arg;var R=(()=>{var self = _str$1;if (self.length===0) {var $13641 = String$reverse$(_result$2);return $13641;} else {var $13642=self.charCodeAt(0);var $13643=self.slice(1);var $13644 = Kind$Code$escape$go$($13643,(String$reverse$(Kind$Code$escape$char$($13642))+_result$2));return $13644;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Code$escape$go = x0=>x1=>Kind$Code$escape$go$(x0,x1);
  function Kind$Code$escape$(_str$1){var $13645 = Kind$Code$escape$go$(_str$1,"");return $13645;};
  const Kind$Code$escape = x0=>Kind$Code$escape$(x0);
  function BitsMap$to_list$(_xs$2){var $13646 = List$reverse$(BitsMap$to_list$go$(_xs$2,Bits$e,List$nil));return $13646;};
  const BitsMap$to_list = x0=>BitsMap$to_list$(x0);
  function Kind$Term$show$go$(_term$1,_path$2){var self = Kind$Term$show$as_nat$(_term$1);switch(self._){case 'Maybe.some':var $13648=self.value;var $13649 = $13648;var $13647 = $13649;break;case 'Maybe.none':var self = _term$1;switch(self._){case 'Kind.Term.var':var $13651=self.name;var $13652 = Kind$Name$show$($13651);var $13650 = $13652;break;case 'Kind.Term.ref':var $13653=self.name;var _name$4 = Kind$Name$show$($13653);var self = _path$2;switch(self._){case 'Maybe.some':var $13655=self.value;var _path_val$6 = ((Bits$e+'1')+Kind$Path$Builder$to_bits$($13655));var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));var $13656 = String$flatten$(List$cons$(_name$4,List$cons$(Kind$Code$color$("2",("-"+_path_str$7)),List$nil)));var $13654 = $13656;break;case 'Maybe.none':var $13657 = _name$4;var $13654 = $13657;break;};var $13650 = $13654;break;case 'Kind.Term.all':var $13658=self.eras;var $13659=self.self;var $13660=self.name;var $13661=self.xtyp;var $13662=self.body;var _eras$8 = $13658;var _self$9 = Kind$Name$show$($13659);var _name$10 = Kind$Name$show$($13660);var _type$11 = Kind$Term$show$go$($13661,Kind$Path$Maybe$Builder$o$(_path$2));var self = _eras$8;if (self) {var $13664 = "<";var _open$12 = $13664;} else {var $13665 = "(";var _open$12 = $13665;};var self = _eras$8;if (self) {var $13666 = ">";var _clos$13 = $13666;} else {var $13667 = ")";var _clos$13 = $13667;};var _body$14 = Kind$Term$show$go$($13662(Kind$Term$var$($13659,0n))(Kind$Term$var$($13660,0n)),Kind$Path$Maybe$Builder$i$(_path$2));var $13663 = String$flatten$(List$cons$(_self$9,List$cons$(_open$12,List$cons$(_name$10,List$cons$(":",List$cons$(_type$11,List$cons$(_clos$13,List$cons$(" -> ",List$cons$(_body$14,List$nil)))))))));var $13650 = $13663;break;case 'Kind.Term.lam':var $13668=self.name;var $13669=self.body;var _name$5 = Kind$Name$show$($13668);var _body$6 = Kind$Term$show$go$($13669(Kind$Term$var$($13668,0n)),Kind$Path$Maybe$Builder$o$(_path$2));var $13670 = String$flatten$(List$cons$("(",List$cons$(_name$5,List$cons$(") ",List$cons$(_body$6,List$nil)))));var $13650 = $13670;break;case 'Kind.Term.let':var $13671=self.name;var $13672=self.expr;var $13673=self.body;var _name$6 = Kind$Name$show$($13671);var _expr$7 = Kind$Term$show$go$($13672,Kind$Path$Maybe$Builder$o$(_path$2));var _body$8 = Kind$Term$show$go$($13673(Kind$Term$var$($13671,0n)),Kind$Path$Maybe$Builder$i$(_path$2));var $13674 = String$flatten$(List$cons$("let ",List$cons$(_name$6,List$cons$(" = ",List$cons$(_expr$7,List$cons$("; ",List$cons$(_body$8,List$nil)))))));var $13650 = $13674;break;case 'Kind.Term.def':var $13675=self.name;var $13676=self.expr;var $13677=self.body;var _name$6 = Kind$Name$show$($13675);var _expr$7 = Kind$Term$show$go$($13676,Kind$Path$Maybe$Builder$o$(_path$2));var _body$8 = Kind$Term$show$go$($13677(Kind$Term$var$($13675,0n)),Kind$Path$Maybe$Builder$i$(_path$2));var $13678 = String$flatten$(List$cons$("def ",List$cons$(_name$6,List$cons$(" = ",List$cons$(_expr$7,List$cons$("; ",List$cons$(_body$8,List$nil)))))));var $13650 = $13678;break;case 'Kind.Term.ann':var $13679=self.term;var $13680=self.type;var _term$6 = Kind$Term$show$go$($13679,Kind$Path$Maybe$Builder$o$(_path$2));var _type$7 = Kind$Term$show$go$($13680,Kind$Path$Maybe$Builder$i$(_path$2));var $13681 = String$flatten$(List$cons$(_term$6,List$cons$("::",List$cons$(_type$7,List$nil))));var $13650 = $13681;break;case 'Kind.Term.gol':var $13682=self.name;var _name$6 = Kind$Name$show$($13682);var $13683 = String$flatten$(List$cons$("?",List$cons$(_name$6,List$nil)));var $13650 = $13683;break;case 'Kind.Term.nat':var $13684=self.natx;var $13685 = String$flatten$(List$cons$(Nat$show$($13684),List$nil));var $13650 = $13685;break;case 'Kind.Term.chr':var $13686=self.chrx;var $13687 = String$flatten$(List$cons$("\'",List$cons$(Kind$Code$escape$char$($13686),List$cons$("\'",List$nil))));var $13650 = $13687;break;case 'Kind.Term.str':var $13688=self.strx;var $13689 = String$flatten$(List$cons$("\"",List$cons$(Kind$Code$escape$($13688),List$cons$("\"",List$nil))));var $13650 = $13689;break;case 'Kind.Term.num':var $13690=self.sign;var $13691=self.numb;var $13692=self.frac;var $13693 = String$flatten$(List$cons$((()=>{var self = $13690;switch(self._){case 'Maybe.some':var $13694=self.value;var self = $13694;if (self) {var $13696 = "+";var $13695 = $13696;} else {var $13697 = "-";var $13695 = $13697;};return $13695;case 'Maybe.none':var $13698 = "";return $13698;};})(),List$cons$(Nat$show$($13691),List$cons$((()=>{var self = $13692;switch(self._){case 'Maybe.some':var $13699=self.value;var $13700 = ("."+Nat$show$($13699));return $13700;case 'Maybe.none':var $13701 = "";return $13701;};})(),List$nil))));var $13650 = $13693;break;case 'Kind.Term.cse':var $13702=self.expr;var $13703=self.name;var $13704=self.with;var $13705=self.cses;var $13706=self.moti;var _expr$9 = Kind$Term$show$go$($13702,Kind$Path$Maybe$Builder$o$(_path$2));var _name$10 = Kind$Name$show$($13703);var _wyth$11 = String$join$("; ",List$mapped$($13704,(_with_var$11=>{var self = _with_var$11;switch(self._){case 'Kind.Ann.new':var $13709=self.name;var $13710=self.type;var self = $13710;switch(self._){case 'Maybe.some':var $13712=self.value;var $13713 = ($13709+(": "+Kind$Term$show$go$($13712,Maybe$none)));var $13711 = $13713;break;case 'Maybe.none':var $13714 = $13709;var $13711 = $13714;break;};var $13708 = $13711;break;};return $13708;})));var _cses$12 = BitsMap$to_list$($13705);var _cses$13 = String$join$("",List$mapped$(_cses$12,(_x$13=>{var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13),Maybe$none);var $13715 = String$flatten$(List$cons$(_name$14,List$cons$(": ",List$cons$(_term$15,List$cons$(", ",List$nil)))));return $13715;})));var self = $13706;switch(self._){case 'Maybe.some':var $13716=self.value;var $13717 = String$flatten$(List$cons$(": ",List$cons$(Kind$Term$show$go$($13716,Maybe$none),List$nil)));var _moti$14 = $13717;break;case 'Maybe.none':var $13718 = "";var _moti$14 = $13718;break;};var $13707 = String$flatten$(List$cons$("case ",List$cons$(_expr$9,List$cons$(" as ",List$cons$(_name$10,List$cons$(_wyth$11,List$cons$(" { ",List$cons$(_cses$13,List$cons$("}",List$cons$(_moti$14,List$nil))))))))));var $13650 = $13707;break;case 'Kind.Term.new':var $13719=self.args;var _args$4 = List$fold$($13719,(_path$4=>{var $13721 = List$nil;return $13721;}),(_arg$4=>_res$5=>_path$6=>{var $13722 = List$cons$(Kind$Term$show$go$(_arg$4,_path$6),_res$5(Kind$Path$Maybe$Builder$o$(_path$6)));return $13722;}))(_path$2);var $13720 = String$flatten$(List$cons$("{",List$cons$(String$join$(",",_args$4),List$cons$("}",List$nil))));var $13650 = $13720;break;case 'Kind.Term.get':var $13723=self.expr;var $13724=self.fkey;var _expr$5 = Kind$Term$show$go$($13723,Kind$Path$Maybe$Builder$o$(_path$2));var $13725 = String$flatten$(List$cons$(_expr$5,List$cons$("@",List$cons$($13724,List$nil))));var $13650 = $13725;break;case 'Kind.Term.set':var $13726=self.expr;var $13727=self.fkey;var $13728=self.fval;var _expr$6 = Kind$Term$show$go$($13726,Kind$Path$Maybe$Builder$o$(_path$2));var _fval$7 = Kind$Term$show$go$($13728,Kind$Path$Maybe$Builder$i$(_path$2));var $13729 = String$flatten$(List$cons$(_expr$6,List$cons$("@",List$cons$($13727,List$cons$(" <- ",List$cons$(_fval$7,List$nil))))));var $13650 = $13729;break;case 'Kind.Term.ope':var $13730=self.name;var $13731=self.arg0;var $13732=self.arg1;var _arg0$6 = Kind$Term$show$go$($13731,Kind$Path$Maybe$Builder$o$(_path$2));var _arg1$7 = Kind$Term$show$go$($13732,Kind$Path$Maybe$Builder$i$(_path$2));var $13733 = String$flatten$(List$cons$("(",List$cons$(_arg0$6,List$cons$(" ",List$cons$($13730,List$cons$(" ",List$cons$(_arg1$7,List$cons$(")",List$nil))))))));var $13650 = $13733;break;case 'Kind.Term.ori':var $13734=self.expr;var $13735 = Kind$Term$show$go$($13734,_path$2);var $13650 = $13735;break;case 'Kind.Term.typ':var $13736 = "Type";var $13650 = $13736;break;case 'Kind.Term.app':var $13737 = Kind$Term$show$app$(_term$1,_path$2,List$nil);var $13650 = $13737;break;case 'Kind.Term.hol':var $13738 = "_";var $13650 = $13738;break;};var $13647 = $13650;break;};return $13647;};
  const Kind$Term$show$go = x0=>x1=>Kind$Term$show$go$(x0,x1);
  function Kind$Term$show$(_term$1){var $13739 = Kind$Term$show$go$(_term$1,Maybe$none);return $13739;};
  const Kind$Term$show = x0=>Kind$Term$show$(x0);
  function Kind$Defs$report$types$(_defs$1,_names$2){var _types$3 = "";var _types$4 = (()=>{var $13742 = _types$3;var $13743 = _names$2;let _types$5=$13742;let _name$4;while ($13743._==='List.cons') {_name$4=$13743.head;var self = Kind$Map$get$(_name$4,_defs$1);switch(self._){case 'Maybe.some':var $13744=self.value;var self = $13744;switch(self._){case 'Kind.Def.new':var $13746=self.type;var $13747 = (_types$5+(_name$4+(": "+(Kind$Term$show$($13746)+"\u{a}"))));var $13745 = $13747;break;};var $13742 = $13745;break;case 'Maybe.none':var $13748 = _types$5;var $13742 = $13748;break;};_types$5=$13742;$13743=$13743.tail;}return _types$5;})();var $13740 = _types$4;return $13740;};
  const Kind$Defs$report$types = x0=>x1=>Kind$Defs$report$types$(x0,x1);
  function BitsMap$keys$go$(_xs$2,_key$3,_list$4){var self = _xs$2;switch(self._){case 'BitsMap.tie':var $13750=self.val;var $13751=self.lft;var $13752=self.rgt;var self = $13750;switch(self._){case 'Maybe.none':var $13754 = _list$4;var _list0$8 = $13754;break;case 'Maybe.some':var $13755 = List$cons$(Bits$reverse$(_key$3),_list$4);var _list0$8 = $13755;break;};var _list1$9 = BitsMap$keys$go$($13751,(_key$3+'0'),_list0$8);var _list2$10 = BitsMap$keys$go$($13752,(_key$3+'1'),_list1$9);var $13753 = _list2$10;var $13749 = $13753;break;case 'BitsMap.new':var $13756 = _list$4;var $13749 = $13756;break;};return $13749;};
  const BitsMap$keys$go = x0=>x1=>x2=>BitsMap$keys$go$(x0,x1,x2);
  function BitsMap$keys$(_xs$2){var $13757 = List$reverse$(BitsMap$keys$go$(_xs$2,Bits$e,List$nil));return $13757;};
  const BitsMap$keys = x0=>BitsMap$keys$(x0);
  function List$filter$(_f$2,_xs$3){var self = _xs$3;switch(self._){case 'List.cons':var $13759=self.head;var $13760=self.tail;var self = _f$2($13759);if (self) {var $13762 = List$cons$($13759,List$filter$(_f$2,$13760));var $13761 = $13762;} else {var $13763 = List$filter$(_f$2,$13760);var $13761 = $13763;};var $13758 = $13761;break;case 'List.nil':var $13764 = List$nil;var $13758 = $13764;break;};return $13758;};
  const List$filter = x0=>x1=>List$filter$(x0,x1);
  function Kind$Error$is_undef$(_error$1){var self = _error$1;switch(self._){case 'Kind.Error.type_mismatch':case 'Kind.Error.show_goal':case 'Kind.Error.waiting':case 'Kind.Error.indirect':case 'Kind.Error.patch':case 'Kind.Error.cant_infer':var $13766 = Bool$false;var $13765 = $13766;break;case 'Kind.Error.undefined_reference':var $13767 = Bool$true;var $13765 = $13767;break;};return $13765;};
  const Kind$Error$is_undef = x0=>Kind$Error$is_undef$(x0);
  function Kind$Error$is_mistake$(_error$1){var self = _error$1;switch(self._){case 'Kind.Error.type_mismatch':case 'Kind.Error.cant_infer':var $13769 = Bool$true;var $13768 = $13769;break;case 'Kind.Error.show_goal':case 'Kind.Error.waiting':case 'Kind.Error.indirect':case 'Kind.Error.patch':case 'Kind.Error.undefined_reference':var $13770 = Bool$false;var $13768 = $13770;break;};return $13768;};
  const Kind$Error$is_mistake = x0=>Kind$Error$is_mistake$(x0);
  function Kind$Error$is_goal$(_error$1){var self = _error$1;switch(self._){case 'Kind.Error.type_mismatch':case 'Kind.Error.waiting':case 'Kind.Error.indirect':case 'Kind.Error.patch':case 'Kind.Error.undefined_reference':case 'Kind.Error.cant_infer':var $13772 = Bool$false;var $13771 = $13772;break;case 'Kind.Error.show_goal':var $13773 = Bool$true;var $13771 = $13773;break;};return $13771;};
  const Kind$Error$is_goal = x0=>Kind$Error$is_goal$(x0);
  function Kind$Error$relevant$(_errors$1){var _undefs$2 = List$filter$(Kind$Error$is_undef,_errors$1);var _mistakes$3 = List$filter$(Kind$Error$is_mistake,_errors$1);var _goals$4 = List$filter$(Kind$Error$is_goal,_errors$1);var self = _undefs$2;switch(self._){case 'List.nil':var self = _mistakes$3;switch(self._){case 'List.cons':var $13776=self.head;var $13777 = List$concat$(List$cons$($13776,List$nil),_goals$4);var $13775 = $13777;break;case 'List.nil':var $13778 = _goals$4;var $13775 = $13778;break;};var $13774 = $13775;break;case 'List.cons':var $13779 = List$concat$(_undefs$2,_goals$4);var $13774 = $13779;break;};return $13774;};
  const Kind$Error$relevant = x0=>Kind$Error$relevant$(x0);
  function Kind$Context$show$(_context$1){var self = _context$1;switch(self._){case 'List.cons':var $13781=self.head;var $13782=self.tail;var self = $13781;switch(self._){case 'Pair.new':var $13784=self.fst;var $13785=self.snd;var _name$6 = Kind$Name$show$($13784);var _type$7 = Kind$Term$show$(Kind$Term$normalize$($13785,Kind$Map$new));var _rest$8 = Kind$Context$show$($13782);var $13786 = (_rest$8+("- "+(_name$6+(": "+(_type$7+"\u{a}")))));var $13783 = $13786;break;};var $13780 = $13783;break;case 'List.nil':var $13787 = "";var $13780 = $13787;break;};return $13780;};
  const Kind$Context$show = x0=>Kind$Context$show$(x0);
  function Kind$Term$expand_at$(_path$1,_term$2,_defs$3){var $13788 = Kind$Term$patch_at$(_path$1,_term$2,(_term$4=>{var self = _term$4;switch(self._){case 'Kind.Term.ref':var $13790=self.name;var self = Kind$Map$get$($13790,_defs$3);switch(self._){case 'Maybe.some':var $13792=self.value;var self = $13792;switch(self._){case 'Kind.Def.new':var $13794=self.term;var $13795 = $13794;var $13793 = $13795;break;};var $13791 = $13793;break;case 'Maybe.none':var $13796 = Kind$Term$ref$($13790);var $13791 = $13796;break;};var $13789 = $13791;break;case 'Kind.Term.var':case 'Kind.Term.typ':case 'Kind.Term.all':case 'Kind.Term.lam':case 'Kind.Term.app':case 'Kind.Term.let':case 'Kind.Term.def':case 'Kind.Term.ann':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.nat':case 'Kind.Term.chr':case 'Kind.Term.str':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':case 'Kind.Term.ori':var $13797 = _term$4;var $13789 = $13797;break;};return $13789;}));return $13788;};
  const Kind$Term$expand_at = x0=>x1=>x2=>Kind$Term$expand_at$(x0,x1,x2);
  function Kind$Term$expand_ct$(_term$1,_defs$2,_arity$3){var self = _term$1;switch(self._){case 'Kind.Term.var':var $13799=self.name;var $13800=self.indx;var $13801 = Kind$Term$var$($13799,$13800);var $13798 = $13801;break;case 'Kind.Term.ref':var $13802=self.name;var self = Kind$Map$get$($13802,_defs$2);switch(self._){case 'Maybe.some':var $13804=self.value;var self = $13804;switch(self._){case 'Kind.Def.new':var $13806=self.term;var $13807=self.isct;var $13808=self.arit;var self = ($13807&&(_arity$3>$13808));if (self) {var $13810 = $13806;var $13809 = $13810;} else {var $13811 = Kind$Term$ref$($13802);var $13809 = $13811;};var $13805 = $13809;break;};var $13803 = $13805;break;case 'Maybe.none':var $13812 = Kind$Term$ref$($13802);var $13803 = $13812;break;};var $13798 = $13803;break;case 'Kind.Term.all':var $13813=self.eras;var $13814=self.self;var $13815=self.name;var $13816=self.xtyp;var $13817=self.body;var $13818 = Kind$Term$all$($13813,$13814,$13815,Kind$Term$expand_ct$($13816,_defs$2,0n),(_s$9=>_x$10=>{var $13819 = Kind$Term$expand_ct$($13817(_s$9)(_x$10),_defs$2,0n);return $13819;}));var $13798 = $13818;break;case 'Kind.Term.lam':var $13820=self.name;var $13821=self.body;var $13822 = Kind$Term$lam$($13820,(_x$6=>{var $13823 = Kind$Term$expand_ct$($13821(_x$6),_defs$2,0n);return $13823;}));var $13798 = $13822;break;case 'Kind.Term.app':var $13824=self.func;var $13825=self.argm;var $13826 = Kind$Term$app$(Kind$Term$expand_ct$($13824,_defs$2,Nat$succ$(_arity$3)),Kind$Term$expand_ct$($13825,_defs$2,0n));var $13798 = $13826;break;case 'Kind.Term.let':var $13827=self.name;var $13828=self.expr;var $13829=self.body;var $13830 = Kind$Term$let$($13827,Kind$Term$expand_ct$($13828,_defs$2,0n),(_x$7=>{var $13831 = Kind$Term$expand_ct$($13829(_x$7),_defs$2,0n);return $13831;}));var $13798 = $13830;break;case 'Kind.Term.def':var $13832=self.name;var $13833=self.expr;var $13834=self.body;var $13835 = Kind$Term$def$($13832,Kind$Term$expand_ct$($13833,_defs$2,0n),(_x$7=>{var $13836 = Kind$Term$expand_ct$($13834(_x$7),_defs$2,0n);return $13836;}));var $13798 = $13835;break;case 'Kind.Term.ann':var $13837=self.done;var $13838=self.term;var $13839=self.type;var $13840 = Kind$Term$ann$($13837,Kind$Term$expand_ct$($13838,_defs$2,0n),Kind$Term$expand_ct$($13839,_defs$2,0n));var $13798 = $13840;break;case 'Kind.Term.gol':var $13841=self.name;var $13842=self.dref;var $13843=self.verb;var $13844 = Kind$Term$gol$($13841,$13842,$13843);var $13798 = $13844;break;case 'Kind.Term.hol':var $13845=self.path;var $13846 = Kind$Term$hol$($13845);var $13798 = $13846;break;case 'Kind.Term.nat':var $13847=self.natx;var $13848 = Kind$Term$nat$($13847);var $13798 = $13848;break;case 'Kind.Term.chr':var $13849=self.chrx;var $13850 = Kind$Term$chr$($13849);var $13798 = $13850;break;case 'Kind.Term.str':var $13851=self.strx;var $13852 = Kind$Term$str$($13851);var $13798 = $13852;break;case 'Kind.Term.ori':var $13853=self.orig;var $13854=self.expr;var $13855 = Kind$Term$ori$($13853,$13854);var $13798 = $13855;break;case 'Kind.Term.typ':var $13856 = Kind$Term$typ;var $13798 = $13856;break;case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $13857 = _term$1;var $13798 = $13857;break;};return $13798;};
  const Kind$Term$expand_ct = x0=>x1=>x2=>Kind$Term$expand_ct$(x0,x1,x2);
  function Kind$Term$expand$(_dref$1,_term$2,_defs$3){var _term$4 = Kind$Term$normalize$(_term$2,Kind$Map$new);var _term$5 = (()=>{var $13860 = _term$4;var $13861 = _dref$1;let _term$6=$13860;let _path$5;while ($13861._==='List.cons') {_path$5=$13861.head;var _term$7 = Kind$Term$expand_at$(_path$5,_term$6,_defs$3);var _term$8 = Kind$Term$normalize$(_term$7,Kind$Map$new);var _term$9 = Kind$Term$expand_ct$(_term$8,_defs$3,0n);var _term$10 = Kind$Term$normalize$(_term$9,Kind$Map$new);var $13860 = _term$10;_term$6=$13860;$13861=$13861.tail;}return _term$6;})();var $13858 = _term$5;return $13858;};
  const Kind$Term$expand = x0=>x1=>x2=>Kind$Term$expand$(x0,x1,x2);
  function Kind$Error$show$(_error$1,_defs$2){var self = _error$1;switch(self._){case 'Kind.Error.type_mismatch':var $13863=self.expected;var $13864=self.detected;var $13865=self.context;var self = $13863;switch(self._){case 'Either.left':var $13867=self.value;var $13868 = $13867;var _expected$7 = $13868;break;case 'Either.right':var $13869=self.value;var $13870 = Kind$Term$show$(Kind$Term$normalize$($13869,BitsMap$new));var _expected$7 = $13870;break;};var self = $13864;switch(self._){case 'Either.left':var $13871=self.value;var $13872 = $13871;var _detected$8 = $13872;break;case 'Either.right':var $13873=self.value;var $13874 = Kind$Term$show$(Kind$Term$normalize$($13873,BitsMap$new));var _detected$8 = $13874;break;};var $13866 = ("Type mismatch.\u{a}"+("- Expected: "+(_expected$7+("\u{a}"+("- Detected: "+(_detected$8+("\u{a}"+(()=>{var self = $13865;switch(self._){case 'List.nil':var $13875 = "";return $13875;case 'List.cons':var $13876 = ("With context:\u{a}"+Kind$Context$show$($13865));return $13876;};})())))))));var $13862 = $13866;break;case 'Kind.Error.show_goal':var $13877=self.name;var $13878=self.dref;var $13879=self.verb;var $13880=self.goal;var $13881=self.context;var _goal_name$8 = ("Goal ?"+(Kind$Name$show$($13877)+":\u{a}"));var self = $13880;switch(self._){case 'Maybe.some':var $13883=self.value;var _goal$10 = Kind$Term$expand$($13878,$13883,_defs$2);var $13884 = ("With type: "+((()=>{var self = $13879;if (self) {var $13885 = Kind$Term$show$go$(_goal$10,Maybe$some$((_x$11=>{var $13886 = _x$11;return $13886;})));return $13885;} else {var $13887 = Kind$Term$show$(_goal$10);return $13887;};})()+"\u{a}"));var _with_type$9 = $13884;break;case 'Maybe.none':var $13888 = "";var _with_type$9 = $13888;break;};var self = $13881;switch(self._){case 'List.nil':var $13889 = "";var _with_ctxt$10 = $13889;break;case 'List.cons':var $13890 = ("With context:\u{a}"+Kind$Context$show$($13881));var _with_ctxt$10 = $13890;break;};var $13882 = String$flatten$(List$cons$(_goal_name$8,List$cons$(_with_type$9,List$cons$(_with_ctxt$10,List$nil))));var $13862 = $13882;break;case 'Kind.Error.waiting':var $13891=self.name;var $13892 = ("Waiting for \'"+($13891+"\'."));var $13862 = $13892;break;case 'Kind.Error.indirect':var $13893=self.name;var $13894 = ("Error on dependency \'"+($13893+"\'."));var $13862 = $13894;break;case 'Kind.Error.patch':var $13895=self.term;var $13896 = ("Patching: "+Kind$Term$show$($13895));var $13862 = $13896;break;case 'Kind.Error.undefined_reference':var $13897=self.name;var $13898 = ("Undefined reference: "+(Kind$Name$show$($13897)+"\u{a}"));var $13862 = $13898;break;case 'Kind.Error.cant_infer':var $13899=self.term;var $13900=self.context;var _term$6 = Kind$Term$show$($13899);var _context$7 = Kind$Context$show$($13900);var $13901 = ("Can\'t infer type of: "+(_term$6+("\u{a}"+("With context:\u{a}"+_context$7))));var $13862 = $13901;break;};return $13862;};
  const Kind$Error$show = x0=>x1=>Kind$Error$show$(x0,x1);
  function Kind$Error$origin$(_error$1){var self = _error$1;switch(self._){case 'Kind.Error.type_mismatch':var $13903=self.origin;var $13904 = $13903;var $13902 = $13904;break;case 'Kind.Error.undefined_reference':var $13905=self.origin;var $13906 = $13905;var $13902 = $13906;break;case 'Kind.Error.cant_infer':var $13907=self.origin;var $13908 = $13907;var $13902 = $13908;break;case 'Kind.Error.show_goal':case 'Kind.Error.waiting':case 'Kind.Error.indirect':case 'Kind.Error.patch':var $13909 = Maybe$none;var $13902 = $13909;break;};return $13902;};
  const Kind$Error$origin = x0=>Kind$Error$origin$(x0);
  function Kind$Defs$report$errors$(_defs$1){var _errors$2 = "";var _errors$3 = (()=>{var $13912 = _errors$2;var $13913 = BitsMap$keys$(_defs$1);let _errors$4=$13912;let _key$3;while ($13913._==='List.cons') {_key$3=$13913.head;var _name$5 = Kind$Name$from_bits$(_key$3);var _defn$6 = Kind$Map$get$(_name$5,_defs$1);var self = _defn$6;switch(self._){case 'Maybe.some':var $13914=self.value;var self = $13914;switch(self._){case 'Kind.Def.new':var $13916=self.file;var $13917=self.code;var $13918=self.name;var $13919=self.stat;var self = $13919;switch(self._){case 'Kind.Status.fail':var $13921=self.errors;var self = $13921;switch(self._){case 'List.nil':var $13923 = _errors$4;var $13922 = $13923;break;case 'List.cons':var _name_str$20 = $13918;var _rel_errs$21 = Kind$Error$relevant$($13921);var _errors$22 = (()=>{var $13926 = _errors$4;var $13927 = _rel_errs$21;let _errors$23=$13926;let _err$22;while ($13927._==='List.cons') {_err$22=$13927.head;var _err_msg$24 = Kind$Error$show$(_err$22,_defs$1);var _ori_val$25 = Kind$Error$origin$(_err$22);var self = _ori_val$25;switch(self._){case 'Maybe.some':var $13928=self.value;var self = $13928;switch(self._){case 'Pair.new':var $13930=self.fst;var $13931=self.snd;var _inside$29 = ("Inside \'"+($13916+"\':\u{a}"));var _source$30 = Kind$Code$highlight$($13917,$13930,$13930,$13931);var $13932 = (_errors$23+(_err_msg$24+(_inside$29+(_source$30+("\u{a}"+"\u{a}")))));var $13929 = $13932;break;};var $13926 = $13929;break;case 'Maybe.none':var $13933 = (_errors$23+(_err_msg$24+"\u{a}"));var $13926 = $13933;break;};_errors$23=$13926;$13927=$13927.tail;}return _errors$23;})();var $13924 = _errors$22;var $13922 = $13924;break;};var $13920 = $13922;break;case 'Kind.Status.init':case 'Kind.Status.wait':case 'Kind.Status.done':var $13934 = _errors$4;var $13920 = $13934;break;};var $13915 = $13920;break;};var $13912 = $13915;break;case 'Maybe.none':var $13935 = _errors$4;var $13912 = $13935;break;};_errors$4=$13912;$13913=$13913.tail;}return _errors$4;})();var $13910 = _errors$3;return $13910;};
  const Kind$Defs$report$errors = x0=>Kind$Defs$report$errors$(x0);
  function Kind$Defs$report$(_defs$1,_names$2){var _types$3 = Kind$Defs$report$types$(_defs$1,_names$2);var _errors$4 = Kind$Defs$report$errors$(_defs$1);var self = _errors$4;if (self.length===0) {var $13937 = "All terms check.";var _errors$5 = $13937;} else {var $13938=self.charCodeAt(0);var $13939=self.slice(1);var $13940 = _errors$4;var _errors$5 = $13940;};var $13936 = (_types$3+("\u{a}"+_errors$5));return $13936;};
  const Kind$Defs$report = x0=>x1=>Kind$Defs$report$(x0,x1);
  function IO$set_file$(_name$1,_content$2){var $13941 = IO$ask$("set_file",(_name$1+("="+_content$2)),(_ok$3=>{var $13942 = IO$end$(Unit$new);return $13942;}));return $13941;};
  const IO$set_file = x0=>x1=>IO$set_file$(x0,x1);
  function Kind$Synth$load$cached$set_file$(_name$1,_value$2){var $13943 = IO$set_file$(Kind$Synth$load$cached$name$(_name$1),_value$2);return $13943;};
  const Kind$Synth$load$cached$set_file = x0=>x1=>Kind$Synth$load$cached$set_file$(x0,x1);
  function Kind$Core$var_name$(_indx$1,_name$2,_brui$3,_vars$4){var Kind$Core$var_name$=(_indx$1,_name$2,_brui$3,_vars$4)=>({ctr:'TCO',arg:[_indx$1,_name$2,_brui$3,_vars$4]});var Kind$Core$var_name=_indx$1=>_name$2=>_brui$3=>_vars$4=>Kind$Core$var_name$(_indx$1,_name$2,_brui$3,_vars$4);var arg=[_indx$1,_name$2,_brui$3,_vars$4];while(true){let [_indx$1,_name$2,_brui$3,_vars$4]=arg;var R=(()=>{var self = _indx$1;if (self===0n) {var self = _brui$3;if (self===0n) {var $13945 = _name$2;var $13944 = $13945;} else {var $13946=(self-1n);var $13947 = (_name$2+("^"+Nat$show$(_brui$3)));var $13944 = $13947;};return $13944;} else {var $13948=(self-1n);var self = _vars$4;switch(self._){case 'List.cons':var $13950=self.head;var $13951=self.tail;var self = (_name$2===$13950);if (self) {var $13953 = Nat$succ$(_brui$3);var _brui$8 = $13953;} else {var $13954 = _brui$3;var _brui$8 = $13954;};var $13952 = Kind$Core$var_name$($13948,_name$2,_brui$8,$13951);var $13949 = $13952;break;case 'List.nil':var $13955 = "unbound";var $13949 = $13955;break;};return $13949;};})();if(R.ctr==='TCO')arg=R.arg;else return R;}};
  const Kind$Core$var_name = x0=>x1=>x2=>x3=>Kind$Core$var_name$(x0,x1,x2,x3);
  function Kind$Core$show$go$(_term$1,_indx$2,_vars$3){var self = _term$1;switch(self._){case 'Kind.Term.var':var $13957=self.name;var $13958=self.indx;var $13959 = Kind$Core$var_name$(Nat$pred$((_indx$2-$13958<=0n?0n:_indx$2-$13958)),$13957,0n,_vars$3);var $13956 = $13959;break;case 'Kind.Term.ref':var $13960=self.name;var $13961 = Kind$Name$show$($13960);var $13956 = $13961;break;case 'Kind.Term.all':var $13962=self.eras;var $13963=self.self;var $13964=self.name;var $13965=self.xtyp;var $13966=self.body;var _eras$9 = $13962;var self = _eras$9;if (self) {var $13968 = "%";var _init$10 = $13968;} else {var $13969 = "@";var _init$10 = $13969;};var _self$11 = Kind$Name$show$($13963);var _name$12 = Kind$Name$show$($13964);var _xtyp$13 = Kind$Core$show$go$($13965,_indx$2,_vars$3);var _body$14 = Kind$Core$show$go$($13966(Kind$Term$var$($13963,_indx$2))(Kind$Term$var$($13964,Nat$succ$(_indx$2))),Nat$succ$(Nat$succ$(_indx$2)),List$cons$($13964,List$cons$($13963,_vars$3)));var $13967 = String$flatten$(List$cons$(_init$10,List$cons$(_self$11,List$cons$("(",List$cons$(_name$12,List$cons$(":",List$cons$(_xtyp$13,List$cons$(") ",List$cons$(_body$14,List$nil)))))))));var $13956 = $13967;break;case 'Kind.Term.lam':var $13970=self.name;var $13971=self.body;var _name$6 = Kind$Name$show$($13970);var _body$7 = Kind$Core$show$go$($13971(Kind$Term$var$($13970,_indx$2)),Nat$succ$(_indx$2),List$cons$($13970,_vars$3));var $13972 = String$flatten$(List$cons$("#",List$cons$(_name$6,List$cons$(" ",List$cons$(_body$7,List$nil)))));var $13956 = $13972;break;case 'Kind.Term.app':var $13973=self.func;var $13974=self.argm;var _func$6 = Kind$Core$show$go$($13973,_indx$2,_vars$3);var _argm$7 = Kind$Core$show$go$($13974,_indx$2,_vars$3);var $13975 = String$flatten$(List$cons$("(",List$cons$(_func$6,List$cons$(" ",List$cons$(_argm$7,List$cons$(")",List$nil))))));var $13956 = $13975;break;case 'Kind.Term.let':var $13976=self.name;var $13977=self.expr;var $13978=self.body;var _name$7 = Kind$Name$show$($13976);var _expr$8 = Kind$Core$show$go$($13977,_indx$2,_vars$3);var _body$9 = Kind$Core$show$go$($13978(Kind$Term$var$($13976,_indx$2)),Nat$succ$(_indx$2),List$cons$($13976,_vars$3));var $13979 = String$flatten$(List$cons$("!",List$cons$(_name$7,List$cons$(" = ",List$cons$(_expr$8,List$cons$("; ",List$cons$(_body$9,List$nil)))))));var $13956 = $13979;break;case 'Kind.Term.def':var $13980=self.name;var $13981=self.expr;var $13982=self.body;var _name$7 = Kind$Name$show$($13980);var _expr$8 = Kind$Core$show$go$($13981,_indx$2,_vars$3);var _body$9 = Kind$Core$show$go$($13982(Kind$Term$var$($13980,_indx$2)),Nat$succ$(_indx$2),List$cons$($13980,_vars$3));var $13983 = String$flatten$(List$cons$("$",List$cons$(_name$7,List$cons$(" = ",List$cons$(_expr$8,List$cons$("; ",List$cons$(_body$9,List$nil)))))));var $13956 = $13983;break;case 'Kind.Term.ann':var $13984=self.term;var $13985=self.type;var _term$7 = Kind$Core$show$go$($13984,_indx$2,_vars$3);var _type$8 = Kind$Core$show$go$($13985,_indx$2,_vars$3);var $13986 = String$flatten$(List$cons$("{",List$cons$(_term$7,List$cons$(":",List$cons$(_type$8,List$cons$("}",List$nil))))));var $13956 = $13986;break;case 'Kind.Term.nat':var $13987=self.natx;var $13988 = String$flatten$(List$cons$("+",List$cons$(Nat$show$($13987),List$nil)));var $13956 = $13988;break;case 'Kind.Term.chr':var $13989=self.chrx;var $13990 = String$flatten$(List$cons$("\'",List$cons$(Kind$Code$escape$char$($13989),List$cons$("\'",List$nil))));var $13956 = $13990;break;case 'Kind.Term.str':var $13991=self.strx;var $13992 = String$flatten$(List$cons$("\"",List$cons$(Kind$Code$escape$($13991),List$cons$("\"",List$nil))));var $13956 = $13992;break;case 'Kind.Term.ori':var $13993=self.expr;var $13994 = Kind$Core$show$go$($13993,_indx$2,_vars$3);var $13956 = $13994;break;case 'Kind.Term.typ':case 'Kind.Term.gol':case 'Kind.Term.hol':case 'Kind.Term.num':case 'Kind.Term.cse':case 'Kind.Term.new':case 'Kind.Term.get':case 'Kind.Term.set':case 'Kind.Term.ope':var $13995 = "*";var $13956 = $13995;break;};return $13956;};
  const Kind$Core$show$go = x0=>x1=>x2=>Kind$Core$show$go$(x0,x1,x2);
  function Kind$Core$show$(_term$1){var $13996 = Kind$Core$show$go$(_term$1,0n,List$nil);return $13996;};
  const Kind$Core$show = x0=>Kind$Core$show$(x0);
  function Bool$show$(_b$1){var self = _b$1;if (self) {var $13998 = "Bool.true";var $13997 = $13998;} else {var $13999 = "Bool.false";var $13997 = $13999;};return $13997;};
  const Bool$show = x0=>Bool$show$(x0);
  function Kind$Defs$cache$go$(_kvs$1){var self = _kvs$1;switch(self._){case 'List.cons':var $14001=self.head;var $14002=self.tail;var self = $14001;switch(self._){case 'Pair.new':var $14004=self.fst;var $14005=self.snd;var self = $14005;switch(self._){case 'Kind.Def.new':var $14007=self.file;var $14008=self.term;var $14009=self.type;var $14010=self.isct;var $14011=self.arit;var $14012=self.stat;var self = $14012;switch(self._){case 'Kind.Status.init':case 'Kind.Status.wait':case 'Kind.Status.fail':var $14014 = Kind$Defs$cache$go$($14002);var $14013 = $14014;break;case 'Kind.Status.done':var $14015 = IO$monad$((_m$bind$16=>_m$pure$17=>{var $14016 = _m$bind$16;return $14016;}))(IO$get_file_mtime$($14007))((_time$16=>{var $14017 = IO$monad$((_m$bind$17=>_m$pure$18=>{var $14018 = _m$bind$17;return $14018;}))(Kind$Synth$load$cached$set_file$(($14004+".term"),Kind$Core$show$($14008)))((_$17=>{var $14019 = IO$monad$((_m$bind$18=>_m$pure$19=>{var $14020 = _m$bind$18;return $14020;}))(Kind$Synth$load$cached$set_file$(($14004+".type"),Kind$Core$show$($14009)))((_$18=>{var $14021 = IO$monad$((_m$bind$19=>_m$pure$20=>{var $14022 = _m$bind$19;return $14022;}))(Kind$Synth$load$cached$set_file$(($14004+".isct"),Bool$show$($14010)))((_$19=>{var $14023 = IO$monad$((_m$bind$20=>_m$pure$21=>{var $14024 = _m$bind$20;return $14024;}))(Kind$Synth$load$cached$set_file$(($14004+".arit"),Nat$show$($14011)))((_$20=>{var $14025 = IO$monad$((_m$bind$21=>_m$pure$22=>{var $14026 = _m$bind$21;return $14026;}))(Kind$Synth$load$cached$set_file$(($14004+".file"),$14007))((_$21=>{var $14027 = IO$monad$((_m$bind$22=>_m$pure$23=>{var $14028 = _m$bind$22;return $14028;}))(Kind$Synth$load$cached$set_file$(($14004+".time"),_time$16))((_$22=>{var $14029 = Kind$Defs$cache$go$($14002);return $14029;}));return $14027;}));return $14025;}));return $14023;}));return $14021;}));return $14019;}));return $14017;}));var $14013 = $14015;break;};var $14006 = $14013;break;};var $14003 = $14006;break;};var $14000 = $14003;break;case 'List.nil':var $14030 = IO$monad$((_m$bind$2=>_m$pure$3=>{var $14031 = _m$pure$3;return $14031;}))(Unit$new);var $14000 = $14030;break;};return $14000;};
  const Kind$Defs$cache$go = x0=>Kind$Defs$cache$go$(x0);
  function Kind$Defs$cache$(_defs$1){var $14032 = Kind$Defs$cache$go$(Kind$Map$to_list$(_defs$1));return $14032;};
  const Kind$Defs$cache = x0=>Kind$Defs$cache$(x0);
  function Kind$api$io$check_term$(_name$1){var $14033 = IO$monad$((_m$bind$2=>_m$pure$3=>{var $14034 = _m$bind$2;return $14034;}))(Kind$Synth$one$(_name$1,Kind$Map$new))((_defs$2=>{var self = _defs$2;switch(self._){case 'Maybe.some':var $14036=self.value;var $14037 = IO$monad$((_m$bind$4=>_m$pure$5=>{var $14038 = _m$bind$4;return $14038;}))(IO$print$(Kind$Defs$report$($14036,List$cons$(_name$1,List$nil))))((_$4=>{var $14039 = Kind$Defs$cache$($14036);return $14039;}));var $14035 = $14037;break;case 'Maybe.none':var _notfound$3 = ("Term not found: \'"+(_name$1+"\'."));var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1),(_x$4=>{var $14041 = ("\'"+(_x$4+"\'"));return $14041;}));var _searched$5 = ("Searched on: "+(String$join$(", ",_filelist$4)+"."));var $14040 = IO$print$((_notfound$3+("\u{a}"+_searched$5)));var $14035 = $14040;break;};return $14035;}));return $14033;};
  const Kind$api$io$check_term = x0=>Kind$api$io$check_term$(x0);
  const Ether$tests = Kind$api$io$check_term$("Ether.RLP.Tree");
  return {
    '$main$': ()=>run(Ether$tests),
    'run': run,
    'IO': IO,
    'IO.ask': IO$ask,
    'IO.bind': IO$bind,
    'IO.end': IO$end,
    'IO.monad': IO$monad,
    'Maybe': Maybe,
    'BitsMap': BitsMap,
    'Maybe.none': Maybe$none,
    'BitsMap.get': BitsMap$get,
    'Bits.o': Bits$o,
    'Bits.i': Bits$i,
    'Bool.true': Bool$true,
    'Bool.false': Bool$false,
    'Cmp.as_ltn': Cmp$as_ltn,
    'Cmp.ltn': Cmp$ltn,
    'Cmp.gtn': Cmp$gtn,
    'Word.cmp.go': Word$cmp$go,
    'Cmp.eql': Cmp$eql,
    'Word.cmp': Word$cmp,
    'Word.ltn': Word$ltn,
    'Nat.succ': Nat$succ,
    'Nat.zero': Nat$zero,
    'U16.ltn': U16$ltn,
    'U16.new': U16$new,
    'Nat.apply': Nat$apply,
    'Word': Word,
    'Word.e': Word$e,
    'Word.i': Word$i,
    'Word.o': Word$o,
    'Word.inc': Word$inc,
    'Word.zero': Word$zero,
    'Nat.to_word': Nat$to_word,
    'Nat.to_u16': Nat$to_u16,
    'Kind.Name.to_bits.go': Kind$Name$to_bits$go,
    'Bits.e': Bits$e,
    'Kind.Name.to_bits': Kind$Name$to_bits,
    'Kind.Map.get': Kind$Map$get,
    'Maybe.default': Maybe$default,
    'Parser.State.new': Parser$State$new,
    'Maybe.some': Maybe$some,
    'Parser.run': Parser$run,
    'Parser.Reply': Parser$Reply,
    'List': List,
    'Parser.Reply.error': Parser$Reply$error,
    'Nat.gtn': Nat$gtn,
    'Parser.Error.combine': Parser$Error$combine,
    'Parser.Error.maybe_combine': Parser$Error$maybe_combine,
    'Parser.Reply.value': Parser$Reply$value,
    'List.nil': List$nil,
    'List.cons': List$cons,
    'Parser.many.go': Parser$many$go,
    'Parser.many': Parser$many,
    'Parser.many1': Parser$many1,
    'Parser.Error.new': Parser$Error$new,
    'Parser.Reply.fail': Parser$Reply$fail,
    'Cmp.as_eql': Cmp$as_eql,
    'Word.eql': Word$eql,
    'U16.eql': U16$eql,
    'Parser.digit': Parser$digit,
    'Nat.add': Nat$add,
    'Nat.mul': Nat$mul,
    'Nat.from_base.go': Nat$from_base$go,
    'List.reverse.go': List$reverse$go,
    'List.reverse': List$reverse,
    'Nat.from_base': Nat$from_base,
    'Parser.nat': Parser$nat,
    'Nat.read': Nat$read,
    'IO.get_time': IO$get_time,
    'Kind.Synth.load.cached.is_loop': Kind$Synth$load$cached$is_loop,
    'IO.get_file': IO$get_file,
    'String.cons': String$cons,
    'String.concat': String$concat,
    'Bits.hex.encode': Bits$hex$encode,
    'Kind.Synth.load.cached.name': Kind$Synth$load$cached$name,
    'Kind.Synth.load.cached.get_file': Kind$Synth$load$cached$get_file,
    'Bool.not': Bool$not,
    'String.is_empty': String$is_empty,
    'IO.get_file_mtime': IO$get_file_mtime,
    'Bool.and': Bool$and,
    'String.eql': String$eql,
    'Pair.new': Pair$new,
    'Maybe.bind': Maybe$bind,
    'Maybe.monad': Maybe$monad,
    'Pair': Pair,
    'Unit.new': Unit$new,
    'Bool.or': Bool$or,
    'Kind.Core.read.spaces': Kind$Core$read$spaces,
    'Kind.Term.ref': Kind$Term$ref,
    'Char.eql': Char$eql,
    'Kind.Term.typ': Kind$Term$typ,
    'Cmp.as_gte': Cmp$as_gte,
    'Word.gte': Word$gte,
    'U16.gte': U16$gte,
    'Cmp.as_lte': Cmp$as_lte,
    'Word.lte': Word$lte,
    'U16.lte': U16$lte,
    'Kind.Core.read.is_name': Kind$Core$read$is_name,
    'Kind.Core.read.name': Kind$Core$read$name,
    'Kind.Core.read.char': Kind$Core$read$char,
    'Kind.Term.all': Kind$Term$all,
    'Kind.Term.lam': Kind$Term$lam,
    'Kind.Term.app': Kind$Term$app,
    'Kind.Term.let': Kind$Term$let,
    'Kind.Term.def': Kind$Term$def,
    'Kind.Term.ann': Kind$Term$ann,
    'String.starts_with': String$starts_with,
    'String.nil': String$nil,
    'String.drop': String$drop,
    'Char.is_hex': Char$is_hex,
    'Word.adder': Word$adder,
    'Word.add': Word$add,
    'U16.add': U16$add,
    'Word.shift_left.one.go': Word$shift_left$one$go,
    'Word.shift_left.one': Word$shift_left$one,
    'Word.shift_left': Word$shift_left,
    'Word.mul.go': Word$mul$go,
    'Word.to_zero': Word$to_zero,
    'Word.mul': Word$mul,
    'U16.mul': U16$mul,
    'U16.inc': U16$inc,
    'Word.subber': Word$subber,
    'Word.sub': Word$sub,
    'U16.sub': U16$sub,
    'U16.zero': U16$zero,
    'Char.hex_value16': Char$hex_value16,
    'Kind.Core.read.u16': Kind$Core$read$u16,
    'Kind.Core.read.chrx': Kind$Core$read$chrx,
    'Kind.Term.chr': Kind$Term$chr,
    'String.reverse.go': String$reverse$go,
    'String.reverse': String$reverse,
    'Kind.Core.read.strx.go': Kind$Core$read$strx$go,
    'Kind.Term.str': Kind$Term$str,
    'Char.dec_value': Char$dec_value,
    'Kind.Core.read.natx': Kind$Core$read$natx,
    'Kind.Term.nat': Kind$Term$nat,
    'Pair.fst': Pair$fst,
    'Nat.eql': Nat$eql,
    'Nat.pred': Nat$pred,
    'Kind.Core.read.find': Kind$Core$read$find,
    'Pair.snd': Pair$snd,
    'Kind.Core.read.term': Kind$Core$read$term,
    'Kind.Core.read': Kind$Core$read,
    'Bool.read': Bool$read,
    'Kind.Status.done': Kind$Status$done,
    'Kind.Def.new': Kind$Def$new,
    'Kind.Synth.load.cached.def': Kind$Synth$load$cached$def,
    'BitsMap.tie': BitsMap$tie,
    'BitsMap.new': BitsMap$new,
    'BitsMap.set': BitsMap$set,
    'Kind.Map.set': Kind$Map$set,
    'Kind.Map.new': Kind$Map$new,
    'Kind.Map': Kind$Map,
    'Kind.Core.dependencies.go': Kind$Core$dependencies$go,
    'List.mapped': List$mapped,
    'Bits.reverse.tco': Bits$reverse$tco,
    'Bits.reverse': Bits$reverse,
    'BitsMap.to_list.go': BitsMap$to_list$go,
    'Kind.Name.from_bits': Kind$Name$from_bits,
    'Kind.Map.to_list': Kind$Map$to_list,
    'Kind.Map.keys': Kind$Map$keys,
    'Kind.Synth.load.cached': Kind$Synth$load$cached,
    'String.map': String$map,
    'Char.to_upper': Char$to_upper,
    'String.to_upper': String$to_upper,
    'String.is_upper': String$is_upper,
    'String.take': String$take,
    'IO.request': IO$request,
    'Kind.Synth.get_kind_code': Kind$Synth$get_kind_code,
    'Parser.is_eof': Parser$is_eof,
    'Parser': Parser,
    'Parser.choice': Parser$choice,
    'Parser.text.go': Parser$text$go,
    'Parser.text': Parser$text,
    'Parser.eof': Parser$eof,
    'Parser.until.go': Parser$until$go,
    'Parser.until': Parser$until,
    'Parser.one': Parser$one,
    'Kind.Parser.comment': Kind$Parser$comment,
    'Kind.Parser.spaces': Kind$Parser$spaces,
    'Parser.get_idx': Parser$get_idx,
    'U16.btw': U16$btw,
    'Kind.Name.is_letter': Kind$Name$is_letter,
    'Kind.Parser.letter': Kind$Parser$letter,
    'List.fold': List$fold,
    'Parser.fail': Parser$fail,
    'String.head': String$head,
    'Kind.Parser.name1': Kind$Parser$name1,
    'Parser.until1': Parser$until1,
    'Parser.wrap1': Parser$wrap1,
    'Kind.Parser.text_now': Kind$Parser$text_now,
    'Parser.maybe': Parser$maybe,
    'Kind.Parser.text': Kind$Parser$text,
    'Kind.Parser.items_now': Kind$Parser$items_now,
    'Parser.wrap': Parser$wrap,
    'Kind.Parser.items': Kind$Parser$items,
    'Kind.Parser.name': Kind$Parser$name,
    'Kind.Term.ori': Kind$Term$ori,
    'Kind.Parser.block': Kind$Parser$block,
    'Parser.block': Parser$block,
    'Either': Either,
    'Char.is_upper': Char$is_upper,
    'Char.to_lower': Char$to_lower,
    'Kind.Parser.dom.prop.camel_to_kebab.go': Kind$Parser$dom$prop$camel_to_kebab$go,
    'Kind.Parser.dom.prop.camel_to_kebab': Kind$Parser$dom$prop$camel_to_kebab,
    'Kind.Parser.dom.prop': Kind$Parser$dom$prop,
    'Kind.Term.hol': Kind$Term$hol,
    'Kind.Parser.dom.gen_prop.go': Kind$Parser$dom$gen_prop$go,
    'Kind.Parser.dom.gen_prop': Kind$Parser$dom$gen_prop,
    'empty_list': empty_list,
    'list_cons': list_cons,
    'Kind.Parser.dom.for': Kind$Parser$dom$for,
    'Kind.Parser.dom.formap': Kind$Parser$dom$formap,
    'Kind.Parser.dom.dynamic': Kind$Parser$dom$dynamic,
    'Kind.Parser.dom.text': Kind$Parser$dom$text,
    'Either.right': Either$right,
    'Kind.Parser.dom.leaf': Kind$Parser$dom$leaf,
    'Kind.Parser.dom.transform_children': Kind$Parser$dom$transform_children,
    'Either.left': Either$left,
    'Kind.Parser.dom.node': Kind$Parser$dom$node,
    'empty_map': empty_map,
    'Kind.Parser.dom': Kind$Parser$dom,
    'Kind.Parser.forall': Kind$Parser$forall,
    'Parser.try': Parser$try,
    'Parser.avoiding': Parser$avoiding,
    'Kind.Parser.lambda.make': Kind$Parser$lambda$make,
    'Kind.Parser.lambda.make.start': Kind$Parser$lambda$make$start,
    'Kind.Parser.lambda.1': Kind$Parser$lambda$1,
    'Kind.Parser.lambda.name_term': Kind$Parser$lambda$name_term,
    'List.unzip': List$unzip,
    'Kind.Parser.lambda.get_type': Kind$Parser$lambda$get_type,
    'Kind.Parser.lambda.2': Kind$Parser$lambda$2,
    'Kind.Parser.lambda': Kind$Parser$lambda,
    'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
    'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
    'Kind.Parser.letforrange': Kind$Parser$letforrange,
    'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
    'Kind.Parser.letforrange.with': Kind$Parser$letforrange$with,
    'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
    'Kind.Parser.letforrange.i32': Kind$Parser$letforrange$i32,
    'Kind.Parser.letforrange.i32.with': Kind$Parser$letforrange$i32$with,
    'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
    'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
    'Kind.Parser.letforin': Kind$Parser$letforin,
    'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
    'Kind.Parser.letforinmap': Kind$Parser$letforinmap,
    'Kind.Parser.letforinmap.with': Kind$Parser$letforinmap$with,
    'Kind.Parser.letwhile': Kind$Parser$letwhile,
    'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
    'Kind.Parser.let.abort': Kind$Parser$let$abort,
    'Kind.Parser.let': Kind$Parser$let,
    'Kind.Parser.let.omit': Kind$Parser$let$omit,
    'Kind.Parser.getwhile': Kind$Parser$getwhile,
    'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
    'Kind.Parser.get': Kind$Parser$get,
    'Kind.Parser.get.omit': Kind$Parser$get$omit,
    'Kind.Parser.def': Kind$Parser$def,
    'Kind.Term.cse': Kind$Term$cse,
    'Kind.Parser.use.abort': Kind$Parser$use$abort,
    'Kind.Parser.use': Kind$Parser$use,
    'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
    'Kind.Parser.if': Kind$Parser$if,
    'Kind.Code.backslash': Kind$Code$backslash,
    'Kind.Code.escapes': Kind$Code$escapes,
    'Kind.Parser.char.single': Kind$Parser$char$single,
    'Kind.Parser.char': Kind$Parser$char,
    'Kind.Parser.string.go': Kind$Parser$string$go,
    'Kind.Parser.string': Kind$Parser$string,
    'Kind.Parser.items1': Kind$Parser$items1,
    'Kind.Term.new': Kind$Term$new,
    'Kind.Parser.new': Kind$Parser$new,
    'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
    'Kind.Parser.some': Kind$Parser$some,
    'Kind.Parser.not': Kind$Parser$not,
    'Kind.Parser.left': Kind$Parser$left,
    'Kind.Parser.right': Kind$Parser$right,
    'Kind.Parser.apply': Kind$Parser$apply,
    'Kind.Parser.chain': Kind$Parser$chain,
    'Kind.Parser.mirror': Kind$Parser$mirror,
    'Kind.Parser.comprehension.and_all': Kind$Parser$comprehension$and_all,
    'Kind.Parser.comprehension': Kind$Parser$comprehension,
    'Kind.Parser.comprehension_range.go': Kind$Parser$comprehension_range$go,
    'Kind.Parser.comprehension_range': Kind$Parser$comprehension_range,
    'Kind.Name.read': Kind$Name$read,
    'Kind.Parser.list': Kind$Parser$list,
    'Kind.Parser.map': Kind$Parser$map,
    'Kind.Parser.log': Kind$Parser$log,
    'Nat.sub': Nat$sub,
    'String.slice': String$slice,
    'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
    'Word.to_bits': Word$to_bits,
    'U16.to_bits': U16$to_bits,
    'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
    'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
    'Kind.Term.unroll_str': Kind$Term$unroll_str,
    'Kind.Term.reduce': Kind$Term$reduce,
    'Kind.Parser.open': Kind$Parser$open,
    'Kind.Parser.do.statements': Kind$Parser$do$statements,
    'Kind.Parser.do': Kind$Parser$do,
    'Kind.Term.extract_name': Kind$Term$extract_name,
    'Kind.Ann.new': Kind$Ann$new,
    'Kind.Parser.case.with': Kind$Parser$case$with,
    'Kind.Parser.case.case': Kind$Parser$case$case,
    'Parser.append_error': Parser$append_error,
    'Kind.Parser.case.group': Kind$Parser$case$group,
    'BitsMap.map': BitsMap$map,
    'Kind.Map.map': Kind$Map$map,
    'Kind.Parser.case.build': Kind$Parser$case$build,
    'Kind.Parser.case': Kind$Parser$case,
    'Kind.Parser.without': Kind$Parser$without,
    'Kind.Parser.switch.case': Kind$Parser$switch$case,
    'Kind.Parser.switch': Kind$Parser$switch,
    'Bits.tail': Bits$tail,
    'Bits.inc': Bits$inc,
    'Nat.to_bits': Nat$to_bits,
    'Maybe.is_some': Maybe$is_some,
    'Kind.Term.gol': Kind$Term$gol,
    'Kind.Parser.goal': Kind$Parser$goal,
    'Kind.Parser.hole': Kind$Parser$hole,
    'Kind.Parser.float.sign': Kind$Parser$float$sign,
    'List.any': List$any,
    'Kind.Parser.float.str_digit': Kind$Parser$float$str_digit,
    'String.from_list': String$from_list,
    'Kind.Parser.float.64': Kind$Parser$float$64,
    'Kind.Parser.float.32': Kind$Parser$float$32,
    'Nat.sub_rem': Nat$sub_rem,
    'Nat.div_mod.go': Nat$div_mod$go,
    'Nat.div_mod': Nat$div_mod,
    'Nat.to_base.go': Nat$to_base$go,
    'Nat.to_base': Nat$to_base,
    'Nat.mod.go': Nat$mod$go,
    'Nat.mod': Nat$mod,
    'Nat.lte': Nat$lte,
    'List.at': List$at,
    'Nat.show_digit': Nat$show_digit,
    'Nat.to_string_base': Nat$to_string_base,
    'Nat.show': Nat$show,
    'Kind.Parser.int_pos': Kind$Parser$int_pos,
    'Kind.Parser.int_neg': Kind$Parser$int_neg,
    'Kind.Parser.machine_integer.signed': Kind$Parser$machine_integer$signed,
    'Parser.hex_digit': Parser$hex_digit,
    'Parser.hex_nat': Parser$hex_nat,
    'Kind.Parser.nat': Kind$Parser$nat,
    'Kind.Parser.machine_integer.unsigned': Kind$Parser$machine_integer$unsigned,
    'Kind.Parser.u64': Kind$Parser$u64,
    'Kind.Parser.u32': Kind$Parser$u32,
    'Kind.Parser.u16': Kind$Parser$u16,
    'Kind.Parser.u8': Kind$Parser$u8,
    'Parser.Number.new': Parser$Number$new,
    'Parser.num': Parser$num,
    'Kind.Term.num': Kind$Term$num,
    'Kind.Parser.num': Kind$Parser$num,
    'Kind.Parser.reference': Kind$Parser$reference,
    'List.for': List$for,
    'Kind.Parser.application': Kind$Parser$application,
    'Kind.Parser.application.erased': Kind$Parser$application$erased,
    'Kind.Parser.list_set': Kind$Parser$list_set,
    'Kind.Parser.list_get': Kind$Parser$list_get,
    'Kind.Parser.map_set': Kind$Parser$map_set,
    'Kind.Parser.map_get': Kind$Parser$map_get,
    'Kind.Term.set': Kind$Term$set,
    'Kind.Parser.field_set': Kind$Parser$field_set,
    'Kind.Term.get': Kind$Term$get,
    'Kind.Parser.field_get': Kind$Parser$field_get,
    'Kind.Parser.arrow': Kind$Parser$arrow,
    'Kind.Parser.concat': Kind$Parser$concat,
    'Kind.Parser.equality': Kind$Parser$equality,
    'Kind.Term.ope': Kind$Term$ope,
    'Kind.Parser.op': Kind$Parser$op,
    'Kind.Parser.add': Kind$Parser$add,
    'Kind.Parser.sub': Kind$Parser$sub,
    'Kind.Parser.mul': Kind$Parser$mul,
    'Kind.Parser.div': Kind$Parser$div,
    'Kind.Parser.mod': Kind$Parser$mod,
    'Kind.Parser.ltn': Kind$Parser$ltn,
    'Kind.Parser.lte': Kind$Parser$lte,
    'Kind.Parser.eql': Kind$Parser$eql,
    'Kind.Parser.gte': Kind$Parser$gte,
    'Kind.Parser.gtn': Kind$Parser$gtn,
    'Kind.Parser.and': Kind$Parser$and,
    'Kind.Parser.or': Kind$Parser$or,
    'Kind.Parser.composition': Kind$Parser$composition,
    'Kind.Parser.default': Kind$Parser$default,
    'Kind.Parser.cons': Kind$Parser$cons,
    'Kind.Parser.string_concat': Kind$Parser$string_concat,
    'Kind.Parser.sigma': Kind$Parser$sigma,
    'Kind.Parser.inequality': Kind$Parser$inequality,
    'Kind.Parser.rewrite': Kind$Parser$rewrite,
    'Kind.Parser.annotation': Kind$Parser$annotation,
    'Kind.Parser.application.hole': Kind$Parser$application$hole,
    'Kind.Parser.term.suffix': Kind$Parser$term$suffix,
    'Kind.Parser.term': Kind$Parser$term,
    'Kind.Parser.name_term': Kind$Parser$name_term,
    'Kind.Binder.new': Kind$Binder$new,
    'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
    'List.concat': List$concat,
    'List.flatten': List$flatten,
    'Kind.Parser.binder': Kind$Parser$binder,
    'List.length': List$length,
    'Kind.Parser.forall.make': Kind$Parser$forall$make,
    'List.at_last': List$at_last,
    'Kind.Term.var': Kind$Term$var,
    'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
    'Kind.Name.eql': Kind$Name$eql,
    'Kind.Context.find.go': Kind$Context$find$go,
    'Kind.Context.find': Kind$Context$find,
    'Kind.Path.Builder.o': Kind$Path$Builder$o,
    'Kind.Path.Builder.i': Kind$Path$Builder$i,
    'Kind.Path.Builder.to_bits': Kind$Path$Builder$to_bits,
    'List.imapped': List$imapped,
    'Kind.Path.Builder.nat': Kind$Path$Builder$nat,
    'Kind.Term.bind': Kind$Term$bind,
    'Trampoline.call': Trampoline$call,
    'Trampoline': Trampoline,
    'Trampoline.wrap': Trampoline$wrap,
    'BitsMap.set_if_empty.cps.go': BitsMap$set_if_empty$cps$go,
    'Trampoline.done': Trampoline$done,
    'BitsMap.set_if_empty.cps': BitsMap$set_if_empty$cps,
    'BitsMap.set_if_empty': BitsMap$set_if_empty,
    'Kind.Map.set_if_empty': Kind$Map$set_if_empty,
    'Kind.Status.init': Kind$Status$init,
    'Kind.Map.def': Kind$Map$def,
    'Kind.Parser.file.def': Kind$Parser$file$def,
    'Kind.Parser.ADT.Constructor.new': Kind$Parser$ADT$Constructor$new,
    'Kind.Parser.ADT.ctor': Kind$Parser$ADT$ctor,
    'Kind.Parser.ADT.Datatype.new': Kind$Parser$ADT$Datatype$new,
    'Kind.Parser.ADT.adt': Kind$Parser$ADT$adt,
    'Kind.Parser.ADT.Datatype.build_term.motive.go': Kind$Parser$ADT$Datatype$build_term$motive$go,
    'Kind.Parser.ADT.Datatype.build_term.motive': Kind$Parser$ADT$Datatype$build_term$motive,
    'String.flatten.go': String$flatten$go,
    'String.flatten': String$flatten,
    'Kind.Parser.ADT.Datatype.build_term.constructor.go': Kind$Parser$ADT$Datatype$build_term$constructor$go,
    'Kind.Parser.ADT.Datatype.build_term.constructor': Kind$Parser$ADT$Datatype$build_term$constructor,
    'Kind.Parser.ADT.Datatype.build_term.constructors.go': Kind$Parser$ADT$Datatype$build_term$constructors$go,
    'Kind.Parser.ADT.Datatype.build_term.constructors': Kind$Parser$ADT$Datatype$build_term$constructors,
    'Kind.Parser.ADT.Datatype.build_term.go': Kind$Parser$ADT$Datatype$build_term$go,
    'Kind.Parser.ADT.Datatype.build_term': Kind$Parser$ADT$Datatype$build_term,
    'Kind.Parser.ADT.Datatype.build_type.go': Kind$Parser$ADT$Datatype$build_type$go,
    'Kind.Parser.ADT.Datatype.build_type': Kind$Parser$ADT$Datatype$build_type,
    'Kind.Parser.ADT.Constructor.build_term.opt.go': Kind$Parser$ADT$Constructor$build_term$opt$go,
    'Kind.Parser.ADT.Constructor.build_term.opt': Kind$Parser$ADT$Constructor$build_term$opt,
    'Kind.Parser.ADT.Constructor.build_term.go': Kind$Parser$ADT$Constructor$build_term$go,
    'Kind.Parser.ADT.Constructor.build_term': Kind$Parser$ADT$Constructor$build_term,
    'Kind.Parser.ADT.Constructor.build_type.go': Kind$Parser$ADT$Constructor$build_type$go,
    'Kind.Parser.ADT.Constructor.build_type': Kind$Parser$ADT$Constructor$build_type,
    'List.is_empty': List$is_empty,
    'Kind.Term.get_args.go': Kind$Term$get_args$go,
    'Kind.Term.get_args': Kind$Term$get_args,
    'Kind.Parser.ADT.Derive.stringifier.term.cont': Kind$Parser$ADT$Derive$stringifier$term$cont,
    'Kind.Parser.ADT.Derive.stringifier.term.args': Kind$Parser$ADT$Derive$stringifier$term$args,
    'Kind.Parser.ADT.Derive.stringifier.ctr': Kind$Parser$ADT$Derive$stringifier$ctr,
    'Kind.Parser.ADT.Derive.stringifier.term.ctrs': Kind$Parser$ADT$Derive$stringifier$term$ctrs,
    'Kind.Parser.ADT.Derive.stringifier.term': Kind$Parser$ADT$Derive$stringifier$term,
    'Kind.Parser.ADT.Derive.stringifier.type': Kind$Parser$ADT$Derive$stringifier$type,
    'Kind.Parser.ADT.Derived.new': Kind$Parser$ADT$Derived$new,
    'Kind.Parser.ADT.Derive.parser.term.cont': Kind$Parser$ADT$Derive$parser$term$cont,
    'Kind.Parser.ADT.Derive.parser.term.args': Kind$Parser$ADT$Derive$parser$term$args,
    'Kind.Parser.ADT.Derive.parser.term.cses': Kind$Parser$ADT$Derive$parser$term$cses,
    'Kind.Parser.ADT.Derive.parser.term': Kind$Parser$ADT$Derive$parser$term,
    'Kind.Parser.ADT.Derive.parser.type': Kind$Parser$ADT$Derive$parser$type,
    'Kind.Parser.ADT.Derive.serializer.term.cont': Kind$Parser$ADT$Derive$serializer$term$cont,
    'Kind.Parser.ADT.Derive.serializer.term.args': Kind$Parser$ADT$Derive$serializer$term$args,
    'Kind.Parser.ADT.Derive.serializer.ctr.bits': Kind$Parser$ADT$Derive$serializer$ctr$bits,
    'Kind.Parser.ADT.Derive.serializer.ctr': Kind$Parser$ADT$Derive$serializer$ctr,
    'Kind.Parser.ADT.Derive.serializer.term.ctrs': Kind$Parser$ADT$Derive$serializer$term$ctrs,
    'Bits.zeros': Bits$zeros,
    'Nat.div': Nat$div,
    'Nat.bitlen': Nat$bitlen,
    'Kind.Parser.ADT.Derive.serializer.term': Kind$Parser$ADT$Derive$serializer$term,
    'Kind.Parser.ADT.Derive.serializer.type': Kind$Parser$ADT$Derive$serializer$type,
    'Kind.Parser.ADT.Derive.serializer.term.bits': Kind$Parser$ADT$Derive$serializer$term$bits,
    'Kind.Parser.ADT.Derive.deserializer.term.cont': Kind$Parser$ADT$Derive$deserializer$term$cont,
    'Kind.Parser.ADT.Derive.deserializer.term.args': Kind$Parser$ADT$Derive$deserializer$term$args,
    'Kind.Parser.ADT.Derive.deserializer.term.cses': Kind$Parser$ADT$Derive$deserializer$term$cses,
    'Kind.Parser.ADT.Derive.deserializer.term': Kind$Parser$ADT$Derive$deserializer$term,
    'Kind.Parser.ADT.Derive.deserializer.type': Kind$Parser$ADT$Derive$deserializer$type,
    'Kind.Parser.ADT.Derive.by_name': Kind$Parser$ADT$Derive$by_name,
    'Kind.Parser.file.adt': Kind$Parser$file$adt,
    'Kind.Parser.file.end': Kind$Parser$file$end,
    'Kind.Parser.file': Kind$Parser$file,
    'String.join.go': String$join$go,
    'String.join': String$join,
    'Kind.Code.highlight.end': Kind$Code$highlight$end,
    'Maybe.extract': Maybe$extract,
    'Nat.is_zero': Nat$is_zero,
    'Nat.double': Nat$double,
    'String.pad_right': String$pad_right,
    'String.pad_left': String$pad_left,
    'Kind.Code.color': Kind$Code$color,
    'List.take': List$take,
    'Kind.Code.highlight.go': Kind$Code$highlight$go,
    'Kind.Code.highlight': Kind$Code$highlight,
    'Kind.Defs.read': Kind$Defs$read,
    'Kind.Synth.load.go': Kind$Synth$load$go,
    'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
    'String.length.go': String$length$go,
    'String.length': String$length,
    'String.split.go': String$split$go,
    'String.split': String$split,
    'Kind.Synth.files_of': Kind$Synth$files_of,
    'Kind.Synth.load': Kind$Synth$load,
    'Kind.Status.wait': Kind$Status$wait,
    'Kind.Check': Kind$Check,
    'Kind.Check.result': Kind$Check$result,
    'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
    'Kind.Error.waiting': Kind$Error$waiting,
    'Kind.Error.indirect': Kind$Error$indirect,
    'Maybe.mapped': Maybe$mapped,
    'Kind.Path.Maybe.Builder.o': Kind$Path$Maybe$Builder$o,
    'Kind.Path.Maybe.Builder.i': Kind$Path$Maybe$Builder$i,
    'Kind.Error.patch': Kind$Error$patch,
    'Kind.Path.Maybe.Builder.to_bits': Kind$Path$Maybe$Builder$to_bits,
    'Kind.Term.check.patch': Kind$Term$check$patch,
    'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
    'Kind.Error.show_goal': Kind$Error$show_goal,
    'Kind.Path.Builder.nil': Kind$Path$Builder$nil,
    'Kind.Path.Maybe.Builder.nil': Kind$Path$Maybe$Builder$nil,
    'Kind.Term.check.direct': Kind$Term$check$direct,
    'Kind.Term.check.get_name_of_self_type.slice': Kind$Term$check$get_name_of_self_type$slice,
    'Kind.Term.check.get_name_of_self_type': Kind$Term$check$get_name_of_self_type,
    'Kind.Term.check.expand.num.nat': Kind$Term$check$expand$num$nat,
    'Kind.Term.check.expand.num.int': Kind$Term$check$expand$num$int,
    'Kind.Term.check.expand.num.other': Kind$Term$check$expand$num$other,
    'Kind.Term.check.expand.num': Kind$Term$check$expand$num,
    'Kind.Term.check.infer_types_of_with': Kind$Term$check$infer_types_of_with,
    'Kind.Term.normalize': Kind$Term$normalize,
    'Kind.Term.check.expand.cse.motive.go': Kind$Term$check$expand$cse$motive$go,
    'List.tail': List$tail,
    'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,
    'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,
    'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,
    'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,
    'List.zip': List$zip,
    'Nat.gte': Nat$gte,
    'Bits.concat': Bits$concat,
    'Kind.Term.serialize.go': Kind$Term$serialize$go,
    'Kind.Term.serialize': Kind$Term$serialize,
    'Bits.eql': Bits$eql,
    'Kind.Term.identical': Kind$Term$identical,
    'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,
    'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,
    'Kind.Term.check.expand.cse.motive': Kind$Term$check$expand$cse$motive,
    'Kind.Term.check.expand.cse.argument': Kind$Term$check$expand$cse$argument,
    'Maybe.or': Maybe$or,
    'Kind.Term.check.expand.cse.cases': Kind$Term$check$expand$cse$cases,
    'Kind.Term.check.expand.cse': Kind$Term$check$expand$cse,
    'Kind.Error.cant_infer': Kind$Error$cant_infer,
    'Kind.Term.check.cant_infer': Kind$Term$check$cant_infer,
    'Kind.Term.get_bnds': Kind$Term$get_bnds,
    'List.last.go': List$last$go,
    'List.last': List$last,
    'Kind.Term.check.expand.set.count_params': Kind$Term$check$expand$set$count_params,
    'Nat.for': Nat$for,
    'List.get': List$get,
    'Kind.Term.check.expand.new.pair': Kind$Term$check$expand$new$pair,
    'Kind.Term.check.expand.new': Kind$Term$check$expand$new,
    'Kind.Term.check.expand.get.selector': Kind$Term$check$expand$get$selector,
    'Kind.Term.check.expand.get': Kind$Term$check$expand$get,
    'Kind.Term.check.expand.set.selector': Kind$Term$check$expand$set$selector,
    'Kind.Term.check.expand.set': Kind$Term$check$expand$set,
    'String.at': String$at,
    'String.last': String$last,
    'Kind.Term.check.expand.ope': Kind$Term$check$expand$ope,
    'BitsSet.has': BitsSet$has,
    'BitsSet.mut.has': BitsSet$mut$has,
    'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
    'Kind.Term.has_holes': Kind$Term$has_holes,
    'Kind.Term.equal.hole': Kind$Term$equal$hole,
    'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
    'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
    'BitsSet.set': BitsSet$set,
    'BitsSet.mut.set': BitsSet$mut$set,
    'Bool.eql': Bool$eql,
    'Kind.Term.equal.go': Kind$Term$equal$go,
    'BitsSet.new': BitsSet$new,
    'BitsSet.mut.new': BitsSet$mut$new,
    'Kind.Term.check': Kind$Term$check,
    'Kind.Path.patch_at.list': Kind$Path$patch_at$list,
    'Kind.Term.patch_at': Kind$Term$patch_at,
    'Kind.Synth.fix': Kind$Synth$fix,
    'Kind.Status.fail': Kind$Status$fail,
    'Kind.Synth.one': Kind$Synth$one,
    'IO.put_string': IO$put_string,
    'IO.print': IO$print,
    'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
    'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
    'Kind.Name.show': Kind$Name$show,
    'Bits.to_nat': Bits$to_nat,
    'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
    'Kind.Term.show.app.done': Kind$Term$show$app$done,
    'Kind.Term.show.app': Kind$Term$show$app,
    'U16.show_hex': U16$show_hex,
    'Kind.Code.escape.char': Kind$Code$escape$char,
    'Kind.Code.escape.go': Kind$Code$escape$go,
    'Kind.Code.escape': Kind$Code$escape,
    'BitsMap.to_list': BitsMap$to_list,
    'Kind.Term.show.go': Kind$Term$show$go,
    'Kind.Term.show': Kind$Term$show,
    'Kind.Defs.report.types': Kind$Defs$report$types,
    'BitsMap.keys.go': BitsMap$keys$go,
    'BitsMap.keys': BitsMap$keys,
    'List.filter': List$filter,
    'Kind.Error.is_undef': Kind$Error$is_undef,
    'Kind.Error.is_mistake': Kind$Error$is_mistake,
    'Kind.Error.is_goal': Kind$Error$is_goal,
    'Kind.Error.relevant': Kind$Error$relevant,
    'Kind.Context.show': Kind$Context$show,
    'Kind.Term.expand_at': Kind$Term$expand_at,
    'Kind.Term.expand_ct': Kind$Term$expand_ct,
    'Kind.Term.expand': Kind$Term$expand,
    'Kind.Error.show': Kind$Error$show,
    'Kind.Error.origin': Kind$Error$origin,
    'Kind.Defs.report.errors': Kind$Defs$report$errors,
    'Kind.Defs.report': Kind$Defs$report,
    'IO.set_file': IO$set_file,
    'Kind.Synth.load.cached.set_file': Kind$Synth$load$cached$set_file,
    'Kind.Core.var_name': Kind$Core$var_name,
    'Kind.Core.show.go': Kind$Core$show$go,
    'Kind.Core.show': Kind$Core$show,
    'Bool.show': Bool$show,
    'Kind.Defs.cache.go': Kind$Defs$cache$go,
    'Kind.Defs.cache': Kind$Defs$cache,
    'Kind.api.io.check_term': Kind$api$io$check_term,
    'Ether.tests': Ether$tests,
  };
})();
module.exports['$main$']();
