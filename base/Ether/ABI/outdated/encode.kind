// This module is considerd and will be probably deprecated
// Consider this only as a source of study

type Ether.Encode.ABI.Coder {
    uint_256(value : String)
    bytes(value : String)
    bytes32(value : String)
    andress(value : String)
}

Ether.Encode.ABI.Coder.stringfy(coder : Ether.Encode.ABI.Coder) : String
  case coder {
    uint_256 : "uint_256"
    bytes32 : "bytes32"
    andress : "andress"
    bytes : "bytes"
  }

type Ether.Encode.ABI.Method {
   new(
     name : String,
     inputs : List<Ether.Encode.ABI.Coder>
   //  output : List<Ether.Encode.ABI.Coder>
   //  constant : List<Bool>,
   //  payable : List<Bool>
   )
 }

Ether.ABI.encode_(coder : Ether.Encode.ABI.Coder) : Pair<String, Bool> 
  case coder {
    bytes :
      let length = String.length(coder.value) - 1 // change after to bits.length
      let nextMul32 = (((length - 1) / 64) + 1) * 64
      let lengthEncoded = Ether.ABI.encode_(Ether.Encode.ABI.Coder.uint_256(Nat.hex.encode(length)))
      open lengthEncoded
      let bytesEncoded = String.pad_right(nextMul32 - 1, '0', "0" | coder.value)
      {lengthEncoded.fst | bytesEncoded, true}
  } default 
      {String.pad_left(64, '0', coder.value), false}

Ether.ABI.methodData(method : Ether.Encode.ABI.Method) : String
  open method
  let joinMethods = List.map!!((x) Ether.Encode.ABI.Coder.stringfy(x), method.inputs)
  let methodSig = method.name | "(" | String.join(",", joinMethods) | ")"
  let methodHash = Crypto.Keccak.hash(methodSig)
  let encodeInputs = List.map!!((x) Ether.ABI.encode_(x), method.inputs)
  let encodeSize = List.length!(encodeInputs)
  let hexs = Pair.new!!("", "")

  for coder in encodeInputs with hexs :
    let {dataBlock, headBlock} = hexs
    open coder
    if coder.snd then
      let dataLoc = (encodeSize*32) + String.length(dataBlock)
      let headBlock = headBlock | String.pad_left(64, '0', Nat.hex.encode(dataLoc))
      let dataBlock = dataBlock | coder.fst
      {dataBlock, headBlock}
    else
      let dataBlock = dataBlock | coder.fst
      {dataBlock, headBlock}
  methodHash | Pair.snd!!(hexs) | Pair.fst!!(hexs)