Ether.encode.type(coder : Ether.ABI.Type) : List<String>
  case coder {
    bytes : 
      case coder.len {
        some : 
          [Ether.Hex.to_hex(coder.value, true)]
        none : 
          let bytes_size = Nat.to_bits(Bits.length(coder.value) / 8)
          [Ether.Hex.to_hex(bytes_size, true), Ether.Hex.to_hex(coder.value, false)]
      } 
    array : 
      let list_length = Nat.to_bits(List.length!(coder.value))
      let content = List.map!!(Ether.encode.type, coder.value)
      Ether.Hex.to_hex(list_length, true) & List.flatten!(content)
  } default
     [Ether.Hex.to_hex(coder.value, true)]

Ether.encode(length : Nat, coder : List<Ether.ABI.Type>) : Pair<List<String>, List<String>>
  case coder {
    cons : case coder.head as bytes {
      bytes : case bytes.len {
        some : 
           let {static, dynamic} = Ether.encode(length, coder.tail)
           {static ++ Ether.encode.type(coder.head), dynamic}
        none : 
          let {static, dynamic} = Ether.encode(length, coder.tail)
          let dynamic_location = Nat.to_bits((length + List.length!(dynamic)) * 32) // + size of queue dynamic
          {static ++ [Ether.Hex.to_hex(dynamic_location, true)], dynamic ++ Ether.encode.type(coder.head)}
       }
      array :
          let {static, dynamic} = Ether.encode(length, coder.tail)
          let dynamic_location = Nat.to_bits((length + List.length!(dynamic)) * 32) // + size of queue dynamic
          {static ++ [Ether.Hex.to_hex(dynamic_location, true)], dynamic ++ Ether.encode.type(coder.head)}
    } default 
        let {static, dynamic} = Ether.encode(length, coder.tail)
        {static ++ Ether.encode.type(coder.head), dynamic}
  } default {[], []}

Ether.encode.read(enconding : Pair<List<String>, List<String>>) : String
  let {static, dynamic} = enconding
  static = List.map!!((x) "0x" | x, static)
  dynamic = List.map!!((x) "0x" | x, dynamic)
  String.join("", static) | String.join("", dynamic)


Ether.ABI.encode(coder : List<Ether.ABI.Type>) : String
  Ether.encode.read(Ether.encode(List.length!(coder), coder))