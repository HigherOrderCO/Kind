type Web.Kind.State {
  new(
    screen_size: Pair(U32,U32), 
    page: Web.Kind.Page,
    mouse_over: String) // element id
}

type Web.Kind.Page {
  home
  apps
}

type Web.Kind.Event {
  go_to_home
  go_to_apps
}
  
Web.Kind.exe_event(id: String, stt: Web.Kind.State): Web.Kind.State
  open stt
  let actions = Web.Kind.component.id_action
  case Map.get!(id, actions) as event {
    none: stt
    some: 
      case event.value{
        go_to_home: Web.Kind.State.new(stt.screen_size, Web.Kind.Page.home, stt.mouse_over)
        go_to_apps: Web.Kind.State.new(stt.screen_size, Web.Kind.Page.apps, stt.mouse_over)
      } 
  }

Web.Kind.set_mouse_over(id: String, stt: Web.Kind.State): Web.Kind.State
  open stt
  Web.Kind.State.new(stt.screen_size, stt.page, id)

Web.Kind.draw_page(stt: Web.Kind.State): DOM
  open stt
  case stt.page{
    home: Web.Kind.draw_page_home(stt)
    apps: Web.Kind.draw_page_apps(stt)
  }

// Executes the application
Web.Kind: App(Web.Kind.State)

  init = 
    Web.Kind.State.new({500u, 400u}, Web.Kind.Page.home, "")

  draw = (state)
    open state
    Web.Kind.draw_page(state)

  when = (event, state)
    case event {
      init: App.pass
      mouse_click: App.store!(Web.Kind.exe_event(event.id, state))
      mouse_over : App.store!(Web.Kind.set_mouse_over(event.id, state))
    } default App.pass
  
  // The application
  App.new!(init, draw, when)


