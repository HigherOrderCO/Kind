type Web.Kind.State {
  new(
    screen_size: Pair(U32,U32), 
    page: Web.Kind.Page,
    events: Map(String)) // id: event_name 
}

type Web.Kind.Page {
  home
  apps
}

type Web.Kind.Event {
  go_to_home
  go_to_apps
}

Web.Kind.Event.name(e: Web.Kind.Event): String
  case e {
    go_to_home: "action_go_to_home"
    go_to_apps: "action_go_to_apps"
  }

// Web.Kind.Event.from_element_id(id: String): Web.Kind.Event
//   switch String.eql(id){
//     "tab_home": Web.Kind.Event.go_to_home
//     "tab_apps": Web.Kind.Event.go_to_apps
//     "btn_pri_home_go_to_apps": Web.Kind.Event.go_to_apps
//   } default ""
  
  // open stt
  // let actions = Web.Kind.component.id_action
  // case Map.get!(id, actions) as event {
  //   none: stt
  //   some: Web.Kind.State.new(stt.screen_size, event.value, stt.events)
  // }
  

// TODO: search in stt.events for the available events. 
// After execute them, remove from events
Web.Kind.exe_event(id: String, stt: Web.Kind.State): Web.Kind.State
  open stt
  let actions = Web.Kind.component.id_action
  case Map.get!(id, actions) as event {
    none: stt
    some: 
      case event.value{
        go_to_home: Web.Kind.State.new(stt.screen_size, Web.Kind.Page.home, stt.events)
        go_to_apps: Web.Kind.State.new(stt.screen_size, Web.Kind.Page.apps, stt.events)
      } 
  }

Web.Kind.draw_page(stt: Web.Kind.State): DOM
  open stt
  case stt.page{
    home: Web.Kind.draw_page_home(stt)
    apps: Web.Kind.draw_page_apps(stt)
  }

Web.Kind.add_event(e: App.Event, value: String, stt: Web.Kind.State): Web.Kind.State
  open stt
  Web.Kind.State.new(
    stt.screen_size,
    stt.page,
    Map.set!(App.Event.name(e), value, stt.events)
  )

Web.Kind: App(Web.Kind.State)

  init = 
    Web.Kind.State.new({500u, 400u}, Web.Kind.Page.home, {})

  draw = (state)
    open state
    Web.Kind.draw_page(state)

  when = (event, state)
    case event {
      init: App.pass
      dom: App.pass
      mouse_click: App.store!(Web.Kind.exe_event(event.id, state))

      mouse_over: 
        App.store!(Web.Kind.add_event(event, event.id, state))
    } default App.pass
  
  // The application
  App.new!(init, draw, when)


