Web.Playground.comp.header(stt: Web.Playground.State): DOM
  open stt

  let playground =
    DOM.node("div", {"id": "input_view"}, {
      "font-size": "14px"
      "height": "35px"
      "padding": "8px 15px 0px 15px"
      "background-color": 
        case stt.window {
          input: Web.Playground.constant.light_gray_color
          terminal: Web.Playground.constant.white_smoke 
        }
      "display": "flex"
    }, [DOM.text("playground.kind")])

  let btn_run = Web.Playground.comp.btn_run_code(stt.mouse_over)  

  case stt.device{
    phone:
      let terminal = 
        DOM.node("div", {"id": "terminal_view"}, {
          "font-size": "14px"
          "height": "35px"
          "padding": "8px 15px 0px 15px"
          "background-color": 
            case stt.window{
              input: Web.Playground.constant.white_smoke
              terminal: Web.Playground.constant.light_gray_color
            }
          "display": "flex"
        }, [DOM.text("output")])

      DOM.node("div", {}, {
        "display": "flex"
        "flex-direction": "row"
        "justify-content": "space-between"
        "align-content": "center"
        "justify-content": "center"
      }, [
        DOM.node("div", {}, {
          "display": "flex"
          "justify-content": "flex-start"
          "flex-direction": "row"
        }, [playground, terminal])
        btn_run
      ])
  } default 

    DOM.node("div", {}, {
      "display": "flex"
      "flex-direction": "row"
      "justify-content": "space-between"
      "align-content": "center"
      "justify-content": "center"
    }, [playground, btn_run])


Web.Playground.comp.btn_run_code(mouse_over: String): DOM
  let is_hover = String.eql("btn_run_code", mouse_over)
  let normal = {
    "width" : "50px"
    "height": "25px"
    "margin": "5px 0px"
    "background-color": Web.Kind.constant.secondary_color
    "color": "white"
    "cursor": "pointer"
    "border": "none"
    "border-radius": "4px"
    "display": "flex"
    "justify-content": "center"
    "align-content": "center"
    "align-items": "center"
  }
  let hover = {
    "background-color": "#44B8D3"
  }
  DOM.node("div", {"id": "btn_run_code"},
    if is_hover then Map.union!(normal, hover)
    else normal,
    [DOM.text("check")])

Web.Playground.comp.input(code: String): DOM
  DOM.node("textarea", {
    "id": "input_code"
    "placeholder": "Write Kind code in this online editor and run it <3"
    }, {
    "cols": "100"
    "height": "100%"
    "border": "solid 5px " | Web.Playground.constant.light_gray_color
    "resize": "none"
    "padding": "10px"
  },[DOM.text(code)])

Web.Playground.comp.main_area(stt: Web.Playground.State): DOM
  open stt
  case stt.device {
    phone: 
    DOM.node("div", {}, {
      "width": "100%"
      "height": "100%"
      "display": "flex"
      "flex-direction": "column"
    }, [
      Web.Playground.comp.header(stt)
      case stt.window {
        input: Web.Playground.comp.input(stt.code)
        terminal: Web.Playground.comp.output_area(stt.output, stt.device)
      }
    ])
  } default 
  DOM.node("div", {}, {
    "width": "100%"
    "height": "100%"
    "display": "flex"
    "flex-direction": "row"
  }, [
    DOM.node("div", {}, {
      "display": "flex"
      "flex-direction": "column"
      "width": "60%"
    }, [
      Web.Playground.comp.header(stt)
      Web.Playground.comp.input(stt.code)
    ])
    Web.Playground.comp.output_area(stt.output, stt.device)
  ])

Web.Playground.comp.output_area(output: String, device: Device): DOM
  let style = {
    "width": "400px"
    "max-width": "500px"
    "overflow": "auto"
    "padding": "10px"
    "background-color": Web.Playground.constant.light_gray_color
  }

  DOM.node("div", {}, 
    case device {
      phone: 
      Map.union<String>(style, {
        "height": "100%"
        "margin-top": "0px"})
    } default 
      Map.union<String>(style, {
        "height": "100% - 35px"
        "margin-top": "35px"}), 
    [DOM.node("pre", {}, {}, [DOM.text(output)])])


