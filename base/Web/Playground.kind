type Web.Playground.State {
  new(
    device: Device, 
    window: Web.Playground.Window,
    mouse_over: String,
    code: String,
    output: String)
}

type Web.Playground.Window {
  input
  terminal
}

type Web.Playground.Event {
  check_terms
  run_code
  // download_app
  display_output
}

Web.Playground.Actions: Map(Web.Playground.Event)
  { 
    "btn_check_terms": Web.Playground.Event.check_terms
    "btn_run_code": Web.Playground.Event.run_code
    // "btn_output": Web.Playground.Event.
    "display_output": Web.Playground.Event.display_output
  } 
  
Web.Playground.exe_event(id: String, stt: Web.Playground.State): Web.Playground.State
  open stt
  let actions = Web.Playground.Actions
  case Map.get!(id, actions) as event {
    none: stt
    some: stt
      // TODO: add state change
      // case event.value{
      //   btn_check_terms: 
      // } 
  }

// Web.Playground.request(stt: Web.Playground.State): Web.Playground.State
//   open stt
//   let code = "type Bar {new(a: Bool)}"
//   IO {
//     get checked = IO.request("http://localhost:3030/api/check_term?code=" | code)
//     // App.store!(Web.Playground.State.new(
//     //   stt.device, stt.window, 
//     //   stt.mouse_over, stt.code,
//     //   checked))
//     ?a
//   }
//   App.store!(Web.Playground.State.new(
//       stt.device, stt.window, 
//       stt.mouse_over, stt.code,
//       checked))

Web.Playground.set_mouse_over(id: String, stt: Web.Playground.State): Web.Playground.State
  open stt
  Web.Playground.State.new(stt.device, stt.window, id, stt.code, stt.output)

// Represents a page containing the Playground
Web.playground.body(stt: Web.Playground.State): DOM
  DOM.node("div", {"id": "page"}, {
    "margin": "100px"
    "height": "500px"
  },[Web.Playground.draw(stt)])

// Executes the application
Web.Playground: App(Web.Playground.State)

  init = 
    Web.Playground.State.new(
      Device.big_desktop, Web.Playground.Window.input, "", "", "none"
    )

  draw = (state)
    Web.playground.body(state)

  when = (event, state)
    open state
    case event {
      // init: 
      //   open event.info
      //   open event.info.screen_size as screen_size
      //   let device = Device.classify(screen_size.fst)
      //   App.store!(
      //     Web.Playground.State.new(device, Web.Playground.Window.input, "", "", "")
      //   )
      
      // TODO: check if this is being called
      mouse_click: 
        switch String.eql(event.id) {
          "btn_run_code": 
            log("btn clicked!")
            IO {
              // let code = "type Bar {new(a: Bool)}"
              get checked = IO.request("http://localhost:3030/api/check_term?code=type Foo { new(num: Nat) }")
              log("Checked: " | checked)
              App.store!(Web.Playground.State.new(
                state.device, state.window, 
                state.mouse_over, state.code,
                checked))
            }
        } default App.pass
        
      mouse_over : App.store!(Web.Playground.set_mouse_over(event.id, state))
      resize: 
        open event.info
        open event.info.screen_size as screen_size
        open state
        let device = Device.classify(screen_size.fst)
        App.store!(Web.Playground.State.new(device, state.window, state.mouse_over, state.code))
      onsubmit:
        App.pass
    } default App.pass
  
  // The application
  App.new!(init, draw, when)


