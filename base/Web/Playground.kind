type Web.Playground.State {
  new(
    device: Device, 
    window: Web.Playground.Window,
    mouse_over: String,
    code: String, // code to be type checked
    output: String) // output from the type check
}

type Web.Playground.Window {
  input
  terminal
}

type Web.Playground.Event {
  check_terms
  run_code
  // download_app
  display_output
}

Web.Playground.set_mouse_over(id: String, stt: Web.Playground.State): Web.Playground.State
  open stt
  Web.Playground.State.new(stt.device, stt.window, id, stt.code, stt.output)

// Represents a page containing the Playground
Web.playground.body(stt: Web.Playground.State): DOM
  open stt
  case stt.device {
    phone:
      DOM.node("div", {"id": "page"}, {
      "margin": "10px"
      "height": "300px"
    },[Web.Playground.draw(stt)])
  } default
    DOM.node("div", {"id": "page"}, {
      "margin": "100px"
      "height": "500px"
    },[Web.Playground.draw(stt)])


// Executes the application
Web.Playground: App(Web.Playground.State)

  init = 
    Web.Playground.State.new(
      Device.big_desktop, Web.Playground.Window.input, "", "", "")

  draw = (state)
    Web.playground.body(state)

  when = (event, state)
    open state
    case event {
      tick: 
        open event.info
        open event.info.screen_size as screen_size
        let device = Device.classify(screen_size.fst)
        // log("Size: " | U32.show(screen_size.fst))
        App.store!(
          Web.Playground.State.new(
            device, state.window, 
            state.mouse_over, state.code, state.output)
        )

      input:
        IO {
          switch String.eql(event.id) {
            "input_code": 
              App.store!(Web.Playground.State.new(
              state.device, state.window, 
              state.mouse_over, event.text, state.output)
            )
          } default App.pass
        }
      
      mouse_click: 
        switch String.eql(event.id) {
          // Send a request to typecheck the code
          "btn_run_code": 
          let window = 
            case state.device {
              phone: Web.Playground.Window.terminal
            } default Web.Playground.Window.input

          if String.is_empty(state.code)
          then 
            App.store!(Web.Playground.State.new(
              state.device, window, 
              state.mouse_over, state.code,
              "How can I type check an empty code? haha"))
          else 
            IO {
              get checked = IO.request("http://localhost:3030/api/check_term?code=" | state.code)
              App.store!(Web.Playground.State.new(
                state.device, window, 
                state.mouse_over, state.code,
                checked))
            }

          "terminal_view":
          App.store!(Web.Playground.State.new(
            state.device, Web.Playground.Window.terminal,
            state.mouse_over, state.code, state.output))
          
          "input_view": 
          App.store!(Web.Playground.State.new(
            state.device, Web.Playground.Window.input,
            state.mouse_over, state.code, state.output))
          
          } default App.pass
        
      mouse_over : App.store!(Web.Playground.set_mouse_over(event.id, state))
      resize: 
        open event.info
        open event.info.screen_size as screen_size
        open state
        let device = Device.classify(screen_size.fst)
        App.store!(Web.Playground.State.new(device, state.window, state.mouse_over, state.code))
      onsubmit:
        App.pass
    } default App.pass

  App.new!(init, draw, when)
