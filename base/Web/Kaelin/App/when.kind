Web.Kaelin.App.when: App.Event -> Web.Kaelin.State -> IO<Dynamic>
(event, state)
    def serialize = Web.Kaelin.Event.serialize
    def deserialize = Web.Kaelin.Event.deserialize

    case event state{
      init game: 
      open event
      IO {
        App.watch(Web.Kaelin.Constants.room)
        App.store<Web.Kaelin.State>(Web.Kaelin.Action.create_player(
          event.user, Web.Kaelin.Hero.croni, state))
      }

      key_down game:
        App.pass

       tick game:
         let app = Web.Kaelin.Action.update_interface(event.info, U64.to_nat(event.time), state)
        // let f = Web.Kaelin.Timer.get(state.tick, state.timer)
         App.store<Web.Kaelin.State>(app)
       mouse_up game :
         let info = state.interface
         open info
         let {axial_x, axial_y} = Web.Kaelin.Coord.to_axial(info.mouse_pos)
         let hex = serialize(Web.Kaelin.Event.user_input(Web.Kaelin.Coord.new(axial_x, axial_y), Web.Kaelin.Action.walk))
         App.post(state.room, hex)
      post game:
         case deserialize(String.drop(2, event.data)) as data { // drop the 0x thing
           none : App.pass
           some : case data.value as eventdata {
             start_game : App.pass
             create_user : App.pass
             create_hero : App.pass
             user_input : 
               let pos = eventdata.coord
               open pos
               App.store<Web.Kaelin.State>(Web.Kaelin.Player.move(pos, state, event.addr))
            }
          }
    } default App.pass

Web.Kaelin.Command.create_player(hero_id: String) : String
  "0x1" | String.repeat("0", 55) | String.drop(2, hero_id)