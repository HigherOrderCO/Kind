Web.Kaelin.Coord.Path.minimum(origin : Web.Kaelin.Coord, goal : Web.Kaelin.Coord) : Maybe(Web.Kaelin.Coord)
  open goal
  let f = ((a, b)
     open a
     open b
     let a_dis0 = I32.sub(a.i, goal.i)
     let a_dis1 = I32.sub(a.j, goal.j)
     let b_dis0 = I32.sub(b.i, goal.i)
     let b_dis1 = I32.sub(b.j, goal.j)
     Bool.or(I32.ltn(I32.abs(a_dis0), I32.abs(b_dis0)), 
        (I32.eql(I32.abs(a_dis0), I32.abs(b_dis0)) && 
          I32.ltn(I32.abs(a_dis1), I32.abs(b_dis1))))) :: Web.Kaelin.Coord -> Web.Kaelin.Coord -> Bool
    let neighborhood = Web.Kaelin.Coord.Path.moore(origin)
    let path = List.merge_sort!(f, neighborhood)
    case path {
        nil : none
        cons : some(path.head)
    }