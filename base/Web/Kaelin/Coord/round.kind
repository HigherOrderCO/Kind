Web.Kaelin.Coord.round(axial_x: F64, axial_y: F64): Pair(I32, I32)
  let f = U32.to_f64
  let i = F64.to_i32
  let axial_z = F64.sub(F64.sub(f(0u), axial_x), axial_y)

  let round_x = Web.Kaelin.Coord.round.round_F64(axial_x)
  let round_y = Web.Kaelin.Coord.round.round_F64(axial_y)
  let round_z = Web.Kaelin.Coord.round.round_F64(axial_z)

  let diff_x = Web.Kaelin.Coord.round.diff(axial_x, round_x)
  let diff_y = Web.Kaelin.Coord.round.diff(axial_y, round_y)
  let diff_z = Web.Kaelin.Coord.round.diff(axial_z, round_z)
  
  let result = case F64.gtn(diff_x, diff_z) {
    true:
      case F64.gtn(diff_y, diff_x){
        true: 
          let new_y = F64.sub(F64.sub(f(0u), round_x), round_z)
          {i(round_x), i(new_y)}
        false:
          let new_x = F64.sub(F64.sub(f(0u), round_y), round_z)
          {i(new_x), i(round_y)}
      }
    false:
      case F64.gtn(diff_y, diff_z) {
        true:
          let new_y = F64.sub(F64.sub(f(0u), round_x), round_z)
          {i(round_x), i(new_y)}
        false:
          {i(round_x), i(round_y)}
      }
  }
  result