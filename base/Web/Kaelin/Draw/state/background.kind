// Draws a map of hexagons given the style "offset coordinates"
// TODO: Change the hexagon's color based on Web.Kaelin.CastInfo
Web.Kaelin.Draw.state.background(state: Web.Kaelin.State, img: VoxBox, map: Web.Kaelin.Map): VoxBox
  let list = NatMap.to_list!(map)
    for pair in list with img:
      open pair
      let coord = Web.Kaelin.Coord.Convert.nat_to_axial(pair.fst)
      let {i,   j} = Web.Kaelin.Coord.to_screen_xy(coord)
      let i = U32.sub(i, Web.Kaelin.Constants.hexagon_radius)
      let j = U32.sub(j, Web.Kaelin.Constants.hexagon_radius)
      for entity in pair.snd with img:
        case entity {
          background:
          case state { 
            game:
              grass = Web.Kaelin.Draw.terrain(coord, pair.snd , img, state.cast_info)
              VoxBox.Draw.image(i, j, 0#32, grass, img)

          }default img
        }default img
      img
    img














//Web.Kaelin.Draw.state.background(state: Web.Kaelin.State, img: VoxBox, map: Web.Kaelin.Map): VoxBox
  //let list = NatMap.to_list!(map)
  //case state { 
    //game: case state.cast_info as cast { 
      //none: img
      //some: 
        //open cast.value
        //range = Web.Kaelin.Coord.Axial.range(cast.value.hero_pos, cast.value.range)
        //?v
    //}
  //}default img
  ////for pair in list with img:

//List.elem!(Coord.eql, ?x, range)

    //open pair
    //let coord = Web.Kaelin.Coord.Convert.nat_to_axial(pair.fst)
    //let {i,   j} = Web.Kaelin.Coord.to_screen_xy(coord)
    //let i = U32.sub(i, Web.Kaelin.Constants.hexagon_radius)
    //let j = U32.sub(j, Web.Kaelin.Constants.hexagon_radius)
    //for entity in pair.snd with img:
      //case entity {
        //background:
        //case state { 
          //game:
            //grass = Web.Kaelin.Draw.terrain(coord, pair.snd , img, state.cast_info)
            //VoxBox.Draw.image(i, j, 0#32, grass, img)

        //}default img
      //}default img
    //img
  //img
