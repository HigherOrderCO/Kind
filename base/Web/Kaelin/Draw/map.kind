// Draws a map of hexagons given the style "offset coordinates"
Web.Kaelin.Draw.map(img: VoxBox, map: Web.Kaelin.Map): VoxBox
  let img = VoxBox.clear(img)
  let col = Col32.new(0#32, 0#32, 5#32, 5#32)
  let map_size = Web.Kaelin.Resources.map_size
  let width = U32.add(U32.mul(map_size, 2#32), 1#32) // map_size * 2 + 1
  let height = U32.add(U32.mul(map_size, 2#32), 1#32) // map_size * 2 + 1
  let hex_rad = Web.Kaelin.Resources.hexagon_radius

  // loops through the half of the map_size
  for j : U32 from 0#32 to height with img:
    for i : U32 from 0#32 to width with img:
      // generate int axial coordinate
      let coord_i = Int.sub(Int.new(0, U32.to_nat(i)), Int.new(0, U32.to_nat(map_size))) // i - map_size
      let coord_j = Int.sub(Int.new(0, U32.to_nat(j)), Int.new(0, U32.to_nat(map_size))) // j - map_size
      let coord = Web.Kaelin.Coord.new( coord_i, coord_j)
      let fit = Web.Kaelin.Coord.fit(coord, map_size)

      case fit {
        true:
          let map = Web.Kaelin.Draw.background(coord, map)
          // Draws the hexagon border
          let {cx, cy} = Web.Kaelin.Coord.to_screen_xy(coord)
          let img = Web.Kaelin.Draw.hexagon_border(cx, cy, hex_rad, col, img)
          // Draw coordinates
          let img = Web.Kaelin.Draw.tile.empty(coord, map, img)
          // Draws the entities
          let img = Web.Kaelin.Draw.tile(coord, map, img)
          img
        false:
          // Draws nothing
          img
      }
    img
  img