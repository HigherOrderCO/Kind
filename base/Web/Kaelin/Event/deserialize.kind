// Converts a 256-bit hex string to an event
// waiting for i32

Web.Kaelin.Event.deserialize(code: String) : Maybe(Web.Kaelin.Event)
  def next = ((x) Web.Kaelin.Event.Buffer.next(x)) :: Web.Kaelin.Event.Buffer -> Web.Kaelin.Event.Buffer
  def get = ((x) Web.Kaelin.Event.Buffer.get(x)) :: Web.Kaelin.Event.Buffer -> Nat
  def push = ((x, y) Web.Kaelin.Event.Buffer.push(x, y)) :: Web.Kaelin.Event.Buffer -> List<U8> -> Web.Kaelin.Event.Buffer
  let stream = Web.Kaelin.Event.Buffer.new(code, Web.Kaelin.Event.Code.action)
  switch (Nat.eql(get(stream))) {
    1 : 
     stream = next(stream)
     // create_hero
     stream = push(stream, Web.Kaelin.Event.Code.create_hero)
     Maybe.some!(Web.Kaelin.Event.create_hero(Nat.to_u8(get(stream))))
    4 : 
      stream = next(stream)
      // user_input
      stream = push(stream, Web.Kaelin.Event.Code.user_input)
      let action = Web.Kaelin.Resources.Action.to_action(get(stream))
      stream = next(stream)
      let pos = Web.Kaelin.Coord.Convert.nat_to_axial(get(stream))
      Maybe.bind!(Web.Kaelin.Event, action, (action) Maybe.some!(Web.Kaelin.Event.user_input(pos, action)))
      // TODO : VALIDATE THE POSITION OF CODIFICATION
  } default Maybe.none!

 // log(Nat.show(Web.Kaelin.Event.Buffer.get(stream)))
 // stream = Web.Kaelin.Event.Buffer.next(stream)
 // log(Nat.show(Web.Kaelin.Event.Buffer.get(stream)))
 // stream = Web.Kaelin.Event.Buffer.next(stream)
 // log(Web.Kaelin.Coord.show(Web.Kaelin.Coord.Convert.nat_to_axial(Web.Kaelin.Event.Buffer.get(stream))))