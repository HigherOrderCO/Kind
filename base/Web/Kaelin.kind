// >> FIXME: update to use new App <<

// init:
// Bem-vindo ao Kaelin!
// Digite uma sala e aperte enter: 0x108309300

// void:
// Sala vazia. Digite um DraftString para começar um jogo:
// sipher@Croni, sejagentil@Zeralul / stanci@Murlok, derenash@Keropao

// for test
// TODO: serialize and deserialize
Web.Kaelin.Command.create_hero(hero_name: String) : String
  switch String.eql(hero_name) {
    "croni" : "0x1000000000000000000000000000000000000000000000000000000000000001"    
  } default   "0x0000000000000000000000000000000000000000000000000000000000000000"

// A demo application that renders a square on the screen
Web.Kaelin: App(Web.Kaelin.State)
  let img = VoxBox.alloc_capacity(65536#32)
  // Initial state
  let init = 
    let map = {}
    let map = Web.Kaelin.Draw.initial_ent(map)
    Web.Kaelin.State.game(Web.Kaelin.Resources.room, 0, {}, map, App.EnvInfo.new({0#32, 0#32}, {0#32, 0#32}))

  // Render function
  //  0#16 - 10#16: contagem regressiva
  // 10#16 - 20#16: escolha do turno 0
  // 20#16 - 30#16: animação do turno 0
  // 30#16 - 40#16: escolha do turno 1
  // 40#16 - 50#16: animação do turno 1
  // 50#16 - 60#16: escolha do turno 2
  let draw = (state)
    case state {
      game: 
        // TODO: resolve background in front of entity
        let img = Web.Kaelin.Draw.map(img, state.map)
        let img = Web.Kaelin.Draw.state(img, state)
        DOM.vbox({}, {}, img)
    } default DOM.text("TODO: create the renderer for this game state mode")

  // Event handler
  let when = (event, state)
    case event state {
      init game: IO {
        App.print("Kaelin started!!!")
        App.watch(Web.Kaelin.Resources.room)
      }
      key_down game:
        switch U16.eql(event.code) {
          48#16: App.post(state.room, Web.Kaelin.Command.create_hero("croni"))
        } default App.pass
       mouse_up game :
           let info = state.interface
           open info
           let pos = info.mouse_pos
           open pos
           let {x, y} = {U32.div(pos.fst, 2#32), 
             U32.div(pos.snd, 2#32)}
           App.print(Pair.show(U32, U32, U32.show, U32.show,
             {x, y}))
       tick game:
           let info = event.info
           App.store!(Web.Kaelin.Action.update_interface(info, state))
      post game:
        log(event.data)
        switch String.starts_with(event.data) {
          "0x1": App.store!(Web.Kaelin.Action.create_player(event.addr, "croni", state))
        } default App.pass
    } default App.pass

  //// The application
  App.new!(init, draw, when)
