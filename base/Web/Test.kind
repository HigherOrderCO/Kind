// A demo application that renders a square on the screen
Web.Test: App(U32)
  let img = Image3D.alloc_capacity(65536u)

  // Initial state
  let init = 10u

  // Render function
  let draw = (state)
    let img = Image3D.clear(img) // O(1)
    let col = Col32.new(0u, 0u, 255u, 255u)
    //let img = Image3D.Draw.deresagon(128u, 128u, 0u, state, col, img)
    let rad = state
    for j : U32 from 0u to 5u with img:
      for i : U32 from 0u to 5u with img:
        let hlf = U32.div(rad,2u)
        let cx = U32.sub(128u,U32.mul(rad,4u))
        let cx = U32.add(cx,U32.mul(U32.mul(rad,2u),i))
        let cy = U32.sub(128u,U32.mul(hlf,5u))
        let cy = U32.add(cy,U32.mul(U32.mul(hlf,3u),j))
        let cx = if U32.eql(U32.mod(j,2u),0u) then cx else U32.add(cx,rad)
        //let cy = if U32.eql(U32.mod(j,2u),0u) then cy else U32.add(cy,1u)
        Image3D.Draw.deresagon(cx,cy,0u,rad,col,img)
      img
    App.Render.pix(img)

  // Event handler
  let when = (event, state)
    case event {
      xkey: [App.Action.state!(U32.add(state, 1u))]
    } default []

  // The application
  App.new!(init, draw, when)
