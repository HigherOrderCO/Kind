Kind.Error.show(error: Kind.Error, defs: Kind.Defs): String
  case error {
    type_mismatch: 
      let expected = case error.expected {
        left: error.expected.value
        right: Kind.Term.show(Kind.Term.normalize(error.expected.value, {}))
      }
      let detected = case error.detected {
        left: error.detected.value
        right: Kind.Term.show(Kind.Term.normalize(error.detected.value, {}))
      }
      "Type mismatch.\n"
      | "- Expected: " | expected | "\n"
      | "- Detected: " | detected | "\n"
      | case error.context { nil: "", cons: "With context:\n" | Kind.Context.show(error.context) }
    waiting:
      "Waiting for '" | error.name | "'."
    indirect:
      "Error on dependency '" | error.name | "'."
    show_goal:
      let goal_name = "Goal ?" | Kind.Name.show(error.name) | ":\n"
      let with_type = 
        without error.goal: ""
        let goal = Kind.Term.expand(error.dref, error.goal, defs)
        "With type: "
        | (if error.verb then Kind.Term.show.go(goal, some((x) x)) else Kind.Term.show(goal))
        | "\n"
      let with_ctxt = case error.context {
        nil: ""
        cons: "With context:\n" | Kind.Context.show(error.context)
      }
      String.flatten([goal_name, with_type, with_ctxt])
    patch:
      "Patching: " | Kind.Term.show(error.term)
    undefined_reference: 
      "Undefined reference: " | Kind.Name.show(error.name) | "\n"
    cant_infer:
      let term = Kind.Term.show(error.term)
      let context = Kind.Context.show(error.context)
      "Can't infer type of: " | term | "\n"
      | "With context:\n" | context
  }
