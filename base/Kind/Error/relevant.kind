Kind.Error.is_undef(error: Kind.Error): Bool
  case error { undefined_reference: true } default false

Kind.Error.is_mistake(error: Kind.Error): Bool
  case error { type_mismatch: true, cant_infer: true } default false

Kind.Error.is_goal(error: Kind.Error): Bool
  case error { show_goal: true } default false

Kind.Error.relevant(errors: List<Kind.Error>): List<Kind.Error>
  let undefs   = List.filter!(Kind.Error.is_undef, errors)
  let mistakes = List.filter!(Kind.Error.is_mistake, errors)
  let goals    = List.filter!(Kind.Error.is_goal, errors)
  case undefs {
    nil: case mistakes {
      nil: goals
      cons: [mistakes.head] ++ goals
    }
    cons: undefs ++ goals
  }
