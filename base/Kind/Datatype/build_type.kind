Kind.Datatype.build_type(type: Kind.Datatype): Kind.Term
  case type {
    new: Kind.Datatype.build_type.go(type, type.name, type.pars, type.inds),
  }

Kind.Datatype.build_type.go(
  type: Kind.Datatype,
  name: Kind.Name,
  pars: List<Kind.Binder>,
  inds: List<Kind.Binder>,
): Kind.Term
  case pars {
    cons: case pars.head {
      new:
        def par_eras = pars.head.eras;
        def par_name = pars.head.name;
        def par_xtyp = pars.head.term;
        def par_body = (s,x) Kind.Datatype.build_type.go(type, name, pars.tail, inds);
        Kind.Term.all(Bool.false, "", par_name, par_xtyp, par_body)
    },
    nil: case inds {
      cons: case inds.head {
        new: 
          def ind_eras = inds.head.eras;
          def ind_name = inds.head.name;
          def ind_xtyp = inds.head.term;
          def ind_body = (s,x) Kind.Datatype.build_type.go(type, name, pars, inds.tail);
          Kind.Term.all(Bool.false, "", ind_name, ind_xtyp, ind_body)
      },
      nil: Kind.Term.typ,
    }
  }
