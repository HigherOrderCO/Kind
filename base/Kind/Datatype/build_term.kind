Kind.Datatype.build_term(type: Kind.Datatype): Kind.Term
  case type {
    new: Kind.Datatype.build_term.go(type, type.name, type.pars, type.inds),
  }

Kind.Datatype.build_term.go(
  type: Kind.Datatype,
  name: Kind.Name,
  pars: List<Kind.Binder>,
  inds: List<Kind.Binder>,
): Kind.Term
  case pars {
    cons:
      open pars.head
      def par_name = pars.head.name
      def par_body = (x) Kind.Datatype.build_term.go(type, name, pars.tail, inds)
      Kind.Term.lam(par_name, par_body)
    nil: case inds {
      cons:
        open inds.head
        def ind_name = inds.head.name
        def ind_body = (x) Kind.Datatype.build_term.go(type, name, pars, inds.tail)
        Kind.Term.lam(ind_name, ind_body)
      nil: 
        def moti = Kind.Datatype.build_term.motive(type)
        def body = (s,x) Kind.Datatype.build_term.constructors(type) // TODO
        Kind.Term.all(Bool.true, String.concat(name,".Self"), Kind.Name.read("P"), moti, body)
    }
  }

Kind.Datatype.build_term.constructor(type: Kind.Datatype, ctor: Kind.Constructor): Kind.Term
  open ctor
  Kind.Datatype.build_term.constructor.go(type, ctor, ctor.args)

Kind.Datatype.build_term.constructor.go(
  type: Kind.Datatype,
  ctor: Kind.Constructor,
  args: List<Kind.Binder>,
): Kind.Term
  case args {
    cons:
      open args.head
      let eras = args.head.eras
      let name = args.head.name
      let xtyp = args.head.term
      let body = Kind.Datatype.build_term.constructor.go(type, ctor, args.tail)
      Kind.Term.all(eras, "", name, xtyp, (s,x) body)
    nil:
      open type
      open ctor
      let ret = Kind.Term.ref(Kind.Name.read("P"))
      let ret = for v in ctor.inds:
        Kind.Term.app(ret, case v { new: v.term })
      let ctr = String.flatten([type.name,Kind.Name.read("."),ctor.name])
      let slf = Kind.Term.ref(ctr)
      let slf = for v in type.pars:
        Kind.Term.app(slf, Kind.Term.ref(case v { new: v.name }))
      let slf = for v in ctor.args:
        Kind.Term.app(slf, Kind.Term.ref(case v { new: v.name }))
      Kind.Term.app(ret, slf)
  }

Kind.Datatype.build_term.constructors(type: Kind.Datatype): Kind.Term
  open type
  Kind.Datatype.build_term.constructors.go(type, type.name, type.ctrs)

Kind.Datatype.build_term.constructors.go(
  type: Kind.Datatype,
  name: Kind.Name,
  ctrs: List<Kind.Constructor>,
): Kind.Term
  case ctrs {
    cons:
      open ctrs.head
      Kind.Term.all(Bool.false, "",
        ctrs.head.name,
        Kind.Datatype.build_term.constructor(type, ctrs.head),
        (s,x) Kind.Datatype.build_term.constructors.go(type, name, ctrs.tail))
    nil:
      open type
      let ret = Kind.Term.ref(Kind.Name.read("P"));
      let ret = for v in type.inds:
        Kind.Term.app(ret, Kind.Term.ref(case v { new: v.name }));
      Kind.Term.app(ret, Kind.Term.ref(String.concat(name,".Self")))
  }

Kind.Datatype.build_term.motive(
  type: Kind.Datatype,
): Kind.Term
  open type
  Kind.Datatype.build_term.motive.go(type, type.name, type.inds)

Kind.Datatype.build_term.motive.go(
  type: Kind.Datatype,
  name: Kind.Name,
  inds: List<Kind.Binder>,
): Kind.Term
  case inds {
    cons:
      open inds.head
      def ind_eras = inds.head.eras
      def ind_name = inds.head.name
      def ind_xtyp = inds.head.term
      def ind_body = (s,x) Kind.Datatype.build_term.motive.go(type, name, inds.tail)
      Kind.Term.all(ind_eras, "", ind_name, ind_xtyp, ind_body)
    nil:
      open type
      let slf = Kind.Term.ref(name)
      let slf = for v in type.pars:
        Kind.Term.app(slf, Kind.Term.ref(case v { new: v.name }))
      let slf = for v in type.inds:
      Kind.Term.app(slf, Kind.Term.ref(case v { new: v.name }))
      Kind.Term.all(Bool.false, "", "", slf, (s,x) Kind.Term.typ)
  }
