Kind.Synth.load.go(name: String, files: List<String>, defs: Kind.Defs): IO<Maybe<Kind.Defs>>
  case files {
    nil: IO {
      return none
    }
    cons: IO {
      get code = IO.get_file(files.head)
      let read = Kind.Defs.read(files.head, code, defs)
      case read {
        left: Kind.Synth.load.go(name, files.tail, defs)
        right: IO {
          let defs = read.value
          case Kind.Map.get!(name, defs) as got {
            none: Kind.Synth.load.go(name, files.tail, defs),
            some: IO {
              return some(defs)
            }
          }
        }
      }
    }
  }
