Kind.api.io.check_file(file: String): IO<Unit>
  IO {
    get loaded = Kind.Synth.file(file, Kind.Map.new!)
    case loaded {
      left: IO {
        IO.print(String.flatten(["On '", file, "':"]))
        IO.print(loaded.value)
      }
      right: case loaded.value {
        new: IO {
          let nams = loaded.value.fst
          let defs = loaded.value.snd
          case nams {
            nil: IO.print("File not found or empty: '" | file | "'.")
            cons: IO {
              IO.print(Kind.Defs.report(defs, nams))
              Kind.Defs.cache(defs)
            }
          }
        }
      }
    }
  }
