// Core grammar
// ============

Kind.Comp.Target.Scheme.null: String
  "'()"

Kind.Comp.Target.Scheme.name(name: String): String
  if String.is_empty(name) then
    "-"
  else
    name

Kind.Comp.Target.Scheme.inst_name(name: String): String
  name|"-inst"

Kind.Comp.Target.Scheme.elim_name(name: String): String
  name|"-elim"

Kind.Comp.Target.Scheme.lambda(name: String, body: String): String
  "(lambda (" | name | ") " | body | ")"

Kind.Comp.Target.Scheme.application(func: String, argm: String): String
  "(" | func | " " | argm | ")"

Kind.Comp.Target.Scheme.local_definition(name: String, expr: String, body: String): String
  "(let ((" | name | " " | expr | ")) " | body | ")"

Kind.Comp.Target.Scheme.global_function(name: String, args: List<String>, body: String): String
  case args {
    nil: "(define " | name | " " | body | ")\n"
    cons:
      "(define ($" | name | " " | String.join(" ", args) | ") " | body | ")\n"
      |Kind.Comp.Target.Scheme.nest_lambdas(name, args)
  }

Kind.Comp.Target.Scheme.global_application(name: String, args: List<String>): String
  "($" | name | " " | String.join(" ", args) | ")"

// TODO better names
Kind.Comp.Target.Scheme.nest_lambdas(name: String, args: List<String>): String
  let body = Kind.Comp.Target.Scheme.nest_lambdas.aux(name, args, args)
  "(define " | name | " " | body | ")\n"

// TODO better names
Kind.Comp.Target.Scheme.nest_lambdas.aux(fun: String, args: List<String>, rem_args: List<String>): String
  // first args won't change
  def this = Kind.Comp.Target.Scheme.nest_lambdas.aux(fun, args)
  case rem_args {
    nil:
      Kind.Comp.Target.Scheme.global_application(fun, args)
    cons:
      Kind.Comp.Target.Scheme.lambda(rem_args.head, this(rem_args.tail))
  }

Kind.Comp.Target.Scheme.string_literal(str: String): String
  case str {
    nil:
      ""
    cons:
      (if U16.eql(str.head, '\\') || U16.eql(str.head, '"') then
        "\\" | Char.to_string(str.head)
      else if U16.gte(str.head, ' ') && U16.lte(str.head, '~') then
        Char.to_string(str.head)
      else
        "\\x" | U16.show_hex(str.head) | ";"
      ) | Kind.Comp.Target.Scheme.string_literal(str.tail)
  }

Kind.Comp.Target.Scheme.nat(nat: Nat): String
  Nat.show(nat)

Kind.Comp.Target.Scheme.module(name: String, exports: List(String), defs: String): String
  let code = "#!chezscheme\n(library ("|name|") (export"
  for export in Kind.Comp.Target.Scheme.exports with code:
    code|" "|export
  for export in exports with code:
    code|" "|export
  let code = code|")\n"
  let code = code|`(import (chezscheme))\n`
  let code = code|defs|")"
  code

Kind.Comp.Target.Scheme.program(main: String, defs: String): String
  let code = defs|"(run_kind "|main|")"
  code

Kind.Comp.Target.Scheme.select(term: String, cse_body_list: List<Pair<String, String>>): String
  let cses = ""
  for cse_body in cse_body_list with cses:
    {cse, body} = cse_body
    cses|" ("|cse|" "|body|")"
  "(case "|term|cses|")"

Kind.Comp.Target.Scheme.grammar: Kind.Comp.Grammar
  Kind.Comp.Grammar.new(
    Kind.Comp.Target.Scheme.null
    Kind.Comp.Target.Scheme.name
    Kind.Comp.Target.Scheme.inst_name
    Kind.Comp.Target.Scheme.elim_name
    Kind.Comp.Target.Scheme.lambda
    Kind.Comp.Target.Scheme.application
    Kind.Comp.Target.Scheme.local_definition
    Kind.Comp.Target.Scheme.global_function
    Kind.Comp.Target.Scheme.global_application
    Kind.Comp.Target.Scheme.select
    Kind.Comp.Target.Scheme.string_literal
    Kind.Comp.Target.Scheme.nat
    Kind.Comp.Target.Scheme.module
    Kind.Comp.Target.Scheme.program
  )

// Native types
// ============

Kind.Comp.Target.Scheme.natives: Kind.Comp.Natives
  (prim) case prim {
    unit: Kind.Comp.Native.new(
      // Inst
      [
        // Unit.new
        {0, "#t"}
      ]
      // Elim
      {"#t", [
        // case new
        {"#t", []}
      ]})
    bits: Kind.Comp.Native.new(
      // Inst
      [
        // Bits.e
        {0, "#b1"}
        // Bits.o
        {1, "(bitwise-arithmetic-shift-left $0 #b1)"}
        // Bits.i
        {1, "(bitwise-ior (bitwise-arithmetic-shift-left $0 #b1) #b1)"}
      ]
      // Elim
      {"(if (eq? $0 #b1) 2 (bitwise-and $0 #b1))", [
        // case e
        {"2", []}
        // case o
        {"0", ["(bitwise-arithmetic-shift-right $0 #b1)"]}
        // case i
        {"1", ["(bitwise-arithmetic-shift-right $0 #b1)"]}
      ]})
    bool: Kind.Comp.Native.new(
      // Inst
      [
        // Bool.true
        {0, "#t"}
        // Bool.false
        {0, "#f"}
      ]
      // Elim
      {"$0", [
        // case true
        {"#t", []}
        // case false
        {"#f", []}
      ]})
    nat: Kind.Comp.Native.new(
      // Inst
      [
        // Nat.zero
        {0, "0"}
        // Nat.succ
        {1, "(+ $0 1)"}
      ]
      // Elim
      {"(= $0 0)", [
        // case zero
        {"#t", []}
        // case succ
        {"#f", [
          // x.pred
          "(- $0 1)"
        ]}
      ]})
    u16: Kind.Comp.Native.new(
      // Inst
      [
        // U16.new
        {1, "(word-to-u16 $0)"}
      ]
      // Elim
      {"#t", [
        // case new
        {"#t", [
          "(u16-to-word $0)" // x.value
        ]}
      ]})
    u32: Kind.Comp.Native.new(
      // Inst
      [
        // U16.new
        {1, "(word-to-u 32 $0)"}
      ]
      // Elim
      {"#t", [
        // case new
        {"#t", [
          "(u-to-word 32 $0)" // x.value
        ]}
      ]})
    string: Kind.Comp.Native.new(
      // Inst
      [
        // String.nil
        {0, "\"\""}
        // String.cons
        {2, "(kstring-append (make-string 1 (integer->char $0)) $1)"}
      ]
      // Elim
      {"(<= (kstring-length $0) 0)", [
        // case nil
        {"#t", []}
        // case cons
        {"#f", [
          // x.head
          "(char->integer (kstring-head $0))",
          // x.tail
          "(kstring-tail $0)",
        ]}
      ]})
    data: Kind.Comp.Native.new(
      // Inst
      List.fold!(prim.ctrs)!([], (ctr, result)
        let {ctr_name, ctr_fields} = ctr
        let fields_size = List.length!(ctr_fields)
        let fields_vars = String.join("", List.create!(fields_size, (x) " $"|Nat.show(x)))
        {fields_size, "(vector '"|prim.name|"."|ctr_name|fields_vars|")"} & result),
      // Elim
      {"(get $0 0)", List.fold!(prim.ctrs)!([], (ctr, result)
        let {ctr_name, ctr_fields} = ctr
        let fields_size = List.length!(ctr_fields)
        let fields_gets = List.create!(fields_size, (i) "(get $0 "|Nat.show(Nat.succ(i))|")")
        {"'"|prim.name|"."|ctr_name, fields_gets} & result)
      })
  }

// Optimized functions
// ===================

Kind.Comp.Target.Scheme.optimizeds: Kind.Comp.Optimizeds
  {
    "Bool.not": {1, "(not $0)"},
    "Bool.and": {2, "(and $0 $1)"},
    "Bool.if": {3, "(if $0 $1 $2)"},
    "Bool.or": {2, "(or $0 $1)"},
    "Nat.add": {2, "(+ $0 $1)"},
    "Nat.sub": {2, "(max (- $0 $1) 0)"},
    "Nat.mul": {2, "(* $0 $1)"},
    "Nat.div": {2, "(div $0 $1)"},
    "Nat.mod": {2, "(mod $0 $1)"},
    "Nat.pow": {2, "(expt $0 $1)"},
    "Nat.ltn": {2, "(< $0 $1)"},
    "Nat.lte": {2, "(<= $0 $1)"},
    "Nat.eql": {2, "(= $0 $1)"},
    "Nat.gte": {2, "(>= $0 $1)"},
    "Nat.gtn": {2, "(> $0 $1)"},
    "Nat.to_u16": {1, "$0"},
    "Nat.show": {1, "(number->string $0)"},
    "U16.add": {2, "(mod (+ $0 $1) 65536)"},
    "U16.sub": {2, "(mod (- $0 $1) 65536)"},
    "U16.mul": {2, "(mod (* $0 $1) 65536)"},
    "U16.div": {2, "(div $0 $1)"},
    "U16.mod": {2, "(mod $0 $1)"},
    "U16.pow": {2, "(mod (expt $0 $1) 65536)"},
    "U16.ltn": {2, "(< $0 $1)"},
    "U16.lte": {2, "(<= $0 $1)"},
    "U16.eql": {2, "(= $0 $1)"},
    "U16.gte": {2, "(>= $0 $1)"},
    "U16.gtn": {2, "(> $0 $1)"},
    "U16.inc": {2, "(+ $0 1)"},
    "U16.to_nat": {1, "$0"},
    // TODO test if this is faster than non-optimized comparison
    "String.eql": {2, "(string=? (kstring->string $0) (kstring->string $1))"},
    "String.concat": {2, "(kstring-append $0 $1)"},
  }

// Basic dependencies
// ==================

//Kind.Comp.Target.Scheme.utils_lib: String
//`#!chezscheme
//(library (utils) (export suffix? prefix? run-all run_io print-lines run_kind)
//  (import (chezscheme)
//          (kstring))
//` | Kind.Comp.Target.Scheme.utils | ")"
//
//Kind.Comp.Target.Scheme.kstring_lib: String
//`(library (kstring)
//  (export make-string-view string-view? string-view-end
//          string-view-start kstring-length kstring-head
//          kstring-tail string-view-ref kstring?
//          kstring->string kstring-append kstring-getter
//          kstring_join)
//  (import (chezscheme))
//` | Kind.Comp.Target.Scheme.kstring | ")" 

Kind.Comp.Target.Scheme.exports: Kind.Comp.Exports
  ["find-all-kind-files"
  "suffix?"
  "prefix?"
  "run-all"
  "run_io"
  "print-lines"
  "run_kind"
  "make-string-view"
  "string-view?"
  "string-view-end"
  "string-view-start"
  "kstring-length"
  "kstring-head"
  "kstring-tail"
  "string-view-ref"
  "kstring?"
  "kstring->string"
  "kstring-append"
  "kstring-getter"
  "kstring_join"]

Kind.Comp.Target.Scheme.basics: Kind.Comp.Basics
`; string-view record type (fast way to get a tail)
(define-record string-view
  ((immutable data)  ; underlying string
   (immutable start) ; start position (inclusive)
   (immutable end))) ; end position (exclusive)

(define string-view-ref
  (lambda (x y)
    (string-ref (string-view-data x) (+ (string-view-start x) y))))

(define kstring-tail
  (lambda (x)
    (if (string-view? x)
      (make-string-view
        (string-view-data x)
        (+ (string-view-start x) 1)
        (string-view-end x))
      (make-string-view
        x
        1
        (string-length x)))))

(define kstring-head
  (lambda (x)
    (if (string-view? x)
      (string-ref (string-view-data x) (string-view-start x))
      (string-ref x 0))))

(define kstring-length
  (lambda (x)
    (if (string-view? x)
      (- (string-view-end x) (string-view-start x))
      (string-length x))))

(define kstring?
  (lambda (x)
    (or (string-view? x) (string? x))))

(define kstring->string
  (lambda (x)
    (if (string-view? x)
      (substring (string-view-data x) (string-view-start x) (string-view-end x))
      x)))

; TODO depending on x, we could safely append data at the end
(define kstring-append
  (lambda (x y)
    (string-append (kstring->string x) (kstring->string y))))

(define kstring-getter
  (lambda (x)
    (if (string-view? x)
      string-view-ref
      string-ref)))

; Joins a list of strings with an intercalated separator
(define (kstring_join sep strs fst)
  (if (null? strs) 
    ""
    (kstring-append
      (if fst "" sep)
      (car strs)
      (kstring_join sep (cdr strs) #f))))

; Short alias to vector-ref
(define get vector-ref)

; Converts a Kind word to a native integer
(define (word-to-u16 w)
  (define (word-to-u16-go i w x)
    (cond ((= 16 i) x)
      ((symbol=? 'Word.e (get w 0)) (word-to-u16-go (+ i 1) (vector 'Word.e) x))
      ((symbol=? 'Word.o (get w 0)) (word-to-u16-go (+ i 1) (get w 1) x))
      ((symbol=? 'Word.i (get w 0)) (word-to-u16-go (+ i 1) (get w 1) (fxior x (fxarithmetic-shift-left 1 i))))))
  (word-to-u16-go 0 w 0))

(define (word-to-u n w)
  (define (word-to-u-go n i w x)
    (cond ((= n i) x)
      ((symbol=? 'Word.e (get w 0)) (word-to-u-go n (+ i 1) (vector 'Word.e) x))
      ((symbol=? 'Word.o (get w 0)) (word-to-u-go n (+ i 1) (get w 1) x))
      ((symbol=? 'Word.i (get w 0)) (word-to-u-go n (+ i 1) (get w 1) (fxior x (fxarithmetic-shift-left 1 i))))))
  (word-to-u-go n 0 w 0))

; Converts a native integer to a Kind word
(define (u16-to-word x)
  (define (u16-to-word-go i x w)
    (if (= 16 i) w (u16-to-word-go (+ i 1) x
      (if (= (fxand (fxarithmetic-shift-right x (- 15 i)) 1) 0)
        (vector 'Word.o w)
        (vector 'Word.i w)))))
  (u16-to-word-go 0 x (vector 'Word.e)))

(define (u-to-word n x)
  (define (u-to-word-go n i x w)
    (if (= n i) w (u-to-word-go n (+ i 1) x
      (if (= (fxand (fxarithmetic-shift-right x (- n (+ i 1))) 1) 0)
        (vector 'Word.o w)
        (vector 'Word.i w)))))
  (u-to-word-go n 0 x (vector 'Word.e)))

(define suffix?
  (lambda (str suff)
    (let ((suff_length (string-length suff))
          (str_length (string-length str)))
      (if (<= suff_length str_length)
        (string=?
          (substring str (- str_length suff_length) str_length)
          suff)
        #f))))

(define prefix?
  (lambda (str pref)
    (let ((pref_length (string-length pref))
          (str_length (string-length str)))
      (if (<= pref_length str_length)
        (string=?
          (substring str 0 pref_length)
          pref)
        #f))))

(define (list->klist list)
  (if (null? list)
    (vector 'List.nil)
    (vector 'List.cons (car list) (list->klist (cdr list)))))

(define (find-all-kind-files-aux path)
    (let ((file_list (directory-list path)))
      (define (aux file_list)
          (if (null? file_list)
            '()
            (let ((file (string-append path (car file_list))))
              (let ((found-files
                      (if (file-directory? file)
                          (find-all-kind-files-aux (string-append file "/"))
                          (if (and (file-regular? file) (suffix? file ".kind"))
                              (list file)
                              '()))))
                   (append found-files (aux (cdr file_list)))))))
      (aux file_list)))

(define (find-all-kind-files path)
  (list->klist (find-all-kind-files-aux path)))

; Returns the last index that chr occurs in str, -1 otherwise
(define (last_index_of chr kstr idx)
  (let ((str (kstring->string kstr)))
    (if (= idx (kstring-length str))
      -1
      (let ((rest (last_index_of chr str (+ idx 1))))
        (if (char=? (string-ref str idx) chr)
          (max idx rest)
          rest)))))

; Returns the first index that chr occurs in str, -1 otherwise
(define (first_index_of chr kstr idx)
  (let ((str (kstring->string kstr)))
    (if (= idx (string-length str))
      -1
      (if (char=? (string-ref str idx) chr)
        idx
        (first_index_of chr str (+ idx 1))))))

; Splits a string using an identifier
(define (split_at_first chr kstr)
  (let ((str (kstring->string kstr)))
    (let ((split_idx (first_index_of chr str 0)))
      (if (= split_idx -1)
        str
        (cons
          (substring str 0 split_idx)
          (substring str (+ split_idx 1) (string-length str)))))))

; Splits a string using an identifier
(define (split_at_last chr kstr)
  (let ((str (kstring->string kstr)))
    (let ((split_idx (last_index_of chr str 0)))
      (if (= split_idx -1)
        str
        (cons
          (substring str 0 split_idx)
          (substring str (+ split_idx 1) (string-length str)))))))

; Converts a date to a string, in milliseconds
(define (time_to_string time)
  (number->string
    (+ (* (time-second time) 1000)
      (div (time-nanosecond time) 1000000))))

; Prints a text with a newline
(define (print txt)
  (display (kstring->string txt))
  (display "
"))

; Gets a line from stdin
(define (get_line)
  (let ((port (current-input-port)))
    (get-line port)))

; Deletes a file
(define (del_file file)
  (delete-file (kstring->string file)))

; Gets the contents of a file as a string
; If it doesn't exist, returns empty
(define (get_file ifile)
  (let ((file (kstring->string ifile)))
    (if (file-exists? file)
      (let ((port (open-input-file file)))
        (let ((text (get-string-all port)))
          (begin
            (close-input-port port)
            text)))
      "")))

; Sets the contents of a file
(define (set_file file text)
  (system (string-append "mkdir -p " (car (split_at_last #\/ file))))
  (if (file-exists? file) (delete-file file))
  (let ((port (open-output-file file)))
    (begin
      (display text port)
      (close-output-port port))))

; Returns a list of files in a directory
(define (get_dir path)
  (directory-list path)) 

; Returns the time a file was modified. TODO: test on Windows/Linux
(define (get_file_mtime file)
  (time_to_string (file-modification-time (kstring->string file))))

; Returns the current time
(define (get_time)
  (time_to_string (current-time)))

; Performs a single Kind IO action
(define (io_action iname)
  (let ((name (kstring->string iname)))
  (case name
    ("print" (lambda (x) (print x)))
    ("put_string" (lambda (x) (display x)))
    ("get_line" (lambda (x) (get_line)))
    ("del_file" (lambda (x) (del_file x)))
    ("get_file" (lambda (x) (get_file x)))
    ("set_file" (lambda (x) (let ((file_text (split_at_first #\= (kstring->string x)))) (set_file (car file_text) (cdr file_text)))))
    ("get_dir" (lambda (x) (get_dir x)))
    ("get_file_mtime" (lambda (x) (get_file_mtime x)))
    ("get_time" (lambda (x) (get_time)))
    ("request" (lambda (x) ""))
    (else (display (string-append "IO action not found: " name))))))

; Runs a Kind IO program
(define (run_io io)
  (case (vector-ref io 0)
    ('IO.end (vector-ref io 1))
    ('IO.ask (let (
      (io_query (vector-ref io 1))
      (io_param (vector-ref io 2))
      (io_then (vector-ref io 3)))
      (run_io (io_then ((io_action io_query) io_param)))))))

(define (run_kind term)
  (if
    (and
      (vector? term)
      (or
        (eq? (vector-ref term 0) 'IO.ask)
        (eq? (vector-ref term 0) 'IO.end)))
    (run_io term)
    (print term)))

(define (print-lines args)
  (unless (null? args)
    (display (car args))
    (newline)
    (print-lines (cdr args))))

(define run-all
    (lambda (p)
      (let ((code (get-datum p)))
        (unless (eq? code #!eof)
          (compile code)
          (run-all p)))))
`

// TODO translate this to kind somehow
Kind.Comp.Target.Scheme.cli: String
`#!/usr/bin/env scheme-script
(import (kind)
        (chezscheme))
(let ([args (cdr (command-line))])
  (if (null? args)
    (print-lines
    '("# kind-scm `|Kind.version|`"
      ""
      "Usage:"
      ""
      "  kind-scm Module/               # type-checks a module"
      "  kind-scm Module/file.kind      # type-checks a file"
      "  kind-scm full_term_name --run  # runs a term"
      "  kind-scm full_term_name --show # prints a term"
      "  kind-scm full_term_name --norm # prints a term's λ-normal form"
      "  kind-scm full_term_name --scm  # compiles a term to Scheme"
      "  kind-scm full_term_name --js   # compiles a term to JavaScript"
      "  kind-scm full_term_name --fmc  # compiles a term to FormCore"
      ""
      "Examples:"
      ""
      "  # Run the 'Main' term (outputs 'Hello, world'):"
      "  kind-scm Main --run"
      ""
      "  # Type-check all files inside the 'Nat' module:"
      "  kind-scm Nat/"
      ""
      "  # Type-check the 'Nat/add.kind' file:"
      "  kind-scm Nat/add.kind"
      ""
      "  # Type-check the 'Nat.add' term:"
      "  kind-scm Nat.add"
      ""
      "  # Compile the 'Nat.add' term to JavaScript:"
      "  kind-scm Nat.add --js"
      ""
      "  # Print the λ-encoding of Nat:"
      "  kind-scm Nat --show"
      ""
      "  # Print the λ-normal form of 2 + 2:"
      "  kind-scm Example.two_plus_two --norm"))
    (let ((fst_arg (car args))
          (tail_args (cdr args)))
      (if (null? tail_args)
        (if (suffix? fst_arg ".kind")
          (run_io (Kind.api.io.check_file fst_arg))
          (if (suffix? fst_arg "/")
            (run_io (Kind.api.check_files (find-all-kind-files fst_arg)))
            (run_io (Kind.api.io.check_term fst_arg))))
        (let ((snd_arg (car tail_args)))
          (case snd_arg
            ("--scm"
             (display (run_io (Kind.api.io.term_to_scheme fst_arg))))
            ("--run"
             (let ((code (open-string-input-port (run_io (Kind.api.io.term_to_scheme fst_arg)))))
               (run-all code)))
            ("--show"
              (display (run_io (Kind.api.io.show_term fst_arg))))
            ("--norm"
              (display (run_io (Kind.api.io.show_term_normal fst_arg))))
            ("--js"
              (let ((ports (process (string-append "fmc " (string-append "--js " fst_arg)))))
                (let ((input_port (car ports))
                      (output_port (car (cdr ports))))
                  (display
                    (run_io (Kind.api.io.term_to_core fst_arg))
                    output_port)
                  (flush-output-port)
                  (close-output-port output_port)
                  (display (get-string-all input_port)))))
            ;("--hs")
            ("--fmc"
              (display (run_io (Kind.api.io.term_to_core fst_arg))))
            (else
              (display "unrecognized cli argument: ")
              (display snd_arg))))))))`

// a little script to produce the scheme sources for kind-scm
// should be run in kind/base
Kind.Comp.Target.Scheme.bootstrap: IO(Unit)
  IO {
    let target_dir = "./../bin/scm/src/"
    get schemed = Kind.api.io.terms_to_scheme_lib("kind", Kind.api.exports)

    get u = IO.set_file(target_dir|"kind.sls", schemed)
    get u = IO.set_file(target_dir|"main.scm", Kind.Comp.Target.Scheme.cli)
    return u
  }

// Language
// ========

Kind.Comp.Target.Scheme.Language: Kind.Comp.Language
  Kind.Comp.Language.new(
    Kind.Comp.Target.Scheme.grammar
    Kind.Comp.Target.Scheme.natives
    Kind.Comp.Target.Scheme.optimizeds
    Kind.Comp.Target.Scheme.basics
  )
