// Shapes
// ======

// Describes the shape of each primitive when compiled to Scheme.
// For example, Kind's λ-encoded Nats are converted to Scheme numbers. This
// describes how to convert from λ-encodings to native numbers.
Kind.Comp.Target.Scheme.shape_of(prim: Kind.Comp.Prim): Kind.Comp.Prim.Shape
  case prim {
    unit: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // Unit.new
        {0, "#t"}
      ]
      // Elim
      {"#t", [
        // case new
        {"#t", []}
      ]})
    bool: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // Bool.true
        {0, "#t"}
        // Bool.false
        {0, "#f"}
      ]
      // Elim
      {"$0", [
        // case true
        {"#t", []}
        // case false
        {"#f", []}
      ]})
    nat: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // Nat.zero
        {0, "0"}
        // Nat.succ
        {1, "(+ $0 1)"}
      ]
      // Elim
      {"(= $0 0)", [
        // case zero
        {"#t", []}
        // case succ
        {"#f", [
          // x.pred
          "(- $0 1)"
        ]}
      ]})
    u16: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // U16.new
        {1, "(word-to-u16 $0)"}
      ]
      // Elim
      {"#t", [
        // case new
        {"#t", [
          "(u16-to-word $0)" // x.value
        ]}
      ]})
    string: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // String.nil
        {0, "\"\""}
        // String.cons
        {2, "(string-append (make-string 1 (integer->char $0)) $1)"}
      ]
      // Elim
      {"(= (string-length $0) 0)", [
        // case nil
        {"#t", []}
        // case cons
        {"#f", [
          // x.head
          "(char->integer (string-ref $0 0))",
          // x.tail
          "(let ((_str_ $0)) (substring _str_ 1 (string-length _str_)))",
        ]}
      ]})
    data: Kind.Comp.Prim.Shape.new(
      // Inst
      List.fold!(prim.ctrs)!([], (ctr, result)
        let {ctr_name, ctr_fields} = ctr
        let fields_size = List.length!(ctr_fields)
        let fields_vars = String.join("", List.create!(fields_size, (x) " $"|Nat.show(x)))
        {fields_size, "(vector '"|prim.name|"."|ctr_name|fields_vars|")"} & result),
      // Elim
      {"(get $0 0)", List.fold!(prim.ctrs)!([], (ctr, result)
        let {ctr_name, ctr_fields} = ctr
        let fields_size = List.length!(ctr_fields)
        let fields_gets = List.create!(fields_size, (i) "(get $0 "|Nat.show(Nat.succ(i))|")")
        {"'"|prim.name|"."|ctr_name, fields_gets} & result)
      })
  }

// Optimized operations
// ====================

Kind.Comp.Target.Scheme.optimized: Map(Pair(Nat,String))
  {
    "Bool.not": {1, "(not $0)"},
    "Bool.and": {2, "(and $0 $1)"},
    "Bool.if": {3, "(if $0 $1 $2)"},
    "Bool.or": {2, "(or $0 $1)"},
    "Nat.add": {2, "(+ $0 $1)"},
    "Nat.sub": {2, "(max (- $0 $1) 0)"},
    "Nat.mul": {2, "(* $0 $1)"},
    "Nat.div": {2, "(div $0 $1)"},
    "Nat.mod": {2, "(mod $0 $1)"},
    "Nat.pow": {2, "(expt $0 $1)"},
    "Nat.ltn": {2, "(< $0 $1)"},
    "Nat.lte": {2, "(<= $0 $1)"},
    "Nat.eql": {2, "(= $0 $1)"},
    "Nat.gte": {2, "(>= $0 $1)"},
    "Nat.gtn": {2, "(> $0 $1)"},
    "Nat.to_u16": {1, "$0"},
    "Nat.show": {1, "(number->string $0)"},
    "U16.add": {2, "(mod (+ $0 $1) 65536)"},
    "U16.sub": {2, "(mod (- $0 $1) 65536)"},
    "U16.mul": {2, "(mod (* $0 $1) 65536)"},
    "U16.div": {2, "(div $0 $1)"},
    "U16.mod": {2, "(mod $0 $1)"},
    "U16.pow": {2, "(mod (expt $0 $1) 65536)"},
    "U16.ltn": {2, "(< $0 $1)"},
    "U16.lte": {2, "(<= $0 $1)"},
    "U16.eql": {2, "(= $0 $1)"},
    "U16.gte": {2, "(>= $0 $1)"},
    "U16.gtn": {2, "(> $0 $1)"},
    "U16.inc": {2, "(+ $0 1)"},
    "U16.to_nat": {1, "$0"},
    "String.eql": {2, "(string=? $0 $1)"},
    "String.concat": {2, "(string-append $0 $1)"},
  }

// Base deps
// =========

Kind.Comp.Target.Scheme.base: String
`; Short alias to vector-ref
(define get vector-ref)

; Converts a Kind word to a native integer
(define (word-to-u16 w)
  (define (word-to-u16-go i w x)
    (cond ((= 16 i) x)
      ((symbol=? 'Word.e (get w 0)) (word-to-u16-go (+ i 1) (vector 'Word.e) x))
      ((symbol=? 'Word.o (get w 0)) (word-to-u16-go (+ i 1) (get w 1) x))
      ((symbol=? 'Word.i (get w 0)) (word-to-u16-go (+ i 1) (get w 1) (fxior x (fxarithmetic-shift-left 1 i))))))
  (word-to-u16-go 0 w 0))

; Converts a native integer to a Kind word
(define (u16-to-word x)
  (define (u16-to-word-go i x w)
    (if (= 16 i) w (u16-to-word-go (+ i 1) x
      (if (= (fxand (fxarithmetic-shift-right x (- 15 i)) 1) 0)
        (vector 'Word.o w)
        (vector 'Word.i w)))))
  (u16-to-word-go 0 x (vector 'Word.e)))

; Joins a list of strings with an intercalated separator
(define (string_join sep strs fst)
  (if (null? strs) 
    ""
    (string-append
      (if fst "" sep)
      (car strs)
      (string_join sep (cdr strs) #f))))

; Returns the last index that chr occurs in str, -1 otherwise
(define (last_index_of chr str idx)
  (if (= idx (string-length str))
    -1
    (let ((rest (last_index_of chr str (+ idx 1))))
      (if (char=? (string-ref str idx) chr)
        (max idx rest)
        rest))))

; Returns the first index that chr occurs in str, -1 otherwise
(define (first_index_of chr str idx)
  (if (= idx (string-length str))
    -1
    (if (char=? (string-ref str idx) chr)
      idx
      (first_index_of chr str (+ idx 1)))))

; Splits a string using an identifier
(define (split_at_first chr str)
  (let ((split_idx (first_index_of chr str 0)))
    (if (= split_idx -1)
      str
      (cons
        (substring str 0 split_idx)
        (substring str (+ split_idx 1) (string-length str))))))

; Splits a string using an identifier
(define (split_at_last chr str)
  (let ((split_idx (last_index_of chr str 0)))
    (if (= split_idx -1)
      str
      (cons
        (substring str 0 split_idx)
        (substring str (+ split_idx 1) (string-length str))))))

; Converts a date to a string, in milliseconds
(define (time_to_string time)
  (number->string
    (+ (* (time-second time) 1000)
      (div (time-nanosecond time) 1000000))))

; Prints a text with a newline
(define (print txt)
  (display txt)
  (display "\n"))

; Gets a line from stdin
(define (get_line)
  (let ((port (current-input-port)))
    (get-line port)))

; Deletes a file
(define (del_file file)
  (delete-file file))

; Gets the contents of a file as a string
; If it doesn't exist, returns empty
(define (get_file file)
  (if (file-exists? file)
    (let ((port (open-input-file file)))
      (let ((text (get-string-all port)))
        (begin
          (close-input-port port)
          text)))
    ""))

; Sets the contents of a file
(define (set_file file text)
  (system (string-append "mkdir -p " (car (split_at_last #\/ file))))
  (if (file-exists? file) (delete-file file))
  (let ((port (open-output-file file)))
    (begin
      (display text port)
      (close-output-port port))))

; Returns a list of files in a directory
(define (get_dir path)
  (directory-list path)) 

; Returns the time a file was modified. TODO: test on Windows/Linux
(define (get_file_mtime file)
  (time_to_string (file-modification-time file)))

; Returns the current time
(define (get_time)
  (time_to_string (current-time)))

; Performs a single Kind IO action
(define (io_action name)
  (case name
    ("print" (lambda (x) (print x)))
    ("put_string" (lambda (x) (display x)))
    ("get_line" (lambda (x) (get_line)))
    ("del_file" (lambda (x) (del_file x)))
    ("get_file" (lambda (x) (get_file x)))
    ("set_file" (lambda (x) (let ((file_text (split_at_first #\= x))) (set_file (car file_text) (cdr file_text)))))
    ("get_dir" (lambda (x) (get_dir x)))
    ("get_file_mtime" (lambda (x) (get_file_mtime x)))
    ("get_time" (lambda (x) (get_time)))))

; Runs a Kind IO program
(define (run_io io)
  (case (get io 0)
    ('IO.end (get io 0))
    ('IO.ask (let (
      (io_query (get io 1))
      (io_param (get io 2))
      (io_then (get io 3)))
      (run_io (io_then ((io_action io_query) io_param)))))))`


// Instantiators
// =============

// Compiles an instantiation. Converts a λ-encoded layer to a native value.
// - inst(`ins{Nat, `λz. λs. (s 5)`}`) == "(+ 5 1)"
Kind.Comp.Target.Scheme.inst(term: Kind.Comp, depth: Nat, defs: Kind.Comp.Defs): Maybe(String)
  case term {
    ins:
      let shape = Kind.Comp.Target.Scheme.shape_of(term.prim) open shape
      let {vars,expr} = Kind.Comp.get_vars(term.expr)
      if List.length!(shape.inst) =? List.length!(vars) then
        let {expr,args} = Kind.Comp.get_args(expr)
        case expr { 
          var: Kind.Comp.Target.Scheme.inst.go(expr.name, shape.inst, vars, args, depth, defs)
          ref: Kind.Comp.Target.Scheme.inst.go(expr.name, shape.inst, vars, args, depth, defs)
        } default none
      else
        none
  } default none

// Helper function
Kind.Comp.Target.Scheme.inst.go(
  name: String
  inst: List(Pair(Nat,String))
  vars: List(String)
  args: List(Kind.Comp)
  depth: Nat
  defs: Kind.Comp.Defs
): Maybe(String)
  case inst vars {
    nil  nil : none
    nil  cons: none
    cons nil : none
    cons cons: 
      if String.eql(name, vars.head) then
        let {ctor_arity, ctor_maker} = inst.head
        if ctor_arity =? List.length!(args) then
          some(Kind.Comp.replace(ctor_maker, List.mapped!(args)!((x) Kind.Comp.Target.Scheme.term(x,depth,defs))))
        else
          none
      else
        Kind.Comp.Target.Scheme.inst.go(name, inst.tail, vars.tail, args, depth, defs)
  }

// Creates an instantiator function. This is like inst, but instead of being
// applied to an inline argument, it generates a whole function.
// - instantiator(`Nat`) == "(lambda (t) (t 0 (lambda (pred) (+ pred 1))))"
Kind.Comp.Target.Scheme.instantiator(prim: Kind.Comp.Prim, depth: Nat, defs: Kind.Comp.Defs): String
  let shape = Kind.Comp.Target.Scheme.shape_of(prim) open shape
  let text = "x"
  for ctor in shape.inst with text:
    let {ctor_arity, ctor_maker} = ctor
    let inst = ""
    for j from 0 to ctor_arity with inst:
      inst|"(lambda (x"|Nat.show(j)|") "
    let vars = List.create!(ctor_arity, (j) "x" | Nat.show(j))
    let inst = inst | Kind.Comp.replace(ctor_maker, vars)
    for j from 0 to ctor_arity with inst:
      inst | ")"
    "(" | text | " " | inst | ")"
  "(lambda (x) " | text | ")"

// Eliminators
// ===========

// Compiles a complete elimination, extracting a λ-layer from a native value.
// Compiles an instantiation. Converts a λ-encoded layer to a native value.
// Inlines appications when possible.
// - elim(`eli{Nat,5}`) == "(if (= 5 0) (lambda (z) (lambda (s) z)) (lambda (z) (lambda (s) (s 4))))`
// - elim(`((eli{Nat,5} Z) S)` == "(if (= 5 0) Z (S 4))"
Kind.Comp.Target.Scheme.elim(term: Kind.Comp, depth: Nat, defs: Kind.Comp.Defs): Maybe(String)
  let {term,args} = Kind.Comp.get_args(term)
  case term {
    ref:
      case Kind.Map.get!(term.name, defs) as got {
        none:
          none
        some:
          let arity = Kind.Comp.get_arity(got.value)
          if (arity =? List.length!(args)) && (arity >? 0) then
            let code = "($" | term.name
            let code = for arg in args:
              code | " " | Kind.Comp.Target.Scheme.term(arg, depth, defs)
            let code = code | ")"
            some(code)
          else
            none
      }
    eli:
      let shape = Kind.Comp.Target.Scheme.shape_of(term.prim) open shape
      let {ctag,cses} = shape.elim
      let args_len = List.length!(args)
      let cses_len = List.length!(cses)
      if args_len >? cses_len then
        none
      else
        let lams_len = cses_len - args_len
        let args = for i from 0 to lams_len: args ++ [Kind.Comp.var("c"|Nat.show(i))]
        let self = "self" | Nat.show(depth)
        let text = ""
        let text = text | "(let (("|self|" "|Kind.Comp.Target.Scheme.term(term.expr,depth,defs)|")) "
        let text = text | "(case " | Kind.Comp.replace(ctag,[self])
        let text = for j from 0 to cses_len:
          let {name,flds} = cses[j] <> {"",[]}
          let flds_len = List.length!(flds)
          let text = text | " (" | name | " "
          let text = text | "(let ("
          let text = for k from 0 to flds_len:
            let key = "f"|Nat.show(Nat.add(depth,k))
            let val = Kind.Comp.replace(flds[k] <> "", [self])
            text | "("|key|" "|val|")"
          let keys = List.create!(flds_len, (k) Kind.Comp.var("f"|Nat.show(Nat.add(depth,k))))
          let argj = Kind.Comp.apply(args[j] <> Kind.Comp.ref("?"), keys)
          let body = ""
          let body = for i from 0 to lams_len: body|"(lambda (c"|Nat.show(i)|") "
          let body = body | Kind.Comp.Target.Scheme.term(argj, Nat.add(Nat.add(depth,flds_len),lams_len), defs)
          let body = for i from 0 to lams_len: body|")"
          text | ") " | body | "))"
        let text = text | "))"
        some(text)
  } default none

// Creates an elimination function. This is like "elim", but instead of being
// applied to an inline argument, it generates a whole function.
// - eliminator(Nat) == "(lambda (n) (if (= n 0) (lambda (z) (lambda (s) z)) (lambda (z) (lambda (s) (s (- n 1))))))"
Kind.Comp.Target.Scheme.eliminator(prim: Kind.Comp.Prim, depth: Nat, defs: Kind.Comp.Defs): String
  let term = Kind.Comp.eli(prim,Kind.Comp.var("x"))
  let text = Kind.Comp.Target.Scheme.elim(term, 0, defs) <> ""
  let term = Kind.Comp.lam("x", Kind.Comp.txt(text))
  Kind.Comp.Target.Scheme.term(term, depth, defs)
      
// Compilers
// =========

Kind.Comp.Target.Scheme.name(name: String): String
  if String.is_empty(name) then
    "-"
  else
    name

Kind.Comp.Target.Scheme.string(str: String): String
  case str {
    nil: ""
    cons:
      (if U16.eql(str.head, '\\') || U16.eql(str.head, '"') then
        "\\" | Char.to_string(str.head)
      else if U16.gte(str.head, ' ') && U16.lte(str.head, '~') then
        Char.to_string(str.head)
      else
        "\\x" | U16.show_hex(str.head) | ";"
      ) | Kind.Comp.Target.Scheme.string(str.tail)
  }

// Converts a Comp term to a Scheme expression.
Kind.Comp.Target.Scheme.term(comp: Kind.Comp, depth: Nat, defs: Kind.Comp.Defs): String
  let go = Kind.Comp.Target.Scheme.term
  case Kind.Comp.Target.Scheme.inst(comp,depth,defs) as got {
    some: got.value
    none: case Kind.Comp.Target.Scheme.elim(comp,depth,defs) as got {
      some: got.value
      none: case comp {
        nil:
          "'()"
        var: // TODO: generate safe Scheme name
          Kind.Comp.Target.Scheme.name(comp.name)
        ref: // TODO: generate safe Scheme name
          Kind.Comp.Target.Scheme.name(comp.name)
        lam:
          "(lambda (" | Kind.Comp.Target.Scheme.name(comp.name) | ") " | go(comp.body,Nat.succ(depth),defs) | ")"
        app:
          "(" | go(comp.func,depth,defs) | " " | go(comp.argm,depth,defs) | ")"
        let:
          "(let ((" | Kind.Comp.Target.Scheme.name(comp.name) | " " | go(comp.expr,depth,defs) | ")) " | go(comp.body,Nat.succ(depth),defs) | ")"
        eli: case comp.prim {
          unit: "(Unit-elim " | go(comp.expr,depth,defs) | ")"
          bool: "(Bool-elim " | go(comp.expr,depth,defs) | ")"
          nat: "(Nat-elim " | go(comp.expr,depth,defs) | ")"
          u16: "(U16-inst " | go(comp.expr,depth,defs) | ")"
          string: "(String-elim " | go(comp.expr,depth,defs) | ")"
          data: go(comp.expr,depth,defs)
        }
        ins: case comp.prim {
          unit: "(Unit-inst " | go(comp.expr,depth,defs) | ")"
          bool: "(Bool-inst " | go(comp.expr,depth,defs) | ")"
          nat: "(Nat-inst " | go(comp.expr,depth,defs) | ")"
          u16: "(U16-inst " | go(comp.expr,depth,defs) | ")"
          string: "(String-inst " | go(comp.expr,depth,defs) | ")"
          data: go(comp.expr,depth,defs)
        }
        nat:
          Nat.show(comp.natx)
        chr:
          Nat.show(U16.to_nat(comp.chrx))
        str:
          "\"" | Kind.Comp.Target.Scheme.string(comp.strx) | "\""
        txt:
          comp.text
      }
    }
  }

Kind.Comp.Target.Scheme.definition(name: String, term: Kind.Comp, defs: Kind.Comp.Defs): String
  let {vars,body} = Kind.Comp.get_vars(term)
  let code = "(define ($"|name
  let code = for v in vars: code | " " | v
  let code = code | ") "
  let code = code | case Kind.Comp.Target.Scheme.optimized{name} as opt {
    none: Kind.Comp.Target.Scheme.term(body, 0, defs)
    some: Kind.Comp.replace(Pair.snd!!(opt.value), vars)
  }
  let code = code | ")\n"
  let code = code | "(define "|name
  let code = for v in vars: code | " (lambda ("|v|")"
  let code = code | " ($"|name
  let code = for v in vars: code | " " | v
  let code = code | ")"
  let code = for v in vars: code | ")"
  let code = code | ")\n"
  code

// Converts Comp definitions to a Scheme program.
Kind.Comp.Target.Scheme(main: String, defs: Kind.Comp.Defs): String
  //let defs_list = Kind.Map.to_list!(defs)
  let defs_list = Kind.Comp.dependency_sort(main, defs)

  // Basic dependencies
  let code = Kind.Comp.Target.Scheme.base | "\n\n"

  // Instantiatior and Eliminator functions
  for nati in Kind.Comp.Prim.natives with code:
    let {name,prim} = nati
    let code = code|"(define "|name|"-inst "|Kind.Comp.Target.Scheme.instantiator(prim,0,defs)|")\n"
    let code = code|"(define "|name|"-elim "|Kind.Comp.Target.Scheme.eliminator(prim,0,defs)|")\n"
    code
  // Top-level definitions
  for defn in defs_list with code:
    let {name,term} = defn
    code | Kind.Comp.Target.Scheme.definition(name, term, defs)
  code | "(run_io "|main|")\n"
