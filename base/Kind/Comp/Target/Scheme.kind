// Shapes
// ======

// Describes the shape of each primitive when compiled to Scheme.
// For example, Kind's λ-encoded Nats are converted to Scheme numbers. This
// describes how to convert from λ-encodings to native numbers.
Kind.Comp.Target.Scheme.shape_of(prim: Kind.Comp.Prim): Kind.Comp.Prim.Shape
  case prim {
    unit: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // Unit.new
        {0, "#t"}
      ]
      // Elim
      {"#t", [
        // case new
        {"#t", []}
      ]})
    bool: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // Bool.true
        {0, "#t"}
        // Bool.false
        {0, "#f"}
      ]
      // Elim
      {"$0", [
        // case true
        {"#t", []}
        // case false
        {"#f", []}
      ]})
    nat: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // Nat.zero
        {0, "0"}
        // Nat.succ
        {1, "(+ $0 1)"}
      ]
      // Elim
      {"(= $0 0)", [
        // case zero
        {"#t", []}
        // case succ
        {"#f", [
          // x.pred
          "(- $0 1)"
        ]}
      ]})
    u16: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // U16.new
        {1, "(word-to-u16 $0)"}
      ]
      // Elim
      {"#t", [
        // case new
        {"#t", [
          "(u16-to-word $0)" // x.value
        ]}
      ]})
    string: Kind.Comp.Prim.Shape.new(
      // Inst
      [
        // String.nil
        {0, "\"\""}
        // String.cons
        {2, "(string-append (make-string 1 (integer->char $0)) $1)"}
      ]
      // Elim
      {"(= (string-length $0) 0)", [
        // case nil
        {"#f", []}
        // case cons
        {"#t", [
          // x.head
          "(char->integer (string-ref $0 0))",
          // x.tail
          "(let ((_str_ $0)) (substring _str_ 1 (string-length _str_)))",
        ]}
      ]})
    data: Kind.Comp.Prim.Shape.new(
      // Inst
      List.fold!(prim.ctrs)!([], (ctr, result)
        let {ctr_name, ctr_fields} = ctr
        let fields_size = List.length!(ctr_fields)
        let fields_vars = String.join("", List.create!(fields_size, (x) " $"|Nat.show(x)))
        {fields_size, "(vector '"|ctr_name|fields_vars|")"} & result),
      // Elim
      {"(get $0 0)", List.fold!(prim.ctrs)!([], (ctr, result)
        let {ctr_name, ctr_fields} = ctr
        let fields_size = List.length!(ctr_fields)
        let fields_gets = List.create!(fields_size, (i) "(get $0 "|Nat.show(i)|")")
        {"'"|ctr_name, fields_gets} & result)
      })
  }

// Instantiators
// =============

// Compiles an instantiation. Converts a λ-encoded layer to a native value.
// - inst(`ins{Nat, `λz. λs. (s 5)`}`) == "(+ 5 1)"
Kind.Comp.Target.Scheme.inst(term: Kind.Comp, depth: Nat): Maybe(String)
  case term {
    ins:
      let shape = Kind.Comp.Target.Scheme.shape_of(term.prim) open shape
      let {vars,expr} = Kind.Comp.get_vars(term.expr)
      if List.length!(shape.inst) =? List.length!(vars) then
        let {expr,args} = Kind.Comp.get_args(expr)
        case expr { 
          var: Kind.Comp.Target.Scheme.inst.go(expr.name, shape.inst, vars, args)
          ref: Kind.Comp.Target.Scheme.inst.go(expr.name, shape.inst, vars, args)
        } default none
      else
        none
  } default none

// Helper function
Kind.Comp.Target.Scheme.inst.go(
  name: String
  inst: List(Pair(Nat,String))
  vars: List(String)
  args: List(Kind.Comp)
): Maybe(String)
  case inst vars {
    nil  nil : none
    nil  cons: none
    cons nil : none
    cons cons: 
      if String.eql(name, vars.head) then
        let {ctor_arity, ctor_maker} = inst.head
        if ctor_arity =? List.length!(args) then
          some(Kind.Comp.replace(ctor_maker, List.mapped!(args)!(Kind.Comp.Target.Scheme.term)))
        else
          none
      else
        Kind.Comp.Target.Scheme.inst.go(name, inst.tail, vars.tail, args)
  }


// Creates an instantiator function. This is like inst, but instead of being
// applied to an inline argument, it generates a whole function.
// - instantiator(`Nat`) == "(lambda (t) (t 0 (lambda (pred) (+ pred 1))))"
Kind.Comp.Target.Scheme.instantiator(prim: Kind.Comp.Prim): String
  let shape = Kind.Comp.Target.Scheme.shape_of(prim) open shape
  let text = "x"
  for ctor in shape.inst with text:
    let {ctor_arity, ctor_maker} = ctor
    let inst = ""
    for j from 0 to ctor_arity with inst:
      inst|"(lambda (x"|Nat.show(j)|") "
    let vars = List.create!(ctor_arity, (j) "x" | Nat.show(j))
    let inst = inst | Kind.Comp.replace(ctor_maker, vars)
    for j from 0 to ctor_arity with inst:
      inst | ")"
    "(" | text | " " | inst | ")"
  "(lambda (x) " | text | ")"

// Eliminators
// ===========

// Compiles a complete elimination, extracting a λ-layer from a native value.
// Compiles an instantiation. Converts a λ-encoded layer to a native value.
// Inlines appications when possible.
// - elim(`eli{Nat,5}`) == "(if (= 5 0) (lambda (z) (lambda (s) z)) (lambda (z) (lambda (s) (s 4))))`
// - elim(`((eli{Nat,5} Z) S)` == "(if (= 5 0) Z (S 4))"
Kind.Comp.Target.Scheme.elim(term: Kind.Comp, depth: Nat): Maybe(String)
  let {term,args} = Kind.Comp.get_args(term)
  case term {
    eli:
      let shape = Kind.Comp.Target.Scheme.shape_of(term.prim) open shape
      let {ctag,cses} = shape.elim
      let args_len = List.length!(args)
      let cses_len = List.length!(cses)
      let lams_len = cses_len - args_len
      let args = for i from 0 to lams_len: args ++ [Kind.Comp.var("c"|Nat.show(i))]
      let self = "self" | Nat.show(depth)
      let text = ""
      let text = text | "(let (("|self|" "|Kind.Comp.Target.Scheme.term(term.expr)|")) "
      let text = text | "(case " | Kind.Comp.replace(ctag,[self])
      let text = for j from 0 to cses_len:
        let {name,flds} = cses[j] <> {"",[]}
        let flds_len = List.length!(flds)
        let text = text | " (" | name | " "
        let text = text | "(let ("
        let text = for k from 0 to flds_len:
          let key = "f"|Nat.show(Nat.add(depth,k))
          let val = Kind.Comp.replace(flds[k] <> "", [self])
          text | "("|key|" "|val|")"
        let keys = List.create!(flds_len, (k) Kind.Comp.var("f"|Nat.show(Nat.add(depth,k))))
        let argj = Kind.Comp.apply(args[j] <> Kind.Comp.ref("?"), keys)
        let body = ""
        let body = for i from 0 to lams_len: body|"(lambda (c"|Nat.show(i)|") "
        let body = body | Kind.Comp.Target.Scheme.term.go(argj, Nat.add(Nat.add(depth,flds_len),lams_len))
        let body = for i from 0 to lams_len: body|")"
        text | ") " | body | "))"
      let text = text | "))"
      some(text)
  } default none

// Creates an elimination function. This is like "elim", but instead of being
// applied to an inline argument, it generates a whole function.
// - eliminator(Nat) == "(lambda (n) (if (= n 0) (lambda (z) (lambda (s) z)) (lambda (z) (lambda (s) (s (- n 1))))))"
Kind.Comp.Target.Scheme.eliminator(prim: Kind.Comp.Prim): String
  let term = Kind.Comp.eli(prim,Kind.Comp.var("x"))
  let text = Kind.Comp.Target.Scheme.elim(term, 0) <> ""
  let term = Kind.Comp.lam("x", Kind.Comp.txt(text))
  Kind.Comp.Target.Scheme.term(term)
      
// Compilers
// =========

// Converts a Comp term to a Scheme expression.
Kind.Comp.Target.Scheme.term(comp: Kind.Comp): String
  Kind.Comp.Target.Scheme.term.go(comp, 0)

Kind.Comp.Target.Scheme.term.go(comp: Kind.Comp, depth: Nat): String
  let go = Kind.Comp.Target.Scheme.term.go
  Maybe.first_of!([
    Kind.Comp.Target.Scheme.inst(comp,depth)
    Kind.Comp.Target.Scheme.elim(comp,depth)
    some(case comp {
      nil:
        "'()"
      var: // TODO: generate safe Scheme name
        comp.name
      ref: // TODO: generate safe Scheme name
        "(" | comp.name | ")"
      lam:
        "(lambda (" | comp.name | ") " | go(comp.body,Nat.succ(depth)) | ")"
      app:
        "(" | go(comp.func,depth) | " " | go(comp.argm,depth) | ")"
      let:
        "(let ((" | comp.name | " " | go(comp.expr,depth) | ")) " | go(comp.body,Nat.succ(depth)) | ")"
      eli: case comp.prim {
        unit: "(Unit-elim " | go(comp.expr,depth) | ")"
        bool: "(Bool-elim " | go(comp.expr,depth) | ")"
        nat: "(Nat-elim " | go(comp.expr,depth) | ")"
        u16: "(U16-inst " | go(comp.expr,depth) | ")"
        string: "(String-elim " | go(comp.expr,depth) | ")"
        data: go(comp.expr,depth)
      }
      ins: case comp.prim {
        unit: "(Unit-inst " | go(comp.expr,depth) | ")"
        bool: "(Bool-inst " | go(comp.expr,depth) | ")"
        nat: "(Nat-inst " | go(comp.expr,depth) | ")"
        u16: "(U16-inst " | go(comp.expr,depth) | ")"
        string: "(String-inst " | go(comp.expr,depth) | ")"
        data: go(comp.expr,depth)
      }
      nat:
        Nat.show(comp.natx)
      chr:
        "#\\x" | Nat.to_string_base(16, U16.to_nat(comp.chrx))
      str:
        "\"" | comp.strx | "\""
      txt:
        comp.text
    })
  ]) <> ""


// Converts Comp definitions to a Scheme program.
Kind.Comp.Target.Scheme(defs: Kind.Comp.Defs): String
  let defs = Kind.Map.to_list!(defs)
  // Basic dependencies
  let code = String.join("\n", [
    "(define-syntax def (syntax-rules () (($ name body) (define name (memo 'body)))))",
    "(define-syntax λ (syntax-rules () ((λ var bod) (lambda (var) bod))))",
    "(define (memo val) ((lambda (R) (lambda () (if (eq? R '_) (begin (set! R (eval val)) R) R))) '_))",
    "(define (print x) (begin (display x) (display \"\\n\")))",
    "(define get vector-ref)",
    "(define (word-to-u16 w) (word-to-u16-go 0 w 0))",
    "(define (word-to-u16 w) (word-to-u16-go 0 w 0))",
    "(define (word-to-u16-go i w x) (cond ((= 16 i) x) ((eq? 'Word.e (get w 0)) (word-to-u16-go (+ i 1) (vector 'Word.e) x)) ((eq? 'Word.o (get w 0)) (word-to-u16-go (+ i 1) (get w 1) x)) ((eq? 'Word.i (get w 0)) (word-to-u16-go (+ i 1) (get w 1) (fxior x (fxarithmetic-shift-left 1 i))))))",
    "(define (u16-to-word x) (u16-to-word-go 0 x (vector 'Word.e)))",
    "(define (u16-to-word-go i x w) (if (= 16 i) w (u16-to-word-go (+ i 1) x (if (= (fxand (fxarithmetic-shift-right x (- 15 i)) 1) 0) (vector 'Word.o w) (vector 'Word.i w)))))(define (Bool-inst x) (lambda (x) ((x #t) #f)))",
  ])
  // Instantiatior and Eliminator functions
  for nati in Kind.Comp.Prim.natives with code:
    let {name,prim} = nati
    let code = code|"(define "|name|"-inst "|Kind.Comp.Target.Scheme.instantiator(prim)|")\n"
    let code = code|"(define "|name|"-elim "|Kind.Comp.Target.Scheme.eliminator(prim)|")\n"
    code
  // Top-level definitions
  for defn in defs with code:
    let {name, comp} = defn
    code
    | "(define (" | name | ") "
      | Kind.Comp.Target.Scheme.term(comp)
      | ")\n"
  code
