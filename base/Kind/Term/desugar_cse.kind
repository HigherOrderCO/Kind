Kind.Term.desugar_cse(
  expr: Kind.Term,
  name: Kind.Name,
  wyth: List<Kind.Ann>,
  cses: BitsMap<Kind.Term>,
  moti: Maybe<Kind.Term>,
  etyp: Kind.Term, // type of expr
  rtyp: Maybe<Kind.Term>, // inferred return type
  defs: Kind.Defs,
  ctxt: Kind.Context,
): Maybe<Kind.Term>
  case Kind.Term.reduce(etyp, defs) as etyp {
    all:
      let moti = Kind.Term.desugar_cse.motive(wyth, moti, name, expr, etyp, rtyp, defs, List.length!(ctxt));
      let argm = Kind.Term.desugar_cse.argument(name, [], etyp.xtyp, moti, defs);
      let expr = Kind.Term.app(expr, argm);
      let type = etyp.body(Kind.Term.var(etyp.self,0), Kind.Term.var(etyp.name,0));
      Maybe.some!(Kind.Term.desugar_cse.cases(expr, name, wyth, cses, type, defs, ctxt))
    _:
      Maybe.none!
  }: Maybe<Kind.Term>
