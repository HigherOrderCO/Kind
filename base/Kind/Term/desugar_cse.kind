Kind.Term.desugar_cse(
  expr: Kind.Term,
  name: Kind.Name,
  wyth: List<Kind.Def>,
  cses: BitsMap<Kind.Term>,
  moti: Kind.Term,
  type: Kind.Term,
  defs: Kind.Defs,
  ctxt: Kind.Context,
): Maybe<Kind.Term>
  case Kind.Term.reduce(type, defs) as type {
    all:
      let moti = Kind.Term.desugar_cse.motive(wyth, moti);
      let argm = Kind.Term.desugar_cse.argument(name, [], type.xtyp, moti, defs);
      let expr = Kind.Term.app(expr, argm);
      let type = type.body(Kind.Term.var(type.self,0), Kind.Term.var(type.name,0));
      Maybe.some!(Kind.Term.desugar_cse.cases(expr, name, wyth, cses, type, defs, ctxt)),
    _:
      Maybe.none!,
  }