Kind.Term.SmartMotive.make(
  name: Kind.Name,
  expr: Kind.Term, 
  type: Kind.Term,
  moti: Kind.Term,
  size: Nat,
  defs: Kind.Defs,
): Kind.Term
  let vals = Kind.Term.SmartMotive.vals(expr,type,defs);
  let nams = Kind.Term.SmartMotive.nams(name,type,defs);
  let subs = List.zip!!(nams,vals);
  //let skip = Debug.log!(String.flatten(["-expr: ", Kind.Term.show(expr)]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-type: ", Kind.Term.show(type)]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-type: ", Kind.Term.show(Kind.Term.reduce(type,defs))]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-vals: ", String.join(", ", List.mapped!(vals)!(Kind.Term.show))]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-nams: ", String.join(", ", nams)]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-moti: ", Kind.Term.show(moti)]), (x) Unit.new);
  List.fold!(subs)!(moti, (sub,moti) case sub {
    new: Kind.Term.SmartMotive.replace(moti, sub.snd, Kind.Term.ref(sub.fst), size)
  })

//Kind.Term.SmartMotive.replace_many(
  //subs: List<Pair<Kind.Name,Kind.Term>>,
  //term: Kind.Term,
  //lv: Nat,
//): Kind.Term
  //case subs {
    //nil:
      //term
    //cons:
      //open subs.head
      //let term = Kind.Term.SmartMotive.replace_many(subs.tail, term)
      //let term = Kind.Term.SmartMotive.replace(term, subs.head.snd, Kind.Term.ref(subs.head.fst), lv)
      //term
  //}
