Kind.Term.bind(vars: Kind.Context, path: Kind.Path, term: Kind.Term): Kind.Term 
  case term {
    ref: case Kind.Context.find(term.name, vars) as got {
      none: Kind.Term.ref(term.name),
      some: got.value,
    },
    var: case List.at_last!(term.indx, vars) as got {
      none: Kind.Term.var(term.name, term.indx),
      some: Pair.snd!!(got.value),
    },
    typ: Kind.Term.typ,
    all: 
      let vlen = List.length!(vars);
      def xtyp = Kind.Term.bind(vars, Kind.Path.o(path), term.xtyp);
      def body = (s,x) Kind.Term.bind(
        List.cons!({term.name,x},
          List.cons!({term.self,s},
          vars)),
        Kind.Path.i(path),
        term.body(
          Kind.Term.var(term.self, vlen),
          Kind.Term.var(term.name, Nat.succ(vlen))));
      Kind.Term.all(term.eras, term.self, term.name, xtyp, body),
    lam:
      let vlen = List.length!(vars);
      def body = (x) Kind.Term.bind(
        List.cons!({term.name,x},vars),
        Kind.Path.o(path),
        term.body(Kind.Term.var(term.name, vlen)));
      Kind.Term.lam(term.name, body),
    app:
      def func = Kind.Term.bind(vars, Kind.Path.o(path), term.func);
      def argm = Kind.Term.bind(vars, Kind.Path.i(path), term.argm);
      Kind.Term.app(func, argm),
    let:
      let vlen = List.length!(vars);
      def expr = Kind.Term.bind(vars, Kind.Path.o(path), term.expr);
      def body = (x) Kind.Term.bind(
        List.cons!({term.name,x}, vars),
        Kind.Path.i(path),
        term.body(Kind.Term.var(term.name, vlen)));
      Kind.Term.let(term.name, expr, body),
    def:
      let vlen = List.length!(vars);
      def expr = Kind.Term.bind(vars, Kind.Path.o(path), term.expr);
      def body = (x) Kind.Term.bind(
        List.cons!({term.name,x}, vars),
        Kind.Path.i(path),
        term.body(Kind.Term.var(term.name, vlen)));
      Kind.Term.def(term.name, expr, body),
    ann:
      def term = Kind.Term.bind(vars, Kind.Path.o(path), term.term);
      def type = Kind.Term.bind(vars, Kind.Path.i(path), term.type);
      Kind.Term.ann(term.done, term, type),
    gol:
      Kind.Term.gol(term.name, term.dref, term.verb),
    hol:
      Kind.Term.hol(Kind.Path.to_bits(path)),
    nat:
      Kind.Term.nat(term.natx),
    chr:
      Kind.Term.chr(term.chrx),
    str:
      Kind.Term.str(term.strx),
    cse:
      let expr = Kind.Term.bind(vars, Kind.Path.o(path), term.expr);
      let name = term.name; // TODO
      let wyth = List.mapped!(term.with)!((with_var)
        open with_var
        let with_var_term = Kind.Term.bind(vars, path, with_var.term)
        let with_var_type = case with_var.type {
          none: none
          some: some(Kind.Term.bind(vars, path, with_var.type.value))
        }
        Kind.Ann.new(with_var.name, with_var_term, with_var_type));
      let cses = term.cses; // TODO
      let moti = term.moti; // TODO
      Kind.Term.cse(Kind.Path.to_bits(path), expr, name, wyth, cses, moti),
    ori:
      Kind.Term.ori(term.orig, Kind.Term.bind(vars, path, term.expr)),
  }
