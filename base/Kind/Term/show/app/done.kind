Kind.Term.show.app.done(term: Kind.Term, path: Maybe<Bits -> Bits>, args: List<String>): String
  let arity = List.length!(args);
  if Bool.and(Kind.Term.show.is_ref(term,"Equal"), Nat.eql(arity,3)) then
    let func = Kind.Term.show.go(term, path);
    let eq_lft = Maybe.default!(List.at!(1, args), "?");
    let eq_rgt = Maybe.default!(List.at!(2, args), "?");
    String.flatten([eq_lft, " == ", eq_rgt])
  else
    let func = Kind.Term.show.go(term, path);
    let wrap = case func {nil: Bool.false, cons: U16.eql(func.head,'(')};
    let args = String.join(",", args);
    let func = if wrap then String.flatten(["(",func,")"]) else func;
    String.flatten([func, "(", args, ")"])
