Kind.Term.show.go(term: Kind.Term, path: Maybe<Bits -> Bits>): String
  case Kind.Term.show.as_nat(term) as as_nat {
    some: as_nat.value,
    none: case term {
      ref:
        let name = Kind.Name.show(term.name);
        case path {
          none:
            name,
            //String.flatten(["$", name]),
          some: 
            let path_val = Bits.concat(Kind.Path.to_bits(path.value), Bits.i(Bits.e));
            let path_str = Nat.show(Bits.to_nat(path_val));
            String.flatten([name, Kind.Code.color("2", String.concat("-", path_str))]),
        },
      var:
        Kind.Name.show(term.name),
        //String.flatten([Kind.Name.show(term.name), "#", Nat.show(term.indx)]),
      typ:
        "Type",
      all:
        let eras = term.eras;
        let self = Kind.Name.show(term.self);
        let name = Kind.Name.show(term.name);
        let type = Kind.Term.show.go(term.xtyp, Kind.MPath.o(path));
        let open = if eras then "<" else "(";
        let clos = if eras then ">" else ")";
        let body = Kind.Term.show.go(
          term.body(
            Kind.Term.var(term.self, 0),
            Kind.Term.var(term.name, 0)),
          Kind.MPath.i(path));
        String.flatten([self,open,name,":",type,clos," ",body]),
      lam:
        let name = Kind.Name.show(term.name);
        let body = Kind.Term.show.go(
          term.body(Kind.Term.var(term.name, 0)),
          Kind.MPath.o(path));
        String.flatten(["(",name,") ",body]),
      app: Kind.Term.show.app(term, path, List.nil!),
      let:
        let name = Kind.Name.show(term.name);
        let expr = Kind.Term.show.go(term.expr, Kind.MPath.o(path));
        let body = Kind.Term.show.go(
          term.body(Kind.Term.var(term.name, 0)),
          Kind.MPath.i(path));
        String.flatten(["let ", name, " = ", expr, "; ", body]),
      def:
        let name = Kind.Name.show(term.name);
        let expr = Kind.Term.show.go(term.expr, Kind.MPath.o(path));
        let body = Kind.Term.show.go(
          term.body(Kind.Term.var(term.name, 0)),
          Kind.MPath.i(path));
        String.flatten(["def ", name, " = ", expr, "; ", body]),
      ann:
        let term = Kind.Term.show.go(term.term, Kind.MPath.o(path));
        let type = Kind.Term.show.go(term.type, Kind.MPath.i(path));
        String.flatten([term,"::",type]),
      gol:
        let name = Kind.Name.show(term.name);
        String.flatten(["?", name]),
      hol:
        "_",
      nat:
        String.flatten([Nat.show(term.natx)]),
      chr:
        String.flatten(["'", Kind.Code.escape.char(term.chrx), "'"]),
      str:
        String.flatten(["\"", Kind.Code.escape(term.strx), "\""]),
      cse:
        let expr = Kind.Term.show.go(term.expr, Kind.MPath.o(path));
        let name = Kind.Name.show(term.name);
        let wyth = String.join("; ", List.mapped!(term.with)!((with_var)
          open with_var
          case with_var.type {
            none: with_var.name
            some: with_var.name | ": " | Kind.Term.show.go(with_var.type.value, none)
          }))
        let cses = BitsMap.to_list!(term.cses);
        let cses = String.join("", List.mapped!(cses)!((x)
          let name = Kind.Name.from_bits(Pair.fst!!(x));
          let term = Kind.Term.show.go(Pair.snd!!(x), Maybe.none!);
          String.flatten([name, ": ", term, "; "])));
        let moti = case term.moti {
          none: "",
          some: String.flatten([": ", Kind.Term.show.go(term.moti.value, Maybe.none!)]),
        };
        String.flatten(["case ",expr," as ",name,wyth," { ",cses,"}",moti]),
      ori:
        Kind.Term.show.go(term.expr, path),
    }
  }
