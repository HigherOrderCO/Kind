Kind.Term.desugar_cse.motive.go(
  wyth: List<Kind.Ann>,
  moti: Maybe<Kind.Term>,
  name: String,
  expr: Kind.Term,
  etyp: Kind.Term,
  rtyp: Maybe<Kind.Term>,
  defs: Kind.Defs,
  size: Nat,
): Kind.Term
  case wyth {
    cons:
      open wyth.head
      def all_name = wyth.head.name;
      def all_xtyp = wyth.head.type <> Kind.Term.hol(Bits.e);
      def all_body = (s,x) Kind.Term.desugar_cse.motive(wyth.tail, moti, name, expr, etyp, rtyp, defs, Nat.succ(Nat.succ(size)));
      Kind.Term.all(Bool.false, "", all_name, all_xtyp, all_body)
    nil: case moti {
      none:
        case rtyp {
          none:
            Kind.Term.hol(Bits.e)
          some:
            Kind.Term.normalize(rtyp.value, Kind.Map.new!)
        }
      some: 
        moti.value
    }
  }

Kind.Term.desugar_cse.motive(
  wyth: List<Kind.Ann>,
  moti: Maybe<Kind.Term>,
  name: String,
  expr: Kind.Term,
  etyp: Kind.Term,
  rtyp: Maybe<Kind.Term>,
  defs: Kind.Defs,
  size: Nat,
): Kind.Term
  let done = Kind.Term.desugar_cse.motive.go(wyth, moti, name, expr, etyp, rtyp, defs, size)
  case moti {
    none: Kind.Term.SmartMotive.make(name, expr, etyp, done, size, defs)
    some: done
  }
