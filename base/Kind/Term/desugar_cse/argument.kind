Kind.Term.desugar_cse.argument(
  name: Kind.Name,
  wyth: List<Kind.Ann>,
  type: Kind.Term,
  body: Kind.Term,
  defs: Kind.Defs,
): Kind.Term
  case Kind.Term.reduce(type, defs) as type {
    all:
      def type = type.body(Kind.Term.var(type.self,0), Kind.Term.var(type.name,0));
      def lam_name =
        if String.is_empty(type.name) then
          name
        else
          String.flatten([name, ".", type.name]);
      def lam_body = (x) Kind.Term.desugar_cse.argument(name, wyth, type, body, defs);
      Kind.Term.lam(lam_name, lam_body),
    _: case wyth {
      cons:
        open wyth.head
        def lam_name = wyth.head.name;
        def lam_body = (x) Kind.Term.desugar_cse.argument(name, wyth.tail, type, body, defs);
        Kind.Term.lam(lam_name, lam_body)
      nil:
        body
    }
  }
