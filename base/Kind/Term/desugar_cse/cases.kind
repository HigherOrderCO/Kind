Kind.Term.desugar_cse.cases(
  expr: Kind.Term,
  name: Kind.Name,
  wyth: List<Kind.Ann>,
  cses: BitsMap<Kind.Term>,
  type: Kind.Term,
  defs: Kind.Defs,
  ctxt: Kind.Context,
): Kind.Term
  case Kind.Term.reduce(type, defs) as type {
    all: 
      let argm = Maybe.or!(Kind.Map.get!(type.name, cses), Kind.Map.get!("_", cses));
      let argm = argm <> Kind.Term.ref(name | "_" | type.name | "_case");
      let argm = Kind.Term.desugar_cse.argument(name, wyth, type.xtyp, argm, defs)
      let expr = Kind.Term.app(expr, argm);
      let type = type.body(Kind.Term.var(type.self,0), Kind.Term.var(type.name,0));
      Kind.Term.desugar_cse.cases(expr, name, wyth, cses, type, defs, ctxt),
    _:
      let expr = for defn in wyth:
        Kind.Term.app(expr, case defn { new: defn.term })
      expr
  }
