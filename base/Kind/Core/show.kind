Kind.Core.show(term: Kind.Term): String
  Kind.Core.show.go(term, 0, [])

Kind.Core.show.go(term: Kind.Term, indx: Nat, vars: List<Kind.Name>): String
  case term {
    ref:
      Kind.Name.show(term.name)
    var:
      Kind.Core.var_name(Nat.pred(Nat.sub(indx,term.indx)), term.name, 0, vars)
    typ:
      "*"
    all:
      let eras = term.eras
      let init = if eras then "%" else "@"
      let self = Kind.Name.show(term.self)
      let name = Kind.Name.show(term.name)
      let xtyp = Kind.Core.show.go(term.xtyp, indx, vars)
      let body = Kind.Core.show.go(
        term.body(
          Kind.Term.var(term.self,indx),
          Kind.Term.var(term.name,Nat.succ(indx))),
        Nat.succ(Nat.succ(indx)),
        List.cons!(term.name, List.cons!(term.self, vars)))
      String.flatten([init,self,"(",name,":",xtyp,") ",body])
    lam:
      let name = Kind.Name.show(term.name)
      let body = Kind.Core.show.go(
        term.body(Kind.Term.var(term.name,indx)),
        Nat.succ(indx),
        List.cons!(term.name, vars))
      String.flatten(["#",name," ",body])
    app:
      let func = Kind.Core.show.go(term.func, indx, vars)
      let argm = Kind.Core.show.go(term.argm, indx, vars)
      String.flatten(["(",func," ",argm,")"])
    let: 
      let name = Kind.Name.show(term.name)
      let expr = Kind.Core.show.go(term.expr, indx, vars)
      let body = Kind.Core.show.go(
        term.body(Kind.Term.var(term.name,indx)),
        Nat.succ(indx),
        List.cons!(term.name, vars))
      String.flatten(["!", name, " = ", expr, "; ", body])
    def:
      let name = Kind.Name.show(term.name)
      let expr = Kind.Core.show.go(term.expr, indx, vars)
      let body = Kind.Core.show.go(
        term.body(Kind.Term.var(term.name,indx)),
        Nat.succ(indx),
        List.cons!(term.name, vars))
      String.flatten(["$", name, " = ", expr, "; ", body])
    ann:
      let term = Kind.Core.show.go(term.term, indx, vars)
      let type = Kind.Core.show.go(term.type, indx, vars)
      String.flatten(["{",term,":",type,"}"])
    gol:
      "<GOL>"
    hol:
      "<HOL>"
    nat:
      String.flatten(["+", Nat.show(term.natx)])
    chr:
      String.flatten(["'", Kind.Code.escape.char(term.chrx), "'"])
    str:
      String.flatten(["\"", Kind.Code.escape(term.strx), "\""])
    cse:
      "<CSE>"
    ori:
      Kind.Core.show.go(term.expr, indx, vars)
  }
