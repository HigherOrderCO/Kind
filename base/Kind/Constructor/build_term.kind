Kind.Constructor.build_term(type: Kind.Datatype, ctor: Kind.Constructor): Kind.Term
  open type
  open ctor
  Kind.Constructor.build_term.go(type, ctor, type.name, type.pars, ctor.args)
  
Kind.Constructor.build_term.go(
  type: Kind.Datatype,
  ctor: Kind.Constructor,
  name: Kind.Name,
  pars: List<Kind.Binder>,
  args: List<Kind.Binder>,
): Kind.Term
  case pars {
    cons: case pars.head {
      new:
        def par_name = pars.head.name
        def par_body = (x) Kind.Constructor.build_term.go(type, ctor, name, pars.tail, args)
        Kind.Term.lam(par_name, par_body)
    }
    nil: case args {
      cons: case args.head {
        new:
          def ctr_name = args.head.name
          def ctr_body = (x) Kind.Constructor.build_term.go(type, ctor, name, pars, args.tail)
          Kind.Term.lam(ctr_name, ctr_body)
      },
      nil:
        def lam_name = Kind.Name.read("P")
        def lam_body = (x) Kind.Constructor.build_term.opt(type, ctor)
        Kind.Term.lam(lam_name, lam_body)
    }
  }

Kind.Constructor.build_term.opt(type: Kind.Datatype, ctor: Kind.Constructor): Kind.Term
  open type
  Kind.Constructor.build_term.opt.go(type, ctor, type.ctrs)

Kind.Constructor.build_term.opt.go(
  type: Kind.Datatype,
  ctor: Kind.Constructor,
  ctrs: List<Kind.Constructor>,
): Kind.Term
  case ctrs {
    cons: case ctrs.head {
      new:
        def name = ctrs.head.name
        def body = (x) Kind.Constructor.build_term.opt.go(type, ctor, ctrs.tail)
        Kind.Term.lam(name, body)
    }
    nil: 
      case ctor {
        new:
          let ret = Kind.Term.ref(ctor.name)
          let ret = for arg in ctor.args:
            Kind.Term.app(ret, Kind.Term.ref(case arg { new: arg.name }))
          ret
      }
  }
