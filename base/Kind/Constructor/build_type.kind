Kind.Constructor.build_type(type: Kind.Datatype, ctor: Kind.Constructor): Kind.Term
  case type {
    new: case ctor {
      new: Kind.Constructor.build_type.go(
        type,
        ctor,
        type.name,
        type.pars,
        ctor.args)
    }
  }

Kind.Constructor.build_type.go(
  type: Kind.Datatype,
  ctor: Kind.Constructor,
  name: Kind.Name,
  pars: List<Kind.Binder>,
  args: List<Kind.Binder>,
): Kind.Term
  case pars {
    cons: case pars.head {
      new:
        def pars_eras = pars.head.eras;
        def pars_name = pars.head.name;
        def pars_xtyp = pars.head.term;
        def pars_body = (s,x) Kind.Constructor.build_type.go(type, ctor, name, pars.tail, args);
        Kind.Term.all(pars_eras, "", pars_name, pars_xtyp, pars_body),
    },
    nil: case args {
      cons: case args.head {
        new:
          def ctr_eras = args.head.eras;
          def ctr_name = args.head.name;
          def ctr_xtyp = args.head.term;
          def ctr_body = (s,x) Kind.Constructor.build_type.go(type, ctor, name, pars, args.tail);
          Kind.Term.all(ctr_eras, "", ctr_name, ctr_xtyp, ctr_body),
      },
      nil: case type {
        new: case ctor {
          new:
            let type = Kind.Term.ref(name);
            let type = for v in type.pars:
              Kind.Term.app(type, Kind.Term.ref(case v { new: v.name }));
            let type = for v in ctor.inds:
              Kind.Term.app(type, case v { new: v.term });
            type,
        }
      }
    }
  }
