Kind.Defs.report(defs: Kind.Defs, names: List<Kind.Name>): String
  let types = Kind.Defs.report.types(defs, names)
  let errors = Kind.Defs.report.errors(defs)
  let errors = case errors {
    nil  : "All terms check."
    cons : errors
  }
  types | "\n" | errors
    
Kind.Defs.report.errors(defs: Kind.Defs): String
  let errors = ""
  let errors = for key in BitsMap.keys!(defs):
    let name = Kind.Name.from_bits(key)
    let defn = Kind.Map.get!(name, defs)
    without defn: errors
    open defn
    case defn.stat {
      fail: case defn.stat.errors {
        nil:
          errors
        cons:
          let name_str = defn.name
          let rel_errs = Kind.Error.relevant(defn.stat.errors)
          let errors = for err in rel_errs:
            let err_msg = Kind.Error.show(err, defs)
            let ori_val = Kind.Error.origin(err)
            without ori_val: errors | err_msg | "\n"
            open ori_val
            let inside = "Inside '" | defn.file | "':\n"
            let source = Kind.Code.highlight(defn.code, ori_val.fst, ori_val.snd)
            errors | err_msg | inside | source | "\n" | "\n"
          errors
      }
    } default errors
  errors

Kind.Defs.report.types(defs: Kind.Defs, names: List<Kind.Name>): String
  let types = ""
  let types = for name in names:
    case Kind.Map.get!(name, defs) as got {
      none:
        types
      some:
        open got.value
        types | name | ": " | Kind.Term.show(got.value.type) | "\n"
    }
  types
