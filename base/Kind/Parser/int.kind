Kind.Parser.int: Parser(Kind.Term)
  Kind.Parser.block("int", Parser {
    Kind.Parser.spaces
    //Parser.log("on int")
    //Parser.log_code
    //Parser.log("---------------")
    get sgn_num = Parser.first_of!([
      Kind.Parser.int_pos,
      Kind.Parser.int_neg,
    ])
    //Parser.log("sgn_num = " | Bool.show(Pair.fst!!(sgn_num)) | " " | Nat.show(Pair.snd!!(sgn_num)))
    // #TODO removing let causes weird errors
    // as of kind 1.0.28
    let term = case sgn_num {
      new:
        let ret = Kind.Term.ref("Int.from_nat")
        let ret = Kind.Term.app(ret, Kind.Term.nat(sgn_num.snd))
        case sgn_num.fst {
          true:
            ret
          false:
            let inv = Kind.Term.ref("Int.neg")
            Kind.Term.app(inv, ret)
        }
    }
    return term
  })
