Kind.Parser.open: Parser(Kind.Term)
  Kind.Parser.block("open", Parser {
    Kind.Parser.text("open ")
    get expr = Kind.Parser.term
    get name = Parser.maybe!(Parser {
      Kind.Parser.text("as")
      Kind.Parser.name1
    })
    Parser.maybe!(Kind.Parser.text(";"))
    let name = case name {
      none: case Kind.Term.reduce(expr, Kind.Map.new!) as expr {
        ref: expr.name,
        var: expr.name,
      } default Kind.Name.read("self"),
      some: name.value,
    }
    let wyth = []
    get rest = Kind.Parser.term
    let cses = Kind.Map.set!("_", rest, Kind.Map.new!)
    let moti = Maybe.some!(Kind.Term.hol(Bits.e))
    return Kind.Term.cse(Bits.e, expr, name, wyth, cses, moti)
  })
