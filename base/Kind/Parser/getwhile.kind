Kind.Parser.getwhile: Parser(Kind.Term)
  Kind.Parser.block("let-while", Parser {
    Parser.maybe!(Kind.Parser.text("let "))
    Kind.Parser.text("{")
    get nam0 = Kind.Parser.name1
    Kind.Parser.text(",")
    get nam1 = Kind.Parser.name1
    Kind.Parser.text("}")
    Kind.Parser.text("=")
    Kind.Parser.text("while ")
    get cond = Kind.Parser.term
    Kind.Parser.text(":")
    get loop = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = Kind.Parser.term
    let moti = Kind.Term.lam("", (x) Kind.Term.hol(Bits.e))
    let term = Kind.Term.ref("Function.while")
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let init = Kind.Term.ref("Pair.new")
    let init = Kind.Term.app(init, Kind.Term.hol(Bits.e))
    let init = Kind.Term.app(init, Kind.Term.hol(Bits.e))
    let init = Kind.Term.app(init, Kind.Term.ref(nam0))
    let init = Kind.Term.app(init, Kind.Term.ref(nam1))
    let term = Kind.Term.app(term, init)
    let term = Kind.Term.app(term, Kind.Term.lam("s", (s) Kind.Term.app(Kind.Term.app(s, moti), Kind.Term.lam(nam0, (x) Kind.Term.lam(nam1, (y) cond)))))
    let term = Kind.Term.app(term, Kind.Term.lam("s", (s) Kind.Term.app(Kind.Term.app(s, moti), Kind.Term.lam(nam0, (x) Kind.Term.lam(nam1, (y) loop)))))
    let term = Kind.Term.app(Kind.Term.app(term, moti), Kind.Term.lam(nam0, (x) Kind.Term.lam(nam1, (y) body)))
    return term
  })

Kind.Parser.getwhile.with: Parser(Kind.Term)
  Parser {
    Kind.Parser.text("while ")
    get cond = Kind.Parser.term
    Kind.Parser.text("with ")
    Kind.Parser.text("{")
    get nam0 = Kind.Parser.name1
    Kind.Parser.text(",")
    get nam1 = Kind.Parser.name1
    Kind.Parser.text("}")
    Kind.Parser.text(":")
    get loop = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = Kind.Parser.term
    let moti = Kind.Term.lam("", (x) Kind.Term.hol(Bits.e))
    let term = Kind.Term.ref("Function.while")
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let init = Kind.Term.ref("Pair.new")
    let init = Kind.Term.app(init, Kind.Term.hol(Bits.e))
    let init = Kind.Term.app(init, Kind.Term.hol(Bits.e))
    let init = Kind.Term.app(init, Kind.Term.ref(nam0))
    let init = Kind.Term.app(init, Kind.Term.ref(nam1))
    let term = Kind.Term.app(term, init)
    let term = Kind.Term.app(term, Kind.Term.lam("s", (s) Kind.Term.app(Kind.Term.app(s, moti), Kind.Term.lam(nam0, (x) Kind.Term.lam(nam1, (y) cond)))))
    let term = Kind.Term.app(term, Kind.Term.lam("s", (s) Kind.Term.app(Kind.Term.app(s, moti), Kind.Term.lam(nam0, (x) Kind.Term.lam(nam1, (y) loop)))))
    let term = Kind.Term.app(Kind.Term.app(term, moti), Kind.Term.lam(nam0, (x) Kind.Term.lam(nam1, (y) body)))
    return term
  }
