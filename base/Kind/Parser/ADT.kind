type Kind.Parser.ADT.Constructor {
  new(
    name: Kind.Name,
    args: List<Kind.Binder>,
    inds: List<Kind.Binder>,
  )
}

type Kind.Parser.ADT.Datatype {
  new(
    name: Kind.Name,
    pars: List<Kind.Binder>,
    inds: List<Kind.Binder>,
    ctrs: List<Kind.Parser.ADT.Constructor>,
    deri: List<String>,
  )
}

type Kind.Parser.ADT.Derived {
  new(
    name: Kind.Name
    arit: Nat
    term: Kind.Term
    type: Kind.Term
  )
}

Kind.Parser.ADT.adt: Parser(Kind.Parser.ADT.Datatype)
  Parser {
    Kind.Parser.text("type ")
    get name = Kind.Parser.name1
    get pars = Parser.maybe!(Kind.Parser.binder(":", false))
    get inds = Parser.maybe!(Parser {
      Kind.Parser.text("~")
      Kind.Parser.binder(":", false)
    })
    let pars = Maybe.default!(pars, [])
    let inds = Maybe.default!(inds, [])
    get ctrs = Kind.Parser.items!("{", Kind.Parser.ADT.ctor(name), "}")
    get deri = Parser.maybe!(Parser {
      Kind.Parser.text("deriving")
      Kind.Parser.items!("(", Kind.Parser.name1, ")")
    })
    let deri = case deri {
      none: []
      some: deri.value
    }
    return Kind.Parser.ADT.Datatype.new(name, pars, inds, ctrs, deri)
  }

Kind.Parser.ADT.ctor(namespace: Kind.Name): Parser(Kind.Parser.ADT.Constructor)
  Parser {
    get name = Kind.Parser.name1
    get args = Parser.maybe!(Kind.Parser.binder(":", false))
    get inds = Parser.maybe!(Parser {
      Kind.Parser.text("~")
      Kind.Parser.binder("=", false)
    })
    let args = Maybe.default!(args, [])
    let inds = Maybe.default!(inds, [])
    return Kind.Parser.ADT.Constructor.new(name, args, inds)
  }

Kind.Parser.ADT.Constructor.build_term(type: Kind.Parser.ADT.Datatype, ctor: Kind.Parser.ADT.Constructor): Kind.Term
  open type
  open ctor
  Kind.Parser.ADT.Constructor.build_term.go(type, ctor, type.name, type.pars, ctor.args)
  
Kind.Parser.ADT.Constructor.build_term.go(
  type: Kind.Parser.ADT.Datatype,
  ctor: Kind.Parser.ADT.Constructor,
  name: Kind.Name,
  pars: List<Kind.Binder>,
  args: List<Kind.Binder>,
): Kind.Term
  case pars {
    cons: case pars.head {
      new:
        def par_name = pars.head.name
        def par_body = (x) Kind.Parser.ADT.Constructor.build_term.go(type, ctor, name, pars.tail, args)
        Kind.Term.lam(par_name, par_body)
    }
    nil: case args {
      cons: case args.head {
        new:
          def ctr_name = args.head.name
          def ctr_body = (x) Kind.Parser.ADT.Constructor.build_term.go(type, ctor, name, pars, args.tail)
          Kind.Term.lam(ctr_name, ctr_body)
      },
      nil:
        def lam_name = Kind.Name.read("P")
        def lam_body = (x) Kind.Parser.ADT.Constructor.build_term.opt(type, ctor)
        Kind.Term.lam(lam_name, lam_body)
    }
  }

Kind.Parser.ADT.Constructor.build_term.opt(type: Kind.Parser.ADT.Datatype, ctor: Kind.Parser.ADT.Constructor): Kind.Term
  open type
  Kind.Parser.ADT.Constructor.build_term.opt.go(type, ctor, type.ctrs)

Kind.Parser.ADT.Constructor.build_term.opt.go(
  type: Kind.Parser.ADT.Datatype,
  ctor: Kind.Parser.ADT.Constructor,
  ctrs: List<Kind.Parser.ADT.Constructor>,
): Kind.Term
  case ctrs {
    cons: case ctrs.head {
      new:
        def name = ctrs.head.name
        def body = (x) Kind.Parser.ADT.Constructor.build_term.opt.go(type, ctor, ctrs.tail)
        Kind.Term.lam(name, body)
    }
    nil: 
      case ctor {
        new:
          let ret = Kind.Term.ref(ctor.name)
          let ret = for arg in ctor.args:
            Kind.Term.app(ret, Kind.Term.ref(case arg { new: arg.name }))
          ret
      }
  }

Kind.Parser.ADT.Constructor.build_type(type: Kind.Parser.ADT.Datatype, ctor: Kind.Parser.ADT.Constructor): Kind.Term
  case type {
    new: case ctor {
      new: Kind.Parser.ADT.Constructor.build_type.go(
        type,
        ctor,
        type.name,
        type.pars,
        ctor.args)
    }
  }

Kind.Parser.ADT.Constructor.build_type.go(
  type: Kind.Parser.ADT.Datatype,
  ctor: Kind.Parser.ADT.Constructor,
  name: Kind.Name,
  pars: List<Kind.Binder>,
  args: List<Kind.Binder>,
): Kind.Term
  case pars {
    cons: case pars.head {
      new:
        def pars_eras = pars.head.eras;
        def pars_name = pars.head.name;
        def pars_xtyp = pars.head.term;
        def pars_body = (s,x) Kind.Parser.ADT.Constructor.build_type.go(type, ctor, name, pars.tail, args);
        Kind.Term.all(pars_eras, "", pars_name, pars_xtyp, pars_body),
    },
    nil: case args {
      cons: case args.head {
        new:
          def ctr_eras = args.head.eras;
          def ctr_name = args.head.name;
          def ctr_xtyp = args.head.term;
          def ctr_body = (s,x) Kind.Parser.ADT.Constructor.build_type.go(type, ctor, name, pars, args.tail);
          Kind.Term.all(ctr_eras, "", ctr_name, ctr_xtyp, ctr_body),
      },
      nil: case type {
        new: case ctor {
          new:
            let type = Kind.Term.ref(name);
            let type = for v in type.pars:
              Kind.Term.app(type, Kind.Term.ref(case v { new: v.name }));
            let type = for v in ctor.inds:
              Kind.Term.app(type, case v { new: v.term });
            type,
        }
      }
    }
  }

Kind.Parser.ADT.Datatype.build_term(type: Kind.Parser.ADT.Datatype): Kind.Term
  case type {
    new: Kind.Parser.ADT.Datatype.build_term.go(type, type.name, type.pars, type.inds),
  }

Kind.Parser.ADT.Datatype.build_term.go(
  type: Kind.Parser.ADT.Datatype,
  name: Kind.Name,
  pars: List<Kind.Binder>,
  inds: List<Kind.Binder>,
): Kind.Term
  case pars {
    cons:
      open pars.head
      def par_name = pars.head.name
      def par_body = (x) Kind.Parser.ADT.Datatype.build_term.go(type, name, pars.tail, inds)
      Kind.Term.lam(par_name, par_body)
    nil: case inds {
      cons:
        open inds.head
        def ind_name = inds.head.name
        def ind_body = (x) Kind.Parser.ADT.Datatype.build_term.go(type, name, pars, inds.tail)
        Kind.Term.lam(ind_name, ind_body)
      nil: 
        def moti = Kind.Parser.ADT.Datatype.build_term.motive(type)
        def body = (s,x) Kind.Parser.ADT.Datatype.build_term.constructors(type) // TODO
        Kind.Term.all(Bool.true, String.concat(name,".Self"), Kind.Name.read("P"), moti, body)
    }
  }

Kind.Parser.ADT.Datatype.build_term.constructor(type: Kind.Parser.ADT.Datatype, ctor: Kind.Parser.ADT.Constructor): Kind.Term
  open ctor
  Kind.Parser.ADT.Datatype.build_term.constructor.go(type, ctor, ctor.args)

Kind.Parser.ADT.Datatype.build_term.constructor.go(
  type: Kind.Parser.ADT.Datatype,
  ctor: Kind.Parser.ADT.Constructor,
  args: List<Kind.Binder>,
): Kind.Term
  case args {
    cons:
      open args.head
      let eras = args.head.eras
      let name = args.head.name
      let xtyp = args.head.term
      let body = Kind.Parser.ADT.Datatype.build_term.constructor.go(type, ctor, args.tail)
      Kind.Term.all(eras, "", name, xtyp, (s,x) body)
    nil:
      open type
      open ctor
      let ret = Kind.Term.ref(Kind.Name.read("P"))
      let ret = for v in ctor.inds:
        Kind.Term.app(ret, case v { new: v.term })
      let ctr = String.flatten([type.name,Kind.Name.read("."),ctor.name])
      let slf = Kind.Term.ref(ctr)
      let slf = for v in type.pars:
        Kind.Term.app(slf, Kind.Term.ref(case v { new: v.name }))
      let slf = for v in ctor.args:
        Kind.Term.app(slf, Kind.Term.ref(case v { new: v.name }))
      Kind.Term.app(ret, slf)
  }

Kind.Parser.ADT.Datatype.build_term.constructors(type: Kind.Parser.ADT.Datatype): Kind.Term
  open type
  Kind.Parser.ADT.Datatype.build_term.constructors.go(type, type.name, type.ctrs)

Kind.Parser.ADT.Datatype.build_term.constructors.go(
  type: Kind.Parser.ADT.Datatype,
  name: Kind.Name,
  ctrs: List<Kind.Parser.ADT.Constructor>,
): Kind.Term
  case ctrs {
    cons:
      open ctrs.head
      Kind.Term.all(Bool.false, "",
        ctrs.head.name,
        Kind.Parser.ADT.Datatype.build_term.constructor(type, ctrs.head),
        (s,x) Kind.Parser.ADT.Datatype.build_term.constructors.go(type, name, ctrs.tail))
    nil:
      open type
      let ret = Kind.Term.ref(Kind.Name.read("P"));
      let ret = for v in type.inds:
        Kind.Term.app(ret, Kind.Term.ref(case v { new: v.name }));
      Kind.Term.app(ret, Kind.Term.ref(String.concat(name,".Self")))
  }

Kind.Parser.ADT.Datatype.build_term.motive(
  type: Kind.Parser.ADT.Datatype,
): Kind.Term
  open type
  Kind.Parser.ADT.Datatype.build_term.motive.go(type, type.name, type.inds)

Kind.Parser.ADT.Datatype.build_term.motive.go(
  type: Kind.Parser.ADT.Datatype,
  name: Kind.Name,
  inds: List<Kind.Binder>,
): Kind.Term
  case inds {
    cons:
      open inds.head
      def ind_eras = inds.head.eras
      def ind_name = inds.head.name
      def ind_xtyp = inds.head.term
      def ind_body = (s,x) Kind.Parser.ADT.Datatype.build_term.motive.go(type, name, inds.tail)
      Kind.Term.all(ind_eras, "", ind_name, ind_xtyp, ind_body)
    nil:
      open type
      let slf = Kind.Term.ref(name)
      let slf = for v in type.pars:
        Kind.Term.app(slf, Kind.Term.ref(case v { new: v.name }))
      let slf = for v in type.inds:
      Kind.Term.app(slf, Kind.Term.ref(case v { new: v.name }))
      Kind.Term.all(Bool.false, "", "", slf, (s,x) Kind.Term.typ)
  }

Kind.Parser.ADT.Datatype.build_type(type: Kind.Parser.ADT.Datatype): Kind.Term
  case type {
    new: Kind.Parser.ADT.Datatype.build_type.go(type, type.name, type.pars, type.inds),
  }

Kind.Parser.ADT.Datatype.build_type.go(
  type: Kind.Parser.ADT.Datatype,
  name: Kind.Name,
  pars: List<Kind.Binder>,
  inds: List<Kind.Binder>,
): Kind.Term
  case pars {
    cons: case pars.head {
      new:
        def par_eras = pars.head.eras;
        def par_name = pars.head.name;
        def par_xtyp = pars.head.term;
        def par_body = (s,x) Kind.Parser.ADT.Datatype.build_type.go(type, name, pars.tail, inds);
        Kind.Term.all(Bool.false, "", par_name, par_xtyp, par_body)
    },
    nil: case inds {
      cons: case inds.head {
        new: 
          def ind_eras = inds.head.eras;
          def ind_name = inds.head.name;
          def ind_xtyp = inds.head.term;
          def ind_body = (s,x) Kind.Parser.ADT.Datatype.build_type.go(type, name, pars, inds.tail);
          Kind.Term.all(Bool.false, "", ind_name, ind_xtyp, ind_body)
      },
      nil: Kind.Term.typ,
    }
  }
