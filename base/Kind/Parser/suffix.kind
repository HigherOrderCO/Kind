Kind.Parser.suffix(init: Nat, term: Kind.Term): Parser(Kind.Term)
  (idx, code)
  let suffix_parser = Parser.first_of!([
    Kind.Parser.application(init, term),
    Kind.Parser.application.erased(init, term),
    Kind.Parser.list_set(init, term),
    Kind.Parser.list_get(init, term),
    Kind.Parser.map_set(init, term),
    Kind.Parser.map_get(init, term),
    Kind.Parser.arrow(init, term),
    Kind.Parser.add(init, term),
    Kind.Parser.sub(init, term),
    Kind.Parser.mul(init, term),
    Kind.Parser.div(init, term),
    Kind.Parser.mod(init, term),
    Kind.Parser.ltn(init, term),
    Kind.Parser.lte(init, term),
    Kind.Parser.eql(init, term),
    Kind.Parser.gte(init, term),
    Kind.Parser.gtn(init, term),
    Kind.Parser.and(init, term),
    Kind.Parser.or(init, term),
    Kind.Parser.default(init, term),
    Kind.Parser.cons(init, term),
    Kind.Parser.concat(init, term),
    Kind.Parser.string_concat(init, term),
    Kind.Parser.sigma(init, term),
    Kind.Parser.equality(init, term),
    Kind.Parser.inequality(init, term),
    Kind.Parser.rewrite(init, term),
    Kind.Parser.annotation(init, term),
    Kind.Parser.application.hole(init, term),
  ]);
  case suffix_parser(idx, code) as suffix_parsed {
    error: Parser.Reply.value!(idx, code, term),
    value: Kind.Parser.suffix(init, suffix_parsed.val, suffix_parsed.idx, suffix_parsed.code),
  }
