Kind.Parser.suffix(term: Kind.Term): Parser(Kind.Term)
  (pst)
  open pst
  let suffix_parser = Parser.first_of!([
   Kind.Parser.application(term)
   Kind.Parser.application.erased(term)
   Kind.Parser.list_set(term)
   Kind.Parser.list_get(term)
   Kind.Parser.map_set(term)
   Kind.Parser.map_get(term)
   Kind.Parser.arrow(term)
   Kind.Parser.concat(term)
   Kind.Parser.equality(term)
   Kind.Parser.add(term)
   Kind.Parser.sub(term)
   Kind.Parser.mul(term)
   Kind.Parser.div(term)
   Kind.Parser.mod(term)
   Kind.Parser.ltn(term)
   Kind.Parser.lte(term)
   Kind.Parser.eql(term)
   Kind.Parser.gte(term)
   Kind.Parser.gtn(term)
   Kind.Parser.and(term)
   Kind.Parser.or(term)
   Kind.Parser.default(term)
   Kind.Parser.cons(term)
   Kind.Parser.string_concat(term)
   Kind.Parser.sigma(term)
   Kind.Parser.inequality(term)
   Kind.Parser.rewrite(term)
   Kind.Parser.annotation(term)
   Kind.Parser.application.hole(term)
  ]);
  case suffix_parser(pst) as suffix_parsed {
    error:
      open suffix_parsed.err
      let err = Parser.Error.maybe_combine(pst.err, some(suffix_parsed.err))
      let pst = Parser.State.new(err, pst.nam, pst.ini, pst.idx, pst.str)
      Parser.Reply.value!(pst, term)
    value: 
      Kind.Parser.suffix(suffix_parsed.val, suffix_parsed.pst)
  }
