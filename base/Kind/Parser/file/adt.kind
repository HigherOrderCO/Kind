Kind.Parser.file.adt(file: String, code: String, defs: Kind.Defs): Parser(Kind.Defs)
  Parser {
    get init = Kind.Parser.init;
    get adt = Kind.Parser.datatype;
    get orig = Kind.Parser.stop(init);
    case adt {
      new: Parser {
        let term = Kind.Datatype.build_term(adt);
        let term = Kind.Term.bind([], (x) Bits.i(x), term);
        let type = Kind.Datatype.build_type(adt);
        let type = Kind.Term.bind([], (x) Bits.o(x), type);
        let arit = Nat.add(List.length!(adt.pars), List.length!(adt.inds));
        let defs = Kind.Map.def(file, code, orig, adt.name, term, type, false, arit, false, defs);
        let defs = List.fold!(adt.ctrs)!(defs, (ctr, defs)
          let typ_name = adt.name;
          let ctr_arit = Nat.add(arit, List.length!(case ctr { new: ctr.args }));
          let ctr_name = String.flatten([typ_name, Kind.Name.read("."), case ctr { new: ctr.name }]);
          let ctr_term = Kind.Constructor.build_term(adt, ctr);
          let ctr_term = Kind.Term.bind([], (x) Bits.i(x), ctr_term);
          let ctr_type = Kind.Constructor.build_type(adt, ctr);
          let ctr_type = Kind.Term.bind([], (x) Bits.o(x), ctr_type);
          Kind.Map.def(file, code, orig, ctr_name, ctr_term, ctr_type, true, ctr_arit, false, defs));
        return defs;
      }
    };
  }
