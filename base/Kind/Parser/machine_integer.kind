Kind.Parser.machine_integer.unsigned(size: Nat): Parser(Kind.Term)
  Kind.Parser.block("int", Parser {
    let size_str = Nat.show(size)
    Kind.Parser.spaces
    get natx = Kind.Parser.nat
    Parser.text("#" | Nat.show(size))
    let term = Kind.Term.ref("Nat.to_u" | Nat.show(size))
    let term = Kind.Term.app(term, natx)
    return term
  })

Kind.Parser.machine_integer.signed(size: Nat): Parser(Kind.Term)
  Kind.Parser.block("int", Parser {
    let size_str = Nat.show(size)

    Kind.Parser.spaces
    get sgn_num = Parser.first_of!([Kind.Parser.int_pos, Kind.Parser.int_neg])
    Parser.text("#" | size_str);
    return case sgn_num {
      new:
        let term = Kind.Term.ref("I"|size_str|".from_nat")
        let term = Kind.Term.app(term, Kind.Term.nat(sgn_num.snd))
        let term = if sgn_num.fst then term else Kind.Term.app(Kind.Term.ref("I"|size_str|".neg"), term)
        term
    }
  })
