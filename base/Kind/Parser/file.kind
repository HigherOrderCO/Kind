Kind.Parser.file(file: String, code: String, defs: Kind.Defs): Parser(Kind.Defs)
  Parser {
    get stop = Parser.is_eof
    if stop then Parser {
      return defs
    } else Parser {
      get defs = Parser.first_of!([
        Kind.Parser.file.def(file, code, defs),
        Kind.Parser.file.adt(file, code, defs),
        Kind.Parser.file.end(file, code, defs),
        Parser.fail!("Expected a top-level definition or a type declaration.")
      ])
      get rest = Kind.Parser.file(file, code, defs)
      return rest
    }
  }

Kind.Parser.file.adt(file: String, code: String, defs: Kind.Defs): Parser(Kind.Defs)
  Parser {
    Kind.Parser.spaces
    get from = Parser.get_idx
    get adt  = Kind.Parser.datatype
    get upto = Parser.get_idx
    let orig = {from, upto}
    case adt {
      new: Parser {
        let term = Kind.Datatype.build_term(adt)
        let term = Kind.Term.bind([], (x) Bits.i(x), term)
        let type = Kind.Datatype.build_type(adt)
        let type = Kind.Term.bind([], (x) Bits.o(x), type)
        let arit = Nat.add(List.length!(adt.pars), List.length!(adt.inds))
        let defs = Kind.Map.def(file, code, orig, adt.name, term, type, false, arit, false, defs)
        let defs = List.fold!(adt.ctrs)!(defs, (ctr, defs)
          let typ_name = adt.name
          let ctr_arit = Nat.add(arit, List.length!(case ctr { new: ctr.args }))
          let ctr_name = String.flatten([typ_name, Kind.Name.read("."), case ctr { new: ctr.name }])
          let ctr_term = Kind.Constructor.build_term(adt, ctr)
          let ctr_term = Kind.Term.bind([], (x) Bits.i(x), ctr_term)
          let ctr_type = Kind.Constructor.build_type(adt, ctr)
          let ctr_type = Kind.Term.bind([], (x) Bits.o(x), ctr_type)
          Kind.Map.def(file, code, orig, ctr_name, ctr_term, ctr_type, true, ctr_arit, false, defs))
        return defs
      }
    }
  }

Kind.Parser.file.def(file: String, code: String, defs: Kind.Defs): Parser(Kind.Defs)
  Parser {
    Kind.Parser.spaces
    get from = Parser.get_idx
    get name = Kind.Parser.name1
    get args = Parser.many!(Kind.Parser.binder(":"))
    let args = List.flatten!(args)
    Kind.Parser.text(":")
    get type = Kind.Parser.term
    get term = Kind.Parser.term
    get upto = Parser.get_idx
    let orig = {from, upto}
    let arit = List.length!(args)
    let type = Kind.Parser.forall.make(args, type)
    let term = Kind.Parser.lambda.make(List.mapped!(args)!((x) case x { new: x.name }),term)
    let type = Kind.Term.bind([], (x) Bits.i(x), type)
    let term = Kind.Term.bind([], (x) Bits.o(x), term)
    let defs = Kind.Map.def(file, code, orig, name, term, type, false, arit, false, defs)
    return defs
  }

Kind.Parser.file.end(file: String, code: String, defs: Kind.Defs): Parser(Kind.Defs)
  Parser {
    Kind.Parser.spaces
    Parser.eof
    return defs
  }
