Kind.Parser.map: Parser(Kind.Term)
  Kind.Parser.block("map", Parser {
    get vals = Kind.Parser.items!(
      "{", 
      Parser {
        get key = Kind.Parser.term
        Kind.Parser.text(":")
        get val = Kind.Parser.term
        return {key, val}
      },
      "}")
    let list = List.fold!(vals)!(
      Kind.Term.app(Kind.Term.ref("List.nil"), Kind.Term.hol(Bits.e)),
      (kv,xs)
        let {key,val} = kv
        let pair = Kind.Term.ref("Pair.new")
        let pair = Kind.Term.app(pair, Kind.Term.hol(Bits.e))
        let pair = Kind.Term.app(pair, Kind.Term.hol(Bits.e))
        let pair = Kind.Term.app(pair, key)
        let pair = Kind.Term.app(pair, val)
        let term = Kind.Term.ref("List.cons")
        let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
        let term = Kind.Term.app(term, pair)
        let term = Kind.Term.app(term, xs)
        term)
      let term = Kind.Term.ref("Map.from_list")
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
      let term = Kind.Term.app(term, list)
      return term
  })
