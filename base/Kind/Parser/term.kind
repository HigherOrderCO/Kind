Kind.Parser.term: Parser(Kind.Term)
  Kind.Parser.block("term", Parser {
    get term = Parser.choice!([
      Kind.Parser.dom
      Kind.Parser.forall
      Kind.Parser.lambda
      Kind.Parser.lambda.erased
      Kind.Parser.parenthesis
      Kind.Parser.letforrange.u32((x) Kind.Parser.term)
      Kind.Parser.letforrange.u32.with((x) Kind.Parser.term)
      Kind.Parser.letforrange.i32((x) Kind.Parser.term)
      Kind.Parser.letforrange.i32.with((x) Kind.Parser.term)
      Kind.Parser.letforrange.nat((x) Kind.Parser.term)
      Kind.Parser.letforrange.nat.with((x) Kind.Parser.term)
      Kind.Parser.letforin((x) Kind.Parser.term)
      Kind.Parser.letforin.with((x) Kind.Parser.term)
      Kind.Parser.letforinmap((x) Kind.Parser.term)
      Kind.Parser.letforinmap.with((x) Kind.Parser.term)
      Kind.Parser.letwhile((x) Kind.Parser.term)
      Kind.Parser.letwhile.with((x) Kind.Parser.term)
      Kind.Parser.getforin((x) Kind.Parser.term)
      Kind.Parser.getforin.with((x) Kind.Parser.term)
      Kind.Parser.let.abort((x) Kind.Parser.term)
      Kind.Parser.let((x) Kind.Parser.term)
      // Kind.Parser.let.omit((x) Kind.Parser.term)
      Kind.Parser.getwhile((x) Kind.Parser.term)
      Kind.Parser.getwhile.with((x) Kind.Parser.term)
      Kind.Parser.get((x) Kind.Parser.term)
      // Kind.Parser.get.omit((x) Kind.Parser.term)
      Kind.Parser.def((x) Kind.Parser.term)
      Kind.Parser.lens.let((x) Kind.Parser.term)
      Kind.Parser.use.abort((x) Kind.Parser.term)
      Kind.Parser.use((x) Kind.Parser.term)
      Kind.Parser.implicit
      Kind.Parser.goal_rewrite
      Kind.Parser.if
      Kind.Parser.char
      Kind.Parser.string('"')
      Kind.Parser.string('`')
      Kind.Parser.new
      Kind.Parser.sigma.type
      Kind.Parser.some
      Kind.Parser.not
      Kind.Parser.left
      Kind.Parser.right
      Kind.Parser.apply
      Kind.Parser.chain
      Kind.Parser.mirror
      Kind.Parser.comprehension
      Kind.Parser.comprehension.mapped
      Kind.Parser.comprehension_range
      Kind.Parser.list
      Kind.Parser.map
      Kind.Parser.log((x) Kind.Parser.term)
      Kind.Parser.do
      Kind.Parser.case
      Kind.Parser.open((x) Kind.Parser.term)
      Kind.Parser.without
      Kind.Parser.switch
      Kind.Parser.goal
      Kind.Parser.hole
      Kind.Parser.float.64
      Kind.Parser.float.32
      Kind.Parser.machine_integer.signed(256)
      Kind.Parser.machine_integer.signed(128)
      Kind.Parser.machine_integer.signed(64)
      Kind.Parser.machine_integer.signed(32)
      Kind.Parser.machine_integer.signed(16)
      Kind.Parser.machine_integer.signed(8)
      Kind.Parser.machine_integer.unsigned(256)
      Kind.Parser.machine_integer.unsigned(128)
      Kind.Parser.machine_integer.unsigned(64)
      Kind.Parser.machine_integer.unsigned(32)
      Kind.Parser.machine_integer.unsigned(16)
      Kind.Parser.machine_integer.unsigned(8)
      Kind.Parser.u64 // TODO: deprecated
      Kind.Parser.u32 // TODO: deprecated
      Kind.Parser.u16 // TODO: deprecated
      Kind.Parser.u8 // TODO: deprecated
      Kind.Parser.num
      Kind.Parser.reference
      Parser {
        Kind.Parser.spaces
        Parser.fail!("Expected a term.")
      }
    ])
    get term = Kind.Parser.term.suffix(term)
    return term
  })

Kind.Parser.term.suffix(term: Kind.Term): Parser(Kind.Term)
  (pst)
  open pst
  let suffix_parser = Parser.choice!([
   Kind.Parser.application.hole(term)
   Kind.Parser.application(term)
   Kind.Parser.application.erased(term)
   Kind.Parser.lens(term)
   Kind.Parser.arrow(term)
   Kind.Parser.concat(term)
   Kind.Parser.equality(term)
   Kind.Parser.add(term)
   Kind.Parser.sub(term)
   Kind.Parser.mul(term)
   Kind.Parser.div(term)
   Kind.Parser.mod(term)
   Kind.Parser.ltn(term)
   Kind.Parser.lte(term)
   Kind.Parser.eql(term)
   Kind.Parser.gte(term)
   Kind.Parser.gtn(term)
   Kind.Parser.and(term)
   Kind.Parser.or(term)
   Kind.Parser.composition(term)
   Kind.Parser.default(term)
   Kind.Parser.cons(term)
   Kind.Parser.string_concat(term)
   Kind.Parser.sigma(term)
   Kind.Parser.inequality(term)
   Kind.Parser.rewrite(term)
   Kind.Parser.annotation(term)
  ]);
  case suffix_parser(pst) as suffix_parsed {
    error:
      open suffix_parsed.err
      let err = Parser.Error.maybe_combine(pst.err, some(suffix_parsed.err))
      let pst = Parser.State.new(err, pst.nam, pst.ini, pst.idx, pst.str)
      Parser.Reply.value!(pst, term)
    value: 
      Kind.Parser.term.suffix(suffix_parsed.val, suffix_parsed.pst)
  }
