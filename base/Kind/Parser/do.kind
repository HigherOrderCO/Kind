Kind.Parser.do: Parser(Kind.Term)
  Kind.Parser.block("do", Parser {
    Parser.maybe!(Kind.Parser.text("do "))
    get name = Kind.Parser.name1
    if String.is_upper(String.slice(0,1,name)) then Parser {
      Parser.text(" {")
      get term = Kind.Parser.do.statements(name)
      Kind.Parser.text("}")
      return term
    } else Parser.fail!("Not a do-block.")
  })

Kind.Parser.do.statements(monad_name: Kind.Name): Parser(Kind.Term)
  Parser.choice!([
    // Binding call: @ask x = expr rest@
    Kind.Parser.block("do-get", Parser {
      Parser.choice!([
        Kind.Parser.text("var ")
        Kind.Parser.text("get ")
      ])
      get name = Kind.Parser.name1
      Kind.Parser.text("=")
      get expr = Kind.Parser.term
      Parser.maybe!(Kind.Parser.text(";"))
      get body = Kind.Parser.do.statements(monad_name)
      let term = Kind.Term.app(Kind.Term.ref("Monad.bind"), Kind.Term.ref(monad_name))
      let term = Kind.Term.app(term, Kind.Term.ref(String.concat(monad_name, ".monad")))
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
      let term = Kind.Term.app(term, expr)
      let term = Kind.Term.app(term, Kind.Term.lam(name, (x) body))
      return term
    })
    // Return pure: @return expr@
    Kind.Parser.block("do-return", Parser {
      Kind.Parser.text("return ")
      get expr = Kind.Parser.term
      Parser.maybe!(Kind.Parser.text(";"))
      let term = Kind.Term.app(Kind.Term.ref("Monad.pure"), Kind.Term.ref(monad_name))
      let term = Kind.Term.app(term, Kind.Term.ref(String.concat(monad_name, ".monad")))
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
      let term = Kind.Term.app(term, expr)
      return term
    })
    // For loop: @expr rest@ //TODO
    Kind.Parser.block("do-for-range", Parser {
      Kind.Parser.text("for ")
      get name = Kind.Parser.name1
      Kind.Parser.text("from")
      get from = Kind.Parser.term
      Kind.Parser.text("to")
      get upto = Kind.Parser.term
      Kind.Parser.text(":")
      get loop = Kind.Parser.term
      get body = Parser.maybe!(Kind.Parser.do.statements(monad_name))
      let expr = Kind.Term.ref("Nat.for.io")
      let expr = Kind.Term.app(expr, from)
      let expr = Kind.Term.app(expr, upto)
      let expr = Kind.Term.app(expr, Kind.Term.lam(name, (x) loop))
      case body {
        some: Parser {
          let term = Kind.Term.app(Kind.Term.ref("Monad.bind"), Kind.Term.ref(monad_name))
          let term = Kind.Term.app(term, Kind.Term.ref(String.concat(monad_name, ".monad")))
          let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
          let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
          let term = Kind.Term.app(term, expr)
          let term = Kind.Term.app(term, Kind.Term.lam("", (x) body.value))
          return term
        }
        none: Parser {
          return expr
        }
      }
    })
    // For loop: @expr rest@ //TODO
    Kind.Parser.block("do-for-in", Parser {
      Kind.Parser.text("for ")
      get name = Kind.Parser.name1
      Kind.Parser.text("in")
      get list = Kind.Parser.term
      Kind.Parser.text(":")
      get loop = Kind.Parser.term
      get body = Parser.maybe!(Kind.Parser.do.statements(monad_name))
      let expr = Kind.Term.ref("List.for.io")
      let expr = Kind.Term.app(expr, Kind.Term.hol(Bits.e))
      let expr = Kind.Term.app(expr, list)
      let expr = Kind.Term.app(expr, Kind.Term.lam(name, (x) loop))
      case body {
        some: Parser {
          let term = Kind.Term.app(Kind.Term.ref("Monad.bind"), Kind.Term.ref(monad_name))
          let term = Kind.Term.app(term, Kind.Term.ref(String.concat(monad_name, ".monad")))
          let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
          let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
          let term = Kind.Term.app(term, expr)
          let term = Kind.Term.app(term, Kind.Term.lam("", (x) body.value))
          return term
        }
        none: Parser {
          return expr
        }
      }
    })
    // Binders
    Kind.Parser.letforrange.u32((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.letforrange.u32.with((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.letforrange.nat((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.letforrange.nat.with((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.letforin((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.letforin.with((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.letwhile((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.letwhile.with((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.let.abort((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.let((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.getwhile((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.getwhile.with((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.get((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.def((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.use.abort((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.use((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.log((x) Kind.Parser.do.statements(monad_name))
    Kind.Parser.open((x) Kind.Parser.do.statements(monad_name))
    // Non-binding call: @expr rest@
    Kind.Parser.block("do-statement", Parser {
      get expr = Kind.Parser.term
      Parser.maybe!(Kind.Parser.text(";"))
      get body = Kind.Parser.do.statements(monad_name)
      let term = Kind.Term.app(Kind.Term.ref("Monad.bind"), Kind.Term.ref(monad_name))
      let term = Kind.Term.app(term, Kind.Term.ref(String.concat(monad_name, ".monad")))
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
      let term = Kind.Term.app(term, expr)
      let term = Kind.Term.app(term, Kind.Term.lam("", (x) body))
      return term
    }),
    // Return direct: @expr@
    Kind.Parser.block("do-end", Parser {
      get expr = Kind.Parser.term
      Parser.maybe!(Kind.Parser.text(";"))
      return expr
    }),
  ])
