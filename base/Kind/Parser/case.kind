Kind.Parser.case: Parser(Kind.Term)
  Parser {
    get init = Kind.Parser.init;
    Kind.Parser.text("case ");
    Kind.Parser.spaces;
    get expr = Kind.Parser.term;
    get name = Parser.maybe!(Parser {
      Kind.Parser.text("as");
      Kind.Parser.name1;
    });
    let name = case name {
      none: case Kind.Term.reduce(expr, BitsMap.new!) as expr {
        ref: expr.name,
        var: expr.name,
        _: Kind.Name.read("self"),
      },
      some: name.value,
    };
    get wyth = Parser.many!(Kind.Parser.case.with);
    Kind.Parser.text("{");
    get cses = Parser.until!(Kind.Parser.text("}"), Kind.Parser.case.case);
    get dflt = Parser.maybe!(Parser {
      Kind.Parser.text("default ");
      get term = Kind.Parser.term;
      return term;
    });
    let cses = case dflt {
      none: cses
      some: List.cons!({"_", dflt.value}, cses)
    };
    let cses = BitsMap.from_list!(List.mapped!(cses)!((kv)
      let {key, val} = kv
      {Kind.Name.to_bits(key), val}
    ));
    get moti = Parser.first_of!([
      // Explicit motive
      Parser {
        Kind.Parser.text(":");
        get term = Kind.Parser.term;
        return Maybe.some!(term);
      },
      // Smart motive
      Parser {
        Kind.Parser.text("!");
        return Maybe.none!;
      },
      // Hole motive
      Parser {
        return Maybe.some!(Kind.Term.hol(Bits.e));
      },
    ]);
    get orig = Kind.Parser.stop(init);
    //let moti = case moti { none: Kind.Term.hol(Bits.e), some: moti.value };
    return Kind.Term.ori(orig, Kind.Term.cse(Bits.e, expr, name, wyth, cses, moti));
  }
