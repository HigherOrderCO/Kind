Kind.Parser.binder(sep: String, no_spaces: Bool): Parser(List<Kind.Binder>)
  Parser {
    get lists = Parser.many1!(Parser.choice!([
      Kind.Parser.binder.homo(sep, true, no_spaces)
      Kind.Parser.binder.homo(sep, false, no_spaces)
    ]))
    return List.flatten!(lists)
  }

Kind.Parser.binder.homo(sep: String, eras: Bool, no_spaces: Bool): Parser(List<Kind.Binder>)
  Parser {
    let open = if eras then "<" else "("
    let clos = if eras then ">" else ")"
    let items_parser = 
      if no_spaces then 
        Kind.Parser.items_now
      else 
        Kind.Parser.items
    get bind = items_parser!(open, Kind.Parser.name_term(sep), clos)
    return List.mapped!(bind)!((pair) case pair {
      new: Kind.Binder.new(eras, pair.fst, pair.snd)
    })
  }
