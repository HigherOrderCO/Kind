Kind.Parser.do.statements(monad_name: Kind.Name): Parser(Kind.Term)
  Parser.first_of!([
    // Binding call: @ask x = expr; rest@
    Parser {
      get init = Kind.Parser.init;
      Parser.first_of!([
        Kind.Parser.text("var "),
        Kind.Parser.text("get "),
      ]);
      get name = Kind.Parser.name1;
      Kind.Parser.text("=");
      get expr = Kind.Parser.term;
      Parser.maybe!(Kind.Parser.text(";"));
      get body = Kind.Parser.do.statements(monad_name);
      get orig = Kind.Parser.stop(init);
      let term = Kind.Term.app(Kind.Term.ref("Monad.bind"), Kind.Term.ref(monad_name));
      let term = Kind.Term.app(term, Kind.Term.ref(String.concat(monad_name, ".monad")));
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e));
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e));
      let term = Kind.Term.app(term, expr);
      let term = Kind.Term.app(term, Kind.Term.lam(name, (x) body));
      return Kind.Term.ori(orig, term);
    },
    // Local definition (let): @let x = expr; rest@
    Parser {
      get init = Kind.Parser.init;
      Kind.Parser.text("let ");
      get name = Kind.Parser.name1;
      Kind.Parser.text("=");
      get expr = Kind.Parser.term;
      Parser.maybe!(Kind.Parser.text(";"));
      get body = Kind.Parser.do.statements(monad_name);
      get orig = Kind.Parser.stop(init);
      return Kind.Term.ori(orig, Kind.Term.let(name, expr, (x) body));
    },
    // Return pure: @return expr;@
    Parser {
      get init = Kind.Parser.init;
      Kind.Parser.text("return ");
      get expr = Kind.Parser.term;
      Parser.maybe!(Kind.Parser.text(";"));
      get orig = Kind.Parser.stop(init);
      let term = Kind.Term.app(Kind.Term.ref("Monad.pure"), Kind.Term.ref(monad_name));
      let term = Kind.Term.app(term, Kind.Term.ref(String.concat(monad_name, ".monad")));
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e));
      let term = Kind.Term.app(term, expr);
      return Kind.Term.ori(orig, term);
    },
    // Non-binding call: @expr; rest@
    Parser {
      get init = Kind.Parser.init;
      get expr = Kind.Parser.term;
      Parser.maybe!(Kind.Parser.text(";"));
      get body = Kind.Parser.do.statements(monad_name);
      get orig = Kind.Parser.stop(init);
      let term = Kind.Term.app(Kind.Term.ref("Monad.bind"), Kind.Term.ref(monad_name));
      let term = Kind.Term.app(term, Kind.Term.ref(String.concat(monad_name, ".monad")));
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e));
      let term = Kind.Term.app(term, Kind.Term.hol(Bits.e));
      let term = Kind.Term.app(term, expr);
      let term = Kind.Term.app(term, Kind.Term.lam("", (x) body));
      return Kind.Term.ori(orig, term);
    },
    // Return direct: @expr;@
    Parser {
      get expr = Kind.Parser.term;
      Parser.maybe!(Kind.Parser.text(";"));
      return expr;
    },
  ])
