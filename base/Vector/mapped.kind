Vector.mapped<A: Type, size: Nat>(vector: Vector<A, size>)<B: Type>(fn: A -> B): Vector<B, size>
  case size with vector {
    zero : case vector {
      nil : Vector.nil!
    }
    succ : 
      case vector {
        cons : 
          let pred = Vector.mapped(A, size.pred, vector.tail, B, fn)
          Vector.cons(B, size.pred, fn(vector.head), pred)
      }
  }!