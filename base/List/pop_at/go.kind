List.pop_at.go<A: Type>(idx: Nat, xs: List<A>, searched_list: List<A>): Pair<Maybe<A>, List<A>>
  case idx xs{
    zero cons: {some(xs.head), searched_list ++ xs.tail}
    succ cons: List.pop_at.go!(idx.pred, xs.tail, searched_list ++ [xs.head])
  } default {none, searched_list}
