List.chunks_of.go<A: Type>(
  len   : Nat,     // length of each chunk
  list  : List<A>, // list to be split
  need  : Nat,     // number of vals to complete chunk
  chunk : List<A>  // current chunk
) : List<List<A>>
  case list {
    nil : List.cons!(List.reverse!(chunk), List.nil!),
    cons: case need {
      zero: 
        let head = List.reverse!(chunk)
        let tail = List.chunks_of.go!(len, list, len, List.nil!)
        List.cons!(head, tail),
      succ: 
        let chunk = List.cons!(list.head, chunk)
        List.chunks_of.go!(len, list.tail, need.pred, chunk)
    }
  }