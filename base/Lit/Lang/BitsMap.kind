Lit.Lang.BitsMap: String
`
BitsMap.set(map: BitsMap, key: Bits, value: Bits): BitsMap
  case map : BitsMap {
    new:
      case key : Bits {
        e:
          BitsMap/tie{val: value, lft: BitsMap/new, rgt: BitsMap/new}
        o:
          call ins = BitsMap.set(BitsMap/new, key.pred, value)
          BitsMap/tie{val: Bits/e, lft: ins, rgt: BitsMap/new}
        i:
          call ins = BitsMap.set(BitsMap/new, key.pred, value)
          BitsMap/tie{val: Bits/e, lft: BitsMap/new, rgt: ins}
      }
    tie:
      case key : Bits {
        e:
          BitsMap/tie{val: value, lft: BitsMap/new, rgt: BitsMap/new}
        o:
          call ins = BitsMap.set(map.lft, key.pred, value)
          BitsMap/tie{val: map.val, lft: ins, rgt: map.rgt}
        i:
          call ins = BitsMap.set(map.rgt, key.pred, value)
          BitsMap/tie{val: map.val, lft: map.lft, rgt: ins}
      }
  }

// TODO this function is almost useless because you need to duplicate the map to use it
// very expensive!
BitsMap.get(map: BitsMap, key: Bits): Bits
  case map : BitsMap {
    new:
      Bits/e
    tie:
      case key : Bits {
        e:
          map.val
        o:
          call val = BitsMap.get(map.lft, key.pred)
          val
        i:
          call val = BitsMap.get(map.rgt, key.pred)
          val
      }
  }



BitsMap.get_p(map: BitsMap, key: Bits): PlsRename
  case map : BitsMap {
    new:
      PlsRename/new{value: Bits/e, map: BitsMap/new}
    tie:
      case key : Bits {
        e:
          call dup = Bits.dup(map.val)
          case dup : Pair.Bits {
            new:
              PlsRename/new {
                value: dup.fst,
                map: BitsMap/tie {
                  val: dup.snd
                  lft: map.lft
                  rgt: map.rgt
                }
              }
          }
        o:
          call rec = BitsMap.get_p(map.lft, key.pred)
          case rec : PlsRename {
            new:
              PlsRename/new {
                value: rec.value,
                map: BitsMap/tie {
                  val: map.val
                  lft: rec.map
                  rgt: map.rgt
                }
              }
          }
        i:
          call rec = BitsMap.get_p(map.rgt, key.pred)
          case rec : PlsRename {
            new:
              PlsRename/new {
                value: rec.value
                map: BitsMap/tie {
                  val: map.val
                  lft: map.lft
                  rgt: rec.map
                }
              }
          }
      }
  }


BitsMap.dup(m: BitsMap): Pair.BitsMap
  case m : BitsMap {
    new:
      Pair.BitsMap/new{fst: BitsMap/new, snd: BitsMap/new}
    tie:
      call dup_bits = Bits.dup(m.val)
      call dup_lft = BitsMap.dup(m.lft)
      call dup_rgt = BitsMap.dup(m.rgt)
      case dup_bits : Pair.Bits {
        new:
          case dup_lft : Pair.BitsMap {
            new:
              case dup_rgt : Pair.BitsMap {
                new:
                  Pair.BitsMap/new{
                    fst: BitsMap/tie{val: dup_bits.fst, lft: dup_lft.fst, rgt: dup_rgt.fst}
                    snd: BitsMap/tie{val: dup_bits.snd, lft: dup_lft.snd, rgt: dup_rgt.snd}
                  }
              }
          }
      }
  }

BitsMap.transact2(state: BitsMap, from: Bits, to: Bits, sum: Bits): BitsMap
  call balance = BitsMap.get_p(state, from)
  case balance : PlsRename { 
    new:
      call ok = Bits.lte(sum, balance.value)
      case ok : BitsBitsBool {
        new:
        case ok.trd : Bool { 
          true:
            call receiver = BitsMap.get_p(state, to)
            case receiver : PlsRename {
              new:
                call sender = Bits.sub(sum, balance.value)
                call received = Bits.add_p(sum, receiver.value) 
                case received : BitsBitsBits { 
                  new:
                    call newmap = BitsMap.set(balance.map, from, sender)
                    call newermap = BitsMap.set(newmap, to, received.trd)
                    newermap
                }
            }
          false:
            balance.map
        }
    }
  }

`
