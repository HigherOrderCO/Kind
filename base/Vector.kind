// Vector is a type whose shape depends upon its length.
// Vector<A, 0> has only 1 constructor: nil.
// Vector<A, Nat.succ(n)> has only 1 constructor: cons 
//
// A Vector<A, n> doesn't have a defined shape, so first you need to pattern
// match on "n" before using it. 
// Vec.example<A: Type>(n: Nat, vec: Vector<A>(n)): Maybe(A)
//   case n with vec {
//     zero: Maybe.none!
//     succ: 
//       open vec
//       Maybe.some!(vec.head)
//   }!
Vector(A: Type, len: Nat): Type
  case len {
    zero:
      self(P: (self: Vector(A,0)) -> Type) ->
      (nil: P(Vector.nil(A))) ->
      P(self)
    succ:
      self(P: (self: Vector(A,Nat.succ(len.pred))) -> Type) ->
      (cons: (head: A) -> (tail: Vector(A, len.pred)) -> P(Vector.cons(A,len.pred,head,tail))) ->
      P(self)
  }

Vector.nil(A: Type): Vector(A, 0)
  (self, nil) nil

Vector.cons(A: Type, len: Nat, head: A, tail: Vector(A, len)): Vector(A, Nat.succ(len))
  (self, cons) cons(head, tail)
