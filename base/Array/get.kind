Array.get<A:Type, depth:Nat>(idx: Word(depth), arr: Array<A,depth>): A
  def P = (depth) Array<A,depth> -> A
  def nil = Array.extract_tip<A>
  def w0 = <idx.size> (rec) (arr)
    let arr_l = Array.extract_tie<A, idx.size>(arr)
    case arr_l{
      new: rec(arr_l.fst)
    }
  def w1 = <idx.size> (rec) (arr)
    let arr_r = Array.extract_tie<A, idx.size>(arr)
    case arr_r{
      new: rec(arr_r.snd)
    }
  Word.foldl<P, depth>(nil, w0, w1, idx, arr)
