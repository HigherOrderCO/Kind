Crypto.Keccak.hash(string: String): String
  let buf8 = Buffer8.from_hex(String.to_hex(string))
  let hash = Crypto.Keccak.hash.bytes(buf8)
  Buffer8.to_hex(hash)

Crypto.Keccak.hash.u256(u256: U256): U256
  let buf8 = Buffer8.from_list.256([u256])
  use hash = Crypto.Keccak.hash.bytes(buf8)
  let u256 = Buffer8.to_u256(hash.snd)
  u256

Crypto.Keccak.hash.u256.many(list: List<U256>): U256
  let buf8 = Buffer8.from_list.256(list)
  use hash = Crypto.Keccak.hash.bytes(buf8)
  let u256 = Buffer8.to_u256(hash.snd)
  u256

Crypto.Keccak.hash.bytes.test(unit: Unit): String
  let buf8 = Buffer8.from_hex("0102ff017fcafe8879124567")
  let hash = Crypto.Keccak.hash.bytes(buf8)
  Buffer8.to_hex(hash)

Crypto.Keccak.hash.bytes(len_bytes: Pair<U32, Buffer8>): Pair<U32, Buffer8>
  let {len, bytes} = len_bytes
  let buf = Crypto.Keccak.hash.bytes.go.buf.clear(unit)
  let buf = Crypto.Keccak.hash.bytes.go(len, bytes, 0, 0, buf)
  let res = Buffer8.alloc(5)
  for i: U32 from 0 to 32 with res:
    let b = U32.to_u8(U32.mod(Buffer32.get(i, buf), 256))
    Buffer8.set(i, b, res)
  {32,res}

Crypto.Keccak.hash.bytes.go(len: U32, bytes: Buffer8, i: U32, idx: U32, buf: Buffer32): Buffer32
  if U32.eql(i, len) then
    let idx = U32.mod(idx, 136)
    let buf = Buffer32.set(idx, U32.xor(1, Buffer32.get(idx, buf)), buf)
    let buf = Buffer32.set(135, U32.xor(128, Buffer32.get(135, buf)), buf)
    Crypto.Keccak.f(buf)
  else
    let idx = U32.mod(idx, 136)
    let val = U8.to_u32(Buffer8.get(i, bytes))
    let buf = Buffer32.set(idx, U32.xor(val, Buffer32.get(idx, buf)), buf)
    let buf = if U32.eql(idx,135) then Crypto.Keccak.f(buf) else buf
    Crypto.Keccak.hash.bytes.go(len, bytes, U32.add(i,1), U32.add(idx,1), buf)

Crypto.Keccak.hash.bytes.go.buf: Buffer32
  Buffer32.alloc(8)

Crypto.Keccak.hash.bytes.go.buf.clear(unit: Unit): Buffer32
  let buf = Crypto.Keccak.hash.bytes.go.buf
  for i: U32 from 0 to 256 with buf:
    Buffer32.set(i, 0, buf)
  buf

Crypto.Keccak.f(arr: Buffer32): Buffer32
  // Local definitions, for readability
  def read   = Buffer32.get
  def write  = Buffer32.set
  def or     = U32.or
  def xor    = U32.xor
  def nott   = U32.not
  def and    = U32.and
  def shl    = U32.shl
  def shr    = U32.shr
  def add    = U32.add

  let arr = Crypto.Keccak.compress(arr)
   for i: U32 from 0 to 24u with arr:
    let n  = U32.mul(2, i)
    let c0 = xor(read(0, arr), xor(read(10, arr), xor(read(20, arr), xor(read(30, arr), read(40, arr)))))
    let c1 = xor(read(1, arr), xor(read(11, arr), xor(read(21, arr), xor(read(31, arr), read(41, arr)))))
    let c2 = xor(read(2, arr), xor(read(12, arr), xor(read(22, arr), xor(read(32, arr), read(42, arr)))))
    let c3 = xor(read(3, arr), xor(read(13, arr), xor(read(23, arr), xor(read(33, arr), read(43, arr)))))
    let c4 = xor(read(4, arr), xor(read(14, arr), xor(read(24, arr), xor(read(34, arr), read(44, arr)))))
    let c5 = xor(read(5, arr), xor(read(15, arr), xor(read(25, arr), xor(read(35, arr), read(45, arr)))))
    let c6 = xor(read(6, arr), xor(read(16, arr), xor(read(26, arr), xor(read(36, arr), read(46, arr)))))
    let c7 = xor(read(7, arr), xor(read(17, arr), xor(read(27, arr), xor(read(37, arr), read(47, arr)))))
    let c8 = xor(read(8, arr), xor(read(18, arr), xor(read(28, arr), xor(read(38, arr), read(48, arr)))))
    let c9 = xor(read(9, arr), xor(read(19, arr), xor(read(29, arr), xor(read(39, arr), read(49, arr)))))

    let h   = xor(c8, or(shl(c2, 1), shr(c3, 31)))
    let l   = xor(c9, or(shl(c3, 1), shr(c2, 31)))
    let arr = write(0,  xor(h, read(0, arr)), arr)
    let arr = write(1,  xor(l, read(1, arr)), arr)
    let arr = write(10, xor(h, read(10, arr)), arr)
    let arr = write(11, xor(l, read(11, arr)), arr)
    let arr = write(20, xor(h, read(20, arr)), arr)
    let arr = write(21, xor(l, read(21, arr)), arr)
    let arr = write(30, xor(h, read(30, arr)), arr)
    let arr = write(31, xor(l, read(31, arr)), arr)
    let arr = write(40, xor(h, read(40, arr)), arr)
    let arr = write(41, xor(l, read(41, arr)), arr)

    let h   = xor(c0, or(shl(c4, 1), shr(c5, 31)))
    let l   = xor(c1, or(shl(c5, 1), shr(c4, 31)))
    let arr = write(2, xor(h, read(2, arr)), arr)
    let arr = write(3,  xor(l, read(3, arr)), arr)
    let arr = write(12,  xor(h, read(12, arr)), arr)
    let arr = write(13, xor(l, read(13, arr)), arr)
    let arr = write(22, xor(h, read(22, arr)), arr)
    let arr = write(23, xor(l, read(23, arr)), arr)
    let arr = write(32, xor(h, read(32, arr)), arr)
    let arr = write(33, xor(l, read(33, arr)), arr)
    let arr = write(42, xor(h, read(42, arr)), arr)
    let arr = write(43, xor(l, read(43, arr)), arr)

    let h   = xor(c2, or(shl(c6, 1), shr(c7, 31)))
    let l   = xor(c3, or(shl(c7, 1), shr(c6, 31)))
    let arr = write(4,  xor(h, read(4, arr)), arr)
    let arr = write(5,  xor(l, read(5, arr)), arr)
    let arr = write(14, xor(h, read(14, arr)), arr)
    let arr = write(15, xor(l, read(15, arr)), arr)
    let arr = write(24, xor(h, read(24, arr)), arr)
    let arr = write(25, xor(l, read(25, arr)), arr)
    let arr = write(34, xor(h, read(34, arr)), arr)
    let arr = write(35, xor(l, read(35, arr)), arr)
    let arr = write(44, xor(h, read(44, arr)), arr)
    let arr = write(45, xor(l, read(45, arr)), arr)

    let h   = xor(c4, or(shl(c8, 1), shr(c9, 31)))
    let l   = xor(c5, or(shl(c9, 1), shr(c8, 31)))
    let arr = write(6,  xor(h, read(6, arr)), arr)
    let arr = write(7,  xor(l, read(7, arr)), arr)
    let arr = write(16, xor(h, read(16, arr)), arr)
    let arr = write(17, xor(l, read(17, arr)), arr)
    let arr = write(26, xor(h, read(26, arr)), arr)
    let arr = write(27, xor(l, read(27, arr)), arr)
    let arr = write(36, xor(h, read(36, arr)), arr)
    let arr = write(37, xor(l, read(37, arr)), arr)
    let arr = write(46, xor(h, read(46, arr)), arr)
    let arr = write(47, xor(l, read(47, arr)), arr)

    let h   = xor(c6, or(shl(c0, 1), shr(c1, 31)))
    let l   = xor(c7, or(shl(c1, 1), shr(c0, 31)))
    let arr = write(8,  xor(h, read(8, arr)), arr)
    let arr = write(9,  xor(l, read(9, arr)), arr)
    let arr = write(18, xor(h, read(18, arr)), arr)
    let arr = write(19, xor(l, read(19, arr)), arr)
    let arr = write(28, xor(h, read(28, arr)), arr)
    let arr = write(29, xor(l, read(29, arr)), arr)
    let arr = write(38, xor(h, read(38, arr)), arr)
    let arr = write(39, xor(l, read(39, arr)), arr)
    let arr = write(48, xor(h, read(48, arr)), arr)
    let arr = write(49, xor(l, read(49, arr)), arr)

    let b00 = read(0, arr)
    let b01 = read(1, arr)
    let b32 = or(shl(read(11, arr),  4), shr(read(10, arr), 28))
    let b33 = or(shl(read(10, arr),  4), shr(read(11, arr), 28))
    let b14 = or(shl(read(20, arr),  3), shr(read(21, arr), 29))
    let b15 = or(shl(read(21, arr),  3), shr(read(20, arr), 29))
    let b46 = or(shl(read(31, arr),  9), shr(read(30, arr), 23))
    let b47 = or(shl(read(30, arr),  9), shr(read(31, arr), 23))
    let b28 = or(shl(read(40, arr), 18), shr(read(41, arr), 14))
    let b29 = or(shl(read(41, arr), 18), shr(read(40, arr), 14))
    let b20 = or(shl(read(2,  arr),  1), shr(read(3,  arr), 31))
    let b21 = or(shl(read(3,  arr),  1), shr(read(2,  arr), 31))
    let b02 = or(shl(read(13, arr), 12), shr(read(12, arr), 20))
    let b03 = or(shl(read(12, arr), 12), shr(read(13, arr), 20))
    let b34 = or(shl(read(22, arr), 10), shr(read(23, arr), 22))
    let b35 = or(shl(read(23, arr), 10), shr(read(22, arr), 22))
    let b16 = or(shl(read(33, arr), 13), shr(read(32, arr), 19))
    let b17 = or(shl(read(32, arr), 13), shr(read(33, arr), 19))
    let b48 = or(shl(read(42, arr), 02), shr(read(43, arr), 30))
    let b49 = or(shl(read(43, arr), 02), shr(read(42, arr), 30))
    let b40 = or(shl(read(5,  arr), 30), shr(read(4,  arr),  2))
    let b41 = or(shl(read(4,  arr), 30), shr(read(5,  arr),  2))
    let b22 = or(shl(read(14, arr), 06), shr(read(15, arr), 26))
    let b23 = or(shl(read(15, arr), 06), shr(read(14, arr), 26))
    let b04 = or(shl(read(25, arr), 11), shr(read(24, arr), 21))
    let b05 = or(shl(read(24, arr), 11), shr(read(25, arr), 21))
    let b36 = or(shl(read(34, arr), 15), shr(read(35, arr), 17))
    let b37 = or(shl(read(35, arr), 15), shr(read(34, arr), 17))
    let b18 = or(shl(read(45, arr), 29), shr(read(44, arr),  3))
    let b19 = or(shl(read(44, arr), 29), shr(read(45, arr),  3))
    let b10 = or(shl(read(6,  arr), 28), shr(read(7,  arr),  4))
    let b11 = or(shl(read(7,  arr), 28), shr(read(6,  arr),  4))
    let b42 = or(shl(read(17, arr), 23), shr(read(16, arr),  9))
    let b43 = or(shl(read(16, arr), 23), shr(read(17, arr),  9))
    let b24 = or(shl(read(26, arr), 25), shr(read(27, arr),  7))
    let b25 = or(shl(read(27, arr), 25), shr(read(26, arr),  7))
    let b06 = or(shl(read(36, arr), 21), shr(read(37, arr), 11))
    let b07 = or(shl(read(37, arr), 21), shr(read(36, arr), 11))
    let b38 = or(shl(read(47, arr), 24), shr(read(46, arr),  8))
    let b39 = or(shl(read(46, arr), 24), shr(read(47, arr),  8))
    let b30 = or(shl(read(8,  arr), 27), shr(read(9,  arr),  5))
    let b31 = or(shl(read(9,  arr), 27), shr(read(8,  arr),  5))
    let b12 = or(shl(read(18, arr), 20), shr(read(19, arr), 12))
    let b13 = or(shl(read(19, arr), 20), shr(read(18, arr), 12))
    let b44 = or(shl(read(29, arr), 07), shr(read(28, arr), 25))
    let b45 = or(shl(read(28, arr), 07), shr(read(29, arr), 25))
    let b26 = or(shl(read(38, arr), 08), shr(read(39, arr), 24))
    let b27 = or(shl(read(39, arr), 08), shr(read(38, arr), 24))
    let b08 = or(shl(read(48, arr), 14), shr(read(49, arr), 18))
    let b09 = or(shl(read(49, arr), 14), shr(read(48, arr), 18))

    let arr = write(0,  xor(b00, and(nott(b02), b04)), arr)
    let arr = write(1,  xor(b01, and(nott(b03), b05)), arr)
    let arr = write(10, xor(b10, and(nott(b12), b14)), arr)
    let arr = write(11, xor(b11, and(nott(b13), b15)), arr)
    let arr = write(20, xor(b20, and(nott(b22), b24)), arr)
    let arr = write(21, xor(b21, and(nott(b23), b25)), arr)
    let arr = write(30, xor(b30, and(nott(b32), b34)), arr)
    let arr = write(31, xor(b31, and(nott(b33), b35)), arr)
    let arr = write(40, xor(b40, and(nott(b42), b44)), arr)
    let arr = write(41, xor(b41, and(nott(b43), b45)), arr)
    let arr = write(2,  xor(b02, and(nott(b04), b06)), arr)
    let arr = write(3,  xor(b03, and(nott(b05), b07)), arr)
    let arr = write(12, xor(b12, and(nott(b14), b16)), arr)
    let arr = write(13, xor(b13, and(nott(b15), b17)), arr)
    let arr = write(22, xor(b22, and(nott(b24), b26)), arr)
    let arr = write(23, xor(b23, and(nott(b25), b27)), arr)
    let arr = write(32, xor(b32, and(nott(b34), b36)), arr)
    let arr = write(33, xor(b33, and(nott(b35), b37)), arr)
    let arr = write(42, xor(b42, and(nott(b44), b46)), arr)
    let arr = write(43, xor(b43, and(nott(b45), b47)), arr)
    let arr = write(4,  xor(b04, and(nott(b06), b08)), arr)
    let arr = write(5,  xor(b05, and(nott(b07), b09)), arr)
    let arr = write(14, xor(b14, and(nott(b16), b18)), arr)
    let arr = write(15, xor(b15, and(nott(b17), b19)), arr)
    let arr = write(24, xor(b24, and(nott(b26), b28)), arr)
    let arr = write(25, xor(b25, and(nott(b27), b29)), arr)
    let arr = write(34, xor(b34, and(nott(b36), b38)), arr)
    let arr = write(35, xor(b35, and(nott(b37), b39)), arr)
    let arr = write(44, xor(b44, and(nott(b46), b48)), arr)
    let arr = write(45, xor(b45, and(nott(b47), b49)), arr)
    let arr = write(6,  xor(b06, and(nott(b08), b00)), arr)
    let arr = write(7,  xor(b07, and(nott(b09), b01)), arr)
    let arr = write(16, xor(b16, and(nott(b18), b10)), arr)
    let arr = write(17, xor(b17, and(nott(b19), b11)), arr)
    let arr = write(26, xor(b26, and(nott(b28), b20)), arr)
    let arr = write(27, xor(b27, and(nott(b29), b21)), arr)
    let arr = write(36, xor(b36, and(nott(b38), b30)), arr)
    let arr = write(37, xor(b37, and(nott(b39), b31)), arr)
    let arr = write(46, xor(b46, and(nott(b48), b40)), arr)
    let arr = write(47, xor(b47, and(nott(b49), b41)), arr)
    let arr = write(8,  xor(b08, and(nott(b00), b02)), arr)
    let arr = write(9,  xor(b09, and(nott(b01), b03)), arr)
    let arr = write(18, xor(b18, and(nott(b10), b12)), arr)
    let arr = write(19, xor(b19, and(nott(b11), b13)), arr)
    let arr = write(28, xor(b28, and(nott(b20), b22)), arr)
    let arr = write(29, xor(b29, and(nott(b21), b23)), arr)
    let arr = write(38, xor(b38, and(nott(b30), b32)), arr)
    let arr = write(39, xor(b39, and(nott(b31), b33)), arr)
    let arr = write(48, xor(b48, and(nott(b40), b42)), arr)
    let arr = write(49, xor(b49, and(nott(b41), b43)), arr)

    let arr = write(0, xor(read(n, Crypto.Keccak.RC), read(0, arr)), arr)
    let arr = write(1, xor(read(add(n, 1), Crypto.Keccak.RC), read(1, arr)), arr)
    arr
  Crypto.Keccak.uncompress(arr)

Crypto.Keccak.uncompress.buf: Buffer32
  Buffer32.alloc(8)

Crypto.Keccak.uncompress(buf: Buffer32): Buffer32
  def shr = U32.shr
  def mod = U32.mod
  def add = U32.add
  let ubuf = Crypto.Keccak.uncompress.buf
  for i: U32 from 0 to 256 with ubuf:
    let j    = U32.mul(4, i)
    let w    = Buffer32.get(i, buf)
    let b0   = mod(w, 256)
    let w    = shr(w, 8)
    let b1   = mod(w, 256)
    let w    = shr(w, 8)
    let b2   = mod(w, 256)
    let b3   = shr(w, 8)
    let ubuf = Buffer32.set(j, b0, ubuf)
    let ubuf = Buffer32.set(add(j, 1), b1, ubuf)
    let ubuf = Buffer32.set(add(j, 2), b2, ubuf)
    let ubuf = Buffer32.set(add(j, 3), b3, ubuf)
    ubuf
  ubuf

Crypto.Keccak.compress(buf: Buffer32): Buffer32
  def shl  = U32.shl
  def add  = U32.add
  let cbuf = Crypto.Keccak.compress.buf
  for i: U32 from 0 to 64 with cbuf:
    let j  = U32.mul(4, i)
    let b0 = Buffer32.get(j, buf)
    let b1 = Buffer32.get(add(j, 1), buf)
    let b2 = Buffer32.get(add(j, 2), buf)
    let b3 = Buffer32.get(add(j, 3), buf)
    let w  = add(b0, shl(add(b1, shl(add(b2, shl(b3, 8)), 8)), 8))
    Buffer32.set(i, w, cbuf)
  cbuf

Crypto.Keccak.compress.buf: Buffer32
  Buffer32.alloc(6)

Crypto.Keccak.RC: Buffer32
  let arr = Buffer32.alloc(6)
  let arr = Buffer32.set(0,  1,          arr)
  let arr = Buffer32.set(1,  0,          arr)
  let arr = Buffer32.set(2,  32898,      arr)
  let arr = Buffer32.set(3,  0,          arr)
  let arr = Buffer32.set(4,  32906,      arr)
  let arr = Buffer32.set(5,  2147483648, arr)
  let arr = Buffer32.set(6,  2147516416, arr)
  let arr = Buffer32.set(7,  2147483648, arr)
  let arr = Buffer32.set(8,  32907,      arr)
  let arr = Buffer32.set(9,  0,          arr)
  let arr = Buffer32.set(10, 2147483649, arr)
  let arr = Buffer32.set(11, 0,          arr)
  let arr = Buffer32.set(12, 2147516545, arr)
  let arr = Buffer32.set(13, 2147483648, arr)
  let arr = Buffer32.set(14, 32777,      arr)
  let arr = Buffer32.set(15, 2147483648, arr)
  let arr = Buffer32.set(16, 138,        arr)
  let arr = Buffer32.set(17, 0,          arr)
  let arr = Buffer32.set(18, 136,        arr)
  let arr = Buffer32.set(19, 0,          arr)
  let arr = Buffer32.set(20, 2147516425, arr)
  let arr = Buffer32.set(21, 0,          arr)
  let arr = Buffer32.set(22, 2147483658, arr)
  let arr = Buffer32.set(23, 0,          arr)
  let arr = Buffer32.set(24, 2147516555, arr)
  let arr = Buffer32.set(25, 0,          arr)
  let arr = Buffer32.set(26, 139,        arr)
  let arr = Buffer32.set(27, 2147483648, arr)
  let arr = Buffer32.set(28, 32905,      arr)
  let arr = Buffer32.set(29, 2147483648, arr)
  let arr = Buffer32.set(30, 32771,      arr)
  let arr = Buffer32.set(31, 2147483648, arr)
  let arr = Buffer32.set(32, 32770,      arr)
  let arr = Buffer32.set(33, 2147483648, arr)
  let arr = Buffer32.set(34, 128,        arr)
  let arr = Buffer32.set(35, 2147483648, arr)
  let arr = Buffer32.set(36, 32778,      arr)
  let arr = Buffer32.set(37, 0,          arr)
  let arr = Buffer32.set(38, 2147483658, arr)
  let arr = Buffer32.set(39, 2147483648, arr)
  let arr = Buffer32.set(40, 2147516545, arr)
  let arr = Buffer32.set(41, 2147483648, arr)
  let arr = Buffer32.set(42, 32896,      arr)
  let arr = Buffer32.set(43, 2147483648, arr)
  let arr = Buffer32.set(44, 2147483649, arr)
  let arr = Buffer32.set(45, 0,          arr)
  let arr = Buffer32.set(46, 2147516424, arr)
  let arr = Buffer32.set(47, 2147483648, arr)
  arr
