BitsMap.set_if_empty<A: Type>(bits: Bits, val: A, map: BitsMap<A>): BitsMap<A>
  BitsMap.set_if_empty.cps<A>(bits, val, map)

BitsMap.set_if_empty.cps<A: Type>(bits: Bits, val: A, map: BitsMap<A>): BitsMap<A>
  Trampoline.call!(BitsMap.set_if_empty.cps.go<A>(bits, val, map, Trampoline.done!))

BitsMap.set_if_empty.cps.go<A: Type>(bits: Bits, val: A, map: BitsMap<A>, cont: BitsMap<A> -> Trampoline(BitsMap<A>)): Trampoline(BitsMap<A>)
  case bits map {
    e new: cont(BitsMap.tie!(some(val), BitsMap.new!, BitsMap.new!))
    e tie: cont(BitsMap.tie!(case map.val { none: some(val), some: some(map.val.value) }, map.lft, map.rgt))
    o new: BitsMap.set_if_empty.cps.go<A>(bits.pred, val, BitsMap.new!, (lft) Trampoline.wrap!(() cont(BitsMap.tie!(none   , lft         , BitsMap.new!))))
    o tie: BitsMap.set_if_empty.cps.go<A>(bits.pred, val, map.lft     , (lft) Trampoline.wrap!(() cont(BitsMap.tie!(map.val, lft         , map.rgt     ))))
    i new: BitsMap.set_if_empty.cps.go<A>(bits.pred, val, BitsMap.new!, (rgt) Trampoline.wrap!(() cont(BitsMap.tie!(none   , BitsMap.new!, rgt         ))))
    i tie: BitsMap.set_if_empty.cps.go<A>(bits.pred, val, map.rgt     , (rgt) Trampoline.wrap!(() cont(BitsMap.tie!(map.val, map.lft     , rgt         ))))
  }
