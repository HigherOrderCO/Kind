Effectful (A : Type) : Type
  (self(P : Effectful(A) -> Type) -> 
    (pure : (x : A) -> P(Effectful.new(A, x))) ->
    (return : Type) ->
    (bind : Equal(Type, P(self), Effectful<return>)) ->
    P(self))

Effectful.new : (A : Type) -> (x : A) -> Effectful(A)
  (a, x, P, new, return, bind) new(x)

User.caotic.test : Effectful<String>
  let k = Effectful.new!(2)
  case k {
    pure : Effectful.new!("aa") // Aqui vc sรณ pode retornar um IO
    return : Nat
    bind : k.refl
  }

Effectful.monad.pure(A : Type, x : A) : Effectful<A>
  Effectful.new!(x)

Effectful.monad.bind(A : Type, B : Type, value : Effectful<A>, f : A -> Effectful<B>) : Effectful<B>
  case value {
    pure : f(value.x)
    bind : value.refl
    return : _
  }
