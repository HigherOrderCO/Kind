User.rigille.List.In.split<A: Type>(
  x: A, 
  xs: List<A>,
  Hyp: User.rigille.List.In!(xs, x)
): [l0: List<A>] [l1: List<A>] xs == l0 ++ [x] ++ l1
  def this = User.rigille.List.In.split<A>(x)
  case xs with Hyp {
    nil: Empty.absurd!(Hyp)
    cons: case Hyp {
            left: let inner = refl :: ((xs.head & xs.tail) == (List.nil<A> ++ [xs.head] ++ xs.tail))
                  let qed = inner :: rewrite X in ((xs.head & xs.tail) == (List.nil<A> ++ [X] ++ xs.tail)) with mirror(Hyp.value)
                  List.nil<A> ~ xs.tail ~ qed
            right: let ind = this(xs.tail, Hyp.value)
                   open ind
                   open ind.snd
                   let lem = apply(List.cons<A>(xs.head), ind.snd.snd)
                   let calc = refl :: (xs.head & (ind.fst ++ [x] ++ ind.snd.fst)) == ((xs.head & ind.fst) ++ [x] ++ ind.snd.fst)
                   let qed = Equal.chain!!!!(lem, calc)
                   (xs.head & ind.fst) ~ ind.snd.fst ~ qed
          }
  }!
