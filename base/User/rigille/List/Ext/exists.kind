User.rigille.List.Ext.exists<A: Type>(after: A -> A -> Type, O: User.rigille.Order<A>(after),
  xs: List<A>,
  Hyp: Not(List.length<A>(xs) == 0)
): [x: A] [H: User.rigille.List.In<A>(xs, x)] User.rigille.List.Ext<A, after, O>(xs, x)
  case xs with Hyp {
    nil: Empty.absurd!(Hyp(refl))
    cons: case xs.tail with Hyp {
            nil: let head_in = left(refl) :: User.rigille.List.In<A>([xs.head], xs.head)
                 open O
                 let prop = (y, Hyp) case Hyp {
                          left: let qed = O.refl(y)
                                let qed = qed :: rewrite X in after(X, y) with Hyp.value
                                qed
                          right: Empty.absurd!(Hyp.value)
                        }
                 xs.head ~ head_in ~ prop
            cons: open O
                  let not_empty = Nat.succ_neq_zero(List.length<A>(xs.tail.tail))
                  let ind = User.rigille.List.Ext.exists<A, after, O>(xs.tail.head & xs.tail.tail, not_empty)
                  open ind
                  open ind.snd
                  case O.conn(xs.head, ind.fst) as ord {
                    left: let head_in = left(refl) :: User.rigille.List.In<A>(xs.head & xs.tail.head & xs.tail.tail, xs.head)
                          let head_ext = ((y, Hyp) case Hyp {
                                                 left: let duh = O.refl(y)
                                                       duh :: rewrite X in after(X, y) with Hyp.value
                                                 right: let smaller = ind.snd.snd(y, Hyp.value)
                                                        O.chain!!!(ord.value, smaller)
                                               }!)
                          xs.head ~ head_in ~ head_ext
                    right: let ind_in = right(ind.snd.fst) :: User.rigille.List.In<A>(xs.head & xs.tail.head & xs.tail.tail, ind.fst)
                           let ind_ext = ((y, Hyp) case Hyp {
                                                 left: let qed = ord.value :: rewrite X in after(ind.fst, X) with mirror(Hyp.value)
                                                       qed
                                                 right: ind.snd.snd(y, Hyp.value)
                                               }!)
                           ind.fst ~ ind_in ~ ind_ext
                  }
          }!
  }!
