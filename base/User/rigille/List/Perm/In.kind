// an element of a list is also an element of its permutations
User.rigille.List.Perm.In<A: Type>(
  x: A,
  xs: List<A>,
  ys: List<A>,
  Hyp0: User.rigille.List.In!(xs, x),
  Hyp1: User.rigille.List.Perm!(ys, xs)
): User.rigille.List.In!(ys, x)
  def this = User.rigille.List.Perm.In<A>
  case Hyp1 with Hyp0 {
    nil: Empty.absurd!(Hyp0)
    skip: case Hyp0 {
            left: left(Hyp0.value)
            right: let ind = this(x, Hyp1.l1, Hyp1.l0, Hyp0.value, Hyp1.Hyp)
                   right(ind)
          }
    swap: case Hyp0 {
            left: right(left(Hyp0.value))
            right: case Hyp0.value {
                     left: left(Hyp0.value.value)
                     right: right(right(Hyp0.value.value))
                   }
          }
    trans: 
           let chain_first = this(x, Hyp1.l2, Hyp1.l1, Hyp0, Hyp1.Hyp1)
           let chain_second = this(x, Hyp1.l1, Hyp1.l0, chain_first, Hyp1.Hyp0)
           chain_second
  }!
