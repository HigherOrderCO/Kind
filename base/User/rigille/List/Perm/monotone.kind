User.rigille.List.Perm.Monotone<A: Type>(
  after: A -> A -> Type,
  O: User.rigille.Order<A>(after),
  xs: List<A>,
  ys: List<A>,
  Hyp0: User.rigille.List.Monotone<A, after, O>(xs),
  Hyp1: User.rigille.List.Monotone<A, after, O>(ys),
  Hyp2: User.rigille.List.Perm<A>(xs, ys)
): xs == ys
  def this = User.rigille.List.Perm.Monotone<A, after, O>
  case Hyp2 with Hyp0 Hyp1 Hyp2 {
    nil: refl
    skip: let l0_monotone = User.rigille.List.Monotone.tail<A, after, O>!!(Hyp0)
          let l1_monotone = User.rigille.List.Monotone.tail<A, after, O>!!(Hyp1)
          let ind = this(Hyp2.l0, Hyp2.l1, l0_monotone, l1_monotone, Hyp2.Hyp)
          let qed = apply(List.cons<A>(Hyp2.x), ind)
          qed
    swap: open O
          open Hyp0
          open Hyp1
          let heads_eq = O.anti_symm!!(Hyp0.fst, Hyp1.fst)
          let tails_eq = refl :: Hyp2.l == Hyp2.l
          def cons_y = List.cons<A>(Hyp2.y)
          let lem = apply(cons_y, apply(cons_y, tails_eq))
          let qed = lem :: rewrite X in (Hyp2.y & X & Hyp2.l) == (X & Hyp2.y & Hyp2.l) with heads_eq
          qed
    trans: let ind = this(Hyp2.l0, Hyp2.l2, Hyp0, Hyp1, Hyp2)
           ind
  }!
