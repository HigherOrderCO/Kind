// Tests if "output" is the sorted version of "input"
sort.test(input: List<Nat>, output: List<Nat>): Bool
  // Checks if both lists have the same length
  let ok = Nat.eql(List.length!(input), List.length!(output))

  // Checks if output is in ascending order
  for i from 1 to List.length!(output) with ok:
    if Nat.lte(output[i-1] <> 0, output[i] <> 0) then
      ok
    else
      false

  // Checks if all input elements appear in the output list
  for a in input with ok:
    if List.found!(Nat.eql(a), output) then
      ok
    else
      false
  // Returns if 'sort' worked
  ok

// The sort algorithm
sort(list: List<Nat>): List<Nat>
  use ret = User.rigille.List.Monotone.exists<Nat>(User.rigille.Nat.after, User.rigille.Nat.Order, list)
  ret.fst

sort.spec(
  list: List<Nat>
): Pair<User.rigille.List.Perm<Nat>(sort(list), list)
    User.rigille.List.Monotone<Nat, User.rigille.Nat.after, User.rigille.Nat.Order>(sort(list))>
  use ret = User.rigille.List.Monotone.exists<Nat>(User.rigille.Nat.after, User.rigille.Nat.Order, list)
  let lem = ?a-5- :: (ret.fst == sort(list))
  let lem2 = ret.snd
  ?b

  

proof.ok(list: List<Nat>): Nat.eql(List.length!(list), List.length!(sort(list))) == true
  ?proof.ok

// The proof that it works for *all* inputs
proof(list: List<Nat>): sort.test(list, sort(list)) == true
  ?proof

Test: IO<Unit>
  IO {
    let x = some(7) abort IO.print("ata")
    let y = some(7) abort IO.print("ola")
    return unit
  }

User.rigille.Test(i: CInt): CInt
  case i {
    zero: CInt.zero
    succ: CInt.succ(i)
    pred: CInt.pred(i)
  }
