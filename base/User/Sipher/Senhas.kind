// Converte o input do usuário em uma lista com 4 números
Senhas.read_input(line: String): List<Nat>
  let split = String.split(line," ")
  let map = List.map!!(Nat.read, split)
  let list = List.take!(4, map)
  list

// Verifica se o número está contido na senha
Senha.tem_numero(num: Nat, senha: List<Nat>): Bool
  let tmp = List.map!!(Nat.eql(num), senha)
  let tmp = List.fold!(tmp,_,false ,Bool.or)
  tmp

// Verifica o input do usuário para saber se todos os números são válidos
Senha.confirma(xs: List<Nat>): Bool
  let chck = List.map!!(Nat.gtn(10), xs)
  let chck = List.fold!(chck,_, true, Bool.and)
  chck

// Verifica se o número está contido na senha e retorna um valor em string do
// resultado
Senha.verifica(senha: List<Nat>, a: Nat, b: Nat): String
  case senha { 
    nil:""
    cons:
      if Nat.eql(a,b) then
        "V "
      else if Senha.tem_numero(b, senha) then
        "O "
      else 
      "X "
  }

// Verifica as posições dos valores na senha e retorna uma lista de Strings
Senhas.resposta(suporte: List<Nat>, senha: List<Nat>, tentativa: List<Nat>): List<String>
  case tentativa { 
    nil: []
    cons: case senha { 
      nil: []
      cons: List.cons!(Senha.verifica(suporte, tentativa.head,senha.head), Senhas.resposta(suporte, senha.tail, tentativa.tail))
    }!
  }

// Gera uma lista aleatória de números aleatórios
Nat.randoms(len: Nat, seed: Nat, max: Nat): List<Nat>
  case len { 
    zero:
      []
    succ:
      new_seed = Nat.random(seed)
      (new_seed % max) & Nat.randoms(len.pred, new_seed, max)
    }

// Gera uma lista aleatória de números aleatórios cujo a seed é a hora
IO.randoms(len: Nat, max: Nat): IO<List<Nat>>
  IO { 
    get seed = IO.get_time
    return Nat.randoms(len, seed, max)
  }

// Gera uma lista random baseada no index de outras listas
List.random(xs: List<Nat>, ys: List<Nat>, zs: List<Nat>): List<Nat>
  case xs { 
    nil: zs
    cons: case ys { 
      nil: []
      cons: 
      let a = List.pop_at!(xs.head, ys) open a 
       case a.fst {
        none: List.random(List.cons!(Nat.mod(Nat.random(xs.head), 10),xs.tail),ys,zs)
        some: List.random(xs.tail, a.snd, List.cons!(a.fst.value, zs))
      }
    }
  }

// Gerador de senha
Senhas: IO<Unit>
  IO {
    get num = IO.random(10)
    get num_1 = IO.randoms(4, 10)
    let lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    get lista1 = IO.randoms(6, 10)
    let senha = List.random(num_1, lista, [])
    Senhas.loope(senha, 4)
  }

Senhas.loope(senha: List<Nat>, tentativas: Nat): IO<Unit>
  IO {
    get line = IO.prompt(
      "\nVocê tem: "
      | Nat.show(tentativas + 1)
      |  " tentativas."
      | " Escolha 4 números:"
    );
    let user_nums = Senhas.read_input(line);
    let user_try = Senhas.resposta(senha,user_nums, senha)
    if Senha.confirma(user_nums) then IO { 
      IO.print("Sua resposta está:")
      IO.print(String.join("", user_try))
      if List.eql!(Nat.eql, user_nums, senha) then
        IO.print("Parabéns, você venceu!")
      else
        if Nat.eql(tentativas, 0) then
          IO.print("Infelizmente, você perdeu")
        else
          Senhas.loope(senha, tentativas - 1)
    } else IO { 
      IO.print("Seu input não foi válido, tente novamente")
      Senhas.loope(senha, tentativas)
    }
  }

User.Sipher.Senhas: IO<Unit>
  Senhas
