Parser.hex_digit: Parser(Nat)
  (pst)
  open pst
  case pst.str {
    nil:
      Parser.Reply.fail!(pst.nam, pst.ini, pst.idx, "Not a digit.")
    cons:
      let pst = Parser.State.new(
        pst.err
        pst.nam
        pst.ini
        Nat.succ(pst.idx)
        pst.str.tail
      )
      switch U16.eql(pst.str.head) {
        '0': Parser.Reply.value!(pst, 0)
        '1': Parser.Reply.value!(pst, 1)
        '2': Parser.Reply.value!(pst, 2)
        '3': Parser.Reply.value!(pst, 3)
        '4': Parser.Reply.value!(pst, 4)
        '5': Parser.Reply.value!(pst, 5)
        '6': Parser.Reply.value!(pst, 6)
        '7': Parser.Reply.value!(pst, 7)
        '8': Parser.Reply.value!(pst, 8)
        '9': Parser.Reply.value!(pst, 9)
        'a': Parser.Reply.value!(pst, 10)
        'b': Parser.Reply.value!(pst, 11)
        'c': Parser.Reply.value!(pst, 12)
        'd': Parser.Reply.value!(pst, 13)
        'e': Parser.Reply.value!(pst, 14)
        'f': Parser.Reply.value!(pst, 15)
        'A': Parser.Reply.value!(pst, 10)
        'B': Parser.Reply.value!(pst, 11)
        'C': Parser.Reply.value!(pst, 12)
        'D': Parser.Reply.value!(pst, 13)
        'E': Parser.Reply.value!(pst, 14)
        'F': Parser.Reply.value!(pst, 15)
      } default Parser.Reply.fail!(pst.nam, pst.ini, pst.idx, "Not a digit.")
  }
