Word.zero : @(size:Nat) (Word size) = #size (((size #size (Word size)) Word.e) #size.pred ((Word.o size.pred) (Word.zero size.pred)));
Word.o : %(size:Nat) @(pred:(Word size)) (Word (Nat.succ size)) = #size #pred #P #e #o #i ((o size) pred);
Word.inc : %(size:Nat) @(word:(Word size)) (Word size) = #size #word ((((word #word.size #word (Word word.size)) Word.e) #word.size #word.pred ((Word.i word.size) word.pred)) #word.size #word.pred ((Word.o word.size) ((Word.inc word.size) word.pred)));
Word.i : %(size:Nat) @(pred:(Word size)) (Word (Nat.succ size)) = #size #pred #P #e #o #i ((i size) pred);
Word.e : (Word Nat.zero) = #P #e #o #i e;
Word : @(size:Nat) * = #size %Word.Self(P:@(size:Nat) @(:(Word size)) *) @(e:((P Nat.zero) Word.e)) @(o:%(size:Nat) @(pred:(Word size)) ((P (Nat.succ size)) ((Word.o size) pred))) @(i:%(size:Nat) @(pred:(Word size)) ((P (Nat.succ size)) ((Word.i size) pred))) ((P size) Word.Self);
U32.new : @(value:(Word +32)) U32 = #value #P #new (new value);
U32.from_nat : @(n:Nat) U32 = #n (U32.new ((Nat.to_word (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero))))))))))))))))))))))))))))))))) n));
U32 : * = %U32.Self(P:@(:U32) *) @(new:@(value:(Word +32)) (P (U32.new value))) (P U32.Self);
U16.new : @(value:(Word +16)) U16 = #value #P #new (new value);
U16 : * = %U16.Self(P:@(:U16) *) @(new:@(value:(Word +16)) (P (U16.new value))) (P U16.Self);
T2.new : @(why:U32) @(sand:String) T2 = #why #sand #P #new ((new why) sand);
T2 : * = %T2.Self(P:@(:T2) *) @(new:@(why:U32) @(sand:String) (P ((T2.new why) sand))) (P T2.Self);
T1.new : @(alo:String) @(ola:T2) T1 = #alo #ola #P #new ((new alo) ola);
T1 : * = %T1.Self(P:@(:T1) *) @(new:@(alo:String) @(ola:T2) (P ((T1.new alo) ola))) (P T1.Self);
Test : String = !a = ((T1.new "asd") ((T2.new (U32.from_nat +3)) "sand")); ((a # String) #alo #ola alo);
String.nil : String = #P #nil #cons nil;
String.cons : @(head:Char) @(tail:String) String = #head #tail #P #nil #cons ((cons head) tail);
String : * = %String.Self(P:@(:String) *) @(nil:(P String.nil)) @(cons:@(head:Char) @(tail:String) (P ((String.cons head) tail))) (P String.Self);
Nat.zero : Nat = #P #zero #succ zero;
Nat.to_word : @(size:Nat) @(n:Nat) (Word size) = #size #n ((((Nat.apply (Word size)) n) (Word.inc size)) (Word.zero size));
Nat.succ : @(pred:Nat) Nat = #pred #P #zero #succ (succ pred);
Nat.apply : %(A:*) @(n:Nat) @(f:@(x:A) A) @(x:A) A = #A #n #f #x (((n #n A) x) #n.pred ((((Nat.apply A) n.pred) f) (f x)));
Nat : * = %Nat.Self(P:@(:Nat) *) @(zero:(P Nat.zero)) @(succ:@(pred:Nat) (P (Nat.succ pred))) (P Nat.Self);
Char : * = U16;

