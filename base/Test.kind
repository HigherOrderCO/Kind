Test.main: Nat
  let n = ((P,z,s) s(3)) :: Nat
  let m = Nat.succ(Nat.succ(Nat.zero))
  case Nat.add(n,m) as got {
    zero: 0
    succ: Nat.mul(got.pred,got.pred)
  }

Test: IO(Unit)
  IO {
    let name = "Test.main"
    IO.print("Compiling "|name|" to Scheme...")
    get defs = Kind.Synth.one(name, Kind.Map.new!)
    case defs {
      none: IO.print("Something is wrong.")
      some: IO {
        let defs = Kind.Comp.Defs.compile(defs.value)
        IO.print(Kind.Comp.Target.Scheme(defs)|"(print ("|name|"))\n")
      }
    }
  }
