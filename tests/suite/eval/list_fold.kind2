
List (t: Type) : Type
  Cons <t: Type> (head: t) (tail: List t) : List t
  Nil <t: Type> : List t
  
// Folds over a list
Fold <t: Type> (list: List t) <p: Type> (cons: t -> p -> p) (nil: p) : p
Fold t (Nil u)       p c n = n
Fold t (Cons u x xs) p c n = c x (Fold xs c n)

// A list from 0 to 0
Range (n: U60) (list: List U60) : List U60
Range 0 xs = xs
Range n xs =
  let m = (- n 1)
  Range m (Cons m xs)

// Sums a big list with fold
Main {
  let size = 434
  let list = Range size Nil
  Fold list (a => b => (+ a b)) 0
}