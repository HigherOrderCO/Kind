// From https://github.com/Kindelia/Functional-Benchmarks/blob/master/Checker/Base.kind2
//
// Types
// =====

// Equality
// --------

Base.Equal <t: Type> (a: t) (b: t) : Type
Base.refl <t: Type> <a: t> : Base.Equal t a a

// Boolean
// -------

Base.Bool : Type
  Base.true  : Base.Bool
  Base.false : Base.Bool

// Natural Number
// --------------

Base.Nat : Type
  Base.zero : Base.Nat
  Base.succ (pred: Base.Nat) : Base.Nat

// Binary Tree
// -----------

Base.Tree : Type
  Base.leaf : Base.Tree
  Base.node (l: Base.Tree) (r: Base.Tree) : Base.Tree

// Vector
// ------

Base.Vector (t: Type) (len: Base.Nat) : Type
  Base.cons <t: Type> <len: Base.Nat> (head: t) (tail: Base.Vector t len) : Base.Vector t (Base.succ len)
  Base.nil <t: Type> : Base.Vector t Base.zero

// Church Boolean
// --------------

Base.Church.Bool : Type
Base.Church.Bool = (p: Type) -> (t: p) -> (f: p) -> p

Base.Church.true : Base.Church.Bool
Base.Church.true = p => t => f => t

Base.Church.false : Base.Church.Bool
Base.Church.false = p => t => f => f

// Church Natural Number
// ---------------------

Base.Church.Nat : Type
Base.Church.Nat = (p: Type) -> (f: p -> p) -> (z: p) -> p

Base.Church.zero : Base.Church.Nat
Base.Church.zero = p => f => z => z

Base.Church.succ (n: Base.Church.Nat) : Base.Church.Nat
Base.Church.succ n = p => f => z => f (n p f z)

// Church Tree
// -----------

Base.Church.Tree : Type
Base.Church.Tree = (p: Type) -> (n: p -> p -> p) -> (l: p) -> p

Base.Church.leaf : Base.Church.Tree
Base.Church.leaf = p => n => l => l

Base.Church.node (a: Base.Church.Tree) (b: Base.Church.Tree) : Base.Church.Tree
Base.Church.node a b = p => n => l => n (a p n l) (b p n l)

// Church Vector
// -------------

Base.Church.Vector (t: Type) (len: Base.Nat) : Type
Base.Church.Vector t n = (p: Base.Nat -> Type) -> (cons: (len: Base.Nat) -> (head: t) -> (tail: p len) -> p (Base.succ len)) -> (nil: p Base.zero) -> p n

Base.Church.nil <t: Type> : Base.Church.Vector t Base.zero
Base.Church.nil t = p => cons => nil => nil

Base.Church.cons <t: Type> <len: Base.Nat> (head: t) (tail: Base.Church.Vector t len) : Base.Church.Vector t (Base.succ len)
Base.Church.cons t len head tail = p => cons => nil => cons len head (tail p cons nil) 

// Functions
// =========

Base.not (b: Base.Bool) : Base.Bool
Base.not Base.false = Base.true
Base.not Base.true  = Base.false

Base.and (a: Base.Bool) (b: Base.Bool) : Base.Bool
Base.and Base.false Base.false = Base.false
Base.and Base.false Base.true  = Base.false
Base.and Base.true  Base.false = Base.false
Base.and Base.true  Base.true  = Base.true

Base.add (a: Base.Nat) (b: Base.Nat) : Base.Nat
Base.add x Base.zero     = x
Base.add x (Base.succ y) = Base.succ (Base.add x y)

Base.mul (a: Base.Nat) (b: Base.Nat) : Base.Nat
Base.mul a Base.zero     = Base.zero
Base.mul a (Base.succ b) = Base.add a (Base.mul a b)

Base.exp (a: Base.Nat) (b: Base.Nat) : Base.Nat
Base.exp a Base.zero     = Base.succ Base.zero
Base.exp a (Base.succ b) = Base.mul a (Base.exp a b)

Base.is_even (a: Base.Nat) : Base.Bool
Base.is_even Base.zero     = Base.true
Base.is_even (Base.succ a) = Base.not (Base.is_even a)

Base.full_tree (d: Base.Nat) : Base.Tree
Base.full_tree Base.zero     = Base.leaf
Base.full_tree (Base.succ d) = let branch = Base.full_tree d; Base.node branch branch

Base.tree_fold (a: Base.Tree) (p: Type) (n: p -> p -> p) (l: p) : p
Base.tree_fold Base.leaf       p n l = l
Base.tree_fold (Base.node a b) p n l = n (Base.tree_fold a p n l) (Base.tree_fold b p n l)

Base.force_tree (a: Base.Tree) : Base.Bool
Base.force_tree t = Base.tree_fold t Base.Bool (a => b => Base.and a b) Base.true

Base.Church.not (b: Base.Church.Bool) : Base.Church.Bool
Base.Church.not b = p => t => f => b p f t

Base.Church.and (a: Base.Church.Bool) (b: Base.Church.Bool) : Base.Church.Bool
Base.Church.and a b = p => t => f => a p (b p t f) f

Base.Church.add (a: Base.Church.Nat) (b: Base.Church.Nat) : Base.Church.Nat
Base.Church.add a b = p => f => z => a p f (b p f z)

Base.Church.mul (a: Base.Church.Nat) (b: Base.Church.Nat) : Base.Church.Nat
Base.Church.mul a b = p => f => a p (b p f)

Base.Church.exp (a: Base.Church.Nat) (b: Base.Church.Nat) : Base.Church.Nat
Base.Church.exp a b = p => b (p -> p) (a p)

Base.Church.is_even (a: Base.Church.Nat) : Base.Church.Bool
Base.Church.is_even a = a Base.Church.Bool (x => Base.Church.not x) Base.Church.true

Base.Church.full_tree (d: Base.Church.Nat) : Base.Church.Tree
Base.Church.full_tree d = p => n => l => d p (t => n t t) l

Base.Church.tree_fold (a: Base.Church.Tree) (p: Type) (n: p -> p -> p) (l: p) : p
Base.Church.tree_fold t p n l = t p n l

Base.Church.force_tree (a: Base.Church.Tree) : Base.Church.Bool
Base.Church.force_tree t = Base.Church.tree_fold t Base.Church.Bool (a => b => Base.Church.and a b) Base.Church.true

// Elaboration
// ===========

//Id : (t : Type) -> t -> t
//Id = t => x => x

//Bad : (t : Type) -> t -> t
//Bad = ((Id) _ Id) _ Id



// Constants
// =========

Base.N0  : Base.Nat { Base.zero }
Base.N1  : Base.Nat { Base.succ Base.N0 }
Base.N2  : Base.Nat { Base.succ Base.N1 }
Base.N3  : Base.Nat { Base.succ Base.N2 }
Base.N4  : Base.Nat { Base.succ Base.N3 }
Base.N5  : Base.Nat { Base.succ Base.N4 }
Base.N6  : Base.Nat { Base.succ Base.N5 }
Base.N7  : Base.Nat { Base.succ Base.N6 }
Base.N8  : Base.Nat { Base.succ Base.N7 }
Base.N9  : Base.Nat { Base.succ Base.N8 }
Base.N10 : Base.Nat { Base.succ Base.N9 }
Base.N11 : Base.Nat { Base.succ Base.N10 }
Base.N12 : Base.Nat { Base.succ Base.N11 }
Base.N13 : Base.Nat { Base.succ Base.N12 }
Base.N14 : Base.Nat { Base.succ Base.N13 }
Base.N15 : Base.Nat { Base.succ Base.N14 }
Base.N16 : Base.Nat { Base.succ Base.N15 }
Base.N17 : Base.Nat { Base.succ Base.N16 }
Base.N18 : Base.Nat { Base.succ Base.N17 }
Base.N19 : Base.Nat { Base.succ Base.N18 }
Base.N20 : Base.Nat { Base.succ Base.N19 }
Base.N21 : Base.Nat { Base.succ Base.N20 }
Base.N22 : Base.Nat { Base.succ Base.N21 }
Base.N23 : Base.Nat { Base.succ Base.N22 }
Base.N24 : Base.Nat { Base.succ Base.N23 }
Base.N25 : Base.Nat { Base.succ Base.N24 }
Base.N26 : Base.Nat { Base.succ Base.N25 }
Base.N27 : Base.Nat { Base.succ Base.N26 }
Base.N28 : Base.Nat { Base.succ Base.N27 }
Base.N29 : Base.Nat { Base.succ Base.N28 }
Base.N30 : Base.Nat { Base.succ Base.N29 }
Base.N31 : Base.Nat { Base.succ Base.N30 }
Base.N32 : Base.Nat { Base.succ Base.N31 }

Base.Church.N0  : Base.Church.Nat { Base.Church.zero }
Base.Church.N1  : Base.Church.Nat { Base.Church.succ Base.Church.N0 }
Base.Church.N2  : Base.Church.Nat { Base.Church.succ Base.Church.N1 }
Base.Church.N3  : Base.Church.Nat { Base.Church.succ Base.Church.N2 }
Base.Church.N4  : Base.Church.Nat { Base.Church.succ Base.Church.N3 }
Base.Church.N5  : Base.Church.Nat { Base.Church.succ Base.Church.N4 }
Base.Church.N6  : Base.Church.Nat { Base.Church.succ Base.Church.N5 }
Base.Church.N7  : Base.Church.Nat { Base.Church.succ Base.Church.N6 }
Base.Church.N8  : Base.Church.Nat { Base.Church.succ Base.Church.N7 }
Base.Church.N9  : Base.Church.Nat { Base.Church.succ Base.Church.N8 }
Base.Church.N10 : Base.Church.Nat { Base.Church.succ Base.Church.N9 }
Base.Church.N11 : Base.Church.Nat { Base.Church.succ Base.Church.N10 }
Base.Church.N12 : Base.Church.Nat { Base.Church.succ Base.Church.N11 }
Base.Church.N13 : Base.Church.Nat { Base.Church.succ Base.Church.N12 }
Base.Church.N14 : Base.Church.Nat { Base.Church.succ Base.Church.N13 }
Base.Church.N15 : Base.Church.Nat { Base.Church.succ Base.Church.N14 }
Base.Church.N16 : Base.Church.Nat { Base.Church.succ Base.Church.N15 }
Base.Church.N17 : Base.Church.Nat { Base.Church.succ Base.Church.N16 }
Base.Church.N18 : Base.Church.Nat { Base.Church.succ Base.Church.N17 }
Base.Church.N19 : Base.Church.Nat { Base.Church.succ Base.Church.N18 }
Base.Church.N20 : Base.Church.Nat { Base.Church.succ Base.Church.N19 }
Base.Church.N21 : Base.Church.Nat { Base.Church.succ Base.Church.N20 }
Base.Church.N22 : Base.Church.Nat { Base.Church.succ Base.Church.N21 }
Base.Church.N23 : Base.Church.Nat { Base.Church.succ Base.Church.N22 }
Base.Church.N24 : Base.Church.Nat { Base.Church.succ Base.Church.N23 }
Base.Church.N25 : Base.Church.Nat { Base.Church.succ Base.Church.N24 }
Base.Church.N26 : Base.Church.Nat { Base.Church.succ Base.Church.N25 }
Base.Church.N27 : Base.Church.Nat { Base.Church.succ Base.Church.N26 }
Base.Church.N28 : Base.Church.Nat { Base.Church.succ Base.Church.N27 }
Base.Church.N29 : Base.Church.Nat { Base.Church.succ Base.Church.N28 }
Base.Church.N30 : Base.Church.Nat { Base.Church.succ Base.Church.N29 }
Base.Church.N31 : Base.Church.Nat { Base.Church.succ Base.Church.N30 }
Base.Church.N32 : Base.Church.Nat { Base.Church.succ Base.Church.N31 }

Test {
  (Base.cons Type (Base.cons Type (Base.cons Type (Base.cons Type (Base.cons Type (Base.cons Type
    Base.nil
  ))))))
}

Base { 0 }
