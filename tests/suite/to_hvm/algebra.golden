// Algebra.Group.concat -(t: Type) (group: (Algebra.Group t)) : (_: t) (_: t) t
(Algebra.Group.concat (Algebra.Group.new monoid inverse inverse_proof)) = (Algebra.Monoid.concat monoid)

// Algebra.Monoid.concat -(t: Type) (monoid: (Algebra.Monoid t)) : (_: t) (_: t) t
(Algebra.Monoid.concat (Algebra.Monoid.new sg empty id)) = (Algebra.Semigroup.concat sg)

// Algebra.Semigroup.concat -(t: Type) (semigroup: (Algebra.Semigroup t)) : (_: t) (_: t) t
(Algebra.Semigroup.concat (Algebra.Semigroup.new magma assoc)) = (Algebra.Magma.concat magma)

// Algebra.Laws.associativity.eta -(t: Type) (concat: (_: t) (_: t) t) : Type
(Algebra.Laws.associativity.eta concat) = 0

// Algebra.Magma.concat -(t: Type) (magma: (Algebra.Magma t)) : (_: t) (_: t) t
(Algebra.Magma.concat (Algebra.Magma.new concat)) = concat

// Algebra.Monoid.empty -(t: Type) (monoid: (Algebra.Monoid t)) : t
(Algebra.Monoid.empty (Algebra.Monoid.new sg empty id)) = empty

