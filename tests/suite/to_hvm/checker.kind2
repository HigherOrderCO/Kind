Main : (String)
Main = (let imports = (List.cons _ (Dynamic.new _ ((a => ((b => (Kind.Term.set_origin a b)) :: (b: _) _)) :: (a: _) _)) (List.cons _ (Dynamic.new _ (Kind.API.check_all)) (List.cons _ (Dynamic.new _ (Kind.API.eval_main)) (List.nil _)))); (Kind.API.check_all))

List.cons <t: Type> (head: t) (tail: (List t)) : (List t)

List (t: Type) : Type

String : Type

Kind.Term.set_origin (new_origin: U60) (term: (Kind.Term)) : (Kind.Term)
Kind.Term.set_origin new_origin (Kind.Term.typ old_orig) = (Kind.Term.typ new_origin)
Kind.Term.set_origin new_origin (Kind.Term.var old_orig name idx) = (Kind.Term.var new_origin name idx)
Kind.Term.set_origin new_origin (Kind.Term.hol old_orig numb) = (Kind.Term.hol new_origin numb)
Kind.Term.set_origin new_origin (Kind.Term.all old_orig name typ body) = (Kind.Term.all new_origin name typ body)
Kind.Term.set_origin new_origin (Kind.Term.lam old_orig name body) = (Kind.Term.lam new_origin name body)
Kind.Term.set_origin new_origin (Kind.Term.let old_orig name expr body) = (Kind.Term.let new_origin name expr body)
Kind.Term.set_origin new_origin (Kind.Term.ann old_orig expr typ) = (Kind.Term.ann new_origin expr typ)
Kind.Term.set_origin new_origin (Kind.Term.sub old_orig name indx redx expr) = (Kind.Term.sub new_origin name indx redx expr)
Kind.Term.set_origin new_origin (Kind.Term.app old_orig func arg) = (Kind.Term.app new_origin func arg)
Kind.Term.set_origin new_origin (Kind.Term.hlp old_orig) = (Kind.Term.hlp new_origin)
Kind.Term.set_origin new_origin (Kind.Term.u60 old_orig) = (Kind.Term.u60 new_origin)
Kind.Term.set_origin new_origin (Kind.Term.num old_orig num) = (Kind.Term.num new_origin num)
Kind.Term.set_origin new_origin (Kind.Term.op2 old_orig op left right) = (Kind.Term.op2 new_origin op left right)
Kind.Term.set_origin new_origin (Kind.Term.ct0 ctid old_orig) = (Kind.Term.ct0 ctid new_origin)
Kind.Term.set_origin new_origin (Kind.Term.ct1 ctid old_orig x0) = (Kind.Term.ct1 ctid new_origin x0)
Kind.Term.set_origin new_origin (Kind.Term.ct2 ctid old_orig x0 x1) = (Kind.Term.ct2 ctid new_origin x0 x1)
Kind.Term.set_origin new_origin (Kind.Term.ct3 ctid old_orig x0 x1 x2) = (Kind.Term.ct3 ctid new_origin x0 x1 x2)
Kind.Term.set_origin new_origin (Kind.Term.ct4 ctid old_orig x0 x1 x2 x3) = (Kind.Term.ct4 ctid new_origin x0 x1 x2 x3)
Kind.Term.set_origin new_origin (Kind.Term.ct5 ctid old_orig x0 x1 x2 x3 x4) = (Kind.Term.ct5 ctid new_origin x0 x1 x2 x3 x4)
Kind.Term.set_origin new_origin (Kind.Term.ct6 ctid old_orig x0 x1 x2 x3 x4 x5) = (Kind.Term.ct6 ctid new_origin x0 x1 x2 x3 x4 x5)
Kind.Term.set_origin new_origin (Kind.Term.ct7 ctid old_orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.ct7 ctid new_origin x0 x1 x2 x3 x4 x5 x6)
Kind.Term.set_origin new_origin (Kind.Term.ct8 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.ct8 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7)
Kind.Term.set_origin new_origin (Kind.Term.ct9 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.ct9 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8)
Kind.Term.set_origin new_origin (Kind.Term.ct10 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.ct10 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9)
Kind.Term.set_origin new_origin (Kind.Term.ct11 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.ct11 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10)
Kind.Term.set_origin new_origin (Kind.Term.ct12 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.ct12 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11)
Kind.Term.set_origin new_origin (Kind.Term.ct13 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.ct13 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)
Kind.Term.set_origin new_origin (Kind.Term.ct14 ctid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.ct14 ctid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)
Kind.Term.set_origin new_origin (Kind.Term.ct15 ctid old_orig args) = (Kind.Term.ct15 ctid new_origin args)
Kind.Term.set_origin new_origin (Kind.Term.ct16 ctid old_orig args) = (Kind.Term.ct16 ctid new_origin args)
Kind.Term.set_origin new_origin (Kind.Term.fn0 fnid old_orig) = (Kind.Term.fn0 fnid new_origin)
Kind.Term.set_origin new_origin (Kind.Term.fn1 fnid old_orig x0) = (Kind.Term.fn1 fnid new_origin x0)
Kind.Term.set_origin new_origin (Kind.Term.fn2 fnid old_orig x0 x1) = (Kind.Term.fn2 fnid new_origin x0 x1)
Kind.Term.set_origin new_origin (Kind.Term.fn3 fnid old_orig x0 x1 x2) = (Kind.Term.fn3 fnid new_origin x0 x1 x2)
Kind.Term.set_origin new_origin (Kind.Term.fn4 fnid old_orig x0 x1 x2 x3) = (Kind.Term.fn4 fnid new_origin x0 x1 x2 x3)
Kind.Term.set_origin new_origin (Kind.Term.fn5 fnid old_orig x0 x1 x2 x3 x4) = (Kind.Term.fn5 fnid new_origin x0 x1 x2 x3 x4)
Kind.Term.set_origin new_origin (Kind.Term.fn6 fnid old_orig x0 x1 x2 x3 x4 x5) = (Kind.Term.fn6 fnid new_origin x0 x1 x2 x3 x4 x5)
Kind.Term.set_origin new_origin (Kind.Term.fn7 fnid old_orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.fn7 fnid new_origin x0 x1 x2 x3 x4 x5 x6)
Kind.Term.set_origin new_origin (Kind.Term.fn8 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.fn8 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7)
Kind.Term.set_origin new_origin (Kind.Term.fn9 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.fn9 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8)
Kind.Term.set_origin new_origin (Kind.Term.fn10 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.fn10 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9)
Kind.Term.set_origin new_origin (Kind.Term.fn11 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.fn11 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10)
Kind.Term.set_origin new_origin (Kind.Term.fn12 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.fn12 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11)
Kind.Term.set_origin new_origin (Kind.Term.fn13 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.fn13 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)
Kind.Term.set_origin new_origin (Kind.Term.fn14 fnid old_orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.fn14 fnid new_origin x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)
Kind.Term.set_origin new_origin (Kind.Term.fn15 ctid old_orig args) = (Kind.Term.fn15 ctid new_origin args)
Kind.Term.set_origin new_origin (Kind.Term.fn16 ctid old_orig args) = (Kind.Term.fn16 ctid new_origin args)

Kind.Term : Type

Kind.Term.typ (orig: U60) : (Kind.Term)

Kind.Term.hol (orig: U60) (number: U60) : (Kind.Term)

Kind.Term.var (orig: U60) (name: U60) (index: U60) : (Kind.Term)

Kind.Term.all (orig: U60) (name: U60) (typ: (Kind.Term)) (body: (_: (Kind.Term)) (Kind.Term)) : (Kind.Term)

Kind.Term.lam (orig: U60) (name: U60) (body: (_: (Kind.Term)) (Kind.Term)) : (Kind.Term)

Kind.Term.app (orig: U60) (func: (Kind.Term)) (arg: (Kind.Term)) : (Kind.Term)

Kind.Term.let (orig: U60) (name: U60) (expr: (Kind.Term)) (body: (_: (Kind.Term)) (Kind.Term)) : (Kind.Term)

Kind.Term.ann (orig: U60) (expr: (Kind.Term)) (typ: (Kind.Term)) : (Kind.Term)

Kind.Term.sub (orig: U60) (name: U60) (indx: U60) (redx: U60) (expr: (Kind.Term)) : (Kind.Term)

Kind.Term.ct0 (ctid: U60) (orig: U60) : (Kind.Term)

Kind.Term.ct1 (ctid: U60) (orig: U60) (x0: (Kind.Term)) : (Kind.Term)

Kind.Term.ct2 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) : (Kind.Term)

Kind.Term.ct3 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) : (Kind.Term)

Kind.Term.ct4 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) : (Kind.Term)

Kind.Term.ct5 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) : (Kind.Term)

Kind.Term.ct6 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) : (Kind.Term)

Kind.Term.ct7 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) : (Kind.Term)

Kind.Term.ct8 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) : (Kind.Term)

Kind.Term.ct9 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) : (Kind.Term)

Kind.Term.ct10 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) : (Kind.Term)

Kind.Term.ct11 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) : (Kind.Term)

Kind.Term.ct12 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) : (Kind.Term)

Kind.Term.ct13 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) : (Kind.Term)

Kind.Term.ct14 (ctid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term)) : (Kind.Term)

Kind.Term.ct15 (ctid: U60) (orig: U60) (args: (Kind.Term)) : (Kind.Term)

Kind.Term.ct16 (ctid: U60) (orig: U60) (args: (Kind.Term)) : (Kind.Term)

Kind.Term.fn0 (fnid: U60) (orig: U60) : (Kind.Term)

Kind.Term.fn1 (fnid: U60) (orig: U60) (x0: (Kind.Term)) : (Kind.Term)

Kind.Term.fn2 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) : (Kind.Term)

Kind.Term.fn3 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) : (Kind.Term)

Kind.Term.fn4 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) : (Kind.Term)

Kind.Term.fn5 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) : (Kind.Term)

Kind.Term.fn6 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) : (Kind.Term)

Kind.Term.fn7 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) : (Kind.Term)

Kind.Term.fn8 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) : (Kind.Term)

Kind.Term.fn9 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) : (Kind.Term)

Kind.Term.fn10 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) : (Kind.Term)

Kind.Term.fn11 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) : (Kind.Term)

Kind.Term.fn12 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) : (Kind.Term)

Kind.Term.fn13 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) : (Kind.Term)

Kind.Term.fn14 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term)) : (Kind.Term)

Kind.Term.fn15 (fnid: U60) (orig: U60) (args: (Kind.Term)) : (Kind.Term)

Kind.Term.fn16 (fnid: U60) (orig: U60) (args: (Kind.Term)) : (Kind.Term)

Kind.Term.FN0 (fnid: U60) (orig: U60) : (Kind.Term)

Kind.Term.FN1 (fnid: U60) (orig: U60) (x0: (Kind.Term)) : (Kind.Term)

Kind.Term.FN2 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) : (Kind.Term)

Kind.Term.FN3 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) : (Kind.Term)

Kind.Term.FN4 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) : (Kind.Term)

Kind.Term.FN5 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) : (Kind.Term)

Kind.Term.FN6 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) : (Kind.Term)

Kind.Term.FN7 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) : (Kind.Term)

Kind.Term.FN8 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) : (Kind.Term)

Kind.Term.FN9 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) : (Kind.Term)

Kind.Term.FN10 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) : (Kind.Term)

Kind.Term.FN11 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) : (Kind.Term)

Kind.Term.FN12 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) : (Kind.Term)

Kind.Term.FN13 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) : (Kind.Term)

Kind.Term.FN14 (fnid: U60) (orig: U60) (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term)) : (Kind.Term)

Kind.Term.FN15 (fnid: U60) (orig: U60) (args: (Kind.Term)) : (Kind.Term)

Kind.Term.FN16 (fnid: U60) (orig: U60) (args: (Kind.Term)) : (Kind.Term)

Kind.Term.hlp (orig: U60) : (Kind.Term)

Kind.Term.u60 (orig: U60) : (Kind.Term)

Kind.Term.num (orig: U60) (num: U60) : (Kind.Term)

Kind.Term.op2 (orig: U60) (operator: (Kind.Operator)) (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Term)

Kind.Term.args15 (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term)) (x14: (Kind.Term)) : (Kind.Term)

Kind.Term.args16 (x0: (Kind.Term)) (x1: (Kind.Term)) (x2: (Kind.Term)) (x3: (Kind.Term)) (x4: (Kind.Term)) (x5: (Kind.Term)) (x6: (Kind.Term)) (x7: (Kind.Term)) (x8: (Kind.Term)) (x9: (Kind.Term)) (x10: (Kind.Term)) (x11: (Kind.Term)) (x12: (Kind.Term)) (x13: (Kind.Term)) (x14: (Kind.Term)) (x15: (Kind.Term)) : (Kind.Term)

Kind.Operator : Type

Main. : U60

Kind.API.eval_main : (String)
Kind.API.eval_main = (Kind.Printer.text (List.cons _ (Kind.Term.show (Kind.Term.FN0 (Main.) 0)) (List.cons _ (String.new_line) (List.cons _ (String.new_line) (List.nil _)))))

NameOf (name: U60) : (String)

Kind.Term.show.forall (orig: U60) (name: U60) (type: (Kind.Term)) (body: (_: (Kind.Term)) (Kind.Term)) : (String)
Kind.Term.show.forall orig name type body = (U60.if _ (== name 63) (Kind.Printer.text (List.cons _ "(" (List.cons _ (Kind.Term.show type) (List.cons _ " -> " (List.cons _ (Kind.Term.show (body (Kind.Term.var orig name 0))) (List.cons _ ")" (List.nil _))))))) (Kind.Printer.text (List.cons _ "((" (List.cons _ (Kind.Name.show name) (List.cons _ ": " (List.cons _ (Kind.Term.show type) (List.cons _ ") -> " (List.cons _ (Kind.Term.show (body (Kind.Term.var orig name 0))) (List.cons _ ")" (List.nil _))))))))))

Kind.Term.show (term: (Kind.Term)) : (String)
Kind.Term.show term = (let sugars = (List.cons _ (Kind.Term.show.sugar.string term) (List.cons _ (Kind.Term.show.sugar.list term) (List.cons _ (Kind.Term.show.sugar.sigma term) (List.nil _)))); (Maybe.try _ sugars (Kind.Term.show.go term)))

Kind.Term.show.go (term: (Kind.Term)) : (String)
Kind.Term.show.go (Kind.Term.typ orig) = "Type"
Kind.Term.show.go (Kind.Term.var orig name index) = (Kind.Printer.text (List.cons _ (Kind.Name.show name) (List.nil _)))
Kind.Term.show.go (Kind.Term.hol orig numb) = (Kind.Printer.text (List.cons _ "_" (List.nil _)))
Kind.Term.show.go (Kind.Term.all orig name type body) = (Kind.Term.show.forall orig name type body)
Kind.Term.show.go (Kind.Term.lam orig name body) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (Kind.Name.show name) (List.cons _ " => " (List.cons _ (Kind.Term.show (body (Kind.Term.var orig name 0))) (List.cons _ ")" (List.nil _)))))))
Kind.Term.show.go (Kind.Term.let orig name exp body) = (Kind.Printer.text (List.cons _ "let " (List.cons _ (Kind.Name.show name) (List.cons _ " = " (List.cons _ (Kind.Term.show exp) (List.cons _ "; " (List.cons _ (Kind.Term.show (body (Kind.Term.var orig name 0))) (List.nil _))))))))
Kind.Term.show.go (Kind.Term.ann orig expr type) = (Kind.Printer.text (List.cons _ "{" (List.cons _ (Kind.Term.show expr) (List.cons _ " :: " (List.cons _ (Kind.Term.show type) (List.cons _ "}" (List.nil _)))))))
Kind.Term.show.go (Kind.Term.sub orig name indx redx expr) = (Kind.Printer.text (List.cons _ (Kind.Term.show expr) (List.cons _ " ## " (List.cons _ (Kind.Name.show name) (List.cons _ "/" (List.cons _ (Show.to_string (U60.show redx)) (List.nil _)))))))
Kind.Term.show.go (Kind.Term.app orig func argm) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (Kind.Term.show func) (List.cons _ " " (List.cons _ (Kind.Term.show argm) (List.cons _ ")" (List.nil _)))))))
Kind.Term.show.go (Kind.Term.ct0 ctid orig) = (NameOf ctid)
Kind.Term.show.go (Kind.Term.ct1 ctid orig x0) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ ")" (List.nil _)))))))
Kind.Term.show.go (Kind.Term.ct2 ctid orig x0 x1) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ ")" (List.nil _)))))))))
Kind.Term.show.go (Kind.Term.ct3 ctid orig x0 x1 x2) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ ")" (List.nil _)))))))))))
Kind.Term.show.go (Kind.Term.ct4 ctid orig x0 x1 x2 x3) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ ")" (List.nil _)))))))))))))
Kind.Term.show.go (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ ")" (List.nil _)))))))))))))))
Kind.Term.show.go (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ ")" (List.nil _)))))))))))))))))
Kind.Term.show.go (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ ")" (List.nil _)))))))))))))))))))
Kind.Term.show.go (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ ")" (List.nil _)))))))))))))))))))))
Kind.Term.show.go (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ ")" (List.nil _)))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ " " (List.cons _ (Kind.Term.show x11) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ " " (List.cons _ (Kind.Term.show x11) (List.cons _ " " (List.cons _ (Kind.Term.show x12) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ " " (List.cons _ (Kind.Term.show x11) (List.cons _ " " (List.cons _ (Kind.Term.show x12) (List.cons _ " " (List.cons _ (Kind.Term.show x13) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.ct15 ctid orig x0) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ ")" (List.nil _)))))))
Kind.Term.show.go (Kind.Term.ct16 ctid orig x0) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf ctid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ ")" (List.nil _)))))))
Kind.Term.show.go (Kind.Term.fn0 fnid orig) = (NameOf fnid)
Kind.Term.show.go (Kind.Term.fn1 fnid orig x0) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ ")" (List.nil _)))))))
Kind.Term.show.go (Kind.Term.fn2 fnid orig x0 x1) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ ")" (List.nil _)))))))))
Kind.Term.show.go (Kind.Term.fn3 fnid orig x0 x1 x2) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ ")" (List.nil _)))))))))))
Kind.Term.show.go (Kind.Term.fn4 fnid orig x0 x1 x2 x3) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ ")" (List.nil _)))))))))))))
Kind.Term.show.go (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ ")" (List.nil _)))))))))))))))
Kind.Term.show.go (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ ")" (List.nil _)))))))))))))))))
Kind.Term.show.go (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ ")" (List.nil _)))))))))))))))))))
Kind.Term.show.go (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ ")" (List.nil _)))))))))))))))))))))
Kind.Term.show.go (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ ")" (List.nil _)))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ " " (List.cons _ (Kind.Term.show x11) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ " " (List.cons _ (Kind.Term.show x11) (List.cons _ " " (List.cons _ (Kind.Term.show x12) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ " " (List.cons _ (Kind.Term.show x11) (List.cons _ " " (List.cons _ (Kind.Term.show x12) (List.cons _ " " (List.cons _ (Kind.Term.show x13) (List.cons _ ")" (List.nil _)))))))))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.fn15 fnid orig x0) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ ")" (List.nil _)))))))
Kind.Term.show.go (Kind.Term.fn16 fnid orig x0) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (NameOf fnid) (List.cons _ " " (List.cons _ (Kind.Term.show x0) (List.cons _ ")" (List.nil _)))))))
Kind.Term.show.go (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) = (Kind.Printer.text (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ " " (List.cons _ (Kind.Term.show x11) (List.cons _ " " (List.cons _ (Kind.Term.show x12) (List.cons _ " " (List.cons _ (Kind.Term.show x13) (List.cons _ " " (List.cons _ (Kind.Term.show x14) (List.nil _)))))))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) = (Kind.Printer.text (List.cons _ (Kind.Term.show x0) (List.cons _ " " (List.cons _ (Kind.Term.show x1) (List.cons _ " " (List.cons _ (Kind.Term.show x2) (List.cons _ " " (List.cons _ (Kind.Term.show x3) (List.cons _ " " (List.cons _ (Kind.Term.show x4) (List.cons _ " " (List.cons _ (Kind.Term.show x5) (List.cons _ " " (List.cons _ (Kind.Term.show x6) (List.cons _ " " (List.cons _ (Kind.Term.show x7) (List.cons _ " " (List.cons _ (Kind.Term.show x8) (List.cons _ " " (List.cons _ (Kind.Term.show x9) (List.cons _ " " (List.cons _ (Kind.Term.show x10) (List.cons _ " " (List.cons _ (Kind.Term.show x11) (List.cons _ " " (List.cons _ (Kind.Term.show x12) (List.cons _ " " (List.cons _ (Kind.Term.show x13) (List.cons _ " " (List.cons _ (Kind.Term.show x14) (List.cons _ " " (List.cons _ (Kind.Term.show x15) (List.nil _)))))))))))))))))))))))))))))))))
Kind.Term.show.go (Kind.Term.hlp orig) = "?"
Kind.Term.show.go (Kind.Term.u60 orig) = "U60"
Kind.Term.show.go (Kind.Term.num orig numb) = (Show.to_string (U60.show numb))
Kind.Term.show.go (Kind.Term.op2 orig operator left right) = (Kind.Printer.text (List.cons _ "(" (List.cons _ (Kind.Operator.show operator) (List.cons _ " " (List.cons _ (Kind.Term.show left) (List.cons _ " " (List.cons _ (Kind.Term.show right) (List.cons _ ")" (List.nil _)))))))))

Sigma. : U60

Kind.Term.show.sugar.sigma (term: (Kind.Term)) : (Maybe (String))
Kind.Term.show.sugar.sigma (Kind.Term.ct2 (Sigma.) orig typ (Kind.Term.lam orig_ name body)) = (Maybe.some _ (Kind.Printer.text (List.cons _ "([" (List.cons _ (Kind.Name.show name) (List.cons _ ": " (List.cons _ (Kind.Term.show typ) (List.cons _ "] -> " (List.cons _ (Kind.Term.show (body (Kind.Term.var orig_ name 0))) (List.cons _ ")" (List.nil _))))))))))
Kind.Term.show.sugar.sigma term = (Maybe.none _)

Maybe.some <t: Type> (value: t) : (Maybe t)

Maybe (t: Type) : Type

String.nil : (String)

String.cons (head: U60) (tail: (String)) : (String)

Kind.Name.show.go (name: U60) (chrs: (String)) : (String)
Kind.Name.show.go name chrs = (U60.if _ (== name 0) chrs (let val = (% name 64); (let chr = (U60.if _ (== val 0) 46 (U60.if _ (& (<= 1 val) (<= val 10)) (+ (- val 1) 48) (U60.if _ (& (<= 11 val) (<= val 36)) (+ (- val 11) 65) (U60.if _ (& (<= 37 val) (<= val 62)) (+ (- val 37) 97) (U60.if _ (== val 63) 95 63))))); (Kind.Name.show.go (/ name 64) (String.cons chr chrs)))))

Kind.Name.show (name: U60) : (String)
Kind.Name.show name = (Kind.Name.show.go name "")

U60.if <r: Type> (n: U60) (t: r) (f: r) : r
U60.if r 0 t f = f
U60.if r x t f = t

Maybe.none <t: Type> : (Maybe t)

Kind.Printer.text (ls: (List (String))) : (String)
Kind.Printer.text (List.nil t) = ""
Kind.Printer.text (List.cons t x xs) = (String.concat x (Kind.Printer.text xs))

List.nil <t: Type> : (List t)

String.concat (xs: (String)) (ys: (String)) : (String)
String.concat (String.cons x xs) ys = (String.cons x (String.concat xs ys))
String.concat "" ys = ys

U60.show (n: U60) : (Show)
U60.show 0 = (str => (String.cons 48 str))
U60.show n = (str => (let next = (String.cons (+ 48 (% n 10)) str); (let func = (U60.if (Show) (< n 10) (h => h) (h => ((U60.show (/ n 10)) h))); (func next))))

Show : Type
Show = (_: (String)) (String)

Maybe.try <a: Type> (ls: (List (Maybe a))) (alt: a) : a
Maybe.try a (List.nil t) alt = alt
Maybe.try a (List.cons t maybe xs) alt = (Maybe.match _ maybe (maybe => _) (Maybe.try _ xs alt) (maybe.value => maybe.value))

Maybe.match <t: Type> (x: (Maybe t)) -(p: (x: (Maybe t)) Type) (none: (p (Maybe.none t))) (some: (value: t) (p (Maybe.some t value))) : (p x)
Maybe.match t (Maybe.none t_) p none some = none
Maybe.match t (Maybe.some t_ value_) p none some = (some value_)

Show.to_string (show: (Show)) : (String)
Show.to_string show = (show "")

String.nil. : U60

String.cons. : U60

Kind.Term.show.sugar.string.go (term: (Kind.Term)) : (Maybe (String))
Kind.Term.show.sugar.string.go (Kind.Term.ct0 (String.nil.) orig) = (Maybe.some _ "")
Kind.Term.show.sugar.string.go (Kind.Term.ct2 (String.cons.) orig (Kind.Term.num orig1 x0) x1) = (Maybe.bind _ _ (Kind.Term.show.sugar.string.go x1) (tail => (Maybe.pure _ (String.cons x0 tail))))
Kind.Term.show.sugar.string.go other = (Maybe.none _)

Kind.Term.show.sugar.string (term: (Kind.Term)) : (Maybe (String))
Kind.Term.show.sugar.string term = (Maybe.bind _ _ (Kind.Term.show.sugar.string.go term) (res => (let quot = (String.cons 39 ""); (Maybe.pure _ (Kind.Printer.text (List.cons _ quot (List.cons _ res (List.cons _ quot (List.nil _)))))))))

Maybe.bind <a: Type> <b: Type> (ma: (Maybe a)) (mb: (_: a) (Maybe b)) : (Maybe b)
Maybe.bind a b (Maybe.none t) mb = (Maybe.none _)
Maybe.bind a b (Maybe.some t val) mb = (mb val)

Maybe.pure <a: Type> (x: a) : (Maybe a)
Maybe.pure a x = (Maybe.some _ x)

List.nil. : U60

List.cons. : U60

Kind.Term.show.sugar.list.go (term: (Kind.Term)) : (Maybe (List (String)))
Kind.Term.show.sugar.list.go (Kind.Term.ct0 (List.nil.) orig) = (Maybe.some _ (List.nil _))
Kind.Term.show.sugar.list.go (Kind.Term.ct2 (List.cons.) orig x0 x1) = (Maybe.bind _ _ (Kind.Term.show.sugar.list.go x1) (tail => (Maybe.pure _ (List.cons _ (Kind.Term.show x0) tail))))
Kind.Term.show.sugar.list.go other = (Maybe.none _)

Kind.Term.show.sugar.list (term: (Kind.Term)) : (Maybe (String))
Kind.Term.show.sugar.list term = (Maybe.bind _ _ (Kind.Term.show.sugar.list.go term) (res => (Maybe.pure _ (Kind.Printer.text (List.cons _ "[" (List.cons _ (String.join " " res) (List.cons _ "]" (List.nil _))))))))

String.join (sep: (String)) (list: (List (String))) : (String)
String.join sep list = (String.intercalate sep list)

String.intercalate (sep: (String)) (xs: (List (String))) : (String)
String.intercalate sep xs = (String.flatten (List.intersperse _ sep xs))

List.intersperse <a: Type> (sep: a) (xs: (List a)) : (List a)
List.intersperse a sep (List.nil xa) = (List.nil _)
List.intersperse a sep (List.cons xa xh (List.nil xa_)) = (List.pure _ xh)
List.intersperse a sep (List.cons xa xh xt) = (List.cons _ xh (List.cons _ sep (List.intersperse _ sep xt)))

List.pure <t: Type> (x: t) : (List t)
List.pure t x = (List.cons _ x (List.nil _))

String.flatten (xs: (List (String))) : (String)
String.flatten (List.nil t) = ""
String.flatten (List.cons t head tail) = (String.concat head (String.flatten tail))

Kind.Operator.show (op: (Kind.Operator)) : (String)
Kind.Operator.show (Kind.Operator.add) = "+"
Kind.Operator.show (Kind.Operator.sub) = "-"
Kind.Operator.show (Kind.Operator.mul) = "*"
Kind.Operator.show (Kind.Operator.div) = "/"
Kind.Operator.show (Kind.Operator.mod) = "%"
Kind.Operator.show (Kind.Operator.and) = "&"
Kind.Operator.show (Kind.Operator.or) = "|"
Kind.Operator.show (Kind.Operator.xor) = "^"
Kind.Operator.show (Kind.Operator.shl) = "<<"
Kind.Operator.show (Kind.Operator.shr) = ">>"
Kind.Operator.show (Kind.Operator.ltn) = "<"
Kind.Operator.show (Kind.Operator.lte) = "<="
Kind.Operator.show (Kind.Operator.eql) = "=="
Kind.Operator.show (Kind.Operator.gte) = ">="
Kind.Operator.show (Kind.Operator.gtn) = ">"
Kind.Operator.show (Kind.Operator.neq) = "!="

Kind.Operator.xor : (Kind.Operator)

Kind.Operator.add : (Kind.Operator)

Kind.Operator.sub : (Kind.Operator)

Kind.Operator.gtn : (Kind.Operator)

Kind.Operator.mul : (Kind.Operator)

Kind.Operator.and : (Kind.Operator)

Kind.Operator.neq : (Kind.Operator)

Kind.Operator.lte : (Kind.Operator)

Kind.Operator.div : (Kind.Operator)

Kind.Operator.shr : (Kind.Operator)

Kind.Operator.or : (Kind.Operator)

Kind.Operator.mod : (Kind.Operator)

Kind.Operator.ltn : (Kind.Operator)

Kind.Operator.eql : (Kind.Operator)

Kind.Operator.gte : (Kind.Operator)

Kind.Operator.shl : (Kind.Operator)

String.new_line : (String)
String.new_line = (String.pure (Char.newline))

Char.newline : (Char)
Char.newline = 10

Char : Type
Char = U60

String.pure (x: (Char)) : (String)
String.pure x = (String.cons x "")

Dynamic.new <a: Type> (value: a) : (Dynamic)

Dynamic : Type

Functions : (List U60)

Kind.API.check_all : (String)
Kind.API.check_all = (let output = (Kind.API.output (List.reverse _ (Kind.API.check_functions (Functions)))); (Bool.if _ (String.is_nil output) (Kind.Printer.text (List.cons _ "All terms check." (List.cons _ (String.new_line) (List.cons _ (String.new_line) (List.nil _))))) output))

Kind.API.check_functions (fnid: (List U60)) : (List (Pair U60 (List (Kind.Result (Unit)))))
Kind.API.check_functions (List.nil t) = (List.nil _)
Kind.API.check_functions (List.cons t f fs) = (let head = (Pair.new _ _ f (Kind.API.check_function f)); (let tail = (Kind.API.check_functions fs); (List.cons _ head tail)))

Kind.Result (a: Type) : Type

Pair.new <a: Type> <b: Type> (fst: a) (snd: b) : (Pair a b)

Pair (a: Type) (b: Type) : Type

RuleOf (fnid: U60) : (List (Kind.Rule))

TypeOf (u: U60) : (Kind.Term)

Kind.API.check_function (fnid: U60) : (List (Kind.Result (Unit)))
Kind.API.check_function fnid = (let rules = (RuleOf fnid); (let type = (TypeOf fnid); (let type_check = (Kind.Checker.run _ (Kind.Checker.unify (Kind.Checker.check type (Kind.Term.typ 0))) (Bool.true)); (let rule_check = (Kind.API.check_function.rules rules (Kind.Term.eval type)); (List.cons _ type_check rule_check)))))

Kind.API.check_function.rules (rules: (List (Kind.Rule))) (type: (Kind.Term)) : (List (Kind.Result (Unit)))
Kind.API.check_function.rules (List.nil t) type = (List.nil _)
Kind.API.check_function.rules (List.cons t rule rules) type = (let head = (Kind.Checker.run _ (Kind.Checker.unify (Kind.Checker.rule rule type)) (Bool.false)); (let tail = (Kind.API.check_function.rules rules type); (List.cons _ head tail)))

Kind.Checker.check (term: (Kind.Term)) (type: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.check (Kind.Term.lam orig name body) type = (Kind.Checker.bind _ _ (Kind.Checker.get_subst) (subst => (let fun = ((Kind.Term.if_all _ type (t_orig => (t_name => (t_type => (t_body => ((orig => ((name => ((body => (Kind.Checker.bind _ _ (Kind.Checker.get_depth) (dep => (Kind.Checker.bind _ _ (Kind.Checker.extended _ (Kind.Checker.check (body (Kind.Term.var orig name dep)) (t_body (Kind.Term.var t_orig t_name dep))) name t_type (List.nil _)) (chk => (Kind.Checker.pure _ (Unit.new))))))) :: (body: (_: (Kind.Term)) (Kind.Term)) _)) :: (name: U60) _)) :: (orig: U60) _))))) ((orig => ((name => ((body => (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.cant_infer_lambda ctx orig))))) :: (body: (_: (Kind.Term)) (Kind.Term)) _)) :: (name: U60) _)) :: (orig: U60) _)) :: (_: U60) (_: U60) (_: (_: (Kind.Term)) (Kind.Term)) (Kind.Checker (Unit))); (fun orig name body))))
Kind.Checker.check (Kind.Term.let orig name expr body) type = (Kind.Checker.bind _ _ (Kind.Checker.get_depth) (dep => (Kind.Checker.bind _ _ (Kind.Checker.infer expr) (expr_typ => (Kind.Checker.bind _ _ (Kind.Checker.extended _ (Kind.Checker.check (body (Kind.Term.var orig name dep)) type) name expr_typ (List.cons _ (Kind.Term.eval expr) (List.nil _))) (body_chk => (Kind.Checker.pure _ (Unit.new))))))))
Kind.Checker.check (Kind.Term.hlp orig) type = (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.bind _ _ (Kind.Checker.error _ (Kind.Error.inspection ctx orig type) (Unit.new)) (_ => (Kind.Checker.pure _ (Unit.new))))))
Kind.Checker.check (Kind.Term.var orig name idx) type = (Kind.Checker.bind _ _ (Kind.Checker.get_right_hand_side) (rhs => (Bool.if _ rhs (Kind.Checker.compare rhs (Kind.Term.var orig name idx) type) (Kind.Checker.extend name type (List.nil _)))))
Kind.Checker.check (Kind.Term.hol orig numb) type = (Kind.Checker.pure _ (Unit.new))
Kind.Checker.check term type = (Kind.Checker.bind _ _ (Kind.Checker.get_right_hand_side) (rhs => (Kind.Checker.compare rhs term type)))

Kind.Checker.compare (rhs: (Bool)) (term: (Kind.Term)) (type: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.compare rhs term type = (Kind.Term.get_origin _ term (orig => (term => (Kind.Checker.bind _ _ (Kind.Checker.infer term) (term_typ => (let fun = ((Bool.if _ rhs ((term_typ => ((type => (Kind.Checker.new_equation orig type term_typ)) :: (type: (Kind.Term)) _)) :: (term_typ: (Kind.Term)) _) ((term_typ => ((type => (Kind.Checker.bind _ _ (Kind.Checker.equal (Kind.Term.eval term_typ) (Kind.Term.eval type)) (is_equal => (Bool.if _ is_equal (Kind.Checker.pure _ (Unit.new)) (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.impossible_case ctx orig type term_typ)))))))) :: (type: (Kind.Term)) _)) :: (term_typ: (Kind.Term)) _)) :: (_: (Kind.Term)) (_: (Kind.Term)) (Kind.Checker (Unit))); (fun term_typ type)))))))

Kind.Checker.get_right_hand_side : (Kind.Checker (Bool))
Kind.Checker.get_right_hand_side = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst eqts errs rhs)))))))

Kind.Result.checked <a: Type> (ctx: (Kind.Context)) (depth: U60) (rhs: (Bool)) (sub: (Kind.Subst)) (equations: (List (Kind.Equation))) (errors: (List (Kind.Error))) (ret: a) : (Kind.Result a)

Kind.Subst : Type

Kind.Context : Type

Kind.Equation : Type

Bool : Type

Kind.Error : Type

Kind.Checker (a: Type) : Type
Kind.Checker a = (_: (Kind.Context)) (_: U60) (_: (Bool)) (_: (Kind.Subst)) (_: (List (Kind.Equation))) (_: (List (Kind.Error))) (Kind.Result a)

Kind.Checker.get_context : (Kind.Checker (Kind.Context))
Kind.Checker.get_context = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst eqts errs context)))))))

Kind.Checker.error <t: Type> (err: (Kind.Error)) (ret: t) : (Kind.Checker t)
Kind.Checker.error t err ret = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst eqts (List.cons _ err errs) ret)))))))

Unit : Type

Kind.Checker.get_subst : (Kind.Checker (Kind.Subst))
Kind.Checker.get_subst = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst eqts errs subst)))))))

Kind.Term.eval (term: (Kind.Term)) : (Kind.Term)
Kind.Term.eval (Kind.Term.typ orig) = (Kind.Term.typ orig)
Kind.Term.eval (Kind.Term.var orig name index) = (Kind.Term.var orig name index)
Kind.Term.eval (Kind.Term.hol orig numb) = (Kind.Term.hol orig numb)
Kind.Term.eval (Kind.Term.all orig name typ body) = (Kind.Term.all orig name (Kind.Term.eval typ) (x => (Kind.Term.eval (body x))))
Kind.Term.eval (Kind.Term.lam orig name body) = (Kind.Term.lam orig name (x => (Kind.Term.eval (body x))))
Kind.Term.eval (Kind.Term.let orig name expr body) = (Kind.Term.eval_let orig name (Kind.Term.eval expr) (x => (Kind.Term.eval (body x))))
Kind.Term.eval (Kind.Term.ann orig expr typ) = (Kind.Term.eval_ann orig (Kind.Term.eval expr) (Kind.Term.eval typ))
Kind.Term.eval (Kind.Term.sub orig name indx redx expr) = (Kind.Term.eval_sub orig name indx redx (Kind.Term.eval expr))
Kind.Term.eval (Kind.Term.app orig expr typ) = (Kind.Term.eval_app orig (Kind.Term.eval expr) (Kind.Term.eval typ))
Kind.Term.eval (Kind.Term.hlp orig) = (Kind.Term.hlp orig)
Kind.Term.eval (Kind.Term.u60 orig) = (Kind.Term.u60 orig)
Kind.Term.eval (Kind.Term.num orig num) = (Kind.Term.num orig num)
Kind.Term.eval (Kind.Term.op2 orig op left right) = (Kind.Term.eval_op orig op (Kind.Term.eval left) (Kind.Term.eval right))
Kind.Term.eval (Kind.Term.ct0 ctid orig) = (Kind.Term.ct0 ctid orig)
Kind.Term.eval (Kind.Term.ct1 ctid orig x0) = (Kind.Term.ct1 ctid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.ct2 ctid orig x0 x1) = (Kind.Term.ct2 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1))
Kind.Term.eval (Kind.Term.ct3 ctid orig x0 x1 x2) = (Kind.Term.ct3 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2))
Kind.Term.eval (Kind.Term.ct4 ctid orig x0 x1 x2 x3) = (Kind.Term.ct4 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3))
Kind.Term.eval (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) = (Kind.Term.ct5 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4))
Kind.Term.eval (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) = (Kind.Term.ct6 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5))
Kind.Term.eval (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.ct7 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6))
Kind.Term.eval (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.ct8 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7))
Kind.Term.eval (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.ct9 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8))
Kind.Term.eval (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.ct10 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9))
Kind.Term.eval (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.ct11 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10))
Kind.Term.eval (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.ct12 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11))
Kind.Term.eval (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.ct13 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12))
Kind.Term.eval (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.ct14 ctid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12) (Kind.Term.eval x13))
Kind.Term.eval (Kind.Term.ct15 fnid orig x0) = (Kind.Term.ct15 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.ct16 fnid orig x0) = (Kind.Term.ct16 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.fn0 fnid orig) = (Kind.Term.FN0 fnid orig)
Kind.Term.eval (Kind.Term.fn1 fnid orig x0) = (Kind.Term.FN1 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.fn2 fnid orig x0 x1) = (Kind.Term.FN2 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1))
Kind.Term.eval (Kind.Term.fn3 fnid orig x0 x1 x2) = (Kind.Term.FN3 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2))
Kind.Term.eval (Kind.Term.fn4 fnid orig x0 x1 x2 x3) = (Kind.Term.FN4 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3))
Kind.Term.eval (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) = (Kind.Term.FN5 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4))
Kind.Term.eval (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) = (Kind.Term.FN6 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5))
Kind.Term.eval (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Term.FN7 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6))
Kind.Term.eval (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Term.FN8 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7))
Kind.Term.eval (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Term.FN9 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8))
Kind.Term.eval (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Term.FN10 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9))
Kind.Term.eval (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Term.FN11 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10))
Kind.Term.eval (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Term.FN12 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11))
Kind.Term.eval (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Term.FN13 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12))
Kind.Term.eval (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Term.FN14 fnid orig (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12) (Kind.Term.eval x13))
Kind.Term.eval (Kind.Term.fn15 fnid orig x0) = (Kind.Term.FN15 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.fn16 fnid orig x0) = (Kind.Term.FN16 fnid orig (Kind.Term.eval x0))
Kind.Term.eval (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) = (Kind.Term.args15 (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12) (Kind.Term.eval x13) (Kind.Term.eval x14))
Kind.Term.eval (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) = (Kind.Term.args16 (Kind.Term.eval x0) (Kind.Term.eval x1) (Kind.Term.eval x2) (Kind.Term.eval x3) (Kind.Term.eval x4) (Kind.Term.eval x5) (Kind.Term.eval x6) (Kind.Term.eval x7) (Kind.Term.eval x8) (Kind.Term.eval x9) (Kind.Term.eval x10) (Kind.Term.eval x11) (Kind.Term.eval x12) (Kind.Term.eval x13) (Kind.Term.eval x14) (Kind.Term.eval x15))

Kind.Term.eval_sub (orig: U60) (name: U60) (indx: U60) (redx: U60) (expr: (Kind.Term)) : (Kind.Term)
Kind.Term.eval_sub orig name indx redx expr = expr

Kind.Term.eval_ann (orig: U60) (expr: (Kind.Term)) (type: (Kind.Term)) : (Kind.Term)
Kind.Term.eval_ann orig expr type = expr

Kind.Term.eval_app (orig: U60) (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Term)
Kind.Term.eval_app orig (Kind.Term.lam orig1 name body) arg = (body arg)
Kind.Term.eval_app orig func arg = (Kind.Term.app orig func arg)

Kind.Term.eval_let (orig: U60) (name: U60) (expr: (Kind.Term)) (body: (_: (Kind.Term)) (Kind.Term)) : (Kind.Term)
Kind.Term.eval_let orig name expr body = (body expr)

Kind.Term.eval_op (orig: U60) (op: (Kind.Operator)) (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Term)
Kind.Term.eval_op orig (Kind.Operator.add) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (+ a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.sub) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (- a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.mul) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (* a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.div) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (/ a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.mod) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (% a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.and) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (& a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.or) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (| a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.xor) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (^ a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.shl) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (<< a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.shr) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (>> a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.ltn) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (< a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.lte) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (<= a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.eql) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (== a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.gte) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (>= a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.gtn) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (> a.num b.num))
Kind.Term.eval_op orig (Kind.Operator.neq) (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Term.num 0 (!= a.num b.num))
Kind.Term.eval_op orig op left right = (Kind.Term.op2 orig op left right)

Kind.Checker.fail <t: Type> (err: (Kind.Error)) : (Kind.Checker t)
Kind.Checker.fail t err = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.errored _ context subst (List.cons _ err errs))))))))

Kind.Result.errored <a: Type> (ctx: (Kind.Context)) (sub: (Kind.Subst)) (errors: (List (Kind.Error))) : (Kind.Result a)

Kind.Error.impossible_case (ctx: (Kind.Context)) (orig: U60) (typ: (Kind.Term)) (term: (Kind.Term)) : (Kind.Error)

Bool.if <a: Type> (b: (Bool)) (t: a) (f: a) : a
Bool.if a (Bool.true) t f = t
Bool.if a (Bool.false) t f = f

Bool.false : (Bool)

Bool.true : (Bool)

Kind.Error.cant_infer_lambda (ctx: (Kind.Context)) (orig: U60) : (Kind.Error)

Kind.Term.if_all <res: Type> (term: (Kind.Term)) (if: (_: U60) (_: U60) (_: (Kind.Term)) (_: (_: (Kind.Term)) (Kind.Term)) res) (else: res) : res
Kind.Term.if_all res (Kind.Term.all orig name typ body) func_if else = (func_if orig name typ body)
Kind.Term.if_all res other func_if else = else

Unit.new : (Unit)

Kind.Checker.extended <a: Type> (checker: (Kind.Checker a)) (name: U60) (type: (Kind.Term)) (vals: (List (Kind.Term))) : (Kind.Checker a)
Kind.Checker.extended a checker name type vals = (Kind.Checker.bind _ _ (Kind.Checker.extend name type vals) (_ => (Kind.Checker.bind _ _ checker (got => (Kind.Checker.bind _ _ (Kind.Checker.shrink) (_ => (Kind.Checker.pure _ got)))))))

Kind.Checker.extend (name: U60) (type: (Kind.Term)) (vals: (List (Kind.Term))) : (Kind.Checker (Unit))
Kind.Checker.extend name type vals = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ (Kind.Context.extend context name type vals) (+ depth 1) rhs subst eqts errs (Unit.new))))))))

Kind.Context.extend (prev: (Kind.Context)) (name: U60) (term: (Kind.Term)) (ls: (List (Kind.Term))) : (Kind.Context)
Kind.Context.extend (Kind.Context.empty) name type values = (Kind.Context.entry name type values (Kind.Context.empty))
Kind.Context.extend (Kind.Context.entry n t v rest) name type values = (Kind.Context.entry n t v (Kind.Context.extend rest name type values))

Kind.Context.empty : (Kind.Context)

Kind.Context.entry (name: U60) (type: (Kind.Term)) (vals: (List (Kind.Term))) (rest: (Kind.Context)) : (Kind.Context)

Kind.Checker.shrink : (Kind.Checker (Unit))
Kind.Checker.shrink = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ (Kind.Context.shrink context) (- depth 1) rhs subst eqts errs (Unit.new))))))))

Kind.Context.shrink (ctx: (Kind.Context)) : (Kind.Context)
Kind.Context.shrink (Kind.Context.empty) = (Kind.Context.empty)
Kind.Context.shrink (Kind.Context.entry name type vals (Kind.Context.empty)) = (Kind.Context.empty)
Kind.Context.shrink (Kind.Context.entry name type vals rest) = (Kind.Context.entry name type vals (Kind.Context.shrink rest))

Kind.Checker.pure <t: Type> (a: t) : (Kind.Checker t)
Kind.Checker.pure t res = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst eqts errs res)))))))

Kind.Checker.bind.result <a: Type> <b: Type> (result: (Kind.Result a)) (then: (_: a) (Kind.Checker b)) : (Kind.Result b)
Kind.Checker.bind.result a b (Kind.Result.checked a1 context depth rhs sub equations errs ret) then = (then ret context depth rhs sub equations errs)
Kind.Checker.bind.result a b (Kind.Result.errored a1 context sub errs) then = (Kind.Result.errored _ context sub errs)

Kind.Checker.bind <a: Type> <b: Type> (checker: (Kind.Checker a)) (then: (_: a) (Kind.Checker b)) : (Kind.Checker b)
Kind.Checker.bind a b checker then = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Checker.bind.result _ _ (checker context depth rhs subst eqts errs) then)))))))

TypeOf (u: U60) : (Kind.Term)

Kind.Checker.infer_args (args: (Kind.Term)) : (_: (Kind.Term)) (_: U60) (Kind.Term)
Kind.Checker.infer_args (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) = (term => (orig => (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig term x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12) x13) x14)))
Kind.Checker.infer_args (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) = (term => (orig => (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig term x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12) x13) x14) x15)))

Kind.Checker.infer (term: (Kind.Term)) : (Kind.Checker (Kind.Term))
Kind.Checker.infer (Kind.Term.var orig name index) = (Kind.Checker.bind _ _ (Kind.Checker.find _ index (Maybe.none _) (n => (t => (v => (Maybe.some _ t))))) (got_type => (Maybe.match _ got_type (got_type => _) (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.unbound_variable ctx orig)))) (got_type.value => (Kind.Checker.pure _ got_type.value)))))
Kind.Checker.infer (Kind.Term.hol orig numb) = (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.cant_infer_hole ctx orig))))
Kind.Checker.infer (Kind.Term.typ orig) = (Kind.Checker.pure _ (Kind.Term.typ orig))
Kind.Checker.infer (Kind.Term.all orig name type body) = (Kind.Checker.bind _ _ (Kind.Checker.get_depth) (depth => (Kind.Checker.bind _ _ (Kind.Checker.check type (Kind.Term.typ orig)) (_ => (Kind.Checker.bind _ _ (Kind.Checker.extended _ (Kind.Checker.check (body (Kind.Term.var orig name depth)) (Kind.Term.typ orig)) name (Kind.Term.eval type) (List.nil _)) (_ => (Kind.Checker.pure _ (Kind.Term.typ orig))))))))
Kind.Checker.infer (Kind.Term.lam orig name body) = (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.cant_infer_lambda ctx orig))))
Kind.Checker.infer (Kind.Term.app orig func argm) = (Kind.Checker.bind _ _ (Kind.Checker.infer func) (fn_infer => (Kind.Checker.bind _ _ (Kind.Checker.infer.forall _ fn_infer (fn_orig => (fn_name => (fn_type => (fn_body => (Kind.Checker.bind _ _ (Kind.Checker.check argm fn_type) (_ => (Kind.Checker.pure _ (fn_body (Kind.Term.eval argm))))))))) (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.invalid_call ctx orig))))) (ap_infer => (Kind.Checker.pure _ ap_infer)))))
Kind.Checker.infer (Kind.Term.let orig name expr body) = (Kind.Checker.bind _ _ (Kind.Checker.get_depth) (dep => (Kind.Checker.bind _ _ (Kind.Checker.infer expr) (expr_typ => (Kind.Checker.bind _ _ (Kind.Checker.extended _ (Kind.Checker.infer (body (Kind.Term.var orig name dep))) name expr_typ (List.cons _ (Kind.Term.eval expr) (List.nil _))) (body_typ => (Kind.Checker.pure _ body_typ)))))))
Kind.Checker.infer (Kind.Term.ann orig expr type) = (let type = (Kind.Term.eval type); (Kind.Checker.bind _ _ (Kind.Checker.check expr type) (_ => (Kind.Checker.pure _ type))))
Kind.Checker.infer (Kind.Term.sub orig name indx redx expr) = (Kind.Checker.bind _ _ (Kind.Checker.get_depth) (dep => (Kind.Checker.bind _ _ (Kind.Checker.find _ indx (Maybe.none _) (n => (t => (v => (Maybe.some _ (Pair.new _ _ t v)))))) (got => (Maybe.match _ got (got => _) (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.unbound_variable ctx orig)))) (got.value => (Pair.match _ _ got.value (got.value => _) (got.value.fst => (got.value.snd => (Maybe.match _ (List.at.u60 _ got.value.snd redx) (reduction => _) (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.unbound_variable ctx orig)))) (reduction.value => (Kind.Checker.bind _ _ (Kind.Checker.infer expr) (expr_typ => (Kind.Checker.pure _ (Kind.Term.eval (Kind.Term.replace expr_typ indx reduction.value))))))))))))))))
Kind.Checker.infer (Kind.Term.ct0 ctid orig) = (Kind.Checker.pure _ (Kind.Term.eval (TypeOf ctid)))
Kind.Checker.infer (Kind.Term.ct1 ctid orig x0) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0))
Kind.Checker.infer (Kind.Term.ct2 ctid orig x0 x1) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1))
Kind.Checker.infer (Kind.Term.ct3 ctid orig x0 x1 x2) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2))
Kind.Checker.infer (Kind.Term.ct4 ctid orig x0 x1 x2 x3) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3))
Kind.Checker.infer (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4))
Kind.Checker.infer (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5))
Kind.Checker.infer (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6))
Kind.Checker.infer (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7))
Kind.Checker.infer (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8))
Kind.Checker.infer (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9))
Kind.Checker.infer (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10))
Kind.Checker.infer (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11))
Kind.Checker.infer (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12))
Kind.Checker.infer (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12) x13))
Kind.Checker.infer (Kind.Term.ct15 ctid orig x0) = (let expr = (Kind.Checker.infer_args x0); (Kind.Checker.infer (expr (Kind.Term.ct0 ctid orig) orig)))
Kind.Checker.infer (Kind.Term.ct16 ctid orig x0) = (let expr = (Kind.Checker.infer_args x0); (Kind.Checker.infer (expr (Kind.Term.ct0 ctid orig) orig)))
Kind.Checker.infer (Kind.Term.fn0 fnid orig) = (Kind.Checker.pure _ (Kind.Term.eval (TypeOf fnid)))
Kind.Checker.infer (Kind.Term.fn1 fnid orig x0) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0))
Kind.Checker.infer (Kind.Term.fn2 fnid orig x0 x1) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1))
Kind.Checker.infer (Kind.Term.fn3 fnid orig x0 x1 x2) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2))
Kind.Checker.infer (Kind.Term.fn4 fnid orig x0 x1 x2 x3) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3))
Kind.Checker.infer (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4))
Kind.Checker.infer (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5))
Kind.Checker.infer (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6))
Kind.Checker.infer (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7))
Kind.Checker.infer (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8))
Kind.Checker.infer (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9))
Kind.Checker.infer (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10))
Kind.Checker.infer (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11))
Kind.Checker.infer (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12))
Kind.Checker.infer (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) = (Kind.Checker.infer (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.app orig (Kind.Term.fn0 fnid orig) x0) x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12) x13))
Kind.Checker.infer (Kind.Term.fn15 fnid orig x0) = (let expr = (Kind.Checker.infer_args x0); (Kind.Checker.infer (expr (Kind.Term.fn0 fnid orig) orig)))
Kind.Checker.infer (Kind.Term.fn16 fnid orig x0) = (let expr = (Kind.Checker.infer_args x0); (Kind.Checker.infer (expr (Kind.Term.fn0 fnid orig) orig)))
Kind.Checker.infer (Kind.Term.hlp orig) = (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.inspection ctx orig (Kind.Term.hlp 0)))))
Kind.Checker.infer (Kind.Term.u60 orig) = (Kind.Checker.pure _ (Kind.Term.typ 0))
Kind.Checker.infer (Kind.Term.num orig numb) = (Kind.Checker.pure _ (Kind.Term.u60 0))
Kind.Checker.infer (Kind.Term.op2 orig oper left right) = (Kind.Checker.bind _ _ (Kind.Checker.check left (Kind.Term.u60 0)) (_ => (Kind.Checker.bind _ _ (Kind.Checker.check right (Kind.Term.u60 0)) (_ => (Kind.Checker.pure _ (Kind.Term.u60 0))))))

Kind.Checker.infer.forall <r: Type> (term: (Kind.Term)) (then_fn: (_: U60) (_: U60) (_: (Kind.Term)) (_: (_: (Kind.Term)) (Kind.Term)) (Kind.Checker r)) (else_val: (Kind.Checker r)) : (Kind.Checker r)
Kind.Checker.infer.forall r (Kind.Term.all orig name type body) then_fn else_val = (then_fn orig name type body)
Kind.Checker.infer.forall r (Kind.Term.var orig name index) then_fn else_val = (Kind.Checker.bind _ _ (Kind.Checker.find _ index (List.nil _) (n => (t => (v => v)))) (reducs => (Kind.Checker.bind _ _ (Kind.Checker.infer.forall.try_values r reducs then_fn else_val) (result => (Kind.Checker.pure _ result)))))
Kind.Checker.infer.forall r other then_fn else_val = else_val

Kind.Checker.infer.forall.try_values <r: Type> (terms: (List (Kind.Term))) (then_fn: (_: U60) (_: U60) (_: (Kind.Term)) (_: (_: (Kind.Term)) (Kind.Term)) (Kind.Checker r)) (else_val: (Kind.Checker r)) : (Kind.Checker r)
Kind.Checker.infer.forall.try_values r (List.cons t0_ (Kind.Term.all orig name type body) terms) then_fn else_val = (then_fn orig name type body)
Kind.Checker.infer.forall.try_values r (List.cons t1_ other terms) then_fn else_val = (Kind.Checker.infer.forall.try_values r terms then_fn else_val)
Kind.Checker.infer.forall.try_values r (List.nil t2_) then_fn else_val = else_val

Kind.Checker.get_depth : (Kind.Checker U60)
Kind.Checker.get_depth = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst eqts errs depth)))))))

Kind.Checker.find <r: Type> (index: U60) (alt: r) (fun: (_: U60) (_: (Kind.Term)) (_: (List (Kind.Term))) r) : (Kind.Checker r)
Kind.Checker.find r index alt fun = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst eqts errs (Kind.Context.find _ context index alt fun))))))))

Kind.Context.find <res: Type> (ctx: (Kind.Context)) (name: U60) (alt: res) (fun: (_: U60) (_: (Kind.Term)) (_: (List (Kind.Term))) res) : res
Kind.Context.find res (Kind.Context.entry name type vals rest) 0 alt fun = (fun name type vals)
Kind.Context.find res (Kind.Context.entry name type vals rest) n alt fun = (Kind.Context.find _ rest (- n 1) alt fun)
Kind.Context.find res (Kind.Context.empty) n alt fun = alt

Pair.match <a: Type> <b: Type> (x: (Pair a b)) -(p: (x: (Pair a b)) Type) (new: (fst: a) (snd: b) (p (Pair.new a b fst snd))) : (p x)
Pair.match a b (Pair.new a_ b_ fst_ snd_) p new = (new fst_ snd_)

List.at.u60 <a: Type> (xs: (List a)) (idx: U60) : (Maybe a)
List.at.u60 a1_ (List.nil t0_) idx = (Maybe.none _)
List.at.u60 a3_ (List.cons t2_ head tail) 0 = (Maybe.some _ head)
List.at.u60 a5_ (List.cons t4_ head tail) idx = (List.at.u60 _ tail (- idx 1))

Kind.Error.inspection (ctx: (Kind.Context)) (orig: U60) (term: (Kind.Term)) : (Kind.Error)

Kind.Error.unbound_variable (ctx: (Kind.Context)) (orig: U60) : (Kind.Error)

Kind.Error.invalid_call (ctx: (Kind.Context)) (orig: U60) : (Kind.Error)

Kind.Term.replace (term: (Kind.Term)) (index: U60) (value: (Kind.Term)) : (Kind.Term)
Kind.Term.replace (Kind.Term.typ orig) idx val = (Kind.Term.typ orig)
Kind.Term.replace (Kind.Term.var orig name index) idx val = (Bool.if _ (U60.equal idx index) val (Kind.Term.var orig name index))
Kind.Term.replace (Kind.Term.all orig name typ body) idx val = (Kind.Term.all orig name (Kind.Term.replace typ idx val) (x => (Kind.Term.replace (body x) idx val)))
Kind.Term.replace (Kind.Term.lam orig name body) idx val = (Kind.Term.lam orig name (x => (Kind.Term.replace (body x) idx val)))
Kind.Term.replace (Kind.Term.let orig name expr body) idx val = (Kind.Term.let orig name (Kind.Term.replace expr idx val) (x => (Kind.Term.replace (body x) idx val)))
Kind.Term.replace (Kind.Term.ann orig expr typ) idx val = (Kind.Term.ann orig (Kind.Term.replace expr idx val) (Kind.Term.replace typ idx val))
Kind.Term.replace (Kind.Term.sub orig name indx redx expr) idx val = (Kind.Term.sub orig name indx redx (Kind.Term.replace expr idx val))
Kind.Term.replace (Kind.Term.app orig expr typ) idx val = (Kind.Term.app orig (Kind.Term.replace expr idx val) (Kind.Term.replace typ idx val))
Kind.Term.replace (Kind.Term.hlp orig) idx val = (Kind.Term.hlp orig)
Kind.Term.replace (Kind.Term.u60 orig) idx val = (Kind.Term.u60 orig)
Kind.Term.replace (Kind.Term.num orig num) idx val = (Kind.Term.num orig num)
Kind.Term.replace (Kind.Term.op2 orig op left right) idx val = (Kind.Term.op2 orig op (Kind.Term.replace left idx val) (Kind.Term.replace right idx val))
Kind.Term.replace (Kind.Term.ct0 ctid orig) idx val = (Kind.Term.ct0 ctid orig)
Kind.Term.replace (Kind.Term.ct1 ctid orig x0) idx val = (Kind.Term.ct1 ctid orig (Kind.Term.replace x0 idx val))
Kind.Term.replace (Kind.Term.ct2 ctid orig x0 x1) idx val = (Kind.Term.ct2 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val))
Kind.Term.replace (Kind.Term.ct3 ctid orig x0 x1 x2) idx val = (Kind.Term.ct3 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val))
Kind.Term.replace (Kind.Term.ct4 ctid orig x0 x1 x2 x3) idx val = (Kind.Term.ct4 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val))
Kind.Term.replace (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) idx val = (Kind.Term.ct5 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val))
Kind.Term.replace (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) idx val = (Kind.Term.ct6 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val))
Kind.Term.replace (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) idx val = (Kind.Term.ct7 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val))
Kind.Term.replace (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) idx val = (Kind.Term.ct8 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val))
Kind.Term.replace (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) idx val = (Kind.Term.ct9 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val))
Kind.Term.replace (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) idx val = (Kind.Term.ct10 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val))
Kind.Term.replace (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) idx val = (Kind.Term.ct11 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val))
Kind.Term.replace (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) idx val = (Kind.Term.ct12 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val))
Kind.Term.replace (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) idx val = (Kind.Term.ct13 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val))
Kind.Term.replace (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) idx val = (Kind.Term.ct14 ctid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val) (Kind.Term.replace x13 idx val))
Kind.Term.replace (Kind.Term.fn0 fnid orig) idx val = (Kind.Term.FN0 fnid orig)
Kind.Term.replace (Kind.Term.fn1 fnid orig x0) idx val = (Kind.Term.FN1 fnid orig (Kind.Term.replace x0 idx val))
Kind.Term.replace (Kind.Term.fn2 fnid orig x0 x1) idx val = (Kind.Term.FN2 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val))
Kind.Term.replace (Kind.Term.fn3 fnid orig x0 x1 x2) idx val = (Kind.Term.FN3 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val))
Kind.Term.replace (Kind.Term.fn4 fnid orig x0 x1 x2 x3) idx val = (Kind.Term.FN4 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val))
Kind.Term.replace (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) idx val = (Kind.Term.FN5 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val))
Kind.Term.replace (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) idx val = (Kind.Term.FN6 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val))
Kind.Term.replace (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) idx val = (Kind.Term.FN7 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val))
Kind.Term.replace (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) idx val = (Kind.Term.FN8 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val))
Kind.Term.replace (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) idx val = (Kind.Term.FN9 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val))
Kind.Term.replace (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) idx val = (Kind.Term.FN10 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val))
Kind.Term.replace (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) idx val = (Kind.Term.FN11 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val))
Kind.Term.replace (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) idx val = (Kind.Term.FN12 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val))
Kind.Term.replace (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) idx val = (Kind.Term.FN13 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val))
Kind.Term.replace (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) idx val = (Kind.Term.FN14 fnid orig (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val) (Kind.Term.replace x13 idx val))
Kind.Term.replace (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) idx val = (Kind.Term.args15 (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val) (Kind.Term.replace x13 idx val) (Kind.Term.replace x14 idx val))
Kind.Term.replace (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) idx val = (Kind.Term.args16 (Kind.Term.replace x0 idx val) (Kind.Term.replace x1 idx val) (Kind.Term.replace x2 idx val) (Kind.Term.replace x3 idx val) (Kind.Term.replace x4 idx val) (Kind.Term.replace x5 idx val) (Kind.Term.replace x6 idx val) (Kind.Term.replace x7 idx val) (Kind.Term.replace x8 idx val) (Kind.Term.replace x9 idx val) (Kind.Term.replace x10 idx val) (Kind.Term.replace x11 idx val) (Kind.Term.replace x12 idx val) (Kind.Term.replace x13 idx val) (Kind.Term.replace x14 idx val) (Kind.Term.replace x15 idx val))
Kind.Term.replace (Kind.Term.hol orig numb) idx val = (Kind.Term.hol orig numb)

U60.equal (a: U60) (b: U60) : (Bool)
U60.equal a b = (U60.to_bool (== a b))

U60.to_bool (n: U60) : (Bool)
U60.to_bool 0 = (Bool.false)
U60.to_bool n = (Bool.true)

Kind.Error.cant_infer_hole (ctx: (Kind.Context)) (orig: U60) : (Kind.Error)

Kind.Term.get_origin <r: Type> (term: (Kind.Term)) (got: (_: U60) (_: (Kind.Term)) r) : r
Kind.Term.get_origin r (Kind.Term.typ orig) got = (got orig (Kind.Term.typ orig))
Kind.Term.get_origin r (Kind.Term.var orig name index) got = (got orig (Kind.Term.var orig name index))
Kind.Term.get_origin r (Kind.Term.hol orig numb) got = (got orig (Kind.Term.hol orig numb))
Kind.Term.get_origin r (Kind.Term.all orig name typ body) got = (got orig (Kind.Term.all orig name typ body))
Kind.Term.get_origin r (Kind.Term.lam orig name body) got = (got orig (Kind.Term.lam orig name body))
Kind.Term.get_origin r (Kind.Term.let orig name expr body) got = (got orig (Kind.Term.let orig name expr body))
Kind.Term.get_origin r (Kind.Term.ann orig expr typ) got = (got orig (Kind.Term.ann orig expr typ))
Kind.Term.get_origin r (Kind.Term.sub orig name indx redx expr) got = (got orig (Kind.Term.sub orig name indx redx expr))
Kind.Term.get_origin r (Kind.Term.app orig func arg) got = (got orig (Kind.Term.app orig func arg))
Kind.Term.get_origin r (Kind.Term.hlp orig) got = (got orig (Kind.Term.hlp orig))
Kind.Term.get_origin r (Kind.Term.u60 orig) got = (got orig (Kind.Term.u60 orig))
Kind.Term.get_origin r (Kind.Term.num orig num) got = (got orig (Kind.Term.num orig num))
Kind.Term.get_origin r (Kind.Term.op2 orig op left right) got = (got orig (Kind.Term.op2 orig op left right))
Kind.Term.get_origin r (Kind.Term.ct0 ctid orig) got = (got orig (Kind.Term.ct0 ctid orig))
Kind.Term.get_origin r (Kind.Term.ct1 ctid orig x0) got = (got orig (Kind.Term.ct1 ctid orig x0))
Kind.Term.get_origin r (Kind.Term.ct2 ctid orig x0 x1) got = (got orig (Kind.Term.ct2 ctid orig x0 x1))
Kind.Term.get_origin r (Kind.Term.ct3 ctid orig x0 x1 x2) got = (got orig (Kind.Term.ct3 ctid orig x0 x1 x2))
Kind.Term.get_origin r (Kind.Term.ct4 ctid orig x0 x1 x2 x3) got = (got orig (Kind.Term.ct4 ctid orig x0 x1 x2 x3))
Kind.Term.get_origin r (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) got = (got orig (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4))
Kind.Term.get_origin r (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) got = (got orig (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5))
Kind.Term.get_origin r (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) got = (got orig (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6))
Kind.Term.get_origin r (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) got = (got orig (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7))
Kind.Term.get_origin r (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) got = (got orig (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8))
Kind.Term.get_origin r (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) got = (got orig (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9))
Kind.Term.get_origin r (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) got = (got orig (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10))
Kind.Term.get_origin r (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) got = (got orig (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11))
Kind.Term.get_origin r (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) got = (got orig (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))
Kind.Term.get_origin r (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) got = (got orig (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13))
Kind.Term.get_origin r (Kind.Term.ct15 fnid orig args) got = (got orig (Kind.Term.ct15 fnid orig args))
Kind.Term.get_origin r (Kind.Term.ct16 fnid orig args) got = (got orig (Kind.Term.ct16 fnid orig args))
Kind.Term.get_origin r (Kind.Term.fn0 fnid orig) got = (got orig (Kind.Term.fn0 fnid orig))
Kind.Term.get_origin r (Kind.Term.fn1 fnid orig x0) got = (got orig (Kind.Term.fn1 fnid orig x0))
Kind.Term.get_origin r (Kind.Term.fn2 fnid orig x0 x1) got = (got orig (Kind.Term.fn2 fnid orig x0 x1))
Kind.Term.get_origin r (Kind.Term.fn3 fnid orig x0 x1 x2) got = (got orig (Kind.Term.fn3 fnid orig x0 x1 x2))
Kind.Term.get_origin r (Kind.Term.fn4 fnid orig x0 x1 x2 x3) got = (got orig (Kind.Term.fn4 fnid orig x0 x1 x2 x3))
Kind.Term.get_origin r (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) got = (got orig (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4))
Kind.Term.get_origin r (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) got = (got orig (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5))
Kind.Term.get_origin r (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) got = (got orig (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6))
Kind.Term.get_origin r (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) got = (got orig (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7))
Kind.Term.get_origin r (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) got = (got orig (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8))
Kind.Term.get_origin r (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) got = (got orig (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9))
Kind.Term.get_origin r (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) got = (got orig (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10))
Kind.Term.get_origin r (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) got = (got orig (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11))
Kind.Term.get_origin r (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) got = (got orig (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))
Kind.Term.get_origin r (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) got = (got orig (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13))
Kind.Term.get_origin r (Kind.Term.fn15 fnid orig args) got = (got orig (Kind.Term.fn15 fnid orig args))
Kind.Term.get_origin r (Kind.Term.fn16 fnid orig args) got = (got orig (Kind.Term.fn16 fnid orig args))

Kind.Checker.new_equation (orig: U60) (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.new_equation orig left right = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst (List.append _ eqts (Kind.Equation.new context orig left right)) errs (Unit.new))))))))

Kind.Equation.new (ctx: (Kind.Context)) (orig: U60) (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Equation)

List.append <a: Type> (xs: (List a)) (x: a) : (List a)
List.append a (List.nil xs.a) x = (List.pure _ x)
List.append a (List.cons xs.a xs.h xs.t) x = (List.cons _ xs.h (List.append _ xs.t x))

Null <a: Type> : a

HashOf (u: U60) : U60

Kind.Checker.equal (left: (Kind.Term)) (right: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal (Kind.Term.typ orig) (Kind.Term.typ orig1) = (Kind.Checker.pure _ (Bool.true))
Kind.Checker.equal (Kind.Term.all a.orig a.name a.type a.body) (Kind.Term.all b.orig b.name b.type b.body) = (Kind.Checker.bind _ _ (Kind.Checker.get_depth) (dep => (Kind.Checker.bind _ _ (Kind.Checker.equal a.type b.type) (type => (Kind.Checker.bind _ _ (Kind.Checker.extended _ (Kind.Checker.equal (a.body (Kind.Term.var a.orig a.name dep)) (b.body (Kind.Term.var b.orig b.name dep))) (Null _) (Null _) (List.nil _)) (body => (Kind.Checker.pure _ (Bool.and type body))))))))
Kind.Checker.equal (Kind.Term.lam a.orig a.name a.body) (Kind.Term.lam b.orig b.name b.body) = (Kind.Checker.bind _ _ (Kind.Checker.get_depth) (dep => (Kind.Checker.bind _ _ (Kind.Checker.extended _ (Kind.Checker.equal (a.body (Kind.Term.var a.orig a.name dep)) (b.body (Kind.Term.var b.orig b.name dep))) (Null _) (Null _) (List.nil _)) (body => (Kind.Checker.pure _ body)))))
Kind.Checker.equal (Kind.Term.app a.orig a.func a.argm) (Kind.Term.app b.orig b.func b.argm) = (Kind.Checker.bind _ _ (Kind.Checker.equal a.func b.func) (func => (Kind.Checker.bind _ _ (Kind.Checker.equal a.argm b.argm) (argm => (Kind.Checker.pure _ (Bool.and func argm))))))
Kind.Checker.equal (Kind.Term.let a.orig a.name a.expr a.body) (Kind.Term.let b.orig b.name b.expr b.body) = (Kind.Checker.bind _ _ (Kind.Checker.get_depth) (dep => (Kind.Checker.bind _ _ (Kind.Checker.equal a.expr b.expr) (expr => (Kind.Checker.bind _ _ (Kind.Checker.extended _ (Kind.Checker.equal (a.body (Kind.Term.var a.orig a.name dep)) (b.body (Kind.Term.var b.orig b.name dep))) (Null _) (Null _) (List.nil _)) (body => (Kind.Checker.pure _ (Bool.and expr body))))))))
Kind.Checker.equal (Kind.Term.ann a.orig a.expr a.type) (Kind.Term.ann b.orig b.expr b.type) = (Kind.Checker.bind _ _ (Kind.Checker.equal a.expr b.expr) (func => (Kind.Checker.bind _ _ (Kind.Checker.equal a.type b.type) (type => (Kind.Checker.pure _ (Bool.and func type))))))
Kind.Checker.equal (Kind.Term.sub a.orig a.name a.indx a.redx a.expr) (Kind.Term.sub b.orig b.name b.indx b.redx b.expr) = (Kind.Checker.bind _ _ (Kind.Checker.equal a.expr b.expr) (func => (Kind.Checker.pure _ func)))
Kind.Checker.equal (Kind.Term.u60 a.orig) (Kind.Term.u60 b.orig) = (Kind.Checker.pure _ (Bool.true))
Kind.Checker.equal (Kind.Term.num a.orig a.num) (Kind.Term.num b.orig b.num) = (Kind.Checker.pure _ (U60.equal a.num b.num))
Kind.Checker.equal (Kind.Term.op2 a.orig a.op a.val0 a.val1) (Kind.Term.op2 b.orig b.op b.val0 b.val1) = (let op = (Kind.Operator.equal a.op b.op); (Kind.Checker.bind _ _ (Kind.Checker.equal a.val0 b.val0) (val0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.val1 b.val1) (val1 => (Kind.Checker.pure _ (Bool.and op (Bool.and val0 val1))))))))
Kind.Checker.equal (Kind.Term.hol a.orig a.numb) (Kind.Term.hol b.orig b.numb) = (Bool.if _ (U60.equal a.numb b.numb) (Kind.Checker.pure _ (Bool.true)) (Kind.Checker.equal.hol a.orig a.numb (Kind.Term.hol b.orig b.numb)))
Kind.Checker.equal (Kind.Term.hol a.orig a.numb) b = (Kind.Checker.equal.hol a.orig a.numb b)
Kind.Checker.equal b (Kind.Term.hol a.orig a.numb) = (Kind.Checker.equal.hol a.orig a.numb b)
Kind.Checker.equal (Kind.Term.var a.orig a.name a.idx) b = (Kind.Checker.bind _ _ (Kind.Checker.get_right_hand_side) (rhs => (Kind.Checker.equal.var rhs a.orig a.name a.idx b)))
Kind.Checker.equal b (Kind.Term.var a.orig a.name a.idx) = (Kind.Checker.bind _ _ (Kind.Checker.get_right_hand_side) (rhs => (Kind.Checker.equal.var rhs a.orig a.name a.idx b)))
Kind.Checker.equal (Kind.Term.ct0 a.ctid a.orig) (Kind.Term.ct0 b.ctid b.orig) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.pure _ ctid))
Kind.Checker.equal (Kind.Term.ct1 a.ctid a.orig a.x0) (Kind.Term.ct1 b.ctid b.orig b.x0) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.pure _ (Bool.and ctid x0)))))
Kind.Checker.equal (Kind.Term.ct2 a.ctid a.orig a.x0 a.x1) (Kind.Term.ct2 b.ctid b.orig b.x0 b.x1) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 x1))))))))
Kind.Checker.equal (Kind.Term.ct3 a.ctid a.orig a.x0 a.x1 a.x2) (Kind.Term.ct3 b.ctid b.orig b.x0 b.x1 b.x2) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 x2)))))))))))
Kind.Checker.equal (Kind.Term.ct4 a.ctid a.orig a.x0 a.x1 a.x2 a.x3) (Kind.Term.ct4 b.ctid b.orig b.x0 b.x1 b.x2 b.x3) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 x3))))))))))))))
Kind.Checker.equal (Kind.Term.ct5 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4) (Kind.Term.ct5 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 x4)))))))))))))))))
Kind.Checker.equal (Kind.Term.ct6 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5) (Kind.Term.ct6 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 x5))))))))))))))))))))
Kind.Checker.equal (Kind.Term.ct7 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6) (Kind.Term.ct7 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 x6)))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.ct8 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7) (Kind.Term.ct8 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 x7))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.ct9 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8) (Kind.Term.ct9 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 x8)))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.ct10 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9) (Kind.Term.ct10 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 x9))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.ct11 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10) (Kind.Term.ct11 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 x10)))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.ct12 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11) (Kind.Term.ct12 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x11 b.x11) (x11 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 x11))))))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.ct13 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12) (Kind.Term.ct13 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x11 b.x11) (x11 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x12 b.x12) (x12 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 x12)))))))))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.ct14 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12 a.x13) (Kind.Term.ct14 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12 b.x13) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x11 b.x11) (x11 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x12 b.x12) (x12 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x13 b.x13) (x13 => (Kind.Checker.pure _ (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 (Bool.and x12 x13))))))))))))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.ct15 a.ctid a.orig a.args) (Kind.Term.ct15 b.ctid b.orig b.args) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.args b.args) (xargs => (Kind.Checker.pure _ (Bool.and ctid xargs)))))
Kind.Checker.equal (Kind.Term.ct16 a.ctid a.orig a.args) (Kind.Term.ct16 b.ctid b.orig b.args) = (let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.args b.args) (xargs => (Kind.Checker.pure _ (Bool.and ctid xargs)))))
Kind.Checker.equal (Kind.Term.args15 a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12 a.x13 a.x14) (Kind.Term.args15 b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12 b.x13 b.x14) = (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x11 b.x11) (x11 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x12 b.x12) (x12 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x13 b.x13) (x13 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x14 b.x14) (x14 => (Kind.Checker.pure _ (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 (Bool.and x12 (Bool.and x13 x14)))))))))))))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.args16 a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12 a.x13 a.x14 a.x15) (Kind.Term.args16 b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12 b.x13 b.x14 b.x15) = (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x11 b.x11) (x11 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x12 b.x12) (x12 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x13 b.x13) (x13 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x14 b.x14) (x14 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x15 b.x15) (x15 => (Kind.Checker.pure _ (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 (Bool.and x12 (Bool.and x13 (Bool.and x14 x15))))))))))))))))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn0 a.fnid a.orig) (Kind.Term.fn0 b.fnid b.orig) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.pure _ fnid))
Kind.Checker.equal (Kind.Term.fn1 a.fnid a.orig a.x0) (Kind.Term.fn1 b.fnid b.orig b.x0) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.pure _ (Bool.and fnid x0)))))
Kind.Checker.equal (Kind.Term.fn2 a.fnid a.orig a.x0 a.x1) (Kind.Term.fn2 b.fnid b.orig b.x0 b.x1) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 x1))))))))
Kind.Checker.equal (Kind.Term.fn3 a.fnid a.orig a.x0 a.x1 a.x2) (Kind.Term.fn3 b.fnid b.orig b.x0 b.x1 b.x2) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 x2)))))))))))
Kind.Checker.equal (Kind.Term.fn4 a.fnid a.orig a.x0 a.x1 a.x2 a.x3) (Kind.Term.fn4 b.fnid b.orig b.x0 b.x1 b.x2 b.x3) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 x3))))))))))))))
Kind.Checker.equal (Kind.Term.fn5 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4) (Kind.Term.fn5 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 x4)))))))))))))))))
Kind.Checker.equal (Kind.Term.fn6 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5) (Kind.Term.fn6 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 x5))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn7 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6) (Kind.Term.fn7 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 x6)))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn8 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7) (Kind.Term.fn8 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 x7))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn9 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8) (Kind.Term.fn9 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 x8)))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn10 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9) (Kind.Term.fn10 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 x9))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn11 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10) (Kind.Term.fn11 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 x10)))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn12 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11) (Kind.Term.fn12 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x11 b.x11) (x11 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 x11))))))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn13 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12) (Kind.Term.fn13 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x11 b.x11) (x11 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x12 b.x12) (x12 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 x12)))))))))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn14 a.fnid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7 a.x8 a.x9 a.x10 a.x11 a.x12 a.x13) (Kind.Term.fn14 b.fnid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7 b.x8 b.x9 b.x10 b.x11 b.x12 b.x13) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.x0 b.x0) (x0 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x1 b.x1) (x1 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x2 b.x2) (x2 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x3 b.x3) (x3 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x4 b.x4) (x4 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x5 b.x5) (x5 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x6 b.x6) (x6 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x7 b.x7) (x7 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x8 b.x8) (x8 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x9 b.x9) (x9 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x10 b.x10) (x10 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x11 b.x11) (x11 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x12 b.x12) (x12 => (Kind.Checker.bind _ _ (Kind.Checker.equal a.x13 b.x13) (x13 => (Kind.Checker.pure _ (Bool.and fnid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 (Bool.and x7 (Bool.and x8 (Bool.and x9 (Bool.and x10 (Bool.and x11 (Bool.and x12 x13))))))))))))))))))))))))))))))))))))))))))))
Kind.Checker.equal (Kind.Term.fn15 a.fnid a.orig a.args) (Kind.Term.fn15 b.fnid b.orig b.args) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.args b.args) (xargs => (Kind.Checker.pure _ (Bool.and fnid xargs)))))
Kind.Checker.equal (Kind.Term.fn16 a.fnid a.orig a.args) (Kind.Term.fn16 b.fnid b.orig b.args) = (let fnid = (U60.equal (HashOf a.fnid) (HashOf b.fnid)); (Kind.Checker.bind _ _ (Kind.Checker.equal a.args b.args) (xargs => (Kind.Checker.pure _ (Bool.and fnid xargs)))))
Kind.Checker.equal a b = (Kind.Checker.bind _ _ (Kind.Checker.get_subst) (sub => (Bool.if _ (Bool.or (Kind.Term.fillable a sub) (Kind.Term.fillable b sub)) (Kind.Checker.equal (Kind.Term.fill a sub) (Kind.Term.fill b sub)) (Kind.Checker.pure _ (Bool.false)))))

Kind.Checker.equal.var (rhs: (Bool)) (orig: U60) (name: U60) (idx: U60) (b: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal.var (Bool.false) orig name idx b = (Kind.Checker.bind _ _ (Kind.Checker.add_value idx b) (_ => (Kind.Checker.pure _ (Bool.true))))
Kind.Checker.equal.var (Bool.true) a.orig a.name a.idx (Kind.Term.var b.orig b.name b.idx) = (Bool.if _ (U60.equal a.idx b.idx) (Kind.Checker.pure _ (Bool.true)) (Kind.Checker.bind _ _ (Kind.Checker.find _ a.idx (List.nil _) (n => (t => (v => v)))) (a.val => (Kind.Checker.bind _ _ (Kind.Checker.find _ b.idx (List.nil _) (n => (t => (v => v)))) (b.val => (Kind.Checker.bind _ _ (Kind.Checker.equal.var.try_values a.val (Kind.Term.var b.orig b.name b.idx)) (a.chk => (Kind.Checker.bind _ _ (Kind.Checker.equal.var.try_values b.val (Kind.Term.var a.orig a.name a.idx)) (b.chk => (Kind.Checker.pure _ (Bool.or a.chk b.chk)))))))))))
Kind.Checker.equal.var (Bool.true) a.orig a.name a.idx b = (Kind.Checker.bind _ _ (Kind.Checker.get_subst) (sub => (Bool.if _ (Kind.Term.fillable b sub) (Kind.Checker.equal (Kind.Term.var a.orig a.name a.idx) (Kind.Term.fill b sub)) (Kind.Checker.bind _ _ (Kind.Checker.find _ a.idx (List.nil _) (n => (t => (v => v)))) (a.val => (Kind.Checker.bind _ _ (Kind.Checker.equal.var.try_values a.val b) (res => (Kind.Checker.pure _ res))))))))

Kind.Checker.equal.var.try_values (ls: (List (Kind.Term))) (term: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal.var.try_values (List.nil t) term = (Kind.Checker.pure _ (Bool.false))
Kind.Checker.equal.var.try_values (List.cons t x xs) term = (Kind.Checker.bind _ _ (Kind.Checker.equal x term) (head => (Bool.if _ head (Kind.Checker.pure _ (Bool.true)) (Kind.Checker.equal.var.try_values xs term))))

Kind.Checker.equal.hol (orig: U60) (numb: U60) (b: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal.hol a.orig a.numb b = (Kind.Checker.bind _ _ (Kind.Checker.look a.numb) (got => (Kind.Checker.bind _ _ (Kind.Checker.equal.hol.val got a.orig a.numb b) (res => (Kind.Checker.pure _ res)))))

Kind.Checker.equal.hol.val (val: (Maybe (Kind.Term))) (orig: U60) (numb: U60) (b: (Kind.Term)) : (Kind.Checker (Bool))
Kind.Checker.equal.hol.val (Maybe.none t) orig numb b = (Kind.Checker.bind _ _ (Kind.Checker.fill numb b) (_ => (Kind.Checker.pure _ (Bool.true))))
Kind.Checker.equal.hol.val (Maybe.some t val) orig numb b = (Kind.Checker.equal val b)

Kind.Term.fillable (term: (Kind.Term)) (sub: (Kind.Subst)) : (Bool)
Kind.Term.fillable term (Kind.Subst.end) = (Bool.false)
Kind.Term.fillable (Kind.Term.typ orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.var orig name index) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.hlp orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.u60 orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.num orig num) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.all orig name typ body) sub = (Bool.or (Kind.Term.fillable typ sub) (Kind.Term.fillable (body (Kind.Term.hlp 0)) sub))
Kind.Term.fillable (Kind.Term.lam orig name body) sub = (Kind.Term.fillable (body (Kind.Term.hlp 0)) sub)
Kind.Term.fillable (Kind.Term.app orig expr typ) sub = (Bool.or (Kind.Term.fillable expr sub) (Kind.Term.fillable typ sub))
Kind.Term.fillable (Kind.Term.let orig name expr body) sub = (Bool.or (Kind.Term.fillable expr sub) (Kind.Term.fillable (body (Kind.Term.hlp 0)) sub))
Kind.Term.fillable (Kind.Term.ann orig expr typ) sub = (Bool.or (Kind.Term.fillable expr sub) (Kind.Term.fillable typ sub))
Kind.Term.fillable (Kind.Term.sub orig name indx redx expr) sub = (Kind.Term.fillable expr sub)
Kind.Term.fillable (Kind.Term.op2 orig op left right) sub = (Bool.or (Kind.Term.fillable left sub) (Kind.Term.fillable right sub))
Kind.Term.fillable (Kind.Term.hol orig numb) sub = (Maybe.is_some _ (Kind.Subst.look sub numb))
Kind.Term.fillable (Kind.Term.ct0 ctid orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.ct1 ctid orig x0) sub = (Kind.Term.fillable x0 sub)
Kind.Term.fillable (Kind.Term.ct2 ctid orig x0 x1) sub = (Bool.or (Kind.Term.fillable x0 sub) (Kind.Term.fillable x1 sub))
Kind.Term.fillable (Kind.Term.ct3 ctid orig x0 x1 x2) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Kind.Term.fillable x2 sub)))
Kind.Term.fillable (Kind.Term.ct4 ctid orig x0 x1 x2 x3) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Kind.Term.fillable x3 sub))))
Kind.Term.fillable (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Kind.Term.fillable x4 sub)))))
Kind.Term.fillable (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Kind.Term.fillable x5 sub))))))
Kind.Term.fillable (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Kind.Term.fillable x6 sub)))))))
Kind.Term.fillable (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Kind.Term.fillable x7 sub))))))))
Kind.Term.fillable (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Kind.Term.fillable x8 sub)))))))))
Kind.Term.fillable (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Kind.Term.fillable x9 sub))))))))))
Kind.Term.fillable (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Kind.Term.fillable x10 sub)))))))))))
Kind.Term.fillable (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Kind.Term.fillable x11 sub))))))))))))
Kind.Term.fillable (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Kind.Term.fillable x12 sub)))))))))))))
Kind.Term.fillable (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Bool.or (Kind.Term.fillable x12 sub) (Kind.Term.fillable x13 sub))))))))))))))
Kind.Term.fillable (Kind.Term.ct15 fnid orig args) sub = (Kind.Term.fillable args sub)
Kind.Term.fillable (Kind.Term.ct16 fnid orig args) sub = (Kind.Term.fillable args sub)
Kind.Term.fillable (Kind.Term.fn0 fnid orig) sub = (Bool.false)
Kind.Term.fillable (Kind.Term.fn1 fnid orig x0) sub = (Kind.Term.fillable x0 sub)
Kind.Term.fillable (Kind.Term.fn2 fnid orig x0 x1) sub = (Bool.or (Kind.Term.fillable x0 sub) (Kind.Term.fillable x1 sub))
Kind.Term.fillable (Kind.Term.fn3 fnid orig x0 x1 x2) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Kind.Term.fillable x2 sub)))
Kind.Term.fillable (Kind.Term.fn4 fnid orig x0 x1 x2 x3) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Kind.Term.fillable x3 sub))))
Kind.Term.fillable (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Kind.Term.fillable x4 sub)))))
Kind.Term.fillable (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Kind.Term.fillable x5 sub))))))
Kind.Term.fillable (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Kind.Term.fillable x6 sub)))))))
Kind.Term.fillable (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Kind.Term.fillable x7 sub))))))))
Kind.Term.fillable (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Kind.Term.fillable x8 sub)))))))))
Kind.Term.fillable (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Kind.Term.fillable x9 sub))))))))))
Kind.Term.fillable (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Kind.Term.fillable x10 sub)))))))))))
Kind.Term.fillable (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Kind.Term.fillable x11 sub))))))))))))
Kind.Term.fillable (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Kind.Term.fillable x12 sub)))))))))))))
Kind.Term.fillable (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Bool.or (Kind.Term.fillable x12 sub) (Kind.Term.fillable x13 sub))))))))))))))
Kind.Term.fillable (Kind.Term.fn15 fnid orig args) sub = (Kind.Term.fillable args sub)
Kind.Term.fillable (Kind.Term.fn16 fnid orig args) sub = (Kind.Term.fillable args sub)
Kind.Term.fillable (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Bool.or (Kind.Term.fillable x12 sub) (Bool.or (Kind.Term.fillable x13 sub) (Kind.Term.fillable x14 sub)))))))))))))))
Kind.Term.fillable (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) sub = (Bool.or (Kind.Term.fillable x0 sub) (Bool.or (Kind.Term.fillable x1 sub) (Bool.or (Kind.Term.fillable x2 sub) (Bool.or (Kind.Term.fillable x3 sub) (Bool.or (Kind.Term.fillable x4 sub) (Bool.or (Kind.Term.fillable x5 sub) (Bool.or (Kind.Term.fillable x6 sub) (Bool.or (Kind.Term.fillable x7 sub) (Bool.or (Kind.Term.fillable x8 sub) (Bool.or (Kind.Term.fillable x9 sub) (Bool.or (Kind.Term.fillable x10 sub) (Bool.or (Kind.Term.fillable x11 sub) (Bool.or (Kind.Term.fillable x12 sub) (Bool.or (Kind.Term.fillable x13 sub) (Bool.or (Kind.Term.fillable x14 sub) (Kind.Term.fillable x15 sub))))))))))))))))

Bool.or (a: (Bool)) (b: (Bool)) : (Bool)
Bool.or (Bool.true) b = (Bool.true)
Bool.or (Bool.false) b = b

Maybe.is_some <a: Type> (m: (Maybe a)) : (Bool)
Maybe.is_some a (Maybe.none t) = (Bool.false)
Maybe.is_some a (Maybe.some t v) = (Bool.true)

Kind.Subst.end : (Kind.Subst)

Kind.Subst.look (subst: (Kind.Subst)) (depth: U60) : (Maybe (Kind.Term))
Kind.Subst.look (Kind.Subst.end) 0 = (Maybe.none _)
Kind.Subst.look (Kind.Subst.unfilled rest) 0 = (Maybe.none _)
Kind.Subst.look (Kind.Subst.sub term rest) 0 = (Maybe.some _ term)
Kind.Subst.look (Kind.Subst.end) n = (Maybe.none _)
Kind.Subst.look (Kind.Subst.unfilled rest) n = (Kind.Subst.look rest (- n 1))
Kind.Subst.look (Kind.Subst.sub term rest) n = (Kind.Subst.look rest (- n 1))

Kind.Subst.unfilled (rest: (Kind.Subst)) : (Kind.Subst)

Kind.Subst.sub (term: (Kind.Term)) (rest: (Kind.Subst)) : (Kind.Subst)

Kind.Operator.equal (left: (Kind.Operator)) (right: (Kind.Operator)) : (Bool)
Kind.Operator.equal (Kind.Operator.and) (Kind.Operator.and) = (Bool.true)
Kind.Operator.equal (Kind.Operator.sub) (Kind.Operator.sub) = (Bool.true)
Kind.Operator.equal (Kind.Operator.mul) (Kind.Operator.mul) = (Bool.true)
Kind.Operator.equal (Kind.Operator.div) (Kind.Operator.div) = (Bool.true)
Kind.Operator.equal (Kind.Operator.mod) (Kind.Operator.mod) = (Bool.true)
Kind.Operator.equal (Kind.Operator.and) (Kind.Operator.and) = (Bool.true)
Kind.Operator.equal (Kind.Operator.or) (Kind.Operator.or) = (Bool.true)
Kind.Operator.equal (Kind.Operator.xor) (Kind.Operator.xor) = (Bool.true)
Kind.Operator.equal (Kind.Operator.shl) (Kind.Operator.shl) = (Bool.true)
Kind.Operator.equal (Kind.Operator.shr) (Kind.Operator.shr) = (Bool.true)
Kind.Operator.equal (Kind.Operator.ltn) (Kind.Operator.ltn) = (Bool.true)
Kind.Operator.equal (Kind.Operator.lte) (Kind.Operator.lte) = (Bool.true)
Kind.Operator.equal (Kind.Operator.eql) (Kind.Operator.eql) = (Bool.true)
Kind.Operator.equal (Kind.Operator.gte) (Kind.Operator.gte) = (Bool.true)
Kind.Operator.equal (Kind.Operator.gtn) (Kind.Operator.gtn) = (Bool.true)
Kind.Operator.equal (Kind.Operator.neq) (Kind.Operator.neq) = (Bool.true)
Kind.Operator.equal a b = (Bool.false)

Kind.Term.fill (term: (Kind.Term)) (subst: (Kind.Subst)) : (Kind.Term)
Kind.Term.fill term (Kind.Subst.end) = term
Kind.Term.fill (Kind.Term.typ orig) sub = (Kind.Term.typ orig)
Kind.Term.fill (Kind.Term.var orig name index) sub = (Kind.Term.var orig name index)
Kind.Term.fill (Kind.Term.all orig name typ body) sub = (Kind.Term.all orig name (Kind.Term.fill typ sub) (x => (Kind.Term.fill (body x) sub)))
Kind.Term.fill (Kind.Term.lam orig name body) sub = (Kind.Term.lam orig name (x => (Kind.Term.fill (body x) sub)))
Kind.Term.fill (Kind.Term.let orig name expr body) sub = (Kind.Term.eval_let orig name (Kind.Term.fill expr sub) (x => (Kind.Term.fill (body x) sub)))
Kind.Term.fill (Kind.Term.ann orig expr typ) sub = (Kind.Term.eval_ann orig (Kind.Term.fill expr sub) (Kind.Term.fill typ sub))
Kind.Term.fill (Kind.Term.sub orig name indx redx expr) sub = (Kind.Term.eval_sub orig name indx redx (Kind.Term.fill expr sub))
Kind.Term.fill (Kind.Term.app orig expr typ) sub = (Kind.Term.eval_app orig (Kind.Term.fill expr sub) (Kind.Term.fill typ sub))
Kind.Term.fill (Kind.Term.hlp orig) sub = (Kind.Term.hlp orig)
Kind.Term.fill (Kind.Term.u60 orig) sub = (Kind.Term.u60 orig)
Kind.Term.fill (Kind.Term.num orig num) sub = (Kind.Term.num orig num)
Kind.Term.fill (Kind.Term.op2 orig op left right) sub = (Kind.Term.op2 orig op (Kind.Term.fill left sub) (Kind.Term.fill right sub))
Kind.Term.fill (Kind.Term.ct0 ctid orig) sub = (Kind.Term.ct0 ctid orig)
Kind.Term.fill (Kind.Term.ct1 ctid orig x0) sub = (Kind.Term.ct1 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.ct2 ctid orig x0 x1) sub = (Kind.Term.ct2 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub))
Kind.Term.fill (Kind.Term.ct3 ctid orig x0 x1 x2) sub = (Kind.Term.ct3 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub))
Kind.Term.fill (Kind.Term.ct4 ctid orig x0 x1 x2 x3) sub = (Kind.Term.ct4 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub))
Kind.Term.fill (Kind.Term.ct5 ctid orig x0 x1 x2 x3 x4) sub = (Kind.Term.ct5 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub))
Kind.Term.fill (Kind.Term.ct6 ctid orig x0 x1 x2 x3 x4 x5) sub = (Kind.Term.ct6 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub))
Kind.Term.fill (Kind.Term.ct7 ctid orig x0 x1 x2 x3 x4 x5 x6) sub = (Kind.Term.ct7 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub))
Kind.Term.fill (Kind.Term.ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7) sub = (Kind.Term.ct8 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub))
Kind.Term.fill (Kind.Term.ct9 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) sub = (Kind.Term.ct9 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub))
Kind.Term.fill (Kind.Term.ct10 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) sub = (Kind.Term.ct10 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub))
Kind.Term.fill (Kind.Term.ct11 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) sub = (Kind.Term.ct11 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub))
Kind.Term.fill (Kind.Term.ct12 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) sub = (Kind.Term.ct12 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub))
Kind.Term.fill (Kind.Term.ct13 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) sub = (Kind.Term.ct13 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub))
Kind.Term.fill (Kind.Term.ct14 ctid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) sub = (Kind.Term.ct14 ctid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub) (Kind.Term.fill x13 sub))
Kind.Term.fill (Kind.Term.ct15 ctid orig x0) sub = (Kind.Term.ct15 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.ct16 ctid orig x0) sub = (Kind.Term.ct16 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.fn0 fnid orig) sub = (Kind.Term.FN0 fnid orig)
Kind.Term.fill (Kind.Term.fn1 fnid orig x0) sub = (Kind.Term.FN1 fnid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.fn2 fnid orig x0 x1) sub = (Kind.Term.FN2 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub))
Kind.Term.fill (Kind.Term.fn3 fnid orig x0 x1 x2) sub = (Kind.Term.FN3 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub))
Kind.Term.fill (Kind.Term.fn4 fnid orig x0 x1 x2 x3) sub = (Kind.Term.FN4 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub))
Kind.Term.fill (Kind.Term.fn5 fnid orig x0 x1 x2 x3 x4) sub = (Kind.Term.FN5 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub))
Kind.Term.fill (Kind.Term.fn6 fnid orig x0 x1 x2 x3 x4 x5) sub = (Kind.Term.FN6 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub))
Kind.Term.fill (Kind.Term.fn7 fnid orig x0 x1 x2 x3 x4 x5 x6) sub = (Kind.Term.FN7 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub))
Kind.Term.fill (Kind.Term.fn8 fnid orig x0 x1 x2 x3 x4 x5 x6 x7) sub = (Kind.Term.FN8 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub))
Kind.Term.fill (Kind.Term.fn9 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8) sub = (Kind.Term.FN9 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub))
Kind.Term.fill (Kind.Term.fn10 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9) sub = (Kind.Term.FN10 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub))
Kind.Term.fill (Kind.Term.fn11 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10) sub = (Kind.Term.FN11 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub))
Kind.Term.fill (Kind.Term.fn12 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11) sub = (Kind.Term.FN12 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub))
Kind.Term.fill (Kind.Term.fn13 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) sub = (Kind.Term.FN13 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub))
Kind.Term.fill (Kind.Term.fn14 fnid orig x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) sub = (Kind.Term.FN14 fnid orig (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub) (Kind.Term.fill x13 sub))
Kind.Term.fill (Kind.Term.fn15 ctid orig x0) sub = (Kind.Term.FN15 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.fn16 ctid orig x0) sub = (Kind.Term.FN16 ctid orig (Kind.Term.fill x0 sub))
Kind.Term.fill (Kind.Term.args15 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14) sub = (Kind.Term.args15 (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub) (Kind.Term.fill x13 sub) (Kind.Term.fill x14 sub))
Kind.Term.fill (Kind.Term.args16 x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15) sub = (Kind.Term.args16 (Kind.Term.fill x0 sub) (Kind.Term.fill x1 sub) (Kind.Term.fill x2 sub) (Kind.Term.fill x3 sub) (Kind.Term.fill x4 sub) (Kind.Term.fill x5 sub) (Kind.Term.fill x6 sub) (Kind.Term.fill x7 sub) (Kind.Term.fill x8 sub) (Kind.Term.fill x9 sub) (Kind.Term.fill x10 sub) (Kind.Term.fill x11 sub) (Kind.Term.fill x12 sub) (Kind.Term.fill x13 sub) (Kind.Term.fill x14 sub) (Kind.Term.fill x15 sub))
Kind.Term.fill (Kind.Term.hol orig numb) sub = (let substRes = (Kind.Subst.look sub numb); (Maybe.match _ substRes (substRes => _) (Kind.Term.hol orig numb) (substRes.value => (Kind.Term.fill substRes.value sub))))

Kind.Checker.fill (index: U60) (val: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.fill index val = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs (Kind.Subst.fill subst index val) eqts errs (Unit.new))))))))

Kind.Subst.fill (subst: (Kind.Subst)) (depth: U60) (term: (Kind.Term)) : (Kind.Subst)
Kind.Subst.fill (Kind.Subst.end) 0 term = (Kind.Subst.sub term (Kind.Subst.end))
Kind.Subst.fill (Kind.Subst.unfilled rest) 0 term = (Kind.Subst.sub term rest)
Kind.Subst.fill (Kind.Subst.sub lost rest) 0 term = (Kind.Subst.sub term rest)
Kind.Subst.fill (Kind.Subst.end) n term = (Kind.Subst.unfilled (Kind.Subst.fill (Kind.Subst.end) (- n 1) term))
Kind.Subst.fill (Kind.Subst.unfilled rest) n term = (Kind.Subst.unfilled (Kind.Subst.fill rest (- n 1) term))
Kind.Subst.fill (Kind.Subst.sub keep rest) n term = (Kind.Subst.sub keep (Kind.Subst.fill rest (- n 1) term))

Bool.and (a: (Bool)) (b: (Bool)) : (Bool)
Bool.and (Bool.true) b = b
Bool.and (Bool.false) b = (Bool.false)

Kind.Checker.look (index: U60) : (Kind.Checker (Maybe (Kind.Term)))
Kind.Checker.look index = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst eqts errs (Kind.Subst.look subst index))))))))

Kind.Checker.add_value (idx: U60) (val: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.add_value idx val = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ (Kind.Context.add_value context idx val) depth rhs subst eqts errs (Unit.new))))))))

Kind.Context.add_value (prev: (Kind.Context)) (name: U60) (term: (Kind.Term)) : (Kind.Context)
Kind.Context.add_value (Kind.Context.entry name type vals rest) 0 val = (Kind.Context.entry name type (List.cons _ val vals) rest)
Kind.Context.add_value (Kind.Context.entry name type vals rest) n val = (Kind.Context.entry name type vals (Kind.Context.add_value rest (- n 1) val))
Kind.Context.add_value (Kind.Context.empty) n val = (Kind.Context.empty)

Kind.Rule : Type

Kind.Checker.run <t: Type> (checker: (Kind.Checker t)) (rhs: (Bool)) : (Kind.Result t)
Kind.Checker.run t checker rhs = (checker (Kind.Context.empty) 0 rhs (Kind.Subst.end) (List.nil _) (List.nil _))

Kind.Checker.rule (rule: (Kind.Rule)) (term: (Kind.Term)) : (Kind.Checker (Unit))
Kind.Checker.rule (Kind.Rule.lhs arg args) (Kind.Term.all orig name type body) = (Kind.Checker.bind _ _ (Kind.Checker.check arg type) (_ => (Kind.Checker.bind _ _ (Kind.Checker.rule args (body arg)) (_ => (Kind.Checker.pure _ (Unit.new))))))
Kind.Checker.rule (Kind.Rule.lhs arg args) other = (Kind.Checker.bind _ _ (Kind.Checker.get_context) (ctx => (Kind.Checker.fail _ (Kind.Error.too_many_arguments ctx (Kind.Term.get_origin _ arg (orig => (term => orig)))))))
Kind.Checker.rule (Kind.Rule.rhs expr) type = (Kind.Checker.bind _ _ (Kind.Checker.set_right_hand_side (Bool.true)) (_ => (Kind.Checker.bind _ _ (Kind.Checker.check expr type) (_ => (Kind.Checker.pure _ (Unit.new))))))

Kind.Checker.set_right_hand_side (rhs: (Bool)) : (Kind.Checker (Unit))
Kind.Checker.set_right_hand_side to_rhs = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth to_rhs subst eqts errs (Unit.new))))))))

Kind.Error.too_many_arguments (ctx: (Kind.Context)) (orig: U60) : (Kind.Error)

Kind.Rule.lhs (arg: (Kind.Term)) (args: (Kind.Rule)) : (Kind.Rule)

Kind.Rule.rhs (arg: (Kind.Term)) : (Kind.Rule)

Kind.Checker.unify (checker: (Kind.Checker (Unit))) : (Kind.Checker (Unit))
Kind.Checker.unify checker = (Kind.Checker.bind _ _ checker (_ => (Kind.Checker.bind _ _ (Kind.Checker.get_equations) (equations => (Kind.Checker.unify.go equations (List.nil _) (Bool.false))))))

Kind.Checker.unify.go (equations: (List (Kind.Equation))) (unsolved: (List (Kind.Equation))) (changed: (Bool)) : (Kind.Checker (Unit))
Kind.Checker.unify.go (List.nil t) (List.nil t1) changed = (Kind.Checker.pure _ (Unit.new))
Kind.Checker.unify.go (List.nil t) unsolved (Bool.true) = (Kind.Checker.unify.go unsolved (List.nil _) (Bool.false))
Kind.Checker.unify.go (List.nil t) unsolved (Bool.false) = (Kind.Checker.unify.go.fail unsolved)
Kind.Checker.unify.go (List.cons t (Kind.Equation.new ctx orig left right) equations) unsolved changed = (Kind.Checker.bind _ _ (Kind.Checker.with_context _ (Kind.Checker.equal (Kind.Term.eval left) (Kind.Term.eval right)) ctx) (is_equal => (let unify = ((Bool.if _ is_equal ((equations => ((unsolved => (Kind.Checker.unify.go equations unsolved (Bool.true))) :: (unsolved: (List (Kind.Equation))) _)) :: (equations: (List (Kind.Equation))) _) ((equations => ((unsolved => (let eqt = (Kind.Equation.new ctx orig left right); (Kind.Checker.unify.go equations (List.cons _ eqt unsolved) changed))) :: (unsolved: (List (Kind.Equation))) _)) :: (equations: (List (Kind.Equation))) _)) :: (_: (List (Kind.Equation))) (_: (List (Kind.Equation))) (Kind.Checker (Unit))); (unify equations unsolved))))

Kind.Checker.unify.go.fail (equations: (List (Kind.Equation))) : (Kind.Checker (Unit))
Kind.Checker.unify.go.fail (List.nil t) = (Kind.Checker.pure _ (Unit.new))
Kind.Checker.unify.go.fail (List.cons t (Kind.Equation.new ctx orig left right) eqts) = (Kind.Checker.bind _ _ (Kind.Checker.error _ (Kind.Error.type_mismatch ctx orig left right) (Unit.new)) (_ => (Kind.Checker.unify.go.fail eqts)))

Kind.Checker.get_equations : (Kind.Checker (List (Kind.Equation)))
Kind.Checker.get_equations = (context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ context depth rhs subst eqts errs eqts)))))))

Kind.Checker.with_context <a: Type> (checker: (Kind.Checker a)) (context: (Kind.Context)) : (Kind.Checker a)
Kind.Checker.with_context a checker new_context = (Kind.Checker.bind _ _ (Kind.Checker.set_context new_context) (old_context => (Kind.Checker.bind _ _ checker (got => (Kind.Checker.bind _ _ (Kind.Checker.set_context old_context) (_ => (Kind.Checker.pure _ got)))))))

Kind.Checker.set_context (new_context: (Kind.Context)) : (Kind.Checker (Kind.Context))
Kind.Checker.set_context new_context = (old_context => (depth => (rhs => (subst => (eqts => (errs => (Kind.Result.checked _ new_context depth rhs subst eqts errs old_context)))))))

Kind.Error.type_mismatch (ctx: (Kind.Context)) (orig: U60) (expected: (Kind.Term)) (detected: (Kind.Term)) : (Kind.Error)

List.reverse <a: Type> (xs: (List a)) : (List a)
List.reverse a xs = (List.reverse.go _ xs (List.nil _))

List.reverse.go <a: Type> (xs: (List a)) (ys: (List a)) : (List a)
List.reverse.go a (List.nil a_) ys = ys
List.reverse.go a (List.cons a_ x xs) ys = (List.reverse.go _ xs (List.cons _ x ys))

String.is_nil (xs: (String)) : (Bool)
String.is_nil "" = (Bool.true)
String.is_nil (String.cons x xs) = (Bool.false)

Kind.API.output (res: (List (Pair U60 (List (Kind.Result (Unit)))))) : (String)
Kind.API.output (List.nil t) = ""
Kind.API.output (List.cons t pair rest) = (Pair.match _ _ pair (pair => _) (pair.fst => (pair.snd => (Kind.Printer.text (List.cons _ (Kind.API.output.function pair.fst pair.snd) (List.cons _ (Kind.API.output rest) (List.nil _)))))))

Kind.API.output.function (fnid: U60) (ls: (List (Kind.Result (Unit)))) : (String)
Kind.API.output.function fnid (List.nil t) = ""
Kind.API.output.function fnid (List.cons t (Kind.Result.checked a ctx dep rhs sub eqt err val) checks) = (Kind.API.output.function.show_errors err sub fnid checks)
Kind.API.output.function fnid (List.cons t (Kind.Result.errored a ctx sub err) checks) = (Kind.API.output.function.show_errors err sub fnid checks)

Kind.API.output.function.show_errors (ls: (List (Kind.Error))) (sub: (Kind.Subst)) (fnid: U60) (res: (List (Kind.Result (Unit)))) : (String)
Kind.API.output.function.show_errors (List.nil t) sub fnid checks = (Kind.API.output.function fnid checks)
Kind.API.output.function.show_errors (List.cons t err errs) sub fnid checks = (Kind.Printer.text (List.cons _ (Kind.API.output.error fnid err sub) (List.cons _ (String.new_line) (List.cons _ (Kind.API.output.function.show_errors errs sub fnid checks) (List.nil _)))))

Kind.API.output.error (fnid: U60) (err: (Kind.Error)) (sub: (Kind.Subst)) : (String)
Kind.API.output.error fnid (Kind.Error.unbound_variable ctx orig) sub = (Kind.Printer.text (List.cons _ (Kind.Printer.color "4") (List.cons _ "Unbound Variable." (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ (Kind.API.output.error.details fnid ctx sub orig) (List.nil _)))))))
Kind.API.output.error fnid (Kind.Error.cant_infer_lambda ctx orig) sub = (Kind.Printer.text (List.cons _ (Kind.Printer.color "4") (List.cons _ (String.cons 67 (String.cons 97 (String.cons 110 (String.cons 39 "t infer lambda.")))) (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ (Kind.API.output.error.details fnid ctx sub orig) (List.nil _)))))))
Kind.API.output.error fnid (Kind.Error.cant_infer_hole ctx orig) sub = (Kind.Printer.text (List.cons _ (Kind.Printer.color "4") (List.cons _ (String.cons 67 (String.cons 97 (String.cons 110 (String.cons 39 "t infer hole.")))) (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ (Kind.API.output.error.details fnid ctx sub orig) (List.nil _)))))))
Kind.API.output.error fnid (Kind.Error.too_many_arguments ctx orig) sub = (Kind.Printer.text (List.cons _ (Kind.Printer.color "4") (List.cons _ "Too many arguments." (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ (Kind.API.output.error.details fnid ctx sub orig) (List.nil _)))))))
Kind.API.output.error fnid (Kind.Error.invalid_call ctx orig) sub = (Kind.Printer.text (List.cons _ (Kind.Printer.color "4") (List.cons _ "Invalid call." (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ (Kind.API.output.error.details fnid ctx sub orig) (List.nil _)))))))
Kind.API.output.error fnid (Kind.Error.type_mismatch ctx orig expected detected) sub = (Kind.Printer.text (List.cons _ (Kind.Printer.color "4") (List.cons _ "Type mismatch" (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ "- Expected: " (List.cons _ (String.cut (Kind.Term.show (Kind.Term.fill expected sub))) (List.cons _ (String.new_line) (List.cons _ "- Detected: " (List.cons _ (String.cut (Kind.Term.show (Kind.Term.fill detected sub))) (List.cons _ (String.new_line) (List.cons _ (Kind.API.output.error.details fnid ctx sub orig) (List.nil _)))))))))))))
Kind.API.output.error fnid (Kind.Error.impossible_case ctx orig expected detected) sub = (Kind.Printer.text (List.cons _ (Kind.Printer.color "4") (List.cons _ "Impossible case. You can remove it." (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ (Kind.API.output.error.details fnid ctx sub orig) (List.nil _)))))))
Kind.API.output.error fnid (Kind.Error.inspection ctx orig expected) sub = (Kind.Printer.text (List.cons _ (Kind.Printer.color "4") (List.cons _ "Inspection." (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ "- Goal: " (List.cons _ (String.cut (Kind.Term.show (Kind.Term.fill expected sub))) (List.cons _ (String.new_line) (List.cons _ (Kind.API.output.error.details fnid ctx sub orig) (List.nil _))))))))))

Kind.API.output.error.details (fnid: U60) (ctx: (Kind.Context)) (sub: (Kind.Subst)) (origin: U60) : (String)
Kind.API.output.error.details fnid ctx sub orig = (Kind.Printer.text (List.cons _ (Bool.if _ (Kind.Context.is_empty ctx) "" (Kind.Printer.text (List.cons _ (Kind.Printer.color "4") (List.cons _ "Kind.Context:" (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ (Kind.Context.show ctx sub) (List.nil _)))))))) (List.cons _ (Kind.Printer.color "4") (List.cons _ (String.cons 79 (String.cons 110 (String.cons 32 (String.cons 39 "{{#F")))) (List.cons _ (Show.to_string (U60.show (>> orig 48))) (List.cons _ (String.cons 70 (String.cons 35 (String.cons 125 (String.cons 125 (String.cons 39 ":"))))) (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ "{{#R" (List.cons _ (Show.to_string (U60.show (>> orig 48))) (List.cons _ ":" (List.cons _ (Show.to_string (U60.show (& orig 16777215))) (List.cons _ ":" (List.cons _ (Show.to_string (U60.show (& (>> orig 24) 16777215))) (List.cons _ "R#}}" (List.cons _ (String.new_line) (List.nil _)))))))))))))))))

Kind.Context.is_empty (ctx: (Kind.Context)) : (Bool)
Kind.Context.is_empty (Kind.Context.empty) = (Bool.true)
Kind.Context.is_empty (Kind.Context.entry name type vals rest) = (Bool.false)

Kind.Printer.color (color_code: (String)) : (String)
Kind.Printer.color color_code = (Kind.Printer.text (List.cons _ (String.cons 27 "") (List.cons _ "[" (List.cons _ color_code (List.cons _ "m" (List.nil _))))))

String.cut.go (str: (String)) (df: (String)) (n: U60) : (String)
String.cut.go "" df n = ""
String.cut.go (String.cons x xs) df 0 = df
String.cut.go (String.cons x xs) df n = (String.cons x (String.cut.go xs df (- n 1)))

String.cut (str: (String)) : (String)
String.cut str = (String.cut.go str "(...)" 2048)

Kind.Context.show.type (name: U60) (type: (Kind.Term)) (sub: (Kind.Subst)) (pad: U60) : (String)
Kind.Context.show.type name type sub pad = (Kind.Printer.text (List.cons _ "- " (List.cons _ (String.pad_right (U60.to_nat pad) 32 (Kind.Name.show name)) (List.cons _ " : " (List.cons _ (String.cut (Kind.Term.show (Kind.Term.fill type sub))) (List.cons _ (String.new_line) (List.nil _)))))))

Kind.Context.show.vals (name: U60) (vals: (List (Kind.Term))) (sub: (Kind.Subst)) (pad: U60) : (String)
Kind.Context.show.vals name (List.nil t) sub pad = ""
Kind.Context.show.vals name (List.cons t val vals) sub pad = (Kind.Printer.text (List.cons _ (Kind.Printer.color "2") (List.cons _ "- " (List.cons _ (String.pad_right (U60.to_nat pad) 32 (Kind.Name.show name)) (List.cons _ " = " (List.cons _ (String.cut (Kind.Term.show (Kind.Term.fill val sub))) (List.cons _ (Kind.Printer.color "0") (List.cons _ (String.new_line) (List.cons _ (Kind.Context.show.vals name vals sub pad) (List.nil _))))))))))

Kind.Context.show.go (ctx: (Kind.Context)) (subst: (Kind.Subst)) (pad: U60) : (String)
Kind.Context.show.go (Kind.Context.empty) sub pad = ""
Kind.Context.show.go (Kind.Context.entry name type vals rest) sub pad = (Kind.Printer.text (List.cons _ (Kind.Context.show.type name type sub pad) (List.cons _ (Kind.Context.show.vals name vals sub pad) (List.cons _ (Kind.Context.show.go rest sub pad) (List.nil _)))))

Kind.Context.show (ctx: (Kind.Context)) (subst: (Kind.Subst)) : (String)
Kind.Context.show ctx subst = (Kind.Context.show.go ctx subst (Kind.Context.max_name_length ctx))

String.pad_right (size: (Nat)) (chr: (Char)) (str: (String)) : (String)
String.pad_right (Nat.zero) chr str = str
String.pad_right (Nat.succ sp) chr "" = (String.cons chr (String.pad_right sp chr ""))
String.pad_right (Nat.succ sp) chr (String.cons x xs) = (String.cons x (String.pad_right sp chr xs))

Nat.succ (pred: (Nat)) : (Nat)

Nat : Type

Nat.zero : (Nat)

U60.to_nat (x: U60) : (Nat)
U60.to_nat 0 = (Nat.zero)
U60.to_nat n = (Nat.succ (U60.to_nat (- n 1)))

Kind.Context.max_name_length.aux (ctx: (Kind.Context)) (acc: U60) : U60
Kind.Context.max_name_length.aux (Kind.Context.empty) acc = acc
Kind.Context.max_name_length.aux (Kind.Context.entry name type vals rest) acc = (Kind.Context.max_name_length.aux rest (U60.max (Nat.to_u60 (String.length (Kind.Name.show name))) acc))

Kind.Context.max_name_length (ctx: (Kind.Context)) : U60
Kind.Context.max_name_length ctx = (Kind.Context.max_name_length.aux ctx 0)

U60.max (fst: U60) (snd: U60) : U60
U60.max fst snd = (U60.if _ (> fst snd) fst snd)

Nat.to_u60 (n: (Nat)) : U60
Nat.to_u60 (Nat.zero) = 0
Nat.to_u60 (Nat.succ n) = (+ 1 (Nat.to_u60 n))

String.length (xs: (String)) : (Nat)
String.length "" = (Nat.zero)
String.length (String.cons x xs) = (Nat.succ (String.length xs))


