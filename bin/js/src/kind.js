module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var kind_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(1);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c2;
                return $2;
            } else {
                var $3 = c2;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c2;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c2($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $9 = self.slice(0, -1);
                    var $10 = c1($9);
                    return $10;
                case 'i':
                    var $11 = self.slice(0, -1);
                    var $12 = c2($11);
                    return $12;
                case 'e':
                    var $13 = c0;
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c2;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c2($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
        };
        return run_io({
            rl,
            fs,
            pc
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var run_io = (lib, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, err) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'put_string':
                            process.stdout.write(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'exit':
                            lib.pc.exit();
                            break;
                        case 'get_time':
                            run_io(lib, p.then(String(Date.now()))).then(res).catch(err);
                            break;
                        case 'get_line':
                            lib.rl.question('', (line) => run_io(lib, p.then(line)).then(res).catch(err));
                            break;
                        case 'get_file':
                            try {
                                run_io(lib, p.then(get_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'set_file':
                            try {
                                run_io(lib, p.then(set_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'del_file':
                            try {
                                run_io(lib, p.then(del_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_dir':
                            try {
                                run_io(lib, p.then(get_dir(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_args':
                            run_io(lib, p.then(lib.pc.argv[2] || '')).then(res).catch(err);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function BitsMap$(_A$1) {
        var $36 = null;
        return $36;
    };
    const BitsMap = x0 => BitsMap$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function BitsMap$get$(_bits$2, _map$3) {
        var BitsMap$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var BitsMap$get = _bits$2 => _map$3 => BitsMap$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $37 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $39 = self.lft;
                                var $40 = BitsMap$get$($37, $39);
                                var $38 = $40;
                                break;
                            case 'BitsMap.new':
                                var $41 = Maybe$none;
                                var $38 = $41;
                                break;
                        };
                        return $38;
                    case 'i':
                        var $42 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $44 = self.rgt;
                                var $45 = BitsMap$get$($42, $44);
                                var $43 = $45;
                                break;
                            case 'BitsMap.new':
                                var $46 = Maybe$none;
                                var $43 = $46;
                                break;
                        };
                        return $43;
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $48 = self.val;
                                var $49 = $48;
                                var $47 = $49;
                                break;
                            case 'BitsMap.new':
                                var $50 = Maybe$none;
                                var $47 = $50;
                                break;
                        };
                        return $47;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$get = x0 => x1 => BitsMap$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.eql':
                var $52 = Bool$true;
                var $51 = $52;
                break;
            case 'Cmp.gtn':
                var $53 = Bool$false;
                var $51 = $53;
                break;
        };
        return $51;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $55 = self.pred;
                var $56 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $58 = self.pred;
                            var $59 = (_a$pred$10 => {
                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);
                                return $60;
                            });
                            var $57 = $59;
                            break;
                        case 'Word.i':
                            var $61 = self.pred;
                            var $62 = (_a$pred$10 => {
                                var $63 = Word$cmp$go$(_a$pred$10, $61, Cmp$ltn);
                                return $63;
                            });
                            var $57 = $62;
                            break;
                        case 'Word.e':
                            var $64 = (_a$pred$8 => {
                                var $65 = _c$4;
                                return $65;
                            });
                            var $57 = $64;
                            break;
                    };
                    var $57 = $57($55);
                    return $57;
                });
                var $54 = $56;
                break;
            case 'Word.i':
                var $66 = self.pred;
                var $67 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, Cmp$gtn);
                                return $71;
                            });
                            var $68 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, _c$4);
                                return $74;
                            });
                            var $68 = $73;
                            break;
                        case 'Word.e':
                            var $75 = (_a$pred$8 => {
                                var $76 = _c$4;
                                return $76;
                            });
                            var $68 = $75;
                            break;
                    };
                    var $68 = $68($66);
                    return $68;
                });
                var $54 = $67;
                break;
            case 'Word.e':
                var $77 = (_b$5 => {
                    var $78 = _c$4;
                    return $78;
                });
                var $54 = $77;
                break;
        };
        var $54 = $54(_b$3);
        return $54;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $79 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $79;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $80 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $80;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $81 = 1n + _pred$1;
        return $81;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $82 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $82;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $83 = word_to_u16(_value$1);
        return $83;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $84 = null;
        return $84;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $85 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $85;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $86 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $86;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $88 = self.pred;
                var $89 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $91 = self.pred;
                            var $92 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $94 = Word$i$(Word$subber$(_a$pred$10, $91, Bool$true));
                                    var $93 = $94;
                                } else {
                                    var $95 = Word$o$(Word$subber$(_a$pred$10, $91, Bool$false));
                                    var $93 = $95;
                                };
                                return $93;
                            });
                            var $90 = $92;
                            break;
                        case 'Word.i':
                            var $96 = self.pred;
                            var $97 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $99 = Word$o$(Word$subber$(_a$pred$10, $96, Bool$true));
                                    var $98 = $99;
                                } else {
                                    var $100 = Word$i$(Word$subber$(_a$pred$10, $96, Bool$true));
                                    var $98 = $100;
                                };
                                return $98;
                            });
                            var $90 = $97;
                            break;
                        case 'Word.e':
                            var $101 = (_a$pred$8 => {
                                var $102 = Word$e;
                                return $102;
                            });
                            var $90 = $101;
                            break;
                    };
                    var $90 = $90($88);
                    return $90;
                });
                var $87 = $89;
                break;
            case 'Word.i':
                var $103 = self.pred;
                var $104 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $106 = self.pred;
                            var $107 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $109 = Word$o$(Word$subber$(_a$pred$10, $106, Bool$false));
                                    var $108 = $109;
                                } else {
                                    var $110 = Word$i$(Word$subber$(_a$pred$10, $106, Bool$false));
                                    var $108 = $110;
                                };
                                return $108;
                            });
                            var $105 = $107;
                            break;
                        case 'Word.i':
                            var $111 = self.pred;
                            var $112 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $114 = Word$i$(Word$subber$(_a$pred$10, $111, Bool$true));
                                    var $113 = $114;
                                } else {
                                    var $115 = Word$o$(Word$subber$(_a$pred$10, $111, Bool$false));
                                    var $113 = $115;
                                };
                                return $113;
                            });
                            var $105 = $112;
                            break;
                        case 'Word.e':
                            var $116 = (_a$pred$8 => {
                                var $117 = Word$e;
                                return $117;
                            });
                            var $105 = $116;
                            break;
                    };
                    var $105 = $105($103);
                    return $105;
                });
                var $87 = $104;
                break;
            case 'Word.e':
                var $118 = (_b$5 => {
                    var $119 = Word$e;
                    return $119;
                });
                var $87 = $118;
                break;
        };
        var $87 = $87(_b$3);
        return $87;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $120 = Word$subber$(_a$2, _b$3, Bool$false);
        return $120;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $121 = _x$4;
                    return $121;
                } else {
                    var $122 = (self - 1n);
                    var $123 = Nat$apply$($122, _f$3, _f$3(_x$4));
                    return $123;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $125 = self.pred;
                var $126 = Word$i$($125);
                var $124 = $126;
                break;
            case 'Word.i':
                var $127 = self.pred;
                var $128 = Word$o$(Word$inc$($127));
                var $124 = $128;
                break;
            case 'Word.e':
                var $129 = Word$e;
                var $124 = $129;
                break;
        };
        return $124;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function U16$inc$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $131 = u16_to_word(self);
                var $132 = U16$new$(Word$inc$($131));
                var $130 = $132;
                break;
        };
        return $130;
    };
    const U16$inc = x0 => U16$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $134 = Word$e;
            var $133 = $134;
        } else {
            var $135 = (self - 1n);
            var $136 = Word$o$(Word$zero$($135));
            var $133 = $136;
        };
        return $133;
    };
    const Word$zero = x0 => Word$zero$(x0);
    const U16$zero = U16$new$(Word$zero$(16n));
    const Nat$to_u16 = a0 => (Number(a0));

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $138 = self.pred;
                var $139 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $141 = self.pred;
                            var $142 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $144 = Word$i$(Word$adder$(_a$pred$10, $141, Bool$false));
                                    var $143 = $144;
                                } else {
                                    var $145 = Word$o$(Word$adder$(_a$pred$10, $141, Bool$false));
                                    var $143 = $145;
                                };
                                return $143;
                            });
                            var $140 = $142;
                            break;
                        case 'Word.i':
                            var $146 = self.pred;
                            var $147 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $149 = Word$o$(Word$adder$(_a$pred$10, $146, Bool$true));
                                    var $148 = $149;
                                } else {
                                    var $150 = Word$i$(Word$adder$(_a$pred$10, $146, Bool$false));
                                    var $148 = $150;
                                };
                                return $148;
                            });
                            var $140 = $147;
                            break;
                        case 'Word.e':
                            var $151 = (_a$pred$8 => {
                                var $152 = Word$e;
                                return $152;
                            });
                            var $140 = $151;
                            break;
                    };
                    var $140 = $140($138);
                    return $140;
                });
                var $137 = $139;
                break;
            case 'Word.i':
                var $153 = self.pred;
                var $154 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $156 = self.pred;
                            var $157 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $159 = Word$o$(Word$adder$(_a$pred$10, $156, Bool$true));
                                    var $158 = $159;
                                } else {
                                    var $160 = Word$i$(Word$adder$(_a$pred$10, $156, Bool$false));
                                    var $158 = $160;
                                };
                                return $158;
                            });
                            var $155 = $157;
                            break;
                        case 'Word.i':
                            var $161 = self.pred;
                            var $162 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $164 = Word$i$(Word$adder$(_a$pred$10, $161, Bool$true));
                                    var $163 = $164;
                                } else {
                                    var $165 = Word$o$(Word$adder$(_a$pred$10, $161, Bool$true));
                                    var $163 = $165;
                                };
                                return $163;
                            });
                            var $155 = $162;
                            break;
                        case 'Word.e':
                            var $166 = (_a$pred$8 => {
                                var $167 = Word$e;
                                return $167;
                            });
                            var $155 = $166;
                            break;
                    };
                    var $155 = $155($153);
                    return $155;
                });
                var $137 = $154;
                break;
            case 'Word.e':
                var $168 = (_b$5 => {
                    var $169 = Word$e;
                    return $169;
                });
                var $137 = $168;
                break;
        };
        var $137 = $137(_b$3);
        return $137;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $170 = Word$adder$(_a$2, _b$3, Bool$false);
        return $170;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.gtn':
                var $172 = Bool$false;
                var $171 = $172;
                break;
            case 'Cmp.eql':
                var $173 = Bool$true;
                var $171 = $173;
                break;
        };
        return $171;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $174 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $174;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $176 = self.pred;
                var $177 = (Word$to_bits$($176) + '0');
                var $175 = $177;
                break;
            case 'Word.i':
                var $178 = self.pred;
                var $179 = (Word$to_bits$($178) + '1');
                var $175 = $179;
                break;
            case 'Word.e':
                var $180 = Bits$e;
                var $175 = $180;
                break;
        };
        return $175;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $182 = Word$e;
            var $181 = $182;
        } else {
            var $183 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.o':
                    var $185 = self.pred;
                    var $186 = Word$o$(Word$trim$($183, $185));
                    var $184 = $186;
                    break;
                case 'Word.i':
                    var $187 = self.pred;
                    var $188 = Word$i$(Word$trim$($183, $187));
                    var $184 = $188;
                    break;
                case 'Word.e':
                    var $189 = Word$o$(Word$trim$($183, Word$e));
                    var $184 = $189;
                    break;
            };
            var $181 = $184;
        };
        return $181;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $190 = self.slice(0, -1);
                        var $191 = Bits$reverse$tco$($190, (_r$2 + '0'));
                        return $191;
                    case 'i':
                        var $192 = self.slice(0, -1);
                        var $193 = Bits$reverse$tco$($192, (_r$2 + '1'));
                        return $193;
                    case 'e':
                        var $194 = _r$2;
                        return $194;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $195 = Bits$reverse$tco$(_a$1, Bits$e);
        return $195;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));

    function Kind$Map$get$(_name$2, _map$3) {
        var $196 = BitsMap$get$((kind_name_to_bits(_name$2)), _map$3);
        return $196;
    };
    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);

    function IO$get_file$(_name$1) {
        var $197 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $198 = IO$end$(_file$2);
            return $198;
        }));
        return $197;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function Parser$Reply$(_V$1) {
        var $199 = null;
        return $199;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $200 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $200;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $202 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $201 = $202;
        } else {
            var $203 = self.charCodeAt(0);
            var $204 = self.slice(1);
            var $205 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $201 = $205;
        };
        return $201;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $206 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $206;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$(_V$1) {
        var $207 = null;
        return $207;
    };
    const Parser = x0 => Parser$(x0);

    function Maybe$some$(_value$2) {
        var $208 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $208;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $209 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $209;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.some':
                var $211 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $213 = self.value;
                        var self = $211;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $215 = self.idx;
                                var self = $213;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $217 = self.idx;
                                        var self = ($215 > $217);
                                        if (self) {
                                            var $219 = _a$1;
                                            var $218 = $219;
                                        } else {
                                            var $220 = _b$2;
                                            var $218 = $220;
                                        };
                                        var $216 = $218;
                                        break;
                                };
                                var $214 = $216;
                                break;
                        };
                        var $212 = $214;
                        break;
                    case 'Maybe.none':
                        var $221 = _a$1;
                        var $212 = $221;
                        break;
                };
                var $210 = $212;
                break;
            case 'Maybe.none':
                var $222 = _b$2;
                var $210 = $222;
                break;
        };
        return $210;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.cons':
                        var $223 = self.head;
                        var $224 = self.tail;
                        var _parsed$8 = $223(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $226 = self.idx;
                                var $227 = self.code;
                                var $228 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($226, $227, $228));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $229 = Parser$first_of$go$($224, _err$13, _idx$4, _code$5);
                                var $225 = $229;
                                break;
                            case 'Parser.Reply.value':
                                var $230 = self.idx;
                                var $231 = self.code;
                                var $232 = self.val;
                                var $233 = Parser$Reply$value$($230, $231, $232);
                                var $225 = $233;
                                break;
                        };
                        return $225;
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.some':
                                var $235 = self.value;
                                var self = $235;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $237 = self.idx;
                                        var $238 = self.code;
                                        var $239 = self.err;
                                        var $240 = Parser$Reply$error$($237, $238, $239);
                                        var $236 = $240;
                                        break;
                                };
                                var $234 = $236;
                                break;
                            case 'Maybe.none':
                                var $241 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $234 = $241;
                                break;
                        };
                        return $234;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $242 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $242;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function List$cons$(_head$2, _tail$3) {
        var $243 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $243;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function List$(_A$1) {
        var $244 = null;
        return $244;
    };
    const List = x0 => List$(x0);
    const List$nil = ({
        _: 'List.nil'
    });

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $245 = self.idx;
                        var $246 = self.code;
                        var $247 = self.val;
                        var $248 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $249 = _values$3(List$cons$($247, _xs$9));
                            return $249;
                        }), $245, $246);
                        return $248;
                    case 'Parser.Reply.error':
                        var $250 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $250;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $251 = Parser$many$go(_parser$2)((_x$3 => {
            var $252 = _x$3;
            return $252;
        }));
        return $251;
    };
    const Parser$many = x0 => Parser$many$(x0);
    const Unit$new = 1;

    function String$cons$(_head$1, _tail$2) {
        var $253 = (String.fromCharCode(_head$1) + _tail$2);
        return $253;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.cons':
                        var $254 = self.head;
                        var $255 = self.tail;
                        var $256 = String$flatten$go$($255, (_res$2 + $254));
                        return $256;
                    case 'List.nil':
                        var $257 = _res$2;
                        return $257;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $258 = String$flatten$go$(_xs$1, "");
        return $258;
    };
    const String$flatten = x0 => String$flatten$(x0);
    const String$nil = '';

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $260 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $259 = $260;
        } else {
            var $261 = self.charCodeAt(0);
            var $262 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $264 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $263 = $264;
            } else {
                var $265 = self.charCodeAt(0);
                var $266 = self.slice(1);
                var self = ($261 === $265);
                if (self) {
                    var $268 = Parser$text$($262, Nat$succ$(_idx$2), $266);
                    var $267 = $268;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($265, String$nil), List$cons$("\'.", List$nil))))));
                    var $269 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $267 = $269;
                };
                var $263 = $267;
            };
            var $259 = $263;
        };
        return $259;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $271 = self.err;
                var $272 = Parser$Reply$error$(_idx$2, _code$3, $271);
                var $270 = $272;
                break;
            case 'Parser.Reply.value':
                var $273 = self.idx;
                var $274 = self.code;
                var $275 = self.val;
                var $276 = Parser$Reply$value$($273, $274, $275);
                var $270 = $276;
                break;
        };
        return $270;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.cons':
                        var $277 = self.head;
                        var $278 = self.tail;
                        var $279 = List$reverse$go$($278, List$cons$($277, _res$3));
                        return $279;
                    case 'List.nil':
                        var $280 = _res$3;
                        return $280;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $281 = List$reverse$go$(_xs$2, List$nil);
        return $281;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $283 = self.idx;
                        var $284 = self.code;
                        var $285 = Parser$Reply$value$($283, $284, List$reverse$(_values$4));
                        var $282 = $285;
                        break;
                    case 'Parser.Reply.error':
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $287 = self.idx;
                                var $288 = self.code;
                                var $289 = self.err;
                                var $290 = Parser$Reply$error$($287, $288, $289);
                                var $286 = $290;
                                break;
                            case 'Parser.Reply.value':
                                var $291 = self.idx;
                                var $292 = self.code;
                                var $293 = self.val;
                                var $294 = Parser$until$go$(_until$2, _parse$3, List$cons$($293, _values$4), $291, $292);
                                var $286 = $294;
                                break;
                        };
                        var $282 = $286;
                        break;
                };
                return $282;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $295 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $295;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $297 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $296 = $297;
        } else {
            var $298 = self.charCodeAt(0);
            var $299 = self.slice(1);
            var $300 = Parser$Reply$value$(Nat$succ$(_idx$1), $299, $298);
            var $296 = $300;
        };
        return $296;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $302 = self.idx;
                var $303 = self.code;
                var $304 = self.err;
                var $305 = Parser$Reply$error$($302, $303, $304);
                var $301 = $305;
                break;
            case 'Parser.Reply.value':
                var $306 = self.idx;
                var $307 = self.code;
                var self = Parser$until$(Parser$text("\u{a}"), Parser$one)($306)($307);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $309 = self.idx;
                        var $310 = self.code;
                        var $311 = self.err;
                        var $312 = Parser$Reply$error$($309, $310, $311);
                        var $308 = $312;
                        break;
                    case 'Parser.Reply.value':
                        var $313 = self.idx;
                        var $314 = self.code;
                        var $315 = Parser$Reply$value$($313, $314, Unit$new);
                        var $308 = $315;
                        break;
                };
                var $301 = $308;
                break;
        };
        return $301;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $316 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $316;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Kind$Parser$init$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $318 = self.idx;
                var $319 = self.code;
                var $320 = self.err;
                var $321 = Parser$Reply$error$($318, $319, $320);
                var $317 = $321;
                break;
            case 'Parser.Reply.value':
                var $322 = self.idx;
                var $323 = self.code;
                var self = Parser$get_index$($322, $323);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $325 = self.idx;
                        var $326 = self.code;
                        var $327 = self.err;
                        var $328 = Parser$Reply$error$($325, $326, $327);
                        var $324 = $328;
                        break;
                    case 'Parser.Reply.value':
                        var $329 = self.idx;
                        var $330 = self.code;
                        var $331 = self.val;
                        var $332 = Parser$Reply$value$($329, $330, $331);
                        var $324 = $332;
                        break;
                };
                var $317 = $324;
                break;
        };
        return $317;
    };
    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $334 = self.idx;
                var $335 = self.code;
                var $336 = self.err;
                var $337 = Parser$Reply$error$($334, $335, $336);
                var $333 = $337;
                break;
            case 'Parser.Reply.value':
                var $338 = self.idx;
                var $339 = self.code;
                var $340 = self.val;
                var self = Parser$many$(_parser$2)($338)($339);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $342 = self.idx;
                        var $343 = self.code;
                        var $344 = self.err;
                        var $345 = Parser$Reply$error$($342, $343, $344);
                        var $341 = $345;
                        break;
                    case 'Parser.Reply.value':
                        var $346 = self.idx;
                        var $347 = self.code;
                        var $348 = self.val;
                        var $349 = Parser$Reply$value$($346, $347, List$cons$($340, $348));
                        var $341 = $349;
                        break;
                };
                var $333 = $341;
                break;
        };
        return $333;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Kind$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $351 = Bool$true;
            var $350 = $351;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $353 = Bool$true;
                var $352 = $353;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $355 = Bool$true;
                    var $354 = $355;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $357 = Bool$true;
                        var $356 = $357;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $359 = Bool$true;
                            var $358 = $359;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $361 = Bool$true;
                                var $360 = $361;
                            } else {
                                var $362 = Bool$false;
                                var $360 = $362;
                            };
                            var $358 = $360;
                        };
                        var $356 = $358;
                    };
                    var $354 = $356;
                };
                var $352 = $354;
            };
            var $350 = $352;
        };
        return $350;
    };
    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);

    function Kind$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $364 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $363 = $364;
        } else {
            var $365 = self.charCodeAt(0);
            var $366 = self.slice(1);
            var self = Kind$Name$is_letter$($365);
            if (self) {
                var $368 = Parser$Reply$value$(Nat$succ$(_idx$1), $366, $365);
                var $367 = $368;
            } else {
                var $369 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $367 = $369;
            };
            var $363 = $367;
        };
        return $363;
    };
    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $371 = self.head;
                var $372 = self.tail;
                var $373 = _cons$5($371)(List$fold$($372, _nil$4, _cons$5));
                var $370 = $373;
                break;
            case 'List.nil':
                var $374 = _nil$4;
                var $370 = $374;
                break;
        };
        return $370;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Kind$Parser$name1$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $376 = self.idx;
                var $377 = self.code;
                var $378 = self.err;
                var $379 = Parser$Reply$error$($376, $377, $378);
                var $375 = $379;
                break;
            case 'Parser.Reply.value':
                var $380 = self.idx;
                var $381 = self.code;
                var self = Parser$many1$(Kind$Parser$letter, $380, $381);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $383 = self.idx;
                        var $384 = self.code;
                        var $385 = self.err;
                        var $386 = Parser$Reply$error$($383, $384, $385);
                        var $382 = $386;
                        break;
                    case 'Parser.Reply.value':
                        var $387 = self.idx;
                        var $388 = self.code;
                        var $389 = self.val;
                        var $390 = Parser$Reply$value$($387, $388, List$fold$($389, String$nil, String$cons));
                        var $382 = $390;
                        break;
                };
                var $375 = $382;
                break;
        };
        return $375;
    };
    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);

    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Kind$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $392 = self.idx;
                var $393 = self.code;
                var $394 = self.err;
                var $395 = Parser$Reply$error$($392, $393, $394);
                var $391 = $395;
                break;
            case 'Parser.Reply.value':
                var $396 = self.idx;
                var $397 = self.code;
                var $398 = Parser$text$(_text$1, $396, $397);
                var $391 = $398;
                break;
        };
        return $391;
    };
    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $400 = self.idx;
                var $401 = self.code;
                var $402 = self.err;
                var $403 = Parser$Reply$error$($400, $401, $402);
                var $399 = $403;
                break;
            case 'Parser.Reply.value':
                var $404 = self.idx;
                var $405 = self.code;
                var $406 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($404)($405);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $408 = self.idx;
                        var $409 = self.code;
                        var $410 = self.err;
                        var $411 = Parser$Reply$error$($408, $409, $410);
                        var $407 = $411;
                        break;
                    case 'Parser.Reply.value':
                        var $412 = self.idx;
                        var $413 = self.code;
                        var $414 = self.val;
                        var $415 = Parser$Reply$value$($412, $413, List$cons$($406, $414));
                        var $407 = $415;
                        break;
                };
                var $399 = $407;
                break;
        };
        return $399;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Pair$(_A$1, _B$2) {
        var $416 = null;
        return $416;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.value':
                var $418 = self.idx;
                var $419 = self.code;
                var $420 = self.val;
                var $421 = Parser$Reply$value$($418, $419, Maybe$some$($420));
                var $417 = $421;
                break;
            case 'Parser.Reply.error':
                var $422 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $417 = $422;
                break;
        };
        return $417;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Kind$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $424 = self.idx;
                var $425 = self.code;
                var $426 = self.err;
                var $427 = Parser$Reply$error$($424, $425, $426);
                var $423 = $427;
                break;
            case 'Parser.Reply.value':
                var $428 = self.idx;
                var $429 = self.code;
                var self = _parser$2($428)($429);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $431 = self.idx;
                        var $432 = self.code;
                        var $433 = self.err;
                        var $434 = Parser$Reply$error$($431, $432, $433);
                        var $430 = $434;
                        break;
                    case 'Parser.Reply.value':
                        var $435 = self.idx;
                        var $436 = self.code;
                        var $437 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $435, $436);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $439 = self.idx;
                                var $440 = self.code;
                                var $441 = self.err;
                                var $442 = Parser$Reply$error$($439, $440, $441);
                                var $438 = $442;
                                break;
                            case 'Parser.Reply.value':
                                var $443 = self.idx;
                                var $444 = self.code;
                                var $445 = Parser$Reply$value$($443, $444, $437);
                                var $438 = $445;
                                break;
                        };
                        var $430 = $438;
                        break;
                };
                var $423 = $430;
                break;
        };
        return $423;
    };
    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);

    function Kind$Parser$name$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $447 = self.idx;
                var $448 = self.code;
                var $449 = self.err;
                var $450 = Parser$Reply$error$($447, $448, $449);
                var $446 = $450;
                break;
            case 'Parser.Reply.value':
                var $451 = self.idx;
                var $452 = self.code;
                var self = Parser$many$(Kind$Parser$letter)($451)($452);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $454 = self.idx;
                        var $455 = self.code;
                        var $456 = self.err;
                        var $457 = Parser$Reply$error$($454, $455, $456);
                        var $453 = $457;
                        break;
                    case 'Parser.Reply.value':
                        var $458 = self.idx;
                        var $459 = self.code;
                        var $460 = self.val;
                        var $461 = Parser$Reply$value$($458, $459, List$fold$($460, String$nil, String$cons));
                        var $453 = $461;
                        break;
                };
                var $446 = $453;
                break;
        };
        return $446;
    };
    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);

    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $462 = ({
            _: 'Kind.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $462;
    };
    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);

    function Pair$new$(_fst$3, _snd$4) {
        var $463 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $463;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $465 = self.idx;
                var $466 = self.code;
                var $467 = self.err;
                var $468 = Parser$Reply$error$($465, $466, $467);
                var $464 = $468;
                break;
            case 'Parser.Reply.value':
                var $469 = self.idx;
                var $470 = self.code;
                var $471 = self.val;
                var _orig$7 = Pair$new$(_from$1, $471);
                var $472 = Parser$Reply$value$($469, $470, _orig$7);
                var $464 = $472;
                break;
        };
        return $464;
    };
    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);

    function Kind$Term$ori$(_orig$1, _expr$2) {
        var $473 = ({
            _: 'Kind.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $473;
    };
    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);

    function Kind$Parser$forall$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $475 = self.idx;
                var $476 = self.code;
                var $477 = self.err;
                var $478 = Parser$Reply$error$($475, $476, $477);
                var $474 = $478;
                break;
            case 'Parser.Reply.value':
                var $479 = self.idx;
                var $480 = self.code;
                var $481 = self.val;
                var self = Kind$Parser$name$($479, $480);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $483 = self.idx;
                        var $484 = self.code;
                        var $485 = self.err;
                        var $486 = Parser$Reply$error$($483, $484, $485);
                        var $482 = $486;
                        break;
                    case 'Parser.Reply.value':
                        var $487 = self.idx;
                        var $488 = self.code;
                        var $489 = self.val;
                        var self = Kind$Parser$binder$(":", $487, $488);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $491 = self.idx;
                                var $492 = self.code;
                                var $493 = self.err;
                                var $494 = Parser$Reply$error$($491, $492, $493);
                                var $490 = $494;
                                break;
                            case 'Parser.Reply.value':
                                var $495 = self.idx;
                                var $496 = self.code;
                                var $497 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text("->"), $495, $496);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $499 = self.idx;
                                        var $500 = self.code;
                                        var $501 = self.err;
                                        var $502 = Parser$Reply$error$($499, $500, $501);
                                        var $498 = $502;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $503 = self.idx;
                                        var $504 = self.code;
                                        var self = Kind$Parser$term$($503, $504);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $506 = self.idx;
                                                var $507 = self.code;
                                                var $508 = self.err;
                                                var $509 = Parser$Reply$error$($506, $507, $508);
                                                var $505 = $509;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $510 = self.idx;
                                                var $511 = self.code;
                                                var $512 = self.val;
                                                var _term$18 = List$fold$($497, $512, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $515 = self.eras;
                                                            var $516 = self.name;
                                                            var $517 = self.term;
                                                            var $518 = Kind$Term$all$($515, "", $516, $517, (_s$23 => _x$24 => {
                                                                var $519 = _t$19;
                                                                return $519;
                                                            }));
                                                            var $514 = $518;
                                                            break;
                                                    };
                                                    return $514;
                                                }));
                                                var self = Kind$Parser$stop$($481, $510, $511);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $520 = self.idx;
                                                        var $521 = self.code;
                                                        var $522 = self.err;
                                                        var $523 = Parser$Reply$error$($520, $521, $522);
                                                        var $513 = $523;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $524 = self.idx;
                                                        var $525 = self.code;
                                                        var $526 = self.val;
                                                        var $527 = Parser$Reply$value$($524, $525, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Kind.Term.all':
                                                                    var $528 = self.eras;
                                                                    var $529 = self.name;
                                                                    var $530 = self.xtyp;
                                                                    var $531 = self.body;
                                                                    var $532 = Kind$Term$ori$($526, Kind$Term$all$($528, $489, $529, $530, $531));
                                                                    return $532;
                                                                case 'Kind.Term.var':
                                                                case 'Kind.Term.ref':
                                                                case 'Kind.Term.typ':
                                                                case 'Kind.Term.lam':
                                                                case 'Kind.Term.app':
                                                                case 'Kind.Term.let':
                                                                case 'Kind.Term.def':
                                                                case 'Kind.Term.ann':
                                                                case 'Kind.Term.gol':
                                                                case 'Kind.Term.hol':
                                                                case 'Kind.Term.nat':
                                                                case 'Kind.Term.chr':
                                                                case 'Kind.Term.str':
                                                                case 'Kind.Term.cse':
                                                                case 'Kind.Term.ori':
                                                                    var $533 = _term$18;
                                                                    return $533;
                                                            };
                                                        })());
                                                        var $513 = $527;
                                                        break;
                                                };
                                                var $505 = $513;
                                                break;
                                        };
                                        var $498 = $505;
                                        break;
                                };
                                var $490 = $498;
                                break;
                        };
                        var $482 = $490;
                        break;
                };
                var $474 = $482;
                break;
        };
        return $474;
    };
    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);

    function Kind$Term$lam$(_name$1, _body$2) {
        var $534 = ({
            _: 'Kind.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $534;
    };
    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);

    function Kind$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $536 = self.head;
                var $537 = self.tail;
                var $538 = Kind$Term$lam$($536, (_x$5 => {
                    var $539 = Kind$Parser$make_lambda$($537, _body$2);
                    return $539;
                }));
                var $535 = $538;
                break;
            case 'List.nil':
                var $540 = _body$2;
                var $535 = $540;
                break;
        };
        return $535;
    };
    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);

    function Kind$Parser$lambda$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $542 = self.idx;
                var $543 = self.code;
                var $544 = self.err;
                var $545 = Parser$Reply$error$($542, $543, $544);
                var $541 = $545;
                break;
            case 'Parser.Reply.value':
                var $546 = self.idx;
                var $547 = self.code;
                var $548 = self.val;
                var self = Kind$Parser$text$("(", $546, $547);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $550 = self.idx;
                        var $551 = self.code;
                        var $552 = self.err;
                        var $553 = Parser$Reply$error$($550, $551, $552);
                        var $549 = $553;
                        break;
                    case 'Parser.Reply.value':
                        var $554 = self.idx;
                        var $555 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$name1), $554, $555);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $557 = self.idx;
                                var $558 = self.code;
                                var $559 = self.err;
                                var $560 = Parser$Reply$error$($557, $558, $559);
                                var $556 = $560;
                                break;
                            case 'Parser.Reply.value':
                                var $561 = self.idx;
                                var $562 = self.code;
                                var $563 = self.val;
                                var self = Kind$Parser$term$($561, $562);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $565 = self.idx;
                                        var $566 = self.code;
                                        var $567 = self.err;
                                        var $568 = Parser$Reply$error$($565, $566, $567);
                                        var $564 = $568;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $569 = self.idx;
                                        var $570 = self.code;
                                        var $571 = self.val;
                                        var self = Kind$Parser$stop$($548, $569, $570);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $573 = self.idx;
                                                var $574 = self.code;
                                                var $575 = self.err;
                                                var $576 = Parser$Reply$error$($573, $574, $575);
                                                var $572 = $576;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $577 = self.idx;
                                                var $578 = self.code;
                                                var $579 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($563, $571);
                                                var $580 = Parser$Reply$value$($577, $578, Kind$Term$ori$($579, _expr$18));
                                                var $572 = $580;
                                                break;
                                        };
                                        var $564 = $572;
                                        break;
                                };
                                var $556 = $564;
                                break;
                        };
                        var $549 = $556;
                        break;
                };
                var $541 = $549;
                break;
        };
        return $541;
    };
    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);

    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $582 = self.idx;
                var $583 = self.code;
                var $584 = self.err;
                var $585 = Parser$Reply$error$($582, $583, $584);
                var $581 = $585;
                break;
            case 'Parser.Reply.value':
                var $586 = self.idx;
                var $587 = self.code;
                var $588 = self.val;
                var self = Kind$Parser$text$("<", $586, $587);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $590 = self.idx;
                        var $591 = self.code;
                        var $592 = self.err;
                        var $593 = Parser$Reply$error$($590, $591, $592);
                        var $589 = $593;
                        break;
                    case 'Parser.Reply.value':
                        var $594 = self.idx;
                        var $595 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(">"), Kind$Parser$item(Kind$Parser$name1), $594, $595);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $597 = self.idx;
                                var $598 = self.code;
                                var $599 = self.err;
                                var $600 = Parser$Reply$error$($597, $598, $599);
                                var $596 = $600;
                                break;
                            case 'Parser.Reply.value':
                                var $601 = self.idx;
                                var $602 = self.code;
                                var $603 = self.val;
                                var self = Kind$Parser$term$($601, $602);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $605 = self.idx;
                                        var $606 = self.code;
                                        var $607 = self.err;
                                        var $608 = Parser$Reply$error$($605, $606, $607);
                                        var $604 = $608;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $609 = self.idx;
                                        var $610 = self.code;
                                        var $611 = self.val;
                                        var self = Kind$Parser$stop$($588, $609, $610);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $613 = self.idx;
                                                var $614 = self.code;
                                                var $615 = self.err;
                                                var $616 = Parser$Reply$error$($613, $614, $615);
                                                var $612 = $616;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $617 = self.idx;
                                                var $618 = self.code;
                                                var $619 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($603, $611);
                                                var $620 = Parser$Reply$value$($617, $618, Kind$Term$ori$($619, _expr$18));
                                                var $612 = $620;
                                                break;
                                        };
                                        var $604 = $612;
                                        break;
                                };
                                var $596 = $604;
                                break;
                        };
                        var $589 = $596;
                        break;
                };
                var $581 = $589;
                break;
        };
        return $581;
    };
    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);

    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $622 = self.idx;
                var $623 = self.code;
                var $624 = self.err;
                var $625 = Parser$Reply$error$($622, $623, $624);
                var $621 = $625;
                break;
            case 'Parser.Reply.value':
                var $626 = self.idx;
                var $627 = self.code;
                var $628 = self.val;
                var self = Kind$Parser$text$("()", $626, $627);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $630 = self.idx;
                        var $631 = self.code;
                        var $632 = self.err;
                        var $633 = Parser$Reply$error$($630, $631, $632);
                        var $629 = $633;
                        break;
                    case 'Parser.Reply.value':
                        var $634 = self.idx;
                        var $635 = self.code;
                        var self = Kind$Parser$term$($634, $635);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $637 = self.idx;
                                var $638 = self.code;
                                var $639 = self.err;
                                var $640 = Parser$Reply$error$($637, $638, $639);
                                var $636 = $640;
                                break;
                            case 'Parser.Reply.value':
                                var $641 = self.idx;
                                var $642 = self.code;
                                var $643 = self.val;
                                var self = Kind$Parser$stop$($628, $641, $642);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $645 = self.idx;
                                        var $646 = self.code;
                                        var $647 = self.err;
                                        var $648 = Parser$Reply$error$($645, $646, $647);
                                        var $644 = $648;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $649 = self.idx;
                                        var $650 = self.code;
                                        var $651 = self.val;
                                        var _expr$15 = Kind$Term$lam$("", (_x$15 => {
                                            var $653 = $643;
                                            return $653;
                                        }));
                                        var $652 = Parser$Reply$value$($649, $650, Kind$Term$ori$($651, _expr$15));
                                        var $644 = $652;
                                        break;
                                };
                                var $636 = $644;
                                break;
                        };
                        var $629 = $636;
                        break;
                };
                var $621 = $629;
                break;
        };
        return $621;
    };
    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);

    function Kind$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $655 = self.idx;
                var $656 = self.code;
                var $657 = self.err;
                var $658 = Parser$Reply$error$($655, $656, $657);
                var $654 = $658;
                break;
            case 'Parser.Reply.value':
                var $659 = self.idx;
                var $660 = self.code;
                var $661 = self.val;
                var self = Kind$Parser$text$("(", $659, $660);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $663 = self.idx;
                        var $664 = self.code;
                        var $665 = self.err;
                        var $666 = Parser$Reply$error$($663, $664, $665);
                        var $662 = $666;
                        break;
                    case 'Parser.Reply.value':
                        var $667 = self.idx;
                        var $668 = self.code;
                        var self = Kind$Parser$term$($667, $668);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $670 = self.idx;
                                var $671 = self.code;
                                var $672 = self.err;
                                var $673 = Parser$Reply$error$($670, $671, $672);
                                var $669 = $673;
                                break;
                            case 'Parser.Reply.value':
                                var $674 = self.idx;
                                var $675 = self.code;
                                var $676 = self.val;
                                var self = Kind$Parser$text$(")", $674, $675);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $678 = self.idx;
                                        var $679 = self.code;
                                        var $680 = self.err;
                                        var $681 = Parser$Reply$error$($678, $679, $680);
                                        var $677 = $681;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $682 = self.idx;
                                        var $683 = self.code;
                                        var self = Kind$Parser$stop$($661, $682, $683);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $685 = self.idx;
                                                var $686 = self.code;
                                                var $687 = self.err;
                                                var $688 = Parser$Reply$error$($685, $686, $687);
                                                var $684 = $688;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $689 = self.idx;
                                                var $690 = self.code;
                                                var $691 = self.val;
                                                var $692 = Parser$Reply$value$($689, $690, Kind$Term$ori$($691, $676));
                                                var $684 = $692;
                                                break;
                                        };
                                        var $677 = $684;
                                        break;
                                };
                                var $669 = $677;
                                break;
                        };
                        var $662 = $669;
                        break;
                };
                var $654 = $662;
                break;
        };
        return $654;
    };
    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);

    function Kind$Term$ref$(_name$1) {
        var $693 = ({
            _: 'Kind.Term.ref',
            'name': _name$1
        });
        return $693;
    };
    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);

    function Kind$Term$app$(_func$1, _argm$2) {
        var $694 = ({
            _: 'Kind.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $694;
    };
    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);

    function Kind$Term$hol$(_path$1) {
        var $695 = ({
            _: 'Kind.Term.hol',
            'path': _path$1
        });
        return $695;
    };
    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);

    function Kind$Term$let$(_name$1, _expr$2, _body$3) {
        var $696 = ({
            _: 'Kind.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $696;
    };
    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);

    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $698 = self.idx;
                var $699 = self.code;
                var $700 = self.err;
                var $701 = Parser$Reply$error$($698, $699, $700);
                var $697 = $701;
                break;
            case 'Parser.Reply.value':
                var $702 = self.idx;
                var $703 = self.code;
                var $704 = self.val;
                var self = Kind$Parser$text$("let ", $702, $703);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $706 = self.idx;
                        var $707 = self.code;
                        var $708 = self.err;
                        var $709 = Parser$Reply$error$($706, $707, $708);
                        var $705 = $709;
                        break;
                    case 'Parser.Reply.value':
                        var $710 = self.idx;
                        var $711 = self.code;
                        var self = Kind$Parser$name1$($710, $711);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $713 = self.idx;
                                var $714 = self.code;
                                var $715 = self.err;
                                var $716 = Parser$Reply$error$($713, $714, $715);
                                var $712 = $716;
                                break;
                            case 'Parser.Reply.value':
                                var $717 = self.idx;
                                var $718 = self.code;
                                var $719 = self.val;
                                var self = Kind$Parser$text$("=", $717, $718);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $721 = self.idx;
                                        var $722 = self.code;
                                        var $723 = self.err;
                                        var $724 = Parser$Reply$error$($721, $722, $723);
                                        var $720 = $724;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $725 = self.idx;
                                        var $726 = self.code;
                                        var self = Kind$Parser$text$("for ", $725, $726);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $728 = self.idx;
                                                var $729 = self.code;
                                                var $730 = self.err;
                                                var $731 = Parser$Reply$error$($728, $729, $730);
                                                var $727 = $731;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $732 = self.idx;
                                                var $733 = self.code;
                                                var self = Kind$Parser$name1$($732, $733);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $735 = self.idx;
                                                        var $736 = self.code;
                                                        var $737 = self.err;
                                                        var $738 = Parser$Reply$error$($735, $736, $737);
                                                        var $734 = $738;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $739 = self.idx;
                                                        var $740 = self.code;
                                                        var $741 = self.val;
                                                        var self = Kind$Parser$text$(":", $739, $740);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $743 = self.idx;
                                                                var $744 = self.code;
                                                                var $745 = self.err;
                                                                var $746 = Parser$Reply$error$($743, $744, $745);
                                                                var $742 = $746;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $747 = self.idx;
                                                                var $748 = self.code;
                                                                var self = Kind$Parser$text$("U32", $747, $748);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $750 = self.idx;
                                                                        var $751 = self.code;
                                                                        var $752 = self.err;
                                                                        var $753 = Parser$Reply$error$($750, $751, $752);
                                                                        var $749 = $753;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $754 = self.idx;
                                                                        var $755 = self.code;
                                                                        var self = Kind$Parser$text$("from", $754, $755);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $757 = self.idx;
                                                                                var $758 = self.code;
                                                                                var $759 = self.err;
                                                                                var $760 = Parser$Reply$error$($757, $758, $759);
                                                                                var $756 = $760;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $761 = self.idx;
                                                                                var $762 = self.code;
                                                                                var self = Kind$Parser$term$($761, $762);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $764 = self.idx;
                                                                                        var $765 = self.code;
                                                                                        var $766 = self.err;
                                                                                        var $767 = Parser$Reply$error$($764, $765, $766);
                                                                                        var $763 = $767;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $768 = self.idx;
                                                                                        var $769 = self.code;
                                                                                        var $770 = self.val;
                                                                                        var self = Kind$Parser$text$("to", $768, $769);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $772 = self.idx;
                                                                                                var $773 = self.code;
                                                                                                var $774 = self.err;
                                                                                                var $775 = Parser$Reply$error$($772, $773, $774);
                                                                                                var $771 = $775;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $776 = self.idx;
                                                                                                var $777 = self.code;
                                                                                                var self = Kind$Parser$term$($776, $777);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $779 = self.idx;
                                                                                                        var $780 = self.code;
                                                                                                        var $781 = self.err;
                                                                                                        var $782 = Parser$Reply$error$($779, $780, $781);
                                                                                                        var $778 = $782;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $783 = self.idx;
                                                                                                        var $784 = self.code;
                                                                                                        var $785 = self.val;
                                                                                                        var self = Kind$Parser$text$(":", $783, $784);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $787 = self.idx;
                                                                                                                var $788 = self.code;
                                                                                                                var $789 = self.err;
                                                                                                                var $790 = Parser$Reply$error$($787, $788, $789);
                                                                                                                var $786 = $790;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $791 = self.idx;
                                                                                                                var $792 = self.code;
                                                                                                                var self = Kind$Parser$term$($791, $792);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $794 = self.idx;
                                                                                                                        var $795 = self.code;
                                                                                                                        var $796 = self.err;
                                                                                                                        var $797 = Parser$Reply$error$($794, $795, $796);
                                                                                                                        var $793 = $797;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $798 = self.idx;
                                                                                                                        var $799 = self.code;
                                                                                                                        var $800 = self.val;
                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $798, $799);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $802 = self.idx;
                                                                                                                                var $803 = self.code;
                                                                                                                                var $804 = self.err;
                                                                                                                                var $805 = Parser$Reply$error$($802, $803, $804);
                                                                                                                                var $801 = $805;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $806 = self.idx;
                                                                                                                                var $807 = self.code;
                                                                                                                                var self = Kind$Parser$term$($806, $807);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $809 = self.idx;
                                                                                                                                        var $810 = self.code;
                                                                                                                                        var $811 = self.err;
                                                                                                                                        var $812 = Parser$Reply$error$($809, $810, $811);
                                                                                                                                        var $808 = $812;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $813 = self.idx;
                                                                                                                                        var $814 = self.code;
                                                                                                                                        var $815 = self.val;
                                                                                                                                        var self = Kind$Parser$stop$($704, $813, $814);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $817 = self.idx;
                                                                                                                                                var $818 = self.code;
                                                                                                                                                var $819 = self.err;
                                                                                                                                                var $820 = Parser$Reply$error$($817, $818, $819);
                                                                                                                                                var $816 = $820;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $821 = self.idx;
                                                                                                                                                var $822 = self.code;
                                                                                                                                                var $823 = self.val;
                                                                                                                                                var _term$54 = Kind$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($719));
                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $770);
                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $785);
                                                                                                                                                var _lamb$59 = Kind$Term$lam$($741, (_e$59 => {
                                                                                                                                                    var $825 = Kind$Term$lam$($719, (_s$60 => {
                                                                                                                                                        var $826 = $800;
                                                                                                                                                        return $826;
                                                                                                                                                    }));
                                                                                                                                                    return $825;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Kind$Term$let$($719, _term$60, (_x$61 => {
                                                                                                                                                    var $827 = $815;
                                                                                                                                                    return $827;
                                                                                                                                                }));
                                                                                                                                                var $824 = Parser$Reply$value$($821, $822, Kind$Term$ori$($823, _term$61));
                                                                                                                                                var $816 = $824;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $808 = $816;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $801 = $808;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $793 = $801;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $786 = $793;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $778 = $786;
                                                                                                        break;
                                                                                                };
                                                                                                var $771 = $778;
                                                                                                break;
                                                                                        };
                                                                                        var $763 = $771;
                                                                                        break;
                                                                                };
                                                                                var $756 = $763;
                                                                                break;
                                                                        };
                                                                        var $749 = $756;
                                                                        break;
                                                                };
                                                                var $742 = $749;
                                                                break;
                                                        };
                                                        var $734 = $742;
                                                        break;
                                                };
                                                var $727 = $734;
                                                break;
                                        };
                                        var $720 = $727;
                                        break;
                                };
                                var $712 = $720;
                                break;
                        };
                        var $705 = $712;
                        break;
                };
                var $697 = $705;
                break;
        };
        return $697;
    };
    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);

    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $829 = self.idx;
                var $830 = self.code;
                var $831 = self.err;
                var $832 = Parser$Reply$error$($829, $830, $831);
                var $828 = $832;
                break;
            case 'Parser.Reply.value':
                var $833 = self.idx;
                var $834 = self.code;
                var $835 = self.val;
                var self = Kind$Parser$text$("for ", $833, $834);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $837 = self.idx;
                        var $838 = self.code;
                        var $839 = self.err;
                        var $840 = Parser$Reply$error$($837, $838, $839);
                        var $836 = $840;
                        break;
                    case 'Parser.Reply.value':
                        var $841 = self.idx;
                        var $842 = self.code;
                        var self = Kind$Parser$name1$($841, $842);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $844 = self.idx;
                                var $845 = self.code;
                                var $846 = self.err;
                                var $847 = Parser$Reply$error$($844, $845, $846);
                                var $843 = $847;
                                break;
                            case 'Parser.Reply.value':
                                var $848 = self.idx;
                                var $849 = self.code;
                                var $850 = self.val;
                                var self = Kind$Parser$text$(":", $848, $849);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $852 = self.idx;
                                        var $853 = self.code;
                                        var $854 = self.err;
                                        var $855 = Parser$Reply$error$($852, $853, $854);
                                        var $851 = $855;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $856 = self.idx;
                                        var $857 = self.code;
                                        var self = Kind$Parser$text$("U32", $856, $857);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $859 = self.idx;
                                                var $860 = self.code;
                                                var $861 = self.err;
                                                var $862 = Parser$Reply$error$($859, $860, $861);
                                                var $858 = $862;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $863 = self.idx;
                                                var $864 = self.code;
                                                var self = Kind$Parser$text$("from", $863, $864);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $866 = self.idx;
                                                        var $867 = self.code;
                                                        var $868 = self.err;
                                                        var $869 = Parser$Reply$error$($866, $867, $868);
                                                        var $865 = $869;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $870 = self.idx;
                                                        var $871 = self.code;
                                                        var self = Kind$Parser$term$($870, $871);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $873 = self.idx;
                                                                var $874 = self.code;
                                                                var $875 = self.err;
                                                                var $876 = Parser$Reply$error$($873, $874, $875);
                                                                var $872 = $876;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $877 = self.idx;
                                                                var $878 = self.code;
                                                                var $879 = self.val;
                                                                var self = Kind$Parser$text$("to", $877, $878);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $881 = self.idx;
                                                                        var $882 = self.code;
                                                                        var $883 = self.err;
                                                                        var $884 = Parser$Reply$error$($881, $882, $883);
                                                                        var $880 = $884;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $885 = self.idx;
                                                                        var $886 = self.code;
                                                                        var self = Kind$Parser$term$($885, $886);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $888 = self.idx;
                                                                                var $889 = self.code;
                                                                                var $890 = self.err;
                                                                                var $891 = Parser$Reply$error$($888, $889, $890);
                                                                                var $887 = $891;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $892 = self.idx;
                                                                                var $893 = self.code;
                                                                                var $894 = self.val;
                                                                                var self = Kind$Parser$text$("with ", $892, $893);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $896 = self.idx;
                                                                                        var $897 = self.code;
                                                                                        var $898 = self.err;
                                                                                        var $899 = Parser$Reply$error$($896, $897, $898);
                                                                                        var $895 = $899;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $900 = self.idx;
                                                                                        var $901 = self.code;
                                                                                        var self = Kind$Parser$name1$($900, $901);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $903 = self.idx;
                                                                                                var $904 = self.code;
                                                                                                var $905 = self.err;
                                                                                                var $906 = Parser$Reply$error$($903, $904, $905);
                                                                                                var $902 = $906;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $907 = self.idx;
                                                                                                var $908 = self.code;
                                                                                                var $909 = self.val;
                                                                                                var self = Kind$Parser$text$(":", $907, $908);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $911 = self.idx;
                                                                                                        var $912 = self.code;
                                                                                                        var $913 = self.err;
                                                                                                        var $914 = Parser$Reply$error$($911, $912, $913);
                                                                                                        var $910 = $914;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $915 = self.idx;
                                                                                                        var $916 = self.code;
                                                                                                        var self = Kind$Parser$term$($915, $916);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $918 = self.idx;
                                                                                                                var $919 = self.code;
                                                                                                                var $920 = self.err;
                                                                                                                var $921 = Parser$Reply$error$($918, $919, $920);
                                                                                                                var $917 = $921;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $922 = self.idx;
                                                                                                                var $923 = self.code;
                                                                                                                var $924 = self.val;
                                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $922, $923);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $926 = self.idx;
                                                                                                                        var $927 = self.code;
                                                                                                                        var $928 = self.err;
                                                                                                                        var $929 = Parser$Reply$error$($926, $927, $928);
                                                                                                                        var $925 = $929;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $930 = self.idx;
                                                                                                                        var $931 = self.code;
                                                                                                                        var self = Kind$Parser$term$($930, $931);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $933 = self.idx;
                                                                                                                                var $934 = self.code;
                                                                                                                                var $935 = self.err;
                                                                                                                                var $936 = Parser$Reply$error$($933, $934, $935);
                                                                                                                                var $932 = $936;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $937 = self.idx;
                                                                                                                                var $938 = self.code;
                                                                                                                                var $939 = self.val;
                                                                                                                                var self = Kind$Parser$stop$($835, $937, $938);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $941 = self.idx;
                                                                                                                                        var $942 = self.code;
                                                                                                                                        var $943 = self.err;
                                                                                                                                        var $944 = Parser$Reply$error$($941, $942, $943);
                                                                                                                                        var $940 = $944;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $945 = self.idx;
                                                                                                                                        var $946 = self.code;
                                                                                                                                        var $947 = self.val;
                                                                                                                                        var _term$51 = Kind$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($909));
                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $879);
                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $894);
                                                                                                                                        var _lamb$56 = Kind$Term$lam$($850, (_e$56 => {
                                                                                                                                            var $949 = Kind$Term$lam$($909, (_s$57 => {
                                                                                                                                                var $950 = $924;
                                                                                                                                                return $950;
                                                                                                                                            }));
                                                                                                                                            return $949;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Kind$Term$let$($909, _term$57, (_x$58 => {
                                                                                                                                            var $951 = $939;
                                                                                                                                            return $951;
                                                                                                                                        }));
                                                                                                                                        var $948 = Parser$Reply$value$($945, $946, Kind$Term$ori$($947, _term$58));
                                                                                                                                        var $940 = $948;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $932 = $940;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $925 = $932;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $917 = $925;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $910 = $917;
                                                                                                        break;
                                                                                                };
                                                                                                var $902 = $910;
                                                                                                break;
                                                                                        };
                                                                                        var $895 = $902;
                                                                                        break;
                                                                                };
                                                                                var $887 = $895;
                                                                                break;
                                                                        };
                                                                        var $880 = $887;
                                                                        break;
                                                                };
                                                                var $872 = $880;
                                                                break;
                                                        };
                                                        var $865 = $872;
                                                        break;
                                                };
                                                var $858 = $865;
                                                break;
                                        };
                                        var $851 = $858;
                                        break;
                                };
                                var $843 = $851;
                                break;
                        };
                        var $836 = $843;
                        break;
                };
                var $828 = $836;
                break;
        };
        return $828;
    };
    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);

    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $953 = self.idx;
                var $954 = self.code;
                var $955 = self.err;
                var $956 = Parser$Reply$error$($953, $954, $955);
                var $952 = $956;
                break;
            case 'Parser.Reply.value':
                var $957 = self.idx;
                var $958 = self.code;
                var $959 = self.val;
                var self = Kind$Parser$text$("let ", $957, $958);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $961 = self.idx;
                        var $962 = self.code;
                        var $963 = self.err;
                        var $964 = Parser$Reply$error$($961, $962, $963);
                        var $960 = $964;
                        break;
                    case 'Parser.Reply.value':
                        var $965 = self.idx;
                        var $966 = self.code;
                        var self = Kind$Parser$name1$($965, $966);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $968 = self.idx;
                                var $969 = self.code;
                                var $970 = self.err;
                                var $971 = Parser$Reply$error$($968, $969, $970);
                                var $967 = $971;
                                break;
                            case 'Parser.Reply.value':
                                var $972 = self.idx;
                                var $973 = self.code;
                                var $974 = self.val;
                                var self = Kind$Parser$text$("=", $972, $973);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $976 = self.idx;
                                        var $977 = self.code;
                                        var $978 = self.err;
                                        var $979 = Parser$Reply$error$($976, $977, $978);
                                        var $975 = $979;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $980 = self.idx;
                                        var $981 = self.code;
                                        var self = Kind$Parser$text$("for ", $980, $981);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $983 = self.idx;
                                                var $984 = self.code;
                                                var $985 = self.err;
                                                var $986 = Parser$Reply$error$($983, $984, $985);
                                                var $982 = $986;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $987 = self.idx;
                                                var $988 = self.code;
                                                var self = Kind$Parser$name1$($987, $988);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $990 = self.idx;
                                                        var $991 = self.code;
                                                        var $992 = self.err;
                                                        var $993 = Parser$Reply$error$($990, $991, $992);
                                                        var $989 = $993;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $994 = self.idx;
                                                        var $995 = self.code;
                                                        var $996 = self.val;
                                                        var self = Kind$Parser$text$("from", $994, $995);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $998 = self.idx;
                                                                var $999 = self.code;
                                                                var $1000 = self.err;
                                                                var $1001 = Parser$Reply$error$($998, $999, $1000);
                                                                var $997 = $1001;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1002 = self.idx;
                                                                var $1003 = self.code;
                                                                var self = Kind$Parser$term$($1002, $1003);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1005 = self.idx;
                                                                        var $1006 = self.code;
                                                                        var $1007 = self.err;
                                                                        var $1008 = Parser$Reply$error$($1005, $1006, $1007);
                                                                        var $1004 = $1008;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1009 = self.idx;
                                                                        var $1010 = self.code;
                                                                        var $1011 = self.val;
                                                                        var self = Kind$Parser$text$("to", $1009, $1010);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1013 = self.idx;
                                                                                var $1014 = self.code;
                                                                                var $1015 = self.err;
                                                                                var $1016 = Parser$Reply$error$($1013, $1014, $1015);
                                                                                var $1012 = $1016;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1017 = self.idx;
                                                                                var $1018 = self.code;
                                                                                var self = Kind$Parser$term$($1017, $1018);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1020 = self.idx;
                                                                                        var $1021 = self.code;
                                                                                        var $1022 = self.err;
                                                                                        var $1023 = Parser$Reply$error$($1020, $1021, $1022);
                                                                                        var $1019 = $1023;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1024 = self.idx;
                                                                                        var $1025 = self.code;
                                                                                        var $1026 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1024, $1025);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1028 = self.idx;
                                                                                                var $1029 = self.code;
                                                                                                var $1030 = self.err;
                                                                                                var $1031 = Parser$Reply$error$($1028, $1029, $1030);
                                                                                                var $1027 = $1031;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1032 = self.idx;
                                                                                                var $1033 = self.code;
                                                                                                var self = Kind$Parser$term$($1032, $1033);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1035 = self.idx;
                                                                                                        var $1036 = self.code;
                                                                                                        var $1037 = self.err;
                                                                                                        var $1038 = Parser$Reply$error$($1035, $1036, $1037);
                                                                                                        var $1034 = $1038;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1039 = self.idx;
                                                                                                        var $1040 = self.code;
                                                                                                        var $1041 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1039, $1040);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1043 = self.idx;
                                                                                                                var $1044 = self.code;
                                                                                                                var $1045 = self.err;
                                                                                                                var $1046 = Parser$Reply$error$($1043, $1044, $1045);
                                                                                                                var $1042 = $1046;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1047 = self.idx;
                                                                                                                var $1048 = self.code;
                                                                                                                var self = Kind$Parser$term$($1047, $1048);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1050 = self.idx;
                                                                                                                        var $1051 = self.code;
                                                                                                                        var $1052 = self.err;
                                                                                                                        var $1053 = Parser$Reply$error$($1050, $1051, $1052);
                                                                                                                        var $1049 = $1053;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1054 = self.idx;
                                                                                                                        var $1055 = self.code;
                                                                                                                        var $1056 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($959, $1054, $1055);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1058 = self.idx;
                                                                                                                                var $1059 = self.code;
                                                                                                                                var $1060 = self.err;
                                                                                                                                var $1061 = Parser$Reply$error$($1058, $1059, $1060);
                                                                                                                                var $1057 = $1061;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1062 = self.idx;
                                                                                                                                var $1063 = self.code;
                                                                                                                                var $1064 = self.val;
                                                                                                                                var _term$48 = Kind$Term$ref$("Nat.for");
                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($974));
                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $1011);
                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1026);
                                                                                                                                var _lamb$53 = Kind$Term$lam$($996, (_e$53 => {
                                                                                                                                    var $1066 = Kind$Term$lam$($974, (_s$54 => {
                                                                                                                                        var $1067 = $1041;
                                                                                                                                        return $1067;
                                                                                                                                    }));
                                                                                                                                    return $1066;
                                                                                                                                }));
                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);
                                                                                                                                var _term$55 = Kind$Term$let$($974, _term$54, (_x$55 => {
                                                                                                                                    var $1068 = $1056;
                                                                                                                                    return $1068;
                                                                                                                                }));
                                                                                                                                var $1065 = Parser$Reply$value$($1062, $1063, Kind$Term$ori$($1064, _term$55));
                                                                                                                                var $1057 = $1065;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1049 = $1057;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1042 = $1049;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1034 = $1042;
                                                                                                        break;
                                                                                                };
                                                                                                var $1027 = $1034;
                                                                                                break;
                                                                                        };
                                                                                        var $1019 = $1027;
                                                                                        break;
                                                                                };
                                                                                var $1012 = $1019;
                                                                                break;
                                                                        };
                                                                        var $1004 = $1012;
                                                                        break;
                                                                };
                                                                var $997 = $1004;
                                                                break;
                                                        };
                                                        var $989 = $997;
                                                        break;
                                                };
                                                var $982 = $989;
                                                break;
                                        };
                                        var $975 = $982;
                                        break;
                                };
                                var $967 = $975;
                                break;
                        };
                        var $960 = $967;
                        break;
                };
                var $952 = $960;
                break;
        };
        return $952;
    };
    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);

    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1070 = self.idx;
                var $1071 = self.code;
                var $1072 = self.err;
                var $1073 = Parser$Reply$error$($1070, $1071, $1072);
                var $1069 = $1073;
                break;
            case 'Parser.Reply.value':
                var $1074 = self.idx;
                var $1075 = self.code;
                var $1076 = self.val;
                var self = Kind$Parser$text$("for ", $1074, $1075);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1078 = self.idx;
                        var $1079 = self.code;
                        var $1080 = self.err;
                        var $1081 = Parser$Reply$error$($1078, $1079, $1080);
                        var $1077 = $1081;
                        break;
                    case 'Parser.Reply.value':
                        var $1082 = self.idx;
                        var $1083 = self.code;
                        var self = Kind$Parser$name1$($1082, $1083);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1085 = self.idx;
                                var $1086 = self.code;
                                var $1087 = self.err;
                                var $1088 = Parser$Reply$error$($1085, $1086, $1087);
                                var $1084 = $1088;
                                break;
                            case 'Parser.Reply.value':
                                var $1089 = self.idx;
                                var $1090 = self.code;
                                var $1091 = self.val;
                                var self = Kind$Parser$text$("from", $1089, $1090);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1093 = self.idx;
                                        var $1094 = self.code;
                                        var $1095 = self.err;
                                        var $1096 = Parser$Reply$error$($1093, $1094, $1095);
                                        var $1092 = $1096;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1097 = self.idx;
                                        var $1098 = self.code;
                                        var self = Kind$Parser$term$($1097, $1098);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1100 = self.idx;
                                                var $1101 = self.code;
                                                var $1102 = self.err;
                                                var $1103 = Parser$Reply$error$($1100, $1101, $1102);
                                                var $1099 = $1103;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1104 = self.idx;
                                                var $1105 = self.code;
                                                var $1106 = self.val;
                                                var self = Kind$Parser$text$("to", $1104, $1105);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1108 = self.idx;
                                                        var $1109 = self.code;
                                                        var $1110 = self.err;
                                                        var $1111 = Parser$Reply$error$($1108, $1109, $1110);
                                                        var $1107 = $1111;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1112 = self.idx;
                                                        var $1113 = self.code;
                                                        var self = Kind$Parser$term$($1112, $1113);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1115 = self.idx;
                                                                var $1116 = self.code;
                                                                var $1117 = self.err;
                                                                var $1118 = Parser$Reply$error$($1115, $1116, $1117);
                                                                var $1114 = $1118;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1119 = self.idx;
                                                                var $1120 = self.code;
                                                                var $1121 = self.val;
                                                                var self = Kind$Parser$text$("with ", $1119, $1120);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1123 = self.idx;
                                                                        var $1124 = self.code;
                                                                        var $1125 = self.err;
                                                                        var $1126 = Parser$Reply$error$($1123, $1124, $1125);
                                                                        var $1122 = $1126;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1127 = self.idx;
                                                                        var $1128 = self.code;
                                                                        var self = Kind$Parser$name1$($1127, $1128);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1130 = self.idx;
                                                                                var $1131 = self.code;
                                                                                var $1132 = self.err;
                                                                                var $1133 = Parser$Reply$error$($1130, $1131, $1132);
                                                                                var $1129 = $1133;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1134 = self.idx;
                                                                                var $1135 = self.code;
                                                                                var $1136 = self.val;
                                                                                var self = Kind$Parser$text$(":", $1134, $1135);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1138 = self.idx;
                                                                                        var $1139 = self.code;
                                                                                        var $1140 = self.err;
                                                                                        var $1141 = Parser$Reply$error$($1138, $1139, $1140);
                                                                                        var $1137 = $1141;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1142 = self.idx;
                                                                                        var $1143 = self.code;
                                                                                        var self = Kind$Parser$term$($1142, $1143);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1145 = self.idx;
                                                                                                var $1146 = self.code;
                                                                                                var $1147 = self.err;
                                                                                                var $1148 = Parser$Reply$error$($1145, $1146, $1147);
                                                                                                var $1144 = $1148;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1149 = self.idx;
                                                                                                var $1150 = self.code;
                                                                                                var $1151 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1149, $1150);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1153 = self.idx;
                                                                                                        var $1154 = self.code;
                                                                                                        var $1155 = self.err;
                                                                                                        var $1156 = Parser$Reply$error$($1153, $1154, $1155);
                                                                                                        var $1152 = $1156;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1157 = self.idx;
                                                                                                        var $1158 = self.code;
                                                                                                        var self = Kind$Parser$term$($1157, $1158);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1160 = self.idx;
                                                                                                                var $1161 = self.code;
                                                                                                                var $1162 = self.err;
                                                                                                                var $1163 = Parser$Reply$error$($1160, $1161, $1162);
                                                                                                                var $1159 = $1163;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1164 = self.idx;
                                                                                                                var $1165 = self.code;
                                                                                                                var $1166 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1076, $1164, $1165);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1168 = self.idx;
                                                                                                                        var $1169 = self.code;
                                                                                                                        var $1170 = self.err;
                                                                                                                        var $1171 = Parser$Reply$error$($1168, $1169, $1170);
                                                                                                                        var $1167 = $1171;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1172 = self.idx;
                                                                                                                        var $1173 = self.code;
                                                                                                                        var $1174 = self.val;
                                                                                                                        var _term$45 = Kind$Term$ref$("Nat.for");
                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1136));
                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1106);
                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1121);
                                                                                                                        var _lamb$50 = Kind$Term$lam$($1091, (_e$50 => {
                                                                                                                            var $1176 = Kind$Term$lam$($1136, (_s$51 => {
                                                                                                                                var $1177 = $1151;
                                                                                                                                return $1177;
                                                                                                                            }));
                                                                                                                            return $1176;
                                                                                                                        }));
                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Kind$Term$let$($1136, _term$51, (_x$52 => {
                                                                                                                            var $1178 = $1166;
                                                                                                                            return $1178;
                                                                                                                        }));
                                                                                                                        var $1175 = Parser$Reply$value$($1172, $1173, Kind$Term$ori$($1174, _term$52));
                                                                                                                        var $1167 = $1175;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1159 = $1167;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1152 = $1159;
                                                                                                        break;
                                                                                                };
                                                                                                var $1144 = $1152;
                                                                                                break;
                                                                                        };
                                                                                        var $1137 = $1144;
                                                                                        break;
                                                                                };
                                                                                var $1129 = $1137;
                                                                                break;
                                                                        };
                                                                        var $1122 = $1129;
                                                                        break;
                                                                };
                                                                var $1114 = $1122;
                                                                break;
                                                        };
                                                        var $1107 = $1114;
                                                        break;
                                                };
                                                var $1099 = $1107;
                                                break;
                                        };
                                        var $1092 = $1099;
                                        break;
                                };
                                var $1084 = $1092;
                                break;
                        };
                        var $1077 = $1084;
                        break;
                };
                var $1069 = $1077;
                break;
        };
        return $1069;
    };
    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);

    function Kind$Parser$letforin$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1180 = self.idx;
                var $1181 = self.code;
                var $1182 = self.err;
                var $1183 = Parser$Reply$error$($1180, $1181, $1182);
                var $1179 = $1183;
                break;
            case 'Parser.Reply.value':
                var $1184 = self.idx;
                var $1185 = self.code;
                var $1186 = self.val;
                var self = Kind$Parser$text$("let ", $1184, $1185);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1188 = self.idx;
                        var $1189 = self.code;
                        var $1190 = self.err;
                        var $1191 = Parser$Reply$error$($1188, $1189, $1190);
                        var $1187 = $1191;
                        break;
                    case 'Parser.Reply.value':
                        var $1192 = self.idx;
                        var $1193 = self.code;
                        var self = Kind$Parser$name1$($1192, $1193);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1195 = self.idx;
                                var $1196 = self.code;
                                var $1197 = self.err;
                                var $1198 = Parser$Reply$error$($1195, $1196, $1197);
                                var $1194 = $1198;
                                break;
                            case 'Parser.Reply.value':
                                var $1199 = self.idx;
                                var $1200 = self.code;
                                var $1201 = self.val;
                                var self = Kind$Parser$text$("=", $1199, $1200);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1203 = self.idx;
                                        var $1204 = self.code;
                                        var $1205 = self.err;
                                        var $1206 = Parser$Reply$error$($1203, $1204, $1205);
                                        var $1202 = $1206;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1207 = self.idx;
                                        var $1208 = self.code;
                                        var self = Kind$Parser$text$("for ", $1207, $1208);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1210 = self.idx;
                                                var $1211 = self.code;
                                                var $1212 = self.err;
                                                var $1213 = Parser$Reply$error$($1210, $1211, $1212);
                                                var $1209 = $1213;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1214 = self.idx;
                                                var $1215 = self.code;
                                                var self = Kind$Parser$name1$($1214, $1215);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1217 = self.idx;
                                                        var $1218 = self.code;
                                                        var $1219 = self.err;
                                                        var $1220 = Parser$Reply$error$($1217, $1218, $1219);
                                                        var $1216 = $1220;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1221 = self.idx;
                                                        var $1222 = self.code;
                                                        var $1223 = self.val;
                                                        var self = Kind$Parser$text$("in", $1221, $1222);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1225 = self.idx;
                                                                var $1226 = self.code;
                                                                var $1227 = self.err;
                                                                var $1228 = Parser$Reply$error$($1225, $1226, $1227);
                                                                var $1224 = $1228;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1229 = self.idx;
                                                                var $1230 = self.code;
                                                                var self = Kind$Parser$term$($1229, $1230);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1232 = self.idx;
                                                                        var $1233 = self.code;
                                                                        var $1234 = self.err;
                                                                        var $1235 = Parser$Reply$error$($1232, $1233, $1234);
                                                                        var $1231 = $1235;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1236 = self.idx;
                                                                        var $1237 = self.code;
                                                                        var $1238 = self.val;
                                                                        var self = Kind$Parser$text$(":", $1236, $1237);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1240 = self.idx;
                                                                                var $1241 = self.code;
                                                                                var $1242 = self.err;
                                                                                var $1243 = Parser$Reply$error$($1240, $1241, $1242);
                                                                                var $1239 = $1243;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1244 = self.idx;
                                                                                var $1245 = self.code;
                                                                                var self = Kind$Parser$term$($1244, $1245);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1247 = self.idx;
                                                                                        var $1248 = self.code;
                                                                                        var $1249 = self.err;
                                                                                        var $1250 = Parser$Reply$error$($1247, $1248, $1249);
                                                                                        var $1246 = $1250;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1251 = self.idx;
                                                                                        var $1252 = self.code;
                                                                                        var $1253 = self.val;
                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1251, $1252);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1255 = self.idx;
                                                                                                var $1256 = self.code;
                                                                                                var $1257 = self.err;
                                                                                                var $1258 = Parser$Reply$error$($1255, $1256, $1257);
                                                                                                var $1254 = $1258;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1259 = self.idx;
                                                                                                var $1260 = self.code;
                                                                                                var self = Kind$Parser$term$($1259, $1260);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1262 = self.idx;
                                                                                                        var $1263 = self.code;
                                                                                                        var $1264 = self.err;
                                                                                                        var $1265 = Parser$Reply$error$($1262, $1263, $1264);
                                                                                                        var $1261 = $1265;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1266 = self.idx;
                                                                                                        var $1267 = self.code;
                                                                                                        var $1268 = self.val;
                                                                                                        var self = Kind$Parser$stop$($1186, $1266, $1267);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1270 = self.idx;
                                                                                                                var $1271 = self.code;
                                                                                                                var $1272 = self.err;
                                                                                                                var $1273 = Parser$Reply$error$($1270, $1271, $1272);
                                                                                                                var $1269 = $1273;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1274 = self.idx;
                                                                                                                var $1275 = self.code;
                                                                                                                var $1276 = self.val;
                                                                                                                var _term$42 = Kind$Term$ref$("List.for");
                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $1238);
                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($1201));
                                                                                                                var _lamb$47 = Kind$Term$lam$($1223, (_i$47 => {
                                                                                                                    var $1278 = Kind$Term$lam$($1201, (_x$48 => {
                                                                                                                        var $1279 = $1253;
                                                                                                                        return $1279;
                                                                                                                    }));
                                                                                                                    return $1278;
                                                                                                                }));
                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Kind$Term$let$($1201, _term$48, (_x$49 => {
                                                                                                                    var $1280 = $1268;
                                                                                                                    return $1280;
                                                                                                                }));
                                                                                                                var $1277 = Parser$Reply$value$($1274, $1275, Kind$Term$ori$($1276, _term$49));
                                                                                                                var $1269 = $1277;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1261 = $1269;
                                                                                                        break;
                                                                                                };
                                                                                                var $1254 = $1261;
                                                                                                break;
                                                                                        };
                                                                                        var $1246 = $1254;
                                                                                        break;
                                                                                };
                                                                                var $1239 = $1246;
                                                                                break;
                                                                        };
                                                                        var $1231 = $1239;
                                                                        break;
                                                                };
                                                                var $1224 = $1231;
                                                                break;
                                                        };
                                                        var $1216 = $1224;
                                                        break;
                                                };
                                                var $1209 = $1216;
                                                break;
                                        };
                                        var $1202 = $1209;
                                        break;
                                };
                                var $1194 = $1202;
                                break;
                        };
                        var $1187 = $1194;
                        break;
                };
                var $1179 = $1187;
                break;
        };
        return $1179;
    };
    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);

    function Kind$Parser$letforin$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1282 = self.idx;
                var $1283 = self.code;
                var $1284 = self.err;
                var $1285 = Parser$Reply$error$($1282, $1283, $1284);
                var $1281 = $1285;
                break;
            case 'Parser.Reply.value':
                var $1286 = self.idx;
                var $1287 = self.code;
                var $1288 = self.val;
                var self = Kind$Parser$text$("for ", $1286, $1287);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1290 = self.idx;
                        var $1291 = self.code;
                        var $1292 = self.err;
                        var $1293 = Parser$Reply$error$($1290, $1291, $1292);
                        var $1289 = $1293;
                        break;
                    case 'Parser.Reply.value':
                        var $1294 = self.idx;
                        var $1295 = self.code;
                        var self = Kind$Parser$name1$($1294, $1295);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1297 = self.idx;
                                var $1298 = self.code;
                                var $1299 = self.err;
                                var $1300 = Parser$Reply$error$($1297, $1298, $1299);
                                var $1296 = $1300;
                                break;
                            case 'Parser.Reply.value':
                                var $1301 = self.idx;
                                var $1302 = self.code;
                                var $1303 = self.val;
                                var self = Kind$Parser$text$("in", $1301, $1302);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1305 = self.idx;
                                        var $1306 = self.code;
                                        var $1307 = self.err;
                                        var $1308 = Parser$Reply$error$($1305, $1306, $1307);
                                        var $1304 = $1308;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1309 = self.idx;
                                        var $1310 = self.code;
                                        var self = Kind$Parser$term$($1309, $1310);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1312 = self.idx;
                                                var $1313 = self.code;
                                                var $1314 = self.err;
                                                var $1315 = Parser$Reply$error$($1312, $1313, $1314);
                                                var $1311 = $1315;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1316 = self.idx;
                                                var $1317 = self.code;
                                                var $1318 = self.val;
                                                var self = Kind$Parser$text$("with ", $1316, $1317);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1320 = self.idx;
                                                        var $1321 = self.code;
                                                        var $1322 = self.err;
                                                        var $1323 = Parser$Reply$error$($1320, $1321, $1322);
                                                        var $1319 = $1323;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1324 = self.idx;
                                                        var $1325 = self.code;
                                                        var self = Kind$Parser$name1$($1324, $1325);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1327 = self.idx;
                                                                var $1328 = self.code;
                                                                var $1329 = self.err;
                                                                var $1330 = Parser$Reply$error$($1327, $1328, $1329);
                                                                var $1326 = $1330;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1331 = self.idx;
                                                                var $1332 = self.code;
                                                                var $1333 = self.val;
                                                                var self = Kind$Parser$text$(":", $1331, $1332);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1335 = self.idx;
                                                                        var $1336 = self.code;
                                                                        var $1337 = self.err;
                                                                        var $1338 = Parser$Reply$error$($1335, $1336, $1337);
                                                                        var $1334 = $1338;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1339 = self.idx;
                                                                        var $1340 = self.code;
                                                                        var self = Kind$Parser$term$($1339, $1340);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1342 = self.idx;
                                                                                var $1343 = self.code;
                                                                                var $1344 = self.err;
                                                                                var $1345 = Parser$Reply$error$($1342, $1343, $1344);
                                                                                var $1341 = $1345;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1346 = self.idx;
                                                                                var $1347 = self.code;
                                                                                var $1348 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1346, $1347);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1350 = self.idx;
                                                                                        var $1351 = self.code;
                                                                                        var $1352 = self.err;
                                                                                        var $1353 = Parser$Reply$error$($1350, $1351, $1352);
                                                                                        var $1349 = $1353;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1354 = self.idx;
                                                                                        var $1355 = self.code;
                                                                                        var self = Kind$Parser$term$($1354, $1355);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1357 = self.idx;
                                                                                                var $1358 = self.code;
                                                                                                var $1359 = self.err;
                                                                                                var $1360 = Parser$Reply$error$($1357, $1358, $1359);
                                                                                                var $1356 = $1360;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1361 = self.idx;
                                                                                                var $1362 = self.code;
                                                                                                var $1363 = self.val;
                                                                                                var self = Kind$Parser$stop$($1288, $1361, $1362);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1365 = self.idx;
                                                                                                        var $1366 = self.code;
                                                                                                        var $1367 = self.err;
                                                                                                        var $1368 = Parser$Reply$error$($1365, $1366, $1367);
                                                                                                        var $1364 = $1368;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1369 = self.idx;
                                                                                                        var $1370 = self.code;
                                                                                                        var $1371 = self.val;
                                                                                                        var _term$39 = Kind$Term$ref$("List.for");
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $1318);
                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($1333));
                                                                                                        var _lamb$44 = Kind$Term$lam$($1303, (_i$44 => {
                                                                                                            var $1373 = Kind$Term$lam$($1333, (_x$45 => {
                                                                                                                var $1374 = $1348;
                                                                                                                return $1374;
                                                                                                            }));
                                                                                                            return $1373;
                                                                                                        }));
                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Kind$Term$let$($1333, _term$45, (_x$46 => {
                                                                                                            var $1375 = $1363;
                                                                                                            return $1375;
                                                                                                        }));
                                                                                                        var $1372 = Parser$Reply$value$($1369, $1370, Kind$Term$ori$($1371, _term$46));
                                                                                                        var $1364 = $1372;
                                                                                                        break;
                                                                                                };
                                                                                                var $1356 = $1364;
                                                                                                break;
                                                                                        };
                                                                                        var $1349 = $1356;
                                                                                        break;
                                                                                };
                                                                                var $1341 = $1349;
                                                                                break;
                                                                        };
                                                                        var $1334 = $1341;
                                                                        break;
                                                                };
                                                                var $1326 = $1334;
                                                                break;
                                                        };
                                                        var $1319 = $1326;
                                                        break;
                                                };
                                                var $1311 = $1319;
                                                break;
                                        };
                                        var $1304 = $1311;
                                        break;
                                };
                                var $1296 = $1304;
                                break;
                        };
                        var $1289 = $1296;
                        break;
                };
                var $1281 = $1289;
                break;
        };
        return $1281;
    };
    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);

    function Kind$Parser$letwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1377 = self.idx;
                var $1378 = self.code;
                var $1379 = self.err;
                var $1380 = Parser$Reply$error$($1377, $1378, $1379);
                var $1376 = $1380;
                break;
            case 'Parser.Reply.value':
                var $1381 = self.idx;
                var $1382 = self.code;
                var $1383 = self.val;
                var self = Kind$Parser$text$("let ", $1381, $1382);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1385 = self.idx;
                        var $1386 = self.code;
                        var $1387 = self.err;
                        var $1388 = Parser$Reply$error$($1385, $1386, $1387);
                        var $1384 = $1388;
                        break;
                    case 'Parser.Reply.value':
                        var $1389 = self.idx;
                        var $1390 = self.code;
                        var self = Kind$Parser$name1$($1389, $1390);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1392 = self.idx;
                                var $1393 = self.code;
                                var $1394 = self.err;
                                var $1395 = Parser$Reply$error$($1392, $1393, $1394);
                                var $1391 = $1395;
                                break;
                            case 'Parser.Reply.value':
                                var $1396 = self.idx;
                                var $1397 = self.code;
                                var $1398 = self.val;
                                var self = Kind$Parser$text$("=", $1396, $1397);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1400 = self.idx;
                                        var $1401 = self.code;
                                        var $1402 = self.err;
                                        var $1403 = Parser$Reply$error$($1400, $1401, $1402);
                                        var $1399 = $1403;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1404 = self.idx;
                                        var $1405 = self.code;
                                        var self = Kind$Parser$text$("while ", $1404, $1405);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1407 = self.idx;
                                                var $1408 = self.code;
                                                var $1409 = self.err;
                                                var $1410 = Parser$Reply$error$($1407, $1408, $1409);
                                                var $1406 = $1410;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1411 = self.idx;
                                                var $1412 = self.code;
                                                var self = Kind$Parser$term$($1411, $1412);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1414 = self.idx;
                                                        var $1415 = self.code;
                                                        var $1416 = self.err;
                                                        var $1417 = Parser$Reply$error$($1414, $1415, $1416);
                                                        var $1413 = $1417;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1418 = self.idx;
                                                        var $1419 = self.code;
                                                        var $1420 = self.val;
                                                        var self = Kind$Parser$text$(":", $1418, $1419);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1422 = self.idx;
                                                                var $1423 = self.code;
                                                                var $1424 = self.err;
                                                                var $1425 = Parser$Reply$error$($1422, $1423, $1424);
                                                                var $1421 = $1425;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1426 = self.idx;
                                                                var $1427 = self.code;
                                                                var self = Kind$Parser$term$($1426, $1427);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1429 = self.idx;
                                                                        var $1430 = self.code;
                                                                        var $1431 = self.err;
                                                                        var $1432 = Parser$Reply$error$($1429, $1430, $1431);
                                                                        var $1428 = $1432;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1433 = self.idx;
                                                                        var $1434 = self.code;
                                                                        var $1435 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1433, $1434);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1437 = self.idx;
                                                                                var $1438 = self.code;
                                                                                var $1439 = self.err;
                                                                                var $1440 = Parser$Reply$error$($1437, $1438, $1439);
                                                                                var $1436 = $1440;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1441 = self.idx;
                                                                                var $1442 = self.code;
                                                                                var self = Kind$Parser$term$($1441, $1442);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1444 = self.idx;
                                                                                        var $1445 = self.code;
                                                                                        var $1446 = self.err;
                                                                                        var $1447 = Parser$Reply$error$($1444, $1445, $1446);
                                                                                        var $1443 = $1447;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1448 = self.idx;
                                                                                        var $1449 = self.code;
                                                                                        var $1450 = self.val;
                                                                                        var self = Kind$Parser$stop$($1383, $1448, $1449);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1452 = self.idx;
                                                                                                var $1453 = self.code;
                                                                                                var $1454 = self.err;
                                                                                                var $1455 = Parser$Reply$error$($1452, $1453, $1454);
                                                                                                var $1451 = $1455;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1456 = self.idx;
                                                                                                var $1457 = self.code;
                                                                                                var $1458 = self.val;
                                                                                                var _term$36 = Kind$Term$ref$("Function.while");
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($1398));
                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($1398, (_s$39 => {
                                                                                                    var $1460 = $1420;
                                                                                                    return $1460;
                                                                                                })));
                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($1398, (_s$40 => {
                                                                                                    var $1461 = $1435;
                                                                                                    return $1461;
                                                                                                })));
                                                                                                var _term$41 = Kind$Term$let$($1398, _term$40, (_x$41 => {
                                                                                                    var $1462 = $1450;
                                                                                                    return $1462;
                                                                                                }));
                                                                                                var $1459 = Parser$Reply$value$($1456, $1457, Kind$Term$ori$($1458, _term$41));
                                                                                                var $1451 = $1459;
                                                                                                break;
                                                                                        };
                                                                                        var $1443 = $1451;
                                                                                        break;
                                                                                };
                                                                                var $1436 = $1443;
                                                                                break;
                                                                        };
                                                                        var $1428 = $1436;
                                                                        break;
                                                                };
                                                                var $1421 = $1428;
                                                                break;
                                                        };
                                                        var $1413 = $1421;
                                                        break;
                                                };
                                                var $1406 = $1413;
                                                break;
                                        };
                                        var $1399 = $1406;
                                        break;
                                };
                                var $1391 = $1399;
                                break;
                        };
                        var $1384 = $1391;
                        break;
                };
                var $1376 = $1384;
                break;
        };
        return $1376;
    };
    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);

    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1464 = self.idx;
                var $1465 = self.code;
                var $1466 = self.err;
                var $1467 = Parser$Reply$error$($1464, $1465, $1466);
                var $1463 = $1467;
                break;
            case 'Parser.Reply.value':
                var $1468 = self.idx;
                var $1469 = self.code;
                var $1470 = self.val;
                var self = Kind$Parser$text$("while ", $1468, $1469);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1472 = self.idx;
                        var $1473 = self.code;
                        var $1474 = self.err;
                        var $1475 = Parser$Reply$error$($1472, $1473, $1474);
                        var $1471 = $1475;
                        break;
                    case 'Parser.Reply.value':
                        var $1476 = self.idx;
                        var $1477 = self.code;
                        var self = Kind$Parser$term$($1476, $1477);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1479 = self.idx;
                                var $1480 = self.code;
                                var $1481 = self.err;
                                var $1482 = Parser$Reply$error$($1479, $1480, $1481);
                                var $1478 = $1482;
                                break;
                            case 'Parser.Reply.value':
                                var $1483 = self.idx;
                                var $1484 = self.code;
                                var $1485 = self.val;
                                var self = Kind$Parser$text$("with ", $1483, $1484);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1487 = self.idx;
                                        var $1488 = self.code;
                                        var $1489 = self.err;
                                        var $1490 = Parser$Reply$error$($1487, $1488, $1489);
                                        var $1486 = $1490;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1491 = self.idx;
                                        var $1492 = self.code;
                                        var self = Kind$Parser$name1$($1491, $1492);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1494 = self.idx;
                                                var $1495 = self.code;
                                                var $1496 = self.err;
                                                var $1497 = Parser$Reply$error$($1494, $1495, $1496);
                                                var $1493 = $1497;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1498 = self.idx;
                                                var $1499 = self.code;
                                                var $1500 = self.val;
                                                var self = Kind$Parser$text$(":", $1498, $1499);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1502 = self.idx;
                                                        var $1503 = self.code;
                                                        var $1504 = self.err;
                                                        var $1505 = Parser$Reply$error$($1502, $1503, $1504);
                                                        var $1501 = $1505;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1506 = self.idx;
                                                        var $1507 = self.code;
                                                        var self = Kind$Parser$term$($1506, $1507);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1509 = self.idx;
                                                                var $1510 = self.code;
                                                                var $1511 = self.err;
                                                                var $1512 = Parser$Reply$error$($1509, $1510, $1511);
                                                                var $1508 = $1512;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1513 = self.idx;
                                                                var $1514 = self.code;
                                                                var $1515 = self.val;
                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1513, $1514);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1517 = self.idx;
                                                                        var $1518 = self.code;
                                                                        var $1519 = self.err;
                                                                        var $1520 = Parser$Reply$error$($1517, $1518, $1519);
                                                                        var $1516 = $1520;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1521 = self.idx;
                                                                        var $1522 = self.code;
                                                                        var self = Kind$Parser$term$($1521, $1522);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1524 = self.idx;
                                                                                var $1525 = self.code;
                                                                                var $1526 = self.err;
                                                                                var $1527 = Parser$Reply$error$($1524, $1525, $1526);
                                                                                var $1523 = $1527;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1528 = self.idx;
                                                                                var $1529 = self.code;
                                                                                var $1530 = self.val;
                                                                                var self = Kind$Parser$stop$($1470, $1528, $1529);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1532 = self.idx;
                                                                                        var $1533 = self.code;
                                                                                        var $1534 = self.err;
                                                                                        var $1535 = Parser$Reply$error$($1532, $1533, $1534);
                                                                                        var $1531 = $1535;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1536 = self.idx;
                                                                                        var $1537 = self.code;
                                                                                        var $1538 = self.val;
                                                                                        var _term$33 = Kind$Term$ref$("Function.while");
                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($1500));
                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($1500, (_s$36 => {
                                                                                            var $1540 = $1485;
                                                                                            return $1540;
                                                                                        })));
                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($1500, (_s$37 => {
                                                                                            var $1541 = $1515;
                                                                                            return $1541;
                                                                                        })));
                                                                                        var _term$38 = Kind$Term$let$($1500, _term$37, (_x$38 => {
                                                                                            var $1542 = $1530;
                                                                                            return $1542;
                                                                                        }));
                                                                                        var $1539 = Parser$Reply$value$($1536, $1537, Kind$Term$ori$($1538, _term$38));
                                                                                        var $1531 = $1539;
                                                                                        break;
                                                                                };
                                                                                var $1523 = $1531;
                                                                                break;
                                                                        };
                                                                        var $1516 = $1523;
                                                                        break;
                                                                };
                                                                var $1508 = $1516;
                                                                break;
                                                        };
                                                        var $1501 = $1508;
                                                        break;
                                                };
                                                var $1493 = $1501;
                                                break;
                                        };
                                        var $1486 = $1493;
                                        break;
                                };
                                var $1478 = $1486;
                                break;
                        };
                        var $1471 = $1478;
                        break;
                };
                var $1463 = $1471;
                break;
        };
        return $1463;
    };
    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);

    function Kind$Parser$let$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1544 = self.idx;
                var $1545 = self.code;
                var $1546 = self.err;
                var $1547 = Parser$Reply$error$($1544, $1545, $1546);
                var $1543 = $1547;
                break;
            case 'Parser.Reply.value':
                var $1548 = self.idx;
                var $1549 = self.code;
                var $1550 = self.val;
                var self = Kind$Parser$text$("let ", $1548, $1549);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1552 = self.idx;
                        var $1553 = self.code;
                        var $1554 = self.err;
                        var $1555 = Parser$Reply$error$($1552, $1553, $1554);
                        var $1551 = $1555;
                        break;
                    case 'Parser.Reply.value':
                        var $1556 = self.idx;
                        var $1557 = self.code;
                        var self = Kind$Parser$name$($1556, $1557);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1559 = self.idx;
                                var $1560 = self.code;
                                var $1561 = self.err;
                                var $1562 = Parser$Reply$error$($1559, $1560, $1561);
                                var $1558 = $1562;
                                break;
                            case 'Parser.Reply.value':
                                var $1563 = self.idx;
                                var $1564 = self.code;
                                var $1565 = self.val;
                                var self = Kind$Parser$text$("=", $1563, $1564);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1567 = self.idx;
                                        var $1568 = self.code;
                                        var $1569 = self.err;
                                        var $1570 = Parser$Reply$error$($1567, $1568, $1569);
                                        var $1566 = $1570;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1571 = self.idx;
                                        var $1572 = self.code;
                                        var self = Kind$Parser$term$($1571, $1572);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1574 = self.idx;
                                                var $1575 = self.code;
                                                var $1576 = self.err;
                                                var $1577 = Parser$Reply$error$($1574, $1575, $1576);
                                                var $1573 = $1577;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1578 = self.idx;
                                                var $1579 = self.code;
                                                var $1580 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1578, $1579);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1582 = self.idx;
                                                        var $1583 = self.code;
                                                        var $1584 = self.err;
                                                        var $1585 = Parser$Reply$error$($1582, $1583, $1584);
                                                        var $1581 = $1585;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1586 = self.idx;
                                                        var $1587 = self.code;
                                                        var self = Kind$Parser$term$($1586, $1587);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1589 = self.idx;
                                                                var $1590 = self.code;
                                                                var $1591 = self.err;
                                                                var $1592 = Parser$Reply$error$($1589, $1590, $1591);
                                                                var $1588 = $1592;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1593 = self.idx;
                                                                var $1594 = self.code;
                                                                var $1595 = self.val;
                                                                var self = Kind$Parser$stop$($1550, $1593, $1594);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1597 = self.idx;
                                                                        var $1598 = self.code;
                                                                        var $1599 = self.err;
                                                                        var $1600 = Parser$Reply$error$($1597, $1598, $1599);
                                                                        var $1596 = $1600;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1601 = self.idx;
                                                                        var $1602 = self.code;
                                                                        var $1603 = self.val;
                                                                        var $1604 = Parser$Reply$value$($1601, $1602, Kind$Term$ori$($1603, Kind$Term$let$($1565, $1580, (_x$27 => {
                                                                            var $1605 = $1595;
                                                                            return $1605;
                                                                        }))));
                                                                        var $1596 = $1604;
                                                                        break;
                                                                };
                                                                var $1588 = $1596;
                                                                break;
                                                        };
                                                        var $1581 = $1588;
                                                        break;
                                                };
                                                var $1573 = $1581;
                                                break;
                                        };
                                        var $1566 = $1573;
                                        break;
                                };
                                var $1558 = $1566;
                                break;
                        };
                        var $1551 = $1558;
                        break;
                };
                var $1543 = $1551;
                break;
        };
        return $1543;
    };
    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);

    function Kind$Parser$let$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1607 = self.idx;
                var $1608 = self.code;
                var $1609 = self.err;
                var $1610 = Parser$Reply$error$($1607, $1608, $1609);
                var $1606 = $1610;
                break;
            case 'Parser.Reply.value':
                var $1611 = self.idx;
                var $1612 = self.code;
                var $1613 = self.val;
                var self = Kind$Parser$name$($1611, $1612);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1615 = self.idx;
                        var $1616 = self.code;
                        var $1617 = self.err;
                        var $1618 = Parser$Reply$error$($1615, $1616, $1617);
                        var $1614 = $1618;
                        break;
                    case 'Parser.Reply.value':
                        var $1619 = self.idx;
                        var $1620 = self.code;
                        var $1621 = self.val;
                        var self = Kind$Parser$text$("= ", $1619, $1620);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1623 = self.idx;
                                var $1624 = self.code;
                                var $1625 = self.err;
                                var $1626 = Parser$Reply$error$($1623, $1624, $1625);
                                var $1622 = $1626;
                                break;
                            case 'Parser.Reply.value':
                                var $1627 = self.idx;
                                var $1628 = self.code;
                                var self = Kind$Parser$term$($1627, $1628);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1630 = self.idx;
                                        var $1631 = self.code;
                                        var $1632 = self.err;
                                        var $1633 = Parser$Reply$error$($1630, $1631, $1632);
                                        var $1629 = $1633;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1634 = self.idx;
                                        var $1635 = self.code;
                                        var $1636 = self.val;
                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1634, $1635);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1638 = self.idx;
                                                var $1639 = self.code;
                                                var $1640 = self.err;
                                                var $1641 = Parser$Reply$error$($1638, $1639, $1640);
                                                var $1637 = $1641;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1642 = self.idx;
                                                var $1643 = self.code;
                                                var self = Kind$Parser$term$($1642, $1643);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1645 = self.idx;
                                                        var $1646 = self.code;
                                                        var $1647 = self.err;
                                                        var $1648 = Parser$Reply$error$($1645, $1646, $1647);
                                                        var $1644 = $1648;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1649 = self.idx;
                                                        var $1650 = self.code;
                                                        var $1651 = self.val;
                                                        var self = Kind$Parser$stop$($1613, $1649, $1650);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1653 = self.idx;
                                                                var $1654 = self.code;
                                                                var $1655 = self.err;
                                                                var $1656 = Parser$Reply$error$($1653, $1654, $1655);
                                                                var $1652 = $1656;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1657 = self.idx;
                                                                var $1658 = self.code;
                                                                var $1659 = self.val;
                                                                var $1660 = Parser$Reply$value$($1657, $1658, Kind$Term$ori$($1659, Kind$Term$let$($1621, $1636, (_x$24 => {
                                                                    var $1661 = $1651;
                                                                    return $1661;
                                                                }))));
                                                                var $1652 = $1660;
                                                                break;
                                                        };
                                                        var $1644 = $1652;
                                                        break;
                                                };
                                                var $1637 = $1644;
                                                break;
                                        };
                                        var $1629 = $1637;
                                        break;
                                };
                                var $1622 = $1629;
                                break;
                        };
                        var $1614 = $1622;
                        break;
                };
                var $1606 = $1614;
                break;
        };
        return $1606;
    };
    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);

    function Kind$Parser$getwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1663 = self.idx;
                var $1664 = self.code;
                var $1665 = self.err;
                var $1666 = Parser$Reply$error$($1663, $1664, $1665);
                var $1662 = $1666;
                break;
            case 'Parser.Reply.value':
                var $1667 = self.idx;
                var $1668 = self.code;
                var $1669 = self.val;
                var self = Parser$maybe$(Kind$Parser$text("let "), $1667, $1668);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1671 = self.idx;
                        var $1672 = self.code;
                        var $1673 = self.err;
                        var $1674 = Parser$Reply$error$($1671, $1672, $1673);
                        var $1670 = $1674;
                        break;
                    case 'Parser.Reply.value':
                        var $1675 = self.idx;
                        var $1676 = self.code;
                        var self = Kind$Parser$text$("{", $1675, $1676);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1678 = self.idx;
                                var $1679 = self.code;
                                var $1680 = self.err;
                                var $1681 = Parser$Reply$error$($1678, $1679, $1680);
                                var $1677 = $1681;
                                break;
                            case 'Parser.Reply.value':
                                var $1682 = self.idx;
                                var $1683 = self.code;
                                var self = Kind$Parser$name$($1682, $1683);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1685 = self.idx;
                                        var $1686 = self.code;
                                        var $1687 = self.err;
                                        var $1688 = Parser$Reply$error$($1685, $1686, $1687);
                                        var $1684 = $1688;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1689 = self.idx;
                                        var $1690 = self.code;
                                        var $1691 = self.val;
                                        var self = Kind$Parser$text$(",", $1689, $1690);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1693 = self.idx;
                                                var $1694 = self.code;
                                                var $1695 = self.err;
                                                var $1696 = Parser$Reply$error$($1693, $1694, $1695);
                                                var $1692 = $1696;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1697 = self.idx;
                                                var $1698 = self.code;
                                                var self = Kind$Parser$name$($1697, $1698);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1700 = self.idx;
                                                        var $1701 = self.code;
                                                        var $1702 = self.err;
                                                        var $1703 = Parser$Reply$error$($1700, $1701, $1702);
                                                        var $1699 = $1703;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1704 = self.idx;
                                                        var $1705 = self.code;
                                                        var $1706 = self.val;
                                                        var self = Kind$Parser$text$("}", $1704, $1705);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1708 = self.idx;
                                                                var $1709 = self.code;
                                                                var $1710 = self.err;
                                                                var $1711 = Parser$Reply$error$($1708, $1709, $1710);
                                                                var $1707 = $1711;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1712 = self.idx;
                                                                var $1713 = self.code;
                                                                var self = Kind$Parser$text$("=", $1712, $1713);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1715 = self.idx;
                                                                        var $1716 = self.code;
                                                                        var $1717 = self.err;
                                                                        var $1718 = Parser$Reply$error$($1715, $1716, $1717);
                                                                        var $1714 = $1718;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1719 = self.idx;
                                                                        var $1720 = self.code;
                                                                        var self = Kind$Parser$text$("while ", $1719, $1720);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1722 = self.idx;
                                                                                var $1723 = self.code;
                                                                                var $1724 = self.err;
                                                                                var $1725 = Parser$Reply$error$($1722, $1723, $1724);
                                                                                var $1721 = $1725;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1726 = self.idx;
                                                                                var $1727 = self.code;
                                                                                var self = Kind$Parser$term$($1726, $1727);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1729 = self.idx;
                                                                                        var $1730 = self.code;
                                                                                        var $1731 = self.err;
                                                                                        var $1732 = Parser$Reply$error$($1729, $1730, $1731);
                                                                                        var $1728 = $1732;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1733 = self.idx;
                                                                                        var $1734 = self.code;
                                                                                        var $1735 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1733, $1734);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1737 = self.idx;
                                                                                                var $1738 = self.code;
                                                                                                var $1739 = self.err;
                                                                                                var $1740 = Parser$Reply$error$($1737, $1738, $1739);
                                                                                                var $1736 = $1740;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1741 = self.idx;
                                                                                                var $1742 = self.code;
                                                                                                var self = Kind$Parser$term$($1741, $1742);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1744 = self.idx;
                                                                                                        var $1745 = self.code;
                                                                                                        var $1746 = self.err;
                                                                                                        var $1747 = Parser$Reply$error$($1744, $1745, $1746);
                                                                                                        var $1743 = $1747;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1748 = self.idx;
                                                                                                        var $1749 = self.code;
                                                                                                        var $1750 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1748, $1749);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1752 = self.idx;
                                                                                                                var $1753 = self.code;
                                                                                                                var $1754 = self.err;
                                                                                                                var $1755 = Parser$Reply$error$($1752, $1753, $1754);
                                                                                                                var $1751 = $1755;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1756 = self.idx;
                                                                                                                var $1757 = self.code;
                                                                                                                var self = Kind$Parser$term$($1756, $1757);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1759 = self.idx;
                                                                                                                        var $1760 = self.code;
                                                                                                                        var $1761 = self.err;
                                                                                                                        var $1762 = Parser$Reply$error$($1759, $1760, $1761);
                                                                                                                        var $1758 = $1762;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1763 = self.idx;
                                                                                                                        var $1764 = self.code;
                                                                                                                        var $1765 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($1669, $1763, $1764);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1767 = self.idx;
                                                                                                                                var $1768 = self.code;
                                                                                                                                var $1769 = self.err;
                                                                                                                                var $1770 = Parser$Reply$error$($1767, $1768, $1769);
                                                                                                                                var $1766 = $1770;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1771 = self.idx;
                                                                                                                                var $1772 = self.code;
                                                                                                                                var $1773 = self.val;
                                                                                                                                var _moti$48 = Kind$Term$lam$("x", (_x$48 => {
                                                                                                                                    var $1775 = Kind$Term$hol$(Bits$e);
                                                                                                                                    return $1775;
                                                                                                                                }));
                                                                                                                                var _term$49 = Kind$Term$ref$("Function.while");
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$51 = Kind$Term$ref$("Pair.new");
                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($1691));
                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($1706));
                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);
                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$("s", (_s$57 => {
                                                                                                                                    var $1776 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($1691, (_x$58 => {
                                                                                                                                        var $1777 = Kind$Term$lam$($1706, (_y$59 => {
                                                                                                                                            var $1778 = $1735;
                                                                                                                                            return $1778;
                                                                                                                                        }));
                                                                                                                                        return $1777;
                                                                                                                                    })));
                                                                                                                                    return $1776;
                                                                                                                                })));
                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$("s", (_s$58 => {
                                                                                                                                    var $1779 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($1691, (_x$59 => {
                                                                                                                                        var $1780 = Kind$Term$lam$($1706, (_y$60 => {
                                                                                                                                            var $1781 = $1750;
                                                                                                                                            return $1781;
                                                                                                                                        }));
                                                                                                                                        return $1780;
                                                                                                                                    })));
                                                                                                                                    return $1779;
                                                                                                                                })));
                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($1691, (_x$59 => {
                                                                                                                                    var $1782 = Kind$Term$lam$($1706, (_y$60 => {
                                                                                                                                        var $1783 = $1765;
                                                                                                                                        return $1783;
                                                                                                                                    }));
                                                                                                                                    return $1782;
                                                                                                                                })));
                                                                                                                                var $1774 = Parser$Reply$value$($1771, $1772, Kind$Term$ori$($1773, _term$59));
                                                                                                                                var $1766 = $1774;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1758 = $1766;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1751 = $1758;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1743 = $1751;
                                                                                                        break;
                                                                                                };
                                                                                                var $1736 = $1743;
                                                                                                break;
                                                                                        };
                                                                                        var $1728 = $1736;
                                                                                        break;
                                                                                };
                                                                                var $1721 = $1728;
                                                                                break;
                                                                        };
                                                                        var $1714 = $1721;
                                                                        break;
                                                                };
                                                                var $1707 = $1714;
                                                                break;
                                                        };
                                                        var $1699 = $1707;
                                                        break;
                                                };
                                                var $1692 = $1699;
                                                break;
                                        };
                                        var $1684 = $1692;
                                        break;
                                };
                                var $1677 = $1684;
                                break;
                        };
                        var $1670 = $1677;
                        break;
                };
                var $1662 = $1670;
                break;
        };
        return $1662;
    };
    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);

    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1785 = self.idx;
                var $1786 = self.code;
                var $1787 = self.err;
                var $1788 = Parser$Reply$error$($1785, $1786, $1787);
                var $1784 = $1788;
                break;
            case 'Parser.Reply.value':
                var $1789 = self.idx;
                var $1790 = self.code;
                var $1791 = self.val;
                var self = Kind$Parser$text$("while ", $1789, $1790);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1793 = self.idx;
                        var $1794 = self.code;
                        var $1795 = self.err;
                        var $1796 = Parser$Reply$error$($1793, $1794, $1795);
                        var $1792 = $1796;
                        break;
                    case 'Parser.Reply.value':
                        var $1797 = self.idx;
                        var $1798 = self.code;
                        var self = Kind$Parser$term$($1797, $1798);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1800 = self.idx;
                                var $1801 = self.code;
                                var $1802 = self.err;
                                var $1803 = Parser$Reply$error$($1800, $1801, $1802);
                                var $1799 = $1803;
                                break;
                            case 'Parser.Reply.value':
                                var $1804 = self.idx;
                                var $1805 = self.code;
                                var $1806 = self.val;
                                var self = Kind$Parser$text$("with ", $1804, $1805);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1808 = self.idx;
                                        var $1809 = self.code;
                                        var $1810 = self.err;
                                        var $1811 = Parser$Reply$error$($1808, $1809, $1810);
                                        var $1807 = $1811;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1812 = self.idx;
                                        var $1813 = self.code;
                                        var self = Kind$Parser$text$("{", $1812, $1813);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1815 = self.idx;
                                                var $1816 = self.code;
                                                var $1817 = self.err;
                                                var $1818 = Parser$Reply$error$($1815, $1816, $1817);
                                                var $1814 = $1818;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1819 = self.idx;
                                                var $1820 = self.code;
                                                var self = Kind$Parser$name$($1819, $1820);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1822 = self.idx;
                                                        var $1823 = self.code;
                                                        var $1824 = self.err;
                                                        var $1825 = Parser$Reply$error$($1822, $1823, $1824);
                                                        var $1821 = $1825;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1826 = self.idx;
                                                        var $1827 = self.code;
                                                        var $1828 = self.val;
                                                        var self = Kind$Parser$text$(",", $1826, $1827);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1830 = self.idx;
                                                                var $1831 = self.code;
                                                                var $1832 = self.err;
                                                                var $1833 = Parser$Reply$error$($1830, $1831, $1832);
                                                                var $1829 = $1833;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1834 = self.idx;
                                                                var $1835 = self.code;
                                                                var self = Kind$Parser$name$($1834, $1835);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1837 = self.idx;
                                                                        var $1838 = self.code;
                                                                        var $1839 = self.err;
                                                                        var $1840 = Parser$Reply$error$($1837, $1838, $1839);
                                                                        var $1836 = $1840;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1841 = self.idx;
                                                                        var $1842 = self.code;
                                                                        var $1843 = self.val;
                                                                        var self = Kind$Parser$text$("}", $1841, $1842);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1845 = self.idx;
                                                                                var $1846 = self.code;
                                                                                var $1847 = self.err;
                                                                                var $1848 = Parser$Reply$error$($1845, $1846, $1847);
                                                                                var $1844 = $1848;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1849 = self.idx;
                                                                                var $1850 = self.code;
                                                                                var self = Kind$Parser$text$(":", $1849, $1850);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1852 = self.idx;
                                                                                        var $1853 = self.code;
                                                                                        var $1854 = self.err;
                                                                                        var $1855 = Parser$Reply$error$($1852, $1853, $1854);
                                                                                        var $1851 = $1855;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1856 = self.idx;
                                                                                        var $1857 = self.code;
                                                                                        var self = Kind$Parser$term$($1856, $1857);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1859 = self.idx;
                                                                                                var $1860 = self.code;
                                                                                                var $1861 = self.err;
                                                                                                var $1862 = Parser$Reply$error$($1859, $1860, $1861);
                                                                                                var $1858 = $1862;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1863 = self.idx;
                                                                                                var $1864 = self.code;
                                                                                                var $1865 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1863, $1864);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1867 = self.idx;
                                                                                                        var $1868 = self.code;
                                                                                                        var $1869 = self.err;
                                                                                                        var $1870 = Parser$Reply$error$($1867, $1868, $1869);
                                                                                                        var $1866 = $1870;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1871 = self.idx;
                                                                                                        var $1872 = self.code;
                                                                                                        var self = Kind$Parser$term$($1871, $1872);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1874 = self.idx;
                                                                                                                var $1875 = self.code;
                                                                                                                var $1876 = self.err;
                                                                                                                var $1877 = Parser$Reply$error$($1874, $1875, $1876);
                                                                                                                var $1873 = $1877;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1878 = self.idx;
                                                                                                                var $1879 = self.code;
                                                                                                                var $1880 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1791, $1878, $1879);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1882 = self.idx;
                                                                                                                        var $1883 = self.code;
                                                                                                                        var $1884 = self.err;
                                                                                                                        var $1885 = Parser$Reply$error$($1882, $1883, $1884);
                                                                                                                        var $1881 = $1885;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1886 = self.idx;
                                                                                                                        var $1887 = self.code;
                                                                                                                        var $1888 = self.val;
                                                                                                                        var _moti$45 = Kind$Term$lam$("x", (_x$45 => {
                                                                                                                            var $1890 = Kind$Term$hol$(Bits$e);
                                                                                                                            return $1890;
                                                                                                                        }));
                                                                                                                        var _term$46 = Kind$Term$ref$("Function.while");
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$48 = Kind$Term$ref$("Pair.new");
                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($1828));
                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($1843));
                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);
                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$("s", (_s$54 => {
                                                                                                                            var $1891 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($1828, (_x$55 => {
                                                                                                                                var $1892 = Kind$Term$lam$($1843, (_y$56 => {
                                                                                                                                    var $1893 = $1806;
                                                                                                                                    return $1893;
                                                                                                                                }));
                                                                                                                                return $1892;
                                                                                                                            })));
                                                                                                                            return $1891;
                                                                                                                        })));
                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$("s", (_s$55 => {
                                                                                                                            var $1894 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($1828, (_x$56 => {
                                                                                                                                var $1895 = Kind$Term$lam$($1843, (_y$57 => {
                                                                                                                                    var $1896 = $1865;
                                                                                                                                    return $1896;
                                                                                                                                }));
                                                                                                                                return $1895;
                                                                                                                            })));
                                                                                                                            return $1894;
                                                                                                                        })));
                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($1828, (_x$56 => {
                                                                                                                            var $1897 = Kind$Term$lam$($1843, (_y$57 => {
                                                                                                                                var $1898 = $1880;
                                                                                                                                return $1898;
                                                                                                                            }));
                                                                                                                            return $1897;
                                                                                                                        })));
                                                                                                                        var $1889 = Parser$Reply$value$($1886, $1887, Kind$Term$ori$($1888, _term$56));
                                                                                                                        var $1881 = $1889;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1873 = $1881;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1866 = $1873;
                                                                                                        break;
                                                                                                };
                                                                                                var $1858 = $1866;
                                                                                                break;
                                                                                        };
                                                                                        var $1851 = $1858;
                                                                                        break;
                                                                                };
                                                                                var $1844 = $1851;
                                                                                break;
                                                                        };
                                                                        var $1836 = $1844;
                                                                        break;
                                                                };
                                                                var $1829 = $1836;
                                                                break;
                                                        };
                                                        var $1821 = $1829;
                                                        break;
                                                };
                                                var $1814 = $1821;
                                                break;
                                        };
                                        var $1807 = $1814;
                                        break;
                                };
                                var $1799 = $1807;
                                break;
                        };
                        var $1792 = $1799;
                        break;
                };
                var $1784 = $1792;
                break;
        };
        return $1784;
    };
    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);

    function Kind$Parser$get$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1900 = self.idx;
                var $1901 = self.code;
                var $1902 = self.err;
                var $1903 = Parser$Reply$error$($1900, $1901, $1902);
                var $1899 = $1903;
                break;
            case 'Parser.Reply.value':
                var $1904 = self.idx;
                var $1905 = self.code;
                var $1906 = self.val;
                var self = Kind$Parser$text$("let ", $1904, $1905);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1908 = self.idx;
                        var $1909 = self.code;
                        var $1910 = self.err;
                        var $1911 = Parser$Reply$error$($1908, $1909, $1910);
                        var $1907 = $1911;
                        break;
                    case 'Parser.Reply.value':
                        var $1912 = self.idx;
                        var $1913 = self.code;
                        var self = Kind$Parser$text$("{", $1912, $1913);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1915 = self.idx;
                                var $1916 = self.code;
                                var $1917 = self.err;
                                var $1918 = Parser$Reply$error$($1915, $1916, $1917);
                                var $1914 = $1918;
                                break;
                            case 'Parser.Reply.value':
                                var $1919 = self.idx;
                                var $1920 = self.code;
                                var self = Kind$Parser$name$($1919, $1920);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1922 = self.idx;
                                        var $1923 = self.code;
                                        var $1924 = self.err;
                                        var $1925 = Parser$Reply$error$($1922, $1923, $1924);
                                        var $1921 = $1925;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1926 = self.idx;
                                        var $1927 = self.code;
                                        var $1928 = self.val;
                                        var self = Kind$Parser$text$(",", $1926, $1927);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1930 = self.idx;
                                                var $1931 = self.code;
                                                var $1932 = self.err;
                                                var $1933 = Parser$Reply$error$($1930, $1931, $1932);
                                                var $1929 = $1933;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1934 = self.idx;
                                                var $1935 = self.code;
                                                var self = Kind$Parser$name$($1934, $1935);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1937 = self.idx;
                                                        var $1938 = self.code;
                                                        var $1939 = self.err;
                                                        var $1940 = Parser$Reply$error$($1937, $1938, $1939);
                                                        var $1936 = $1940;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1941 = self.idx;
                                                        var $1942 = self.code;
                                                        var $1943 = self.val;
                                                        var self = Kind$Parser$text$("}", $1941, $1942);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1945 = self.idx;
                                                                var $1946 = self.code;
                                                                var $1947 = self.err;
                                                                var $1948 = Parser$Reply$error$($1945, $1946, $1947);
                                                                var $1944 = $1948;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1949 = self.idx;
                                                                var $1950 = self.code;
                                                                var self = Kind$Parser$text$("=", $1949, $1950);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1952 = self.idx;
                                                                        var $1953 = self.code;
                                                                        var $1954 = self.err;
                                                                        var $1955 = Parser$Reply$error$($1952, $1953, $1954);
                                                                        var $1951 = $1955;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1956 = self.idx;
                                                                        var $1957 = self.code;
                                                                        var self = Kind$Parser$term$($1956, $1957);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1959 = self.idx;
                                                                                var $1960 = self.code;
                                                                                var $1961 = self.err;
                                                                                var $1962 = Parser$Reply$error$($1959, $1960, $1961);
                                                                                var $1958 = $1962;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1963 = self.idx;
                                                                                var $1964 = self.code;
                                                                                var $1965 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1963, $1964);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1967 = self.idx;
                                                                                        var $1968 = self.code;
                                                                                        var $1969 = self.err;
                                                                                        var $1970 = Parser$Reply$error$($1967, $1968, $1969);
                                                                                        var $1966 = $1970;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1971 = self.idx;
                                                                                        var $1972 = self.code;
                                                                                        var self = Kind$Parser$term$($1971, $1972);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1974 = self.idx;
                                                                                                var $1975 = self.code;
                                                                                                var $1976 = self.err;
                                                                                                var $1977 = Parser$Reply$error$($1974, $1975, $1976);
                                                                                                var $1973 = $1977;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1978 = self.idx;
                                                                                                var $1979 = self.code;
                                                                                                var $1980 = self.val;
                                                                                                var self = Kind$Parser$stop$($1906, $1978, $1979);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1982 = self.idx;
                                                                                                        var $1983 = self.code;
                                                                                                        var $1984 = self.err;
                                                                                                        var $1985 = Parser$Reply$error$($1982, $1983, $1984);
                                                                                                        var $1981 = $1985;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1986 = self.idx;
                                                                                                        var $1987 = self.code;
                                                                                                        var $1988 = self.val;
                                                                                                        var _term$39 = $1965;
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$("x", (_x$40 => {
                                                                                                            var $1990 = Kind$Term$hol$(Bits$e);
                                                                                                            return $1990;
                                                                                                        })));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($1928, (_x$41 => {
                                                                                                            var $1991 = Kind$Term$lam$($1943, (_y$42 => {
                                                                                                                var $1992 = $1980;
                                                                                                                return $1992;
                                                                                                            }));
                                                                                                            return $1991;
                                                                                                        })));
                                                                                                        var $1989 = Parser$Reply$value$($1986, $1987, Kind$Term$ori$($1988, _term$41));
                                                                                                        var $1981 = $1989;
                                                                                                        break;
                                                                                                };
                                                                                                var $1973 = $1981;
                                                                                                break;
                                                                                        };
                                                                                        var $1966 = $1973;
                                                                                        break;
                                                                                };
                                                                                var $1958 = $1966;
                                                                                break;
                                                                        };
                                                                        var $1951 = $1958;
                                                                        break;
                                                                };
                                                                var $1944 = $1951;
                                                                break;
                                                        };
                                                        var $1936 = $1944;
                                                        break;
                                                };
                                                var $1929 = $1936;
                                                break;
                                        };
                                        var $1921 = $1929;
                                        break;
                                };
                                var $1914 = $1921;
                                break;
                        };
                        var $1907 = $1914;
                        break;
                };
                var $1899 = $1907;
                break;
        };
        return $1899;
    };
    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);

    function Kind$Parser$get$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1994 = self.idx;
                var $1995 = self.code;
                var $1996 = self.err;
                var $1997 = Parser$Reply$error$($1994, $1995, $1996);
                var $1993 = $1997;
                break;
            case 'Parser.Reply.value':
                var $1998 = self.idx;
                var $1999 = self.code;
                var $2000 = self.val;
                var self = Kind$Parser$text$("{", $1998, $1999);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2002 = self.idx;
                        var $2003 = self.code;
                        var $2004 = self.err;
                        var $2005 = Parser$Reply$error$($2002, $2003, $2004);
                        var $2001 = $2005;
                        break;
                    case 'Parser.Reply.value':
                        var $2006 = self.idx;
                        var $2007 = self.code;
                        var self = Kind$Parser$name$($2006, $2007);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2009 = self.idx;
                                var $2010 = self.code;
                                var $2011 = self.err;
                                var $2012 = Parser$Reply$error$($2009, $2010, $2011);
                                var $2008 = $2012;
                                break;
                            case 'Parser.Reply.value':
                                var $2013 = self.idx;
                                var $2014 = self.code;
                                var $2015 = self.val;
                                var self = Kind$Parser$text$(",", $2013, $2014);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2017 = self.idx;
                                        var $2018 = self.code;
                                        var $2019 = self.err;
                                        var $2020 = Parser$Reply$error$($2017, $2018, $2019);
                                        var $2016 = $2020;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2021 = self.idx;
                                        var $2022 = self.code;
                                        var self = Kind$Parser$name$($2021, $2022);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2024 = self.idx;
                                                var $2025 = self.code;
                                                var $2026 = self.err;
                                                var $2027 = Parser$Reply$error$($2024, $2025, $2026);
                                                var $2023 = $2027;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2028 = self.idx;
                                                var $2029 = self.code;
                                                var $2030 = self.val;
                                                var self = Kind$Parser$text$("}", $2028, $2029);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2032 = self.idx;
                                                        var $2033 = self.code;
                                                        var $2034 = self.err;
                                                        var $2035 = Parser$Reply$error$($2032, $2033, $2034);
                                                        var $2031 = $2035;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2036 = self.idx;
                                                        var $2037 = self.code;
                                                        var self = Kind$Parser$text$("= ", $2036, $2037);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2039 = self.idx;
                                                                var $2040 = self.code;
                                                                var $2041 = self.err;
                                                                var $2042 = Parser$Reply$error$($2039, $2040, $2041);
                                                                var $2038 = $2042;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2043 = self.idx;
                                                                var $2044 = self.code;
                                                                var self = Kind$Parser$term$($2043, $2044);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2046 = self.idx;
                                                                        var $2047 = self.code;
                                                                        var $2048 = self.err;
                                                                        var $2049 = Parser$Reply$error$($2046, $2047, $2048);
                                                                        var $2045 = $2049;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2050 = self.idx;
                                                                        var $2051 = self.code;
                                                                        var $2052 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2050, $2051);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2054 = self.idx;
                                                                                var $2055 = self.code;
                                                                                var $2056 = self.err;
                                                                                var $2057 = Parser$Reply$error$($2054, $2055, $2056);
                                                                                var $2053 = $2057;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2058 = self.idx;
                                                                                var $2059 = self.code;
                                                                                var self = Kind$Parser$term$($2058, $2059);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2061 = self.idx;
                                                                                        var $2062 = self.code;
                                                                                        var $2063 = self.err;
                                                                                        var $2064 = Parser$Reply$error$($2061, $2062, $2063);
                                                                                        var $2060 = $2064;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2065 = self.idx;
                                                                                        var $2066 = self.code;
                                                                                        var $2067 = self.val;
                                                                                        var self = Kind$Parser$stop$($2000, $2065, $2066);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2069 = self.idx;
                                                                                                var $2070 = self.code;
                                                                                                var $2071 = self.err;
                                                                                                var $2072 = Parser$Reply$error$($2069, $2070, $2071);
                                                                                                var $2068 = $2072;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2073 = self.idx;
                                                                                                var $2074 = self.code;
                                                                                                var $2075 = self.val;
                                                                                                var _term$36 = $2052;
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$("x", (_x$37 => {
                                                                                                    var $2077 = Kind$Term$hol$(Bits$e);
                                                                                                    return $2077;
                                                                                                })));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($2015, (_x$38 => {
                                                                                                    var $2078 = Kind$Term$lam$($2030, (_y$39 => {
                                                                                                        var $2079 = $2067;
                                                                                                        return $2079;
                                                                                                    }));
                                                                                                    return $2078;
                                                                                                })));
                                                                                                var $2076 = Parser$Reply$value$($2073, $2074, Kind$Term$ori$($2075, _term$38));
                                                                                                var $2068 = $2076;
                                                                                                break;
                                                                                        };
                                                                                        var $2060 = $2068;
                                                                                        break;
                                                                                };
                                                                                var $2053 = $2060;
                                                                                break;
                                                                        };
                                                                        var $2045 = $2053;
                                                                        break;
                                                                };
                                                                var $2038 = $2045;
                                                                break;
                                                        };
                                                        var $2031 = $2038;
                                                        break;
                                                };
                                                var $2023 = $2031;
                                                break;
                                        };
                                        var $2016 = $2023;
                                        break;
                                };
                                var $2008 = $2016;
                                break;
                        };
                        var $2001 = $2008;
                        break;
                };
                var $1993 = $2001;
                break;
        };
        return $1993;
    };
    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);

    function Kind$Term$def$(_name$1, _expr$2, _body$3) {
        var $2080 = ({
            _: 'Kind.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $2080;
    };
    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);

    function Kind$Parser$def$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2082 = self.idx;
                var $2083 = self.code;
                var $2084 = self.err;
                var $2085 = Parser$Reply$error$($2082, $2083, $2084);
                var $2081 = $2085;
                break;
            case 'Parser.Reply.value':
                var $2086 = self.idx;
                var $2087 = self.code;
                var $2088 = self.val;
                var self = Kind$Parser$text$("def ", $2086, $2087);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2090 = self.idx;
                        var $2091 = self.code;
                        var $2092 = self.err;
                        var $2093 = Parser$Reply$error$($2090, $2091, $2092);
                        var $2089 = $2093;
                        break;
                    case 'Parser.Reply.value':
                        var $2094 = self.idx;
                        var $2095 = self.code;
                        var self = Kind$Parser$name$($2094, $2095);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2097 = self.idx;
                                var $2098 = self.code;
                                var $2099 = self.err;
                                var $2100 = Parser$Reply$error$($2097, $2098, $2099);
                                var $2096 = $2100;
                                break;
                            case 'Parser.Reply.value':
                                var $2101 = self.idx;
                                var $2102 = self.code;
                                var $2103 = self.val;
                                var self = Kind$Parser$text$("=", $2101, $2102);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2105 = self.idx;
                                        var $2106 = self.code;
                                        var $2107 = self.err;
                                        var $2108 = Parser$Reply$error$($2105, $2106, $2107);
                                        var $2104 = $2108;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2109 = self.idx;
                                        var $2110 = self.code;
                                        var self = Kind$Parser$term$($2109, $2110);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2112 = self.idx;
                                                var $2113 = self.code;
                                                var $2114 = self.err;
                                                var $2115 = Parser$Reply$error$($2112, $2113, $2114);
                                                var $2111 = $2115;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2116 = self.idx;
                                                var $2117 = self.code;
                                                var $2118 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2116, $2117);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2120 = self.idx;
                                                        var $2121 = self.code;
                                                        var $2122 = self.err;
                                                        var $2123 = Parser$Reply$error$($2120, $2121, $2122);
                                                        var $2119 = $2123;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2124 = self.idx;
                                                        var $2125 = self.code;
                                                        var self = Kind$Parser$term$($2124, $2125);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2127 = self.idx;
                                                                var $2128 = self.code;
                                                                var $2129 = self.err;
                                                                var $2130 = Parser$Reply$error$($2127, $2128, $2129);
                                                                var $2126 = $2130;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2131 = self.idx;
                                                                var $2132 = self.code;
                                                                var $2133 = self.val;
                                                                var self = Kind$Parser$stop$($2088, $2131, $2132);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2135 = self.idx;
                                                                        var $2136 = self.code;
                                                                        var $2137 = self.err;
                                                                        var $2138 = Parser$Reply$error$($2135, $2136, $2137);
                                                                        var $2134 = $2138;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2139 = self.idx;
                                                                        var $2140 = self.code;
                                                                        var $2141 = self.val;
                                                                        var $2142 = Parser$Reply$value$($2139, $2140, Kind$Term$ori$($2141, Kind$Term$def$($2103, $2118, (_x$27 => {
                                                                            var $2143 = $2133;
                                                                            return $2143;
                                                                        }))));
                                                                        var $2134 = $2142;
                                                                        break;
                                                                };
                                                                var $2126 = $2134;
                                                                break;
                                                        };
                                                        var $2119 = $2126;
                                                        break;
                                                };
                                                var $2111 = $2119;
                                                break;
                                        };
                                        var $2104 = $2111;
                                        break;
                                };
                                var $2096 = $2104;
                                break;
                        };
                        var $2089 = $2096;
                        break;
                };
                var $2081 = $2089;
                break;
        };
        return $2081;
    };
    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);

    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2145 = self.idx;
                var $2146 = self.code;
                var $2147 = self.err;
                var $2148 = Parser$Reply$error$($2145, $2146, $2147);
                var $2144 = $2148;
                break;
            case 'Parser.Reply.value':
                var $2149 = self.idx;
                var $2150 = self.code;
                var $2151 = self.val;
                var self = Kind$Parser$text$("rewrite ", $2149, $2150);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2153 = self.idx;
                        var $2154 = self.code;
                        var $2155 = self.err;
                        var $2156 = Parser$Reply$error$($2153, $2154, $2155);
                        var $2152 = $2156;
                        break;
                    case 'Parser.Reply.value':
                        var $2157 = self.idx;
                        var $2158 = self.code;
                        var self = Kind$Parser$name1$($2157, $2158);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2160 = self.idx;
                                var $2161 = self.code;
                                var $2162 = self.err;
                                var $2163 = Parser$Reply$error$($2160, $2161, $2162);
                                var $2159 = $2163;
                                break;
                            case 'Parser.Reply.value':
                                var $2164 = self.idx;
                                var $2165 = self.code;
                                var $2166 = self.val;
                                var self = Kind$Parser$text$("in", $2164, $2165);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2168 = self.idx;
                                        var $2169 = self.code;
                                        var $2170 = self.err;
                                        var $2171 = Parser$Reply$error$($2168, $2169, $2170);
                                        var $2167 = $2171;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2172 = self.idx;
                                        var $2173 = self.code;
                                        var self = Kind$Parser$term$($2172, $2173);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2175 = self.idx;
                                                var $2176 = self.code;
                                                var $2177 = self.err;
                                                var $2178 = Parser$Reply$error$($2175, $2176, $2177);
                                                var $2174 = $2178;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2179 = self.idx;
                                                var $2180 = self.code;
                                                var $2181 = self.val;
                                                var self = Kind$Parser$text$("with", $2179, $2180);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2183 = self.idx;
                                                        var $2184 = self.code;
                                                        var $2185 = self.err;
                                                        var $2186 = Parser$Reply$error$($2183, $2184, $2185);
                                                        var $2182 = $2186;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2187 = self.idx;
                                                        var $2188 = self.code;
                                                        var self = Kind$Parser$term$($2187, $2188);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2190 = self.idx;
                                                                var $2191 = self.code;
                                                                var $2192 = self.err;
                                                                var $2193 = Parser$Reply$error$($2190, $2191, $2192);
                                                                var $2189 = $2193;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2194 = self.idx;
                                                                var $2195 = self.code;
                                                                var $2196 = self.val;
                                                                var self = Kind$Parser$term$($2194, $2195);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2198 = self.idx;
                                                                        var $2199 = self.code;
                                                                        var $2200 = self.err;
                                                                        var $2201 = Parser$Reply$error$($2198, $2199, $2200);
                                                                        var $2197 = $2201;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2202 = self.idx;
                                                                        var $2203 = self.code;
                                                                        var $2204 = self.val;
                                                                        var self = Kind$Parser$stop$($2151, $2202, $2203);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2206 = self.idx;
                                                                                var $2207 = self.code;
                                                                                var $2208 = self.err;
                                                                                var $2209 = Parser$Reply$error$($2206, $2207, $2208);
                                                                                var $2205 = $2209;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2210 = self.idx;
                                                                                var $2211 = self.code;
                                                                                var $2212 = self.val;
                                                                                var _moti$30 = Kind$Term$lam$($2166, (_s$30 => {
                                                                                    var $2214 = Kind$Term$lam$("", (_x$31 => {
                                                                                        var $2215 = $2181;
                                                                                        return $2215;
                                                                                    }));
                                                                                    return $2214;
                                                                                }));
                                                                                var _term$31 = Kind$Term$ref$("Equal.mirror");
                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));
                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                var _term$35 = Kind$Term$app$(_term$34, $2196);
                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);
                                                                                var _term$37 = Kind$Term$app$(_term$36, $2204);
                                                                                var $2213 = Parser$Reply$value$($2210, $2211, Kind$Term$ori$($2212, _term$37));
                                                                                var $2205 = $2213;
                                                                                break;
                                                                        };
                                                                        var $2197 = $2205;
                                                                        break;
                                                                };
                                                                var $2189 = $2197;
                                                                break;
                                                        };
                                                        var $2182 = $2189;
                                                        break;
                                                };
                                                var $2174 = $2182;
                                                break;
                                        };
                                        var $2167 = $2174;
                                        break;
                                };
                                var $2159 = $2167;
                                break;
                        };
                        var $2152 = $2159;
                        break;
                };
                var $2144 = $2152;
                break;
        };
        return $2144;
    };
    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);

    function Kind$Parser$if$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2217 = self.idx;
                var $2218 = self.code;
                var $2219 = self.err;
                var $2220 = Parser$Reply$error$($2217, $2218, $2219);
                var $2216 = $2220;
                break;
            case 'Parser.Reply.value':
                var $2221 = self.idx;
                var $2222 = self.code;
                var $2223 = self.val;
                var self = Kind$Parser$text$("if ", $2221, $2222);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2225 = self.idx;
                        var $2226 = self.code;
                        var $2227 = self.err;
                        var $2228 = Parser$Reply$error$($2225, $2226, $2227);
                        var $2224 = $2228;
                        break;
                    case 'Parser.Reply.value':
                        var $2229 = self.idx;
                        var $2230 = self.code;
                        var self = Kind$Parser$term$($2229, $2230);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2232 = self.idx;
                                var $2233 = self.code;
                                var $2234 = self.err;
                                var $2235 = Parser$Reply$error$($2232, $2233, $2234);
                                var $2231 = $2235;
                                break;
                            case 'Parser.Reply.value':
                                var $2236 = self.idx;
                                var $2237 = self.code;
                                var $2238 = self.val;
                                var self = Kind$Parser$text$("then", $2236, $2237);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2240 = self.idx;
                                        var $2241 = self.code;
                                        var $2242 = self.err;
                                        var $2243 = Parser$Reply$error$($2240, $2241, $2242);
                                        var $2239 = $2243;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2244 = self.idx;
                                        var $2245 = self.code;
                                        var self = Kind$Parser$term$($2244, $2245);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2247 = self.idx;
                                                var $2248 = self.code;
                                                var $2249 = self.err;
                                                var $2250 = Parser$Reply$error$($2247, $2248, $2249);
                                                var $2246 = $2250;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2251 = self.idx;
                                                var $2252 = self.code;
                                                var $2253 = self.val;
                                                var self = Kind$Parser$text$("else", $2251, $2252);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2255 = self.idx;
                                                        var $2256 = self.code;
                                                        var $2257 = self.err;
                                                        var $2258 = Parser$Reply$error$($2255, $2256, $2257);
                                                        var $2254 = $2258;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2259 = self.idx;
                                                        var $2260 = self.code;
                                                        var self = Kind$Parser$term$($2259, $2260);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2262 = self.idx;
                                                                var $2263 = self.code;
                                                                var $2264 = self.err;
                                                                var $2265 = Parser$Reply$error$($2262, $2263, $2264);
                                                                var $2261 = $2265;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2266 = self.idx;
                                                                var $2267 = self.code;
                                                                var $2268 = self.val;
                                                                var self = Kind$Parser$stop$($2223, $2266, $2267);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2270 = self.idx;
                                                                        var $2271 = self.code;
                                                                        var $2272 = self.err;
                                                                        var $2273 = Parser$Reply$error$($2270, $2271, $2272);
                                                                        var $2269 = $2273;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2274 = self.idx;
                                                                        var $2275 = self.code;
                                                                        var $2276 = self.val;
                                                                        var _term$27 = $2238;
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$("", (_x$28 => {
                                                                            var $2278 = Kind$Term$hol$(Bits$e);
                                                                            return $2278;
                                                                        })));
                                                                        var _term$29 = Kind$Term$app$(_term$28, $2253);
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2268);
                                                                        var $2277 = Parser$Reply$value$($2274, $2275, Kind$Term$ori$($2276, _term$30));
                                                                        var $2269 = $2277;
                                                                        break;
                                                                };
                                                                var $2261 = $2269;
                                                                break;
                                                        };
                                                        var $2254 = $2261;
                                                        break;
                                                };
                                                var $2246 = $2254;
                                                break;
                                        };
                                        var $2239 = $2246;
                                        break;
                                };
                                var $2231 = $2239;
                                break;
                        };
                        var $2224 = $2231;
                        break;
                };
                var $2216 = $2224;
                break;
        };
        return $2216;
    };
    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $2280 = self.head;
                var $2281 = self.tail;
                var $2282 = List$cons$(_f$4($2280), List$mapped$($2281, _f$4));
                var $2279 = $2282;
                break;
            case 'List.nil':
                var $2283 = List$nil;
                var $2279 = $2283;
                break;
        };
        return $2279;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);
    const Kind$Code$backslash = 92;
    const Kind$Code$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $2285 = self.fst;
                var $2286 = self.snd;
                var $2287 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($2285, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2289 = self.idx;
                            var $2290 = self.code;
                            var $2291 = self.err;
                            var $2292 = Parser$Reply$error$($2289, $2290, $2291);
                            var $2288 = $2292;
                            break;
                        case 'Parser.Reply.value':
                            var $2293 = self.idx;
                            var $2294 = self.code;
                            var $2295 = Parser$Reply$value$($2293, $2294, $2286);
                            var $2288 = $2295;
                            break;
                    };
                    return $2288;
                });
                var $2284 = $2287;
                break;
        };
        return $2284;
    }))), List$cons$(Parser$one, List$nil)));

    function Kind$Term$chr$(_chrx$1) {
        var $2296 = ({
            _: 'Kind.Term.chr',
            'chrx': _chrx$1
        });
        return $2296;
    };
    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);

    function Kind$Parser$char$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2298 = self.idx;
                var $2299 = self.code;
                var $2300 = self.err;
                var $2301 = Parser$Reply$error$($2298, $2299, $2300);
                var $2297 = $2301;
                break;
            case 'Parser.Reply.value':
                var $2302 = self.idx;
                var $2303 = self.code;
                var $2304 = self.val;
                var self = Kind$Parser$text$("\'", $2302, $2303);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2306 = self.idx;
                        var $2307 = self.code;
                        var $2308 = self.err;
                        var $2309 = Parser$Reply$error$($2306, $2307, $2308);
                        var $2305 = $2309;
                        break;
                    case 'Parser.Reply.value':
                        var $2310 = self.idx;
                        var $2311 = self.code;
                        var self = Kind$Parser$char$single($2310)($2311);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2313 = self.idx;
                                var $2314 = self.code;
                                var $2315 = self.err;
                                var $2316 = Parser$Reply$error$($2313, $2314, $2315);
                                var $2312 = $2316;
                                break;
                            case 'Parser.Reply.value':
                                var $2317 = self.idx;
                                var $2318 = self.code;
                                var $2319 = self.val;
                                var self = Parser$text$("\'", $2317, $2318);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2321 = self.idx;
                                        var $2322 = self.code;
                                        var $2323 = self.err;
                                        var $2324 = Parser$Reply$error$($2321, $2322, $2323);
                                        var $2320 = $2324;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2325 = self.idx;
                                        var $2326 = self.code;
                                        var self = Kind$Parser$stop$($2304, $2325, $2326);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2328 = self.idx;
                                                var $2329 = self.code;
                                                var $2330 = self.err;
                                                var $2331 = Parser$Reply$error$($2328, $2329, $2330);
                                                var $2327 = $2331;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2332 = self.idx;
                                                var $2333 = self.code;
                                                var $2334 = self.val;
                                                var $2335 = Parser$Reply$value$($2332, $2333, Kind$Term$ori$($2334, Kind$Term$chr$($2319)));
                                                var $2327 = $2335;
                                                break;
                                        };
                                        var $2320 = $2327;
                                        break;
                                };
                                var $2312 = $2320;
                                break;
                        };
                        var $2305 = $2312;
                        break;
                };
                var $2297 = $2305;
                break;
        };
        return $2297;
    };
    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $2336 = _res$2;
                    return $2336;
                } else {
                    var $2337 = self.charCodeAt(0);
                    var $2338 = self.slice(1);
                    var $2339 = String$reverse$go$($2338, String$cons$($2337, _res$2));
                    return $2339;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $2340 = String$reverse$go$(_xs$1, String$nil);
        return $2340;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Kind$Parser$string$go$(_str$1, _idx$2, _code$3) {
        var Kind$Parser$string$go$ = (_str$1, _idx$2, _code$3) => ({
            ctr: 'TCO',
            arg: [_str$1, _idx$2, _code$3]
        });
        var Kind$Parser$string$go = _str$1 => _idx$2 => _code$3 => Kind$Parser$string$go$(_str$1, _idx$2, _code$3);
        var arg = [_str$1, _idx$2, _code$3];
        while (true) {
            let [_str$1, _idx$2, _code$3] = arg;
            var R = (() => {
                var self = _code$3;
                if (self.length === 0) {
                    var $2341 = Parser$Reply$error$(_idx$2, _code$3, "Non-terminating string.");
                    return $2341;
                } else {
                    var $2342 = self.charCodeAt(0);
                    var $2343 = self.slice(1);
                    var self = ($2342 === 34);
                    if (self) {
                        var $2345 = Parser$Reply$value$(Nat$succ$(_idx$2), $2343, String$reverse$(_str$1));
                        var $2344 = $2345;
                    } else {
                        var self = Kind$Parser$char$single(_idx$2)(_code$3);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2347 = self.idx;
                                var $2348 = self.code;
                                var $2349 = self.err;
                                var $2350 = Parser$Reply$error$($2347, $2348, $2349);
                                var $2346 = $2350;
                                break;
                            case 'Parser.Reply.value':
                                var $2351 = self.idx;
                                var $2352 = self.code;
                                var $2353 = self.val;
                                var $2354 = Kind$Parser$string$go$(String$cons$($2353, _str$1), $2351, $2352);
                                var $2346 = $2354;
                                break;
                        };
                        var $2344 = $2346;
                    };
                    return $2344;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$string$go = x0 => x1 => x2 => Kind$Parser$string$go$(x0, x1, x2);

    function Kind$Term$str$(_strx$1) {
        var $2355 = ({
            _: 'Kind.Term.str',
            'strx': _strx$1
        });
        return $2355;
    };
    const Kind$Term$str = x0 => Kind$Term$str$(x0);

    function Kind$Parser$string$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2357 = self.idx;
                var $2358 = self.code;
                var $2359 = self.err;
                var $2360 = Parser$Reply$error$($2357, $2358, $2359);
                var $2356 = $2360;
                break;
            case 'Parser.Reply.value':
                var $2361 = self.idx;
                var $2362 = self.code;
                var $2363 = self.val;
                var self = Kind$Parser$text$(String$cons$(34, String$nil), $2361, $2362);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2365 = self.idx;
                        var $2366 = self.code;
                        var $2367 = self.err;
                        var $2368 = Parser$Reply$error$($2365, $2366, $2367);
                        var $2364 = $2368;
                        break;
                    case 'Parser.Reply.value':
                        var $2369 = self.idx;
                        var $2370 = self.code;
                        var self = Kind$Parser$string$go$("", $2369, $2370);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2372 = self.idx;
                                var $2373 = self.code;
                                var $2374 = self.err;
                                var $2375 = Parser$Reply$error$($2372, $2373, $2374);
                                var $2371 = $2375;
                                break;
                            case 'Parser.Reply.value':
                                var $2376 = self.idx;
                                var $2377 = self.code;
                                var $2378 = self.val;
                                var self = Kind$Parser$stop$($2363, $2376, $2377);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2380 = self.idx;
                                        var $2381 = self.code;
                                        var $2382 = self.err;
                                        var $2383 = Parser$Reply$error$($2380, $2381, $2382);
                                        var $2379 = $2383;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2384 = self.idx;
                                        var $2385 = self.code;
                                        var $2386 = self.val;
                                        var $2387 = Parser$Reply$value$($2384, $2385, Kind$Term$ori$($2386, Kind$Term$str$($2378)));
                                        var $2379 = $2387;
                                        break;
                                };
                                var $2371 = $2379;
                                break;
                        };
                        var $2364 = $2371;
                        break;
                };
                var $2356 = $2364;
                break;
        };
        return $2356;
    };
    const Kind$Parser$string = x0 => x1 => Kind$Parser$string$(x0, x1);

    function Kind$Parser$pair$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2389 = self.idx;
                var $2390 = self.code;
                var $2391 = self.err;
                var $2392 = Parser$Reply$error$($2389, $2390, $2391);
                var $2388 = $2392;
                break;
            case 'Parser.Reply.value':
                var $2393 = self.idx;
                var $2394 = self.code;
                var $2395 = self.val;
                var self = Kind$Parser$text$("{", $2393, $2394);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2397 = self.idx;
                        var $2398 = self.code;
                        var $2399 = self.err;
                        var $2400 = Parser$Reply$error$($2397, $2398, $2399);
                        var $2396 = $2400;
                        break;
                    case 'Parser.Reply.value':
                        var $2401 = self.idx;
                        var $2402 = self.code;
                        var self = Kind$Parser$term$($2401, $2402);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2404 = self.idx;
                                var $2405 = self.code;
                                var $2406 = self.err;
                                var $2407 = Parser$Reply$error$($2404, $2405, $2406);
                                var $2403 = $2407;
                                break;
                            case 'Parser.Reply.value':
                                var $2408 = self.idx;
                                var $2409 = self.code;
                                var $2410 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text(","), $2408, $2409);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2412 = self.idx;
                                        var $2413 = self.code;
                                        var $2414 = self.err;
                                        var $2415 = Parser$Reply$error$($2412, $2413, $2414);
                                        var $2411 = $2415;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2416 = self.idx;
                                        var $2417 = self.code;
                                        var self = Kind$Parser$term$($2416, $2417);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2419 = self.idx;
                                                var $2420 = self.code;
                                                var $2421 = self.err;
                                                var $2422 = Parser$Reply$error$($2419, $2420, $2421);
                                                var $2418 = $2422;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2423 = self.idx;
                                                var $2424 = self.code;
                                                var $2425 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(","), $2423, $2424);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2427 = self.idx;
                                                        var $2428 = self.code;
                                                        var $2429 = self.err;
                                                        var $2430 = Parser$Reply$error$($2427, $2428, $2429);
                                                        var $2426 = $2430;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2431 = self.idx;
                                                        var $2432 = self.code;
                                                        var self = Kind$Parser$text$("}", $2431, $2432);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2434 = self.idx;
                                                                var $2435 = self.code;
                                                                var $2436 = self.err;
                                                                var $2437 = Parser$Reply$error$($2434, $2435, $2436);
                                                                var $2433 = $2437;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2438 = self.idx;
                                                                var $2439 = self.code;
                                                                var self = Kind$Parser$stop$($2395, $2438, $2439);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2441 = self.idx;
                                                                        var $2442 = self.code;
                                                                        var $2443 = self.err;
                                                                        var $2444 = Parser$Reply$error$($2441, $2442, $2443);
                                                                        var $2440 = $2444;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2445 = self.idx;
                                                                        var $2446 = self.code;
                                                                        var $2447 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Pair.new");
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2410);
                                                                        var _term$31 = Kind$Term$app$(_term$30, $2425);
                                                                        var $2448 = Parser$Reply$value$($2445, $2446, Kind$Term$ori$($2447, _term$31));
                                                                        var $2440 = $2448;
                                                                        break;
                                                                };
                                                                var $2433 = $2440;
                                                                break;
                                                        };
                                                        var $2426 = $2433;
                                                        break;
                                                };
                                                var $2418 = $2426;
                                                break;
                                        };
                                        var $2411 = $2418;
                                        break;
                                };
                                var $2403 = $2411;
                                break;
                        };
                        var $2396 = $2403;
                        break;
                };
                var $2388 = $2396;
                break;
        };
        return $2388;
    };
    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);

    function Kind$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2450 = self.idx;
                var $2451 = self.code;
                var $2452 = self.err;
                var $2453 = Parser$Reply$error$($2450, $2451, $2452);
                var $2449 = $2453;
                break;
            case 'Parser.Reply.value':
                var $2454 = self.idx;
                var $2455 = self.code;
                var $2456 = self.val;
                var self = Kind$Parser$text$("[", $2454, $2455);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2458 = self.idx;
                        var $2459 = self.code;
                        var $2460 = self.err;
                        var $2461 = Parser$Reply$error$($2458, $2459, $2460);
                        var $2457 = $2461;
                        break;
                    case 'Parser.Reply.value':
                        var $2462 = self.idx;
                        var $2463 = self.code;
                        var self = Kind$Parser$name1$($2462, $2463);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2465 = self.idx;
                                var $2466 = self.code;
                                var $2467 = self.err;
                                var $2468 = Parser$Reply$error$($2465, $2466, $2467);
                                var $2464 = $2468;
                                break;
                            case 'Parser.Reply.value':
                                var $2469 = self.idx;
                                var $2470 = self.code;
                                var $2471 = self.val;
                                var self = Kind$Parser$text$(":", $2469, $2470);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2473 = self.idx;
                                        var $2474 = self.code;
                                        var $2475 = self.err;
                                        var $2476 = Parser$Reply$error$($2473, $2474, $2475);
                                        var $2472 = $2476;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2477 = self.idx;
                                        var $2478 = self.code;
                                        var self = Kind$Parser$term$($2477, $2478);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2480 = self.idx;
                                                var $2481 = self.code;
                                                var $2482 = self.err;
                                                var $2483 = Parser$Reply$error$($2480, $2481, $2482);
                                                var $2479 = $2483;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2484 = self.idx;
                                                var $2485 = self.code;
                                                var $2486 = self.val;
                                                var self = Kind$Parser$text$("]", $2484, $2485);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2488 = self.idx;
                                                        var $2489 = self.code;
                                                        var $2490 = self.err;
                                                        var $2491 = Parser$Reply$error$($2488, $2489, $2490);
                                                        var $2487 = $2491;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2492 = self.idx;
                                                        var $2493 = self.code;
                                                        var self = Kind$Parser$term$($2492, $2493);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2495 = self.idx;
                                                                var $2496 = self.code;
                                                                var $2497 = self.err;
                                                                var $2498 = Parser$Reply$error$($2495, $2496, $2497);
                                                                var $2494 = $2498;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2499 = self.idx;
                                                                var $2500 = self.code;
                                                                var $2501 = self.val;
                                                                var self = Kind$Parser$stop$($2456, $2499, $2500);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2503 = self.idx;
                                                                        var $2504 = self.code;
                                                                        var $2505 = self.err;
                                                                        var $2506 = Parser$Reply$error$($2503, $2504, $2505);
                                                                        var $2502 = $2506;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2507 = self.idx;
                                                                        var $2508 = self.code;
                                                                        var $2509 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Sigma");
                                                                        var _term$28 = Kind$Term$app$(_term$27, $2486);
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($2471, (_x$29 => {
                                                                            var $2511 = $2501;
                                                                            return $2511;
                                                                        })));
                                                                        var $2510 = Parser$Reply$value$($2507, $2508, Kind$Term$ori$($2509, _term$29));
                                                                        var $2502 = $2510;
                                                                        break;
                                                                };
                                                                var $2494 = $2502;
                                                                break;
                                                        };
                                                        var $2487 = $2494;
                                                        break;
                                                };
                                                var $2479 = $2487;
                                                break;
                                        };
                                        var $2472 = $2479;
                                        break;
                                };
                                var $2464 = $2472;
                                break;
                        };
                        var $2457 = $2464;
                        break;
                };
                var $2449 = $2457;
                break;
        };
        return $2449;
    };
    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);

    function Kind$Parser$some$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2513 = self.idx;
                var $2514 = self.code;
                var $2515 = self.err;
                var $2516 = Parser$Reply$error$($2513, $2514, $2515);
                var $2512 = $2516;
                break;
            case 'Parser.Reply.value':
                var $2517 = self.idx;
                var $2518 = self.code;
                var $2519 = self.val;
                var self = Kind$Parser$text$("some(", $2517, $2518);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2521 = self.idx;
                        var $2522 = self.code;
                        var $2523 = self.err;
                        var $2524 = Parser$Reply$error$($2521, $2522, $2523);
                        var $2520 = $2524;
                        break;
                    case 'Parser.Reply.value':
                        var $2525 = self.idx;
                        var $2526 = self.code;
                        var self = Kind$Parser$term$($2525, $2526);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2528 = self.idx;
                                var $2529 = self.code;
                                var $2530 = self.err;
                                var $2531 = Parser$Reply$error$($2528, $2529, $2530);
                                var $2527 = $2531;
                                break;
                            case 'Parser.Reply.value':
                                var $2532 = self.idx;
                                var $2533 = self.code;
                                var $2534 = self.val;
                                var self = Kind$Parser$text$(")", $2532, $2533);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2536 = self.idx;
                                        var $2537 = self.code;
                                        var $2538 = self.err;
                                        var $2539 = Parser$Reply$error$($2536, $2537, $2538);
                                        var $2535 = $2539;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2540 = self.idx;
                                        var $2541 = self.code;
                                        var self = Kind$Parser$stop$($2519, $2540, $2541);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2543 = self.idx;
                                                var $2544 = self.code;
                                                var $2545 = self.err;
                                                var $2546 = Parser$Reply$error$($2543, $2544, $2545);
                                                var $2542 = $2546;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2547 = self.idx;
                                                var $2548 = self.code;
                                                var $2549 = self.val;
                                                var _term$18 = Kind$Term$ref$("Maybe.some");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, $2534);
                                                var $2550 = Parser$Reply$value$($2547, $2548, Kind$Term$ori$($2549, _term$20));
                                                var $2542 = $2550;
                                                break;
                                        };
                                        var $2535 = $2542;
                                        break;
                                };
                                var $2527 = $2535;
                                break;
                        };
                        var $2520 = $2527;
                        break;
                };
                var $2512 = $2520;
                break;
        };
        return $2512;
    };
    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);

    function Kind$Parser$not$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2552 = self.idx;
                var $2553 = self.code;
                var $2554 = self.err;
                var $2555 = Parser$Reply$error$($2552, $2553, $2554);
                var $2551 = $2555;
                break;
            case 'Parser.Reply.value':
                var $2556 = self.idx;
                var $2557 = self.code;
                var $2558 = self.val;
                var self = Kind$Parser$text$("not(", $2556, $2557);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2560 = self.idx;
                        var $2561 = self.code;
                        var $2562 = self.err;
                        var $2563 = Parser$Reply$error$($2560, $2561, $2562);
                        var $2559 = $2563;
                        break;
                    case 'Parser.Reply.value':
                        var $2564 = self.idx;
                        var $2565 = self.code;
                        var self = Kind$Parser$term$($2564, $2565);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2567 = self.idx;
                                var $2568 = self.code;
                                var $2569 = self.err;
                                var $2570 = Parser$Reply$error$($2567, $2568, $2569);
                                var $2566 = $2570;
                                break;
                            case 'Parser.Reply.value':
                                var $2571 = self.idx;
                                var $2572 = self.code;
                                var $2573 = self.val;
                                var self = Kind$Parser$text$(")", $2571, $2572);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2575 = self.idx;
                                        var $2576 = self.code;
                                        var $2577 = self.err;
                                        var $2578 = Parser$Reply$error$($2575, $2576, $2577);
                                        var $2574 = $2578;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2579 = self.idx;
                                        var $2580 = self.code;
                                        var self = Kind$Parser$stop$($2558, $2579, $2580);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2582 = self.idx;
                                                var $2583 = self.code;
                                                var $2584 = self.err;
                                                var $2585 = Parser$Reply$error$($2582, $2583, $2584);
                                                var $2581 = $2585;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2586 = self.idx;
                                                var $2587 = self.code;
                                                var $2588 = self.val;
                                                var _term$18 = Kind$Term$ref$("Bool.not");
                                                var _term$19 = Kind$Term$app$(_term$18, $2573);
                                                var $2589 = Parser$Reply$value$($2586, $2587, Kind$Term$ori$($2588, _term$19));
                                                var $2581 = $2589;
                                                break;
                                        };
                                        var $2574 = $2581;
                                        break;
                                };
                                var $2566 = $2574;
                                break;
                        };
                        var $2559 = $2566;
                        break;
                };
                var $2551 = $2559;
                break;
        };
        return $2551;
    };
    const Kind$Parser$not = x0 => x1 => Kind$Parser$not$(x0, x1);

    function Kind$Parser$left$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2591 = self.idx;
                var $2592 = self.code;
                var $2593 = self.err;
                var $2594 = Parser$Reply$error$($2591, $2592, $2593);
                var $2590 = $2594;
                break;
            case 'Parser.Reply.value':
                var $2595 = self.idx;
                var $2596 = self.code;
                var $2597 = self.val;
                var self = Kind$Parser$text$("left(", $2595, $2596);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2599 = self.idx;
                        var $2600 = self.code;
                        var $2601 = self.err;
                        var $2602 = Parser$Reply$error$($2599, $2600, $2601);
                        var $2598 = $2602;
                        break;
                    case 'Parser.Reply.value':
                        var $2603 = self.idx;
                        var $2604 = self.code;
                        var self = Kind$Parser$term$($2603, $2604);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2606 = self.idx;
                                var $2607 = self.code;
                                var $2608 = self.err;
                                var $2609 = Parser$Reply$error$($2606, $2607, $2608);
                                var $2605 = $2609;
                                break;
                            case 'Parser.Reply.value':
                                var $2610 = self.idx;
                                var $2611 = self.code;
                                var $2612 = self.val;
                                var self = Kind$Parser$text$(")", $2610, $2611);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2614 = self.idx;
                                        var $2615 = self.code;
                                        var $2616 = self.err;
                                        var $2617 = Parser$Reply$error$($2614, $2615, $2616);
                                        var $2613 = $2617;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2618 = self.idx;
                                        var $2619 = self.code;
                                        var self = Kind$Parser$stop$($2597, $2618, $2619);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2621 = self.idx;
                                                var $2622 = self.code;
                                                var $2623 = self.err;
                                                var $2624 = Parser$Reply$error$($2621, $2622, $2623);
                                                var $2620 = $2624;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2625 = self.idx;
                                                var $2626 = self.code;
                                                var $2627 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.left");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $2612);
                                                var $2628 = Parser$Reply$value$($2625, $2626, Kind$Term$ori$($2627, _term$21));
                                                var $2620 = $2628;
                                                break;
                                        };
                                        var $2613 = $2620;
                                        break;
                                };
                                var $2605 = $2613;
                                break;
                        };
                        var $2598 = $2605;
                        break;
                };
                var $2590 = $2598;
                break;
        };
        return $2590;
    };
    const Kind$Parser$left = x0 => x1 => Kind$Parser$left$(x0, x1);

    function Kind$Parser$right$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2630 = self.idx;
                var $2631 = self.code;
                var $2632 = self.err;
                var $2633 = Parser$Reply$error$($2630, $2631, $2632);
                var $2629 = $2633;
                break;
            case 'Parser.Reply.value':
                var $2634 = self.idx;
                var $2635 = self.code;
                var $2636 = self.val;
                var self = Kind$Parser$text$("right(", $2634, $2635);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2638 = self.idx;
                        var $2639 = self.code;
                        var $2640 = self.err;
                        var $2641 = Parser$Reply$error$($2638, $2639, $2640);
                        var $2637 = $2641;
                        break;
                    case 'Parser.Reply.value':
                        var $2642 = self.idx;
                        var $2643 = self.code;
                        var self = Kind$Parser$term$($2642, $2643);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2645 = self.idx;
                                var $2646 = self.code;
                                var $2647 = self.err;
                                var $2648 = Parser$Reply$error$($2645, $2646, $2647);
                                var $2644 = $2648;
                                break;
                            case 'Parser.Reply.value':
                                var $2649 = self.idx;
                                var $2650 = self.code;
                                var $2651 = self.val;
                                var self = Kind$Parser$text$(")", $2649, $2650);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2653 = self.idx;
                                        var $2654 = self.code;
                                        var $2655 = self.err;
                                        var $2656 = Parser$Reply$error$($2653, $2654, $2655);
                                        var $2652 = $2656;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2657 = self.idx;
                                        var $2658 = self.code;
                                        var self = Kind$Parser$stop$($2636, $2657, $2658);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2660 = self.idx;
                                                var $2661 = self.code;
                                                var $2662 = self.err;
                                                var $2663 = Parser$Reply$error$($2660, $2661, $2662);
                                                var $2659 = $2663;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2664 = self.idx;
                                                var $2665 = self.code;
                                                var $2666 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.right");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $2651);
                                                var $2667 = Parser$Reply$value$($2664, $2665, Kind$Term$ori$($2666, _term$21));
                                                var $2659 = $2667;
                                                break;
                                        };
                                        var $2652 = $2659;
                                        break;
                                };
                                var $2644 = $2652;
                                break;
                        };
                        var $2637 = $2644;
                        break;
                };
                var $2629 = $2637;
                break;
        };
        return $2629;
    };
    const Kind$Parser$right = x0 => x1 => Kind$Parser$right$(x0, x1);

    function Kind$Parser$apply$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2669 = self.idx;
                var $2670 = self.code;
                var $2671 = self.err;
                var $2672 = Parser$Reply$error$($2669, $2670, $2671);
                var $2668 = $2672;
                break;
            case 'Parser.Reply.value':
                var $2673 = self.idx;
                var $2674 = self.code;
                var $2675 = self.val;
                var self = Kind$Parser$text$("apply(", $2673, $2674);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2677 = self.idx;
                        var $2678 = self.code;
                        var $2679 = self.err;
                        var $2680 = Parser$Reply$error$($2677, $2678, $2679);
                        var $2676 = $2680;
                        break;
                    case 'Parser.Reply.value':
                        var $2681 = self.idx;
                        var $2682 = self.code;
                        var self = Kind$Parser$term$($2681, $2682);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2684 = self.idx;
                                var $2685 = self.code;
                                var $2686 = self.err;
                                var $2687 = Parser$Reply$error$($2684, $2685, $2686);
                                var $2683 = $2687;
                                break;
                            case 'Parser.Reply.value':
                                var $2688 = self.idx;
                                var $2689 = self.code;
                                var $2690 = self.val;
                                var self = Kind$Parser$text$(",", $2688, $2689);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2692 = self.idx;
                                        var $2693 = self.code;
                                        var $2694 = self.err;
                                        var $2695 = Parser$Reply$error$($2692, $2693, $2694);
                                        var $2691 = $2695;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2696 = self.idx;
                                        var $2697 = self.code;
                                        var self = Kind$Parser$term$($2696, $2697);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2699 = self.idx;
                                                var $2700 = self.code;
                                                var $2701 = self.err;
                                                var $2702 = Parser$Reply$error$($2699, $2700, $2701);
                                                var $2698 = $2702;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2703 = self.idx;
                                                var $2704 = self.code;
                                                var $2705 = self.val;
                                                var self = Kind$Parser$text$(")", $2703, $2704);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2707 = self.idx;
                                                        var $2708 = self.code;
                                                        var $2709 = self.err;
                                                        var $2710 = Parser$Reply$error$($2707, $2708, $2709);
                                                        var $2706 = $2710;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2711 = self.idx;
                                                        var $2712 = self.code;
                                                        var self = Kind$Parser$stop$($2675, $2711, $2712);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2714 = self.idx;
                                                                var $2715 = self.code;
                                                                var $2716 = self.err;
                                                                var $2717 = Parser$Reply$error$($2714, $2715, $2716);
                                                                var $2713 = $2717;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2718 = self.idx;
                                                                var $2719 = self.code;
                                                                var $2720 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.apply");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $2690);
                                                                var _term$30 = Kind$Term$app$(_term$29, $2705);
                                                                var $2721 = Parser$Reply$value$($2718, $2719, Kind$Term$ori$($2720, _term$30));
                                                                var $2713 = $2721;
                                                                break;
                                                        };
                                                        var $2706 = $2713;
                                                        break;
                                                };
                                                var $2698 = $2706;
                                                break;
                                        };
                                        var $2691 = $2698;
                                        break;
                                };
                                var $2683 = $2691;
                                break;
                        };
                        var $2676 = $2683;
                        break;
                };
                var $2668 = $2676;
                break;
        };
        return $2668;
    };
    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);

    function Kind$Parser$chain$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2723 = self.idx;
                var $2724 = self.code;
                var $2725 = self.err;
                var $2726 = Parser$Reply$error$($2723, $2724, $2725);
                var $2722 = $2726;
                break;
            case 'Parser.Reply.value':
                var $2727 = self.idx;
                var $2728 = self.code;
                var $2729 = self.val;
                var self = Kind$Parser$text$("chain(", $2727, $2728);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2731 = self.idx;
                        var $2732 = self.code;
                        var $2733 = self.err;
                        var $2734 = Parser$Reply$error$($2731, $2732, $2733);
                        var $2730 = $2734;
                        break;
                    case 'Parser.Reply.value':
                        var $2735 = self.idx;
                        var $2736 = self.code;
                        var self = Kind$Parser$term$($2735, $2736);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2738 = self.idx;
                                var $2739 = self.code;
                                var $2740 = self.err;
                                var $2741 = Parser$Reply$error$($2738, $2739, $2740);
                                var $2737 = $2741;
                                break;
                            case 'Parser.Reply.value':
                                var $2742 = self.idx;
                                var $2743 = self.code;
                                var $2744 = self.val;
                                var self = Kind$Parser$text$(",", $2742, $2743);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2746 = self.idx;
                                        var $2747 = self.code;
                                        var $2748 = self.err;
                                        var $2749 = Parser$Reply$error$($2746, $2747, $2748);
                                        var $2745 = $2749;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2750 = self.idx;
                                        var $2751 = self.code;
                                        var self = Kind$Parser$term$($2750, $2751);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2753 = self.idx;
                                                var $2754 = self.code;
                                                var $2755 = self.err;
                                                var $2756 = Parser$Reply$error$($2753, $2754, $2755);
                                                var $2752 = $2756;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2757 = self.idx;
                                                var $2758 = self.code;
                                                var $2759 = self.val;
                                                var self = Kind$Parser$text$(")", $2757, $2758);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2761 = self.idx;
                                                        var $2762 = self.code;
                                                        var $2763 = self.err;
                                                        var $2764 = Parser$Reply$error$($2761, $2762, $2763);
                                                        var $2760 = $2764;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2765 = self.idx;
                                                        var $2766 = self.code;
                                                        var self = Kind$Parser$stop$($2729, $2765, $2766);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2768 = self.idx;
                                                                var $2769 = self.code;
                                                                var $2770 = self.err;
                                                                var $2771 = Parser$Reply$error$($2768, $2769, $2770);
                                                                var $2767 = $2771;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2772 = self.idx;
                                                                var $2773 = self.code;
                                                                var $2774 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.chain");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $2744);
                                                                var _term$30 = Kind$Term$app$(_term$29, $2759);
                                                                var $2775 = Parser$Reply$value$($2772, $2773, Kind$Term$ori$($2774, _term$30));
                                                                var $2767 = $2775;
                                                                break;
                                                        };
                                                        var $2760 = $2767;
                                                        break;
                                                };
                                                var $2752 = $2760;
                                                break;
                                        };
                                        var $2745 = $2752;
                                        break;
                                };
                                var $2737 = $2745;
                                break;
                        };
                        var $2730 = $2737;
                        break;
                };
                var $2722 = $2730;
                break;
        };
        return $2722;
    };
    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);

    function Kind$Parser$mirror$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2777 = self.idx;
                var $2778 = self.code;
                var $2779 = self.err;
                var $2780 = Parser$Reply$error$($2777, $2778, $2779);
                var $2776 = $2780;
                break;
            case 'Parser.Reply.value':
                var $2781 = self.idx;
                var $2782 = self.code;
                var $2783 = self.val;
                var self = Kind$Parser$text$("mirror(", $2781, $2782);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2785 = self.idx;
                        var $2786 = self.code;
                        var $2787 = self.err;
                        var $2788 = Parser$Reply$error$($2785, $2786, $2787);
                        var $2784 = $2788;
                        break;
                    case 'Parser.Reply.value':
                        var $2789 = self.idx;
                        var $2790 = self.code;
                        var self = Kind$Parser$term$($2789, $2790);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2792 = self.idx;
                                var $2793 = self.code;
                                var $2794 = self.err;
                                var $2795 = Parser$Reply$error$($2792, $2793, $2794);
                                var $2791 = $2795;
                                break;
                            case 'Parser.Reply.value':
                                var $2796 = self.idx;
                                var $2797 = self.code;
                                var $2798 = self.val;
                                var self = Kind$Parser$text$(")", $2796, $2797);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2800 = self.idx;
                                        var $2801 = self.code;
                                        var $2802 = self.err;
                                        var $2803 = Parser$Reply$error$($2800, $2801, $2802);
                                        var $2799 = $2803;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2804 = self.idx;
                                        var $2805 = self.code;
                                        var self = Kind$Parser$stop$($2783, $2804, $2805);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2807 = self.idx;
                                                var $2808 = self.code;
                                                var $2809 = self.err;
                                                var $2810 = Parser$Reply$error$($2807, $2808, $2809);
                                                var $2806 = $2810;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2811 = self.idx;
                                                var $2812 = self.code;
                                                var $2813 = self.val;
                                                var _term$18 = Kind$Term$ref$("Equal.mirror");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                var _term$22 = Kind$Term$app$(_term$21, $2798);
                                                var $2814 = Parser$Reply$value$($2811, $2812, Kind$Term$ori$($2813, _term$22));
                                                var $2806 = $2814;
                                                break;
                                        };
                                        var $2799 = $2806;
                                        break;
                                };
                                var $2791 = $2799;
                                break;
                        };
                        var $2784 = $2791;
                        break;
                };
                var $2776 = $2784;
                break;
        };
        return $2776;
    };
    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);

    function Kind$Name$read$(_str$1) {
        var $2815 = _str$1;
        return $2815;
    };
    const Kind$Name$read = x0 => Kind$Name$read$(x0);

    function Kind$Parser$list$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2817 = self.idx;
                var $2818 = self.code;
                var $2819 = self.err;
                var $2820 = Parser$Reply$error$($2817, $2818, $2819);
                var $2816 = $2820;
                break;
            case 'Parser.Reply.value':
                var $2821 = self.idx;
                var $2822 = self.code;
                var $2823 = self.val;
                var self = Kind$Parser$text$("[", $2821, $2822);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2825 = self.idx;
                        var $2826 = self.code;
                        var $2827 = self.err;
                        var $2828 = Parser$Reply$error$($2825, $2826, $2827);
                        var $2824 = $2828;
                        break;
                    case 'Parser.Reply.value':
                        var $2829 = self.idx;
                        var $2830 = self.code;
                        var self = Parser$until$(Kind$Parser$text("]"), Kind$Parser$item(Kind$Parser$term))($2829)($2830);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2832 = self.idx;
                                var $2833 = self.code;
                                var $2834 = self.err;
                                var $2835 = Parser$Reply$error$($2832, $2833, $2834);
                                var $2831 = $2835;
                                break;
                            case 'Parser.Reply.value':
                                var $2836 = self.idx;
                                var $2837 = self.code;
                                var $2838 = self.val;
                                var self = Kind$Parser$stop$($2823, $2836, $2837);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2840 = self.idx;
                                        var $2841 = self.code;
                                        var $2842 = self.err;
                                        var $2843 = Parser$Reply$error$($2840, $2841, $2842);
                                        var $2839 = $2843;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2844 = self.idx;
                                        var $2845 = self.code;
                                        var $2846 = self.val;
                                        var $2847 = Parser$Reply$value$($2844, $2845, List$fold$($2838, Kind$Term$ori$($2846, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")), Kind$Term$hol$(Bits$e))), (_x$15 => _xs$16 => {
                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));
                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);
                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);
                                            var $2848 = Kind$Term$ori$($2846, _term$20);
                                            return $2848;
                                        })));
                                        var $2839 = $2847;
                                        break;
                                };
                                var $2831 = $2839;
                                break;
                        };
                        var $2824 = $2831;
                        break;
                };
                var $2816 = $2824;
                break;
        };
        return $2816;
    };
    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);

    function Kind$Parser$map$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2850 = self.idx;
                var $2851 = self.code;
                var $2852 = self.err;
                var $2853 = Parser$Reply$error$($2850, $2851, $2852);
                var $2849 = $2853;
                break;
            case 'Parser.Reply.value':
                var $2854 = self.idx;
                var $2855 = self.code;
                var $2856 = self.val;
                var self = Kind$Parser$text$("{", $2854, $2855);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2858 = self.idx;
                        var $2859 = self.code;
                        var $2860 = self.err;
                        var $2861 = Parser$Reply$error$($2858, $2859, $2860);
                        var $2857 = $2861;
                        break;
                    case 'Parser.Reply.value':
                        var $2862 = self.idx;
                        var $2863 = self.code;
                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item((_idx$9 => _code$10 => {
                            var self = Kind$Parser$term$(_idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2866 = self.idx;
                                    var $2867 = self.code;
                                    var $2868 = self.err;
                                    var $2869 = Parser$Reply$error$($2866, $2867, $2868);
                                    var $2865 = $2869;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2870 = self.idx;
                                    var $2871 = self.code;
                                    var $2872 = self.val;
                                    var self = Kind$Parser$text$(":", $2870, $2871);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2874 = self.idx;
                                            var $2875 = self.code;
                                            var $2876 = self.err;
                                            var $2877 = Parser$Reply$error$($2874, $2875, $2876);
                                            var $2873 = $2877;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2878 = self.idx;
                                            var $2879 = self.code;
                                            var self = Kind$Parser$term$($2878, $2879);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2881 = self.idx;
                                                    var $2882 = self.code;
                                                    var $2883 = self.err;
                                                    var $2884 = Parser$Reply$error$($2881, $2882, $2883);
                                                    var $2880 = $2884;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2885 = self.idx;
                                                    var $2886 = self.code;
                                                    var $2887 = self.val;
                                                    var $2888 = Parser$Reply$value$($2885, $2886, Pair$new$($2872, $2887));
                                                    var $2880 = $2888;
                                                    break;
                                            };
                                            var $2873 = $2880;
                                            break;
                                    };
                                    var $2865 = $2873;
                                    break;
                            };
                            return $2865;
                        })))($2862)($2863);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2889 = self.idx;
                                var $2890 = self.code;
                                var $2891 = self.err;
                                var $2892 = Parser$Reply$error$($2889, $2890, $2891);
                                var $2864 = $2892;
                                break;
                            case 'Parser.Reply.value':
                                var $2893 = self.idx;
                                var $2894 = self.code;
                                var $2895 = self.val;
                                var self = Kind$Parser$stop$($2856, $2893, $2894);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2897 = self.idx;
                                        var $2898 = self.code;
                                        var $2899 = self.err;
                                        var $2900 = Parser$Reply$error$($2897, $2898, $2899);
                                        var $2896 = $2900;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2901 = self.idx;
                                        var $2902 = self.code;
                                        var $2903 = self.val;
                                        var _list$15 = List$fold$($2895, Kind$Term$ori$($2903, Kind$Term$app$(Kind$Term$ref$("List.nil"), Kind$Term$hol$(Bits$e))), (_kv$15 => _xs$16 => {
                                            var self = _kv$15;
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $2906 = self.fst;
                                                    var $2907 = self.snd;
                                                    var _pair$19 = Kind$Term$ref$("Pair.new");
                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));
                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));
                                                    var _pair$22 = Kind$Term$app$(_pair$21, $2906);
                                                    var _pair$23 = Kind$Term$app$(_pair$22, $2907);
                                                    var _term$24 = Kind$Term$ref$("List.cons");
                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);
                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);
                                                    var $2908 = Kind$Term$ori$($2903, _term$27);
                                                    var $2905 = $2908;
                                                    break;
                                            };
                                            return $2905;
                                        }));
                                        var _term$16 = Kind$Term$ref$("Map.from_list");
                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));
                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);
                                        var $2904 = Parser$Reply$value$($2901, $2902, Kind$Term$ori$($2903, _term$18));
                                        var $2896 = $2904;
                                        break;
                                };
                                var $2864 = $2896;
                                break;
                        };
                        var $2857 = $2864;
                        break;
                };
                var $2849 = $2857;
                break;
        };
        return $2849;
    };
    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);

    function Kind$Parser$log$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2910 = self.idx;
                var $2911 = self.code;
                var $2912 = self.err;
                var $2913 = Parser$Reply$error$($2910, $2911, $2912);
                var $2909 = $2913;
                break;
            case 'Parser.Reply.value':
                var $2914 = self.idx;
                var $2915 = self.code;
                var $2916 = self.val;
                var self = Kind$Parser$text$("log(", $2914, $2915);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2918 = self.idx;
                        var $2919 = self.code;
                        var $2920 = self.err;
                        var $2921 = Parser$Reply$error$($2918, $2919, $2920);
                        var $2917 = $2921;
                        break;
                    case 'Parser.Reply.value':
                        var $2922 = self.idx;
                        var $2923 = self.code;
                        var self = Parser$until$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term))($2922)($2923);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2925 = self.idx;
                                var $2926 = self.code;
                                var $2927 = self.err;
                                var $2928 = Parser$Reply$error$($2925, $2926, $2927);
                                var $2924 = $2928;
                                break;
                            case 'Parser.Reply.value':
                                var $2929 = self.idx;
                                var $2930 = self.code;
                                var $2931 = self.val;
                                var self = Kind$Parser$term$($2929, $2930);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2933 = self.idx;
                                        var $2934 = self.code;
                                        var $2935 = self.err;
                                        var $2936 = Parser$Reply$error$($2933, $2934, $2935);
                                        var $2932 = $2936;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2937 = self.idx;
                                        var $2938 = self.code;
                                        var $2939 = self.val;
                                        var _term$15 = Kind$Term$ref$("Debug.log");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($2931, Kind$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Kind$Term$ref$("String.concat");
                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);
                                            var $2941 = _arg$21;
                                            return $2941;
                                        }));
                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);
                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$("x", (_x$19 => {
                                            var $2942 = $2939;
                                            return $2942;
                                        })));
                                        var self = Kind$Parser$stop$($2916, $2937, $2938);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2943 = self.idx;
                                                var $2944 = self.code;
                                                var $2945 = self.err;
                                                var $2946 = Parser$Reply$error$($2943, $2944, $2945);
                                                var $2940 = $2946;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2947 = self.idx;
                                                var $2948 = self.code;
                                                var $2949 = self.val;
                                                var $2950 = Parser$Reply$value$($2947, $2948, Kind$Term$ori$($2949, _term$19));
                                                var $2940 = $2950;
                                                break;
                                        };
                                        var $2932 = $2940;
                                        break;
                                };
                                var $2924 = $2932;
                                break;
                        };
                        var $2917 = $2924;
                        break;
                };
                var $2909 = $2917;
                break;
        };
        return $2909;
    };
    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);

    function Kind$Parser$do$statements$(_monad_name$1) {
        var $2951 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2953 = self.idx;
                    var $2954 = self.code;
                    var $2955 = self.err;
                    var $2956 = Parser$Reply$error$($2953, $2954, $2955);
                    var $2952 = $2956;
                    break;
                case 'Parser.Reply.value':
                    var $2957 = self.idx;
                    var $2958 = self.code;
                    var $2959 = self.val;
                    var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "), List$cons$(Kind$Parser$text("get "), List$nil)))($2957)($2958);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2961 = self.idx;
                            var $2962 = self.code;
                            var $2963 = self.err;
                            var $2964 = Parser$Reply$error$($2961, $2962, $2963);
                            var $2960 = $2964;
                            break;
                        case 'Parser.Reply.value':
                            var $2965 = self.idx;
                            var $2966 = self.code;
                            var self = Kind$Parser$name1$($2965, $2966);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2968 = self.idx;
                                    var $2969 = self.code;
                                    var $2970 = self.err;
                                    var $2971 = Parser$Reply$error$($2968, $2969, $2970);
                                    var $2967 = $2971;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2972 = self.idx;
                                    var $2973 = self.code;
                                    var $2974 = self.val;
                                    var self = Kind$Parser$text$("=", $2972, $2973);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2976 = self.idx;
                                            var $2977 = self.code;
                                            var $2978 = self.err;
                                            var $2979 = Parser$Reply$error$($2976, $2977, $2978);
                                            var $2975 = $2979;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2980 = self.idx;
                                            var $2981 = self.code;
                                            var self = Kind$Parser$term$($2980, $2981);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2983 = self.idx;
                                                    var $2984 = self.code;
                                                    var $2985 = self.err;
                                                    var $2986 = Parser$Reply$error$($2983, $2984, $2985);
                                                    var $2982 = $2986;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2987 = self.idx;
                                                    var $2988 = self.code;
                                                    var $2989 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $2987, $2988);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2991 = self.idx;
                                                            var $2992 = self.code;
                                                            var $2993 = self.err;
                                                            var $2994 = Parser$Reply$error$($2991, $2992, $2993);
                                                            var $2990 = $2994;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2995 = self.idx;
                                                            var $2996 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($2995)($2996);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2998 = self.idx;
                                                                    var $2999 = self.code;
                                                                    var $3000 = self.err;
                                                                    var $3001 = Parser$Reply$error$($2998, $2999, $3000);
                                                                    var $2997 = $3001;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3002 = self.idx;
                                                                    var $3003 = self.code;
                                                                    var $3004 = self.val;
                                                                    var self = Kind$Parser$stop$($2959, $3002, $3003);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3006 = self.idx;
                                                                            var $3007 = self.code;
                                                                            var $3008 = self.err;
                                                                            var $3009 = Parser$Reply$error$($3006, $3007, $3008);
                                                                            var $3005 = $3009;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3010 = self.idx;
                                                                            var $3011 = self.code;
                                                                            var $3012 = self.val;
                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                            var _term$32 = Kind$Term$app$(_term$31, $2989);
                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($2974, (_x$33 => {
                                                                                var $3014 = $3004;
                                                                                return $3014;
                                                                            })));
                                                                            var $3013 = Parser$Reply$value$($3010, $3011, Kind$Term$ori$($3012, _term$33));
                                                                            var $3005 = $3013;
                                                                            break;
                                                                    };
                                                                    var $2997 = $3005;
                                                                    break;
                                                            };
                                                            var $2990 = $2997;
                                                            break;
                                                    };
                                                    var $2982 = $2990;
                                                    break;
                                            };
                                            var $2975 = $2982;
                                            break;
                                    };
                                    var $2967 = $2975;
                                    break;
                            };
                            var $2960 = $2967;
                            break;
                    };
                    var $2952 = $2960;
                    break;
            };
            return $2952;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3016 = self.idx;
                    var $3017 = self.code;
                    var $3018 = self.err;
                    var $3019 = Parser$Reply$error$($3016, $3017, $3018);
                    var $3015 = $3019;
                    break;
                case 'Parser.Reply.value':
                    var $3020 = self.idx;
                    var $3021 = self.code;
                    var $3022 = self.val;
                    var self = Kind$Parser$text$("let ", $3020, $3021);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3024 = self.idx;
                            var $3025 = self.code;
                            var $3026 = self.err;
                            var $3027 = Parser$Reply$error$($3024, $3025, $3026);
                            var $3023 = $3027;
                            break;
                        case 'Parser.Reply.value':
                            var $3028 = self.idx;
                            var $3029 = self.code;
                            var self = Kind$Parser$name1$($3028, $3029);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3031 = self.idx;
                                    var $3032 = self.code;
                                    var $3033 = self.err;
                                    var $3034 = Parser$Reply$error$($3031, $3032, $3033);
                                    var $3030 = $3034;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3035 = self.idx;
                                    var $3036 = self.code;
                                    var $3037 = self.val;
                                    var self = Kind$Parser$text$("=", $3035, $3036);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3039 = self.idx;
                                            var $3040 = self.code;
                                            var $3041 = self.err;
                                            var $3042 = Parser$Reply$error$($3039, $3040, $3041);
                                            var $3038 = $3042;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3043 = self.idx;
                                            var $3044 = self.code;
                                            var self = Kind$Parser$term$($3043, $3044);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3046 = self.idx;
                                                    var $3047 = self.code;
                                                    var $3048 = self.err;
                                                    var $3049 = Parser$Reply$error$($3046, $3047, $3048);
                                                    var $3045 = $3049;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3050 = self.idx;
                                                    var $3051 = self.code;
                                                    var $3052 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3050, $3051);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3054 = self.idx;
                                                            var $3055 = self.code;
                                                            var $3056 = self.err;
                                                            var $3057 = Parser$Reply$error$($3054, $3055, $3056);
                                                            var $3053 = $3057;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3058 = self.idx;
                                                            var $3059 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3058)($3059);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3061 = self.idx;
                                                                    var $3062 = self.code;
                                                                    var $3063 = self.err;
                                                                    var $3064 = Parser$Reply$error$($3061, $3062, $3063);
                                                                    var $3060 = $3064;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3065 = self.idx;
                                                                    var $3066 = self.code;
                                                                    var $3067 = self.val;
                                                                    var self = Kind$Parser$stop$($3022, $3065, $3066);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3069 = self.idx;
                                                                            var $3070 = self.code;
                                                                            var $3071 = self.err;
                                                                            var $3072 = Parser$Reply$error$($3069, $3070, $3071);
                                                                            var $3068 = $3072;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3073 = self.idx;
                                                                            var $3074 = self.code;
                                                                            var $3075 = self.val;
                                                                            var $3076 = Parser$Reply$value$($3073, $3074, Kind$Term$ori$($3075, Kind$Term$let$($3037, $3052, (_x$28 => {
                                                                                var $3077 = $3067;
                                                                                return $3077;
                                                                            }))));
                                                                            var $3068 = $3076;
                                                                            break;
                                                                    };
                                                                    var $3060 = $3068;
                                                                    break;
                                                            };
                                                            var $3053 = $3060;
                                                            break;
                                                    };
                                                    var $3045 = $3053;
                                                    break;
                                            };
                                            var $3038 = $3045;
                                            break;
                                    };
                                    var $3030 = $3038;
                                    break;
                            };
                            var $3023 = $3030;
                            break;
                    };
                    var $3015 = $3023;
                    break;
            };
            return $3015;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3079 = self.idx;
                    var $3080 = self.code;
                    var $3081 = self.err;
                    var $3082 = Parser$Reply$error$($3079, $3080, $3081);
                    var $3078 = $3082;
                    break;
                case 'Parser.Reply.value':
                    var $3083 = self.idx;
                    var $3084 = self.code;
                    var $3085 = self.val;
                    var self = Kind$Parser$text$("return ", $3083, $3084);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3087 = self.idx;
                            var $3088 = self.code;
                            var $3089 = self.err;
                            var $3090 = Parser$Reply$error$($3087, $3088, $3089);
                            var $3086 = $3090;
                            break;
                        case 'Parser.Reply.value':
                            var $3091 = self.idx;
                            var $3092 = self.code;
                            var self = Kind$Parser$term$($3091, $3092);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3094 = self.idx;
                                    var $3095 = self.code;
                                    var $3096 = self.err;
                                    var $3097 = Parser$Reply$error$($3094, $3095, $3096);
                                    var $3093 = $3097;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3098 = self.idx;
                                    var $3099 = self.code;
                                    var $3100 = self.val;
                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3098, $3099);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3102 = self.idx;
                                            var $3103 = self.code;
                                            var $3104 = self.err;
                                            var $3105 = Parser$Reply$error$($3102, $3103, $3104);
                                            var $3101 = $3105;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3106 = self.idx;
                                            var $3107 = self.code;
                                            var self = Kind$Parser$stop$($3085, $3106, $3107);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3109 = self.idx;
                                                    var $3110 = self.code;
                                                    var $3111 = self.err;
                                                    var $3112 = Parser$Reply$error$($3109, $3110, $3111);
                                                    var $3108 = $3112;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3113 = self.idx;
                                                    var $3114 = self.code;
                                                    var $3115 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, $3100);
                                                    var $3116 = Parser$Reply$value$($3113, $3114, Kind$Term$ori$($3115, _term$22));
                                                    var $3108 = $3116;
                                                    break;
                                            };
                                            var $3101 = $3108;
                                            break;
                                    };
                                    var $3093 = $3101;
                                    break;
                            };
                            var $3086 = $3093;
                            break;
                    };
                    var $3078 = $3086;
                    break;
            };
            return $3078;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3118 = self.idx;
                    var $3119 = self.code;
                    var $3120 = self.err;
                    var $3121 = Parser$Reply$error$($3118, $3119, $3120);
                    var $3117 = $3121;
                    break;
                case 'Parser.Reply.value':
                    var $3122 = self.idx;
                    var $3123 = self.code;
                    var $3124 = self.val;
                    var self = Kind$Parser$term$($3122, $3123);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3126 = self.idx;
                            var $3127 = self.code;
                            var $3128 = self.err;
                            var $3129 = Parser$Reply$error$($3126, $3127, $3128);
                            var $3125 = $3129;
                            break;
                        case 'Parser.Reply.value':
                            var $3130 = self.idx;
                            var $3131 = self.code;
                            var $3132 = self.val;
                            var self = Parser$maybe$(Kind$Parser$text(";"), $3130, $3131);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3134 = self.idx;
                                    var $3135 = self.code;
                                    var $3136 = self.err;
                                    var $3137 = Parser$Reply$error$($3134, $3135, $3136);
                                    var $3133 = $3137;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3138 = self.idx;
                                    var $3139 = self.code;
                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3138)($3139);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3141 = self.idx;
                                            var $3142 = self.code;
                                            var $3143 = self.err;
                                            var $3144 = Parser$Reply$error$($3141, $3142, $3143);
                                            var $3140 = $3144;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3145 = self.idx;
                                            var $3146 = self.code;
                                            var $3147 = self.val;
                                            var self = Kind$Parser$stop$($3124, $3145, $3146);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3149 = self.idx;
                                                    var $3150 = self.code;
                                                    var $3151 = self.err;
                                                    var $3152 = Parser$Reply$error$($3149, $3150, $3151);
                                                    var $3148 = $3152;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3153 = self.idx;
                                                    var $3154 = self.code;
                                                    var $3155 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));
                                                    var _term$23 = Kind$Term$app$(_term$22, $3132);
                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$("", (_x$24 => {
                                                        var $3157 = $3147;
                                                        return $3157;
                                                    })));
                                                    var $3156 = Parser$Reply$value$($3153, $3154, Kind$Term$ori$($3155, _term$24));
                                                    var $3148 = $3156;
                                                    break;
                                            };
                                            var $3140 = $3148;
                                            break;
                                    };
                                    var $3133 = $3140;
                                    break;
                            };
                            var $3125 = $3133;
                            break;
                    };
                    var $3117 = $3125;
                    break;
            };
            return $3117;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3159 = self.idx;
                    var $3160 = self.code;
                    var $3161 = self.err;
                    var $3162 = Parser$Reply$error$($3159, $3160, $3161);
                    var $3158 = $3162;
                    break;
                case 'Parser.Reply.value':
                    var $3163 = self.idx;
                    var $3164 = self.code;
                    var $3165 = self.val;
                    var self = Parser$maybe$(Kind$Parser$text(";"), $3163, $3164);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3167 = self.idx;
                            var $3168 = self.code;
                            var $3169 = self.err;
                            var $3170 = Parser$Reply$error$($3167, $3168, $3169);
                            var $3166 = $3170;
                            break;
                        case 'Parser.Reply.value':
                            var $3171 = self.idx;
                            var $3172 = self.code;
                            var $3173 = Parser$Reply$value$($3171, $3172, $3165);
                            var $3166 = $3173;
                            break;
                    };
                    var $3158 = $3166;
                    break;
            };
            return $3158;
        }), List$nil))))));
        return $2951;
    };
    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);

    function Kind$Parser$do$(_idx$1, _code$2) {
        var self = Parser$maybe$(Kind$Parser$text("do "), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3175 = self.idx;
                var $3176 = self.code;
                var $3177 = self.err;
                var $3178 = Parser$Reply$error$($3175, $3176, $3177);
                var $3174 = $3178;
                break;
            case 'Parser.Reply.value':
                var $3179 = self.idx;
                var $3180 = self.code;
                var self = Kind$Parser$name1$($3179, $3180);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3182 = self.idx;
                        var $3183 = self.code;
                        var $3184 = self.err;
                        var $3185 = Parser$Reply$error$($3182, $3183, $3184);
                        var $3181 = $3185;
                        break;
                    case 'Parser.Reply.value':
                        var $3186 = self.idx;
                        var $3187 = self.code;
                        var $3188 = self.val;
                        var self = Parser$text$(" {", $3186, $3187);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3190 = self.idx;
                                var $3191 = self.code;
                                var $3192 = self.err;
                                var $3193 = Parser$Reply$error$($3190, $3191, $3192);
                                var $3189 = $3193;
                                break;
                            case 'Parser.Reply.value':
                                var $3194 = self.idx;
                                var $3195 = self.code;
                                var self = Kind$Parser$do$statements$($3188)($3194)($3195);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3197 = self.idx;
                                        var $3198 = self.code;
                                        var $3199 = self.err;
                                        var $3200 = Parser$Reply$error$($3197, $3198, $3199);
                                        var $3196 = $3200;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3201 = self.idx;
                                        var $3202 = self.code;
                                        var $3203 = self.val;
                                        var self = Kind$Parser$text$("}", $3201, $3202);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3205 = self.idx;
                                                var $3206 = self.code;
                                                var $3207 = self.err;
                                                var $3208 = Parser$Reply$error$($3205, $3206, $3207);
                                                var $3204 = $3208;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3209 = self.idx;
                                                var $3210 = self.code;
                                                var $3211 = Parser$Reply$value$($3209, $3210, $3203);
                                                var $3204 = $3211;
                                                break;
                                        };
                                        var $3196 = $3204;
                                        break;
                                };
                                var $3189 = $3196;
                                break;
                        };
                        var $3181 = $3189;
                        break;
                };
                var $3174 = $3181;
                break;
        };
        return $3174;
    };
    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);

    function Parser$try$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3213 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);
                var $3212 = $3213;
                break;
            case 'Parser.Reply.value':
                var $3214 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);
                var $3212 = $3214;
                break;
        };
        return $3212;
    };
    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3215 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3215;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {
        var self = Parser$try$(_test$2, _idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3217 = self.idx;
                var $3218 = self.code;
                var $3219 = self.err;
                var $3220 = Parser$Reply$error$($3217, $3218, $3219);
                var $3216 = $3220;
                break;
            case 'Parser.Reply.value':
                var $3221 = self.idx;
                var $3222 = self.code;
                var $3223 = self.val;
                var self = $3223;
                if (self) {
                    var $3225 = Parser$fail("Avoided.");
                    var $3224 = $3225;
                } else {
                    var $3226 = _parse$3;
                    var $3224 = $3226;
                };
                var $3224 = $3224($3221)($3222);
                var $3216 = $3224;
                break;
        };
        return $3216;
    };
    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);

    function Maybe$default$(_m$2, _a$3) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $3228 = self.value;
                var $3229 = $3228;
                var $3227 = $3229;
                break;
            case 'Maybe.none':
                var $3230 = _a$3;
                var $3227 = $3230;
                break;
        };
        return $3227;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Kind$Term$nat$(_natx$1) {
        var $3231 = ({
            _: 'Kind.Term.nat',
            'natx': _natx$1
        });
        return $3231;
    };
    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);

    function Kind$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $3233 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));
            var $3232 = $3233;
        } else {
            var $3234 = (self - 1n);
            var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));
            var _argm$4 = Kind$Term$nat$($3234);
            var $3235 = Kind$Term$app$(_func$3, _argm$4);
            var $3232 = $3235;
        };
        return $3232;
    };
    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Kind$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3237 = self.slice(0, -1);
                var $3238 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")), Kind$Term$unroll_chr$bits$($3237));
                var $3236 = $3238;
                break;
            case 'i':
                var $3239 = self.slice(0, -1);
                var $3240 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")), Kind$Term$unroll_chr$bits$($3239));
                var $3236 = $3240;
                break;
            case 'e':
                var $3241 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));
                var $3236 = $3241;
                break;
        };
        return $3236;
    };
    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);

    function Kind$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));
        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));
        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")), _term$5);
        var $3242 = _term$6;
        return $3242;
    };
    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);

    function Kind$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $3244 = Kind$Term$ref$(Kind$Name$read$("String.nil"));
            var $3243 = $3244;
        } else {
            var $3245 = self.charCodeAt(0);
            var $3246 = self.slice(1);
            var _char$4 = Kind$Term$chr$($3245);
            var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));
            var _term$6 = Kind$Term$app$(_term$5, _char$4);
            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($3246));
            var $3247 = _term$7;
            var $3243 = $3247;
        };
        return $3243;
    };
    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);

    function Kind$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $3249 = self.name;
                var self = Kind$Map$get$($3249, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $3251 = self.value;
                        var self = $3251;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $3253 = self.term;
                                var $3254 = Kind$Term$reduce$($3253, _defs$2);
                                var $3252 = $3254;
                                break;
                        };
                        var $3250 = $3252;
                        break;
                    case 'Maybe.none':
                        var $3255 = Kind$Term$ref$($3249);
                        var $3250 = $3255;
                        break;
                };
                var $3248 = $3250;
                break;
            case 'Kind.Term.app':
                var $3256 = self.func;
                var $3257 = self.argm;
                var _func$5 = Kind$Term$reduce$($3256, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $3259 = self.body;
                        var $3260 = Kind$Term$reduce$($3259($3257), _defs$2);
                        var $3258 = $3260;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $3261 = _term$1;
                        var $3258 = $3261;
                        break;
                };
                var $3248 = $3258;
                break;
            case 'Kind.Term.let':
                var $3262 = self.expr;
                var $3263 = self.body;
                var $3264 = Kind$Term$reduce$($3263($3262), _defs$2);
                var $3248 = $3264;
                break;
            case 'Kind.Term.def':
                var $3265 = self.expr;
                var $3266 = self.body;
                var $3267 = Kind$Term$reduce$($3266($3265), _defs$2);
                var $3248 = $3267;
                break;
            case 'Kind.Term.ann':
                var $3268 = self.term;
                var $3269 = Kind$Term$reduce$($3268, _defs$2);
                var $3248 = $3269;
                break;
            case 'Kind.Term.nat':
                var $3270 = self.natx;
                var $3271 = Kind$Term$reduce$(Kind$Term$unroll_nat$($3270), _defs$2);
                var $3248 = $3271;
                break;
            case 'Kind.Term.chr':
                var $3272 = self.chrx;
                var $3273 = Kind$Term$reduce$(Kind$Term$unroll_chr$($3272), _defs$2);
                var $3248 = $3273;
                break;
            case 'Kind.Term.str':
                var $3274 = self.strx;
                var $3275 = Kind$Term$reduce$(Kind$Term$unroll_str$($3274), _defs$2);
                var $3248 = $3275;
                break;
            case 'Kind.Term.ori':
                var $3276 = self.expr;
                var $3277 = Kind$Term$reduce$($3276, _defs$2);
                var $3248 = $3277;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.cse':
                var $3278 = _term$1;
                var $3248 = $3278;
                break;
        };
        return $3248;
    };
    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);
    const BitsMap$new = ({
        _: 'BitsMap.new'
    });
    const Kind$Map$new = BitsMap$new;

    function Kind$Term$extract_name$(_term$1) {
        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
                var $3280 = self.name;
                var $3281 = $3280;
                var $3279 = $3281;
                break;
            case 'Kind.Term.ref':
                var $3282 = self.name;
                var $3283 = $3282;
                var $3279 = $3283;
                break;
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $3284 = "self";
                var $3279 = $3284;
                break;
        };
        return $3279;
    };
    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);

    function Kind$Ann$new$(_name$1, _term$2, _type$3) {
        var $3285 = ({
            _: 'Kind.Ann.new',
            'name': _name$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3285;
    };
    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);
    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {
        var self = Kind$Parser$text$("with ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3287 = self.idx;
                var $3288 = self.code;
                var $3289 = self.err;
                var $3290 = Parser$Reply$error$($3287, $3288, $3289);
                var $3286 = $3290;
                break;
            case 'Parser.Reply.value':
                var $3291 = self.idx;
                var $3292 = self.code;
                var $3293 = Parser$many$((_idx$6 => _code$7 => {
                    var self = Kind$Parser$name1$(_idx$6, _code$7);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3295 = self.idx;
                            var $3296 = self.code;
                            var $3297 = self.err;
                            var $3298 = Parser$Reply$error$($3295, $3296, $3297);
                            var $3294 = $3298;
                            break;
                        case 'Parser.Reply.value':
                            var $3299 = self.idx;
                            var $3300 = self.code;
                            var $3301 = self.val;
                            var self = Parser$maybe$((_idx$11 => _code$12 => {
                                var self = Kind$Parser$text$(":", _idx$11, _code$12);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3304 = self.idx;
                                        var $3305 = self.code;
                                        var $3306 = self.err;
                                        var $3307 = Parser$Reply$error$($3304, $3305, $3306);
                                        var $3303 = $3307;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3308 = self.idx;
                                        var $3309 = self.code;
                                        var self = Kind$Parser$term$($3308, $3309);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3311 = self.idx;
                                                var $3312 = self.code;
                                                var $3313 = self.err;
                                                var $3314 = Parser$Reply$error$($3311, $3312, $3313);
                                                var $3310 = $3314;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3315 = self.idx;
                                                var $3316 = self.code;
                                                var $3317 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3315, $3316);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3319 = self.idx;
                                                        var $3320 = self.code;
                                                        var $3321 = self.err;
                                                        var $3322 = Parser$Reply$error$($3319, $3320, $3321);
                                                        var $3318 = $3322;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3323 = self.idx;
                                                        var $3324 = self.code;
                                                        var $3325 = Parser$Reply$value$($3323, $3324, $3317);
                                                        var $3318 = $3325;
                                                        break;
                                                };
                                                var $3310 = $3318;
                                                break;
                                        };
                                        var $3303 = $3310;
                                        break;
                                };
                                return $3303;
                            }), $3299, $3300);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3326 = self.idx;
                                    var $3327 = self.code;
                                    var $3328 = self.err;
                                    var $3329 = Parser$Reply$error$($3326, $3327, $3328);
                                    var $3302 = $3329;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3330 = self.idx;
                                    var $3331 = self.code;
                                    var $3332 = self.val;
                                    var $3333 = Parser$Reply$value$($3330, $3331, Kind$Ann$new$($3301, Kind$Term$ref$($3301), $3332));
                                    var $3302 = $3333;
                                    break;
                            };
                            var $3294 = $3302;
                            break;
                    };
                    return $3294;
                }))($3291)($3292);
                var $3286 = $3293;
                break;
        };
        return $3286;
    }), List$cons$((_idx$1 => _code$2 => {
        var $3334 = Parser$Reply$value$(_idx$1, _code$2, List$nil);
        return $3334;
    }), List$nil)));

    function Kind$Parser$case$case$(_idx$1, _code$2) {
        var self = Parser$until$(Kind$Parser$text(":"), Kind$Parser$name1)(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3336 = self.idx;
                var $3337 = self.code;
                var $3338 = self.err;
                var $3339 = Parser$Reply$error$($3336, $3337, $3338);
                var $3335 = $3339;
                break;
            case 'Parser.Reply.value':
                var $3340 = self.idx;
                var $3341 = self.code;
                var $3342 = self.val;
                var self = Kind$Parser$term$($3340, $3341);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3344 = self.idx;
                        var $3345 = self.code;
                        var $3346 = self.err;
                        var $3347 = Parser$Reply$error$($3344, $3345, $3346);
                        var $3343 = $3347;
                        break;
                    case 'Parser.Reply.value':
                        var $3348 = self.idx;
                        var $3349 = self.code;
                        var $3350 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $3348, $3349);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3352 = self.idx;
                                var $3353 = self.code;
                                var $3354 = self.err;
                                var $3355 = Parser$Reply$error$($3352, $3353, $3354);
                                var $3351 = $3355;
                                break;
                            case 'Parser.Reply.value':
                                var $3356 = self.idx;
                                var $3357 = self.code;
                                var $3358 = Parser$Reply$value$($3356, $3357, Pair$new$($3342, $3350));
                                var $3351 = $3358;
                                break;
                        };
                        var $3343 = $3351;
                        break;
                };
                var $3335 = $3343;
                break;
        };
        return $3335;
    };
    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);
    const Debug$log = a0 => a1 => ((console.log(a0), a1()));

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $3360 = self.snd;
                var $3361 = $3360;
                var $3359 = $3361;
                break;
        };
        return $3359;
    };
    const Pair$snd = x0 => Pair$snd$(x0);
    const Kind$Map = null;

    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {
        var $3362 = ({
            _: 'BitsMap.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $3362;
    };
    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);

    function BitsMap$set$(_bits$2, _val$3, _map$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3364 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3366 = self.val;
                        var $3367 = self.lft;
                        var $3368 = self.rgt;
                        var $3369 = BitsMap$tie$($3366, BitsMap$set$($3364, _val$3, $3367), $3368);
                        var $3365 = $3369;
                        break;
                    case 'BitsMap.new':
                        var $3370 = BitsMap$tie$(Maybe$none, BitsMap$set$($3364, _val$3, BitsMap$new), BitsMap$new);
                        var $3365 = $3370;
                        break;
                };
                var $3363 = $3365;
                break;
            case 'i':
                var $3371 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3373 = self.val;
                        var $3374 = self.lft;
                        var $3375 = self.rgt;
                        var $3376 = BitsMap$tie$($3373, $3374, BitsMap$set$($3371, _val$3, $3375));
                        var $3372 = $3376;
                        break;
                    case 'BitsMap.new':
                        var $3377 = BitsMap$tie$(Maybe$none, BitsMap$new, BitsMap$set$($3371, _val$3, BitsMap$new));
                        var $3372 = $3377;
                        break;
                };
                var $3363 = $3372;
                break;
            case 'e':
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3379 = self.lft;
                        var $3380 = self.rgt;
                        var $3381 = BitsMap$tie$(Maybe$some$(_val$3), $3379, $3380);
                        var $3378 = $3381;
                        break;
                    case 'BitsMap.new':
                        var $3382 = BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new);
                        var $3378 = $3382;
                        break;
                };
                var $3363 = $3378;
                break;
        };
        return $3363;
    };
    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);

    function Kind$Map$set$(_name$2, _val$3, _map$4) {
        var $3383 = BitsMap$set$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $3383;
    };
    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);

    function Kind$Parser$case$group$(_dflt$1, _cses$2) {
        var self = _cses$2;
        switch (self._) {
            case 'List.cons':
                var $3385 = self.head;
                var $3386 = self.tail;
                var _map$5 = Kind$Parser$case$group$(_dflt$1, $3386);
                var self = $3385;
                switch (self._) {
                    case 'Pair.new':
                        var $3388 = self.fst;
                        var $3389 = self.snd;
                        var self = $3388;
                        switch (self._) {
                            case 'List.cons':
                                var $3391 = self.head;
                                var $3392 = self.tail;
                                var _rest$10 = Maybe$default$(Kind$Map$get$($3391, _map$5), List$nil);
                                var $3393 = Kind$Map$set$($3391, List$cons$(Pair$new$($3392, $3389), _rest$10), _map$5);
                                var $3390 = $3393;
                                break;
                            case 'List.nil':
                                var $3394 = _map$5;
                                var $3390 = $3394;
                                break;
                        };
                        var $3387 = $3390;
                        break;
                };
                var $3384 = $3387;
                break;
            case 'List.nil':
                var self = _dflt$1;
                switch (self._) {
                    case 'Maybe.some':
                        var $3396 = self.value;
                        var $3397 = Kind$Map$set$("_", List$cons$(Pair$new$(List$nil, $3396), List$nil), Kind$Map$new);
                        var $3395 = $3397;
                        break;
                    case 'Maybe.none':
                        var $3398 = Kind$Map$new;
                        var $3395 = $3398;
                        break;
                };
                var $3384 = $3395;
                break;
        };
        return $3384;
    };
    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $3400 = self.fst;
                var $3401 = $3400;
                var $3399 = $3401;
                break;
        };
        return $3399;
    };
    const Pair$fst = x0 => Pair$fst$(x0);

    function BitsMap$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'BitsMap.tie':
                var $3403 = self.val;
                var $3404 = self.lft;
                var $3405 = self.rgt;
                var self = $3403;
                switch (self._) {
                    case 'Maybe.some':
                        var $3407 = self.value;
                        var $3408 = Maybe$some$(_fn$3($3407));
                        var _val$8 = $3408;
                        break;
                    case 'Maybe.none':
                        var $3409 = Maybe$none;
                        var _val$8 = $3409;
                        break;
                };
                var _lft$9 = BitsMap$map$(_fn$3, $3404);
                var _rgt$10 = BitsMap$map$(_fn$3, $3405);
                var $3406 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);
                var $3402 = $3406;
                break;
            case 'BitsMap.new':
                var $3410 = BitsMap$new;
                var $3402 = $3410;
                break;
        };
        return $3402;
    };
    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);

    function Kind$Map$map$(_fn$3, _map$4) {
        var $3411 = BitsMap$map$(_fn$3, _map$4);
        return $3411;
    };
    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);

    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $3412 = ({
            _: 'Kind.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $3412;
    };
    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {
        var self = _vals$1;
        switch (self._) {
            case 'List.cons':
                var $3414 = self.head;
                var $3415 = self.tail;
                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);
                var _name$10 = Pair$fst$($3414);
                var _expr$11 = Pair$snd$($3414);
                var _cses$12 = Kind$Map$map$((_cses$12 => {
                    var $3417 = Kind$Parser$case$build$($3415, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);
                    return $3417;
                }), _group$9);
                var $3416 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));
                var $3413 = $3416;
                break;
            case 'List.nil':
                var self = _cses$3;
                switch (self._) {
                    case 'List.cons':
                        var $3419 = self.head;
                        var $3420 = Pair$snd$($3419);
                        var $3418 = $3420;
                        break;
                    case 'List.nil':
                        var $3421 = ((console.log(("MISSING CASE" + String$nil)), (_x$7 => {
                            var $3422 = Kind$Term$ref$("missing_case");
                            return $3422;
                        })()));
                        var $3418 = $3421;
                        break;
                };
                var $3413 = $3418;
                break;
        };
        return $3413;
    };
    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3424 = self.idx;
                var $3425 = self.code;
                var $3426 = self.err;
                var $3427 = Parser$Reply$error$($3424, $3425, $3426);
                var $3423 = $3427;
                break;
            case 'Parser.Reply.value':
                var $3428 = self.idx;
                var $3429 = self.code;
                var $3430 = self.val;
                var self = Kind$Parser$text$("case ", $3428, $3429);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3432 = self.idx;
                        var $3433 = self.code;
                        var $3434 = self.err;
                        var $3435 = Parser$Reply$error$($3432, $3433, $3434);
                        var $3431 = $3435;
                        break;
                    case 'Parser.Reply.value':
                        var $3436 = self.idx;
                        var $3437 = self.code;
                        var self = Parser$many1$((_idx$9 => _code$10 => {
                            var self = Parser$avoiding$(Kind$Parser$text("{"), Kind$Parser$term, _idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3440 = self.idx;
                                    var $3441 = self.code;
                                    var $3442 = self.err;
                                    var $3443 = Parser$Reply$error$($3440, $3441, $3442);
                                    var $3439 = $3443;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3444 = self.idx;
                                    var $3445 = self.code;
                                    var $3446 = self.val;
                                    var self = Parser$maybe$((_idx$14 => _code$15 => {
                                        var self = Kind$Parser$text$("as", _idx$14, _code$15);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3449 = self.idx;
                                                var $3450 = self.code;
                                                var $3451 = self.err;
                                                var $3452 = Parser$Reply$error$($3449, $3450, $3451);
                                                var $3448 = $3452;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3453 = self.idx;
                                                var $3454 = self.code;
                                                var self = Kind$Parser$name1$($3453, $3454);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3456 = self.idx;
                                                        var $3457 = self.code;
                                                        var $3458 = self.err;
                                                        var $3459 = Parser$Reply$error$($3456, $3457, $3458);
                                                        var $3455 = $3459;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3460 = self.idx;
                                                        var $3461 = self.code;
                                                        var $3462 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $3460, $3461);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3464 = self.idx;
                                                                var $3465 = self.code;
                                                                var $3466 = self.err;
                                                                var $3467 = Parser$Reply$error$($3464, $3465, $3466);
                                                                var $3463 = $3467;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3468 = self.idx;
                                                                var $3469 = self.code;
                                                                var $3470 = Parser$Reply$value$($3468, $3469, $3462);
                                                                var $3463 = $3470;
                                                                break;
                                                        };
                                                        var $3455 = $3463;
                                                        break;
                                                };
                                                var $3448 = $3455;
                                                break;
                                        };
                                        return $3448;
                                    }), $3444, $3445);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3471 = self.idx;
                                            var $3472 = self.code;
                                            var $3473 = self.err;
                                            var $3474 = Parser$Reply$error$($3471, $3472, $3473);
                                            var $3447 = $3474;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3475 = self.idx;
                                            var $3476 = self.code;
                                            var $3477 = self.val;
                                            var _name$17 = Maybe$default$($3477, Kind$Term$extract_name$($3446));
                                            var $3478 = Parser$Reply$value$($3475, $3476, Pair$new$(_name$17, $3446));
                                            var $3447 = $3478;
                                            break;
                                    };
                                    var $3439 = $3447;
                                    break;
                            };
                            return $3439;
                        }), $3436, $3437);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3479 = self.idx;
                                var $3480 = self.code;
                                var $3481 = self.err;
                                var $3482 = Parser$Reply$error$($3479, $3480, $3481);
                                var $3438 = $3482;
                                break;
                            case 'Parser.Reply.value':
                                var $3483 = self.idx;
                                var $3484 = self.code;
                                var $3485 = self.val;
                                var self = Kind$Parser$case$with($3483)($3484);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3487 = self.idx;
                                        var $3488 = self.code;
                                        var $3489 = self.err;
                                        var $3490 = Parser$Reply$error$($3487, $3488, $3489);
                                        var $3486 = $3490;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3491 = self.idx;
                                        var $3492 = self.code;
                                        var $3493 = self.val;
                                        var self = Kind$Parser$text$("{", $3491, $3492);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3495 = self.idx;
                                                var $3496 = self.code;
                                                var $3497 = self.err;
                                                var $3498 = Parser$Reply$error$($3495, $3496, $3497);
                                                var $3494 = $3498;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3499 = self.idx;
                                                var $3500 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$case$case)($3499)($3500);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3502 = self.idx;
                                                        var $3503 = self.code;
                                                        var $3504 = self.err;
                                                        var $3505 = Parser$Reply$error$($3502, $3503, $3504);
                                                        var $3501 = $3505;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3506 = self.idx;
                                                        var $3507 = self.code;
                                                        var $3508 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text("!"), $3506, $3507);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3510 = self.idx;
                                                                var $3511 = self.code;
                                                                var $3512 = self.err;
                                                                var $3513 = Parser$Reply$error$($3510, $3511, $3512);
                                                                var $3509 = $3513;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3514 = self.idx;
                                                                var $3515 = self.code;
                                                                var $3516 = self.val;
                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {
                                                                    var self = Kind$Parser$text$("default ", _idx$24, _code$25);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3519 = self.idx;
                                                                            var $3520 = self.code;
                                                                            var $3521 = self.err;
                                                                            var $3522 = Parser$Reply$error$($3519, $3520, $3521);
                                                                            var $3518 = $3522;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3523 = self.idx;
                                                                            var $3524 = self.code;
                                                                            var self = Kind$Parser$term$($3523, $3524);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $3526 = self.idx;
                                                                                    var $3527 = self.code;
                                                                                    var $3528 = self.err;
                                                                                    var $3529 = Parser$Reply$error$($3526, $3527, $3528);
                                                                                    var $3525 = $3529;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $3530 = self.idx;
                                                                                    var $3531 = self.code;
                                                                                    var $3532 = self.val;
                                                                                    var $3533 = Parser$Reply$value$($3530, $3531, $3532);
                                                                                    var $3525 = $3533;
                                                                                    break;
                                                                            };
                                                                            var $3518 = $3525;
                                                                            break;
                                                                    };
                                                                    return $3518;
                                                                }), $3514, $3515);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3534 = self.idx;
                                                                        var $3535 = self.code;
                                                                        var $3536 = self.err;
                                                                        var $3537 = Parser$Reply$error$($3534, $3535, $3536);
                                                                        var $3517 = $3537;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3538 = self.idx;
                                                                        var $3539 = self.code;
                                                                        var $3540 = self.val;
                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {
                                                                            var self = Kind$Parser$text$(":", _idx$27, _code$28);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $3543 = self.idx;
                                                                                    var $3544 = self.code;
                                                                                    var $3545 = self.err;
                                                                                    var $3546 = Parser$Reply$error$($3543, $3544, $3545);
                                                                                    var $3542 = $3546;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $3547 = self.idx;
                                                                                    var $3548 = self.code;
                                                                                    var $3549 = Kind$Parser$term$($3547, $3548);
                                                                                    var $3542 = $3549;
                                                                                    break;
                                                                            };
                                                                            return $3542;
                                                                        }), $3538, $3539);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $3550 = self.idx;
                                                                                var $3551 = self.code;
                                                                                var $3552 = self.err;
                                                                                var $3553 = Parser$Reply$error$($3550, $3551, $3552);
                                                                                var $3541 = $3553;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $3554 = self.idx;
                                                                                var $3555 = self.code;
                                                                                var $3556 = self.val;
                                                                                var self = $3556;
                                                                                switch (self._) {
                                                                                    case 'Maybe.some':
                                                                                        var $3558 = self.value;
                                                                                        var $3559 = Maybe$some$($3558);
                                                                                        var _moti$30 = $3559;
                                                                                        break;
                                                                                    case 'Maybe.none':
                                                                                        var self = $3516;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.none':
                                                                                                var $3561 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                                                var $3560 = $3561;
                                                                                                break;
                                                                                            case 'Maybe.some':
                                                                                                var $3562 = Maybe$none;
                                                                                                var $3560 = $3562;
                                                                                                break;
                                                                                        };
                                                                                        var _moti$30 = $3560;
                                                                                        break;
                                                                                };
                                                                                var self = Kind$Parser$stop$($3430, $3554, $3555);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $3563 = self.idx;
                                                                                        var $3564 = self.code;
                                                                                        var $3565 = self.err;
                                                                                        var $3566 = Parser$Reply$error$($3563, $3564, $3565);
                                                                                        var $3557 = $3566;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $3567 = self.idx;
                                                                                        var $3568 = self.code;
                                                                                        var $3569 = self.val;
                                                                                        var $3570 = Parser$Reply$value$($3567, $3568, Kind$Parser$case$build$($3485, $3493, $3508, $3540, _moti$30, $3569));
                                                                                        var $3557 = $3570;
                                                                                        break;
                                                                                };
                                                                                var $3541 = $3557;
                                                                                break;
                                                                        };
                                                                        var $3517 = $3541;
                                                                        break;
                                                                };
                                                                var $3509 = $3517;
                                                                break;
                                                        };
                                                        var $3501 = $3509;
                                                        break;
                                                };
                                                var $3494 = $3501;
                                                break;
                                        };
                                        var $3486 = $3494;
                                        break;
                                };
                                var $3438 = $3486;
                                break;
                        };
                        var $3431 = $3438;
                        break;
                };
                var $3423 = $3431;
                break;
        };
        return $3423;
    };
    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);

    function Kind$Parser$open$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3572 = self.idx;
                var $3573 = self.code;
                var $3574 = self.err;
                var $3575 = Parser$Reply$error$($3572, $3573, $3574);
                var $3571 = $3575;
                break;
            case 'Parser.Reply.value':
                var $3576 = self.idx;
                var $3577 = self.code;
                var $3578 = self.val;
                var self = Kind$Parser$text$("open ", $3576, $3577);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3580 = self.idx;
                        var $3581 = self.code;
                        var $3582 = self.err;
                        var $3583 = Parser$Reply$error$($3580, $3581, $3582);
                        var $3579 = $3583;
                        break;
                    case 'Parser.Reply.value':
                        var $3584 = self.idx;
                        var $3585 = self.code;
                        var self = Kind$Parser$spaces($3584)($3585);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3587 = self.idx;
                                var $3588 = self.code;
                                var $3589 = self.err;
                                var $3590 = Parser$Reply$error$($3587, $3588, $3589);
                                var $3586 = $3590;
                                break;
                            case 'Parser.Reply.value':
                                var $3591 = self.idx;
                                var $3592 = self.code;
                                var self = Kind$Parser$term$($3591, $3592);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3594 = self.idx;
                                        var $3595 = self.code;
                                        var $3596 = self.err;
                                        var $3597 = Parser$Reply$error$($3594, $3595, $3596);
                                        var $3593 = $3597;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3598 = self.idx;
                                        var $3599 = self.code;
                                        var $3600 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Kind$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3603 = self.idx;
                                                    var $3604 = self.code;
                                                    var $3605 = self.err;
                                                    var $3606 = Parser$Reply$error$($3603, $3604, $3605);
                                                    var $3602 = $3606;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3607 = self.idx;
                                                    var $3608 = self.code;
                                                    var $3609 = Kind$Parser$name1$($3607, $3608);
                                                    var $3602 = $3609;
                                                    break;
                                            };
                                            return $3602;
                                        }), $3598, $3599);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3610 = self.idx;
                                                var $3611 = self.code;
                                                var $3612 = self.err;
                                                var $3613 = Parser$Reply$error$($3610, $3611, $3612);
                                                var $3601 = $3613;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3614 = self.idx;
                                                var $3615 = self.code;
                                                var $3616 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3614, $3615);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3618 = self.idx;
                                                        var $3619 = self.code;
                                                        var $3620 = self.err;
                                                        var $3621 = Parser$Reply$error$($3618, $3619, $3620);
                                                        var $3617 = $3621;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3622 = self.idx;
                                                        var $3623 = self.code;
                                                        var self = $3616;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $3625 = self.value;
                                                                var $3626 = $3625;
                                                                var _name$21 = $3626;
                                                                break;
                                                            case 'Maybe.none':
                                                                var self = Kind$Term$reduce$($3600, Kind$Map$new);
                                                                switch (self._) {
                                                                    case 'Kind.Term.var':
                                                                        var $3628 = self.name;
                                                                        var $3629 = $3628;
                                                                        var $3627 = $3629;
                                                                        break;
                                                                    case 'Kind.Term.ref':
                                                                        var $3630 = self.name;
                                                                        var $3631 = $3630;
                                                                        var $3627 = $3631;
                                                                        break;
                                                                    case 'Kind.Term.typ':
                                                                    case 'Kind.Term.all':
                                                                    case 'Kind.Term.lam':
                                                                    case 'Kind.Term.app':
                                                                    case 'Kind.Term.let':
                                                                    case 'Kind.Term.def':
                                                                    case 'Kind.Term.ann':
                                                                    case 'Kind.Term.gol':
                                                                    case 'Kind.Term.hol':
                                                                    case 'Kind.Term.nat':
                                                                    case 'Kind.Term.chr':
                                                                    case 'Kind.Term.str':
                                                                    case 'Kind.Term.cse':
                                                                    case 'Kind.Term.ori':
                                                                        var $3632 = Kind$Name$read$("self");
                                                                        var $3627 = $3632;
                                                                        break;
                                                                };
                                                                var _name$21 = $3627;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Kind$Parser$term$($3622, $3623);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3633 = self.idx;
                                                                var $3634 = self.code;
                                                                var $3635 = self.err;
                                                                var $3636 = Parser$Reply$error$($3633, $3634, $3635);
                                                                var $3624 = $3636;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3637 = self.idx;
                                                                var $3638 = self.code;
                                                                var $3639 = self.val;
                                                                var _cses$26 = Kind$Map$set$("_", $3639, Kind$Map$new);
                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                var self = Kind$Parser$stop$($3578, $3637, $3638);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3641 = self.idx;
                                                                        var $3642 = self.code;
                                                                        var $3643 = self.err;
                                                                        var $3644 = Parser$Reply$error$($3641, $3642, $3643);
                                                                        var $3640 = $3644;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3645 = self.idx;
                                                                        var $3646 = self.code;
                                                                        var $3647 = self.val;
                                                                        var $3648 = Parser$Reply$value$($3645, $3646, Kind$Term$ori$($3647, Kind$Term$cse$(Bits$e, $3600, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $3640 = $3648;
                                                                        break;
                                                                };
                                                                var $3624 = $3640;
                                                                break;
                                                        };
                                                        var $3617 = $3624;
                                                        break;
                                                };
                                                var $3601 = $3617;
                                                break;
                                        };
                                        var $3593 = $3601;
                                        break;
                                };
                                var $3586 = $3593;
                                break;
                        };
                        var $3579 = $3586;
                        break;
                };
                var $3571 = $3579;
                break;
        };
        return $3571;
    };
    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);

    function Kind$Parser$without$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3650 = self.idx;
                var $3651 = self.code;
                var $3652 = self.err;
                var $3653 = Parser$Reply$error$($3650, $3651, $3652);
                var $3649 = $3653;
                break;
            case 'Parser.Reply.value':
                var $3654 = self.idx;
                var $3655 = self.code;
                var $3656 = self.val;
                var self = Kind$Parser$text$("without ", $3654, $3655);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3658 = self.idx;
                        var $3659 = self.code;
                        var $3660 = self.err;
                        var $3661 = Parser$Reply$error$($3658, $3659, $3660);
                        var $3657 = $3661;
                        break;
                    case 'Parser.Reply.value':
                        var $3662 = self.idx;
                        var $3663 = self.code;
                        var self = Kind$Parser$name1$($3662, $3663);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3665 = self.idx;
                                var $3666 = self.code;
                                var $3667 = self.err;
                                var $3668 = Parser$Reply$error$($3665, $3666, $3667);
                                var $3664 = $3668;
                                break;
                            case 'Parser.Reply.value':
                                var $3669 = self.idx;
                                var $3670 = self.code;
                                var $3671 = self.val;
                                var self = Kind$Parser$text$(":", $3669, $3670);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3673 = self.idx;
                                        var $3674 = self.code;
                                        var $3675 = self.err;
                                        var $3676 = Parser$Reply$error$($3673, $3674, $3675);
                                        var $3672 = $3676;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3677 = self.idx;
                                        var $3678 = self.code;
                                        var self = Kind$Parser$term$($3677, $3678);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3680 = self.idx;
                                                var $3681 = self.code;
                                                var $3682 = self.err;
                                                var $3683 = Parser$Reply$error$($3680, $3681, $3682);
                                                var $3679 = $3683;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3684 = self.idx;
                                                var $3685 = self.code;
                                                var $3686 = self.val;
                                                var self = Kind$Parser$term$($3684, $3685);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3688 = self.idx;
                                                        var $3689 = self.code;
                                                        var $3690 = self.err;
                                                        var $3691 = Parser$Reply$error$($3688, $3689, $3690);
                                                        var $3687 = $3691;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3692 = self.idx;
                                                        var $3693 = self.code;
                                                        var $3694 = self.val;
                                                        var self = Kind$Parser$stop$($3656, $3692, $3693);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3696 = self.idx;
                                                                var $3697 = self.code;
                                                                var $3698 = self.err;
                                                                var $3699 = Parser$Reply$error$($3696, $3697, $3698);
                                                                var $3695 = $3699;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3700 = self.idx;
                                                                var $3701 = self.code;
                                                                var $3702 = self.val;
                                                                var _term$24 = Kind$Term$ref$($3671);
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$("x", (_x$25 => {
                                                                    var $3704 = Kind$Term$hol$(Bits$e);
                                                                    return $3704;
                                                                })));
                                                                var _term$26 = Kind$Term$app$(_term$25, $3686);
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($3671, (_x$27 => {
                                                                    var $3705 = $3694;
                                                                    return $3705;
                                                                })));
                                                                var $3703 = Parser$Reply$value$($3700, $3701, Kind$Term$ori$($3702, _term$27));
                                                                var $3695 = $3703;
                                                                break;
                                                        };
                                                        var $3687 = $3695;
                                                        break;
                                                };
                                                var $3679 = $3687;
                                                break;
                                        };
                                        var $3672 = $3679;
                                        break;
                                };
                                var $3664 = $3672;
                                break;
                        };
                        var $3657 = $3664;
                        break;
                };
                var $3649 = $3657;
                break;
        };
        return $3649;
    };
    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);

    function Kind$Parser$switch$case$(_idx$1, _code$2) {
        var self = Kind$Parser$term$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3707 = self.idx;
                var $3708 = self.code;
                var $3709 = self.err;
                var $3710 = Parser$Reply$error$($3707, $3708, $3709);
                var $3706 = $3710;
                break;
            case 'Parser.Reply.value':
                var $3711 = self.idx;
                var $3712 = self.code;
                var $3713 = self.val;
                var self = Kind$Parser$text$(":", $3711, $3712);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3715 = self.idx;
                        var $3716 = self.code;
                        var $3717 = self.err;
                        var $3718 = Parser$Reply$error$($3715, $3716, $3717);
                        var $3714 = $3718;
                        break;
                    case 'Parser.Reply.value':
                        var $3719 = self.idx;
                        var $3720 = self.code;
                        var self = Kind$Parser$term$($3719, $3720);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3722 = self.idx;
                                var $3723 = self.code;
                                var $3724 = self.err;
                                var $3725 = Parser$Reply$error$($3722, $3723, $3724);
                                var $3721 = $3725;
                                break;
                            case 'Parser.Reply.value':
                                var $3726 = self.idx;
                                var $3727 = self.code;
                                var $3728 = self.val;
                                var $3729 = Parser$Reply$value$($3726, $3727, Pair$new$($3713, $3728));
                                var $3721 = $3729;
                                break;
                        };
                        var $3714 = $3721;
                        break;
                };
                var $3706 = $3714;
                break;
        };
        return $3706;
    };
    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);

    function Kind$Parser$switch$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3731 = self.idx;
                var $3732 = self.code;
                var $3733 = self.err;
                var $3734 = Parser$Reply$error$($3731, $3732, $3733);
                var $3730 = $3734;
                break;
            case 'Parser.Reply.value':
                var $3735 = self.idx;
                var $3736 = self.code;
                var $3737 = self.val;
                var self = Kind$Parser$text$("switch ", $3735, $3736);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3739 = self.idx;
                        var $3740 = self.code;
                        var $3741 = self.err;
                        var $3742 = Parser$Reply$error$($3739, $3740, $3741);
                        var $3738 = $3742;
                        break;
                    case 'Parser.Reply.value':
                        var $3743 = self.idx;
                        var $3744 = self.code;
                        var self = Kind$Parser$term$($3743, $3744);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3746 = self.idx;
                                var $3747 = self.code;
                                var $3748 = self.err;
                                var $3749 = Parser$Reply$error$($3746, $3747, $3748);
                                var $3745 = $3749;
                                break;
                            case 'Parser.Reply.value':
                                var $3750 = self.idx;
                                var $3751 = self.code;
                                var $3752 = self.val;
                                var self = Kind$Parser$text$("{", $3750, $3751);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3754 = self.idx;
                                        var $3755 = self.code;
                                        var $3756 = self.err;
                                        var $3757 = Parser$Reply$error$($3754, $3755, $3756);
                                        var $3753 = $3757;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3758 = self.idx;
                                        var $3759 = self.code;
                                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$switch$case)($3758)($3759);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3761 = self.idx;
                                                var $3762 = self.code;
                                                var $3763 = self.err;
                                                var $3764 = Parser$Reply$error$($3761, $3762, $3763);
                                                var $3760 = $3764;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3765 = self.idx;
                                                var $3766 = self.code;
                                                var $3767 = self.val;
                                                var self = Kind$Parser$text$("default ", $3765, $3766);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3769 = self.idx;
                                                        var $3770 = self.code;
                                                        var $3771 = self.err;
                                                        var $3772 = Parser$Reply$error$($3769, $3770, $3771);
                                                        var $3768 = $3772;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3773 = self.idx;
                                                        var $3774 = self.code;
                                                        var self = Kind$Parser$term$($3773, $3774);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3776 = self.idx;
                                                                var $3777 = self.code;
                                                                var $3778 = self.err;
                                                                var $3779 = Parser$Reply$error$($3776, $3777, $3778);
                                                                var $3775 = $3779;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3780 = self.idx;
                                                                var $3781 = self.code;
                                                                var $3782 = self.val;
                                                                var self = Kind$Parser$stop$($3737, $3780, $3781);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3784 = self.idx;
                                                                        var $3785 = self.code;
                                                                        var $3786 = self.err;
                                                                        var $3787 = Parser$Reply$error$($3784, $3785, $3786);
                                                                        var $3783 = $3787;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3788 = self.idx;
                                                                        var $3789 = self.code;
                                                                        var $3790 = self.val;
                                                                        var _term$27 = List$fold$($3767, $3782, (_cse$27 => _rest$28 => {
                                                                            var self = _cse$27;
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $3793 = self.fst;
                                                                                    var $3794 = self.snd;
                                                                                    var _term$31 = Kind$Term$app$($3752, $3793);
                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$("", (_x$32 => {
                                                                                        var $3796 = Kind$Term$hol$(Bits$e);
                                                                                        return $3796;
                                                                                    })));
                                                                                    var _term$33 = Kind$Term$app$(_term$32, $3794);
                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);
                                                                                    var $3795 = _term$34;
                                                                                    var $3792 = $3795;
                                                                                    break;
                                                                            };
                                                                            return $3792;
                                                                        }));
                                                                        var $3791 = Parser$Reply$value$($3788, $3789, Kind$Term$ori$($3790, _term$27));
                                                                        var $3783 = $3791;
                                                                        break;
                                                                };
                                                                var $3775 = $3783;
                                                                break;
                                                        };
                                                        var $3768 = $3775;
                                                        break;
                                                };
                                                var $3760 = $3768;
                                                break;
                                        };
                                        var $3753 = $3760;
                                        break;
                                };
                                var $3745 = $3753;
                                break;
                        };
                        var $3738 = $3745;
                        break;
                };
                var $3730 = $3738;
                break;
        };
        return $3730;
    };
    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3798 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $3797 = $3798;
        } else {
            var $3799 = self.charCodeAt(0);
            var $3800 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($3799 === 48);
            if (self) {
                var $3802 = Parser$Reply$value$(_sidx$5, $3800, 0n);
                var $3801 = $3802;
            } else {
                var self = ($3799 === 49);
                if (self) {
                    var $3804 = Parser$Reply$value$(_sidx$5, $3800, 1n);
                    var $3803 = $3804;
                } else {
                    var self = ($3799 === 50);
                    if (self) {
                        var $3806 = Parser$Reply$value$(_sidx$5, $3800, 2n);
                        var $3805 = $3806;
                    } else {
                        var self = ($3799 === 51);
                        if (self) {
                            var $3808 = Parser$Reply$value$(_sidx$5, $3800, 3n);
                            var $3807 = $3808;
                        } else {
                            var self = ($3799 === 52);
                            if (self) {
                                var $3810 = Parser$Reply$value$(_sidx$5, $3800, 4n);
                                var $3809 = $3810;
                            } else {
                                var self = ($3799 === 53);
                                if (self) {
                                    var $3812 = Parser$Reply$value$(_sidx$5, $3800, 5n);
                                    var $3811 = $3812;
                                } else {
                                    var self = ($3799 === 54);
                                    if (self) {
                                        var $3814 = Parser$Reply$value$(_sidx$5, $3800, 6n);
                                        var $3813 = $3814;
                                    } else {
                                        var self = ($3799 === 55);
                                        if (self) {
                                            var $3816 = Parser$Reply$value$(_sidx$5, $3800, 7n);
                                            var $3815 = $3816;
                                        } else {
                                            var self = ($3799 === 56);
                                            if (self) {
                                                var $3818 = Parser$Reply$value$(_sidx$5, $3800, 8n);
                                                var $3817 = $3818;
                                            } else {
                                                var self = ($3799 === 57);
                                                if (self) {
                                                    var $3820 = Parser$Reply$value$(_sidx$5, $3800, 9n);
                                                    var $3819 = $3820;
                                                } else {
                                                    var $3821 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $3819 = $3821;
                                                };
                                                var $3817 = $3819;
                                            };
                                            var $3815 = $3817;
                                        };
                                        var $3813 = $3815;
                                    };
                                    var $3811 = $3813;
                                };
                                var $3809 = $3811;
                            };
                            var $3807 = $3809;
                        };
                        var $3805 = $3807;
                    };
                    var $3803 = $3805;
                };
                var $3801 = $3803;
            };
            var $3797 = $3801;
        };
        return $3797;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.cons':
                        var $3822 = self.head;
                        var $3823 = self.tail;
                        var $3824 = Nat$from_base$go$(_b$1, $3823, (_b$1 * _p$3), (($3822 * _p$3) + _res$4));
                        return $3824;
                    case 'List.nil':
                        var $3825 = _res$4;
                        return $3825;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function Nat$from_base$(_base$1, _ds$2) {
        var $3826 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $3826;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3828 = self.idx;
                var $3829 = self.code;
                var $3830 = self.err;
                var $3831 = Parser$Reply$error$($3828, $3829, $3830);
                var $3827 = $3831;
                break;
            case 'Parser.Reply.value':
                var $3832 = self.idx;
                var $3833 = self.code;
                var $3834 = self.val;
                var $3835 = Parser$Reply$value$($3832, $3833, Nat$from_base$(10n, $3834));
                var $3827 = $3835;
                break;
        };
        return $3827;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3837 = self.slice(0, -1);
                var $3838 = $3837;
                var $3836 = $3838;
                break;
            case 'i':
                var $3839 = self.slice(0, -1);
                var $3840 = $3839;
                var $3836 = $3840;
                break;
            case 'e':
                var $3841 = Bits$e;
                var $3836 = $3841;
                break;
        };
        return $3836;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3843 = self.slice(0, -1);
                var $3844 = ($3843 + '1');
                var $3842 = $3844;
                break;
            case 'i':
                var $3845 = self.slice(0, -1);
                var $3846 = (Bits$inc$($3845) + '0');
                var $3842 = $3846;
                break;
            case 'e':
                var $3847 = (Bits$e + '1');
                var $3842 = $3847;
                break;
        };
        return $3842;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$is_some$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $3849 = Bool$false;
                var $3848 = $3849;
                break;
            case 'Maybe.some':
                var $3850 = Bool$true;
                var $3848 = $3850;
                break;
        };
        return $3848;
    };
    const Maybe$is_some = x0 => Maybe$is_some$(x0);

    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $3851 = ({
            _: 'Kind.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $3851;
    };
    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);

    function Kind$Parser$goal$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3853 = self.idx;
                var $3854 = self.code;
                var $3855 = self.err;
                var $3856 = Parser$Reply$error$($3853, $3854, $3855);
                var $3852 = $3856;
                break;
            case 'Parser.Reply.value':
                var $3857 = self.idx;
                var $3858 = self.code;
                var $3859 = self.val;
                var self = Kind$Parser$text$("?", $3857, $3858);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3861 = self.idx;
                        var $3862 = self.code;
                        var $3863 = self.err;
                        var $3864 = Parser$Reply$error$($3861, $3862, $3863);
                        var $3860 = $3864;
                        break;
                    case 'Parser.Reply.value':
                        var $3865 = self.idx;
                        var $3866 = self.code;
                        var self = Kind$Parser$name$($3865, $3866);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3868 = self.idx;
                                var $3869 = self.code;
                                var $3870 = self.err;
                                var $3871 = Parser$Reply$error$($3868, $3869, $3870);
                                var $3867 = $3871;
                                break;
                            case 'Parser.Reply.value':
                                var $3872 = self.idx;
                                var $3873 = self.code;
                                var $3874 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3877 = self.idx;
                                            var $3878 = self.code;
                                            var $3879 = self.err;
                                            var $3880 = Parser$Reply$error$($3877, $3878, $3879);
                                            var $3876 = $3880;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3881 = self.idx;
                                            var $3882 = self.code;
                                            var self = Parser$nat$($3881, $3882);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3884 = self.idx;
                                                    var $3885 = self.code;
                                                    var $3886 = self.err;
                                                    var $3887 = Parser$Reply$error$($3884, $3885, $3886);
                                                    var $3883 = $3887;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3888 = self.idx;
                                                    var $3889 = self.code;
                                                    var $3890 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($3890)))));
                                                    var $3891 = Parser$Reply$value$($3888, $3889, _bits$20);
                                                    var $3883 = $3891;
                                                    break;
                                            };
                                            var $3876 = $3883;
                                            break;
                                    };
                                    return $3876;
                                }))($3872)($3873);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3892 = self.idx;
                                        var $3893 = self.code;
                                        var $3894 = self.err;
                                        var $3895 = Parser$Reply$error$($3892, $3893, $3894);
                                        var $3875 = $3895;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3896 = self.idx;
                                        var $3897 = self.code;
                                        var $3898 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $3896, $3897);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3900 = self.idx;
                                                var $3901 = self.code;
                                                var $3902 = self.err;
                                                var $3903 = Parser$Reply$error$($3900, $3901, $3902);
                                                var self = $3903;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3904 = self.idx;
                                                var $3905 = self.code;
                                                var $3906 = self.val;
                                                var $3907 = Parser$Reply$value$($3904, $3905, Maybe$is_some$($3906));
                                                var self = $3907;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3908 = self.idx;
                                                var $3909 = self.code;
                                                var $3910 = self.err;
                                                var $3911 = Parser$Reply$error$($3908, $3909, $3910);
                                                var $3899 = $3911;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3912 = self.idx;
                                                var $3913 = self.code;
                                                var $3914 = self.val;
                                                var self = Kind$Parser$stop$($3859, $3912, $3913);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3916 = self.idx;
                                                        var $3917 = self.code;
                                                        var $3918 = self.err;
                                                        var $3919 = Parser$Reply$error$($3916, $3917, $3918);
                                                        var $3915 = $3919;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3920 = self.idx;
                                                        var $3921 = self.code;
                                                        var $3922 = self.val;
                                                        var $3923 = Parser$Reply$value$($3920, $3921, Kind$Term$ori$($3922, Kind$Term$gol$($3874, $3898, $3914)));
                                                        var $3915 = $3923;
                                                        break;
                                                };
                                                var $3899 = $3915;
                                                break;
                                        };
                                        var $3875 = $3899;
                                        break;
                                };
                                var $3867 = $3875;
                                break;
                        };
                        var $3860 = $3867;
                        break;
                };
                var $3852 = $3860;
                break;
        };
        return $3852;
    };
    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);

    function Kind$Parser$hole$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3925 = self.idx;
                var $3926 = self.code;
                var $3927 = self.err;
                var $3928 = Parser$Reply$error$($3925, $3926, $3927);
                var $3924 = $3928;
                break;
            case 'Parser.Reply.value':
                var $3929 = self.idx;
                var $3930 = self.code;
                var $3931 = self.val;
                var self = Kind$Parser$text$("_", $3929, $3930);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3933 = self.idx;
                        var $3934 = self.code;
                        var $3935 = self.err;
                        var $3936 = Parser$Reply$error$($3933, $3934, $3935);
                        var $3932 = $3936;
                        break;
                    case 'Parser.Reply.value':
                        var $3937 = self.idx;
                        var $3938 = self.code;
                        var self = Kind$Parser$stop$($3931, $3937, $3938);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3940 = self.idx;
                                var $3941 = self.code;
                                var $3942 = self.err;
                                var $3943 = Parser$Reply$error$($3940, $3941, $3942);
                                var $3939 = $3943;
                                break;
                            case 'Parser.Reply.value':
                                var $3944 = self.idx;
                                var $3945 = self.code;
                                var $3946 = self.val;
                                var $3947 = Parser$Reply$value$($3944, $3945, Kind$Term$ori$($3946, Kind$Term$hol$(Bits$e)));
                                var $3939 = $3947;
                                break;
                        };
                        var $3932 = $3939;
                        break;
                };
                var $3924 = $3932;
                break;
        };
        return $3924;
    };
    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);

    function Kind$Parser$u8$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3949 = self.idx;
                var $3950 = self.code;
                var $3951 = self.err;
                var $3952 = Parser$Reply$error$($3949, $3950, $3951);
                var $3948 = $3952;
                break;
            case 'Parser.Reply.value':
                var $3953 = self.idx;
                var $3954 = self.code;
                var $3955 = self.val;
                var self = Kind$Parser$spaces($3953)($3954);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3957 = self.idx;
                        var $3958 = self.code;
                        var $3959 = self.err;
                        var $3960 = Parser$Reply$error$($3957, $3958, $3959);
                        var $3956 = $3960;
                        break;
                    case 'Parser.Reply.value':
                        var $3961 = self.idx;
                        var $3962 = self.code;
                        var self = Parser$nat$($3961, $3962);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3964 = self.idx;
                                var $3965 = self.code;
                                var $3966 = self.err;
                                var $3967 = Parser$Reply$error$($3964, $3965, $3966);
                                var $3963 = $3967;
                                break;
                            case 'Parser.Reply.value':
                                var $3968 = self.idx;
                                var $3969 = self.code;
                                var $3970 = self.val;
                                var self = Parser$text$("b", $3968, $3969);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3972 = self.idx;
                                        var $3973 = self.code;
                                        var $3974 = self.err;
                                        var $3975 = Parser$Reply$error$($3972, $3973, $3974);
                                        var $3971 = $3975;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3976 = self.idx;
                                        var $3977 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u8");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($3970));
                                        var self = Kind$Parser$stop$($3955, $3976, $3977);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3979 = self.idx;
                                                var $3980 = self.code;
                                                var $3981 = self.err;
                                                var $3982 = Parser$Reply$error$($3979, $3980, $3981);
                                                var $3978 = $3982;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3983 = self.idx;
                                                var $3984 = self.code;
                                                var $3985 = self.val;
                                                var $3986 = Parser$Reply$value$($3983, $3984, Kind$Term$ori$($3985, _term$16));
                                                var $3978 = $3986;
                                                break;
                                        };
                                        var $3971 = $3978;
                                        break;
                                };
                                var $3963 = $3971;
                                break;
                        };
                        var $3956 = $3963;
                        break;
                };
                var $3948 = $3956;
                break;
        };
        return $3948;
    };
    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);

    function Kind$Parser$u16$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3988 = self.idx;
                var $3989 = self.code;
                var $3990 = self.err;
                var $3991 = Parser$Reply$error$($3988, $3989, $3990);
                var $3987 = $3991;
                break;
            case 'Parser.Reply.value':
                var $3992 = self.idx;
                var $3993 = self.code;
                var $3994 = self.val;
                var self = Kind$Parser$spaces($3992)($3993);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3996 = self.idx;
                        var $3997 = self.code;
                        var $3998 = self.err;
                        var $3999 = Parser$Reply$error$($3996, $3997, $3998);
                        var $3995 = $3999;
                        break;
                    case 'Parser.Reply.value':
                        var $4000 = self.idx;
                        var $4001 = self.code;
                        var self = Parser$nat$($4000, $4001);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4003 = self.idx;
                                var $4004 = self.code;
                                var $4005 = self.err;
                                var $4006 = Parser$Reply$error$($4003, $4004, $4005);
                                var $4002 = $4006;
                                break;
                            case 'Parser.Reply.value':
                                var $4007 = self.idx;
                                var $4008 = self.code;
                                var $4009 = self.val;
                                var self = Parser$text$("s", $4007, $4008);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4011 = self.idx;
                                        var $4012 = self.code;
                                        var $4013 = self.err;
                                        var $4014 = Parser$Reply$error$($4011, $4012, $4013);
                                        var $4010 = $4014;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4015 = self.idx;
                                        var $4016 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u16");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4009));
                                        var self = Kind$Parser$stop$($3994, $4015, $4016);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4018 = self.idx;
                                                var $4019 = self.code;
                                                var $4020 = self.err;
                                                var $4021 = Parser$Reply$error$($4018, $4019, $4020);
                                                var $4017 = $4021;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4022 = self.idx;
                                                var $4023 = self.code;
                                                var $4024 = self.val;
                                                var $4025 = Parser$Reply$value$($4022, $4023, Kind$Term$ori$($4024, _term$16));
                                                var $4017 = $4025;
                                                break;
                                        };
                                        var $4010 = $4017;
                                        break;
                                };
                                var $4002 = $4010;
                                break;
                        };
                        var $3995 = $4002;
                        break;
                };
                var $3987 = $3995;
                break;
        };
        return $3987;
    };
    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);

    function Kind$Parser$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4027 = self.idx;
                var $4028 = self.code;
                var $4029 = self.err;
                var $4030 = Parser$Reply$error$($4027, $4028, $4029);
                var $4026 = $4030;
                break;
            case 'Parser.Reply.value':
                var $4031 = self.idx;
                var $4032 = self.code;
                var $4033 = self.val;
                var self = Kind$Parser$spaces($4031)($4032);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4035 = self.idx;
                        var $4036 = self.code;
                        var $4037 = self.err;
                        var $4038 = Parser$Reply$error$($4035, $4036, $4037);
                        var $4034 = $4038;
                        break;
                    case 'Parser.Reply.value':
                        var $4039 = self.idx;
                        var $4040 = self.code;
                        var self = Parser$nat$($4039, $4040);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4042 = self.idx;
                                var $4043 = self.code;
                                var $4044 = self.err;
                                var $4045 = Parser$Reply$error$($4042, $4043, $4044);
                                var $4041 = $4045;
                                break;
                            case 'Parser.Reply.value':
                                var $4046 = self.idx;
                                var $4047 = self.code;
                                var $4048 = self.val;
                                var self = Parser$text$("u", $4046, $4047);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4050 = self.idx;
                                        var $4051 = self.code;
                                        var $4052 = self.err;
                                        var $4053 = Parser$Reply$error$($4050, $4051, $4052);
                                        var $4049 = $4053;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4054 = self.idx;
                                        var $4055 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u32");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4048));
                                        var self = Kind$Parser$stop$($4033, $4054, $4055);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4057 = self.idx;
                                                var $4058 = self.code;
                                                var $4059 = self.err;
                                                var $4060 = Parser$Reply$error$($4057, $4058, $4059);
                                                var $4056 = $4060;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4061 = self.idx;
                                                var $4062 = self.code;
                                                var $4063 = self.val;
                                                var $4064 = Parser$Reply$value$($4061, $4062, Kind$Term$ori$($4063, _term$16));
                                                var $4056 = $4064;
                                                break;
                                        };
                                        var $4049 = $4056;
                                        break;
                                };
                                var $4041 = $4049;
                                break;
                        };
                        var $4034 = $4041;
                        break;
                };
                var $4026 = $4034;
                break;
        };
        return $4026;
    };
    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);

    function Kind$Parser$u64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4066 = self.idx;
                var $4067 = self.code;
                var $4068 = self.err;
                var $4069 = Parser$Reply$error$($4066, $4067, $4068);
                var $4065 = $4069;
                break;
            case 'Parser.Reply.value':
                var $4070 = self.idx;
                var $4071 = self.code;
                var $4072 = self.val;
                var self = Kind$Parser$spaces($4070)($4071);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4074 = self.idx;
                        var $4075 = self.code;
                        var $4076 = self.err;
                        var $4077 = Parser$Reply$error$($4074, $4075, $4076);
                        var $4073 = $4077;
                        break;
                    case 'Parser.Reply.value':
                        var $4078 = self.idx;
                        var $4079 = self.code;
                        var self = Parser$nat$($4078, $4079);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4081 = self.idx;
                                var $4082 = self.code;
                                var $4083 = self.err;
                                var $4084 = Parser$Reply$error$($4081, $4082, $4083);
                                var $4080 = $4084;
                                break;
                            case 'Parser.Reply.value':
                                var $4085 = self.idx;
                                var $4086 = self.code;
                                var $4087 = self.val;
                                var self = Parser$text$("l", $4085, $4086);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4089 = self.idx;
                                        var $4090 = self.code;
                                        var $4091 = self.err;
                                        var $4092 = Parser$Reply$error$($4089, $4090, $4091);
                                        var $4088 = $4092;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4093 = self.idx;
                                        var $4094 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u64");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4087));
                                        var self = Kind$Parser$stop$($4072, $4093, $4094);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4096 = self.idx;
                                                var $4097 = self.code;
                                                var $4098 = self.err;
                                                var $4099 = Parser$Reply$error$($4096, $4097, $4098);
                                                var $4095 = $4099;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4100 = self.idx;
                                                var $4101 = self.code;
                                                var $4102 = self.val;
                                                var $4103 = Parser$Reply$value$($4100, $4101, Kind$Term$ori$($4102, _term$16));
                                                var $4095 = $4103;
                                                break;
                                        };
                                        var $4088 = $4095;
                                        break;
                                };
                                var $4080 = $4088;
                                break;
                        };
                        var $4073 = $4080;
                        break;
                };
                var $4065 = $4073;
                break;
        };
        return $4065;
    };
    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);

    function Kind$Parser$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4105 = self.idx;
                var $4106 = self.code;
                var $4107 = self.err;
                var $4108 = Parser$Reply$error$($4105, $4106, $4107);
                var $4104 = $4108;
                break;
            case 'Parser.Reply.value':
                var $4109 = self.idx;
                var $4110 = self.code;
                var $4111 = self.val;
                var self = Kind$Parser$spaces($4109)($4110);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4113 = self.idx;
                        var $4114 = self.code;
                        var $4115 = self.err;
                        var $4116 = Parser$Reply$error$($4113, $4114, $4115);
                        var $4112 = $4116;
                        break;
                    case 'Parser.Reply.value':
                        var $4117 = self.idx;
                        var $4118 = self.code;
                        var self = Parser$nat$($4117, $4118);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4120 = self.idx;
                                var $4121 = self.code;
                                var $4122 = self.err;
                                var $4123 = Parser$Reply$error$($4120, $4121, $4122);
                                var $4119 = $4123;
                                break;
                            case 'Parser.Reply.value':
                                var $4124 = self.idx;
                                var $4125 = self.code;
                                var $4126 = self.val;
                                var self = Kind$Parser$stop$($4111, $4124, $4125);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4128 = self.idx;
                                        var $4129 = self.code;
                                        var $4130 = self.err;
                                        var $4131 = Parser$Reply$error$($4128, $4129, $4130);
                                        var $4127 = $4131;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4132 = self.idx;
                                        var $4133 = self.code;
                                        var $4134 = self.val;
                                        var $4135 = Parser$Reply$value$($4132, $4133, Kind$Term$ori$($4134, Kind$Term$nat$($4126)));
                                        var $4127 = $4135;
                                        break;
                                };
                                var $4119 = $4127;
                                break;
                        };
                        var $4112 = $4119;
                        break;
                };
                var $4104 = $4112;
                break;
        };
        return $4104;
    };
    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);
    const String$eql = a0 => a1 => (a0 === a1);
    const Kind$Term$typ = ({
        _: 'Kind.Term.typ'
    });

    function Kind$Parser$reference$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4137 = self.idx;
                var $4138 = self.code;
                var $4139 = self.err;
                var $4140 = Parser$Reply$error$($4137, $4138, $4139);
                var $4136 = $4140;
                break;
            case 'Parser.Reply.value':
                var $4141 = self.idx;
                var $4142 = self.code;
                var $4143 = self.val;
                var self = Kind$Parser$name1$($4141, $4142);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4145 = self.idx;
                        var $4146 = self.code;
                        var $4147 = self.err;
                        var $4148 = Parser$Reply$error$($4145, $4146, $4147);
                        var $4144 = $4148;
                        break;
                    case 'Parser.Reply.value':
                        var $4149 = self.idx;
                        var $4150 = self.code;
                        var $4151 = self.val;
                        var self = Kind$Parser$stop$($4143, $4149, $4150);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4153 = self.idx;
                                var $4154 = self.code;
                                var $4155 = self.err;
                                var $4156 = Parser$Reply$error$($4153, $4154, $4155);
                                var $4152 = $4156;
                                break;
                            case 'Parser.Reply.value':
                                var $4157 = self.idx;
                                var $4158 = self.code;
                                var $4159 = self.val;
                                var self = ($4151 === "case");
                                if (self) {
                                    var $4161 = Parser$fail("Reserved keyword.");
                                    var $4160 = $4161;
                                } else {
                                    var self = ($4151 === "do");
                                    if (self) {
                                        var $4163 = Parser$fail("Reserved keyword.");
                                        var $4162 = $4163;
                                    } else {
                                        var self = ($4151 === "if");
                                        if (self) {
                                            var $4165 = Parser$fail("Reserved keyword.");
                                            var $4164 = $4165;
                                        } else {
                                            var self = ($4151 === "with");
                                            if (self) {
                                                var $4167 = Parser$fail("Reserved keyword.");
                                                var $4166 = $4167;
                                            } else {
                                                var self = ($4151 === "let");
                                                if (self) {
                                                    var $4169 = Parser$fail("Reserved keyword.");
                                                    var $4168 = $4169;
                                                } else {
                                                    var self = ($4151 === "def");
                                                    if (self) {
                                                        var $4171 = Parser$fail("Reserved keyword.");
                                                        var $4170 = $4171;
                                                    } else {
                                                        var self = ($4151 === "Type");
                                                        if (self) {
                                                            var $4173 = (_idx$12 => _code$13 => {
                                                                var $4174 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4159, Kind$Term$typ));
                                                                return $4174;
                                                            });
                                                            var $4172 = $4173;
                                                        } else {
                                                            var self = ($4151 === "true");
                                                            if (self) {
                                                                var $4176 = (_idx$12 => _code$13 => {
                                                                    var $4177 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4159, Kind$Term$ref$("Bool.true")));
                                                                    return $4177;
                                                                });
                                                                var $4175 = $4176;
                                                            } else {
                                                                var self = ($4151 === "false");
                                                                if (self) {
                                                                    var $4179 = (_idx$12 => _code$13 => {
                                                                        var $4180 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4159, Kind$Term$ref$("Bool.false")));
                                                                        return $4180;
                                                                    });
                                                                    var $4178 = $4179;
                                                                } else {
                                                                    var self = ($4151 === "unit");
                                                                    if (self) {
                                                                        var $4182 = (_idx$12 => _code$13 => {
                                                                            var $4183 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4159, Kind$Term$ref$("Unit.new")));
                                                                            return $4183;
                                                                        });
                                                                        var $4181 = $4182;
                                                                    } else {
                                                                        var self = ($4151 === "none");
                                                                        if (self) {
                                                                            var _term$12 = Kind$Term$ref$("Maybe.none");
                                                                            var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                            var $4185 = (_idx$14 => _code$15 => {
                                                                                var $4186 = Parser$Reply$value$(_idx$14, _code$15, Kind$Term$ori$($4159, _term$13));
                                                                                return $4186;
                                                                            });
                                                                            var $4184 = $4185;
                                                                        } else {
                                                                            var self = ($4151 === "refl");
                                                                            if (self) {
                                                                                var _term$12 = Kind$Term$ref$("Equal.refl");
                                                                                var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                                var _term$14 = Kind$Term$app$(_term$13, Kind$Term$hol$(Bits$e));
                                                                                var $4188 = (_idx$15 => _code$16 => {
                                                                                    var $4189 = Parser$Reply$value$(_idx$15, _code$16, Kind$Term$ori$($4159, _term$14));
                                                                                    return $4189;
                                                                                });
                                                                                var $4187 = $4188;
                                                                            } else {
                                                                                var $4190 = (_idx$12 => _code$13 => {
                                                                                    var $4191 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4159, Kind$Term$ref$($4151)));
                                                                                    return $4191;
                                                                                });
                                                                                var $4187 = $4190;
                                                                            };
                                                                            var $4184 = $4187;
                                                                        };
                                                                        var $4181 = $4184;
                                                                    };
                                                                    var $4178 = $4181;
                                                                };
                                                                var $4175 = $4178;
                                                            };
                                                            var $4172 = $4175;
                                                        };
                                                        var $4170 = $4172;
                                                    };
                                                    var $4168 = $4170;
                                                };
                                                var $4166 = $4168;
                                            };
                                            var $4164 = $4166;
                                        };
                                        var $4162 = $4164;
                                    };
                                    var $4160 = $4162;
                                };
                                var $4160 = $4160($4157)($4158);
                                var $4152 = $4160;
                                break;
                        };
                        var $4144 = $4152;
                        break;
                };
                var $4136 = $4144;
                break;
        };
        return $4136;
    };
    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4193 = self.idx;
                var $4194 = self.code;
                var $4195 = self.err;
                var $4196 = Parser$Reply$error$($4193, $4194, $4195);
                var $4192 = $4196;
                break;
            case 'Parser.Reply.value':
                var $4197 = self.idx;
                var $4198 = self.code;
                var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term), $4197, $4198);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4200 = self.idx;
                        var $4201 = self.code;
                        var $4202 = self.err;
                        var $4203 = Parser$Reply$error$($4200, $4201, $4202);
                        var $4199 = $4203;
                        break;
                    case 'Parser.Reply.value':
                        var $4204 = self.idx;
                        var $4205 = self.code;
                        var $4206 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4204, $4205);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4208 = self.idx;
                                var $4209 = self.code;
                                var $4210 = self.err;
                                var $4211 = Parser$Reply$error$($4208, $4209, $4210);
                                var $4207 = $4211;
                                break;
                            case 'Parser.Reply.value':
                                var $4212 = self.idx;
                                var $4213 = self.code;
                                var $4214 = self.val;
                                var _expr$14 = (() => {
                                    var $4217 = _func$2;
                                    var $4218 = $4206;
                                    let _f$15 = $4217;
                                    let _x$14;
                                    while ($4218._ === 'List.cons') {
                                        _x$14 = $4218.head;
                                        var $4217 = Kind$Term$app$(_f$15, _x$14);
                                        _f$15 = $4217;
                                        $4218 = $4218.tail;
                                    }
                                    return _f$15;
                                })();
                                var $4215 = Parser$Reply$value$($4212, $4213, Kind$Term$ori$($4214, _expr$14));
                                var $4207 = $4215;
                                break;
                        };
                        var $4199 = $4207;
                        break;
                };
                var $4192 = $4199;
                break;
        };
        return $4192;
    };
    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4220 = self.idx;
                var $4221 = self.code;
                var $4222 = self.err;
                var $4223 = Parser$Reply$error$($4220, $4221, $4222);
                var $4219 = $4223;
                break;
            case 'Parser.Reply.value':
                var $4224 = self.idx;
                var $4225 = self.code;
                var $4226 = Parser$text$(_text$1, $4224, $4225);
                var $4219 = $4226;
                break;
        };
        return $4219;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4228 = self.idx;
                var $4229 = self.code;
                var $4230 = self.err;
                var $4231 = Parser$Reply$error$($4228, $4229, $4230);
                var $4227 = $4231;
                break;
            case 'Parser.Reply.value':
                var $4232 = self.idx;
                var $4233 = self.code;
                var $4234 = self.val;
                var self = Parser$text$("<", $4232, $4233);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4236 = self.idx;
                        var $4237 = self.code;
                        var $4238 = self.err;
                        var $4239 = Parser$Reply$error$($4236, $4237, $4238);
                        var $4235 = $4239;
                        break;
                    case 'Parser.Reply.value':
                        var $4240 = self.idx;
                        var $4241 = self.code;
                        var self = Parser$until1$(Parser$spaces_text(">"), Kind$Parser$item(Kind$Parser$term), $4240, $4241);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4243 = self.idx;
                                var $4244 = self.code;
                                var $4245 = self.err;
                                var $4246 = Parser$Reply$error$($4243, $4244, $4245);
                                var $4242 = $4246;
                                break;
                            case 'Parser.Reply.value':
                                var $4247 = self.idx;
                                var $4248 = self.code;
                                var $4249 = self.val;
                                var self = Kind$Parser$stop$($4234, $4247, $4248);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4251 = self.idx;
                                        var $4252 = self.code;
                                        var $4253 = self.err;
                                        var $4254 = Parser$Reply$error$($4251, $4252, $4253);
                                        var $4250 = $4254;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4255 = self.idx;
                                        var $4256 = self.code;
                                        var $4257 = self.val;
                                        var _expr$17 = (() => {
                                            var $4260 = _func$2;
                                            var $4261 = $4249;
                                            let _f$18 = $4260;
                                            let _x$17;
                                            while ($4261._ === 'List.cons') {
                                                _x$17 = $4261.head;
                                                var $4260 = Kind$Term$app$(_f$18, _x$17);
                                                _f$18 = $4260;
                                                $4261 = $4261.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $4258 = Parser$Reply$value$($4255, $4256, Kind$Term$ori$($4257, _expr$17));
                                        var $4250 = $4258;
                                        break;
                                };
                                var $4242 = $4250;
                                break;
                        };
                        var $4235 = $4242;
                        break;
                };
                var $4227 = $4235;
                break;
        };
        return $4227;
    };
    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);

    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4263 = self.idx;
                var $4264 = self.code;
                var $4265 = self.err;
                var $4266 = Parser$Reply$error$($4263, $4264, $4265);
                var $4262 = $4266;
                break;
            case 'Parser.Reply.value':
                var $4267 = self.idx;
                var $4268 = self.code;
                var self = Kind$Parser$term$($4267, $4268);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4270 = self.idx;
                        var $4271 = self.code;
                        var $4272 = self.err;
                        var $4273 = Parser$Reply$error$($4270, $4271, $4272);
                        var $4269 = $4273;
                        break;
                    case 'Parser.Reply.value':
                        var $4274 = self.idx;
                        var $4275 = self.code;
                        var $4276 = self.val;
                        var self = Kind$Parser$text$("]", $4274, $4275);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4278 = self.idx;
                                var $4279 = self.code;
                                var $4280 = self.err;
                                var $4281 = Parser$Reply$error$($4278, $4279, $4280);
                                var $4277 = $4281;
                                break;
                            case 'Parser.Reply.value':
                                var $4282 = self.idx;
                                var $4283 = self.code;
                                var self = Kind$Parser$text$("<-", $4282, $4283);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4285 = self.idx;
                                        var $4286 = self.code;
                                        var $4287 = self.err;
                                        var $4288 = Parser$Reply$error$($4285, $4286, $4287);
                                        var $4284 = $4288;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4289 = self.idx;
                                        var $4290 = self.code;
                                        var self = Kind$Parser$term$($4289, $4290);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4292 = self.idx;
                                                var $4293 = self.code;
                                                var $4294 = self.err;
                                                var $4295 = Parser$Reply$error$($4292, $4293, $4294);
                                                var $4291 = $4295;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4296 = self.idx;
                                                var $4297 = self.code;
                                                var $4298 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $4296, $4297);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4300 = self.idx;
                                                        var $4301 = self.code;
                                                        var $4302 = self.err;
                                                        var $4303 = Parser$Reply$error$($4300, $4301, $4302);
                                                        var $4299 = $4303;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4304 = self.idx;
                                                        var $4305 = self.code;
                                                        var $4306 = self.val;
                                                        var _term$23 = Kind$Term$ref$("List.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $4276);
                                                        var _term$26 = Kind$Term$app$(_term$25, $4298);
                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);
                                                        var $4307 = Parser$Reply$value$($4304, $4305, Kind$Term$ori$($4306, _term$27));
                                                        var $4299 = $4307;
                                                        break;
                                                };
                                                var $4291 = $4299;
                                                break;
                                        };
                                        var $4284 = $4291;
                                        break;
                                };
                                var $4277 = $4284;
                                break;
                        };
                        var $4269 = $4277;
                        break;
                };
                var $4262 = $4269;
                break;
        };
        return $4262;
    };
    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);

    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4309 = self.idx;
                var $4310 = self.code;
                var $4311 = self.err;
                var $4312 = Parser$Reply$error$($4309, $4310, $4311);
                var $4308 = $4312;
                break;
            case 'Parser.Reply.value':
                var $4313 = self.idx;
                var $4314 = self.code;
                var self = Kind$Parser$term$($4313, $4314);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4316 = self.idx;
                        var $4317 = self.code;
                        var $4318 = self.err;
                        var $4319 = Parser$Reply$error$($4316, $4317, $4318);
                        var $4315 = $4319;
                        break;
                    case 'Parser.Reply.value':
                        var $4320 = self.idx;
                        var $4321 = self.code;
                        var $4322 = self.val;
                        var self = Kind$Parser$text$("]", $4320, $4321);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4324 = self.idx;
                                var $4325 = self.code;
                                var $4326 = self.err;
                                var $4327 = Parser$Reply$error$($4324, $4325, $4326);
                                var $4323 = $4327;
                                break;
                            case 'Parser.Reply.value':
                                var $4328 = self.idx;
                                var $4329 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $4328, $4329);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4331 = self.idx;
                                        var $4332 = self.code;
                                        var $4333 = self.err;
                                        var $4334 = Parser$Reply$error$($4331, $4332, $4333);
                                        var $4330 = $4334;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4335 = self.idx;
                                        var $4336 = self.code;
                                        var $4337 = self.val;
                                        var _term$17 = Kind$Term$ref$("List.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $4322);
                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);
                                        var $4338 = Parser$Reply$value$($4335, $4336, Kind$Term$ori$($4337, _term$20));
                                        var $4330 = $4338;
                                        break;
                                };
                                var $4323 = $4330;
                                break;
                        };
                        var $4315 = $4323;
                        break;
                };
                var $4308 = $4315;
                break;
        };
        return $4308;
    };
    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);

    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4340 = self.idx;
                var $4341 = self.code;
                var $4342 = self.err;
                var $4343 = Parser$Reply$error$($4340, $4341, $4342);
                var $4339 = $4343;
                break;
            case 'Parser.Reply.value':
                var $4344 = self.idx;
                var $4345 = self.code;
                var self = Kind$Parser$term$($4344, $4345);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4347 = self.idx;
                        var $4348 = self.code;
                        var $4349 = self.err;
                        var $4350 = Parser$Reply$error$($4347, $4348, $4349);
                        var $4346 = $4350;
                        break;
                    case 'Parser.Reply.value':
                        var $4351 = self.idx;
                        var $4352 = self.code;
                        var $4353 = self.val;
                        var self = Kind$Parser$text$("}", $4351, $4352);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4355 = self.idx;
                                var $4356 = self.code;
                                var $4357 = self.err;
                                var $4358 = Parser$Reply$error$($4355, $4356, $4357);
                                var $4354 = $4358;
                                break;
                            case 'Parser.Reply.value':
                                var $4359 = self.idx;
                                var $4360 = self.code;
                                var self = Kind$Parser$text$("<-", $4359, $4360);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4362 = self.idx;
                                        var $4363 = self.code;
                                        var $4364 = self.err;
                                        var $4365 = Parser$Reply$error$($4362, $4363, $4364);
                                        var $4361 = $4365;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4366 = self.idx;
                                        var $4367 = self.code;
                                        var self = Kind$Parser$term$($4366, $4367);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4369 = self.idx;
                                                var $4370 = self.code;
                                                var $4371 = self.err;
                                                var $4372 = Parser$Reply$error$($4369, $4370, $4371);
                                                var $4368 = $4372;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4373 = self.idx;
                                                var $4374 = self.code;
                                                var $4375 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $4373, $4374);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4377 = self.idx;
                                                        var $4378 = self.code;
                                                        var $4379 = self.err;
                                                        var $4380 = Parser$Reply$error$($4377, $4378, $4379);
                                                        var $4376 = $4380;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4381 = self.idx;
                                                        var $4382 = self.code;
                                                        var $4383 = self.val;
                                                        var _term$23 = Kind$Term$ref$("Map.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $4353);
                                                        var _term$26 = Kind$Term$app$(_term$25, $4375);
                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);
                                                        var $4384 = Parser$Reply$value$($4381, $4382, Kind$Term$ori$($4383, _term$27));
                                                        var $4376 = $4384;
                                                        break;
                                                };
                                                var $4368 = $4376;
                                                break;
                                        };
                                        var $4361 = $4368;
                                        break;
                                };
                                var $4354 = $4361;
                                break;
                        };
                        var $4346 = $4354;
                        break;
                };
                var $4339 = $4346;
                break;
        };
        return $4339;
    };
    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);

    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4386 = self.idx;
                var $4387 = self.code;
                var $4388 = self.err;
                var $4389 = Parser$Reply$error$($4386, $4387, $4388);
                var $4385 = $4389;
                break;
            case 'Parser.Reply.value':
                var $4390 = self.idx;
                var $4391 = self.code;
                var self = Kind$Parser$term$($4390, $4391);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4393 = self.idx;
                        var $4394 = self.code;
                        var $4395 = self.err;
                        var $4396 = Parser$Reply$error$($4393, $4394, $4395);
                        var $4392 = $4396;
                        break;
                    case 'Parser.Reply.value':
                        var $4397 = self.idx;
                        var $4398 = self.code;
                        var $4399 = self.val;
                        var self = Kind$Parser$text$("}", $4397, $4398);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4401 = self.idx;
                                var $4402 = self.code;
                                var $4403 = self.err;
                                var $4404 = Parser$Reply$error$($4401, $4402, $4403);
                                var $4400 = $4404;
                                break;
                            case 'Parser.Reply.value':
                                var $4405 = self.idx;
                                var $4406 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $4405, $4406);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4408 = self.idx;
                                        var $4409 = self.code;
                                        var $4410 = self.err;
                                        var $4411 = Parser$Reply$error$($4408, $4409, $4410);
                                        var $4407 = $4411;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4412 = self.idx;
                                        var $4413 = self.code;
                                        var $4414 = self.val;
                                        var _term$17 = Kind$Term$ref$("Map.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $4399);
                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);
                                        var $4415 = Parser$Reply$value$($4412, $4413, Kind$Term$ori$($4414, _term$20));
                                        var $4407 = $4415;
                                        break;
                                };
                                var $4400 = $4407;
                                break;
                        };
                        var $4392 = $4400;
                        break;
                };
                var $4385 = $4392;
                break;
        };
        return $4385;
    };
    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);

    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4417 = self.idx;
                var $4418 = self.code;
                var $4419 = self.err;
                var $4420 = Parser$Reply$error$($4417, $4418, $4419);
                var $4416 = $4420;
                break;
            case 'Parser.Reply.value':
                var $4421 = self.idx;
                var $4422 = self.code;
                var self = Kind$Parser$term$($4421, $4422);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4424 = self.idx;
                        var $4425 = self.code;
                        var $4426 = self.err;
                        var $4427 = Parser$Reply$error$($4424, $4425, $4426);
                        var $4423 = $4427;
                        break;
                    case 'Parser.Reply.value':
                        var $4428 = self.idx;
                        var $4429 = self.code;
                        var $4430 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4428, $4429);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4432 = self.idx;
                                var $4433 = self.code;
                                var $4434 = self.err;
                                var $4435 = Parser$Reply$error$($4432, $4433, $4434);
                                var $4431 = $4435;
                                break;
                            case 'Parser.Reply.value':
                                var $4436 = self.idx;
                                var $4437 = self.code;
                                var $4438 = self.val;
                                var $4439 = Parser$Reply$value$($4436, $4437, Kind$Term$ori$($4438, Kind$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $4440 = $4430;
                                    return $4440;
                                }))));
                                var $4431 = $4439;
                                break;
                        };
                        var $4423 = $4431;
                        break;
                };
                var $4416 = $4423;
                break;
        };
        return $4416;
    };
    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);

    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4442 = self.idx;
                var $4443 = self.code;
                var $4444 = self.err;
                var $4445 = Parser$Reply$error$($4442, $4443, $4444);
                var $4441 = $4445;
                break;
            case 'Parser.Reply.value':
                var $4446 = self.idx;
                var $4447 = self.code;
                var self = Kind$Parser$term$($4446, $4447);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4449 = self.idx;
                        var $4450 = self.code;
                        var $4451 = self.err;
                        var $4452 = Parser$Reply$error$($4449, $4450, $4451);
                        var $4448 = $4452;
                        break;
                    case 'Parser.Reply.value':
                        var $4453 = self.idx;
                        var $4454 = self.code;
                        var $4455 = self.val;
                        var self = Kind$Parser$stop$(_init$3, $4453, $4454);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4457 = self.idx;
                                var $4458 = self.code;
                                var $4459 = self.err;
                                var $4460 = Parser$Reply$error$($4457, $4458, $4459);
                                var $4456 = $4460;
                                break;
                            case 'Parser.Reply.value':
                                var $4461 = self.idx;
                                var $4462 = self.code;
                                var $4463 = self.val;
                                var _term$16 = Kind$Term$ref$(_ref$2);
                                var _term$17 = Kind$Term$app$(_term$16, _val0$4);
                                var _term$18 = Kind$Term$app$(_term$17, $4455);
                                var $4464 = Parser$Reply$value$($4461, $4462, Kind$Term$ori$($4463, _term$18));
                                var $4456 = $4464;
                                break;
                        };
                        var $4448 = $4456;
                        break;
                };
                var $4441 = $4448;
                break;
        };
        return $4441;
    };
    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
    const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
    const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
    const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
    const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
    const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
    const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
    const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
    const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
    const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
    const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
    const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");

    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("<>", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4466 = self.idx;
                var $4467 = self.code;
                var $4468 = self.err;
                var $4469 = Parser$Reply$error$($4466, $4467, $4468);
                var $4465 = $4469;
                break;
            case 'Parser.Reply.value':
                var $4470 = self.idx;
                var $4471 = self.code;
                var self = Kind$Parser$term$($4470, $4471);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4473 = self.idx;
                        var $4474 = self.code;
                        var $4475 = self.err;
                        var $4476 = Parser$Reply$error$($4473, $4474, $4475);
                        var $4472 = $4476;
                        break;
                    case 'Parser.Reply.value':
                        var $4477 = self.idx;
                        var $4478 = self.code;
                        var $4479 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4477, $4478);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4481 = self.idx;
                                var $4482 = self.code;
                                var $4483 = self.err;
                                var $4484 = Parser$Reply$error$($4481, $4482, $4483);
                                var $4480 = $4484;
                                break;
                            case 'Parser.Reply.value':
                                var $4485 = self.idx;
                                var $4486 = self.code;
                                var $4487 = self.val;
                                var _term$14 = Kind$Term$ref$("Maybe.default");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4479);
                                var $4488 = Parser$Reply$value$($4485, $4486, Kind$Term$ori$($4487, _term$17));
                                var $4480 = $4488;
                                break;
                        };
                        var $4472 = $4480;
                        break;
                };
                var $4465 = $4472;
                break;
        };
        return $4465;
    };
    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);

    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4490 = self.idx;
                var $4491 = self.code;
                var $4492 = self.err;
                var $4493 = Parser$Reply$error$($4490, $4491, $4492);
                var $4489 = $4493;
                break;
            case 'Parser.Reply.value':
                var $4494 = self.idx;
                var $4495 = self.code;
                var self = Kind$Parser$term$($4494, $4495);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4497 = self.idx;
                        var $4498 = self.code;
                        var $4499 = self.err;
                        var $4500 = Parser$Reply$error$($4497, $4498, $4499);
                        var $4496 = $4500;
                        break;
                    case 'Parser.Reply.value':
                        var $4501 = self.idx;
                        var $4502 = self.code;
                        var $4503 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4501, $4502);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4505 = self.idx;
                                var $4506 = self.code;
                                var $4507 = self.err;
                                var $4508 = Parser$Reply$error$($4505, $4506, $4507);
                                var $4504 = $4508;
                                break;
                            case 'Parser.Reply.value':
                                var $4509 = self.idx;
                                var $4510 = self.code;
                                var _term$14 = Kind$Term$ref$("List.cons");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _head$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4503);
                                var self = Kind$Parser$stop$(_init$1, $4509, $4510);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4512 = self.idx;
                                        var $4513 = self.code;
                                        var $4514 = self.err;
                                        var $4515 = Parser$Reply$error$($4512, $4513, $4514);
                                        var $4511 = $4515;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4516 = self.idx;
                                        var $4517 = self.code;
                                        var $4518 = self.val;
                                        var $4519 = Parser$Reply$value$($4516, $4517, Kind$Term$ori$($4518, _term$17));
                                        var $4511 = $4519;
                                        break;
                                };
                                var $4504 = $4511;
                                break;
                        };
                        var $4496 = $4504;
                        break;
                };
                var $4489 = $4496;
                break;
        };
        return $4489;
    };
    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);

    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4521 = self.idx;
                var $4522 = self.code;
                var $4523 = self.err;
                var $4524 = Parser$Reply$error$($4521, $4522, $4523);
                var $4520 = $4524;
                break;
            case 'Parser.Reply.value':
                var $4525 = self.idx;
                var $4526 = self.code;
                var self = Kind$Parser$term$($4525, $4526);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4528 = self.idx;
                        var $4529 = self.code;
                        var $4530 = self.err;
                        var $4531 = Parser$Reply$error$($4528, $4529, $4530);
                        var $4527 = $4531;
                        break;
                    case 'Parser.Reply.value':
                        var $4532 = self.idx;
                        var $4533 = self.code;
                        var $4534 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4532, $4533);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4536 = self.idx;
                                var $4537 = self.code;
                                var $4538 = self.err;
                                var $4539 = Parser$Reply$error$($4536, $4537, $4538);
                                var $4535 = $4539;
                                break;
                            case 'Parser.Reply.value':
                                var $4540 = self.idx;
                                var $4541 = self.code;
                                var _term$14 = Kind$Term$ref$("List.concat");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4534);
                                var self = Kind$Parser$stop$(_init$1, $4540, $4541);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4543 = self.idx;
                                        var $4544 = self.code;
                                        var $4545 = self.err;
                                        var $4546 = Parser$Reply$error$($4543, $4544, $4545);
                                        var $4542 = $4546;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4547 = self.idx;
                                        var $4548 = self.code;
                                        var $4549 = self.val;
                                        var $4550 = Parser$Reply$value$($4547, $4548, Kind$Term$ori$($4549, _term$17));
                                        var $4542 = $4550;
                                        break;
                                };
                                var $4535 = $4542;
                                break;
                        };
                        var $4527 = $4535;
                        break;
                };
                var $4520 = $4527;
                break;
        };
        return $4520;
    };
    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);

    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4552 = self.idx;
                var $4553 = self.code;
                var $4554 = self.err;
                var $4555 = Parser$Reply$error$($4552, $4553, $4554);
                var $4551 = $4555;
                break;
            case 'Parser.Reply.value':
                var $4556 = self.idx;
                var $4557 = self.code;
                var self = Kind$Parser$term$($4556, $4557);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4559 = self.idx;
                        var $4560 = self.code;
                        var $4561 = self.err;
                        var $4562 = Parser$Reply$error$($4559, $4560, $4561);
                        var $4558 = $4562;
                        break;
                    case 'Parser.Reply.value':
                        var $4563 = self.idx;
                        var $4564 = self.code;
                        var $4565 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4563, $4564);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4567 = self.idx;
                                var $4568 = self.code;
                                var $4569 = self.err;
                                var $4570 = Parser$Reply$error$($4567, $4568, $4569);
                                var $4566 = $4570;
                                break;
                            case 'Parser.Reply.value':
                                var $4571 = self.idx;
                                var $4572 = self.code;
                                var _term$14 = Kind$Term$ref$("String.concat");
                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);
                                var _term$16 = Kind$Term$app$(_term$15, $4565);
                                var self = Kind$Parser$stop$(_init$1, $4571, $4572);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4574 = self.idx;
                                        var $4575 = self.code;
                                        var $4576 = self.err;
                                        var $4577 = Parser$Reply$error$($4574, $4575, $4576);
                                        var $4573 = $4577;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4578 = self.idx;
                                        var $4579 = self.code;
                                        var $4580 = self.val;
                                        var $4581 = Parser$Reply$value$($4578, $4579, Kind$Term$ori$($4580, _term$16));
                                        var $4573 = $4581;
                                        break;
                                };
                                var $4566 = $4573;
                                break;
                        };
                        var $4558 = $4566;
                        break;
                };
                var $4551 = $4558;
                break;
        };
        return $4551;
    };
    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);

    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4583 = self.idx;
                var $4584 = self.code;
                var $4585 = self.err;
                var $4586 = Parser$Reply$error$($4583, $4584, $4585);
                var $4582 = $4586;
                break;
            case 'Parser.Reply.value':
                var $4587 = self.idx;
                var $4588 = self.code;
                var self = Kind$Parser$term$($4587, $4588);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4590 = self.idx;
                        var $4591 = self.code;
                        var $4592 = self.err;
                        var $4593 = Parser$Reply$error$($4590, $4591, $4592);
                        var $4589 = $4593;
                        break;
                    case 'Parser.Reply.value':
                        var $4594 = self.idx;
                        var $4595 = self.code;
                        var $4596 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4594, $4595);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4598 = self.idx;
                                var $4599 = self.code;
                                var $4600 = self.err;
                                var $4601 = Parser$Reply$error$($4598, $4599, $4600);
                                var $4597 = $4601;
                                break;
                            case 'Parser.Reply.value':
                                var $4602 = self.idx;
                                var $4603 = self.code;
                                var $4604 = self.val;
                                var _term$14 = Kind$Term$ref$("Sigma.new");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);
                                var _term$18 = Kind$Term$app$(_term$17, $4596);
                                var $4605 = Parser$Reply$value$($4602, $4603, Kind$Term$ori$($4604, _term$18));
                                var $4597 = $4605;
                                break;
                        };
                        var $4589 = $4597;
                        break;
                };
                var $4582 = $4589;
                break;
        };
        return $4582;
    };
    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);

    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4607 = self.idx;
                var $4608 = self.code;
                var $4609 = self.err;
                var $4610 = Parser$Reply$error$($4607, $4608, $4609);
                var $4606 = $4610;
                break;
            case 'Parser.Reply.value':
                var $4611 = self.idx;
                var $4612 = self.code;
                var self = Kind$Parser$term$($4611, $4612);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4614 = self.idx;
                        var $4615 = self.code;
                        var $4616 = self.err;
                        var $4617 = Parser$Reply$error$($4614, $4615, $4616);
                        var $4613 = $4617;
                        break;
                    case 'Parser.Reply.value':
                        var $4618 = self.idx;
                        var $4619 = self.code;
                        var $4620 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4618, $4619);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4622 = self.idx;
                                var $4623 = self.code;
                                var $4624 = self.err;
                                var $4625 = Parser$Reply$error$($4622, $4623, $4624);
                                var $4621 = $4625;
                                break;
                            case 'Parser.Reply.value':
                                var $4626 = self.idx;
                                var $4627 = self.code;
                                var $4628 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4620);
                                var $4629 = Parser$Reply$value$($4626, $4627, Kind$Term$ori$($4628, _term$17));
                                var $4621 = $4629;
                                break;
                        };
                        var $4613 = $4621;
                        break;
                };
                var $4606 = $4613;
                break;
        };
        return $4606;
    };
    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);

    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4631 = self.idx;
                var $4632 = self.code;
                var $4633 = self.err;
                var $4634 = Parser$Reply$error$($4631, $4632, $4633);
                var $4630 = $4634;
                break;
            case 'Parser.Reply.value':
                var $4635 = self.idx;
                var $4636 = self.code;
                var self = Kind$Parser$term$($4635, $4636);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4638 = self.idx;
                        var $4639 = self.code;
                        var $4640 = self.err;
                        var $4641 = Parser$Reply$error$($4638, $4639, $4640);
                        var $4637 = $4641;
                        break;
                    case 'Parser.Reply.value':
                        var $4642 = self.idx;
                        var $4643 = self.code;
                        var $4644 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4642, $4643);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4646 = self.idx;
                                var $4647 = self.code;
                                var $4648 = self.err;
                                var $4649 = Parser$Reply$error$($4646, $4647, $4648);
                                var $4645 = $4649;
                                break;
                            case 'Parser.Reply.value':
                                var $4650 = self.idx;
                                var $4651 = self.code;
                                var $4652 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4644);
                                var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"), _term$17);
                                var $4653 = Parser$Reply$value$($4650, $4651, Kind$Term$ori$($4652, _term$18));
                                var $4645 = $4653;
                                break;
                        };
                        var $4637 = $4645;
                        break;
                };
                var $4630 = $4637;
                break;
        };
        return $4630;
    };
    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);

    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4655 = self.idx;
                var $4656 = self.code;
                var $4657 = self.err;
                var $4658 = Parser$Reply$error$($4655, $4656, $4657);
                var $4654 = $4658;
                break;
            case 'Parser.Reply.value':
                var $4659 = self.idx;
                var $4660 = self.code;
                var self = Kind$Parser$text$("rewrite", $4659, $4660);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4662 = self.idx;
                        var $4663 = self.code;
                        var $4664 = self.err;
                        var $4665 = Parser$Reply$error$($4662, $4663, $4664);
                        var $4661 = $4665;
                        break;
                    case 'Parser.Reply.value':
                        var $4666 = self.idx;
                        var $4667 = self.code;
                        var self = Kind$Parser$name1$($4666, $4667);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4669 = self.idx;
                                var $4670 = self.code;
                                var $4671 = self.err;
                                var $4672 = Parser$Reply$error$($4669, $4670, $4671);
                                var $4668 = $4672;
                                break;
                            case 'Parser.Reply.value':
                                var $4673 = self.idx;
                                var $4674 = self.code;
                                var $4675 = self.val;
                                var self = Kind$Parser$text$("in", $4673, $4674);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4677 = self.idx;
                                        var $4678 = self.code;
                                        var $4679 = self.err;
                                        var $4680 = Parser$Reply$error$($4677, $4678, $4679);
                                        var $4676 = $4680;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4681 = self.idx;
                                        var $4682 = self.code;
                                        var self = Kind$Parser$term$($4681, $4682);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4684 = self.idx;
                                                var $4685 = self.code;
                                                var $4686 = self.err;
                                                var $4687 = Parser$Reply$error$($4684, $4685, $4686);
                                                var $4683 = $4687;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4688 = self.idx;
                                                var $4689 = self.code;
                                                var $4690 = self.val;
                                                var self = Kind$Parser$text$("with", $4688, $4689);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4692 = self.idx;
                                                        var $4693 = self.code;
                                                        var $4694 = self.err;
                                                        var $4695 = Parser$Reply$error$($4692, $4693, $4694);
                                                        var $4691 = $4695;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4696 = self.idx;
                                                        var $4697 = self.code;
                                                        var self = Kind$Parser$term$($4696, $4697);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4699 = self.idx;
                                                                var $4700 = self.code;
                                                                var $4701 = self.err;
                                                                var $4702 = Parser$Reply$error$($4699, $4700, $4701);
                                                                var $4698 = $4702;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4703 = self.idx;
                                                                var $4704 = self.code;
                                                                var $4705 = self.val;
                                                                var self = Kind$Parser$stop$(_init$1, $4703, $4704);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4707 = self.idx;
                                                                        var $4708 = self.code;
                                                                        var $4709 = self.err;
                                                                        var $4710 = Parser$Reply$error$($4707, $4708, $4709);
                                                                        var $4706 = $4710;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4711 = self.idx;
                                                                        var $4712 = self.code;
                                                                        var $4713 = self.val;
                                                                        var _term$29 = Kind$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                        var _term$33 = Kind$Term$app$(_term$32, $4705);
                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($4675, (_x$34 => {
                                                                            var $4715 = $4690;
                                                                            return $4715;
                                                                        })));
                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);
                                                                        var $4714 = Parser$Reply$value$($4711, $4712, Kind$Term$ori$($4713, _term$35));
                                                                        var $4706 = $4714;
                                                                        break;
                                                                };
                                                                var $4698 = $4706;
                                                                break;
                                                        };
                                                        var $4691 = $4698;
                                                        break;
                                                };
                                                var $4683 = $4691;
                                                break;
                                        };
                                        var $4676 = $4683;
                                        break;
                                };
                                var $4668 = $4676;
                                break;
                        };
                        var $4661 = $4668;
                        break;
                };
                var $4654 = $4661;
                break;
        };
        return $4654;
    };
    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);

    function Kind$Term$ann$(_done$1, _term$2, _type$3) {
        var $4716 = ({
            _: 'Kind.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $4716;
    };
    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);

    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4718 = self.idx;
                var $4719 = self.code;
                var $4720 = self.err;
                var $4721 = Parser$Reply$error$($4718, $4719, $4720);
                var $4717 = $4721;
                break;
            case 'Parser.Reply.value':
                var $4722 = self.idx;
                var $4723 = self.code;
                var self = Kind$Parser$term$($4722, $4723);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4725 = self.idx;
                        var $4726 = self.code;
                        var $4727 = self.err;
                        var $4728 = Parser$Reply$error$($4725, $4726, $4727);
                        var $4724 = $4728;
                        break;
                    case 'Parser.Reply.value':
                        var $4729 = self.idx;
                        var $4730 = self.code;
                        var $4731 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4729, $4730);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4733 = self.idx;
                                var $4734 = self.code;
                                var $4735 = self.err;
                                var $4736 = Parser$Reply$error$($4733, $4734, $4735);
                                var $4732 = $4736;
                                break;
                            case 'Parser.Reply.value':
                                var $4737 = self.idx;
                                var $4738 = self.code;
                                var $4739 = self.val;
                                var $4740 = Parser$Reply$value$($4737, $4738, Kind$Term$ori$($4739, Kind$Term$ann$(Bool$false, _term$2, $4731)));
                                var $4732 = $4740;
                                break;
                        };
                        var $4724 = $4732;
                        break;
                };
                var $4717 = $4724;
                break;
        };
        return $4717;
    };
    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);

    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4742 = self.idx;
                var $4743 = self.code;
                var $4744 = self.err;
                var $4745 = Parser$Reply$error$($4742, $4743, $4744);
                var $4741 = $4745;
                break;
            case 'Parser.Reply.value':
                var $4746 = self.idx;
                var $4747 = self.code;
                var self = Kind$Parser$stop$(_init$1, $4746, $4747);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4749 = self.idx;
                        var $4750 = self.code;
                        var $4751 = self.err;
                        var $4752 = Parser$Reply$error$($4749, $4750, $4751);
                        var $4748 = $4752;
                        break;
                    case 'Parser.Reply.value':
                        var $4753 = self.idx;
                        var $4754 = self.code;
                        var $4755 = self.val;
                        var $4756 = Parser$Reply$value$($4753, $4754, Kind$Term$ori$($4755, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));
                        var $4748 = $4756;
                        break;
                };
                var $4741 = $4748;
                break;
        };
        return $4741;
    };
    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);

    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $4758 = self.idx;
                        var $4759 = self.code;
                        var $4760 = self.val;
                        var $4761 = Kind$Parser$suffix$(_init$1, $4760, $4758, $4759);
                        var $4757 = $4761;
                        break;
                    case 'Parser.Reply.error':
                        var $4762 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $4757 = $4762;
                        break;
                };
                return $4757;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);

    function Kind$Parser$term$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4764 = self.idx;
                var $4765 = self.code;
                var $4766 = self.err;
                var $4767 = Parser$Reply$error$($4764, $4765, $4766);
                var $4763 = $4767;
                break;
            case 'Parser.Reply.value':
                var $4768 = self.idx;
                var $4769 = self.code;
                var $4770 = self.val;
                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string, List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$not, List$cons$(Kind$Parser$left, List$cons$(Kind$Parser$right, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))($4768)($4769);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4772 = self.idx;
                        var $4773 = self.code;
                        var $4774 = self.err;
                        var $4775 = Parser$Reply$error$($4772, $4773, $4774);
                        var $4771 = $4775;
                        break;
                    case 'Parser.Reply.value':
                        var $4776 = self.idx;
                        var $4777 = self.code;
                        var $4778 = self.val;
                        var $4779 = Kind$Parser$suffix$($4770, $4778, $4776, $4777);
                        var $4771 = $4779;
                        break;
                };
                var $4763 = $4771;
                break;
        };
        return $4763;
    };
    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);

    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {
        var self = Kind$Parser$name$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4781 = self.idx;
                var $4782 = self.code;
                var $4783 = self.err;
                var $4784 = Parser$Reply$error$($4781, $4782, $4783);
                var $4780 = $4784;
                break;
            case 'Parser.Reply.value':
                var $4785 = self.idx;
                var $4786 = self.code;
                var $4787 = self.val;
                var self = Kind$Parser$text$(_sep$1, $4785, $4786);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4789 = self.idx;
                        var $4790 = self.code;
                        var $4791 = self.err;
                        var $4792 = Parser$Reply$error$($4789, $4790, $4791);
                        var $4788 = $4792;
                        break;
                    case 'Parser.Reply.value':
                        var $4793 = self.idx;
                        var $4794 = self.code;
                        var self = Kind$Parser$term$($4793, $4794);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4796 = self.idx;
                                var $4797 = self.code;
                                var $4798 = self.err;
                                var $4799 = Parser$Reply$error$($4796, $4797, $4798);
                                var $4795 = $4799;
                                break;
                            case 'Parser.Reply.value':
                                var $4800 = self.idx;
                                var $4801 = self.code;
                                var $4802 = self.val;
                                var $4803 = Parser$Reply$value$($4800, $4801, Pair$new$($4787, $4802));
                                var $4795 = $4803;
                                break;
                        };
                        var $4788 = $4795;
                        break;
                };
                var $4780 = $4788;
                break;
        };
        return $4780;
    };
    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);

    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {
        var $4804 = ({
            _: 'Kind.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $4804;
    };
    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);

    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$((() => {
            var self = _eras$2;
            if (self) {
                var $4806 = "<";
                return $4806;
            } else {
                var $4807 = "(";
                return $4807;
            };
        })(), _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4808 = self.idx;
                var $4809 = self.code;
                var $4810 = self.err;
                var $4811 = Parser$Reply$error$($4808, $4809, $4810);
                var $4805 = $4811;
                break;
            case 'Parser.Reply.value':
                var $4812 = self.idx;
                var $4813 = self.code;
                var self = Parser$until1$(Kind$Parser$text((() => {
                    var self = _eras$2;
                    if (self) {
                        var $4815 = ">";
                        return $4815;
                    } else {
                        var $4816 = ")";
                        return $4816;
                    };
                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $4812, $4813);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4817 = self.idx;
                        var $4818 = self.code;
                        var $4819 = self.err;
                        var $4820 = Parser$Reply$error$($4817, $4818, $4819);
                        var $4814 = $4820;
                        break;
                    case 'Parser.Reply.value':
                        var $4821 = self.idx;
                        var $4822 = self.code;
                        var $4823 = self.val;
                        var $4824 = Parser$Reply$value$($4821, $4822, List$mapped$($4823, (_pair$11 => {
                            var self = _pair$11;
                            switch (self._) {
                                case 'Pair.new':
                                    var $4826 = self.fst;
                                    var $4827 = self.snd;
                                    var $4828 = Kind$Binder$new$(_eras$2, $4826, $4827);
                                    var $4825 = $4828;
                                    break;
                            };
                            return $4825;
                        })));
                        var $4814 = $4824;
                        break;
                };
                var $4805 = $4814;
                break;
        };
        return $4805;
    };
    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $4830 = self.head;
                var $4831 = self.tail;
                var $4832 = List$cons$($4830, List$concat$($4831, _bs$3));
                var $4829 = $4832;
                break;
            case 'List.nil':
                var $4833 = _bs$3;
                var $4829 = $4833;
                break;
        };
        return $4829;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $4835 = self.head;
                var $4836 = self.tail;
                var $4837 = List$concat$($4835, List$flatten$($4836));
                var $4834 = $4837;
                break;
            case 'List.nil':
                var $4838 = List$nil;
                var $4834 = $4838;
                break;
        };
        return $4834;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4840 = self.idx;
                var $4841 = self.code;
                var $4842 = self.err;
                var $4843 = Parser$Reply$error$($4840, $4841, $4842);
                var $4839 = $4843;
                break;
            case 'Parser.Reply.value':
                var $4844 = self.idx;
                var $4845 = self.code;
                var $4846 = self.val;
                var $4847 = Parser$Reply$value$($4844, $4845, List$flatten$($4846));
                var $4839 = $4847;
                break;
        };
        return $4839;
    };
    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);
    const List$length = a0 => (list_length(a0));

    function Kind$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.cons':
                var $4849 = self.head;
                var $4850 = self.tail;
                var self = $4849;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $4852 = self.eras;
                        var $4853 = self.name;
                        var $4854 = self.term;
                        var $4855 = Kind$Term$all$($4852, "", $4853, $4854, (_s$8 => _x$9 => {
                            var $4856 = Kind$Parser$make_forall$($4850, _body$2);
                            return $4856;
                        }));
                        var $4851 = $4855;
                        break;
                };
                var $4848 = $4851;
                break;
            case 'List.nil':
                var $4857 = _body$2;
                var $4848 = $4857;
                break;
        };
        return $4848;
    };
    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4858 = self.head;
                        var $4859 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $4861 = Maybe$some$($4858);
                            var $4860 = $4861;
                        } else {
                            var $4862 = (self - 1n);
                            var $4863 = List$at$($4862, $4859);
                            var $4860 = $4863;
                        };
                        return $4860;
                    case 'List.nil':
                        var $4864 = Maybe$none;
                        return $4864;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $4865 = List$at$(_index$2, List$reverse$(_list$3));
        return $4865;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Kind$Term$var$(_name$1, _indx$2) {
        var $4866 = ({
            _: 'Kind.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $4866;
    };
    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);

    function Kind$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $4868 = Pair$new$("", 0n);
            var $4867 = $4868;
        } else {
            var $4869 = self.charCodeAt(0);
            var $4870 = self.slice(1);
            var _name_skips$4 = Kind$Context$get_name_skips$($4870);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $4872 = self.fst;
                    var $4873 = self.snd;
                    var self = ($4869 === 94);
                    if (self) {
                        var $4875 = Pair$new$($4872, Nat$succ$($4873));
                        var $4874 = $4875;
                    } else {
                        var $4876 = Pair$new$(String$cons$($4869, $4872), $4873);
                        var $4874 = $4876;
                    };
                    var $4871 = $4874;
                    break;
            };
            var $4867 = $4871;
        };
        return $4867;
    };
    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);

    function Kind$Name$eql$(_a$1, _b$2) {
        var $4877 = (_a$1 === _b$2);
        return $4877;
    };
    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);

    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.cons':
                        var $4878 = self.head;
                        var $4879 = self.tail;
                        var self = $4878;
                        switch (self._) {
                            case 'Pair.new':
                                var $4881 = self.fst;
                                var $4882 = self.snd;
                                var self = Kind$Name$eql$(_name$1, $4881);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $4885 = Maybe$some$($4882);
                                        var $4884 = $4885;
                                    } else {
                                        var $4886 = (self - 1n);
                                        var $4887 = Kind$Context$find$go$(_name$1, $4886, $4879);
                                        var $4884 = $4887;
                                    };
                                    var $4883 = $4884;
                                } else {
                                    var $4888 = Kind$Context$find$go$(_name$1, _skip$2, $4879);
                                    var $4883 = $4888;
                                };
                                var $4880 = $4883;
                                break;
                        };
                        return $4880;
                    case 'List.nil':
                        var $4889 = Maybe$none;
                        return $4889;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);

    function Kind$Context$find$(_name$1, _ctx$2) {
        var self = Kind$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $4891 = self.fst;
                var $4892 = self.snd;
                var $4893 = Kind$Context$find$go$($4891, $4892, _ctx$2);
                var $4890 = $4893;
                break;
        };
        return $4890;
    };
    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);

    function Kind$Path$o$(_path$1, _x$2) {
        var $4894 = _path$1((_x$2 + '0'));
        return $4894;
    };
    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);

    function Kind$Path$i$(_path$1, _x$2) {
        var $4895 = _path$1((_x$2 + '1'));
        return $4895;
    };
    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);

    function Kind$Path$to_bits$(_path$1) {
        var $4896 = _path$1(Bits$e);
        return $4896;
    };
    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);

    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Kind.Term.var':
                var $4898 = self.name;
                var $4899 = self.indx;
                var self = List$at_last$($4899, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $4901 = self.value;
                        var $4902 = Pair$snd$($4901);
                        var $4900 = $4902;
                        break;
                    case 'Maybe.none':
                        var $4903 = Kind$Term$var$($4898, $4899);
                        var $4900 = $4903;
                        break;
                };
                var $4897 = $4900;
                break;
            case 'Kind.Term.ref':
                var $4904 = self.name;
                var self = Kind$Context$find$($4904, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $4906 = self.value;
                        var $4907 = $4906;
                        var $4905 = $4907;
                        break;
                    case 'Maybe.none':
                        var $4908 = Kind$Term$ref$($4904);
                        var $4905 = $4908;
                        break;
                };
                var $4897 = $4905;
                break;
            case 'Kind.Term.all':
                var $4909 = self.eras;
                var $4910 = self.self;
                var $4911 = self.name;
                var $4912 = self.xtyp;
                var $4913 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $4914 = Kind$Term$all$($4909, $4910, $4911, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4912), (_s$10 => _x$11 => {
                    var $4915 = Kind$Term$bind$(List$cons$(Pair$new$($4911, _x$11), List$cons$(Pair$new$($4910, _s$10), _vars$1)), Kind$Path$i(_path$2), $4913(Kind$Term$var$($4910, _vlen$9))(Kind$Term$var$($4911, Nat$succ$(_vlen$9))));
                    return $4915;
                }));
                var $4897 = $4914;
                break;
            case 'Kind.Term.lam':
                var $4916 = self.name;
                var $4917 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $4918 = Kind$Term$lam$($4916, (_x$7 => {
                    var $4919 = Kind$Term$bind$(List$cons$(Pair$new$($4916, _x$7), _vars$1), Kind$Path$o(_path$2), $4917(Kind$Term$var$($4916, _vlen$6)));
                    return $4919;
                }));
                var $4897 = $4918;
                break;
            case 'Kind.Term.app':
                var $4920 = self.func;
                var $4921 = self.argm;
                var $4922 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4920), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $4921));
                var $4897 = $4922;
                break;
            case 'Kind.Term.let':
                var $4923 = self.name;
                var $4924 = self.expr;
                var $4925 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4926 = Kind$Term$let$($4923, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4924), (_x$8 => {
                    var $4927 = Kind$Term$bind$(List$cons$(Pair$new$($4923, _x$8), _vars$1), Kind$Path$i(_path$2), $4925(Kind$Term$var$($4923, _vlen$7)));
                    return $4927;
                }));
                var $4897 = $4926;
                break;
            case 'Kind.Term.def':
                var $4928 = self.name;
                var $4929 = self.expr;
                var $4930 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4931 = Kind$Term$def$($4928, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4929), (_x$8 => {
                    var $4932 = Kind$Term$bind$(List$cons$(Pair$new$($4928, _x$8), _vars$1), Kind$Path$i(_path$2), $4930(Kind$Term$var$($4928, _vlen$7)));
                    return $4932;
                }));
                var $4897 = $4931;
                break;
            case 'Kind.Term.ann':
                var $4933 = self.done;
                var $4934 = self.term;
                var $4935 = self.type;
                var $4936 = Kind$Term$ann$($4933, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4934), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $4935));
                var $4897 = $4936;
                break;
            case 'Kind.Term.gol':
                var $4937 = self.name;
                var $4938 = self.dref;
                var $4939 = self.verb;
                var $4940 = Kind$Term$gol$($4937, $4938, $4939);
                var $4897 = $4940;
                break;
            case 'Kind.Term.nat':
                var $4941 = self.natx;
                var $4942 = Kind$Term$nat$($4941);
                var $4897 = $4942;
                break;
            case 'Kind.Term.chr':
                var $4943 = self.chrx;
                var $4944 = Kind$Term$chr$($4943);
                var $4897 = $4944;
                break;
            case 'Kind.Term.str':
                var $4945 = self.strx;
                var $4946 = Kind$Term$str$($4945);
                var $4897 = $4946;
                break;
            case 'Kind.Term.cse':
                var $4947 = self.expr;
                var $4948 = self.name;
                var $4949 = self.with;
                var $4950 = self.cses;
                var $4951 = self.moti;
                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $4947);
                var _name$11 = $4948;
                var _wyth$12 = List$mapped$($4949, (_with_var$12 => {
                    var self = _with_var$12;
                    switch (self._) {
                        case 'Kind.Ann.new':
                            var $4954 = self.name;
                            var $4955 = self.term;
                            var $4956 = self.type;
                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $4955);
                            var self = $4956;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $4958 = self.value;
                                    var $4959 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $4958));
                                    var _with_var_type$17 = $4959;
                                    break;
                                case 'Maybe.none':
                                    var $4960 = Maybe$none;
                                    var _with_var_type$17 = $4960;
                                    break;
                            };
                            var $4957 = Kind$Ann$new$($4954, _with_var_term$16, _with_var_type$17);
                            var $4953 = $4957;
                            break;
                    };
                    return $4953;
                }));
                var _cses$13 = $4950;
                var _moti$14 = $4951;
                var $4952 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $4897 = $4952;
                break;
            case 'Kind.Term.ori':
                var $4961 = self.orig;
                var $4962 = self.expr;
                var $4963 = Kind$Term$ori$($4961, Kind$Term$bind$(_vars$1, _path$2, $4962));
                var $4897 = $4963;
                break;
            case 'Kind.Term.typ':
                var $4964 = Kind$Term$typ;
                var $4897 = $4964;
                break;
            case 'Kind.Term.hol':
                var $4965 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));
                var $4897 = $4965;
                break;
        };
        return $4897;
    };
    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);
    const Kind$Status$done = ({
        _: 'Kind.Status.done'
    });
    const Kind$Status$init = ({
        _: 'Kind.Status.init'
    });

    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $4966 = ({
            _: 'Kind.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $4966;
    };
    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var self = _done$9;
        if (self) {
            var $4968 = Kind$Status$done;
            var _stat$11 = $4968;
        } else {
            var $4969 = Kind$Status$init;
            var _stat$11 = $4969;
        };
        var $4967 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$11), _defs$10);
        return $4967;
    };
    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4971 = self.idx;
                var $4972 = self.code;
                var $4973 = self.err;
                var $4974 = Parser$Reply$error$($4971, $4972, $4973);
                var $4970 = $4974;
                break;
            case 'Parser.Reply.value':
                var $4975 = self.idx;
                var $4976 = self.code;
                var $4977 = self.val;
                var self = Kind$Parser$name1$($4975, $4976);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4979 = self.idx;
                        var $4980 = self.code;
                        var $4981 = self.err;
                        var $4982 = Parser$Reply$error$($4979, $4980, $4981);
                        var $4978 = $4982;
                        break;
                    case 'Parser.Reply.value':
                        var $4983 = self.idx;
                        var $4984 = self.code;
                        var $4985 = self.val;
                        var self = Parser$many$(Kind$Parser$binder(":"))($4983)($4984);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4987 = self.idx;
                                var $4988 = self.code;
                                var $4989 = self.err;
                                var $4990 = Parser$Reply$error$($4987, $4988, $4989);
                                var $4986 = $4990;
                                break;
                            case 'Parser.Reply.value':
                                var $4991 = self.idx;
                                var $4992 = self.code;
                                var $4993 = self.val;
                                var _args$15 = List$flatten$($4993);
                                var self = Kind$Parser$text$(":", $4991, $4992);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4995 = self.idx;
                                        var $4996 = self.code;
                                        var $4997 = self.err;
                                        var $4998 = Parser$Reply$error$($4995, $4996, $4997);
                                        var $4994 = $4998;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4999 = self.idx;
                                        var $5000 = self.code;
                                        var self = Kind$Parser$term$($4999, $5000);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5002 = self.idx;
                                                var $5003 = self.code;
                                                var $5004 = self.err;
                                                var $5005 = Parser$Reply$error$($5002, $5003, $5004);
                                                var $5001 = $5005;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5006 = self.idx;
                                                var $5007 = self.code;
                                                var $5008 = self.val;
                                                var self = Kind$Parser$term$($5006, $5007);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5010 = self.idx;
                                                        var $5011 = self.code;
                                                        var $5012 = self.err;
                                                        var $5013 = Parser$Reply$error$($5010, $5011, $5012);
                                                        var $5009 = $5013;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5014 = self.idx;
                                                        var $5015 = self.code;
                                                        var $5016 = self.val;
                                                        var self = Kind$Parser$stop$($4977, $5014, $5015);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5018 = self.idx;
                                                                var $5019 = self.code;
                                                                var $5020 = self.err;
                                                                var $5021 = Parser$Reply$error$($5018, $5019, $5020);
                                                                var $5017 = $5021;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5022 = self.idx;
                                                                var $5023 = self.code;
                                                                var $5024 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $5008);
                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Kind.Binder.new':
                                                                            var $5027 = self.name;
                                                                            var $5028 = $5027;
                                                                            var $5026 = $5028;
                                                                            break;
                                                                    };
                                                                    return $5026;
                                                                })), $5016);
                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                                    var $5029 = (_x$31 + '1');
                                                                    return $5029;
                                                                }), _type$29);
                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {
                                                                    var $5030 = (_x$32 + '0');
                                                                    return $5030;
                                                                }), _term$30);
                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $5024, $4985, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $5025 = Parser$Reply$value$($5022, $5023, _defs$33);
                                                                var $5017 = $5025;
                                                                break;
                                                        };
                                                        var $5009 = $5017;
                                                        break;
                                                };
                                                var $5001 = $5009;
                                                break;
                                        };
                                        var $4994 = $5001;
                                        break;
                                };
                                var $4986 = $4994;
                                break;
                        };
                        var $4978 = $4986;
                        break;
                };
                var $4970 = $4978;
                break;
        };
        return $4970;
    };
    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);

    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $5031 = ({
            _: 'Kind.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $5031;
    };
    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);

    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Kind$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5033 = self.idx;
                var $5034 = self.code;
                var $5035 = self.err;
                var $5036 = Parser$Reply$error$($5033, $5034, $5035);
                var $5032 = $5036;
                break;
            case 'Parser.Reply.value':
                var $5037 = self.idx;
                var $5038 = self.code;
                var $5039 = self.val;
                var self = Parser$maybe$(Kind$Parser$binder(":"), $5037, $5038);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5041 = self.idx;
                        var $5042 = self.code;
                        var $5043 = self.err;
                        var $5044 = Parser$Reply$error$($5041, $5042, $5043);
                        var $5040 = $5044;
                        break;
                    case 'Parser.Reply.value':
                        var $5045 = self.idx;
                        var $5046 = self.code;
                        var $5047 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Kind$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $5050 = self.idx;
                                    var $5051 = self.code;
                                    var $5052 = self.err;
                                    var $5053 = Parser$Reply$error$($5050, $5051, $5052);
                                    var $5049 = $5053;
                                    break;
                                case 'Parser.Reply.value':
                                    var $5054 = self.idx;
                                    var $5055 = self.code;
                                    var $5056 = Kind$Parser$binder$("=", $5054, $5055);
                                    var $5049 = $5056;
                                    break;
                            };
                            return $5049;
                        }), $5045, $5046);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5057 = self.idx;
                                var $5058 = self.code;
                                var $5059 = self.err;
                                var $5060 = Parser$Reply$error$($5057, $5058, $5059);
                                var $5048 = $5060;
                                break;
                            case 'Parser.Reply.value':
                                var $5061 = self.idx;
                                var $5062 = self.code;
                                var $5063 = self.val;
                                var _args$13 = Maybe$default$($5047, List$nil);
                                var _inds$14 = Maybe$default$($5063, List$nil);
                                var $5064 = Parser$Reply$value$($5061, $5062, Kind$Constructor$new$($5039, _args$13, _inds$14));
                                var $5048 = $5064;
                                break;
                        };
                        var $5040 = $5048;
                        break;
                };
                var $5032 = $5040;
                break;
        };
        return $5032;
    };
    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);

    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $5065 = ({
            _: 'Kind.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $5065;
    };
    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);

    function Kind$Parser$datatype$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5067 = self.idx;
                var $5068 = self.code;
                var $5069 = self.err;
                var $5070 = Parser$Reply$error$($5067, $5068, $5069);
                var $5066 = $5070;
                break;
            case 'Parser.Reply.value':
                var $5071 = self.idx;
                var $5072 = self.code;
                var self = Kind$Parser$name1$($5071, $5072);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5074 = self.idx;
                        var $5075 = self.code;
                        var $5076 = self.err;
                        var $5077 = Parser$Reply$error$($5074, $5075, $5076);
                        var $5073 = $5077;
                        break;
                    case 'Parser.Reply.value':
                        var $5078 = self.idx;
                        var $5079 = self.code;
                        var $5080 = self.val;
                        var self = Parser$maybe$(Kind$Parser$binder(":"), $5078, $5079);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5082 = self.idx;
                                var $5083 = self.code;
                                var $5084 = self.err;
                                var $5085 = Parser$Reply$error$($5082, $5083, $5084);
                                var $5081 = $5085;
                                break;
                            case 'Parser.Reply.value':
                                var $5086 = self.idx;
                                var $5087 = self.code;
                                var $5088 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $5091 = self.idx;
                                            var $5092 = self.code;
                                            var $5093 = self.err;
                                            var $5094 = Parser$Reply$error$($5091, $5092, $5093);
                                            var $5090 = $5094;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $5095 = self.idx;
                                            var $5096 = self.code;
                                            var $5097 = Kind$Parser$binder$(":", $5095, $5096);
                                            var $5090 = $5097;
                                            break;
                                    };
                                    return $5090;
                                }), $5086, $5087);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5098 = self.idx;
                                        var $5099 = self.code;
                                        var $5100 = self.err;
                                        var $5101 = Parser$Reply$error$($5098, $5099, $5100);
                                        var $5089 = $5101;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5102 = self.idx;
                                        var $5103 = self.code;
                                        var $5104 = self.val;
                                        var _pars$15 = Maybe$default$($5088, List$nil);
                                        var _inds$16 = Maybe$default$($5104, List$nil);
                                        var self = Kind$Parser$text$("{", $5102, $5103);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5106 = self.idx;
                                                var $5107 = self.code;
                                                var $5108 = self.err;
                                                var $5109 = Parser$Reply$error$($5106, $5107, $5108);
                                                var $5105 = $5109;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5110 = self.idx;
                                                var $5111 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item(Kind$Parser$constructor($5080)))($5110)($5111);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5113 = self.idx;
                                                        var $5114 = self.code;
                                                        var $5115 = self.err;
                                                        var $5116 = Parser$Reply$error$($5113, $5114, $5115);
                                                        var $5112 = $5116;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5117 = self.idx;
                                                        var $5118 = self.code;
                                                        var $5119 = self.val;
                                                        var $5120 = Parser$Reply$value$($5117, $5118, Kind$Datatype$new$($5080, _pars$15, _inds$16, $5119));
                                                        var $5112 = $5120;
                                                        break;
                                                };
                                                var $5105 = $5112;
                                                break;
                                        };
                                        var $5089 = $5105;
                                        break;
                                };
                                var $5081 = $5089;
                                break;
                        };
                        var $5073 = $5081;
                        break;
                };
                var $5066 = $5073;
                break;
        };
        return $5066;
    };
    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);

    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.cons':
                var $5122 = self.head;
                var $5123 = self.tail;
                var self = $5122;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5125 = self.eras;
                        var $5126 = self.name;
                        var $5127 = self.term;
                        var $5128 = Kind$Term$all$($5125, "", $5126, $5127, (_s$9 => _x$10 => {
                            var $5129 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $5123);
                            return $5129;
                        }));
                        var $5124 = $5128;
                        break;
                };
                var $5121 = $5124;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5131 = self.pars;
                        var $5132 = self.inds;
                        var _slf$8 = Kind$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $5135 = _slf$8;
                            var $5136 = $5131;
                            let _slf$10 = $5135;
                            let _v$9;
                            while ($5136._ === 'List.cons') {
                                _v$9 = $5136.head;
                                var $5135 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5137 = self.name;
                                            var $5138 = $5137;
                                            return $5138;
                                    };
                                })()));
                                _slf$10 = $5135;
                                $5136 = $5136.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $5140 = _slf$9;
                            var $5141 = $5132;
                            let _slf$11 = $5140;
                            let _v$10;
                            while ($5141._ === 'List.cons') {
                                _v$10 = $5141.head;
                                var $5140 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {
                                    var self = _v$10;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5142 = self.name;
                                            var $5143 = $5142;
                                            return $5143;
                                    };
                                })()));
                                _slf$11 = $5140;
                                $5141 = $5141.tail;
                            }
                            return _slf$11;
                        })();
                        var $5133 = Kind$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $5144 = Kind$Term$typ;
                            return $5144;
                        }));
                        var $5130 = $5133;
                        break;
                };
                var $5121 = $5130;
                break;
        };
        return $5121;
    };
    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);

    function Kind$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5146 = self.name;
                var $5147 = self.inds;
                var $5148 = Kind$Datatype$build_term$motive$go$(_type$1, $5146, $5147);
                var $5145 = $5148;
                break;
        };
        return $5145;
    };
    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);

    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.cons':
                var $5150 = self.head;
                var $5151 = self.tail;
                var self = $5150;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5153 = self.eras;
                        var $5154 = self.name;
                        var $5155 = self.term;
                        var _eras$9 = $5153;
                        var _name$10 = $5154;
                        var _xtyp$11 = $5155;
                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $5151);
                        var $5156 = Kind$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $5157 = _body$12;
                            return $5157;
                        }));
                        var $5152 = $5156;
                        break;
                };
                var $5149 = $5152;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5159 = self.name;
                        var $5160 = self.pars;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Kind.Constructor.new':
                                var $5162 = self.name;
                                var $5163 = self.args;
                                var $5164 = self.inds;
                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $5167 = _ret$11;
                                    var $5168 = $5164;
                                    let _ret$13 = $5167;
                                    let _v$12;
                                    while ($5168._ === 'List.cons') {
                                        _v$12 = $5168.head;
                                        var $5167 = Kind$Term$app$(_ret$13, (() => {
                                            var self = _v$12;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5169 = self.term;
                                                    var $5170 = $5169;
                                                    return $5170;
                                            };
                                        })());
                                        _ret$13 = $5167;
                                        $5168 = $5168.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($5159, List$cons$(Kind$Name$read$("."), List$cons$($5162, List$nil))));
                                var _slf$14 = Kind$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $5172 = _slf$14;
                                    var $5173 = $5160;
                                    let _slf$16 = $5172;
                                    let _v$15;
                                    while ($5173._ === 'List.cons') {
                                        _v$15 = $5173.head;
                                        var $5172 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {
                                            var self = _v$15;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5174 = self.name;
                                                    var $5175 = $5174;
                                                    return $5175;
                                            };
                                        })()));
                                        _slf$16 = $5172;
                                        $5173 = $5173.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $5177 = _slf$15;
                                    var $5178 = $5163;
                                    let _slf$17 = $5177;
                                    let _v$16;
                                    while ($5178._ === 'List.cons') {
                                        _v$16 = $5178.head;
                                        var $5177 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {
                                            var self = _v$16;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5179 = self.name;
                                                    var $5180 = $5179;
                                                    return $5180;
                                            };
                                        })()));
                                        _slf$17 = $5177;
                                        $5178 = $5178.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $5165 = Kind$Term$app$(_ret$12, _slf$16);
                                var $5161 = $5165;
                                break;
                        };
                        var $5158 = $5161;
                        break;
                };
                var $5149 = $5158;
                break;
        };
        return $5149;
    };
    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Kind.Constructor.new':
                var $5182 = self.args;
                var $5183 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $5182);
                var $5181 = $5183;
                break;
        };
        return $5181;
    };
    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);

    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $5185 = self.head;
                var $5186 = self.tail;
                var self = $5185;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5188 = self.name;
                        var $5189 = Kind$Term$all$(Bool$false, "", $5188, Kind$Datatype$build_term$constructor$(_type$1, $5185), (_s$9 => _x$10 => {
                            var $5190 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $5186);
                            return $5190;
                        }));
                        var $5187 = $5189;
                        break;
                };
                var $5184 = $5187;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5192 = self.inds;
                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $5195 = _ret$8;
                            var $5196 = $5192;
                            let _ret$10 = $5195;
                            let _v$9;
                            while ($5196._ === 'List.cons') {
                                _v$9 = $5196.head;
                                var $5195 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5197 = self.name;
                                            var $5198 = $5197;
                                            return $5198;
                                    };
                                })()));
                                _ret$10 = $5195;
                                $5196 = $5196.tail;
                            }
                            return _ret$10;
                        })();
                        var $5193 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + ".Self")));
                        var $5191 = $5193;
                        break;
                };
                var $5184 = $5191;
                break;
        };
        return $5184;
    };
    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5200 = self.name;
                var $5201 = self.ctrs;
                var $5202 = Kind$Datatype$build_term$constructors$go$(_type$1, $5200, $5201);
                var $5199 = $5202;
                break;
        };
        return $5199;
    };
    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);

    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $5204 = self.head;
                var $5205 = self.tail;
                var self = $5204;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5207 = self.name;
                        var $5208 = Kind$Term$lam$($5207, (_x$10 => {
                            var $5209 = Kind$Datatype$build_term$go$(_type$1, _name$2, $5205, _inds$4);
                            return $5209;
                        }));
                        var $5206 = $5208;
                        break;
                };
                var $5203 = $5206;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $5211 = self.head;
                        var $5212 = self.tail;
                        var self = $5211;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5214 = self.name;
                                var $5215 = Kind$Term$lam$($5214, (_x$10 => {
                                    var $5216 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $5212);
                                    return $5216;
                                }));
                                var $5213 = $5215;
                                break;
                        };
                        var $5210 = $5213;
                        break;
                    case 'List.nil':
                        var $5217 = Kind$Term$all$(Bool$true, (_name$2 + ".Self"), Kind$Name$read$("P"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $5218 = Kind$Datatype$build_term$constructors$(_type$1);
                            return $5218;
                        }));
                        var $5210 = $5217;
                        break;
                };
                var $5203 = $5210;
                break;
        };
        return $5203;
    };
    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5220 = self.name;
                var $5221 = self.pars;
                var $5222 = self.inds;
                var $5223 = Kind$Datatype$build_term$go$(_type$1, $5220, $5221, $5222);
                var $5219 = $5223;
                break;
        };
        return $5219;
    };
    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);

    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $5225 = self.head;
                var $5226 = self.tail;
                var self = $5225;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5228 = self.name;
                        var $5229 = self.term;
                        var $5230 = Kind$Term$all$(Bool$false, "", $5228, $5229, (_s$10 => _x$11 => {
                            var $5231 = Kind$Datatype$build_type$go$(_type$1, _name$2, $5226, _inds$4);
                            return $5231;
                        }));
                        var $5227 = $5230;
                        break;
                };
                var $5224 = $5227;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $5233 = self.head;
                        var $5234 = self.tail;
                        var self = $5233;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5236 = self.name;
                                var $5237 = self.term;
                                var $5238 = Kind$Term$all$(Bool$false, "", $5236, $5237, (_s$10 => _x$11 => {
                                    var $5239 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $5234);
                                    return $5239;
                                }));
                                var $5235 = $5238;
                                break;
                        };
                        var $5232 = $5235;
                        break;
                    case 'List.nil':
                        var $5240 = Kind$Term$typ;
                        var $5232 = $5240;
                        break;
                };
                var $5224 = $5232;
                break;
        };
        return $5224;
    };
    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5242 = self.name;
                var $5243 = self.pars;
                var $5244 = self.inds;
                var $5245 = Kind$Datatype$build_type$go$(_type$1, $5242, $5243, $5244);
                var $5241 = $5245;
                break;
        };
        return $5241;
    };
    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);

    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $5247 = self.head;
                var $5248 = self.tail;
                var self = $5247;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5250 = self.name;
                        var $5251 = Kind$Term$lam$($5250, (_x$9 => {
                            var $5252 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $5248);
                            return $5252;
                        }));
                        var $5249 = $5251;
                        break;
                };
                var $5246 = $5249;
                break;
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5254 = self.name;
                        var $5255 = self.args;
                        var _ret$7 = Kind$Term$ref$($5254);
                        var _ret$8 = (() => {
                            var $5258 = _ret$7;
                            var $5259 = $5255;
                            let _ret$9 = $5258;
                            let _arg$8;
                            while ($5259._ === 'List.cons') {
                                _arg$8 = $5259.head;
                                var $5258 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5260 = self.name;
                                            var $5261 = $5260;
                                            return $5261;
                                    };
                                })()));
                                _ret$9 = $5258;
                                $5259 = $5259.tail;
                            }
                            return _ret$9;
                        })();
                        var $5256 = _ret$8;
                        var $5253 = $5256;
                        break;
                };
                var $5246 = $5253;
                break;
        };
        return $5246;
    };
    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);

    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5263 = self.ctrs;
                var $5264 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $5263);
                var $5262 = $5264;
                break;
        };
        return $5262;
    };
    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);

    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $5266 = self.head;
                var $5267 = self.tail;
                var self = $5266;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5269 = self.name;
                        var $5270 = Kind$Term$lam$($5269, (_x$11 => {
                            var $5271 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $5267, _args$5);
                            return $5271;
                        }));
                        var $5268 = $5270;
                        break;
                };
                var $5265 = $5268;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $5273 = self.head;
                        var $5274 = self.tail;
                        var self = $5273;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5276 = self.name;
                                var $5277 = Kind$Term$lam$($5276, (_x$11 => {
                                    var $5278 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $5274);
                                    return $5278;
                                }));
                                var $5275 = $5277;
                                break;
                        };
                        var $5272 = $5275;
                        break;
                    case 'List.nil':
                        var $5279 = Kind$Term$lam$(Kind$Name$read$("P"), (_x$6 => {
                            var $5280 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $5280;
                        }));
                        var $5272 = $5279;
                        break;
                };
                var $5265 = $5272;
                break;
        };
        return $5265;
    };
    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5282 = self.name;
                var $5283 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5285 = self.args;
                        var $5286 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $5282, $5283, $5285);
                        var $5284 = $5286;
                        break;
                };
                var $5281 = $5284;
                break;
        };
        return $5281;
    };
    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);

    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $5288 = self.head;
                var $5289 = self.tail;
                var self = $5288;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5291 = self.eras;
                        var $5292 = self.name;
                        var $5293 = self.term;
                        var $5294 = Kind$Term$all$($5291, "", $5292, $5293, (_s$11 => _x$12 => {
                            var $5295 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $5289, _args$5);
                            return $5295;
                        }));
                        var $5290 = $5294;
                        break;
                };
                var $5287 = $5290;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $5297 = self.head;
                        var $5298 = self.tail;
                        var self = $5297;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5300 = self.eras;
                                var $5301 = self.name;
                                var $5302 = self.term;
                                var $5303 = Kind$Term$all$($5300, "", $5301, $5302, (_s$11 => _x$12 => {
                                    var $5304 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $5298);
                                    return $5304;
                                }));
                                var $5299 = $5303;
                                break;
                        };
                        var $5296 = $5299;
                        break;
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Kind.Datatype.new':
                                var $5306 = self.pars;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Kind.Constructor.new':
                                        var $5308 = self.inds;
                                        var _type$13 = Kind$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $5311 = _type$13;
                                            var $5312 = $5306;
                                            let _type$15 = $5311;
                                            let _v$14;
                                            while ($5312._ === 'List.cons') {
                                                _v$14 = $5312.head;
                                                var $5311 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {
                                                    var self = _v$14;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $5313 = self.name;
                                                            var $5314 = $5313;
                                                            return $5314;
                                                    };
                                                })()));
                                                _type$15 = $5311;
                                                $5312 = $5312.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $5316 = _type$14;
                                            var $5317 = $5308;
                                            let _type$16 = $5316;
                                            let _v$15;
                                            while ($5317._ === 'List.cons') {
                                                _v$15 = $5317.head;
                                                var $5316 = Kind$Term$app$(_type$16, (() => {
                                                    var self = _v$15;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $5318 = self.term;
                                                            var $5319 = $5318;
                                                            return $5319;
                                                    };
                                                })());
                                                _type$16 = $5316;
                                                $5317 = $5317.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $5309 = _type$15;
                                        var $5307 = $5309;
                                        break;
                                };
                                var $5305 = $5307;
                                break;
                        };
                        var $5296 = $5305;
                        break;
                };
                var $5287 = $5296;
                break;
        };
        return $5287;
    };
    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5321 = self.name;
                var $5322 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5324 = self.args;
                        var $5325 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $5321, $5322, $5324);
                        var $5323 = $5325;
                        break;
                };
                var $5320 = $5323;
                break;
        };
        return $5320;
    };
    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);

    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5327 = self.idx;
                var $5328 = self.code;
                var $5329 = self.err;
                var $5330 = Parser$Reply$error$($5327, $5328, $5329);
                var $5326 = $5330;
                break;
            case 'Parser.Reply.value':
                var $5331 = self.idx;
                var $5332 = self.code;
                var $5333 = self.val;
                var self = Kind$Parser$datatype$($5331, $5332);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5335 = self.idx;
                        var $5336 = self.code;
                        var $5337 = self.err;
                        var $5338 = Parser$Reply$error$($5335, $5336, $5337);
                        var $5334 = $5338;
                        break;
                    case 'Parser.Reply.value':
                        var $5339 = self.idx;
                        var $5340 = self.code;
                        var $5341 = self.val;
                        var self = Kind$Parser$stop$($5333, $5339, $5340);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5343 = self.idx;
                                var $5344 = self.code;
                                var $5345 = self.err;
                                var $5346 = Parser$Reply$error$($5343, $5344, $5345);
                                var $5342 = $5346;
                                break;
                            case 'Parser.Reply.value':
                                var $5347 = self.idx;
                                var $5348 = self.code;
                                var $5349 = self.val;
                                var self = $5341;
                                switch (self._) {
                                    case 'Kind.Datatype.new':
                                        var $5351 = self.name;
                                        var $5352 = self.pars;
                                        var $5353 = self.inds;
                                        var $5354 = self.ctrs;
                                        var _term$19 = Kind$Datatype$build_term$($5341);
                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {
                                            var $5356 = (_x$20 + '1');
                                            return $5356;
                                        }), _term$19);
                                        var _type$21 = Kind$Datatype$build_type$($5341);
                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {
                                            var $5357 = (_x$22 + '0');
                                            return $5357;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($5352)) + (list_length($5353)));
                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $5349, $5351, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($5354, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $5351;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $5359 = self.args;
                                                        var $5360 = $5359;
                                                        return $5360;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $5361 = self.name;
                                                        var $5362 = $5361;
                                                        return $5362;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Kind$Constructor$build_term$($5341, _ctr$25);
                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                var $5363 = (_x$31 + '1');
                                                return $5363;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Kind$Constructor$build_type$($5341, _ctr$25);
                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {
                                                var $5364 = (_x$33 + '0');
                                                return $5364;
                                            }), _ctr_type$32);
                                            var $5358 = Kind$Map$def$(_file$1, _code$2, $5349, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $5358;
                                        }));
                                        var $5355 = (_idx$26 => _code$27 => {
                                            var $5365 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $5365;
                                        });
                                        var $5350 = $5355;
                                        break;
                                };
                                var $5350 = $5350($5347)($5348);
                                var $5342 = $5350;
                                break;
                        };
                        var $5334 = $5342;
                        break;
                };
                var $5326 = $5334;
                break;
        };
        return $5326;
    };
    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $5367 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $5366 = $5367;
        } else {
            var $5368 = self.charCodeAt(0);
            var $5369 = self.slice(1);
            var $5370 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $5366 = $5370;
        };
        return $5366;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5372 = self.idx;
                var $5373 = self.code;
                var $5374 = self.err;
                var $5375 = Parser$Reply$error$($5372, $5373, $5374);
                var $5371 = $5375;
                break;
            case 'Parser.Reply.value':
                var $5376 = self.idx;
                var $5377 = self.code;
                var self = Parser$eof$($5376, $5377);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5379 = self.idx;
                        var $5380 = self.code;
                        var $5381 = self.err;
                        var $5382 = Parser$Reply$error$($5379, $5380, $5381);
                        var $5378 = $5382;
                        break;
                    case 'Parser.Reply.value':
                        var $5383 = self.idx;
                        var $5384 = self.code;
                        var $5385 = Parser$Reply$value$($5383, $5384, _defs$3);
                        var $5378 = $5385;
                        break;
                };
                var $5371 = $5378;
                break;
        };
        return $5371;
    };
    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5387 = self.idx;
                var $5388 = self.code;
                var $5389 = self.err;
                var $5390 = Parser$Reply$error$($5387, $5388, $5389);
                var $5386 = $5390;
                break;
            case 'Parser.Reply.value':
                var $5391 = self.idx;
                var $5392 = self.code;
                var $5393 = self.val;
                var self = $5393;
                if (self) {
                    var $5395 = (_idx$9 => _code$10 => {
                        var $5396 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $5396;
                    });
                    var $5394 = $5395;
                } else {
                    var $5397 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5399 = self.idx;
                                var $5400 = self.code;
                                var $5401 = self.err;
                                var $5402 = Parser$Reply$error$($5399, $5400, $5401);
                                var $5398 = $5402;
                                break;
                            case 'Parser.Reply.value':
                                var $5403 = self.idx;
                                var $5404 = self.code;
                                var $5405 = self.val;
                                var $5406 = Kind$Parser$file$(_file$1, _code$2, $5405, $5403, $5404);
                                var $5398 = $5406;
                                break;
                        };
                        return $5398;
                    });
                    var $5394 = $5397;
                };
                var $5394 = $5394($5391)($5392);
                var $5386 = $5394;
                break;
        };
        return $5386;
    };
    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);

    function Either$(_A$1, _B$2) {
        var $5407 = null;
        return $5407;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $5409 = self.head;
                var $5410 = self.tail;
                var $5411 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $5412 = "";
                        return $5412;
                    } else {
                        var $5413 = _sep$1;
                        return $5413;
                    };
                })(), List$cons$($5409, List$cons$(String$join$go$(_sep$1, $5410, Bool$false), List$nil))));
                var $5408 = $5411;
                break;
            case 'List.nil':
                var $5414 = "";
                var $5408 = $5414;
                break;
        };
        return $5408;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $5415 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $5415;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {
        var $5416 = String$join$("\u{a}", _res$3);
        return $5416;
    };
    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $5418 = self.value;
                var $5419 = _f$5($5418);
                var $5417 = $5419;
                break;
            case 'Maybe.none':
                var $5420 = _a$4;
                var $5417 = $5420;
                break;
        };
        return $5417;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5422 = Bool$true;
            var $5421 = $5422;
        } else {
            var $5423 = (self - 1n);
            var $5424 = Bool$false;
            var $5421 = $5424;
        };
        return $5421;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5426 = Nat$zero;
            var $5425 = $5426;
        } else {
            var $5427 = (self - 1n);
            var $5428 = Nat$succ$(Nat$succ$(Nat$double$($5427)));
            var $5425 = $5428;
        };
        return $5425;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5430 = Nat$zero;
            var $5429 = $5430;
        } else {
            var $5431 = (self - 1n);
            var $5432 = $5431;
            var $5429 = $5432;
        };
        return $5429;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $5434 = _str$3;
            var $5433 = $5434;
        } else {
            var $5435 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $5437 = String$cons$(_chr$2, String$pad_right$($5435, _chr$2, ""));
                var $5436 = $5437;
            } else {
                var $5438 = self.charCodeAt(0);
                var $5439 = self.slice(1);
                var $5440 = String$cons$($5438, String$pad_right$($5435, _chr$2, $5439));
                var $5436 = $5440;
            };
            var $5433 = $5436;
        };
        return $5433;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $5441 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $5441;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Either$left$(_value$3) {
        var $5442 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $5442;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $5443 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $5443;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $5444 = Either$left$(_n$1);
                    return $5444;
                } else {
                    var $5445 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $5447 = Either$right$(Nat$succ$($5445));
                        var $5446 = $5447;
                    } else {
                        var $5448 = (self - 1n);
                        var $5449 = Nat$sub_rem$($5448, $5445);
                        var $5446 = $5449;
                    };
                    return $5446;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $5450 = self.value;
                        var $5451 = Nat$div_mod$go$($5450, _m$2, Nat$succ$(_d$3));
                        return $5451;
                    case 'Either.right':
                        var $5452 = Pair$new$(_d$3, _n$1);
                        return $5452;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $5453 = self.fst;
                        var $5454 = self.snd;
                        var self = $5453;
                        if (self === 0n) {
                            var $5456 = List$cons$($5454, _res$3);
                            var $5455 = $5456;
                        } else {
                            var $5457 = (self - 1n);
                            var $5458 = Nat$to_base$go$(_base$1, $5453, List$cons$($5454, _res$3));
                            var $5455 = $5458;
                        };
                        return $5455;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $5459 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $5459;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $5460 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $5460;
                } else {
                    var $5461 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $5463 = _r$3;
                        var $5462 = $5463;
                    } else {
                        var $5464 = (self - 1n);
                        var $5465 = Nat$mod$go$($5464, $5461, Nat$succ$(_r$3));
                        var $5462 = $5465;
                    };
                    return $5462;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);
    const Nat$mod = a0 => a1 => (a0 % a1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = (_n$2 % _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.some':
                    var $5468 = self.value;
                    var $5469 = $5468;
                    var $5467 = $5469;
                    break;
                case 'Maybe.none':
                    var $5470 = 35;
                    var $5467 = $5470;
                    break;
            };
            var $5466 = $5467;
        } else {
            var $5471 = 35;
            var $5466 = $5471;
        };
        return $5466;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $5472 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $5473 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $5473;
        }));
        return $5472;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $5474 = Nat$to_string_base$(10n, _n$1);
        return $5474;
    };
    const Nat$show = x0 => Nat$show$(x0);
    const Bool$not = a0 => (!a0);

    function Kind$Code$color$(_col$1, _str$2) {
        var $5475 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $5475;
    };
    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $5477 = self.head;
                var $5478 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $5480 = List$nil;
                    var $5479 = $5480;
                } else {
                    var $5481 = (self - 1n);
                    var $5482 = List$cons$($5477, List$take$($5481, $5478));
                    var $5479 = $5482;
                };
                var $5476 = $5479;
                break;
            case 'List.nil':
                var $5483 = List$nil;
                var $5476 = $5483;
                break;
        };
        return $5476;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $5485 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $5484 = $5485;
                } else {
                    var $5486 = self.charCodeAt(0);
                    var $5487 = self.slice(1);
                    var self = ($5486 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $5490 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $5489 = $5490;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $5493 = self.value;
                                        var $5494 = Maybe$some$(Nat$pred$($5493));
                                        var $5492 = $5494;
                                        break;
                                    case 'Maybe.none':
                                        var $5495 = Maybe$some$(_spa$9);
                                        var $5492 = $5495;
                                        break;
                                };
                                var _lft$14 = $5492;
                            } else {
                                var $5496 = (self - 1n);
                                var $5497 = _lft$6;
                                var _lft$14 = $5497;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $5491 = Kind$Code$highlight$go$($5487, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $5489 = $5491;
                        };
                        var $5488 = $5489;
                    } else {
                        var _chr$12 = String$cons$($5486, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $5499 = String$reverse$(Kind$Code$color$("31", Kind$Code$color$("4", _chr$12)));
                            var _chr$13 = $5499;
                        } else {
                            var $5500 = _chr$12;
                            var _chr$13 = $5500;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $5501 = List$take$(_spa$9, _res$8);
                            var _res$14 = $5501;
                        } else {
                            var $5502 = _res$8;
                            var _res$14 = $5502;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $5498 = Kind$Code$highlight$go$($5487, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $5488 = $5498;
                    };
                    var $5484 = $5488;
                };
                return $5484;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $5503 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $5503;
    };
    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);

    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5505 = self.idx;
                var $5506 = self.err;
                var _err$7 = $5506;
                var _hig$8 = Kind$Code$highlight$(_code$2, $5505, Nat$succ$($5505));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $5507 = Either$left$(_str$9);
                var $5504 = $5507;
                break;
            case 'Parser.Reply.value':
                var $5508 = self.val;
                var $5509 = Either$right$($5508);
                var $5504 = $5509;
                break;
        };
        return $5504;
    };
    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);

    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.cons':
                var $5511 = self.head;
                var $5512 = self.tail;
                var $5513 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $5514 = _m$bind$6;
                    return $5514;
                }))(IO$get_file$($5511))((_code$6 => {
                    var _read$7 = Kind$Defs$read$($5511, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.right':
                            var $5516 = self.value;
                            var _defs$9 = $5516;
                            var self = Kind$Map$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $5518 = Kind$Synth$load$go$(_name$1, $5512, _defs$9);
                                    var $5517 = $5518;
                                    break;
                                case 'Maybe.some':
                                    var $5519 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $5520 = _m$pure$12;
                                        return $5520;
                                    }))(Maybe$some$(_defs$9));
                                    var $5517 = $5519;
                                    break;
                            };
                            var $5515 = $5517;
                            break;
                        case 'Either.left':
                            var $5521 = Kind$Synth$load$go$(_name$1, $5512, _defs$3);
                            var $5515 = $5521;
                            break;
                    };
                    return $5515;
                }));
                var $5510 = $5513;
                break;
            case 'List.nil':
                var $5522 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $5523 = _m$pure$5;
                    return $5523;
                }))(Maybe$none);
                var $5510 = $5522;
                break;
        };
        return $5510;
    };
    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);

    function Kind$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $5525 = self.head;
                var $5526 = self.tail;
                var _head$5 = (_last$2 + ($5525 + ".kind"));
                var _tail$6 = Kind$Synth$files_of$make$($5526, (_last$2 + ($5525 + "/")));
                var $5527 = List$cons$(_head$5, _tail$6);
                var $5524 = $5527;
                break;
            case 'List.nil':
                var $5528 = List$nil;
                var $5524 = $5528;
                break;
        };
        return $5524;
    };
    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);

    function Char$eql$(_a$1, _b$2) {
        var $5529 = (_a$1 === _b$2);
        return $5529;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $5530 = Bool$true;
                    return $5530;
                } else {
                    var $5531 = self.charCodeAt(0);
                    var $5532 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $5534 = Bool$false;
                        var $5533 = $5534;
                    } else {
                        var $5535 = self.charCodeAt(0);
                        var $5536 = self.slice(1);
                        var self = Char$eql$($5531, $5535);
                        if (self) {
                            var $5538 = String$starts_with$($5536, $5532);
                            var $5537 = $5538;
                        } else {
                            var $5539 = Bool$false;
                            var $5537 = $5539;
                        };
                        var $5533 = $5537;
                    };
                    return $5533;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $5540 = _xs$2;
                    return $5540;
                } else {
                    var $5541 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $5543 = String$nil;
                        var $5542 = $5543;
                    } else {
                        var $5544 = self.charCodeAt(0);
                        var $5545 = self.slice(1);
                        var $5546 = String$drop$($5541, $5545);
                        var $5542 = $5546;
                    };
                    return $5542;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $5547 = _n$2;
                    return $5547;
                } else {
                    var $5548 = self.charCodeAt(0);
                    var $5549 = self.slice(1);
                    var $5550 = String$length$go$($5549, Nat$succ$(_n$2));
                    return $5550;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $5551 = String$length$go$(_xs$1, 0n);
        return $5551;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $5553 = List$cons$(_last$3, List$nil);
            var $5552 = $5553;
        } else {
            var $5554 = self.charCodeAt(0);
            var $5555 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $5557 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $5556 = $5557;
            } else {
                var _next$6 = String$cons$($5554, String$nil);
                var $5558 = String$split$go$($5555, _match$2, (_last$3 + _next$6));
                var $5556 = $5558;
            };
            var $5552 = $5556;
        };
        return $5552;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $5559 = String$split$go$(_xs$1, _match$2, "");
        return $5559;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Kind$Synth$files_of$(_name$1) {
        var $5560 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $5560;
    };
    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);

    function Kind$Synth$load$(_name$1, _defs$2) {
        var $5561 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);
        return $5561;
    };
    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);
    const Kind$Status$wait = ({
        _: 'Kind.Status.wait'
    });

    function Kind$Check$(_V$1) {
        var $5562 = null;
        return $5562;
    };
    const Kind$Check = x0 => Kind$Check$(x0);

    function Kind$Check$result$(_value$2, _errors$3) {
        var $5563 = ({
            _: 'Kind.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $5563;
    };
    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);

    function Kind$Error$undefined_reference$(_origin$1, _name$2) {
        var $5564 = ({
            _: 'Kind.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $5564;
    };
    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);

    function Kind$Error$waiting$(_name$1) {
        var $5565 = ({
            _: 'Kind.Error.waiting',
            'name': _name$1
        });
        return $5565;
    };
    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);

    function Kind$Error$indirect$(_name$1) {
        var $5566 = ({
            _: 'Kind.Error.indirect',
            'name': _name$1
        });
        return $5566;
    };
    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $5568 = self.value;
                var $5569 = Maybe$some$(_f$4($5568));
                var $5567 = $5569;
                break;
            case 'Maybe.none':
                var $5570 = Maybe$none;
                var $5567 = $5570;
                break;
        };
        return $5567;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Kind$MPath$o$(_path$1) {
        var $5571 = Maybe$mapped$(_path$1, Kind$Path$o);
        return $5571;
    };
    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);

    function Kind$MPath$i$(_path$1) {
        var $5572 = Maybe$mapped$(_path$1, Kind$Path$i);
        return $5572;
    };
    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);

    function Kind$Error$patch$(_path$1, _term$2) {
        var $5573 = ({
            _: 'Kind.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $5573;
    };
    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);

    function Kind$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.some':
                var $5575 = self.value;
                var $5576 = $5575(Bits$e);
                var $5574 = $5576;
                break;
            case 'Maybe.none':
                var $5577 = Bits$e;
                var $5574 = $5577;
                break;
        };
        return $5574;
    };
    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);

    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $5578 = ({
            _: 'Kind.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $5578;
    };
    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);

    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $5579 = ({
            _: 'Kind.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $5579;
    };
    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);

    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {
        var self = _vars$1;
        switch (self._) {
            case 'List.cons':
                var $5581 = self.head;
                var $5582 = self.tail;
                var self = $5581;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $5584 = self.name;
                        var $5585 = self.term;
                        var $5586 = self.type;
                        var self = $5586;
                        switch (self._) {
                            case 'Maybe.some':
                                var $5588 = self.value;
                                var $5589 = Kind$Check$result$(Maybe$some$(Maybe$some$($5588)), List$nil);
                                var self = $5589;
                                break;
                            case 'Maybe.none':
                                var self = Kind$Term$check$($5585, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $5591 = self.value;
                                        var $5592 = self.errors;
                                        var self = $5591;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $5594 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($5594)), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $5596 = self.value;
                                                        var $5597 = self.errors;
                                                        var $5598 = Kind$Check$result$($5596, List$concat$($5592, $5597));
                                                        var $5595 = $5598;
                                                        break;
                                                };
                                                var $5593 = $5595;
                                                break;
                                            case 'Maybe.none':
                                                var $5599 = Kind$Check$result$(Maybe$none, $5592);
                                                var $5593 = $5599;
                                                break;
                                        };
                                        var $5590 = $5593;
                                        break;
                                };
                                var self = $5590;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5600 = self.value;
                                var $5601 = self.errors;
                                var self = $5600;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $5603 = self.value;
                                        var self = Kind$Term$check$infer_with_types$($5582, _defs$2, _ctx$3, _path$4, _orig$5);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5605 = self.value;
                                                var $5606 = self.errors;
                                                var self = $5605;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $5608 = self.value;
                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($5584, $5585, $5603), $5608)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $5610 = self.value;
                                                                var $5611 = self.errors;
                                                                var $5612 = Kind$Check$result$($5610, List$concat$($5606, $5611));
                                                                var $5609 = $5612;
                                                                break;
                                                        };
                                                        var $5607 = $5609;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $5613 = Kind$Check$result$(Maybe$none, $5606);
                                                        var $5607 = $5613;
                                                        break;
                                                };
                                                var self = $5607;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5614 = self.value;
                                                var $5615 = self.errors;
                                                var $5616 = Kind$Check$result$($5614, List$concat$($5601, $5615));
                                                var $5604 = $5616;
                                                break;
                                        };
                                        var $5602 = $5604;
                                        break;
                                    case 'Maybe.none':
                                        var $5617 = Kind$Check$result$(Maybe$none, $5601);
                                        var $5602 = $5617;
                                        break;
                                };
                                var $5587 = $5602;
                                break;
                        };
                        var $5583 = $5587;
                        break;
                };
                var $5580 = $5583;
                break;
            case 'List.nil':
                var $5618 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);
                var $5580 = $5618;
                break;
        };
        return $5580;
    };
    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);

    function Kind$Term$normalize$(_term$1, _defs$2) {
        var self = Kind$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $5620 = self.name;
                var $5621 = self.indx;
                var $5622 = Kind$Term$var$($5620, $5621);
                var $5619 = $5622;
                break;
            case 'Kind.Term.ref':
                var $5623 = self.name;
                var $5624 = Kind$Term$ref$($5623);
                var $5619 = $5624;
                break;
            case 'Kind.Term.all':
                var $5625 = self.eras;
                var $5626 = self.self;
                var $5627 = self.name;
                var $5628 = self.xtyp;
                var $5629 = self.body;
                var $5630 = Kind$Term$all$($5625, $5626, $5627, Kind$Term$normalize$($5628, _defs$2), (_s$8 => _x$9 => {
                    var $5631 = Kind$Term$normalize$($5629(_s$8)(_x$9), _defs$2);
                    return $5631;
                }));
                var $5619 = $5630;
                break;
            case 'Kind.Term.lam':
                var $5632 = self.name;
                var $5633 = self.body;
                var $5634 = Kind$Term$lam$($5632, (_x$5 => {
                    var $5635 = Kind$Term$normalize$($5633(_x$5), _defs$2);
                    return $5635;
                }));
                var $5619 = $5634;
                break;
            case 'Kind.Term.app':
                var $5636 = self.func;
                var $5637 = self.argm;
                var $5638 = Kind$Term$app$(Kind$Term$normalize$($5636, _defs$2), Kind$Term$normalize$($5637, _defs$2));
                var $5619 = $5638;
                break;
            case 'Kind.Term.let':
                var $5639 = self.name;
                var $5640 = self.expr;
                var $5641 = self.body;
                var $5642 = Kind$Term$let$($5639, Kind$Term$normalize$($5640, _defs$2), (_x$6 => {
                    var $5643 = Kind$Term$normalize$($5641(_x$6), _defs$2);
                    return $5643;
                }));
                var $5619 = $5642;
                break;
            case 'Kind.Term.def':
                var $5644 = self.name;
                var $5645 = self.expr;
                var $5646 = self.body;
                var $5647 = Kind$Term$def$($5644, Kind$Term$normalize$($5645, _defs$2), (_x$6 => {
                    var $5648 = Kind$Term$normalize$($5646(_x$6), _defs$2);
                    return $5648;
                }));
                var $5619 = $5647;
                break;
            case 'Kind.Term.ann':
                var $5649 = self.done;
                var $5650 = self.term;
                var $5651 = self.type;
                var $5652 = Kind$Term$ann$($5649, Kind$Term$normalize$($5650, _defs$2), Kind$Term$normalize$($5651, _defs$2));
                var $5619 = $5652;
                break;
            case 'Kind.Term.gol':
                var $5653 = self.name;
                var $5654 = self.dref;
                var $5655 = self.verb;
                var $5656 = Kind$Term$gol$($5653, $5654, $5655);
                var $5619 = $5656;
                break;
            case 'Kind.Term.hol':
                var $5657 = self.path;
                var $5658 = Kind$Term$hol$($5657);
                var $5619 = $5658;
                break;
            case 'Kind.Term.nat':
                var $5659 = self.natx;
                var $5660 = Kind$Term$nat$($5659);
                var $5619 = $5660;
                break;
            case 'Kind.Term.chr':
                var $5661 = self.chrx;
                var $5662 = Kind$Term$chr$($5661);
                var $5619 = $5662;
                break;
            case 'Kind.Term.str':
                var $5663 = self.strx;
                var $5664 = Kind$Term$str$($5663);
                var $5619 = $5664;
                break;
            case 'Kind.Term.ori':
                var $5665 = self.expr;
                var $5666 = Kind$Term$normalize$($5665, _defs$2);
                var $5619 = $5666;
                break;
            case 'Kind.Term.typ':
                var $5667 = Kind$Term$typ;
                var $5619 = $5667;
                break;
            case 'Kind.Term.cse':
                var $5668 = _term$1;
                var $5619 = $5668;
                break;
        };
        return $5619;
    };
    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);

    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.cons':
                var $5670 = self.head;
                var $5671 = self.tail;
                var self = $5670;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $5673 = self.name;
                        var $5674 = self.type;
                        var $5675 = Kind$Term$all$(Bool$false, "", $5673, Maybe$default$($5674, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {
                            var $5676 = Kind$Term$desugar_cse$motive$($5671, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));
                            return $5676;
                        }));
                        var $5672 = $5675;
                        break;
                };
                var $5669 = $5672;
                break;
            case 'List.nil':
                var self = _moti$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $5678 = self.value;
                        var $5679 = $5678;
                        var $5677 = $5679;
                        break;
                    case 'Maybe.none':
                        var self = _rtyp$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $5681 = self.value;
                                var $5682 = Kind$Term$normalize$($5681, Kind$Map$new);
                                var $5680 = $5682;
                                break;
                            case 'Maybe.none':
                                var $5683 = Kind$Term$hol$(Bits$e);
                                var $5680 = $5683;
                                break;
                        };
                        var $5677 = $5680;
                        break;
                };
                var $5669 = $5677;
                break;
        };
        return $5669;
    };
    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $5685 = self.tail;
                var $5686 = $5685;
                var $5684 = $5686;
                break;
            case 'List.nil':
                var $5687 = List$nil;
                var $5684 = $5687;
                break;
        };
        return $5684;
    };
    const List$tail = x0 => List$tail$(x0);

    function Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Kind$Term$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Kind$Term$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.app':
                        var $5688 = self.func;
                        var $5689 = self.argm;
                        var $5690 = Kind$Term$SmartMotive$vals$cont$(_expr$1, $5688, List$cons$($5689, _args$3), _defs$4);
                        return $5690;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $5691 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $5691;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Kind$Term$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Kind$Term$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $5692 = self.body;
                        var $5693 = Kind$Term$SmartMotive$vals$(_expr$1, $5692(Kind$Term$typ)(Kind$Term$typ), _defs$3);
                        return $5693;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $5694 = Kind$Term$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $5694;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals = x0 => x1 => x2 => Kind$Term$SmartMotive$vals$(x0, x1, x2);

    function Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Kind$Term$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Kind$Term$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $5695 = self.self;
                        var $5696 = self.name;
                        var $5697 = self.body;
                        var $5698 = Kind$Term$SmartMotive$nams$cont$(_name$1, $5697(Kind$Term$ref$($5695))(Kind$Term$ref$($5696)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($5696, List$nil)))), _binds$3), _defs$4);
                        return $5698;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $5699 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $5699;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Kind$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Kind.Term.all':
                var $5701 = self.xtyp;
                var $5702 = Kind$Term$SmartMotive$nams$cont$(_name$1, $5701, List$nil, _defs$3);
                var $5700 = $5702;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $5703 = List$nil;
                var $5700 = $5703;
                break;
        };
        return $5700;
    };
    const Kind$Term$SmartMotive$nams = x0 => x1 => x2 => Kind$Term$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.cons':
                var $5705 = self.head;
                var $5706 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.cons':
                        var $5708 = self.head;
                        var $5709 = self.tail;
                        var $5710 = List$cons$(Pair$new$($5705, $5708), List$zip$($5706, $5709));
                        var $5707 = $5710;
                        break;
                    case 'List.nil':
                        var $5711 = List$nil;
                        var $5707 = $5711;
                        break;
                };
                var $5704 = $5707;
                break;
            case 'List.nil':
                var $5712 = List$nil;
                var $5704 = $5712;
                break;
        };
        return $5704;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Kind$Term$serialize$go$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $5714 = self.indx;
                var self = ($5714 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $5714 <= 0n ? 0n : _depth$2 - $5714)))));
                    var $5716 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $5715 = $5716;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($5714)));
                    var $5717 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $5715 = $5717;
                };
                var $5713 = $5715;
                break;
            case 'Kind.Term.ref':
                var $5718 = self.name;
                var _name$7 = a1 => (a1 + (kind_name_to_bits($5718)));
                var $5719 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $5713 = $5719;
                break;
            case 'Kind.Term.all':
                var $5720 = self.eras;
                var $5721 = self.self;
                var $5722 = self.name;
                var $5723 = self.xtyp;
                var $5724 = self.body;
                var self = $5720;
                if (self) {
                    var $5726 = Bits$i;
                    var _eras$11 = $5726;
                } else {
                    var $5727 = Bits$o;
                    var _eras$11 = $5727;
                };
                var _self$12 = a1 => (a1 + (kind_name_to_bits($5721)));
                var _xtyp$13 = Kind$Term$serialize$go($5723)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Kind$Term$serialize$go($5724(Kind$Term$var$($5721, _depth$2))(Kind$Term$var$($5722, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $5725 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $5713 = $5725;
                break;
            case 'Kind.Term.lam':
                var $5728 = self.name;
                var $5729 = self.body;
                var _body$8 = Kind$Term$serialize$go($5729(Kind$Term$var$($5728, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $5730 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $5713 = $5730;
                break;
            case 'Kind.Term.app':
                var $5731 = self.func;
                var $5732 = self.argm;
                var _func$8 = Kind$Term$serialize$go($5731)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Kind$Term$serialize$go($5732)(_depth$2)(_init$3)(_diff$4);
                var $5733 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $5713 = $5733;
                break;
            case 'Kind.Term.let':
                var $5734 = self.name;
                var $5735 = self.expr;
                var $5736 = self.body;
                var _expr$9 = Kind$Term$serialize$go($5735)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Kind$Term$serialize$go($5736(Kind$Term$var$($5734, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $5737 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $5713 = $5737;
                break;
            case 'Kind.Term.def':
                var $5738 = self.expr;
                var $5739 = self.body;
                var $5740 = Kind$Term$serialize$go$($5739($5738), _depth$2, _init$3, _diff$4, _x$5);
                var $5713 = $5740;
                break;
            case 'Kind.Term.ann':
                var $5741 = self.term;
                var $5742 = Kind$Term$serialize$go$($5741, _depth$2, _init$3, _diff$4, _x$5);
                var $5713 = $5742;
                break;
            case 'Kind.Term.gol':
                var $5743 = self.name;
                var _name$9 = a1 => (a1 + (kind_name_to_bits($5743)));
                var $5744 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $5713 = $5744;
                break;
            case 'Kind.Term.nat':
                var $5745 = self.natx;
                var $5746 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($5745), _depth$2, _init$3, _diff$4, _x$5);
                var $5713 = $5746;
                break;
            case 'Kind.Term.chr':
                var $5747 = self.chrx;
                var $5748 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($5747), _depth$2, _init$3, _diff$4, _x$5);
                var $5713 = $5748;
                break;
            case 'Kind.Term.str':
                var $5749 = self.strx;
                var $5750 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($5749), _depth$2, _init$3, _diff$4, _x$5);
                var $5713 = $5750;
                break;
            case 'Kind.Term.ori':
                var $5751 = self.expr;
                var $5752 = Kind$Term$serialize$go$($5751, _depth$2, _init$3, _diff$4, _x$5);
                var $5713 = $5752;
                break;
            case 'Kind.Term.typ':
                var $5753 = (((_x$5 + '1') + '1') + '0');
                var $5713 = $5753;
                break;
            case 'Kind.Term.hol':
                var $5754 = _x$5;
                var $5713 = $5754;
                break;
            case 'Kind.Term.cse':
                var $5755 = _diff$4(_x$5);
                var $5713 = $5755;
                break;
        };
        return $5713;
    };
    const Kind$Term$serialize$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$go$(x0, x1, x2, x3, x4);

    function Kind$Term$serialize$(_term$1, _depth$2, _side$3) {
        var self = _side$3;
        if (self) {
            var $5757 = Bits$o;
            var _diff$4 = $5757;
        } else {
            var $5758 = Bits$i;
            var _diff$4 = $5758;
        };
        var $5756 = Kind$Term$serialize$go$(_term$1, _depth$2, _depth$2, _diff$4, Bits$e);
        return $5756;
    };
    const Kind$Term$serialize = x0 => x1 => x2 => Kind$Term$serialize$(x0, x1, x2);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, Bool$false);
        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, Bool$true);
        var $5759 = (_bh$5 === _ah$4);
        return $5759;
    };
    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);

    function Kind$Term$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $5761 = _to$3;
            var $5760 = $5761;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Kind.Term.var':
                    var $5763 = self.name;
                    var $5764 = self.indx;
                    var $5765 = Kind$Term$var$($5763, $5764);
                    var $5762 = $5765;
                    break;
                case 'Kind.Term.ref':
                    var $5766 = self.name;
                    var $5767 = Kind$Term$ref$($5766);
                    var $5762 = $5767;
                    break;
                case 'Kind.Term.all':
                    var $5768 = self.eras;
                    var $5769 = self.self;
                    var $5770 = self.name;
                    var $5771 = self.xtyp;
                    var $5772 = self.body;
                    var _xtyp$10 = Kind$Term$SmartMotive$replace$($5771, _from$2, _to$3, _lv$4);
                    var _body$11 = $5772(Kind$Term$ref$($5769))(Kind$Term$ref$($5770));
                    var _body$12 = Kind$Term$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $5773 = Kind$Term$all$($5768, $5769, $5770, _xtyp$10, (_s$13 => _x$14 => {
                        var $5774 = _body$12;
                        return $5774;
                    }));
                    var $5762 = $5773;
                    break;
                case 'Kind.Term.lam':
                    var $5775 = self.name;
                    var $5776 = self.body;
                    var _body$7 = $5776(Kind$Term$ref$($5775));
                    var _body$8 = Kind$Term$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5777 = Kind$Term$lam$($5775, (_x$9 => {
                        var $5778 = _body$8;
                        return $5778;
                    }));
                    var $5762 = $5777;
                    break;
                case 'Kind.Term.app':
                    var $5779 = self.func;
                    var $5780 = self.argm;
                    var _func$7 = Kind$Term$SmartMotive$replace$($5779, _from$2, _to$3, _lv$4);
                    var _argm$8 = Kind$Term$SmartMotive$replace$($5780, _from$2, _to$3, _lv$4);
                    var $5781 = Kind$Term$app$(_func$7, _argm$8);
                    var $5762 = $5781;
                    break;
                case 'Kind.Term.let':
                    var $5782 = self.name;
                    var $5783 = self.expr;
                    var $5784 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($5783, _from$2, _to$3, _lv$4);
                    var _body$9 = $5784(Kind$Term$ref$($5782));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5785 = Kind$Term$let$($5782, _expr$8, (_x$11 => {
                        var $5786 = _body$10;
                        return $5786;
                    }));
                    var $5762 = $5785;
                    break;
                case 'Kind.Term.def':
                    var $5787 = self.name;
                    var $5788 = self.expr;
                    var $5789 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($5788, _from$2, _to$3, _lv$4);
                    var _body$9 = $5789(Kind$Term$ref$($5787));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5790 = Kind$Term$def$($5787, _expr$8, (_x$11 => {
                        var $5791 = _body$10;
                        return $5791;
                    }));
                    var $5762 = $5790;
                    break;
                case 'Kind.Term.ann':
                    var $5792 = self.done;
                    var $5793 = self.term;
                    var $5794 = self.type;
                    var _term$8 = Kind$Term$SmartMotive$replace$($5793, _from$2, _to$3, _lv$4);
                    var _type$9 = Kind$Term$SmartMotive$replace$($5794, _from$2, _to$3, _lv$4);
                    var $5795 = Kind$Term$ann$($5792, _term$8, _type$9);
                    var $5762 = $5795;
                    break;
                case 'Kind.Term.ori':
                    var $5796 = self.expr;
                    var $5797 = Kind$Term$SmartMotive$replace$($5796, _from$2, _to$3, _lv$4);
                    var $5762 = $5797;
                    break;
                case 'Kind.Term.typ':
                    var $5798 = Kind$Term$typ;
                    var $5762 = $5798;
                    break;
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                    var $5799 = _term$1;
                    var $5762 = $5799;
                    break;
            };
            var $5760 = $5762;
        };
        return $5760;
    };
    const Kind$Term$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$replace$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {
        var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var $5800 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $5802 = self.fst;
                    var $5803 = self.snd;
                    var $5804 = Kind$Term$SmartMotive$replace$(_moti$11, $5803, Kind$Term$ref$($5802), _size$5);
                    var $5801 = $5804;
                    break;
            };
            return $5801;
        }));
        return $5800;
    };
    const Kind$Term$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);
        var self = _moti$2;
        switch (self._) {
            case 'Maybe.none':
                var $5806 = Kind$Term$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);
                var $5805 = $5806;
                break;
            case 'Maybe.some':
                var $5807 = _done$9;
                var $5805 = $5807;
                break;
        };
        return $5805;
    };
    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $5809 = Bool$true;
            var $5808 = $5809;
        } else {
            var $5810 = self.charCodeAt(0);
            var $5811 = self.slice(1);
            var $5812 = Bool$false;
            var $5808 = $5812;
        };
        return $5808;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Kind$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Kind.Term.all':
                var $5814 = self.self;
                var $5815 = self.name;
                var $5816 = self.body;
                var $5817 = Kind$Term$lam$((() => {
                    var self = String$is_empty$($5815);
                    if (self) {
                        var $5818 = _name$1;
                        return $5818;
                    } else {
                        var $5819 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($5815, List$nil))));
                        return $5819;
                    };
                })(), (_x$11 => {
                    var $5820 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $5816(Kind$Term$var$($5814, 0n))(Kind$Term$var$($5815, 0n)), _body$4, _defs$5);
                    return $5820;
                }));
                var $5813 = $5817;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.ori':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5822 = self.head;
                        var $5823 = self.tail;
                        var self = $5822;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5825 = self.name;
                                var $5826 = Kind$Term$lam$($5825, (_x$13 => {
                                    var $5827 = Kind$Term$desugar_cse$argument$(_name$1, $5823, _type$3, _body$4, _defs$5);
                                    return $5827;
                                }));
                                var $5824 = $5826;
                                break;
                        };
                        var $5821 = $5824;
                        break;
                    case 'List.nil':
                        var $5828 = _body$4;
                        var $5821 = $5828;
                        break;
                };
                var $5813 = $5821;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5830 = self.head;
                        var $5831 = self.tail;
                        var self = $5830;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5833 = self.name;
                                var $5834 = Kind$Term$lam$($5833, (_x$12 => {
                                    var $5835 = Kind$Term$desugar_cse$argument$(_name$1, $5831, _type$3, _body$4, _defs$5);
                                    return $5835;
                                }));
                                var $5832 = $5834;
                                break;
                        };
                        var $5829 = $5832;
                        break;
                    case 'List.nil':
                        var $5836 = _body$4;
                        var $5829 = $5836;
                        break;
                };
                var $5813 = $5829;
                break;
            case 'Kind.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5838 = self.head;
                        var $5839 = self.tail;
                        var self = $5838;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5841 = self.name;
                                var $5842 = Kind$Term$lam$($5841, (_x$11 => {
                                    var $5843 = Kind$Term$desugar_cse$argument$(_name$1, $5839, _type$3, _body$4, _defs$5);
                                    return $5843;
                                }));
                                var $5840 = $5842;
                                break;
                        };
                        var $5837 = $5840;
                        break;
                    case 'List.nil':
                        var $5844 = _body$4;
                        var $5837 = $5844;
                        break;
                };
                var $5813 = $5837;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5846 = self.head;
                        var $5847 = self.tail;
                        var self = $5846;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5849 = self.name;
                                var $5850 = Kind$Term$lam$($5849, (_x$14 => {
                                    var $5851 = Kind$Term$desugar_cse$argument$(_name$1, $5847, _type$3, _body$4, _defs$5);
                                    return $5851;
                                }));
                                var $5848 = $5850;
                                break;
                        };
                        var $5845 = $5848;
                        break;
                    case 'List.nil':
                        var $5852 = _body$4;
                        var $5845 = $5852;
                        break;
                };
                var $5813 = $5845;
                break;
            case 'Kind.Term.cse':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $5854 = self.head;
                        var $5855 = self.tail;
                        var self = $5854;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $5857 = self.name;
                                var $5858 = Kind$Term$lam$($5857, (_x$17 => {
                                    var $5859 = Kind$Term$desugar_cse$argument$(_name$1, $5855, _type$3, _body$4, _defs$5);
                                    return $5859;
                                }));
                                var $5856 = $5858;
                                break;
                        };
                        var $5853 = $5856;
                        break;
                    case 'List.nil':
                        var $5860 = _body$4;
                        var $5853 = $5860;
                        break;
                };
                var $5813 = $5853;
                break;
        };
        return $5813;
    };
    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.some':
                var $5862 = self.value;
                var $5863 = Maybe$some$($5862);
                var $5861 = $5863;
                break;
            case 'Maybe.none':
                var $5864 = _b$3;
                var $5861 = $5864;
                break;
        };
        return $5861;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $5865 = self.self;
                        var $5866 = self.name;
                        var $5867 = self.xtyp;
                        var $5868 = self.body;
                        var _argm$13 = Maybe$or$(Kind$Map$get$($5866, _cses$4), Kind$Map$get$("_", _cses$4));
                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + ("_" + ($5866 + "_case")))));
                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $5867, _argm$14, _defs$6);
                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);
                        var _type$17 = $5868(Kind$Term$var$($5865, 0n))(Kind$Term$var$($5866, 0n));
                        var $5869 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                        return $5869;
                    case 'Kind.Term.var':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.ori':
                        var _expr$10 = (() => {
                            var $5872 = _expr$1;
                            var $5873 = _wyth$3;
                            let _expr$11 = $5872;
                            let _defn$10;
                            while ($5873._ === 'List.cons') {
                                _defn$10 = $5873.head;
                                var $5872 = Kind$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5874 = self.term;
                                            var $5875 = $5874;
                                            return $5875;
                                    };
                                })());
                                _expr$11 = $5872;
                                $5873 = $5873.tail;
                            }
                            return _expr$11;
                        })();
                        var $5870 = _expr$10;
                        return $5870;
                    case 'Kind.Term.ref':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                        var _expr$9 = (() => {
                            var $5878 = _expr$1;
                            var $5879 = _wyth$3;
                            let _expr$10 = $5878;
                            let _defn$9;
                            while ($5879._ === 'List.cons') {
                                _defn$9 = $5879.head;
                                var $5878 = Kind$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5880 = self.term;
                                            var $5881 = $5880;
                                            return $5881;
                                    };
                                })());
                                _expr$10 = $5878;
                                $5879 = $5879.tail;
                            }
                            return _expr$10;
                        })();
                        var $5876 = _expr$9;
                        return $5876;
                    case 'Kind.Term.typ':
                        var _expr$8 = (() => {
                            var $5884 = _expr$1;
                            var $5885 = _wyth$3;
                            let _expr$9 = $5884;
                            let _defn$8;
                            while ($5885._ === 'List.cons') {
                                _defn$8 = $5885.head;
                                var $5884 = Kind$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5886 = self.term;
                                            var $5887 = $5886;
                                            return $5887;
                                    };
                                })());
                                _expr$9 = $5884;
                                $5885 = $5885.tail;
                            }
                            return _expr$9;
                        })();
                        var $5882 = _expr$8;
                        return $5882;
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                        var _expr$11 = (() => {
                            var $5890 = _expr$1;
                            var $5891 = _wyth$3;
                            let _expr$12 = $5890;
                            let _defn$11;
                            while ($5891._ === 'List.cons') {
                                _defn$11 = $5891.head;
                                var $5890 = Kind$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5892 = self.term;
                                            var $5893 = $5892;
                                            return $5893;
                                    };
                                })());
                                _expr$12 = $5890;
                                $5891 = $5891.tail;
                            }
                            return _expr$12;
                        })();
                        var $5888 = _expr$11;
                        return $5888;
                    case 'Kind.Term.cse':
                        var _expr$14 = (() => {
                            var $5896 = _expr$1;
                            var $5897 = _wyth$3;
                            let _expr$15 = $5896;
                            let _defn$14;
                            while ($5897._ === 'List.cons') {
                                _defn$14 = $5897.head;
                                var $5896 = Kind$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $5898 = self.term;
                                            var $5899 = $5898;
                                            return $5899;
                                    };
                                })());
                                _expr$15 = $5896;
                                $5897 = $5897.tail;
                            }
                            return _expr$15;
                        })();
                        var $5894 = _expr$14;
                        return $5894;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {
        var self = Kind$Term$reduce$(_etyp$6, _defs$8);
        switch (self._) {
            case 'Kind.Term.all':
                var $5901 = self.self;
                var $5902 = self.name;
                var $5903 = self.xtyp;
                var $5904 = self.body;
                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));
                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $5903, _moti$15, _defs$8);
                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);
                var _type$18 = $5904(Kind$Term$var$($5901, 0n))(Kind$Term$var$($5902, 0n));
                var $5905 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));
                var $5900 = $5905;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $5906 = Maybe$none;
                var $5900 = $5906;
                break;
        };
        return $5900;
    };
    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $5907 = ({
            _: 'Kind.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $5907;
    };
    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);

    function BitsSet$has$(_bits$1, _set$2) {
        var self = BitsMap$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $5909 = Bool$false;
                var $5908 = $5909;
                break;
            case 'Maybe.some':
                var $5910 = Bool$true;
                var $5908 = $5910;
                break;
        };
        return $5908;
    };
    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);

    function BitsSet$mut$has$(_bits$1, _set$2) {
        var $5911 = BitsSet$has$(_bits$1, _set$2);
        return $5911;
    };
    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);

    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {
        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({
            ctr: 'TCO',
            arg: [_term$1, _arity$2]
        });
        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);
        var arg = [_term$1, _arity$2];
        while (true) {
            let [_term$1, _arity$2] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $5912 = self.name;
                        var $5913 = Maybe$some$(Pair$new$($5912, _arity$2));
                        return $5913;
                    case 'Kind.Term.ref':
                        var $5914 = self.name;
                        var $5915 = Maybe$some$(Pair$new$($5914, _arity$2));
                        return $5915;
                    case 'Kind.Term.app':
                        var $5916 = self.func;
                        var $5917 = Kind$Term$equal$extra_holes$funari$($5916, Nat$succ$(_arity$2));
                        return $5917;
                    case 'Kind.Term.ori':
                        var $5918 = self.expr;
                        var $5919 = Kind$Term$equal$extra_holes$funari$($5918, _arity$2);
                        return $5919;
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5920 = Maybe$none;
                        return $5920;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);
    const Bool$or = a0 => a1 => (a0 || a1);

    function Kind$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.all':
                var $5922 = self.xtyp;
                var $5923 = self.body;
                var $5924 = (Kind$Term$has_holes$($5922) || Kind$Term$has_holes$($5923(Kind$Term$typ)(Kind$Term$typ)));
                var $5921 = $5924;
                break;
            case 'Kind.Term.lam':
                var $5925 = self.body;
                var $5926 = Kind$Term$has_holes$($5925(Kind$Term$typ));
                var $5921 = $5926;
                break;
            case 'Kind.Term.app':
                var $5927 = self.func;
                var $5928 = self.argm;
                var $5929 = (Kind$Term$has_holes$($5927) || Kind$Term$has_holes$($5928));
                var $5921 = $5929;
                break;
            case 'Kind.Term.let':
                var $5930 = self.expr;
                var $5931 = self.body;
                var $5932 = (Kind$Term$has_holes$($5930) || Kind$Term$has_holes$($5931(Kind$Term$typ)));
                var $5921 = $5932;
                break;
            case 'Kind.Term.def':
                var $5933 = self.expr;
                var $5934 = self.body;
                var $5935 = (Kind$Term$has_holes$($5933) || Kind$Term$has_holes$($5934(Kind$Term$typ)));
                var $5921 = $5935;
                break;
            case 'Kind.Term.ann':
                var $5936 = self.term;
                var $5937 = self.type;
                var $5938 = (Kind$Term$has_holes$($5936) || Kind$Term$has_holes$($5937));
                var $5921 = $5938;
                break;
            case 'Kind.Term.ori':
                var $5939 = self.expr;
                var $5940 = Kind$Term$has_holes$($5939);
                var $5921 = $5940;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $5941 = Bool$false;
                var $5921 = $5941;
                break;
            case 'Kind.Term.hol':
                var $5942 = Bool$true;
                var $5921 = $5942;
                break;
        };
        return $5921;
    };
    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);

    function Kind$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var self = Kind$Term$has_holes$(_term$2);
                if (self) {
                    var $5945 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                    var $5944 = $5945;
                } else {
                    var $5946 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));
                    var $5944 = $5946;
                };
                var $5943 = $5944;
                break;
            case 'Kind.Term.hol':
                var $5947 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $5943 = $5947;
                break;
        };
        return $5943;
    };
    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);

    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Kind.Term.app':
                var $5949 = self.func;
                var $5950 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $5952 = self.func;
                        var $5953 = self.argm;
                        var self = Kind$Term$equal$extra_holes$filler$($5949, $5952);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5955 = self.value;
                                var $5956 = self.errors;
                                var self = $5955;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5958 = Kind$Check$result$(Maybe$none, $5956);
                                        var $5957 = $5958;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Term$equal$extra_holes$filler$($5950, $5953);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5960 = self.value;
                                                var $5961 = self.errors;
                                                var $5962 = Kind$Check$result$($5960, List$concat$($5956, $5961));
                                                var $5959 = $5962;
                                                break;
                                        };
                                        var $5957 = $5959;
                                        break;
                                };
                                var $5954 = $5957;
                                break;
                        };
                        var $5951 = $5954;
                        break;
                    case 'Kind.Term.hol':
                        var $5963 = self.path;
                        var self = Kind$Term$equal$hole$($5963, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5965 = self.value;
                                var $5966 = self.errors;
                                var self = $5965;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5968 = Kind$Check$result$(Maybe$none, $5966);
                                        var $5967 = $5968;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5970 = self.value;
                                                var $5971 = self.errors;
                                                var $5972 = Kind$Check$result$($5970, List$concat$($5966, $5971));
                                                var $5969 = $5972;
                                                break;
                                        };
                                        var $5967 = $5969;
                                        break;
                                };
                                var $5964 = $5967;
                                break;
                        };
                        var $5951 = $5964;
                        break;
                    case 'Kind.Term.ori':
                        var $5973 = self.expr;
                        var $5974 = Kind$Term$equal$extra_holes$filler$(_a$1, $5973);
                        var $5951 = $5974;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $5975 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5951 = $5975;
                        break;
                };
                var $5948 = $5951;
                break;
            case 'Kind.Term.hol':
                var $5976 = self.path;
                var self = Kind$Term$equal$hole$($5976, _b$2);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $5978 = self.value;
                        var $5979 = self.errors;
                        var self = $5978;
                        switch (self._) {
                            case 'Maybe.none':
                                var $5981 = Kind$Check$result$(Maybe$none, $5979);
                                var $5980 = $5981;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $5983 = self.value;
                                        var $5984 = self.errors;
                                        var $5985 = Kind$Check$result$($5983, List$concat$($5979, $5984));
                                        var $5982 = $5985;
                                        break;
                                };
                                var $5980 = $5982;
                                break;
                        };
                        var $5977 = $5980;
                        break;
                };
                var $5948 = $5977;
                break;
            case 'Kind.Term.ori':
                var $5986 = self.expr;
                var $5987 = Kind$Term$equal$extra_holes$filler$($5986, _b$2);
                var $5948 = $5987;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $5989 = self.path;
                        var self = Kind$Term$equal$hole$($5989, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5991 = self.value;
                                var $5992 = self.errors;
                                var self = $5991;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5994 = Kind$Check$result$(Maybe$none, $5992);
                                        var $5993 = $5994;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5996 = self.value;
                                                var $5997 = self.errors;
                                                var $5998 = Kind$Check$result$($5996, List$concat$($5992, $5997));
                                                var $5995 = $5998;
                                                break;
                                        };
                                        var $5993 = $5995;
                                        break;
                                };
                                var $5990 = $5993;
                                break;
                        };
                        var $5988 = $5990;
                        break;
                    case 'Kind.Term.ori':
                        var $5999 = self.expr;
                        var $6000 = Kind$Term$equal$extra_holes$filler$(_a$1, $5999);
                        var $5988 = $6000;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6001 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5988 = $6001;
                        break;
                };
                var $5948 = $5988;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6003 = self.path;
                        var self = Kind$Term$equal$hole$($6003, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6005 = self.value;
                                var $6006 = self.errors;
                                var self = $6005;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6008 = Kind$Check$result$(Maybe$none, $6006);
                                        var $6007 = $6008;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6010 = self.value;
                                                var $6011 = self.errors;
                                                var $6012 = Kind$Check$result$($6010, List$concat$($6006, $6011));
                                                var $6009 = $6012;
                                                break;
                                        };
                                        var $6007 = $6009;
                                        break;
                                };
                                var $6004 = $6007;
                                break;
                        };
                        var $6002 = $6004;
                        break;
                    case 'Kind.Term.ori':
                        var $6013 = self.expr;
                        var $6014 = Kind$Term$equal$extra_holes$filler$(_a$1, $6013);
                        var $6002 = $6014;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6015 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6002 = $6015;
                        break;
                };
                var $5948 = $6002;
                break;
            case 'Kind.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6017 = self.path;
                        var self = Kind$Term$equal$hole$($6017, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6019 = self.value;
                                var $6020 = self.errors;
                                var self = $6019;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6022 = Kind$Check$result$(Maybe$none, $6020);
                                        var $6021 = $6022;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6024 = self.value;
                                                var $6025 = self.errors;
                                                var $6026 = Kind$Check$result$($6024, List$concat$($6020, $6025));
                                                var $6023 = $6026;
                                                break;
                                        };
                                        var $6021 = $6023;
                                        break;
                                };
                                var $6018 = $6021;
                                break;
                        };
                        var $6016 = $6018;
                        break;
                    case 'Kind.Term.ori':
                        var $6027 = self.expr;
                        var $6028 = Kind$Term$equal$extra_holes$filler$(_a$1, $6027);
                        var $6016 = $6028;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6029 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6016 = $6029;
                        break;
                };
                var $5948 = $6016;
                break;
            case 'Kind.Term.all':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6031 = self.path;
                        var self = Kind$Term$equal$hole$($6031, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6033 = self.value;
                                var $6034 = self.errors;
                                var self = $6033;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6036 = Kind$Check$result$(Maybe$none, $6034);
                                        var $6035 = $6036;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6038 = self.value;
                                                var $6039 = self.errors;
                                                var $6040 = Kind$Check$result$($6038, List$concat$($6034, $6039));
                                                var $6037 = $6040;
                                                break;
                                        };
                                        var $6035 = $6037;
                                        break;
                                };
                                var $6032 = $6035;
                                break;
                        };
                        var $6030 = $6032;
                        break;
                    case 'Kind.Term.ori':
                        var $6041 = self.expr;
                        var $6042 = Kind$Term$equal$extra_holes$filler$(_a$1, $6041);
                        var $6030 = $6042;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6043 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6030 = $6043;
                        break;
                };
                var $5948 = $6030;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6045 = self.path;
                        var self = Kind$Term$equal$hole$($6045, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6047 = self.value;
                                var $6048 = self.errors;
                                var self = $6047;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6050 = Kind$Check$result$(Maybe$none, $6048);
                                        var $6049 = $6050;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6052 = self.value;
                                                var $6053 = self.errors;
                                                var $6054 = Kind$Check$result$($6052, List$concat$($6048, $6053));
                                                var $6051 = $6054;
                                                break;
                                        };
                                        var $6049 = $6051;
                                        break;
                                };
                                var $6046 = $6049;
                                break;
                        };
                        var $6044 = $6046;
                        break;
                    case 'Kind.Term.ori':
                        var $6055 = self.expr;
                        var $6056 = Kind$Term$equal$extra_holes$filler$(_a$1, $6055);
                        var $6044 = $6056;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6057 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6044 = $6057;
                        break;
                };
                var $5948 = $6044;
                break;
            case 'Kind.Term.cse':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6059 = self.path;
                        var self = Kind$Term$equal$hole$($6059, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6061 = self.value;
                                var $6062 = self.errors;
                                var self = $6061;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6064 = Kind$Check$result$(Maybe$none, $6062);
                                        var $6063 = $6064;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6066 = self.value;
                                                var $6067 = self.errors;
                                                var $6068 = Kind$Check$result$($6066, List$concat$($6062, $6067));
                                                var $6065 = $6068;
                                                break;
                                        };
                                        var $6063 = $6065;
                                        break;
                                };
                                var $6060 = $6063;
                                break;
                        };
                        var $6058 = $6060;
                        break;
                    case 'Kind.Term.ori':
                        var $6069 = self.expr;
                        var $6070 = Kind$Term$equal$extra_holes$filler$(_a$1, $6069);
                        var $6058 = $6070;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6071 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6058 = $6071;
                        break;
                };
                var $5948 = $6058;
                break;
        };
        return $5948;
    };
    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);

    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);
        switch (self._) {
            case 'Maybe.some':
                var $6073 = self.value;
                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);
                switch (self._) {
                    case 'Maybe.some':
                        var $6075 = self.value;
                        var self = $6073;
                        switch (self._) {
                            case 'Pair.new':
                                var $6077 = self.fst;
                                var $6078 = self.snd;
                                var self = $6075;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $6080 = self.fst;
                                        var $6081 = self.snd;
                                        var _same_fun$9 = ($6077 === $6080);
                                        var _same_ari$10 = ($6078 === $6081);
                                        var self = (_same_fun$9 && _same_ari$10);
                                        if (self) {
                                            var $6083 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);
                                            var $6082 = $6083;
                                        } else {
                                            var $6084 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                            var $6082 = $6084;
                                        };
                                        var $6079 = $6082;
                                        break;
                                };
                                var $6076 = $6079;
                                break;
                        };
                        var $6074 = $6076;
                        break;
                    case 'Maybe.none':
                        var $6085 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6074 = $6085;
                        break;
                };
                var $6072 = $6074;
                break;
            case 'Maybe.none':
                var $6086 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                var $6072 = $6086;
                break;
        };
        return $6072;
    };
    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);

    function BitsSet$set$(_bits$1, _set$2) {
        var $6087 = BitsMap$set$(_bits$1, Unit$new, _set$2);
        return $6087;
    };
    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);

    function BitsSet$mut$set$(_bits$1, _set$2) {
        var $6088 = BitsSet$set$(_bits$1, _set$2);
        return $6088;
    };
    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6090 = _b$2;
            var $6089 = $6090;
        } else {
            var $6091 = (!_b$2);
            var $6089 = $6091;
        };
        return $6089;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Kind$Term$equal$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, Bool$false);
        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, Bool$true);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6093 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6092 = $6093;
        } else {
            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, Bool$false);
            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, Bool$true);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6095 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6094 = $6095;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = BitsSet$mut$has$(_id$12, _seen$5);
                if (self) {
                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6098 = self.value;
                            var $6099 = self.errors;
                            var self = $6098;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6101 = Kind$Check$result$(Maybe$none, $6099);
                                    var $6100 = $6101;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6103 = self.value;
                                            var $6104 = self.errors;
                                            var $6105 = Kind$Check$result$($6103, List$concat$($6099, $6104));
                                            var $6102 = $6105;
                                            break;
                                    };
                                    var $6100 = $6102;
                                    break;
                            };
                            var $6097 = $6100;
                            break;
                    };
                    var $6096 = $6097;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Kind.Term.all':
                            var $6107 = self.eras;
                            var $6108 = self.self;
                            var $6109 = self.name;
                            var $6110 = self.xtyp;
                            var $6111 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.all':
                                    var $6113 = self.eras;
                                    var $6114 = self.self;
                                    var $6115 = self.name;
                                    var $6116 = self.xtyp;
                                    var $6117 = self.body;
                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $6111(Kind$Term$var$($6108, _lv$4))(Kind$Term$var$($6109, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $6117(Kind$Term$var$($6114, _lv$4))(Kind$Term$var$($6115, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($6108 === $6114);
                                    var _eq_eras$27 = Bool$eql$($6107, $6113);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Kind$Term$equal$($6110, $6116, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6120 = self.value;
                                                var $6121 = self.errors;
                                                var self = $6120;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6123 = self.value;
                                                        var self = Kind$Term$equal$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6125 = self.value;
                                                                var $6126 = self.errors;
                                                                var self = $6125;
                                                                switch (self._) {
                                                                    case 'Maybe.some':
                                                                        var $6128 = self.value;
                                                                        var self = Kind$Check$result$(Maybe$some$(($6123 && $6128)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Kind.Check.result':
                                                                                var $6130 = self.value;
                                                                                var $6131 = self.errors;
                                                                                var $6132 = Kind$Check$result$($6130, List$concat$($6126, $6131));
                                                                                var $6129 = $6132;
                                                                                break;
                                                                        };
                                                                        var $6127 = $6129;
                                                                        break;
                                                                    case 'Maybe.none':
                                                                        var $6133 = Kind$Check$result$(Maybe$none, $6126);
                                                                        var $6127 = $6133;
                                                                        break;
                                                                };
                                                                var self = $6127;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6134 = self.value;
                                                                var $6135 = self.errors;
                                                                var $6136 = Kind$Check$result$($6134, List$concat$($6121, $6135));
                                                                var $6124 = $6136;
                                                                break;
                                                        };
                                                        var $6122 = $6124;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6137 = Kind$Check$result$(Maybe$none, $6121);
                                                        var $6122 = $6137;
                                                        break;
                                                };
                                                var $6119 = $6122;
                                                break;
                                        };
                                        var $6118 = $6119;
                                    } else {
                                        var $6138 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6118 = $6138;
                                    };
                                    var $6112 = $6118;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6139 = self.path;
                                    var $6140 = Kind$Term$equal$hole$($6139, _a$1);
                                    var $6112 = $6140;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6141 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6112 = $6141;
                                    break;
                            };
                            var $6106 = $6112;
                            break;
                        case 'Kind.Term.lam':
                            var $6142 = self.name;
                            var $6143 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.lam':
                                    var $6145 = self.name;
                                    var $6146 = self.body;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $6143(Kind$Term$var$($6142, _lv$4));
                                    var _b1_body$19 = $6146(Kind$Term$var$($6145, _lv$4));
                                    var self = Kind$Term$equal$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6148 = self.value;
                                            var $6149 = self.errors;
                                            var self = $6148;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6151 = self.value;
                                                    var self = Kind$Check$result$(Maybe$some$($6151), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6153 = self.value;
                                                            var $6154 = self.errors;
                                                            var $6155 = Kind$Check$result$($6153, List$concat$($6149, $6154));
                                                            var $6152 = $6155;
                                                            break;
                                                    };
                                                    var $6150 = $6152;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6156 = Kind$Check$result$(Maybe$none, $6149);
                                                    var $6150 = $6156;
                                                    break;
                                            };
                                            var $6147 = $6150;
                                            break;
                                    };
                                    var $6144 = $6147;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6157 = self.path;
                                    var $6158 = Kind$Term$equal$hole$($6157, _a$1);
                                    var $6144 = $6158;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6159 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6144 = $6159;
                                    break;
                            };
                            var $6106 = $6144;
                            break;
                        case 'Kind.Term.app':
                            var $6160 = self.func;
                            var $6161 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.app':
                                    var $6163 = self.func;
                                    var $6164 = self.argm;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var self = Kind$Term$equal$($6160, $6163, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6166 = self.value;
                                            var $6167 = self.errors;
                                            var self = $6166;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6169 = self.value;
                                                    var self = Kind$Term$equal$($6161, $6164, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6171 = self.value;
                                                            var $6172 = self.errors;
                                                            var self = $6171;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $6174 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6169 && $6174)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $6176 = self.value;
                                                                            var $6177 = self.errors;
                                                                            var $6178 = Kind$Check$result$($6176, List$concat$($6172, $6177));
                                                                            var $6175 = $6178;
                                                                            break;
                                                                    };
                                                                    var $6173 = $6175;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $6179 = Kind$Check$result$(Maybe$none, $6172);
                                                                    var $6173 = $6179;
                                                                    break;
                                                            };
                                                            var self = $6173;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6180 = self.value;
                                                            var $6181 = self.errors;
                                                            var $6182 = Kind$Check$result$($6180, List$concat$($6167, $6181));
                                                            var $6170 = $6182;
                                                            break;
                                                    };
                                                    var $6168 = $6170;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6183 = Kind$Check$result$(Maybe$none, $6167);
                                                    var $6168 = $6183;
                                                    break;
                                            };
                                            var $6165 = $6168;
                                            break;
                                    };
                                    var $6162 = $6165;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6184 = self.path;
                                    var $6185 = Kind$Term$equal$hole$($6184, _a$1);
                                    var $6162 = $6185;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6186 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6162 = $6186;
                                    break;
                            };
                            var $6106 = $6162;
                            break;
                        case 'Kind.Term.let':
                            var $6187 = self.name;
                            var $6188 = self.expr;
                            var $6189 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.let':
                                    var $6191 = self.name;
                                    var $6192 = self.expr;
                                    var $6193 = self.body;
                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $6189(Kind$Term$var$($6187, _lv$4));
                                    var _b1_body$21 = $6193(Kind$Term$var$($6191, _lv$4));
                                    var self = Kind$Term$equal$($6188, $6192, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6195 = self.value;
                                            var $6196 = self.errors;
                                            var self = $6195;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6198 = self.value;
                                                    var self = Kind$Term$equal$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6200 = self.value;
                                                            var $6201 = self.errors;
                                                            var self = $6200;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $6203 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6198 && $6203)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $6205 = self.value;
                                                                            var $6206 = self.errors;
                                                                            var $6207 = Kind$Check$result$($6205, List$concat$($6201, $6206));
                                                                            var $6204 = $6207;
                                                                            break;
                                                                    };
                                                                    var $6202 = $6204;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $6208 = Kind$Check$result$(Maybe$none, $6201);
                                                                    var $6202 = $6208;
                                                                    break;
                                                            };
                                                            var self = $6202;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6209 = self.value;
                                                            var $6210 = self.errors;
                                                            var $6211 = Kind$Check$result$($6209, List$concat$($6196, $6210));
                                                            var $6199 = $6211;
                                                            break;
                                                    };
                                                    var $6197 = $6199;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6212 = Kind$Check$result$(Maybe$none, $6196);
                                                    var $6197 = $6212;
                                                    break;
                                            };
                                            var $6194 = $6197;
                                            break;
                                    };
                                    var $6190 = $6194;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6213 = self.path;
                                    var $6214 = Kind$Term$equal$hole$($6213, _a$1);
                                    var $6190 = $6214;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6215 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6190 = $6215;
                                    break;
                            };
                            var $6106 = $6190;
                            break;
                        case 'Kind.Term.hol':
                            var $6216 = self.path;
                            var $6217 = Kind$Term$equal$hole$($6216, _b$2);
                            var $6106 = $6217;
                            break;
                        case 'Kind.Term.var':
                        case 'Kind.Term.ori':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6219 = self.path;
                                    var $6220 = Kind$Term$equal$hole$($6219, _a$1);
                                    var $6218 = $6220;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6221 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6218 = $6221;
                                    break;
                            };
                            var $6106 = $6218;
                            break;
                        case 'Kind.Term.ref':
                        case 'Kind.Term.nat':
                        case 'Kind.Term.chr':
                        case 'Kind.Term.str':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6223 = self.path;
                                    var $6224 = Kind$Term$equal$hole$($6223, _a$1);
                                    var $6222 = $6224;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6225 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6222 = $6225;
                                    break;
                            };
                            var $6106 = $6222;
                            break;
                        case 'Kind.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6227 = self.path;
                                    var $6228 = Kind$Term$equal$hole$($6227, _a$1);
                                    var $6226 = $6228;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6229 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6226 = $6229;
                                    break;
                            };
                            var $6106 = $6226;
                            break;
                        case 'Kind.Term.def':
                        case 'Kind.Term.ann':
                        case 'Kind.Term.gol':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6231 = self.path;
                                    var $6232 = Kind$Term$equal$hole$($6231, _a$1);
                                    var $6230 = $6232;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6233 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6230 = $6233;
                                    break;
                            };
                            var $6106 = $6230;
                            break;
                        case 'Kind.Term.cse':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6235 = self.path;
                                    var $6236 = Kind$Term$equal$hole$($6235, _a$1);
                                    var $6234 = $6236;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6237 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6234 = $6237;
                                    break;
                            };
                            var $6106 = $6234;
                            break;
                    };
                    var $6096 = $6106;
                };
                var $6094 = $6096;
            };
            var $6092 = $6094;
        };
        return $6092;
    };
    const Kind$Term$equal = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$(x0, x1, x2, x3, x4);
    const BitsSet$new = BitsMap$new;

    function BitsSet$mut$new$(_a$1) {
        var $6238 = BitsSet$new;
        return $6238;
    };
    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);

    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6240 = self.name;
                var $6241 = self.indx;
                var self = List$at_last$($6241, _ctx$4);
                switch (self._) {
                    case 'Maybe.some':
                        var $6243 = self.value;
                        var $6244 = Kind$Check$result$(Maybe$some$((() => {
                            var self = $6243;
                            switch (self._) {
                                case 'Pair.new':
                                    var $6245 = self.snd;
                                    var $6246 = $6245;
                                    return $6246;
                            };
                        })()), List$nil);
                        var $6242 = $6244;
                        break;
                    case 'Maybe.none':
                        var $6247 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $6240), List$nil));
                        var $6242 = $6247;
                        break;
                };
                var self = $6242;
                break;
            case 'Kind.Term.ref':
                var $6248 = self.name;
                var self = Kind$Map$get$($6248, _defs$3);
                switch (self._) {
                    case 'Maybe.some':
                        var $6250 = self.value;
                        var self = $6250;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $6252 = self.name;
                                var $6253 = self.term;
                                var $6254 = self.type;
                                var $6255 = self.stat;
                                var _ref_name$18 = $6252;
                                var _ref_type$19 = $6254;
                                var _ref_term$20 = $6253;
                                var _ref_stat$21 = $6255;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                        var $6257 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));
                                        var $6256 = $6257;
                                        break;
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $6258 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $6256 = $6258;
                                        break;
                                    case 'Kind.Status.fail':
                                        var $6259 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));
                                        var $6256 = $6259;
                                        break;
                                };
                                var $6251 = $6256;
                                break;
                        };
                        var $6249 = $6251;
                        break;
                    case 'Maybe.none':
                        var $6260 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $6248), List$nil));
                        var $6249 = $6260;
                        break;
                };
                var self = $6249;
                break;
            case 'Kind.Term.all':
                var $6261 = self.self;
                var $6262 = self.name;
                var $6263 = self.xtyp;
                var $6264 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Kind$Term$var$($6261, _ctx_size$12);
                var _body_var$14 = Kind$Term$var$($6262, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($6262, $6263), List$cons$(Pair$new$($6261, _term$1), _ctx$4));
                var self = Kind$Term$check$($6263, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6266 = self.value;
                        var $6267 = self.errors;
                        var self = $6266;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6269 = Kind$Check$result$(Maybe$none, $6267);
                                var $6268 = $6269;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Term$check$($6264(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6271 = self.value;
                                        var $6272 = self.errors;
                                        var self = $6271;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6274 = Kind$Check$result$(Maybe$none, $6272);
                                                var $6273 = $6274;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6276 = self.value;
                                                        var $6277 = self.errors;
                                                        var $6278 = Kind$Check$result$($6276, List$concat$($6272, $6277));
                                                        var $6275 = $6278;
                                                        break;
                                                };
                                                var $6273 = $6275;
                                                break;
                                        };
                                        var self = $6273;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6279 = self.value;
                                        var $6280 = self.errors;
                                        var $6281 = Kind$Check$result$($6279, List$concat$($6267, $6280));
                                        var $6270 = $6281;
                                        break;
                                };
                                var $6268 = $6270;
                                break;
                        };
                        var $6265 = $6268;
                        break;
                };
                var self = $6265;
                break;
            case 'Kind.Term.lam':
                var $6282 = self.name;
                var $6283 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6285 = self.value;
                        var _typv$10 = Kind$Term$reduce$($6285, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Kind.Term.all':
                                var $6287 = self.xtyp;
                                var $6288 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Kind$Term$var$($6282, _ctx_size$16);
                                var _body_typ$19 = $6288(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($6282, $6287), _ctx$4);
                                var self = Kind$Term$check$($6283(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6290 = self.value;
                                        var $6291 = self.errors;
                                        var self = $6290;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6293 = Kind$Check$result$(Maybe$none, $6291);
                                                var $6292 = $6293;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$($6285), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6295 = self.value;
                                                        var $6296 = self.errors;
                                                        var $6297 = Kind$Check$result$($6295, List$concat$($6291, $6296));
                                                        var $6294 = $6297;
                                                        break;
                                                };
                                                var $6292 = $6294;
                                                break;
                                        };
                                        var $6289 = $6292;
                                        break;
                                };
                                var $6286 = $6289;
                                break;
                            case 'Kind.Term.var':
                            case 'Kind.Term.lam':
                            case 'Kind.Term.app':
                            case 'Kind.Term.ori':
                                var _expected$13 = Either$left$("function");
                                var _detected$14 = Either$right$($6285);
                                var $6298 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $6286 = $6298;
                                break;
                            case 'Kind.Term.ref':
                            case 'Kind.Term.hol':
                            case 'Kind.Term.nat':
                            case 'Kind.Term.chr':
                            case 'Kind.Term.str':
                                var _expected$12 = Either$left$("function");
                                var _detected$13 = Either$right$($6285);
                                var $6299 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $6286 = $6299;
                                break;
                            case 'Kind.Term.typ':
                                var _expected$11 = Either$left$("function");
                                var _detected$12 = Either$right$($6285);
                                var $6300 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $6286 = $6300;
                                break;
                            case 'Kind.Term.let':
                            case 'Kind.Term.def':
                            case 'Kind.Term.ann':
                            case 'Kind.Term.gol':
                                var _expected$14 = Either$left$("function");
                                var _detected$15 = Either$right$($6285);
                                var $6301 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $6286 = $6301;
                                break;
                            case 'Kind.Term.cse':
                                var _expected$17 = Either$left$("function");
                                var _detected$18 = Either$right$($6285);
                                var $6302 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $6286 = $6302;
                                break;
                        };
                        var $6284 = $6286;
                        break;
                    case 'Maybe.none':
                        var _lam_type$9 = Kind$Term$hol$(Bits$e);
                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $6303 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $6284 = $6303;
                        break;
                };
                var self = $6284;
                break;
            case 'Kind.Term.app':
                var $6304 = self.func;
                var $6305 = self.argm;
                var self = Kind$Term$check$($6304, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6307 = self.value;
                        var $6308 = self.errors;
                        var self = $6307;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6310 = self.value;
                                var _func_typ$12 = Kind$Term$reduce$($6310, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Kind.Term.all':
                                        var $6312 = self.xtyp;
                                        var $6313 = self.body;
                                        var self = Kind$Term$check$($6305, Maybe$some$($6312), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6315 = self.value;
                                                var $6316 = self.errors;
                                                var self = $6315;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $6318 = Kind$Check$result$(Maybe$none, $6316);
                                                        var $6317 = $6318;
                                                        break;
                                                    case 'Maybe.some':
                                                        var self = Kind$Check$result$(Maybe$some$($6313($6304)($6305)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6320 = self.value;
                                                                var $6321 = self.errors;
                                                                var $6322 = Kind$Check$result$($6320, List$concat$($6316, $6321));
                                                                var $6319 = $6322;
                                                                break;
                                                        };
                                                        var $6317 = $6319;
                                                        break;
                                                };
                                                var $6314 = $6317;
                                                break;
                                        };
                                        var self = $6314;
                                        break;
                                    case 'Kind.Term.var':
                                    case 'Kind.Term.lam':
                                    case 'Kind.Term.app':
                                    case 'Kind.Term.ori':
                                        var _expected$15 = Either$left$("function");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var self = $6304;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6324 = self.orig;
                                                var $6325 = Maybe$some$($6324);
                                                var _orig$17 = $6325;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6326 = _orig$6;
                                                var _orig$17 = $6326;
                                                break;
                                        };
                                        var $6323 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$17, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $6323;
                                        break;
                                    case 'Kind.Term.ref':
                                    case 'Kind.Term.hol':
                                    case 'Kind.Term.nat':
                                    case 'Kind.Term.chr':
                                    case 'Kind.Term.str':
                                        var _expected$14 = Either$left$("function");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var self = $6304;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6328 = self.orig;
                                                var $6329 = Maybe$some$($6328);
                                                var _orig$16 = $6329;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6330 = _orig$6;
                                                var _orig$16 = $6330;
                                                break;
                                        };
                                        var $6327 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$16, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $6327;
                                        break;
                                    case 'Kind.Term.typ':
                                        var _expected$13 = Either$left$("function");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var self = $6304;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6332 = self.orig;
                                                var $6333 = Maybe$some$($6332);
                                                var _orig$15 = $6333;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6334 = _orig$6;
                                                var _orig$15 = $6334;
                                                break;
                                        };
                                        var $6331 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$15, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $6331;
                                        break;
                                    case 'Kind.Term.let':
                                    case 'Kind.Term.def':
                                    case 'Kind.Term.ann':
                                    case 'Kind.Term.gol':
                                        var _expected$16 = Either$left$("function");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var self = $6304;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6336 = self.orig;
                                                var $6337 = Maybe$some$($6336);
                                                var _orig$18 = $6337;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6338 = _orig$6;
                                                var _orig$18 = $6338;
                                                break;
                                        };
                                        var $6335 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$18, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $6335;
                                        break;
                                    case 'Kind.Term.cse':
                                        var _expected$19 = Either$left$("function");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var self = $6304;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6340 = self.orig;
                                                var $6341 = Maybe$some$($6340);
                                                var _orig$21 = $6341;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6342 = _orig$6;
                                                var _orig$21 = $6342;
                                                break;
                                        };
                                        var $6339 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$21, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $6339;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6343 = self.value;
                                        var $6344 = self.errors;
                                        var $6345 = Kind$Check$result$($6343, List$concat$($6308, $6344));
                                        var $6311 = $6345;
                                        break;
                                };
                                var $6309 = $6311;
                                break;
                            case 'Maybe.none':
                                var $6346 = Kind$Check$result$(Maybe$none, $6308);
                                var $6309 = $6346;
                                break;
                        };
                        var $6306 = $6309;
                        break;
                };
                var self = $6306;
                break;
            case 'Kind.Term.let':
                var $6347 = self.name;
                var $6348 = self.expr;
                var $6349 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($6348, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6351 = self.value;
                        var $6352 = self.errors;
                        var self = $6351;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6354 = self.value;
                                var _body_val$14 = $6349(Kind$Term$var$($6347, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($6347, $6354), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6356 = self.value;
                                        var $6357 = self.errors;
                                        var self = $6356;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6359 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($6359), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6361 = self.value;
                                                        var $6362 = self.errors;
                                                        var $6363 = Kind$Check$result$($6361, List$concat$($6357, $6362));
                                                        var $6360 = $6363;
                                                        break;
                                                };
                                                var $6358 = $6360;
                                                break;
                                            case 'Maybe.none':
                                                var $6364 = Kind$Check$result$(Maybe$none, $6357);
                                                var $6358 = $6364;
                                                break;
                                        };
                                        var self = $6358;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6365 = self.value;
                                        var $6366 = self.errors;
                                        var $6367 = Kind$Check$result$($6365, List$concat$($6352, $6366));
                                        var $6355 = $6367;
                                        break;
                                };
                                var $6353 = $6355;
                                break;
                            case 'Maybe.none':
                                var $6368 = Kind$Check$result$(Maybe$none, $6352);
                                var $6353 = $6368;
                                break;
                        };
                        var $6350 = $6353;
                        break;
                };
                var self = $6350;
                break;
            case 'Kind.Term.def':
                var $6369 = self.name;
                var $6370 = self.expr;
                var $6371 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($6370, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6373 = self.value;
                        var $6374 = self.errors;
                        var self = $6373;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6376 = self.value;
                                var _body_val$14 = $6371(Kind$Term$ann$(Bool$true, $6370, $6376));
                                var _body_ctx$15 = List$cons$(Pair$new$($6369, $6376), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6378 = self.value;
                                        var $6379 = self.errors;
                                        var self = $6378;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6381 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($6381), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6383 = self.value;
                                                        var $6384 = self.errors;
                                                        var $6385 = Kind$Check$result$($6383, List$concat$($6379, $6384));
                                                        var $6382 = $6385;
                                                        break;
                                                };
                                                var $6380 = $6382;
                                                break;
                                            case 'Maybe.none':
                                                var $6386 = Kind$Check$result$(Maybe$none, $6379);
                                                var $6380 = $6386;
                                                break;
                                        };
                                        var self = $6380;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6387 = self.value;
                                        var $6388 = self.errors;
                                        var $6389 = Kind$Check$result$($6387, List$concat$($6374, $6388));
                                        var $6377 = $6389;
                                        break;
                                };
                                var $6375 = $6377;
                                break;
                            case 'Maybe.none':
                                var $6390 = Kind$Check$result$(Maybe$none, $6374);
                                var $6375 = $6390;
                                break;
                        };
                        var $6372 = $6375;
                        break;
                };
                var self = $6372;
                break;
            case 'Kind.Term.ann':
                var $6391 = self.done;
                var $6392 = self.term;
                var $6393 = self.type;
                var self = $6391;
                if (self) {
                    var $6395 = Kind$Check$result$(Maybe$some$($6393), List$nil);
                    var $6394 = $6395;
                } else {
                    var self = Kind$Term$check$($6392, Maybe$some$($6393), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6397 = self.value;
                            var $6398 = self.errors;
                            var self = $6397;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6400 = Kind$Check$result$(Maybe$none, $6398);
                                    var $6399 = $6400;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Term$check$($6393, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6402 = self.value;
                                            var $6403 = self.errors;
                                            var self = $6402;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $6405 = Kind$Check$result$(Maybe$none, $6403);
                                                    var $6404 = $6405;
                                                    break;
                                                case 'Maybe.some':
                                                    var self = Kind$Check$result$(Maybe$some$($6393), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6407 = self.value;
                                                            var $6408 = self.errors;
                                                            var $6409 = Kind$Check$result$($6407, List$concat$($6403, $6408));
                                                            var $6406 = $6409;
                                                            break;
                                                    };
                                                    var $6404 = $6406;
                                                    break;
                                            };
                                            var self = $6404;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6410 = self.value;
                                            var $6411 = self.errors;
                                            var $6412 = Kind$Check$result$($6410, List$concat$($6398, $6411));
                                            var $6401 = $6412;
                                            break;
                                    };
                                    var $6399 = $6401;
                                    break;
                            };
                            var $6396 = $6399;
                            break;
                    };
                    var $6394 = $6396;
                };
                var self = $6394;
                break;
            case 'Kind.Term.gol':
                var $6413 = self.name;
                var $6414 = self.dref;
                var $6415 = self.verb;
                var $6416 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($6413, $6414, $6415, _type$2, _ctx$4), List$nil));
                var self = $6416;
                break;
            case 'Kind.Term.cse':
                var $6417 = self.expr;
                var $6418 = self.name;
                var $6419 = self.with;
                var $6420 = self.cses;
                var $6421 = self.moti;
                var _expr$13 = $6417;
                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6423 = self.value;
                        var $6424 = self.errors;
                        var self = $6423;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6426 = self.value;
                                var self = Kind$Term$check$infer_with_types$($6419, _defs$3, _ctx$4, _path$5, _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6428 = self.value;
                                        var $6429 = self.errors;
                                        var self = $6428;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6431 = self.value;
                                                var _dsug$20 = Kind$Term$desugar_cse$($6417, $6418, $6431, $6420, $6421, $6426, _type$2, _defs$3, _ctx$4);
                                                var self = _dsug$20;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6433 = self.value;
                                                        var $6434 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $6433), List$nil));
                                                        var self = $6434;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6435 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                                        var self = $6435;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6436 = self.value;
                                                        var $6437 = self.errors;
                                                        var $6438 = Kind$Check$result$($6436, List$concat$($6429, $6437));
                                                        var $6432 = $6438;
                                                        break;
                                                };
                                                var $6430 = $6432;
                                                break;
                                            case 'Maybe.none':
                                                var $6439 = Kind$Check$result$(Maybe$none, $6429);
                                                var $6430 = $6439;
                                                break;
                                        };
                                        var self = $6430;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6440 = self.value;
                                        var $6441 = self.errors;
                                        var $6442 = Kind$Check$result$($6440, List$concat$($6424, $6441));
                                        var $6427 = $6442;
                                        break;
                                };
                                var $6425 = $6427;
                                break;
                            case 'Maybe.none':
                                var $6443 = Kind$Check$result$(Maybe$none, $6424);
                                var $6425 = $6443;
                                break;
                        };
                        var $6422 = $6425;
                        break;
                };
                var self = $6422;
                break;
            case 'Kind.Term.ori':
                var $6444 = self.orig;
                var $6445 = self.expr;
                var $6446 = Kind$Term$check$($6445, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($6444));
                var self = $6446;
                break;
            case 'Kind.Term.typ':
                var $6447 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                var self = $6447;
                break;
            case 'Kind.Term.hol':
                var $6448 = Kind$Check$result$(_type$2, List$nil);
                var self = $6448;
                break;
            case 'Kind.Term.nat':
                var $6449 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")), List$nil);
                var self = $6449;
                break;
            case 'Kind.Term.chr':
                var $6450 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")), List$nil);
                var self = $6450;
                break;
            case 'Kind.Term.str':
                var $6451 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")), List$nil);
                var self = $6451;
                break;
        };
        switch (self._) {
            case 'Kind.Check.result':
                var $6452 = self.value;
                var $6453 = self.errors;
                var self = $6452;
                switch (self._) {
                    case 'Maybe.some':
                        var $6455 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6457 = self.value;
                                var self = Kind$Term$equal$($6457, $6455, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6459 = self.value;
                                        var $6460 = self.errors;
                                        var self = $6459;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6462 = self.value;
                                                var self = $6462;
                                                if (self) {
                                                    var $6464 = Kind$Check$result$(Maybe$some$($6457), List$nil);
                                                    var self = $6464;
                                                } else {
                                                    var $6465 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($6457), Either$right$($6455), _ctx$4), List$nil));
                                                    var self = $6465;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6466 = self.value;
                                                        var $6467 = self.errors;
                                                        var $6468 = Kind$Check$result$($6466, List$concat$($6460, $6467));
                                                        var $6463 = $6468;
                                                        break;
                                                };
                                                var $6461 = $6463;
                                                break;
                                            case 'Maybe.none':
                                                var $6469 = Kind$Check$result$(Maybe$none, $6460);
                                                var $6461 = $6469;
                                                break;
                                        };
                                        var $6458 = $6461;
                                        break;
                                };
                                var self = $6458;
                                break;
                            case 'Maybe.none':
                                var $6470 = Kind$Check$result$(Maybe$some$($6455), List$nil);
                                var self = $6470;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6471 = self.value;
                                var $6472 = self.errors;
                                var $6473 = Kind$Check$result$($6471, List$concat$($6453, $6472));
                                var $6456 = $6473;
                                break;
                        };
                        var $6454 = $6456;
                        break;
                    case 'Maybe.none':
                        var $6474 = Kind$Check$result$(Maybe$none, $6453);
                        var $6454 = $6474;
                        break;
                };
                var $6239 = $6454;
                break;
        };
        return $6239;
    };
    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);

    function Kind$Path$nil$(_x$1) {
        var $6475 = _x$1;
        return $6475;
    };
    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);
    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $6477 = Bool$true;
                var $6476 = $6477;
                break;
            case 'List.cons':
                var $6478 = Bool$false;
                var $6476 = $6478;
                break;
        };
        return $6476;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.all':
                var $6480 = self.eras;
                var $6481 = self.self;
                var $6482 = self.name;
                var $6483 = self.xtyp;
                var $6484 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6486 = self.slice(0, -1);
                        var $6487 = Kind$Term$all$($6480, $6481, $6482, Kind$Term$patch_at$($6486, $6483, _fn$3), $6484);
                        var $6485 = $6487;
                        break;
                    case 'i':
                        var $6488 = self.slice(0, -1);
                        var $6489 = Kind$Term$all$($6480, $6481, $6482, $6483, (_s$10 => _x$11 => {
                            var $6490 = Kind$Term$patch_at$($6488, $6484(_s$10)(_x$11), _fn$3);
                            return $6490;
                        }));
                        var $6485 = $6489;
                        break;
                    case 'e':
                        var $6491 = _fn$3(_term$2);
                        var $6485 = $6491;
                        break;
                };
                var $6479 = $6485;
                break;
            case 'Kind.Term.lam':
                var $6492 = self.name;
                var $6493 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6495 = _fn$3(_term$2);
                        var $6494 = $6495;
                        break;
                    case 'o':
                    case 'i':
                        var $6496 = Kind$Term$lam$($6492, (_x$7 => {
                            var $6497 = Kind$Term$patch_at$(Bits$tail$(_path$1), $6493(_x$7), _fn$3);
                            return $6497;
                        }));
                        var $6494 = $6496;
                        break;
                };
                var $6479 = $6494;
                break;
            case 'Kind.Term.app':
                var $6498 = self.func;
                var $6499 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6501 = self.slice(0, -1);
                        var $6502 = Kind$Term$app$(Kind$Term$patch_at$($6501, $6498, _fn$3), $6499);
                        var $6500 = $6502;
                        break;
                    case 'i':
                        var $6503 = self.slice(0, -1);
                        var $6504 = Kind$Term$app$($6498, Kind$Term$patch_at$($6503, $6499, _fn$3));
                        var $6500 = $6504;
                        break;
                    case 'e':
                        var $6505 = _fn$3(_term$2);
                        var $6500 = $6505;
                        break;
                };
                var $6479 = $6500;
                break;
            case 'Kind.Term.let':
                var $6506 = self.name;
                var $6507 = self.expr;
                var $6508 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6510 = self.slice(0, -1);
                        var $6511 = Kind$Term$let$($6506, Kind$Term$patch_at$($6510, $6507, _fn$3), $6508);
                        var $6509 = $6511;
                        break;
                    case 'i':
                        var $6512 = self.slice(0, -1);
                        var $6513 = Kind$Term$let$($6506, $6507, (_x$8 => {
                            var $6514 = Kind$Term$patch_at$($6512, $6508(_x$8), _fn$3);
                            return $6514;
                        }));
                        var $6509 = $6513;
                        break;
                    case 'e':
                        var $6515 = _fn$3(_term$2);
                        var $6509 = $6515;
                        break;
                };
                var $6479 = $6509;
                break;
            case 'Kind.Term.def':
                var $6516 = self.name;
                var $6517 = self.expr;
                var $6518 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6520 = self.slice(0, -1);
                        var $6521 = Kind$Term$def$($6516, Kind$Term$patch_at$($6520, $6517, _fn$3), $6518);
                        var $6519 = $6521;
                        break;
                    case 'i':
                        var $6522 = self.slice(0, -1);
                        var $6523 = Kind$Term$def$($6516, $6517, (_x$8 => {
                            var $6524 = Kind$Term$patch_at$($6522, $6518(_x$8), _fn$3);
                            return $6524;
                        }));
                        var $6519 = $6523;
                        break;
                    case 'e':
                        var $6525 = _fn$3(_term$2);
                        var $6519 = $6525;
                        break;
                };
                var $6479 = $6519;
                break;
            case 'Kind.Term.ann':
                var $6526 = self.done;
                var $6527 = self.term;
                var $6528 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6530 = self.slice(0, -1);
                        var $6531 = Kind$Term$ann$($6526, Kind$Term$patch_at$($6530, $6527, _fn$3), $6528);
                        var $6529 = $6531;
                        break;
                    case 'i':
                        var $6532 = self.slice(0, -1);
                        var $6533 = Kind$Term$ann$($6526, $6527, Kind$Term$patch_at$($6532, $6528, _fn$3));
                        var $6529 = $6533;
                        break;
                    case 'e':
                        var $6534 = _fn$3(_term$2);
                        var $6529 = $6534;
                        break;
                };
                var $6479 = $6529;
                break;
            case 'Kind.Term.ori':
                var $6535 = self.orig;
                var $6536 = self.expr;
                var $6537 = Kind$Term$ori$($6535, Kind$Term$patch_at$(_path$1, $6536, _fn$3));
                var $6479 = $6537;
                break;
            case 'Kind.Term.var':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6539 = _fn$3(_term$2);
                        var $6538 = $6539;
                        break;
                    case 'o':
                    case 'i':
                        var $6540 = _term$2;
                        var $6538 = $6540;
                        break;
                };
                var $6479 = $6538;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6542 = _fn$3(_term$2);
                        var $6541 = $6542;
                        break;
                    case 'o':
                    case 'i':
                        var $6543 = _term$2;
                        var $6541 = $6543;
                        break;
                };
                var $6479 = $6541;
                break;
            case 'Kind.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6545 = _fn$3(_term$2);
                        var $6544 = $6545;
                        break;
                    case 'o':
                    case 'i':
                        var $6546 = _term$2;
                        var $6544 = $6546;
                        break;
                };
                var $6479 = $6544;
                break;
            case 'Kind.Term.gol':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6548 = _fn$3(_term$2);
                        var $6547 = $6548;
                        break;
                    case 'o':
                    case 'i':
                        var $6549 = _term$2;
                        var $6547 = $6549;
                        break;
                };
                var $6479 = $6547;
                break;
            case 'Kind.Term.cse':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6551 = _fn$3(_term$2);
                        var $6550 = $6551;
                        break;
                    case 'o':
                    case 'i':
                        var $6552 = _term$2;
                        var $6550 = $6552;
                        break;
                };
                var $6479 = $6550;
                break;
        };
        return $6479;
    };
    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);

    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.cons':
                var $6554 = self.head;
                var $6555 = self.tail;
                var self = $6554;
                switch (self._) {
                    case 'Kind.Error.waiting':
                        var $6557 = self.name;
                        var $6558 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $6559 = _m$bind$15;
                            return $6559;
                        }))(Kind$Synth$one$($6557, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6561 = self.value;
                                    var $6562 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $6561, $6555, Bool$true);
                                    var $6560 = $6562;
                                    break;
                                case 'Maybe.none':
                                    var $6563 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6555, _fixd$11);
                                    var $6560 = $6563;
                                    break;
                            };
                            return $6560;
                        }));
                        var $6556 = $6558;
                        break;
                    case 'Kind.Error.patch':
                        var $6564 = self.path;
                        var $6565 = self.term;
                        var self = $6564;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $6567 = self.slice(0, -1);
                                var _term$17 = Kind$Term$patch_at$($6567, _term$5, (_x$17 => {
                                    var $6569 = $6565;
                                    return $6569;
                                }));
                                var $6568 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $6555, Bool$true);
                                var $6566 = $6568;
                                break;
                            case 'i':
                                var $6570 = self.slice(0, -1);
                                var _type$17 = Kind$Term$patch_at$($6570, _type$6, (_x$17 => {
                                    var $6572 = $6565;
                                    return $6572;
                                }));
                                var $6571 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $6555, Bool$true);
                                var $6566 = $6571;
                                break;
                            case 'e':
                                var $6573 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $6574 = _m$pure$17;
                                    return $6574;
                                }))(Maybe$none);
                                var $6566 = $6573;
                                break;
                        };
                        var $6556 = $6566;
                        break;
                    case 'Kind.Error.undefined_reference':
                        var $6575 = self.name;
                        var $6576 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $6577 = _m$bind$16;
                            return $6577;
                        }))(Kind$Synth$one$($6575, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6579 = self.value;
                                    var $6580 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $6579, $6555, Bool$true);
                                    var $6578 = $6580;
                                    break;
                                case 'Maybe.none':
                                    var $6581 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6555, _fixd$11);
                                    var $6578 = $6581;
                                    break;
                            };
                            return $6578;
                        }));
                        var $6556 = $6576;
                        break;
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.cant_infer':
                        var $6582 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6555, _fixd$11);
                        var $6556 = $6582;
                        break;
                };
                var $6553 = $6556;
                break;
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {
                        var $6585 = (_x$12 + '1');
                        return $6585;
                    }), _type$6);
                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {
                        var $6586 = (_x$13 + '0');
                        return $6586;
                    }), _term$5);
                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);
                    var $6584 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $6587 = _m$pure$16;
                        return $6587;
                    }))(Maybe$some$(_defs$14));
                    var $6583 = $6584;
                } else {
                    var $6588 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $6589 = _m$pure$13;
                        return $6589;
                    }))(Maybe$none);
                    var $6583 = $6588;
                };
                var $6553 = $6583;
                break;
        };
        return $6553;
    };
    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Kind$Status$fail$(_errors$1) {
        var $6590 = ({
            _: 'Kind.Status.fail',
            'errors': _errors$1
        });
        return $6590;
    };
    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);

    function Kind$Synth$one$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $6592 = self.value;
                var self = $6592;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $6594 = self.file;
                        var $6595 = self.code;
                        var $6596 = self.orig;
                        var $6597 = self.name;
                        var $6598 = self.term;
                        var $6599 = self.type;
                        var $6600 = self.isct;
                        var $6601 = self.arit;
                        var $6602 = self.stat;
                        var _file$13 = $6594;
                        var _code$14 = $6595;
                        var _orig$15 = $6596;
                        var _name$16 = $6597;
                        var _term$17 = $6598;
                        var _type$18 = $6599;
                        var _isct$19 = $6600;
                        var _arit$20 = $6601;
                        var _stat$21 = $6602;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Kind.Status.init':
                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);
                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6605 = self.value;
                                        var $6606 = self.errors;
                                        var self = $6605;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6608 = Kind$Check$result$(Maybe$none, $6606);
                                                var $6607 = $6608;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6610 = self.value;
                                                        var $6611 = self.errors;
                                                        var self = $6610;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $6613 = Kind$Check$result$(Maybe$none, $6611);
                                                                var $6612 = $6613;
                                                                break;
                                                            case 'Maybe.some':
                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Kind.Check.result':
                                                                        var $6615 = self.value;
                                                                        var $6616 = self.errors;
                                                                        var $6617 = Kind$Check$result$($6615, List$concat$($6611, $6616));
                                                                        var $6614 = $6617;
                                                                        break;
                                                                };
                                                                var $6612 = $6614;
                                                                break;
                                                        };
                                                        var self = $6612;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6618 = self.value;
                                                        var $6619 = self.errors;
                                                        var $6620 = Kind$Check$result$($6618, List$concat$($6606, $6619));
                                                        var $6609 = $6620;
                                                        break;
                                                };
                                                var $6607 = $6609;
                                                break;
                                        };
                                        var _checked$23 = $6607;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6621 = self.errors;
                                        var self = List$is_empty$($6621);
                                        if (self) {
                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $6623 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $6624 = _m$pure$28;
                                                return $6624;
                                            }))(Maybe$some$(_defs$26));
                                            var $6622 = $6623;
                                        } else {
                                            var $6625 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $6626 = _m$bind$26;
                                                return $6626;
                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $6621, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6628 = self.value;
                                                        var $6629 = Kind$Synth$one$(_name$16, $6628);
                                                        var $6627 = $6629;
                                                        break;
                                                    case 'Maybe.none':
                                                        var _stat$27 = Kind$Status$fail$($6621);
                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $6630 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $6631 = _m$pure$30;
                                                            return $6631;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $6627 = $6630;
                                                        break;
                                                };
                                                return $6627;
                                            }));
                                            var $6622 = $6625;
                                        };
                                        var $6604 = $6622;
                                        break;
                                };
                                var $6603 = $6604;
                                break;
                            case 'Kind.Status.wait':
                            case 'Kind.Status.done':
                                var $6632 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $6633 = _m$pure$23;
                                    return $6633;
                                }))(Maybe$some$(_defs$2));
                                var $6603 = $6632;
                                break;
                            case 'Kind.Status.fail':
                                var $6634 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $6635 = _m$pure$24;
                                    return $6635;
                                }))(Maybe$some$(_defs$2));
                                var $6603 = $6634;
                                break;
                        };
                        var $6593 = $6603;
                        break;
                };
                var $6591 = $6593;
                break;
            case 'Maybe.none':
                var $6636 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $6637 = _m$bind$3;
                    return $6637;
                }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$3 => {
                    var self = _loaded$3;
                    switch (self._) {
                        case 'Maybe.some':
                            var $6639 = self.value;
                            var $6640 = Kind$Synth$one$(_name$1, $6639);
                            var $6638 = $6640;
                            break;
                        case 'Maybe.none':
                            var $6641 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                                var $6642 = _m$pure$5;
                                return $6642;
                            }))(Maybe$none);
                            var $6638 = $6641;
                            break;
                    };
                    return $6638;
                }));
                var $6591 = $6636;
                break;
        };
        return $6591;
    };
    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);

    function BitsMap$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6644 = self.head;
                var $6645 = self.tail;
                var self = $6644;
                switch (self._) {
                    case 'Pair.new':
                        var $6647 = self.fst;
                        var $6648 = self.snd;
                        var $6649 = BitsMap$set$($6647, $6648, BitsMap$from_list$($6645));
                        var $6646 = $6649;
                        break;
                };
                var $6643 = $6646;
                break;
            case 'List.nil':
                var $6650 = BitsMap$new;
                var $6643 = $6650;
                break;
        };
        return $6643;
    };
    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);
    const Kind$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Kind.Check.pure", List$cons$("Kind.Check.bind", List$cons$("Kind.Check.monad", List$cons$("Kind.Check.value", List$cons$("Kind.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $6652 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);
            return $6652;
        }));
        var $6651 = BitsMap$from_list$(_kvs$2);
        return $6651;
    })();

    function Kind$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $6654 = self.name;
                var _inli$4 = BitsSet$has$((kind_name_to_bits($6654)), Kind$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Kind$Map$get$($6654, _defs$2);
                    switch (self._) {
                        case 'Maybe.some':
                            var $6657 = self.value;
                            var self = $6657;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $6659 = self.term;
                                    var $6660 = Kind$Term$inline$reduce$($6659, _defs$2);
                                    var $6658 = $6660;
                                    break;
                            };
                            var $6656 = $6658;
                            break;
                        case 'Maybe.none':
                            var $6661 = Kind$Term$ref$($6654);
                            var $6656 = $6661;
                            break;
                    };
                    var $6655 = $6656;
                } else {
                    var $6662 = _term$1;
                    var $6655 = $6662;
                };
                var $6653 = $6655;
                break;
            case 'Kind.Term.app':
                var $6663 = self.func;
                var $6664 = self.argm;
                var _func$5 = Kind$Term$inline$reduce$($6663, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $6666 = self.body;
                        var $6667 = Kind$Term$inline$reduce$($6666($6664), _defs$2);
                        var $6665 = $6667;
                        break;
                    case 'Kind.Term.let':
                        var $6668 = self.name;
                        var $6669 = self.expr;
                        var $6670 = self.body;
                        var $6671 = Kind$Term$let$($6668, $6669, (_x$9 => {
                            var $6672 = Kind$Term$inline$reduce$(Kind$Term$app$($6670(_x$9), $6664), _defs$2);
                            return $6672;
                        }));
                        var $6665 = $6671;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6673 = _term$1;
                        var $6665 = $6673;
                        break;
                };
                var $6653 = $6665;
                break;
            case 'Kind.Term.ori':
                var $6674 = self.expr;
                var $6675 = Kind$Term$inline$reduce$($6674, _defs$2);
                var $6653 = $6675;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $6676 = _term$1;
                var $6653 = $6676;
                break;
        };
        return $6653;
    };
    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);

    function Kind$Term$inline$(_term$1, _defs$2) {
        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $6678 = self.name;
                var $6679 = self.indx;
                var $6680 = Kind$Term$var$($6678, $6679);
                var $6677 = $6680;
                break;
            case 'Kind.Term.ref':
                var $6681 = self.name;
                var $6682 = Kind$Term$ref$($6681);
                var $6677 = $6682;
                break;
            case 'Kind.Term.all':
                var $6683 = self.eras;
                var $6684 = self.self;
                var $6685 = self.name;
                var $6686 = self.xtyp;
                var $6687 = self.body;
                var $6688 = Kind$Term$all$($6683, $6684, $6685, Kind$Term$inline$($6686, _defs$2), (_s$8 => _x$9 => {
                    var $6689 = Kind$Term$inline$($6687(_s$8)(_x$9), _defs$2);
                    return $6689;
                }));
                var $6677 = $6688;
                break;
            case 'Kind.Term.lam':
                var $6690 = self.name;
                var $6691 = self.body;
                var $6692 = Kind$Term$lam$($6690, (_x$5 => {
                    var $6693 = Kind$Term$inline$($6691(_x$5), _defs$2);
                    return $6693;
                }));
                var $6677 = $6692;
                break;
            case 'Kind.Term.app':
                var $6694 = self.func;
                var $6695 = self.argm;
                var $6696 = Kind$Term$app$(Kind$Term$inline$($6694, _defs$2), Kind$Term$inline$($6695, _defs$2));
                var $6677 = $6696;
                break;
            case 'Kind.Term.let':
                var $6697 = self.name;
                var $6698 = self.expr;
                var $6699 = self.body;
                var $6700 = Kind$Term$let$($6697, Kind$Term$inline$($6698, _defs$2), (_x$6 => {
                    var $6701 = Kind$Term$inline$($6699(_x$6), _defs$2);
                    return $6701;
                }));
                var $6677 = $6700;
                break;
            case 'Kind.Term.def':
                var $6702 = self.name;
                var $6703 = self.expr;
                var $6704 = self.body;
                var $6705 = Kind$Term$def$($6702, Kind$Term$inline$($6703, _defs$2), (_x$6 => {
                    var $6706 = Kind$Term$inline$($6704(_x$6), _defs$2);
                    return $6706;
                }));
                var $6677 = $6705;
                break;
            case 'Kind.Term.ann':
                var $6707 = self.done;
                var $6708 = self.term;
                var $6709 = self.type;
                var $6710 = Kind$Term$ann$($6707, Kind$Term$inline$($6708, _defs$2), Kind$Term$inline$($6709, _defs$2));
                var $6677 = $6710;
                break;
            case 'Kind.Term.gol':
                var $6711 = self.name;
                var $6712 = self.dref;
                var $6713 = self.verb;
                var $6714 = Kind$Term$gol$($6711, $6712, $6713);
                var $6677 = $6714;
                break;
            case 'Kind.Term.hol':
                var $6715 = self.path;
                var $6716 = Kind$Term$hol$($6715);
                var $6677 = $6716;
                break;
            case 'Kind.Term.nat':
                var $6717 = self.natx;
                var $6718 = Kind$Term$nat$($6717);
                var $6677 = $6718;
                break;
            case 'Kind.Term.chr':
                var $6719 = self.chrx;
                var $6720 = Kind$Term$chr$($6719);
                var $6677 = $6720;
                break;
            case 'Kind.Term.str':
                var $6721 = self.strx;
                var $6722 = Kind$Term$str$($6721);
                var $6677 = $6722;
                break;
            case 'Kind.Term.ori':
                var $6723 = self.expr;
                var $6724 = Kind$Term$inline$($6723, _defs$2);
                var $6677 = $6724;
                break;
            case 'Kind.Term.typ':
                var $6725 = Kind$Term$typ;
                var $6677 = $6725;
                break;
            case 'Kind.Term.cse':
                var $6726 = _term$1;
                var $6677 = $6726;
                break;
        };
        return $6677;
    };
    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);

    function BitsMap$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $6728 = self.val;
                var $6729 = self.lft;
                var $6730 = self.rgt;
                var self = $6728;
                switch (self._) {
                    case 'Maybe.some':
                        var $6732 = self.value;
                        var $6733 = List$cons$($6732, _list$3);
                        var _list0$7 = $6733;
                        break;
                    case 'Maybe.none':
                        var $6734 = _list$3;
                        var _list0$7 = $6734;
                        break;
                };
                var _list1$8 = BitsMap$values$go$($6729, _list0$7);
                var _list2$9 = BitsMap$values$go$($6730, _list1$8);
                var $6731 = _list2$9;
                var $6727 = $6731;
                break;
            case 'BitsMap.new':
                var $6735 = _list$3;
                var $6727 = $6735;
                break;
        };
        return $6727;
    };
    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);

    function BitsMap$values$(_xs$2) {
        var $6736 = BitsMap$values$go$(_xs$2, List$nil);
        return $6736;
    };
    const BitsMap$values = x0 => BitsMap$values$(x0);

    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $6738 = _name$2;
                        var $6737 = $6738;
                    } else {
                        var $6739 = (self - 1n);
                        var $6740 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $6737 = $6740;
                    };
                    return $6737;
                } else {
                    var $6741 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.cons':
                            var $6743 = self.head;
                            var $6744 = self.tail;
                            var self = (_name$2 === $6743);
                            if (self) {
                                var $6746 = Nat$succ$(_brui$3);
                                var _brui$8 = $6746;
                            } else {
                                var $6747 = _brui$3;
                                var _brui$8 = $6747;
                            };
                            var $6745 = Kind$Core$var_name$($6741, _name$2, _brui$8, $6744);
                            var $6742 = $6745;
                            break;
                        case 'List.nil':
                            var $6748 = "unbound";
                            var $6742 = $6748;
                            break;
                    };
                    return $6742;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);

    function Kind$Name$show$(_name$1) {
        var $6749 = _name$1;
        return $6749;
    };
    const Kind$Name$show = x0 => Kind$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $6751 = self.slice(0, -1);
                var $6752 = (2n * Bits$to_nat$($6751));
                var $6750 = $6752;
                break;
            case 'i':
                var $6753 = self.slice(0, -1);
                var $6754 = Nat$succ$((2n * Bits$to_nat$($6753)));
                var $6750 = $6754;
                break;
            case 'e':
                var $6755 = 0n;
                var $6750 = $6755;
                break;
        };
        return $6750;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $6757 = u16_to_word(self);
                var $6758 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($6757)));
                var $6756 = $6758;
                break;
        };
        return $6756;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Kind$Code$escape$char$(_chr$1) {
        var self = (_chr$1 === Kind$Code$backslash);
        if (self) {
            var $6760 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
            var $6759 = $6760;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $6762 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                var $6761 = $6762;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $6764 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                    var $6763 = $6764;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $6766 = String$cons$(_chr$1, String$nil);
                        var $6765 = $6766;
                    } else {
                        var $6767 = (String$cons$(Kind$Code$backslash, String$nil) + ("u{" + (U16$show_hex$(_chr$1) + "}")));
                        var $6765 = $6767;
                    };
                    var $6763 = $6765;
                };
                var $6761 = $6763;
            };
            var $6759 = $6761;
        };
        return $6759;
    };
    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);

    function Kind$Code$escape$go$(_str$1, _result$2) {
        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({
            ctr: 'TCO',
            arg: [_str$1, _result$2]
        });
        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);
        var arg = [_str$1, _result$2];
        while (true) {
            let [_str$1, _result$2] = arg;
            var R = (() => {
                var self = _str$1;
                if (self.length === 0) {
                    var $6768 = String$reverse$(_result$2);
                    return $6768;
                } else {
                    var $6769 = self.charCodeAt(0);
                    var $6770 = self.slice(1);
                    var $6771 = Kind$Code$escape$go$($6770, (String$reverse$(Kind$Code$escape$char$($6769)) + _result$2));
                    return $6771;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);

    function Kind$Code$escape$(_str$1) {
        var $6772 = Kind$Code$escape$go$(_str$1, "");
        return $6772;
    };
    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);

    function Kind$Core$show$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6774 = self.name;
                var $6775 = self.indx;
                var $6776 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $6775 <= 0n ? 0n : _indx$2 - $6775)), $6774, 0n, _vars$3);
                var $6773 = $6776;
                break;
            case 'Kind.Term.ref':
                var $6777 = self.name;
                var $6778 = Kind$Name$show$($6777);
                var $6773 = $6778;
                break;
            case 'Kind.Term.all':
                var $6779 = self.eras;
                var $6780 = self.self;
                var $6781 = self.name;
                var $6782 = self.xtyp;
                var $6783 = self.body;
                var _eras$9 = $6779;
                var self = _eras$9;
                if (self) {
                    var $6785 = "%";
                    var _init$10 = $6785;
                } else {
                    var $6786 = "@";
                    var _init$10 = $6786;
                };
                var _self$11 = Kind$Name$show$($6780);
                var _name$12 = Kind$Name$show$($6781);
                var _xtyp$13 = Kind$Core$show$($6782, _indx$2, _vars$3);
                var _body$14 = Kind$Core$show$($6783(Kind$Term$var$($6780, _indx$2))(Kind$Term$var$($6781, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($6781, List$cons$($6780, _vars$3)));
                var $6784 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $6773 = $6784;
                break;
            case 'Kind.Term.lam':
                var $6787 = self.name;
                var $6788 = self.body;
                var _name$6 = Kind$Name$show$($6787);
                var _body$7 = Kind$Core$show$($6788(Kind$Term$var$($6787, _indx$2)), Nat$succ$(_indx$2), List$cons$($6787, _vars$3));
                var $6789 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $6773 = $6789;
                break;
            case 'Kind.Term.app':
                var $6790 = self.func;
                var $6791 = self.argm;
                var _func$6 = Kind$Core$show$($6790, _indx$2, _vars$3);
                var _argm$7 = Kind$Core$show$($6791, _indx$2, _vars$3);
                var $6792 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $6773 = $6792;
                break;
            case 'Kind.Term.let':
                var $6793 = self.name;
                var $6794 = self.expr;
                var $6795 = self.body;
                var _name$7 = Kind$Name$show$($6793);
                var _expr$8 = Kind$Core$show$($6794, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$($6795(Kind$Term$var$($6793, _indx$2)), Nat$succ$(_indx$2), List$cons$($6793, _vars$3));
                var $6796 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $6773 = $6796;
                break;
            case 'Kind.Term.def':
                var $6797 = self.name;
                var $6798 = self.expr;
                var $6799 = self.body;
                var _name$7 = Kind$Name$show$($6797);
                var _expr$8 = Kind$Core$show$($6798, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$($6799(Kind$Term$var$($6797, _indx$2)), Nat$succ$(_indx$2), List$cons$($6797, _vars$3));
                var $6800 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $6773 = $6800;
                break;
            case 'Kind.Term.ann':
                var $6801 = self.term;
                var $6802 = self.type;
                var _term$7 = Kind$Core$show$($6801, _indx$2, _vars$3);
                var _type$8 = Kind$Core$show$($6802, _indx$2, _vars$3);
                var $6803 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $6773 = $6803;
                break;
            case 'Kind.Term.nat':
                var $6804 = self.natx;
                var $6805 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($6804), List$nil)));
                var $6773 = $6805;
                break;
            case 'Kind.Term.chr':
                var $6806 = self.chrx;
                var $6807 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($6806), List$cons$("\'", List$nil))));
                var $6773 = $6807;
                break;
            case 'Kind.Term.str':
                var $6808 = self.strx;
                var $6809 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($6808), List$cons$("\"", List$nil))));
                var $6773 = $6809;
                break;
            case 'Kind.Term.ori':
                var $6810 = self.expr;
                var $6811 = Kind$Core$show$($6810, _indx$2, _vars$3);
                var $6773 = $6811;
                break;
            case 'Kind.Term.typ':
                var $6812 = "*";
                var $6773 = $6812;
                break;
            case 'Kind.Term.gol':
                var $6813 = "<GOL>";
                var $6773 = $6813;
                break;
            case 'Kind.Term.hol':
                var $6814 = "<HOL>";
                var $6773 = $6814;
                break;
            case 'Kind.Term.cse':
                var $6815 = "<CSE>";
                var $6773 = $6815;
                break;
        };
        return $6773;
    };
    const Kind$Core$show = x0 => x1 => x2 => Kind$Core$show$(x0, x1, x2);

    function Kind$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $6818 = _result$2;
            var $6819 = BitsMap$values$(_defs$1);
            let _result$4 = $6818;
            let _defn$3;
            while ($6819._ === 'List.cons') {
                _defn$3 = $6819.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $6820 = self.name;
                        var $6821 = self.term;
                        var $6822 = self.type;
                        var $6823 = self.stat;
                        var self = $6823;
                        switch (self._) {
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $6825 = _result$4;
                                var $6824 = $6825;
                                break;
                            case 'Kind.Status.done':
                                var _name$14 = $6820;
                                var _term$15 = Kind$Core$show$($6821, 0n, List$nil);
                                var _type$16 = Kind$Core$show$($6822, 0n, List$nil);
                                var $6826 = String$flatten$(List$cons$(_result$4, List$cons$(_name$14, List$cons$(" : ", List$cons$(_type$16, List$cons$(" = ", List$cons$(_term$15, List$cons$(";\u{a}", List$nil))))))));
                                var $6824 = $6826;
                                break;
                        };
                        var $6818 = $6824;
                        break;
                };
                _result$4 = $6818;
                $6819 = $6819.tail;
            }
            return _result$4;
        })();
        var $6816 = _result$3;
        return $6816;
    };
    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);

    function Kind$api$io$term_to_core$(_name$1) {
        var $6827 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $6828 = _m$bind$2;
            return $6828;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $6830 = self.value;
                    var $6831 = $6830;
                    var _defs$3 = $6831;
                    break;
                case 'Maybe.none':
                    var $6832 = Kind$Map$new;
                    var _defs$3 = $6832;
                    break;
            };
            var _defs$4 = BitsMap$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $6834 = self.file;
                        var $6835 = self.code;
                        var $6836 = self.orig;
                        var $6837 = self.name;
                        var $6838 = self.term;
                        var $6839 = self.type;
                        var $6840 = self.isct;
                        var $6841 = self.arit;
                        var $6842 = self.stat;
                        var _term$14 = Kind$Term$inline$($6838, _defs$3);
                        var _type$15 = Kind$Term$inline$($6839, _defs$3);
                        var $6843 = Kind$Def$new$($6834, $6835, $6836, $6837, _term$14, _type$15, $6840, $6841, $6842);
                        var $6833 = $6843;
                        break;
                };
                return $6833;
            }), _defs$3);
            var $6829 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $6844 = _m$pure$6;
                return $6844;
            }))(Kind$Defs$core$(_defs$4));
            return $6829;
        }));
        return $6827;
    };
    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);

    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $6846 = self.val;
                var $6847 = self.lft;
                var $6848 = self.rgt;
                var self = $6846;
                switch (self._) {
                    case 'Maybe.none':
                        var $6850 = _list$4;
                        var _list0$8 = $6850;
                        break;
                    case 'Maybe.some':
                        var $6851 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $6851;
                        break;
                };
                var _list1$9 = BitsMap$keys$go$($6847, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$keys$go$($6848, (_key$3 + '1'), _list1$9);
                var $6849 = _list2$10;
                var $6845 = $6849;
                break;
            case 'BitsMap.new':
                var $6852 = _list$4;
                var $6845 = $6852;
                break;
        };
        return $6845;
    };
    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);

    function BitsMap$keys$(_xs$2) {
        var $6853 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));
        return $6853;
    };
    const BitsMap$keys = x0 => BitsMap$keys$(x0);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $6855 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $6857 = List$cons$(_head$6, _tail$7);
                    var $6856 = $6857;
                } else {
                    var $6858 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $6859 = Bits$chunks_of$go$(_len$1, $6855, $6858, _chunk$7);
                    var $6856 = $6859;
                };
                var $6854 = $6856;
                break;
            case 'i':
                var $6860 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $6862 = List$cons$(_head$6, _tail$7);
                    var $6861 = $6862;
                } else {
                    var $6863 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $6864 = Bits$chunks_of$go$(_len$1, $6860, $6863, _chunk$7);
                    var $6861 = $6864;
                };
                var $6854 = $6861;
                break;
            case 'e':
                var $6865 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $6854 = $6865;
                break;
        };
        return $6854;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $6866 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $6866;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $6868 = Word$e;
            var $6867 = $6868;
        } else {
            var $6869 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $6871 = self.slice(0, -1);
                    var $6872 = Word$o$(Word$from_bits$($6869, $6871));
                    var $6870 = $6872;
                    break;
                case 'i':
                    var $6873 = self.slice(0, -1);
                    var $6874 = Word$i$(Word$from_bits$($6869, $6873));
                    var $6870 = $6874;
                    break;
                case 'e':
                    var $6875 = Word$o$(Word$from_bits$($6869, Bits$e));
                    var $6870 = $6875;
                    break;
            };
            var $6867 = $6870;
        };
        return $6867;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Kind$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $6878 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $6878;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $6880 = ((_u16$5 + 71) & 0xFFFF);
                    var $6879 = $6880;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $6882 = (Math.max(_u16$5 - 4, 0));
                        var $6881 = $6882;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $6884 = 46;
                            var $6883 = $6884;
                        } else {
                            var $6885 = 95;
                            var $6883 = $6885;
                        };
                        var $6881 = $6883;
                    };
                    var $6879 = $6881;
                };
                var _chr$6 = $6879;
            };
            var $6877 = String$cons$(_chr$6, _name$4);
            return $6877;
        }));
        var $6876 = _name$3;
        return $6876;
    };
    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);

    function Kind$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $6887 = self.head;
                var $6888 = self.tail;
                var $6889 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $6890 = _m$bind$5;
                    return $6890;
                }))(Kind$Synth$one$($6887, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.some':
                            var $6892 = self.value;
                            var $6893 = Kind$Synth$many$($6888, $6892);
                            var $6891 = $6893;
                            break;
                        case 'Maybe.none':
                            var $6894 = Kind$Synth$many$($6888, _defs$2);
                            var $6891 = $6894;
                            break;
                    };
                    return $6891;
                }));
                var $6886 = $6889;
                break;
            case 'List.nil':
                var $6895 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $6896 = _m$pure$4;
                    return $6896;
                }))(_defs$2);
                var $6886 = $6895;
                break;
        };
        return $6886;
    };
    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);

    function Kind$Synth$file$(_file$1, _defs$2) {
        var $6897 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $6898 = _m$bind$3;
            return $6898;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $6900 = self.value;
                    var $6901 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $6902 = _m$pure$7;
                        return $6902;
                    }))(Either$left$($6900));
                    var $6899 = $6901;
                    break;
                case 'Either.right':
                    var $6903 = self.value;
                    var _file_defs$6 = $6903;
                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);
                    var $6904 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $6905 = _m$bind$9;
                        return $6905;
                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $6906 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $6907 = _m$pure$11;
                            return $6907;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $6906;
                    }));
                    var $6899 = $6904;
                    break;
            };
            return $6899;
        }));
        return $6897;
    };
    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);

    function IO$put_string$(_text$1) {
        var $6908 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $6909 = IO$end$(Unit$new);
            return $6909;
        }));
        return $6908;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $6910 = IO$put_string$((_text$1 + "\u{a}"));
        return $6910;
    };
    const IO$print = x0 => IO$print$(x0);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.some':
                var $6912 = self.value;
                var $6913 = _f$4($6912);
                var $6911 = $6913;
                break;
            case 'Maybe.none':
                var $6914 = Maybe$none;
                var $6911 = $6914;
                break;
        };
        return $6911;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $6915 = _new$2(Maybe$bind)(Maybe$some);
        return $6915;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Kind$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $6917 = self.name;
                var self = ($6917 === "Nat.zero");
                if (self) {
                    var $6919 = Maybe$some$(0n);
                    var $6918 = $6919;
                } else {
                    var $6920 = Maybe$none;
                    var $6918 = $6920;
                };
                var $6916 = $6918;
                break;
            case 'Kind.Term.app':
                var $6921 = self.func;
                var $6922 = self.argm;
                var self = $6921;
                switch (self._) {
                    case 'Kind.Term.ref':
                        var $6924 = self.name;
                        var self = ($6924 === "Nat.succ");
                        if (self) {
                            var $6926 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $6927 = _m$bind$5;
                                return $6927;
                            }))(Kind$Term$show$as_nat$go$($6922))((_pred$5 => {
                                var $6928 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $6929 = _m$pure$7;
                                    return $6929;
                                }))(Nat$succ$(_pred$5));
                                return $6928;
                            }));
                            var $6925 = $6926;
                        } else {
                            var $6930 = Maybe$none;
                            var $6925 = $6930;
                        };
                        var $6923 = $6925;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6931 = Maybe$none;
                        var $6923 = $6931;
                        break;
                };
                var $6916 = $6923;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6932 = Maybe$none;
                var $6916 = $6932;
                break;
        };
        return $6916;
    };
    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);

    function Kind$Term$show$as_nat$(_term$1) {
        var $6933 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);
        return $6933;
    };
    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);

    function Kind$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $6935 = self.name;
                var $6936 = (_name$2 === $6935);
                var $6934 = $6936;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6937 = Bool$false;
                var $6934 = $6937;
                break;
        };
        return $6934;
    };
    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);

    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Kind$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), "?");
            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), "?");
            var $6939 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $6938 = $6939;
        } else {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $6941 = Bool$false;
                var _wrap$6 = $6941;
            } else {
                var $6942 = self.charCodeAt(0);
                var $6943 = self.slice(1);
                var $6944 = ($6942 === 40);
                var _wrap$6 = $6944;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $6945 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $6945;
            } else {
                var $6946 = _func$5;
                var _func$8 = $6946;
            };
            var $6940 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $6938 = $6940;
        };
        return $6938;
    };
    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);

    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {
        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6947 = self.func;
                        var $6948 = self.argm;
                        var $6949 = Kind$Term$show$app$($6947, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($6948, Kind$MPath$i$(_path$2)), _args$3));
                        return $6949;
                    case 'Kind.Term.ori':
                        var $6950 = self.expr;
                        var $6951 = Kind$Term$show$app$($6950, _path$2, _args$3);
                        return $6951;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6952 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $6952;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);

    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $6954 = self.val;
                var $6955 = self.lft;
                var $6956 = self.rgt;
                var self = $6954;
                switch (self._) {
                    case 'Maybe.some':
                        var $6958 = self.value;
                        var $6959 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $6958), _list$4);
                        var _list0$8 = $6959;
                        break;
                    case 'Maybe.none':
                        var $6960 = _list$4;
                        var _list0$8 = $6960;
                        break;
                };
                var _list1$9 = BitsMap$to_list$go$($6955, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$to_list$go$($6956, (_key$3 + '1'), _list1$9);
                var $6957 = _list2$10;
                var $6953 = $6957;
                break;
            case 'BitsMap.new':
                var $6961 = _list$4;
                var $6953 = $6961;
                break;
        };
        return $6953;
    };
    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);

    function BitsMap$to_list$(_xs$2) {
        var $6962 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        return $6962;
    };
    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);

    function Kind$Term$show$go$(_term$1, _path$2) {
        var self = Kind$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.some':
                var $6964 = self.value;
                var $6965 = $6964;
                var $6963 = $6965;
                break;
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $6967 = self.name;
                        var $6968 = Kind$Name$show$($6967);
                        var $6966 = $6968;
                        break;
                    case 'Kind.Term.ref':
                        var $6969 = self.name;
                        var _name$4 = Kind$Name$show$($6969);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6971 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($6971));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $6972 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $6970 = $6972;
                                break;
                            case 'Maybe.none':
                                var $6973 = _name$4;
                                var $6970 = $6973;
                                break;
                        };
                        var $6966 = $6970;
                        break;
                    case 'Kind.Term.all':
                        var $6974 = self.eras;
                        var $6975 = self.self;
                        var $6976 = self.name;
                        var $6977 = self.xtyp;
                        var $6978 = self.body;
                        var _eras$8 = $6974;
                        var _self$9 = Kind$Name$show$($6975);
                        var _name$10 = Kind$Name$show$($6976);
                        var _type$11 = Kind$Term$show$go$($6977, Kind$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $6980 = "<";
                            var _open$12 = $6980;
                        } else {
                            var $6981 = "(";
                            var _open$12 = $6981;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $6982 = ">";
                            var _clos$13 = $6982;
                        } else {
                            var $6983 = ")";
                            var _clos$13 = $6983;
                        };
                        var _body$14 = Kind$Term$show$go$($6978(Kind$Term$var$($6975, 0n))(Kind$Term$var$($6976, 0n)), Kind$MPath$i$(_path$2));
                        var $6979 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $6966 = $6979;
                        break;
                    case 'Kind.Term.lam':
                        var $6984 = self.name;
                        var $6985 = self.body;
                        var _name$5 = Kind$Name$show$($6984);
                        var _body$6 = Kind$Term$show$go$($6985(Kind$Term$var$($6984, 0n)), Kind$MPath$o$(_path$2));
                        var $6986 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $6966 = $6986;
                        break;
                    case 'Kind.Term.let':
                        var $6987 = self.name;
                        var $6988 = self.expr;
                        var $6989 = self.body;
                        var _name$6 = Kind$Name$show$($6987);
                        var _expr$7 = Kind$Term$show$go$($6988, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($6989(Kind$Term$var$($6987, 0n)), Kind$MPath$i$(_path$2));
                        var $6990 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $6966 = $6990;
                        break;
                    case 'Kind.Term.def':
                        var $6991 = self.name;
                        var $6992 = self.expr;
                        var $6993 = self.body;
                        var _name$6 = Kind$Name$show$($6991);
                        var _expr$7 = Kind$Term$show$go$($6992, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($6993(Kind$Term$var$($6991, 0n)), Kind$MPath$i$(_path$2));
                        var $6994 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $6966 = $6994;
                        break;
                    case 'Kind.Term.ann':
                        var $6995 = self.term;
                        var $6996 = self.type;
                        var _term$6 = Kind$Term$show$go$($6995, Kind$MPath$o$(_path$2));
                        var _type$7 = Kind$Term$show$go$($6996, Kind$MPath$i$(_path$2));
                        var $6997 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $6966 = $6997;
                        break;
                    case 'Kind.Term.gol':
                        var $6998 = self.name;
                        var _name$6 = Kind$Name$show$($6998);
                        var $6999 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $6966 = $6999;
                        break;
                    case 'Kind.Term.nat':
                        var $7000 = self.natx;
                        var $7001 = String$flatten$(List$cons$(Nat$show$($7000), List$nil));
                        var $6966 = $7001;
                        break;
                    case 'Kind.Term.chr':
                        var $7002 = self.chrx;
                        var $7003 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7002), List$cons$("\'", List$nil))));
                        var $6966 = $7003;
                        break;
                    case 'Kind.Term.str':
                        var $7004 = self.strx;
                        var $7005 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7004), List$cons$("\"", List$nil))));
                        var $6966 = $7005;
                        break;
                    case 'Kind.Term.cse':
                        var $7006 = self.expr;
                        var $7007 = self.name;
                        var $7008 = self.with;
                        var $7009 = self.cses;
                        var $7010 = self.moti;
                        var _expr$9 = Kind$Term$show$go$($7006, Kind$MPath$o$(_path$2));
                        var _name$10 = Kind$Name$show$($7007);
                        var _wyth$11 = String$join$("; ", List$mapped$($7008, (_with_var$11 => {
                            var self = _with_var$11;
                            switch (self._) {
                                case 'Kind.Ann.new':
                                    var $7013 = self.name;
                                    var $7014 = self.type;
                                    var self = $7014;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $7016 = self.value;
                                            var $7017 = ($7013 + (": " + Kind$Term$show$go$($7016, Maybe$none)));
                                            var $7015 = $7017;
                                            break;
                                        case 'Maybe.none':
                                            var $7018 = $7013;
                                            var $7015 = $7018;
                                            break;
                                    };
                                    var $7012 = $7015;
                                    break;
                            };
                            return $7012;
                        })));
                        var _cses$12 = BitsMap$to_list$($7009);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $7019 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $7019;
                        })));
                        var self = $7010;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7020 = self.value;
                                var $7021 = String$flatten$(List$cons$(": ", List$cons$(Kind$Term$show$go$($7020, Maybe$none), List$nil)));
                                var _moti$14 = $7021;
                                break;
                            case 'Maybe.none':
                                var $7022 = "";
                                var _moti$14 = $7022;
                                break;
                        };
                        var $7011 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $6966 = $7011;
                        break;
                    case 'Kind.Term.ori':
                        var $7023 = self.expr;
                        var $7024 = Kind$Term$show$go$($7023, _path$2);
                        var $6966 = $7024;
                        break;
                    case 'Kind.Term.typ':
                        var $7025 = "Type";
                        var $6966 = $7025;
                        break;
                    case 'Kind.Term.app':
                        var $7026 = Kind$Term$show$app$(_term$1, _path$2, List$nil);
                        var $6966 = $7026;
                        break;
                    case 'Kind.Term.hol':
                        var $7027 = "_";
                        var $6966 = $7027;
                        break;
                };
                var $6963 = $6966;
                break;
        };
        return $6963;
    };
    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);

    function Kind$Term$show$(_term$1) {
        var $7028 = Kind$Term$show$go$(_term$1, Maybe$none);
        return $7028;
    };
    const Kind$Term$show = x0 => Kind$Term$show$(x0);

    function Kind$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $7031 = _types$3;
            var $7032 = _names$2;
            let _types$5 = $7031;
            let _name$4;
            while ($7032._ === 'List.cons') {
                _name$4 = $7032.head;
                var self = Kind$Map$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $7033 = self.value;
                        var self = $7033;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7035 = self.type;
                                var $7036 = (_types$5 + (_name$4 + (": " + (Kind$Term$show$($7035) + "\u{a}"))));
                                var $7034 = $7036;
                                break;
                        };
                        var $7031 = $7034;
                        break;
                    case 'Maybe.none':
                        var $7037 = _types$5;
                        var $7031 = $7037;
                        break;
                };
                _types$5 = $7031;
                $7032 = $7032.tail;
            }
            return _types$5;
        })();
        var $7029 = _types$4;
        return $7029;
    };
    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);

    function List$filter$(_f$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $7039 = self.head;
                var $7040 = self.tail;
                var self = _f$2($7039);
                if (self) {
                    var $7042 = List$cons$($7039, List$filter$(_f$2, $7040));
                    var $7041 = $7042;
                } else {
                    var $7043 = List$filter$(_f$2, $7040);
                    var $7041 = $7043;
                };
                var $7038 = $7041;
                break;
            case 'List.nil':
                var $7044 = List$nil;
                var $7038 = $7044;
                break;
        };
        return $7038;
    };
    const List$filter = x0 => x1 => List$filter$(x0, x1);

    function Kind$Error$is_undef$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.cant_infer':
                var $7046 = Bool$false;
                var $7045 = $7046;
                break;
            case 'Kind.Error.undefined_reference':
                var $7047 = Bool$true;
                var $7045 = $7047;
                break;
        };
        return $7045;
    };
    const Kind$Error$is_undef = x0 => Kind$Error$is_undef$(x0);

    function Kind$Error$is_mistake$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.cant_infer':
                var $7049 = Bool$true;
                var $7048 = $7049;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
                var $7050 = Bool$false;
                var $7048 = $7050;
                break;
        };
        return $7048;
    };
    const Kind$Error$is_mistake = x0 => Kind$Error$is_mistake$(x0);

    function Kind$Error$is_goal$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
            case 'Kind.Error.cant_infer':
                var $7052 = Bool$false;
                var $7051 = $7052;
                break;
            case 'Kind.Error.show_goal':
                var $7053 = Bool$true;
                var $7051 = $7053;
                break;
        };
        return $7051;
    };
    const Kind$Error$is_goal = x0 => Kind$Error$is_goal$(x0);

    function Kind$Error$relevant$(_errors$1) {
        var _undefs$2 = List$filter$(Kind$Error$is_undef, _errors$1);
        var _mistakes$3 = List$filter$(Kind$Error$is_mistake, _errors$1);
        var _goals$4 = List$filter$(Kind$Error$is_goal, _errors$1);
        var self = _undefs$2;
        switch (self._) {
            case 'List.nil':
                var self = _mistakes$3;
                switch (self._) {
                    case 'List.cons':
                        var $7056 = self.head;
                        var $7057 = List$concat$(List$cons$($7056, List$nil), _goals$4);
                        var $7055 = $7057;
                        break;
                    case 'List.nil':
                        var $7058 = _goals$4;
                        var $7055 = $7058;
                        break;
                };
                var $7054 = $7055;
                break;
            case 'List.cons':
                var $7059 = List$concat$(_undefs$2, _goals$4);
                var $7054 = $7059;
                break;
        };
        return $7054;
    };
    const Kind$Error$relevant = x0 => Kind$Error$relevant$(x0);

    function Map$(_V$1) {
        var $7060 = null;
        return $7060;
    };
    const Map = x0 => Map$(x0);

    function String$to_bits$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $7062 = Bits$e;
            var $7061 = $7062;
        } else {
            var $7063 = self.charCodeAt(0);
            var $7064 = self.slice(1);
            var $7065 = (String$to_bits$($7064) + (u16_to_bits($7063)));
            var $7061 = $7065;
        };
        return $7061;
    };
    const String$to_bits = x0 => String$to_bits$(x0);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7067 = self.head;
                var $7068 = self.tail;
                var self = $7067;
                switch (self._) {
                    case 'Pair.new':
                        var $7070 = self.fst;
                        var $7071 = self.snd;
                        var $7072 = BitsMap$set$(String$to_bits$($7070), $7071, Map$from_list$($7068));
                        var $7069 = $7072;
                        break;
                };
                var $7066 = $7069;
                break;
            case 'List.nil':
                var $7073 = BitsMap$new;
                var $7066 = $7073;
                break;
        };
        return $7066;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Kind$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.cons':
                var $7075 = self.head;
                var $7076 = self.tail;
                var self = $7075;
                switch (self._) {
                    case 'Pair.new':
                        var $7078 = self.fst;
                        var $7079 = self.snd;
                        var _name$6 = Kind$Name$show$($7078);
                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($7079, Kind$Map$new));
                        var _rest$8 = Kind$Context$show$($7076);
                        var $7080 = (_rest$8 + ("- " + (_name$6 + (": " + (_type$7 + "\u{a}")))));
                        var $7077 = $7080;
                        break;
                };
                var $7074 = $7077;
                break;
            case 'List.nil':
                var $7081 = "";
                var $7074 = $7081;
                break;
        };
        return $7074;
    };
    const Kind$Context$show = x0 => Kind$Context$show$(x0);

    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $7082 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Kind.Term.ref':
                    var $7084 = self.name;
                    var self = Kind$Map$get$($7084, _defs$3);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7086 = self.value;
                            var self = $7086;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7088 = self.term;
                                    var $7089 = $7088;
                                    var $7087 = $7089;
                                    break;
                            };
                            var $7085 = $7087;
                            break;
                        case 'Maybe.none':
                            var $7090 = Kind$Term$ref$($7084);
                            var $7085 = $7090;
                            break;
                    };
                    var $7083 = $7085;
                    break;
                case 'Kind.Term.var':
                case 'Kind.Term.typ':
                case 'Kind.Term.all':
                case 'Kind.Term.lam':
                case 'Kind.Term.app':
                case 'Kind.Term.let':
                case 'Kind.Term.def':
                case 'Kind.Term.ann':
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                case 'Kind.Term.ori':
                    var $7091 = _term$4;
                    var $7083 = $7091;
                    break;
            };
            return $7083;
        }));
        return $7082;
    };
    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);

    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7093 = self.name;
                var $7094 = self.indx;
                var $7095 = Kind$Term$var$($7093, $7094);
                var $7092 = $7095;
                break;
            case 'Kind.Term.ref':
                var $7096 = self.name;
                var self = Kind$Map$get$($7096, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $7098 = self.value;
                        var self = $7098;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7100 = self.term;
                                var $7101 = self.isct;
                                var $7102 = self.arit;
                                var self = ($7101 && (_arity$3 > $7102));
                                if (self) {
                                    var $7104 = $7100;
                                    var $7103 = $7104;
                                } else {
                                    var $7105 = Kind$Term$ref$($7096);
                                    var $7103 = $7105;
                                };
                                var $7099 = $7103;
                                break;
                        };
                        var $7097 = $7099;
                        break;
                    case 'Maybe.none':
                        var $7106 = Kind$Term$ref$($7096);
                        var $7097 = $7106;
                        break;
                };
                var $7092 = $7097;
                break;
            case 'Kind.Term.all':
                var $7107 = self.eras;
                var $7108 = self.self;
                var $7109 = self.name;
                var $7110 = self.xtyp;
                var $7111 = self.body;
                var $7112 = Kind$Term$all$($7107, $7108, $7109, Kind$Term$expand_ct$($7110, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $7113 = Kind$Term$expand_ct$($7111(_s$9)(_x$10), _defs$2, 0n);
                    return $7113;
                }));
                var $7092 = $7112;
                break;
            case 'Kind.Term.lam':
                var $7114 = self.name;
                var $7115 = self.body;
                var $7116 = Kind$Term$lam$($7114, (_x$6 => {
                    var $7117 = Kind$Term$expand_ct$($7115(_x$6), _defs$2, 0n);
                    return $7117;
                }));
                var $7092 = $7116;
                break;
            case 'Kind.Term.app':
                var $7118 = self.func;
                var $7119 = self.argm;
                var $7120 = Kind$Term$app$(Kind$Term$expand_ct$($7118, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($7119, _defs$2, 0n));
                var $7092 = $7120;
                break;
            case 'Kind.Term.let':
                var $7121 = self.name;
                var $7122 = self.expr;
                var $7123 = self.body;
                var $7124 = Kind$Term$let$($7121, Kind$Term$expand_ct$($7122, _defs$2, 0n), (_x$7 => {
                    var $7125 = Kind$Term$expand_ct$($7123(_x$7), _defs$2, 0n);
                    return $7125;
                }));
                var $7092 = $7124;
                break;
            case 'Kind.Term.def':
                var $7126 = self.name;
                var $7127 = self.expr;
                var $7128 = self.body;
                var $7129 = Kind$Term$def$($7126, Kind$Term$expand_ct$($7127, _defs$2, 0n), (_x$7 => {
                    var $7130 = Kind$Term$expand_ct$($7128(_x$7), _defs$2, 0n);
                    return $7130;
                }));
                var $7092 = $7129;
                break;
            case 'Kind.Term.ann':
                var $7131 = self.done;
                var $7132 = self.term;
                var $7133 = self.type;
                var $7134 = Kind$Term$ann$($7131, Kind$Term$expand_ct$($7132, _defs$2, 0n), Kind$Term$expand_ct$($7133, _defs$2, 0n));
                var $7092 = $7134;
                break;
            case 'Kind.Term.gol':
                var $7135 = self.name;
                var $7136 = self.dref;
                var $7137 = self.verb;
                var $7138 = Kind$Term$gol$($7135, $7136, $7137);
                var $7092 = $7138;
                break;
            case 'Kind.Term.hol':
                var $7139 = self.path;
                var $7140 = Kind$Term$hol$($7139);
                var $7092 = $7140;
                break;
            case 'Kind.Term.nat':
                var $7141 = self.natx;
                var $7142 = Kind$Term$nat$($7141);
                var $7092 = $7142;
                break;
            case 'Kind.Term.chr':
                var $7143 = self.chrx;
                var $7144 = Kind$Term$chr$($7143);
                var $7092 = $7144;
                break;
            case 'Kind.Term.str':
                var $7145 = self.strx;
                var $7146 = Kind$Term$str$($7145);
                var $7092 = $7146;
                break;
            case 'Kind.Term.ori':
                var $7147 = self.orig;
                var $7148 = self.expr;
                var $7149 = Kind$Term$ori$($7147, $7148);
                var $7092 = $7149;
                break;
            case 'Kind.Term.typ':
                var $7150 = Kind$Term$typ;
                var $7092 = $7150;
                break;
            case 'Kind.Term.cse':
                var $7151 = _term$1;
                var $7092 = $7151;
                break;
        };
        return $7092;
    };
    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);

    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);
        var _term$5 = (() => {
            var $7154 = _term$4;
            var $7155 = _dref$1;
            let _term$6 = $7154;
            let _path$5;
            while ($7155._ === 'List.cons') {
                _path$5 = $7155.head;
                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);
                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);
                var $7154 = _term$10;
                _term$6 = $7154;
                $7155 = $7155.tail;
            }
            return _term$6;
        })();
        var $7152 = _term$5;
        return $7152;
    };
    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);

    function Kind$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7157 = self.expected;
                var $7158 = self.detected;
                var $7159 = self.context;
                var self = $7157;
                switch (self._) {
                    case 'Either.left':
                        var $7161 = self.value;
                        var $7162 = $7161;
                        var _expected$7 = $7162;
                        break;
                    case 'Either.right':
                        var $7163 = self.value;
                        var $7164 = Kind$Term$show$(Kind$Term$normalize$($7163, Map$from_list$(List$nil)));
                        var _expected$7 = $7164;
                        break;
                };
                var self = $7158;
                switch (self._) {
                    case 'Either.left':
                        var $7165 = self.value;
                        var $7166 = $7165;
                        var _detected$8 = $7166;
                        break;
                    case 'Either.right':
                        var $7167 = self.value;
                        var $7168 = Kind$Term$show$(Kind$Term$normalize$($7167, Map$from_list$(List$nil)));
                        var _detected$8 = $7168;
                        break;
                };
                var $7160 = ("Type mismatch.\u{a}" + ("- Expected: " + (_expected$7 + ("\u{a}" + ("- Detected: " + (_detected$8 + ("\u{a}" + (() => {
                    var self = $7159;
                    switch (self._) {
                        case 'List.nil':
                            var $7169 = "";
                            return $7169;
                        case 'List.cons':
                            var $7170 = ("With context:\u{a}" + Kind$Context$show$($7159));
                            return $7170;
                    };
                })())))))));
                var $7156 = $7160;
                break;
            case 'Kind.Error.show_goal':
                var $7171 = self.name;
                var $7172 = self.dref;
                var $7173 = self.verb;
                var $7174 = self.goal;
                var $7175 = self.context;
                var _goal_name$8 = ("Goal ?" + (Kind$Name$show$($7171) + ":\u{a}"));
                var self = $7174;
                switch (self._) {
                    case 'Maybe.some':
                        var $7177 = self.value;
                        var _goal$10 = Kind$Term$expand$($7172, $7177, _defs$2);
                        var $7178 = ("With type: " + ((() => {
                            var self = $7173;
                            if (self) {
                                var $7179 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $7180 = _x$11;
                                    return $7180;
                                })));
                                return $7179;
                            } else {
                                var $7181 = Kind$Term$show$(_goal$10);
                                return $7181;
                            };
                        })() + "\u{a}"));
                        var _with_type$9 = $7178;
                        break;
                    case 'Maybe.none':
                        var $7182 = "";
                        var _with_type$9 = $7182;
                        break;
                };
                var self = $7175;
                switch (self._) {
                    case 'List.nil':
                        var $7183 = "";
                        var _with_ctxt$10 = $7183;
                        break;
                    case 'List.cons':
                        var $7184 = ("With context:\u{a}" + Kind$Context$show$($7175));
                        var _with_ctxt$10 = $7184;
                        break;
                };
                var $7176 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $7156 = $7176;
                break;
            case 'Kind.Error.waiting':
                var $7185 = self.name;
                var $7186 = ("Waiting for \'" + ($7185 + "\'."));
                var $7156 = $7186;
                break;
            case 'Kind.Error.indirect':
                var $7187 = self.name;
                var $7188 = ("Error on dependency \'" + ($7187 + "\'."));
                var $7156 = $7188;
                break;
            case 'Kind.Error.patch':
                var $7189 = self.term;
                var $7190 = ("Patching: " + Kind$Term$show$($7189));
                var $7156 = $7190;
                break;
            case 'Kind.Error.undefined_reference':
                var $7191 = self.name;
                var $7192 = ("Undefined reference: " + (Kind$Name$show$($7191) + "\u{a}"));
                var $7156 = $7192;
                break;
            case 'Kind.Error.cant_infer':
                var $7193 = self.term;
                var $7194 = self.context;
                var _term$6 = Kind$Term$show$($7193);
                var _context$7 = Kind$Context$show$($7194);
                var $7195 = ("Can\'t infer type of: " + (_term$6 + ("\u{a}" + ("With context:\u{a}" + _context$7))));
                var $7156 = $7195;
                break;
        };
        return $7156;
    };
    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);

    function Kind$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7197 = self.origin;
                var $7198 = $7197;
                var $7196 = $7198;
                break;
            case 'Kind.Error.undefined_reference':
                var $7199 = self.origin;
                var $7200 = $7199;
                var $7196 = $7200;
                break;
            case 'Kind.Error.cant_infer':
                var $7201 = self.origin;
                var $7202 = $7201;
                var $7196 = $7202;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
                var $7203 = Maybe$none;
                var $7196 = $7203;
                break;
        };
        return $7196;
    };
    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);

    function Kind$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $7206 = _errors$2;
            var $7207 = BitsMap$keys$(_defs$1);
            let _errors$4 = $7206;
            let _key$3;
            while ($7207._ === 'List.cons') {
                _key$3 = $7207.head;
                var _name$5 = Kind$Name$from_bits$(_key$3);
                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);
                var self = _defn$6;
                switch (self._) {
                    case 'Maybe.some':
                        var $7208 = self.value;
                        var self = $7208;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7210 = self.file;
                                var $7211 = self.code;
                                var $7212 = self.name;
                                var $7213 = self.stat;
                                var self = $7213;
                                switch (self._) {
                                    case 'Kind.Status.fail':
                                        var $7215 = self.errors;
                                        var self = $7215;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $7217 = _errors$4;
                                                var $7216 = $7217;
                                                break;
                                            case 'List.cons':
                                                var _name_str$20 = $7212;
                                                var _rel_errs$21 = Kind$Error$relevant$($7215);
                                                var _errors$22 = (() => {
                                                    var $7220 = _errors$4;
                                                    var $7221 = _rel_errs$21;
                                                    let _errors$23 = $7220;
                                                    let _err$22;
                                                    while ($7221._ === 'List.cons') {
                                                        _err$22 = $7221.head;
                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);
                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);
                                                        var self = _ori_val$25;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $7222 = self.value;
                                                                var self = $7222;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $7224 = self.fst;
                                                                        var $7225 = self.snd;
                                                                        var _inside$29 = ("Inside \'" + ($7210 + "\':\u{a}"));
                                                                        var _source$30 = Kind$Code$highlight$($7211, $7224, $7225);
                                                                        var $7226 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + ("\u{a}" + "\u{a}")))));
                                                                        var $7223 = $7226;
                                                                        break;
                                                                };
                                                                var $7220 = $7223;
                                                                break;
                                                            case 'Maybe.none':
                                                                var $7227 = (_errors$23 + (_err_msg$24 + "\u{a}"));
                                                                var $7220 = $7227;
                                                                break;
                                                        };
                                                        _errors$23 = $7220;
                                                        $7221 = $7221.tail;
                                                    }
                                                    return _errors$23;
                                                })();
                                                var $7218 = _errors$22;
                                                var $7216 = $7218;
                                                break;
                                        };
                                        var $7214 = $7216;
                                        break;
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $7228 = _errors$4;
                                        var $7214 = $7228;
                                        break;
                                };
                                var $7209 = $7214;
                                break;
                        };
                        var $7206 = $7209;
                        break;
                    case 'Maybe.none':
                        var $7229 = _errors$4;
                        var $7206 = $7229;
                        break;
                };
                _errors$4 = $7206;
                $7207 = $7207.tail;
            }
            return _errors$4;
        })();
        var $7204 = _errors$3;
        return $7204;
    };
    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);

    function Kind$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Kind$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $7231 = "All terms check.";
            var _errors$5 = $7231;
        } else {
            var $7232 = self.charCodeAt(0);
            var $7233 = self.slice(1);
            var $7234 = _errors$4;
            var _errors$5 = $7234;
        };
        var $7230 = (_types$3 + ("\u{a}" + _errors$5));
        return $7230;
    };
    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);

    function Kind$api$io$check_file$(_file$1) {
        var $7235 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7236 = _m$bind$2;
            return $7236;
        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $7238 = self.value;
                    var $7239 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $7240 = _m$bind$4;
                        return $7240;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $7241 = IO$print$($7238);
                        return $7241;
                    }));
                    var $7237 = $7239;
                    break;
                case 'Either.right':
                    var $7242 = self.value;
                    var self = $7242;
                    switch (self._) {
                        case 'Pair.new':
                            var $7244 = self.fst;
                            var $7245 = self.snd;
                            var _nams$6 = $7244;
                            var _defs$7 = $7245;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $7247 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $7246 = $7247;
                                    break;
                                case 'List.cons':
                                    var $7248 = IO$print$(Kind$Defs$report$(_defs$7, _nams$6));
                                    var $7246 = $7248;
                                    break;
                            };
                            var $7243 = $7246;
                            break;
                    };
                    var $7237 = $7243;
                    break;
            };
            return $7237;
        }));
        return $7235;
    };
    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);

    function Kind$Synth$files$go$(_files$1, _defs$2) {
        var self = _files$1;
        switch (self._) {
            case 'List.cons':
                var $7250 = self.head;
                var $7251 = self.tail;
                var $7252 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7253 = _m$bind$5;
                    return $7253;
                }))(Kind$Synth$file$($7250, _defs$2))((_file_synth$5 => {
                    var self = _file_synth$5;
                    switch (self._) {
                        case 'Either.right':
                            var $7255 = self.value;
                            var _nams$7 = Pair$fst$($7255);
                            var _defs$8 = Pair$snd$($7255);
                            var $7256 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $7257 = _m$bind$9;
                                return $7257;
                            }))(Kind$Synth$files$go$($7251, _defs$8))((_rest$9 => {
                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));
                                var _defs$11 = Pair$snd$(_rest$9);
                                var $7258 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                                    var $7259 = _m$pure$13;
                                    return $7259;
                                }))(Pair$new$(_nams$10, _defs$11));
                                return $7258;
                            }));
                            var $7254 = $7256;
                            break;
                        case 'Either.left':
                            var $7260 = Kind$Synth$files$go$($7251, _defs$2);
                            var $7254 = $7260;
                            break;
                    };
                    return $7254;
                }));
                var $7249 = $7252;
                break;
            case 'List.nil':
                var $7261 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7262 = _m$pure$4;
                    return $7262;
                }))(Pair$new$(List$nil, _defs$2));
                var $7249 = $7261;
                break;
        };
        return $7249;
    };
    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);

    function Kind$Synth$remove_duplicate_names$(_names$1) {
        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {
            var $7264 = Kind$Map$set(_name$2)(Unit$new);
            return $7264;
        }));
        var $7263 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);
        return $7263;
    };
    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);

    function Kind$Synth$files$(_files$1, _defs$2) {
        var $7265 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7266 = _m$bind$3;
            return $7266;
        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {
            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));
            var _defs$5 = Pair$snd$(_got$3);
            var $7267 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                var $7268 = _m$pure$7;
                return $7268;
            }))(Pair$new$(_nams$4, _defs$5));
            return $7267;
        }));
        return $7265;
    };
    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);

    function Kind$api$io$check_files$(_files$1) {
        var $7269 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7270 = _m$bind$2;
            return $7270;
        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {
            var _nams$3 = Pair$fst$(_loaded$2);
            var _defs$4 = Pair$snd$(_loaded$2);
            var self = _nams$3;
            switch (self._) {
                case 'List.nil':
                    var $7272 = IO$print$("No valid Kind file found.");
                    var $7271 = $7272;
                    break;
                case 'List.cons':
                    var $7273 = IO$print$(Kind$Defs$report$(_defs$4, _nams$3));
                    var $7271 = $7273;
                    break;
            };
            return $7271;
        }));
        return $7269;
    };
    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);

    function Kind$api$io$check_term$(_name$1) {
        var $7274 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7275 = _m$bind$2;
            return $7275;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7277 = self.value;
                    var $7278 = IO$print$(Kind$Defs$report$($7277, List$cons$(_name$1, List$nil)));
                    var $7276 = $7278;
                    break;
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                        var $7280 = ("\'" + (_x$4 + "\'"));
                        return $7280;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $7279 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $7276 = $7279;
                    break;
            };
            return $7276;
        }));
        return $7274;
    };
    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);

    function Kind$api$io$show_term$(_name$1) {
        var $7281 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7282 = _m$bind$2;
            return $7282;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $7283 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7284 = self.value;
                        var _defs$4 = $7284;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7286 = self.value;
                                var self = $7286;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $7288 = self.term;
                                        var _term$16 = $7288;
                                        var $7289 = Kind$Term$show$(_term$16);
                                        var $7287 = $7289;
                                        break;
                                };
                                var $7285 = $7287;
                                break;
                            case 'Maybe.none':
                                var $7290 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $7285 = $7290;
                                break;
                        };
                        return $7285;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $7292 = ("\'" + (_x$4 + "\'"));
                            return $7292;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $7291 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $7291;
                };
            })());
            return $7283;
        }));
        return $7281;
    };
    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);

    function Kind$api$io$show_term_normal$(_name$1) {
        var $7293 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7294 = _m$bind$2;
            return $7294;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $7295 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7296 = self.value;
                        var _defs$4 = $7296;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7298 = self.value;
                                var self = $7298;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $7300 = self.term;
                                        var _term$16 = $7300;
                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);
                                        var $7301 = Kind$Term$show$(_norm$17);
                                        var $7299 = $7301;
                                        break;
                                };
                                var $7297 = $7299;
                                break;
                            case 'Maybe.none':
                                var $7302 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $7297 = $7302;
                                break;
                        };
                        return $7297;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $7304 = ("\'" + (_x$4 + "\'"));
                            return $7304;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $7303 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $7303;
                };
            })());
            return $7295;
        }));
        return $7293;
    };
    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $7305 = self.value;
                        var $7306 = $7305;
                        return $7306;
                    case 'IO.ask':
                        var $7307 = self.then;
                        var $7308 = IO$purify$($7307(""));
                        return $7308;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Kind$api$check_code$(_code$1) {
        var self = Kind$Defs$read$("Main.kind", _code$1, Kind$Map$new);
        switch (self._) {
            case 'Either.left':
                var $7310 = self.value;
                var $7311 = $7310;
                var $7309 = $7311;
                break;
            case 'Either.right':
                var $7312 = self.value;
                var $7313 = IO$purify$((() => {
                    var _defs$3 = $7312;
                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);
                    var $7314 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $7315 = _m$bind$5;
                        return $7315;
                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $7316 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $7317 = _m$pure$7;
                            return $7317;
                        }))(Kind$Defs$report$(_defs$5, _nams$4));
                        return $7316;
                    }));
                    return $7314;
                })());
                var $7309 = $7313;
                break;
        };
        return $7309;
    };
    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);

    function Kind$Term$read$(_code$1) {
        var self = Kind$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.value':
                var $7319 = self.val;
                var $7320 = Maybe$some$($7319);
                var $7318 = $7320;
                break;
            case 'Parser.Reply.error':
                var $7321 = Maybe$none;
                var $7318 = $7321;
                break;
        };
        return $7318;
    };
    const Kind$Term$read = x0 => Kind$Term$read$(x0);
    const Kind$api$export = (() => {
        var _e$1 = Kind$api$io$term_to_core;
        var _e$2 = Kind$api$io$check_file;
        var _e$3 = Kind$api$io$check_files;
        var _e$4 = Kind$api$io$check_term;
        var _e$5 = Kind$api$io$show_term;
        var _e$6 = Kind$api$io$show_term_normal;
        var _e$7 = Kind$api$check_code;
        var _e$8 = Kind$Term$read;
        var $7322 = IO$monad$((_m$bind$9 => _m$pure$10 => {
            var $7323 = _m$pure$10;
            return $7323;
        }))(Unit$new);
        return $7322;
    })();
    return {
        '$main$': () => run(Kind$api$export),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'BitsMap': BitsMap,
        'Maybe.none': Maybe$none,
        'BitsMap.get': BitsMap$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'U16.inc': U16$inc,
        'Word.zero': Word$zero,
        'U16.zero': U16$zero,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Kind.Name.to_bits': Kind$Name$to_bits,
        'Kind.Map.get': Kind$Map$get,
        'IO.get_file': IO$get_file,
        'Parser.Reply': Parser$Reply,
        'Parser.Reply.value': Parser$Reply$value,
        'Parser.is_eof': Parser$is_eof,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser': Parser,
        'Maybe.some': Maybe$some,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'List.cons': List$cons,
        'List': List,
        'List.nil': List$nil,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Unit.new': Unit$new,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'String.nil': String$nil,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Kind.Parser.spaces': Kind$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Kind.Parser.init': Kind$Parser$init,
        'Parser.many1': Parser$many1,
        'Kind.Name.is_letter': Kind$Name$is_letter,
        'Kind.Parser.letter': Kind$Parser$letter,
        'List.fold': List$fold,
        'Kind.Parser.name1': Kind$Parser$name1,
        'Kind.Parser.text': Kind$Parser$text,
        'Parser.until1': Parser$until1,
        'Pair': Pair,
        'Parser.maybe': Parser$maybe,
        'Kind.Parser.item': Kind$Parser$item,
        'Kind.Parser.name': Kind$Parser$name,
        'Kind.Term.all': Kind$Term$all,
        'Pair.new': Pair$new,
        'Kind.Parser.stop': Kind$Parser$stop,
        'Kind.Term.ori': Kind$Term$ori,
        'Kind.Parser.forall': Kind$Parser$forall,
        'Kind.Term.lam': Kind$Term$lam,
        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
        'Kind.Parser.lambda': Kind$Parser$lambda,
        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
        'Kind.Term.ref': Kind$Term$ref,
        'Kind.Term.app': Kind$Term$app,
        'Kind.Term.hol': Kind$Term$hol,
        'Kind.Term.let': Kind$Term$let,
        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
        'Kind.Parser.letforin': Kind$Parser$letforin,
        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
        'Kind.Parser.letwhile': Kind$Parser$letwhile,
        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
        'Kind.Parser.let': Kind$Parser$let,
        'Kind.Parser.let.omit': Kind$Parser$let$omit,
        'Kind.Parser.getwhile': Kind$Parser$getwhile,
        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
        'Kind.Parser.get': Kind$Parser$get,
        'Kind.Parser.get.omit': Kind$Parser$get$omit,
        'Kind.Term.def': Kind$Term$def,
        'Kind.Parser.def': Kind$Parser$def,
        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
        'Kind.Parser.if': Kind$Parser$if,
        'List.mapped': List$mapped,
        'Kind.Code.backslash': Kind$Code$backslash,
        'Kind.Code.escapes': Kind$Code$escapes,
        'Kind.Parser.char.single': Kind$Parser$char$single,
        'Kind.Term.chr': Kind$Term$chr,
        'Kind.Parser.char': Kind$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Kind.Parser.string.go': Kind$Parser$string$go,
        'Kind.Term.str': Kind$Term$str,
        'Kind.Parser.string': Kind$Parser$string,
        'Kind.Parser.pair': Kind$Parser$pair,
        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
        'Kind.Parser.some': Kind$Parser$some,
        'Kind.Parser.not': Kind$Parser$not,
        'Kind.Parser.left': Kind$Parser$left,
        'Kind.Parser.right': Kind$Parser$right,
        'Kind.Parser.apply': Kind$Parser$apply,
        'Kind.Parser.chain': Kind$Parser$chain,
        'Kind.Parser.mirror': Kind$Parser$mirror,
        'Kind.Name.read': Kind$Name$read,
        'Kind.Parser.list': Kind$Parser$list,
        'Kind.Parser.map': Kind$Parser$map,
        'Kind.Parser.log': Kind$Parser$log,
        'Kind.Parser.do.statements': Kind$Parser$do$statements,
        'Kind.Parser.do': Kind$Parser$do,
        'Parser.try': Parser$try,
        'Parser.fail': Parser$fail,
        'Parser.avoiding': Parser$avoiding,
        'Maybe.default': Maybe$default,
        'Kind.Term.nat': Kind$Term$nat,
        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
        'Kind.Term.unroll_str': Kind$Term$unroll_str,
        'Kind.Term.reduce': Kind$Term$reduce,
        'BitsMap.new': BitsMap$new,
        'Kind.Map.new': Kind$Map$new,
        'Kind.Term.extract_name': Kind$Term$extract_name,
        'Kind.Ann.new': Kind$Ann$new,
        'Kind.Parser.case.with': Kind$Parser$case$with,
        'Kind.Parser.case.case': Kind$Parser$case$case,
        'Debug.log': Debug$log,
        'Pair.snd': Pair$snd,
        'Kind.Map': Kind$Map,
        'BitsMap.tie': BitsMap$tie,
        'BitsMap.set': BitsMap$set,
        'Kind.Map.set': Kind$Map$set,
        'Kind.Parser.case.group': Kind$Parser$case$group,
        'Pair.fst': Pair$fst,
        'BitsMap.map': BitsMap$map,
        'Kind.Map.map': Kind$Map$map,
        'Kind.Term.cse': Kind$Term$cse,
        'Kind.Parser.case.build': Kind$Parser$case$build,
        'Kind.Parser.case': Kind$Parser$case,
        'Kind.Parser.open': Kind$Parser$open,
        'Kind.Parser.without': Kind$Parser$without,
        'Kind.Parser.switch.case': Kind$Parser$switch$case,
        'Kind.Parser.switch': Kind$Parser$switch,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.is_some': Maybe$is_some,
        'Kind.Term.gol': Kind$Term$gol,
        'Kind.Parser.goal': Kind$Parser$goal,
        'Kind.Parser.hole': Kind$Parser$hole,
        'Kind.Parser.u8': Kind$Parser$u8,
        'Kind.Parser.u16': Kind$Parser$u16,
        'Kind.Parser.u32': Kind$Parser$u32,
        'Kind.Parser.u64': Kind$Parser$u64,
        'Kind.Parser.nat': Kind$Parser$nat,
        'String.eql': String$eql,
        'Kind.Term.typ': Kind$Term$typ,
        'Kind.Parser.reference': Kind$Parser$reference,
        'List.for': List$for,
        'Kind.Parser.application': Kind$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Kind.Parser.application.erased': Kind$Parser$application$erased,
        'Kind.Parser.list_set': Kind$Parser$list_set,
        'Kind.Parser.list_get': Kind$Parser$list_get,
        'Kind.Parser.map_set': Kind$Parser$map_set,
        'Kind.Parser.map_get': Kind$Parser$map_get,
        'Kind.Parser.arrow': Kind$Parser$arrow,
        'Kind.Parser.op': Kind$Parser$op,
        'Kind.Parser.add': Kind$Parser$add,
        'Kind.Parser.sub': Kind$Parser$sub,
        'Kind.Parser.mul': Kind$Parser$mul,
        'Kind.Parser.div': Kind$Parser$div,
        'Kind.Parser.mod': Kind$Parser$mod,
        'Kind.Parser.ltn': Kind$Parser$ltn,
        'Kind.Parser.lte': Kind$Parser$lte,
        'Kind.Parser.eql': Kind$Parser$eql,
        'Kind.Parser.gte': Kind$Parser$gte,
        'Kind.Parser.gtn': Kind$Parser$gtn,
        'Kind.Parser.and': Kind$Parser$and,
        'Kind.Parser.or': Kind$Parser$or,
        'Kind.Parser.default': Kind$Parser$default,
        'Kind.Parser.cons': Kind$Parser$cons,
        'Kind.Parser.concat': Kind$Parser$concat,
        'Kind.Parser.string_concat': Kind$Parser$string_concat,
        'Kind.Parser.sigma': Kind$Parser$sigma,
        'Kind.Parser.equality': Kind$Parser$equality,
        'Kind.Parser.inequality': Kind$Parser$inequality,
        'Kind.Parser.rewrite': Kind$Parser$rewrite,
        'Kind.Term.ann': Kind$Term$ann,
        'Kind.Parser.annotation': Kind$Parser$annotation,
        'Kind.Parser.application.hole': Kind$Parser$application$hole,
        'Kind.Parser.suffix': Kind$Parser$suffix,
        'Kind.Parser.term': Kind$Parser$term,
        'Kind.Parser.name_term': Kind$Parser$name_term,
        'Kind.Binder.new': Kind$Binder$new,
        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Kind.Parser.binder': Kind$Parser$binder,
        'List.length': List$length,
        'Kind.Parser.make_forall': Kind$Parser$make_forall,
        'List.at': List$at,
        'List.at_last': List$at_last,
        'Kind.Term.var': Kind$Term$var,
        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
        'Kind.Name.eql': Kind$Name$eql,
        'Kind.Context.find.go': Kind$Context$find$go,
        'Kind.Context.find': Kind$Context$find,
        'Kind.Path.o': Kind$Path$o,
        'Kind.Path.i': Kind$Path$i,
        'Kind.Path.to_bits': Kind$Path$to_bits,
        'Kind.Term.bind': Kind$Term$bind,
        'Kind.Status.done': Kind$Status$done,
        'Kind.Status.init': Kind$Status$init,
        'Kind.Def.new': Kind$Def$new,
        'Kind.Map.def': Kind$Map$def,
        'Kind.Parser.file.def': Kind$Parser$file$def,
        'Kind.Constructor.new': Kind$Constructor$new,
        'Kind.Parser.constructor': Kind$Parser$constructor,
        'Kind.Datatype.new': Kind$Datatype$new,
        'Kind.Parser.datatype': Kind$Parser$datatype,
        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
        'Kind.Datatype.build_term': Kind$Datatype$build_term,
        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
        'Kind.Datatype.build_type': Kind$Datatype$build_type,
        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
        'Kind.Constructor.build_term': Kind$Constructor$build_term,
        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
        'Kind.Constructor.build_type': Kind$Constructor$build_type,
        'Kind.Parser.file.adt': Kind$Parser$file$adt,
        'Parser.eof': Parser$eof,
        'Kind.Parser.file.end': Kind$Parser$file$end,
        'Kind.Parser.file': Kind$Parser$file,
        'Either': Either,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Kind.Code.highlight.end': Kind$Code$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'Nat.pred': Nat$pred,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Bool.not': Bool$not,
        'Kind.Code.color': Kind$Code$color,
        'Nat.eql': Nat$eql,
        'List.take': List$take,
        'Kind.Code.highlight.go': Kind$Code$highlight$go,
        'Kind.Code.highlight': Kind$Code$highlight,
        'Kind.Defs.read': Kind$Defs$read,
        'Kind.Synth.load.go': Kind$Synth$load$go,
        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
        'Char.eql': Char$eql,
        'String.starts_with': String$starts_with,
        'String.drop': String$drop,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Kind.Synth.files_of': Kind$Synth$files_of,
        'Kind.Synth.load': Kind$Synth$load,
        'Kind.Status.wait': Kind$Status$wait,
        'Kind.Check': Kind$Check,
        'Kind.Check.result': Kind$Check$result,
        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
        'Kind.Error.waiting': Kind$Error$waiting,
        'Kind.Error.indirect': Kind$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Kind.MPath.o': Kind$MPath$o,
        'Kind.MPath.i': Kind$MPath$i,
        'Kind.Error.patch': Kind$Error$patch,
        'Kind.MPath.to_bits': Kind$MPath$to_bits,
        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
        'Kind.Error.show_goal': Kind$Error$show_goal,
        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,
        'Kind.Term.normalize': Kind$Term$normalize,
        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,
        'List.tail': List$tail,
        'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,
        'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,
        'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,
        'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Kind.Term.serialize.go': Kind$Term$serialize$go,
        'Kind.Term.serialize': Kind$Term$serialize,
        'Bits.eql': Bits$eql,
        'Kind.Term.identical': Kind$Term$identical,
        'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,
        'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,
        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
        'String.is_empty': String$is_empty,
        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
        'Kind.Error.cant_infer': Kind$Error$cant_infer,
        'BitsSet.has': BitsSet$has,
        'BitsSet.mut.has': BitsSet$mut$has,
        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
        'Bool.or': Bool$or,
        'Kind.Term.has_holes': Kind$Term$has_holes,
        'Kind.Term.equal.hole': Kind$Term$equal$hole,
        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
        'BitsSet.set': BitsSet$set,
        'BitsSet.mut.set': BitsSet$mut$set,
        'Bool.eql': Bool$eql,
        'Kind.Term.equal': Kind$Term$equal,
        'BitsSet.new': BitsSet$new,
        'BitsSet.mut.new': BitsSet$mut$new,
        'Kind.Term.check': Kind$Term$check,
        'Kind.Path.nil': Kind$Path$nil,
        'Kind.MPath.nil': Kind$MPath$nil,
        'List.is_empty': List$is_empty,
        'Kind.Term.patch_at': Kind$Term$patch_at,
        'Kind.Synth.fix': Kind$Synth$fix,
        'Kind.Status.fail': Kind$Status$fail,
        'Kind.Synth.one': Kind$Synth$one,
        'BitsMap.from_list': BitsMap$from_list,
        'Kind.Term.inline.names': Kind$Term$inline$names,
        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
        'Kind.Term.inline': Kind$Term$inline,
        'BitsMap.values.go': BitsMap$values$go,
        'BitsMap.values': BitsMap$values,
        'Kind.Core.var_name': Kind$Core$var_name,
        'Kind.Name.show': Kind$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Kind.Code.escape.char': Kind$Code$escape$char,
        'Kind.Code.escape.go': Kind$Code$escape$go,
        'Kind.Code.escape': Kind$Code$escape,
        'Kind.Core.show': Kind$Core$show,
        'Kind.Defs.core': Kind$Defs$core,
        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,
        'BitsMap.keys.go': BitsMap$keys$go,
        'BitsMap.keys': BitsMap$keys,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'Word.from_bits': Word$from_bits,
        'Kind.Name.from_bits': Kind$Name$from_bits,
        'Kind.Synth.many': Kind$Synth$many,
        'Kind.Synth.file': Kind$Synth$file,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
        'Kind.Term.show.app.done': Kind$Term$show$app$done,
        'Kind.Term.show.app': Kind$Term$show$app,
        'BitsMap.to_list.go': BitsMap$to_list$go,
        'BitsMap.to_list': BitsMap$to_list,
        'Kind.Term.show.go': Kind$Term$show$go,
        'Kind.Term.show': Kind$Term$show,
        'Kind.Defs.report.types': Kind$Defs$report$types,
        'List.filter': List$filter,
        'Kind.Error.is_undef': Kind$Error$is_undef,
        'Kind.Error.is_mistake': Kind$Error$is_mistake,
        'Kind.Error.is_goal': Kind$Error$is_goal,
        'Kind.Error.relevant': Kind$Error$relevant,
        'Map': Map,
        'String.to_bits': String$to_bits,
        'Map.from_list': Map$from_list,
        'Kind.Context.show': Kind$Context$show,
        'Kind.Term.expand_at': Kind$Term$expand_at,
        'Kind.Term.expand_ct': Kind$Term$expand_ct,
        'Kind.Term.expand': Kind$Term$expand,
        'Kind.Error.show': Kind$Error$show,
        'Kind.Error.origin': Kind$Error$origin,
        'Kind.Defs.report.errors': Kind$Defs$report$errors,
        'Kind.Defs.report': Kind$Defs$report,
        'Kind.api.io.check_file': Kind$api$io$check_file,
        'Kind.Synth.files.go': Kind$Synth$files$go,
        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,
        'Kind.Synth.files': Kind$Synth$files,
        'Kind.api.io.check_files': Kind$api$io$check_files,
        'Kind.api.io.check_term': Kind$api$io$check_term,
        'Kind.api.io.show_term': Kind$api$io$show_term,
        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,
        'IO.purify': IO$purify,
        'Kind.api.check_code': Kind$api$check_code,
        'Kind.Term.read': Kind$Term$read,
        'Kind.api.export': Kind$api$export,
    };
})();