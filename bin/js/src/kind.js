module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var bitsmap_new = {
        _: 'BitsMap.new'
    };
    var bitsmap_tie = function(val, lft, rgt) {
        return {
            _: 'BitsMap.tip',
            val,
            lft,
            rgt
        };
    }
    var maybe_none = {
        _: 'Maybe.none'
    };
    var maybe_some = function(value) {
        return {
            _: 'Maybe.some',
            value
        };
    }
    var bitsmap_get = function(bits, map) {
        for (var i = bits.length - 1; i >= 0; --i) {
            if (map._ !== 'BitsMap.new') {
                map = bits[i] === '0' ? map.lft : map.rgt;
            }
        }
        return map._ === 'BitsMap.new' ? maybe_none : map.val;
    }
    var bitsmap_set = function(bits, val, map, mode) {
        var res = {
            value: map
        };
        var key = 'value';
        var obj = res;
        for (var i = bits.length - 1; i >= 0; --i) {
            var map = obj[key];
            if (map._ === 'BitsMap.new') {
                obj[key] = {
                    _: 'BitsMap.tie',
                    val: maybe_none,
                    lft: bitsmap_new,
                    rgt: bitsmap_new
                };
            } else {
                obj[key] = {
                    _: 'BitsMap.tie',
                    val: map.val,
                    lft: map.lft,
                    rgt: map.rgt
                };
            }
            obj = obj[key];
            key = bits[i] === '0' ? 'lft' : 'rgt';
        }
        var map = obj[key];
        if (map._ === 'BitsMap.new') {
            var x = mode === 'del' ? maybe_none : {
                _: 'Maybe.some',
                value: val
            };
            obj[key] = {
                _: 'BitsMap.tie',
                val: x,
                lft: bitsmap_new,
                rgt: bitsmap_new
            };
        } else {
            var x = mode === 'set' ? {
                _: 'Maybe.some',
                value: val
            } : mode === 'del' ? maybe_none : map.val;
            obj[key] = {
                _: 'BitsMap.tie',
                val: x,
                lft: map.lft,
                rgt: map.rgt
            };
        }
        return res.value;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var kind_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(null);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c0;
                return $2;
            } else {
                var $3 = c1;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c0;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c1($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $9 = self.slice(0, -1);
                    var $10 = c1($9);
                    return $10;
                case 'i':
                    var $11 = self.slice(0, -1);
                    var $12 = c2($11);
                    return $12;
                case 'e':
                    var $13 = c0;
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c0;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c1($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
            var ht = eval("require('http')");
            var hs = eval("require('https')");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
            var ht = null;
            var hs = null;
        };
        return run_io({
            rl,
            fs,
            pc,
            ht,
            hs
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var get_file_mtime = (lib, param) => {
        return String(lib.fs.statSync(param).mtime.getTime());
    };
    var request = (lib, param) => {
        if (typeof fetch === 'undefined') {
            return new Promise((res, err) => {
                (/^https/.test(param) ? lib.hs : lib.ht).get(param, r => {
                    let data = '';
                    r.on('data', chunk => {
                        data += chunk;
                    });
                    r.on('end', () => res(data));
                }).on('error', e => res(''));
            });
        } else {
            return fetch(param).then(res => res.text()).catch(e => '');
        }
    }
    var file_error = e => {
        if (e.message.indexOf('NOENT') !== -1) {
            return '';
        } else {
            throw e;
        }
    };
    var io_action = {
        print: async (lib, param) => {
            console.log(param);
            return '';
        },
        put_string: async (lib, param) => {
            process.stdout.write(param);
            return '';
        },
        get_file: async (lib, param) => {
            try {
                return get_file(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        set_file: async (lib, param) => {
            try {
                return set_file(lib, param)
            } catch (e) {
                return file_error(e);
            }
        },
        del_file: async (lib, param) => {
            try {
                return del_file(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        get_dir: async (lib, param) => {
            try {
                return get_dir(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        get_file_mtime: async (lib, param) => {
            try {
                return get_file_mtime(lib, param);
            } catch (e) {
                return file_error(e);
            }
        },
        get_time: async (lib, param) => {
            return String(Date.now());
        },
        exit: async (lib, param) => {
            lib.pc.exit();
            return '';
        },
        request: async (lib, param) => {
            return request(lib, param);
        },
        get_time: async (lib, param) => {
            return String(Date.now());
        },
        get_line: async (lib, param) => {
            return await new Promise((res, err) => {
                lib.rl.question(p.param, (line) => res(line));
            });
        },
        get_args: async (lib, param) => {
            return lib.pc.argv[2] || '';
        },
    };
    var run_io = async (lib, io, depth = 0) => {
        switch (io._) {
            case 'IO.end':
                return Promise.resolve(io.value);
            case 'IO.ask':
                var action = io_action[io.query];
                var answer = await action(lib, io.param);
                return await run_io(lib, io.then(answer), depth + 1);
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function BitsMap$(_A$1) {
        var $36 = null;
        return $36;
    };
    const BitsMap = x0 => BitsMap$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });
    const BitsMap$get = a0 => a1 => (bitsmap_get(a0, a1));
    const Bits$e = '';
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');
    const Bool$true = true;
    const Bool$false = false;

    function Cmp$as_ltn$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $38 = Bool$true;
                var $37 = $38;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $39 = Bool$false;
                var $37 = $39;
                break;
        };
        return $37;
    };
    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $41 = self.pred;
                var $42 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $44 = self.pred;
                            var $45 = (_a$pred$10 => {
                                var $46 = Word$cmp$go$(_a$pred$10, $44, _c$4);
                                return $46;
                            });
                            var $43 = $45;
                            break;
                        case 'Word.i':
                            var $47 = self.pred;
                            var $48 = (_a$pred$10 => {
                                var $49 = Word$cmp$go$(_a$pred$10, $47, Cmp$ltn);
                                return $49;
                            });
                            var $43 = $48;
                            break;
                        case 'Word.e':
                            var $50 = (_a$pred$8 => {
                                var $51 = _c$4;
                                return $51;
                            });
                            var $43 = $50;
                            break;
                    };
                    var $43 = $43($41);
                    return $43;
                });
                var $40 = $42;
                break;
            case 'Word.i':
                var $52 = self.pred;
                var $53 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $55 = self.pred;
                            var $56 = (_a$pred$10 => {
                                var $57 = Word$cmp$go$(_a$pred$10, $55, Cmp$gtn);
                                return $57;
                            });
                            var $54 = $56;
                            break;
                        case 'Word.i':
                            var $58 = self.pred;
                            var $59 = (_a$pred$10 => {
                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);
                                return $60;
                            });
                            var $54 = $59;
                            break;
                        case 'Word.e':
                            var $61 = (_a$pred$8 => {
                                var $62 = _c$4;
                                return $62;
                            });
                            var $54 = $61;
                            break;
                    };
                    var $54 = $54($52);
                    return $54;
                });
                var $40 = $53;
                break;
            case 'Word.e':
                var $63 = (_b$5 => {
                    var $64 = _c$4;
                    return $64;
                });
                var $40 = $63;
                break;
        };
        var $40 = $40(_b$3);
        return $40;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $65 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $65;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$ltn$(_a$2, _b$3) {
        var $66 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));
        return $66;
    };
    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $67 = 1n + _pred$1;
        return $67;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$ltn = a0 => a1 => (a0 < a1);

    function U16$new$(_value$1) {
        var $68 = word_to_u16(_value$1);
        return $68;
    };
    const U16$new = x0 => U16$new$(x0);

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $69 = _x$4;
                    return $69;
                } else {
                    var $70 = (self - 1n);
                    var $71 = Nat$apply$($70, _f$3, _f$3(_x$4));
                    return $71;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$(_size$1) {
        var $72 = null;
        return $72;
    };
    const Word = x0 => Word$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$i$(_pred$2) {
        var $73 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $73;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $74 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $74;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $76 = self.pred;
                var $77 = Word$i$($76);
                var $75 = $77;
                break;
            case 'Word.i':
                var $78 = self.pred;
                var $79 = Word$o$(Word$inc$($78));
                var $75 = $79;
                break;
            case 'Word.e':
                var $80 = Word$e;
                var $75 = $80;
                break;
        };
        return $75;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $82 = Word$e;
            var $81 = $82;
        } else {
            var $83 = (self - 1n);
            var $84 = Word$o$(Word$zero$($83));
            var $81 = $84;
        };
        return $81;
    };
    const Word$zero = x0 => Word$zero$(x0);

    function Nat$to_word$(_size$1, _n$2) {
        var $85 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));
        return $85;
    };
    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);
    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);
    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));

    function Kind$Map$get$(_name$2, _map$3) {
        var $86 = (bitsmap_get((kind_name_to_bits(_name$2)), _map$3));
        return $86;
    };
    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);

    function Parser$Reply$(_V$1) {
        var $87 = null;
        return $87;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function List$(_A$1) {
        var $88 = null;
        return $88;
    };
    const List = x0 => List$(x0);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $89 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $89;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $90 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $90;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);
    const List$nil = ({
        _: 'List.nil'
    });

    function List$cons$(_head$2, _tail$3) {
        var $91 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $91;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $92 = self.idx;
                        var $93 = self.code;
                        var $94 = self.val;
                        var $95 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $96 = _values$3(List$cons$($94, _xs$9));
                            return $96;
                        }), $92, $93);
                        return $95;
                    case 'Parser.Reply.error':
                        var $97 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $97;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $98 = Parser$many$go(_parser$2)((_x$3 => {
            var $99 = _x$3;
            return $99;
        }));
        return $98;
    };
    const Parser$many = x0 => Parser$many$(x0);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $101 = self.idx;
                var $102 = self.code;
                var $103 = self.err;
                var $104 = Parser$Reply$error$($101, $102, $103);
                var $100 = $104;
                break;
            case 'Parser.Reply.value':
                var $105 = self.idx;
                var $106 = self.code;
                var $107 = self.val;
                var self = Parser$many$(_parser$2)($105)($106);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $109 = self.idx;
                        var $110 = self.code;
                        var $111 = self.err;
                        var $112 = Parser$Reply$error$($109, $110, $111);
                        var $108 = $112;
                        break;
                    case 'Parser.Reply.value':
                        var $113 = self.idx;
                        var $114 = self.code;
                        var $115 = self.val;
                        var $116 = Parser$Reply$value$($113, $114, List$cons$($107, $115));
                        var $108 = $116;
                        break;
                };
                var $100 = $108;
                break;
        };
        return $100;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.gtn':
                var $118 = Bool$false;
                var $117 = $118;
                break;
            case 'Cmp.eql':
                var $119 = Bool$true;
                var $117 = $119;
                break;
        };
        return $117;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $120 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $120;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $122 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $121 = $122;
        } else {
            var $123 = self.charCodeAt(0);
            var $124 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($123 === 48);
            if (self) {
                var $126 = Parser$Reply$value$(_sidx$5, $124, 0n);
                var $125 = $126;
            } else {
                var self = ($123 === 49);
                if (self) {
                    var $128 = Parser$Reply$value$(_sidx$5, $124, 1n);
                    var $127 = $128;
                } else {
                    var self = ($123 === 50);
                    if (self) {
                        var $130 = Parser$Reply$value$(_sidx$5, $124, 2n);
                        var $129 = $130;
                    } else {
                        var self = ($123 === 51);
                        if (self) {
                            var $132 = Parser$Reply$value$(_sidx$5, $124, 3n);
                            var $131 = $132;
                        } else {
                            var self = ($123 === 52);
                            if (self) {
                                var $134 = Parser$Reply$value$(_sidx$5, $124, 4n);
                                var $133 = $134;
                            } else {
                                var self = ($123 === 53);
                                if (self) {
                                    var $136 = Parser$Reply$value$(_sidx$5, $124, 5n);
                                    var $135 = $136;
                                } else {
                                    var self = ($123 === 54);
                                    if (self) {
                                        var $138 = Parser$Reply$value$(_sidx$5, $124, 6n);
                                        var $137 = $138;
                                    } else {
                                        var self = ($123 === 55);
                                        if (self) {
                                            var $140 = Parser$Reply$value$(_sidx$5, $124, 7n);
                                            var $139 = $140;
                                        } else {
                                            var self = ($123 === 56);
                                            if (self) {
                                                var $142 = Parser$Reply$value$(_sidx$5, $124, 8n);
                                                var $141 = $142;
                                            } else {
                                                var self = ($123 === 57);
                                                if (self) {
                                                    var $144 = Parser$Reply$value$(_sidx$5, $124, 9n);
                                                    var $143 = $144;
                                                } else {
                                                    var $145 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $143 = $145;
                                                };
                                                var $141 = $143;
                                            };
                                            var $139 = $141;
                                        };
                                        var $137 = $139;
                                    };
                                    var $135 = $137;
                                };
                                var $133 = $135;
                            };
                            var $131 = $133;
                        };
                        var $129 = $131;
                    };
                    var $127 = $129;
                };
                var $125 = $127;
            };
            var $121 = $125;
        };
        return $121;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.cons':
                        var $146 = self.head;
                        var $147 = self.tail;
                        var $148 = Nat$from_base$go$(_b$1, $147, (_b$1 * _p$3), (($146 * _p$3) + _res$4));
                        return $148;
                    case 'List.nil':
                        var $149 = _res$4;
                        return $149;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.cons':
                        var $150 = self.head;
                        var $151 = self.tail;
                        var $152 = List$reverse$go$($151, List$cons$($150, _res$3));
                        return $152;
                    case 'List.nil':
                        var $153 = _res$3;
                        return $153;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $154 = List$reverse$go$(_xs$2, List$nil);
        return $154;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Nat$from_base$(_base$1, _ds$2) {
        var $155 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $155;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $157 = self.idx;
                var $158 = self.code;
                var $159 = self.err;
                var $160 = Parser$Reply$error$($157, $158, $159);
                var $156 = $160;
                break;
            case 'Parser.Reply.value':
                var $161 = self.idx;
                var $162 = self.code;
                var $163 = self.val;
                var $164 = Parser$Reply$value$($161, $162, Nat$from_base$(10n, $163));
                var $156 = $164;
                break;
        };
        return $156;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Nat$read$(_str$1) {
        var _p$2 = Parser$nat$(0n, _str$1);
        var self = _p$2;
        switch (self._) {
            case 'Parser.Reply.value':
                var $166 = self.val;
                var $167 = $166;
                var $165 = $167;
                break;
            case 'Parser.Reply.error':
                var $168 = 0n;
                var $165 = $168;
                break;
        };
        return $165;
    };
    const Nat$read = x0 => Nat$read$(x0);
    const IO$get_time = IO$ask$("get_time", "", (_time$1 => {
        var $169 = IO$end$(Nat$read$(_time$1));
        return $169;
    }));

    function Maybe$some$(_value$2) {
        var $170 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $170;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Kind$Synth$load$cached$is_loop$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $172 = self.value;
                var self = $172;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $174 = self.stat;
                        var self = $174;
                        switch (self._) {
                            case 'Kind.Status.done':
                                var $176 = self.cached;
                                var $177 = $176;
                                var $175 = $177;
                                break;
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $178 = Bool$false;
                                var $175 = $178;
                                break;
                        };
                        var $173 = $175;
                        break;
                };
                var $171 = $173;
                break;
            case 'Maybe.none':
                var $179 = Bool$false;
                var $171 = $179;
                break;
        };
        return $171;
    };
    const Kind$Synth$load$cached$is_loop = x0 => x1 => Kind$Synth$load$cached$is_loop$(x0, x1);

    function IO$get_file$(_name$1) {
        var $180 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $181 = IO$end$(_file$2);
            return $181;
        }));
        return $180;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function String$cons$(_head$1, _tail$2) {
        var $182 = (String.fromCharCode(_head$1) + _tail$2);
        return $182;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);
    const Bool$not = a0 => (!a0);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $184 = Bool$true;
            var $183 = $184;
        } else {
            var $185 = self.charCodeAt(0);
            var $186 = self.slice(1);
            var $187 = Bool$false;
            var $183 = $187;
        };
        return $183;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function IO$get_file_mtime$(_name$1) {
        var $188 = IO$ask$("get_file_mtime", _name$1, (_file$2 => {
            var $189 = IO$end$(_file$2);
            return $189;
        }));
        return $188;
    };
    const IO$get_file_mtime = x0 => IO$get_file_mtime$(x0);
    const Bool$and = a0 => a1 => (a0 && a1);
    const String$eql = a0 => a1 => (a0 === a1);

    function Pair$new$(_fst$3, _snd$4) {
        var $190 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $190;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.some':
                var $192 = self.value;
                var $193 = _f$4($192);
                var $191 = $193;
                break;
            case 'Maybe.none':
                var $194 = Maybe$none;
                var $191 = $194;
                break;
        };
        return $191;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $195 = _new$2(Maybe$bind)(Maybe$some);
        return $195;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Pair$(_A$1, _B$2) {
        var $196 = null;
        return $196;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);
    const Unit$new = null;
    const Bool$or = a0 => a1 => (a0 || a1);

    function Kind$Core$read$spaces$(_code$1) {
        var Kind$Core$read$spaces$ = (_code$1) => ({
            ctr: 'TCO',
            arg: [_code$1]
        });
        var Kind$Core$read$spaces = _code$1 => Kind$Core$read$spaces$(_code$1);
        var arg = [_code$1];
        while (true) {
            let [_code$1] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $197 = Pair$new$(_code$1, Unit$new);
                    return $197;
                } else {
                    var $198 = self.charCodeAt(0);
                    var $199 = self.slice(1);
                    var _is_space$4 = (($198 === 32) || (($198 === 10) || (($198 === 13) || (($198 === 9) || (($198 === 11) || (($198 === 12) || Bool$false))))));
                    var self = _is_space$4;
                    if (self) {
                        var $201 = Kind$Core$read$spaces$($199);
                        var $200 = $201;
                    } else {
                        var $202 = Pair$new$(_code$1, Unit$new);
                        var $200 = $202;
                    };
                    return $200;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$spaces = x0 => Kind$Core$read$spaces$(x0);

    function Kind$Term$ref$(_name$1) {
        var $203 = ({
            _: 'Kind.Term.ref',
            'name': _name$1
        });
        return $203;
    };
    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);

    function Char$eql$(_a$1, _b$2) {
        var $204 = (_a$1 === _b$2);
        return $204;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);
    const Kind$Term$typ = ({
        _: 'Kind.Term.typ'
    });

    function Cmp$as_gte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $206 = Bool$false;
                var $205 = $206;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $207 = Bool$true;
                var $205 = $207;
                break;
        };
        return $205;
    };
    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);

    function Word$gte$(_a$2, _b$3) {
        var $208 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));
        return $208;
    };
    const Word$gte = x0 => x1 => Word$gte$(x0, x1);
    const U16$gte = a0 => a1 => (a0 >= a1);

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.eql':
                var $210 = Bool$true;
                var $209 = $210;
                break;
            case 'Cmp.gtn':
                var $211 = Bool$false;
                var $209 = $211;
                break;
        };
        return $209;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);

    function Word$lte$(_a$2, _b$3) {
        var $212 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $212;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);
    const U16$lte = a0 => a1 => (a0 <= a1);

    function Kind$Core$read$is_name$(_chr$1) {
        var $213 = (((_chr$1 >= 46) && (_chr$1 <= 47)) || (((_chr$1 >= 48) && (_chr$1 < 58)) || (((_chr$1 >= 65) && (_chr$1 < 91)) || (((_chr$1 >= 95) && (_chr$1 < 96)) || (((_chr$1 >= 97) && (_chr$1 < 123)) || Bool$false)))));
        return $213;
    };
    const Kind$Core$read$is_name = x0 => Kind$Core$read$is_name$(x0);

    function Kind$Core$read$name$(_code$1) {
        var self = _code$1;
        if (self.length === 0) {
            var $215 = Pair$new$(_code$1, "");
            var $214 = $215;
        } else {
            var $216 = self.charCodeAt(0);
            var $217 = self.slice(1);
            var self = Kind$Core$read$is_name$($216);
            if (self) {
                var self = Kind$Core$read$name$($217);
                switch (self._) {
                    case 'Pair.new':
                        var $220 = self.fst;
                        var $221 = self.snd;
                        var $222 = Pair$new$($220, String$cons$($216, $221));
                        var $219 = $222;
                        break;
                };
                var $218 = $219;
            } else {
                var $223 = Pair$new$(_code$1, "");
                var $218 = $223;
            };
            var $214 = $218;
        };
        return $214;
    };
    const Kind$Core$read$name = x0 => Kind$Core$read$name$(x0);

    function Kind$Core$read$char$(_code$1, _chr$2) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $225 = self.fst;
                var self = $225;
                if (self.length === 0) {
                    var $227 = Pair$new$("", Unit$new);
                    var $226 = $227;
                } else {
                    var $228 = self.charCodeAt(0);
                    var $229 = self.slice(1);
                    var self = ($228 === _chr$2);
                    if (self) {
                        var $231 = Pair$new$($229, Unit$new);
                        var $230 = $231;
                    } else {
                        var $232 = Pair$new$("", Unit$new);
                        var $230 = $232;
                    };
                    var $226 = $230;
                };
                var $224 = $226;
                break;
        };
        return $224;
    };
    const Kind$Core$read$char = x0 => x1 => Kind$Core$read$char$(x0, x1);

    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $233 = ({
            _: 'Kind.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $233;
    };
    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);

    function Kind$Term$lam$(_name$1, _body$2) {
        var $234 = ({
            _: 'Kind.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $234;
    };
    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);

    function Kind$Term$app$(_func$1, _argm$2) {
        var $235 = ({
            _: 'Kind.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $235;
    };
    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);

    function Kind$Term$let$(_name$1, _expr$2, _body$3) {
        var $236 = ({
            _: 'Kind.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $236;
    };
    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);

    function Kind$Term$def$(_name$1, _expr$2, _body$3) {
        var $237 = ({
            _: 'Kind.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $237;
    };
    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);

    function Kind$Term$ann$(_done$1, _term$2, _type$3) {
        var $238 = ({
            _: 'Kind.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $238;
    };
    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $239 = Bool$true;
                    return $239;
                } else {
                    var $240 = self.charCodeAt(0);
                    var $241 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $243 = Bool$false;
                        var $242 = $243;
                    } else {
                        var $244 = self.charCodeAt(0);
                        var $245 = self.slice(1);
                        var self = Char$eql$($240, $244);
                        if (self) {
                            var $247 = String$starts_with$($245, $241);
                            var $246 = $247;
                        } else {
                            var $248 = Bool$false;
                            var $246 = $248;
                        };
                        var $242 = $246;
                    };
                    return $242;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);
    const String$nil = '';

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $249 = _xs$2;
                    return $249;
                } else {
                    var $250 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $252 = String$nil;
                        var $251 = $252;
                    } else {
                        var $253 = self.charCodeAt(0);
                        var $254 = self.slice(1);
                        var $255 = String$drop$($250, $254);
                        var $251 = $255;
                    };
                    return $251;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function Char$is_hex$(_chr$1) {
        var $256 = (((_chr$1 >= 48) && (_chr$1 <= 57)) || (((_chr$1 >= 97) && (_chr$1 <= 102)) || (((_chr$1 >= 65) && (_chr$1 <= 70)) || Bool$false)));
        return $256;
    };
    const Char$is_hex = x0 => Char$is_hex$(x0);

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $258 = self.pred;
                var $259 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $261 = self.pred;
                            var $262 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $264 = Word$i$(Word$adder$(_a$pred$10, $261, Bool$false));
                                    var $263 = $264;
                                } else {
                                    var $265 = Word$o$(Word$adder$(_a$pred$10, $261, Bool$false));
                                    var $263 = $265;
                                };
                                return $263;
                            });
                            var $260 = $262;
                            break;
                        case 'Word.i':
                            var $266 = self.pred;
                            var $267 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $269 = Word$o$(Word$adder$(_a$pred$10, $266, Bool$true));
                                    var $268 = $269;
                                } else {
                                    var $270 = Word$i$(Word$adder$(_a$pred$10, $266, Bool$false));
                                    var $268 = $270;
                                };
                                return $268;
                            });
                            var $260 = $267;
                            break;
                        case 'Word.e':
                            var $271 = (_a$pred$8 => {
                                var $272 = Word$e;
                                return $272;
                            });
                            var $260 = $271;
                            break;
                    };
                    var $260 = $260($258);
                    return $260;
                });
                var $257 = $259;
                break;
            case 'Word.i':
                var $273 = self.pred;
                var $274 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $276 = self.pred;
                            var $277 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $279 = Word$o$(Word$adder$(_a$pred$10, $276, Bool$true));
                                    var $278 = $279;
                                } else {
                                    var $280 = Word$i$(Word$adder$(_a$pred$10, $276, Bool$false));
                                    var $278 = $280;
                                };
                                return $278;
                            });
                            var $275 = $277;
                            break;
                        case 'Word.i':
                            var $281 = self.pred;
                            var $282 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $284 = Word$i$(Word$adder$(_a$pred$10, $281, Bool$true));
                                    var $283 = $284;
                                } else {
                                    var $285 = Word$o$(Word$adder$(_a$pred$10, $281, Bool$true));
                                    var $283 = $285;
                                };
                                return $283;
                            });
                            var $275 = $282;
                            break;
                        case 'Word.e':
                            var $286 = (_a$pred$8 => {
                                var $287 = Word$e;
                                return $287;
                            });
                            var $275 = $286;
                            break;
                    };
                    var $275 = $275($273);
                    return $275;
                });
                var $257 = $274;
                break;
            case 'Word.e':
                var $288 = (_b$5 => {
                    var $289 = Word$e;
                    return $289;
                });
                var $257 = $288;
                break;
        };
        var $257 = $257(_b$3);
        return $257;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $290 = Word$adder$(_a$2, _b$3, Bool$false);
        return $290;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Word$shift_left$one$go$(_word$2, _prev$3) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $292 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $294 = Word$i$(Word$shift_left$one$go$($292, Bool$false));
                    var $293 = $294;
                } else {
                    var $295 = Word$o$(Word$shift_left$one$go$($292, Bool$false));
                    var $293 = $295;
                };
                var $291 = $293;
                break;
            case 'Word.i':
                var $296 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $298 = Word$i$(Word$shift_left$one$go$($296, Bool$true));
                    var $297 = $298;
                } else {
                    var $299 = Word$o$(Word$shift_left$one$go$($296, Bool$true));
                    var $297 = $299;
                };
                var $291 = $297;
                break;
            case 'Word.e':
                var $300 = Word$e;
                var $291 = $300;
                break;
        };
        return $291;
    };
    const Word$shift_left$one$go = x0 => x1 => Word$shift_left$one$go$(x0, x1);

    function Word$shift_left$one$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $302 = self.pred;
                var $303 = Word$o$(Word$shift_left$one$go$($302, Bool$false));
                var $301 = $303;
                break;
            case 'Word.i':
                var $304 = self.pred;
                var $305 = Word$o$(Word$shift_left$one$go$($304, Bool$true));
                var $301 = $305;
                break;
            case 'Word.e':
                var $306 = Word$e;
                var $301 = $306;
                break;
        };
        return $301;
    };
    const Word$shift_left$one = x0 => Word$shift_left$one$(x0);

    function Word$shift_left$(_n$2, _value$3) {
        var Word$shift_left$ = (_n$2, _value$3) => ({
            ctr: 'TCO',
            arg: [_n$2, _value$3]
        });
        var Word$shift_left = _n$2 => _value$3 => Word$shift_left$(_n$2, _value$3);
        var arg = [_n$2, _value$3];
        while (true) {
            let [_n$2, _value$3] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $307 = _value$3;
                    return $307;
                } else {
                    var $308 = (self - 1n);
                    var $309 = Word$shift_left$($308, Word$shift_left$one$(_value$3));
                    return $309;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Word$shift_left = x0 => x1 => Word$shift_left$(x0, x1);

    function Word$mul$go$(_a$3, _b$4, _acc$5) {
        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({
            ctr: 'TCO',
            arg: [_a$3, _b$4, _acc$5]
        });
        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);
        var arg = [_a$3, _b$4, _acc$5];
        while (true) {
            let [_a$3, _b$4, _acc$5] = arg;
            var R = (() => {
                var self = _a$3;
                switch (self._) {
                    case 'Word.o':
                        var $310 = self.pred;
                        var $311 = Word$mul$go$($310, Word$shift_left$(1n, _b$4), _acc$5);
                        return $311;
                    case 'Word.i':
                        var $312 = self.pred;
                        var $313 = Word$mul$go$($312, Word$shift_left$(1n, _b$4), Word$add$(_b$4, _acc$5));
                        return $313;
                    case 'Word.e':
                        var $314 = _acc$5;
                        return $314;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);

    function Word$to_zero$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $316 = self.pred;
                var $317 = Word$o$(Word$to_zero$($316));
                var $315 = $317;
                break;
            case 'Word.i':
                var $318 = self.pred;
                var $319 = Word$o$(Word$to_zero$($318));
                var $315 = $319;
                break;
            case 'Word.e':
                var $320 = Word$e;
                var $315 = $320;
                break;
        };
        return $315;
    };
    const Word$to_zero = x0 => Word$to_zero$(x0);

    function Word$mul$(_a$2, _b$3) {
        var $321 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));
        return $321;
    };
    const Word$mul = x0 => x1 => Word$mul$(x0, x1);
    const U16$mul = a0 => a1 => ((a0 * a1) & 0xFFFF);
    const U16$inc = a0 => ((a0 + 1) & 0xFFFF);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $323 = self.pred;
                var $324 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $326 = self.pred;
                            var $327 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $329 = Word$i$(Word$subber$(_a$pred$10, $326, Bool$true));
                                    var $328 = $329;
                                } else {
                                    var $330 = Word$o$(Word$subber$(_a$pred$10, $326, Bool$false));
                                    var $328 = $330;
                                };
                                return $328;
                            });
                            var $325 = $327;
                            break;
                        case 'Word.i':
                            var $331 = self.pred;
                            var $332 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $334 = Word$o$(Word$subber$(_a$pred$10, $331, Bool$true));
                                    var $333 = $334;
                                } else {
                                    var $335 = Word$i$(Word$subber$(_a$pred$10, $331, Bool$true));
                                    var $333 = $335;
                                };
                                return $333;
                            });
                            var $325 = $332;
                            break;
                        case 'Word.e':
                            var $336 = (_a$pred$8 => {
                                var $337 = Word$e;
                                return $337;
                            });
                            var $325 = $336;
                            break;
                    };
                    var $325 = $325($323);
                    return $325;
                });
                var $322 = $324;
                break;
            case 'Word.i':
                var $338 = self.pred;
                var $339 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $341 = self.pred;
                            var $342 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $344 = Word$o$(Word$subber$(_a$pred$10, $341, Bool$false));
                                    var $343 = $344;
                                } else {
                                    var $345 = Word$i$(Word$subber$(_a$pred$10, $341, Bool$false));
                                    var $343 = $345;
                                };
                                return $343;
                            });
                            var $340 = $342;
                            break;
                        case 'Word.i':
                            var $346 = self.pred;
                            var $347 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $349 = Word$i$(Word$subber$(_a$pred$10, $346, Bool$true));
                                    var $348 = $349;
                                } else {
                                    var $350 = Word$o$(Word$subber$(_a$pred$10, $346, Bool$false));
                                    var $348 = $350;
                                };
                                return $348;
                            });
                            var $340 = $347;
                            break;
                        case 'Word.e':
                            var $351 = (_a$pred$8 => {
                                var $352 = Word$e;
                                return $352;
                            });
                            var $340 = $351;
                            break;
                    };
                    var $340 = $340($338);
                    return $340;
                });
                var $322 = $339;
                break;
            case 'Word.e':
                var $353 = (_b$5 => {
                    var $354 = Word$e;
                    return $354;
                });
                var $322 = $353;
                break;
        };
        var $322 = $322(_b$3);
        return $322;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $355 = Word$subber$(_a$2, _b$3, Bool$false);
        return $355;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => ((a0 - a1) & 0xFFFF);
    const U16$zero = U16$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))));

    function Char$hex_value16$(_chr$1) {
        var self = ((_chr$1 >= 48) && (_chr$1 <= 57));
        if (self) {
            var $357 = ((_chr$1 - 48) & 0xFFFF);
            var $356 = $357;
        } else {
            var self = ((_chr$1 >= 97) && (_chr$1 <= 102));
            if (self) {
                var $359 = (_x0$2 => {
                    var $360 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                    return $360;
                })(((_chr$1 - 97) & 0xFFFF));
                var $358 = $359;
            } else {
                var self = ((_chr$1 >= 65) && (_chr$1 <= 70));
                if (self) {
                    var $362 = (_x0$2 => {
                        var $363 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                        return $363;
                    })(((_chr$1 - 65) & 0xFFFF));
                    var $361 = $362;
                } else {
                    var $364 = U16$zero;
                    var $361 = $364;
                };
                var $358 = $361;
            };
            var $356 = $358;
        };
        return $356;
    };
    const Char$hex_value16 = x0 => Char$hex_value16$(x0);

    function Kind$Core$read$u16$(_code$1, _u16$2) {
        var Kind$Core$read$u16$ = (_code$1, _u16$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _u16$2]
        });
        var Kind$Core$read$u16 = _code$1 => _u16$2 => Kind$Core$read$u16$(_code$1, _u16$2);
        var arg = [_code$1, _u16$2];
        while (true) {
            let [_code$1, _u16$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $365 = Pair$new$(_code$1, _u16$2);
                    return $365;
                } else {
                    var $366 = self.charCodeAt(0);
                    var $367 = self.slice(1);
                    var self = Char$is_hex$($366);
                    if (self) {
                        var _u16$5 = ((((_u16$2 * 16) & 0xFFFF) + Char$hex_value16$($366)) & 0xFFFF);
                        var $369 = Kind$Core$read$u16$($367, _u16$5);
                        var $368 = $369;
                    } else {
                        var $370 = Pair$new$(_code$1, _u16$2);
                        var $368 = $370;
                    };
                    return $368;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$u16 = x0 => x1 => Kind$Core$read$u16$(x0, x1);

    function Kind$Core$read$chrx$(_code$1) {
        var self = String$starts_with$(_code$1, "\\u{");
        if (self) {
            var _code$2 = String$drop$(3n, _code$1);
            var self = Kind$Core$read$u16$(_code$2, 0);
            switch (self._) {
                case 'Pair.new':
                    var $373 = self.fst;
                    var $374 = self.snd;
                    var self = String$starts_with$($373, "}");
                    if (self) {
                        var $376 = Pair$new$(String$drop$(1n, $373), $374);
                        var $375 = $376;
                    } else {
                        var $377 = Pair$new$("", 63);
                        var $375 = $377;
                    };
                    var $372 = $375;
                    break;
            };
            var $371 = $372;
        } else {
            var self = String$starts_with$(_code$1, "\\\'");
            if (self) {
                var $379 = Pair$new$(String$drop$(2n, _code$1), 39);
                var $378 = $379;
            } else {
                var self = String$starts_with$(_code$1, "\\\"");
                if (self) {
                    var $381 = Pair$new$(String$drop$(2n, _code$1), 34);
                    var $380 = $381;
                } else {
                    var self = String$starts_with$(_code$1, "\\\\");
                    if (self) {
                        var $383 = Pair$new$(String$drop$(2n, _code$1), 92);
                        var $382 = $383;
                    } else {
                        var self = _code$1;
                        if (self.length === 0) {
                            var $385 = Pair$new$("", 63);
                            var $384 = $385;
                        } else {
                            var $386 = self.charCodeAt(0);
                            var $387 = self.slice(1);
                            var $388 = Pair$new$($387, $386);
                            var $384 = $388;
                        };
                        var $382 = $384;
                    };
                    var $380 = $382;
                };
                var $378 = $380;
            };
            var $371 = $378;
        };
        return $371;
    };
    const Kind$Core$read$chrx = x0 => Kind$Core$read$chrx$(x0);

    function Kind$Term$chr$(_chrx$1) {
        var $389 = ({
            _: 'Kind.Term.chr',
            'chrx': _chrx$1
        });
        return $389;
    };
    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);

    function Kind$Core$read$strx$(_code$1) {
        var self = String$starts_with$(_code$1, "\"");
        if (self) {
            var $391 = Pair$new$(_code$1, "");
            var $390 = $391;
        } else {
            var self = Kind$Core$read$chrx$(_code$1);
            switch (self._) {
                case 'Pair.new':
                    var $393 = self.fst;
                    var $394 = self.snd;
                    var self = Kind$Core$read$strx$($393);
                    switch (self._) {
                        case 'Pair.new':
                            var $396 = self.fst;
                            var $397 = self.snd;
                            var $398 = Pair$new$($396, String$cons$($394, $397));
                            var $395 = $398;
                            break;
                    };
                    var $392 = $395;
                    break;
            };
            var $390 = $392;
        };
        return $390;
    };
    const Kind$Core$read$strx = x0 => Kind$Core$read$strx$(x0);

    function Kind$Term$str$(_strx$1) {
        var $399 = ({
            _: 'Kind.Term.str',
            'strx': _strx$1
        });
        return $399;
    };
    const Kind$Term$str = x0 => Kind$Term$str$(x0);

    function Char$dec_value$(_chr$1) {
        var self = (_chr$1 === 48);
        if (self) {
            var $401 = 0n;
            var $400 = $401;
        } else {
            var self = (_chr$1 === 49);
            if (self) {
                var $403 = 1n;
                var $402 = $403;
            } else {
                var self = (_chr$1 === 50);
                if (self) {
                    var $405 = 2n;
                    var $404 = $405;
                } else {
                    var self = (_chr$1 === 51);
                    if (self) {
                        var $407 = 3n;
                        var $406 = $407;
                    } else {
                        var self = (_chr$1 === 52);
                        if (self) {
                            var $409 = 4n;
                            var $408 = $409;
                        } else {
                            var self = (_chr$1 === 53);
                            if (self) {
                                var $411 = 5n;
                                var $410 = $411;
                            } else {
                                var self = (_chr$1 === 54);
                                if (self) {
                                    var $413 = 6n;
                                    var $412 = $413;
                                } else {
                                    var self = (_chr$1 === 55);
                                    if (self) {
                                        var $415 = 7n;
                                        var $414 = $415;
                                    } else {
                                        var self = (_chr$1 === 56);
                                        if (self) {
                                            var $417 = 8n;
                                            var $416 = $417;
                                        } else {
                                            var self = (_chr$1 === 57);
                                            if (self) {
                                                var $419 = 9n;
                                                var $418 = $419;
                                            } else {
                                                var $420 = 0n;
                                                var $418 = $420;
                                            };
                                            var $416 = $418;
                                        };
                                        var $414 = $416;
                                    };
                                    var $412 = $414;
                                };
                                var $410 = $412;
                            };
                            var $408 = $410;
                        };
                        var $406 = $408;
                    };
                    var $404 = $406;
                };
                var $402 = $404;
            };
            var $400 = $402;
        };
        return $400;
    };
    const Char$dec_value = x0 => Char$dec_value$(x0);

    function Kind$Core$read$natx$(_code$1, _nat$2) {
        var Kind$Core$read$natx$ = (_code$1, _nat$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _nat$2]
        });
        var Kind$Core$read$natx = _code$1 => _nat$2 => Kind$Core$read$natx$(_code$1, _nat$2);
        var arg = [_code$1, _nat$2];
        while (true) {
            let [_code$1, _nat$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $421 = Pair$new$(_code$1, _nat$2);
                    return $421;
                } else {
                    var $422 = self.charCodeAt(0);
                    var $423 = self.slice(1);
                    var self = Char$is_hex$($422);
                    if (self) {
                        var _nat$5 = ((_nat$2 * 10n) + Char$dec_value$($422));
                        var $425 = Kind$Core$read$natx$($423, _nat$5);
                        var $424 = $425;
                    } else {
                        var $426 = Pair$new$(_code$1, _nat$2);
                        var $424 = $426;
                    };
                    return $424;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$natx = x0 => x1 => Kind$Core$read$natx$(x0, x1);

    function Kind$Term$nat$(_natx$1) {
        var $427 = ({
            _: 'Kind.Term.nat',
            'natx': _natx$1
        });
        return $427;
    };
    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $429 = self.fst;
                var $430 = $429;
                var $428 = $430;
                break;
        };
        return $428;
    };
    const Pair$fst = x0 => Pair$fst$(x0);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $432 = Nat$zero;
            var $431 = $432;
        } else {
            var $433 = (self - 1n);
            var $434 = $433;
            var $431 = $434;
        };
        return $431;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5) {
        var Kind$Core$read$find$ = (_list$2, _cond$3, _indx$4, _skip$5) => ({
            ctr: 'TCO',
            arg: [_list$2, _cond$3, _indx$4, _skip$5]
        });
        var Kind$Core$read$find = _list$2 => _cond$3 => _indx$4 => _skip$5 => Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5);
        var arg = [_list$2, _cond$3, _indx$4, _skip$5];
        while (true) {
            let [_list$2, _cond$3, _indx$4, _skip$5] = arg;
            var R = (() => {
                var self = _list$2;
                switch (self._) {
                    case 'List.cons':
                        var $435 = self.head;
                        var $436 = self.tail;
                        var self = _cond$3($435)(_indx$4);
                        if (self) {
                            var self = (_skip$5 === 0n);
                            if (self) {
                                var $439 = Maybe$some$(Pair$new$($435, _indx$4));
                                var $438 = $439;
                            } else {
                                var $440 = Kind$Core$read$find$($436, _cond$3, Nat$succ$(_indx$4), Nat$pred$(_skip$5));
                                var $438 = $440;
                            };
                            var $437 = $438;
                        } else {
                            var $441 = Kind$Core$read$find$($436, _cond$3, Nat$succ$(_indx$4), _skip$5);
                            var $437 = $441;
                        };
                        return $437;
                    case 'List.nil':
                        var $442 = Maybe$none;
                        return $442;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$find = x0 => x1 => x2 => x3 => Kind$Core$read$find$(x0, x1, x2, x3);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $444 = self.snd;
                var $445 = $444;
                var $443 = $445;
                break;
        };
        return $443;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Kind$Core$read$term$(_code$1) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $447 = self.fst;
                var self = $447;
                if (self.length === 0) {
                    var $449 = Pair$new$("", (_ctx$4 => {
                        var $450 = Kind$Term$ref$("error");
                        return $450;
                    }));
                    var $448 = $449;
                } else {
                    var $451 = self.charCodeAt(0);
                    var $452 = self.slice(1);
                    var _head$6 = $451;
                    var _code$7 = $452;
                    var self = Char$eql$(_head$6, 42);
                    if (self) {
                        var $454 = Pair$new$(_code$7, (_ctx$8 => {
                            var $455 = Kind$Term$typ;
                            return $455;
                        }));
                        var $453 = $454;
                    } else {
                        var self = (_head$6 === 64);
                        if (self) {
                            var self = Kind$Core$read$name$(_code$7);
                            switch (self._) {
                                case 'Pair.new':
                                    var $458 = self.fst;
                                    var $459 = self.snd;
                                    var self = Kind$Core$read$char$($458, 40);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $461 = self.fst;
                                            var self = Kind$Core$read$name$($461);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $463 = self.fst;
                                                    var $464 = self.snd;
                                                    var self = Kind$Core$read$char$($463, 58);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $466 = self.fst;
                                                            var self = Kind$Core$read$term$($466);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $468 = self.fst;
                                                                    var $469 = self.snd;
                                                                    var self = Kind$Core$read$char$($468, 41);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $471 = self.fst;
                                                                            var self = Kind$Core$read$term$($471);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $473 = self.fst;
                                                                                    var $474 = self.snd;
                                                                                    var $475 = Pair$new$($473, (_ctx$22 => {
                                                                                        var $476 = Kind$Term$all$(Bool$false, $459, $464, $469(_ctx$22), (_s$23 => _x$24 => {
                                                                                            var $477 = $474(List$cons$(Pair$new$($464, _x$24), List$cons$(Pair$new$($459, _s$23), _ctx$22)));
                                                                                            return $477;
                                                                                        }));
                                                                                        return $476;
                                                                                    }));
                                                                                    var $472 = $475;
                                                                                    break;
                                                                            };
                                                                            var $470 = $472;
                                                                            break;
                                                                    };
                                                                    var $467 = $470;
                                                                    break;
                                                            };
                                                            var $465 = $467;
                                                            break;
                                                    };
                                                    var $462 = $465;
                                                    break;
                                            };
                                            var $460 = $462;
                                            break;
                                    };
                                    var $457 = $460;
                                    break;
                            };
                            var $456 = $457;
                        } else {
                            var self = (_head$6 === 37);
                            if (self) {
                                var self = Kind$Core$read$name$(_code$7);
                                switch (self._) {
                                    case 'Pair.new':
                                        var $480 = self.fst;
                                        var $481 = self.snd;
                                        var self = Kind$Core$read$char$($480, 40);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $483 = self.fst;
                                                var self = Kind$Core$read$name$($483);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $485 = self.fst;
                                                        var $486 = self.snd;
                                                        var self = Kind$Core$read$char$($485, 58);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $488 = self.fst;
                                                                var self = Kind$Core$read$term$($488);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $490 = self.fst;
                                                                        var $491 = self.snd;
                                                                        var self = Kind$Core$read$char$($490, 41);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $493 = self.fst;
                                                                                var self = Kind$Core$read$term$($493);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $495 = self.fst;
                                                                                        var $496 = self.snd;
                                                                                        var $497 = Pair$new$($495, (_ctx$22 => {
                                                                                            var $498 = Kind$Term$all$(Bool$true, $481, $486, $491(_ctx$22), (_s$23 => _x$24 => {
                                                                                                var $499 = $496(List$cons$(Pair$new$($486, _x$24), List$cons$(Pair$new$($481, _s$23), _ctx$22)));
                                                                                                return $499;
                                                                                            }));
                                                                                            return $498;
                                                                                        }));
                                                                                        var $494 = $497;
                                                                                        break;
                                                                                };
                                                                                var $492 = $494;
                                                                                break;
                                                                        };
                                                                        var $489 = $492;
                                                                        break;
                                                                };
                                                                var $487 = $489;
                                                                break;
                                                        };
                                                        var $484 = $487;
                                                        break;
                                                };
                                                var $482 = $484;
                                                break;
                                        };
                                        var $479 = $482;
                                        break;
                                };
                                var $478 = $479;
                            } else {
                                var self = (_head$6 === 35);
                                if (self) {
                                    var self = Kind$Core$read$name$(_code$7);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $502 = self.fst;
                                            var $503 = self.snd;
                                            var self = Kind$Core$read$term$($502);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $505 = self.fst;
                                                    var $506 = self.snd;
                                                    var $507 = Pair$new$($505, (_ctx$12 => {
                                                        var $508 = Kind$Term$lam$($503, (_x$13 => {
                                                            var $509 = $506(List$cons$(Pair$new$($503, _x$13), _ctx$12));
                                                            return $509;
                                                        }));
                                                        return $508;
                                                    }));
                                                    var $504 = $507;
                                                    break;
                                            };
                                            var $501 = $504;
                                            break;
                                    };
                                    var $500 = $501;
                                } else {
                                    var self = (_head$6 === 40);
                                    if (self) {
                                        var self = Kind$Core$read$term$(_code$7);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $512 = self.fst;
                                                var $513 = self.snd;
                                                var self = Kind$Core$read$term$($512);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $515 = self.fst;
                                                        var $516 = self.snd;
                                                        var self = Kind$Core$read$char$($515, 41);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $518 = self.fst;
                                                                var $519 = Pair$new$($518, (_ctx$14 => {
                                                                    var $520 = Kind$Term$app$($513(_ctx$14), $516(_ctx$14));
                                                                    return $520;
                                                                }));
                                                                var $517 = $519;
                                                                break;
                                                        };
                                                        var $514 = $517;
                                                        break;
                                                };
                                                var $511 = $514;
                                                break;
                                        };
                                        var $510 = $511;
                                    } else {
                                        var self = (_head$6 === 33);
                                        if (self) {
                                            var self = Kind$Core$read$name$(_code$7);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $523 = self.fst;
                                                    var $524 = self.snd;
                                                    var self = Kind$Core$read$char$($523, 61);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $526 = self.fst;
                                                            var self = Kind$Core$read$term$($526);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $528 = self.fst;
                                                                    var $529 = self.snd;
                                                                    var self = Kind$Core$read$char$($528, 59);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $531 = self.fst;
                                                                            var self = Kind$Core$read$term$($531);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $533 = self.fst;
                                                                                    var $534 = self.snd;
                                                                                    var $535 = Pair$new$($533, (_ctx$18 => {
                                                                                        var $536 = Kind$Term$let$($524, $529(_ctx$18), (_x$19 => {
                                                                                            var $537 = $534(List$cons$(Pair$new$($524, _x$19), _ctx$18));
                                                                                            return $537;
                                                                                        }));
                                                                                        return $536;
                                                                                    }));
                                                                                    var $532 = $535;
                                                                                    break;
                                                                            };
                                                                            var $530 = $532;
                                                                            break;
                                                                    };
                                                                    var $527 = $530;
                                                                    break;
                                                            };
                                                            var $525 = $527;
                                                            break;
                                                    };
                                                    var $522 = $525;
                                                    break;
                                            };
                                            var $521 = $522;
                                        } else {
                                            var self = (_head$6 === 36);
                                            if (self) {
                                                var self = Kind$Core$read$name$(_code$7);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $540 = self.fst;
                                                        var $541 = self.snd;
                                                        var self = Kind$Core$read$char$($540, 61);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $543 = self.fst;
                                                                var self = Kind$Core$read$term$($543);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $545 = self.fst;
                                                                        var $546 = self.snd;
                                                                        var self = Kind$Core$read$char$($545, 59);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $548 = self.fst;
                                                                                var self = Kind$Core$read$term$($548);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $550 = self.fst;
                                                                                        var $551 = self.snd;
                                                                                        var $552 = Pair$new$($550, (_ctx$18 => {
                                                                                            var $553 = Kind$Term$def$($541, $546(_ctx$18), (_x$19 => {
                                                                                                var $554 = $551(List$cons$(Pair$new$($541, _x$19), _ctx$18));
                                                                                                return $554;
                                                                                            }));
                                                                                            return $553;
                                                                                        }));
                                                                                        var $549 = $552;
                                                                                        break;
                                                                                };
                                                                                var $547 = $549;
                                                                                break;
                                                                        };
                                                                        var $544 = $547;
                                                                        break;
                                                                };
                                                                var $542 = $544;
                                                                break;
                                                        };
                                                        var $539 = $542;
                                                        break;
                                                };
                                                var $538 = $539;
                                            } else {
                                                var self = (_head$6 === 123);
                                                if (self) {
                                                    var self = Kind$Core$read$term$(_code$7);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $557 = self.fst;
                                                            var $558 = self.snd;
                                                            var self = Kind$Core$read$char$($557, 58);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $560 = self.fst;
                                                                    var self = Kind$Core$read$term$($560);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $562 = self.fst;
                                                                            var $563 = self.snd;
                                                                            var self = Kind$Core$read$char$($562, 125);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $565 = self.fst;
                                                                                    var $566 = Pair$new$($565, (_ctx$16 => {
                                                                                        var $567 = Kind$Term$ann$(Bool$false, $558(_ctx$16), $563(_ctx$16));
                                                                                        return $567;
                                                                                    }));
                                                                                    var $564 = $566;
                                                                                    break;
                                                                            };
                                                                            var $561 = $564;
                                                                            break;
                                                                    };
                                                                    var $559 = $561;
                                                                    break;
                                                            };
                                                            var $556 = $559;
                                                            break;
                                                    };
                                                    var $555 = $556;
                                                } else {
                                                    var self = (_head$6 === 39);
                                                    if (self) {
                                                        var self = Kind$Core$read$chrx$(_code$7);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $570 = self.fst;
                                                                var $571 = self.snd;
                                                                var self = Kind$Core$read$char$($570, 39);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $573 = self.fst;
                                                                        var $574 = Pair$new$($573, (_ctx$12 => {
                                                                            var $575 = Kind$Term$chr$($571);
                                                                            return $575;
                                                                        }));
                                                                        var $572 = $574;
                                                                        break;
                                                                };
                                                                var $569 = $572;
                                                                break;
                                                        };
                                                        var $568 = $569;
                                                    } else {
                                                        var self = (_head$6 === 34);
                                                        if (self) {
                                                            var self = Kind$Core$read$strx$(_code$7);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $578 = self.fst;
                                                                    var $579 = self.snd;
                                                                    var self = Kind$Core$read$char$($578, 34);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $581 = self.fst;
                                                                            var $582 = Pair$new$($581, (_ctx$12 => {
                                                                                var $583 = Kind$Term$str$($579);
                                                                                return $583;
                                                                            }));
                                                                            var $580 = $582;
                                                                            break;
                                                                    };
                                                                    var $577 = $580;
                                                                    break;
                                                            };
                                                            var $576 = $577;
                                                        } else {
                                                            var self = (_head$6 === 43);
                                                            if (self) {
                                                                var self = Kind$Core$read$natx$(_code$7, 0n);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $586 = self.fst;
                                                                        var $587 = self.snd;
                                                                        var $588 = Pair$new$($586, (_ctx$10 => {
                                                                            var $589 = Kind$Term$nat$($587);
                                                                            return $589;
                                                                        }));
                                                                        var $585 = $588;
                                                                        break;
                                                                };
                                                                var $584 = $585;
                                                            } else {
                                                                var self = Kind$Core$read$is_name$(_head$6);
                                                                if (self) {
                                                                    var self = Kind$Core$read$name$(_code$7);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $592 = self.fst;
                                                                            var $593 = self.snd;
                                                                            var _name$10 = String$cons$(_head$6, $593);
                                                                            var self = $592;
                                                                            if (self.length === 0) {
                                                                                var $595 = Pair$new$("", 0n);
                                                                                var self = $595;
                                                                            } else {
                                                                                var $596 = self.charCodeAt(0);
                                                                                var $597 = self.slice(1);
                                                                                var self = ($596 === 94);
                                                                                if (self) {
                                                                                    var $599 = Kind$Core$read$natx$($597, 0n);
                                                                                    var $598 = $599;
                                                                                } else {
                                                                                    var $600 = Pair$new$($592, 0n);
                                                                                    var $598 = $600;
                                                                                };
                                                                                var self = $598;
                                                                            };
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $601 = self.fst;
                                                                                    var $602 = self.snd;
                                                                                    var $603 = Pair$new$($601, (_ctx$13 => {
                                                                                        var _got$14 = Kind$Core$read$find$(_ctx$13, (_x$14 => _i$15 => {
                                                                                            var $605 = (Pair$fst$(_x$14) === _name$10);
                                                                                            return $605;
                                                                                        }), 0n, $602);
                                                                                        var self = _got$14;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.some':
                                                                                                var $606 = self.value;
                                                                                                var $607 = Pair$snd$(Pair$fst$($606));
                                                                                                var $604 = $607;
                                                                                                break;
                                                                                            case 'Maybe.none':
                                                                                                var $608 = Kind$Term$ref$(_name$10);
                                                                                                var $604 = $608;
                                                                                                break;
                                                                                        };
                                                                                        return $604;
                                                                                    }));
                                                                                    var $594 = $603;
                                                                                    break;
                                                                            };
                                                                            var $591 = $594;
                                                                            break;
                                                                    };
                                                                    var $590 = $591;
                                                                } else {
                                                                    var $609 = Pair$new$("", (_ctx$8 => {
                                                                        var $610 = Kind$Term$ref$("error");
                                                                        return $610;
                                                                    }));
                                                                    var $590 = $609;
                                                                };
                                                                var $584 = $590;
                                                            };
                                                            var $576 = $584;
                                                        };
                                                        var $568 = $576;
                                                    };
                                                    var $555 = $568;
                                                };
                                                var $538 = $555;
                                            };
                                            var $521 = $538;
                                        };
                                        var $510 = $521;
                                    };
                                    var $500 = $510;
                                };
                                var $478 = $500;
                            };
                            var $456 = $478;
                        };
                        var $453 = $456;
                    };
                    var $448 = $453;
                };
                var $446 = $448;
                break;
        };
        return $446;
    };
    const Kind$Core$read$term = x0 => Kind$Core$read$term$(x0);

    function Kind$Core$read$(_code$1) {
        var self = Kind$Core$read$term$((_code$1 + ";"));
        switch (self._) {
            case 'Pair.new':
                var $612 = self.fst;
                var $613 = self.snd;
                var self = $612;
                if (self.length === 0) {
                    var $615 = Maybe$none;
                    var $614 = $615;
                } else {
                    var $616 = self.charCodeAt(0);
                    var $617 = self.slice(1);
                    var $618 = Maybe$some$($613(List$nil));
                    var $614 = $618;
                };
                var $611 = $614;
                break;
        };
        return $611;
    };
    const Kind$Core$read = x0 => Kind$Core$read$(x0);

    function Bool$read$(_code$1) {
        var self = (_code$1 === "Bool.true");
        if (self) {
            var $620 = Maybe$some$(Bool$true);
            var $619 = $620;
        } else {
            var self = (_code$1 === "Bool.false");
            if (self) {
                var $622 = Maybe$some$(Bool$false);
                var $621 = $622;
            } else {
                var $623 = Maybe$none;
                var $621 = $623;
            };
            var $619 = $621;
        };
        return $619;
    };
    const Bool$read = x0 => Bool$read$(x0);

    function Kind$Status$done$(_cached$1) {
        var $624 = ({
            _: 'Kind.Status.done',
            'cached': _cached$1
        });
        return $624;
    };
    const Kind$Status$done = x0 => Kind$Status$done$(x0);

    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $625 = ({
            _: 'Kind.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $625;
    };
    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Synth$load$cached$def$(_name$1) {
        var $626 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $627 = _m$bind$2;
            return $627;
        }))(IO$get_file$((".cache/" + (_name$1 + ".file"))))((_cache_file$2 => {
            var self = (!String$is_empty$(_cache_file$2));
            if (self) {
                var $629 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $630 = _m$bind$3;
                    return $630;
                }))(IO$get_file$((".cache/" + (_name$1 + ".time"))))((_cache_time$3 => {
                    var $631 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $632 = _m$bind$4;
                        return $632;
                    }))(IO$get_file_mtime$(_cache_file$2))((_cache_file_time$4 => {
                        var self = (_cache_time$3 === _cache_file_time$4);
                        if (self) {
                            var $634 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $635 = _m$bind$5;
                                return $635;
                            }))(IO$get_file$((".cache/" + (_name$1 + ".term"))))((_cache_term$5 => {
                                var $636 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $637 = _m$bind$6;
                                    return $637;
                                }))(IO$get_file$((".cache/" + (_name$1 + ".type"))))((_cache_type$6 => {
                                    var $638 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $639 = _m$bind$7;
                                        return $639;
                                    }))(IO$get_file$((".cache/" + (_name$1 + ".isct"))))((_cache_isct$7 => {
                                        var $640 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $641 = _m$bind$8;
                                            return $641;
                                        }))(IO$get_file$((".cache/" + (_name$1 + ".arit"))))((_cache_arit$8 => {
                                            var $642 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $643 = _m$pure$10;
                                                return $643;
                                            }))((() => {
                                                var _file$9 = _cache_file$2;
                                                var _code$10 = "<cached>";
                                                var _orig$11 = Pair$new$(0n, 0n);
                                                var $644 = Maybe$monad$((_m$bind$12 => _m$pure$13 => {
                                                    var $645 = _m$bind$12;
                                                    return $645;
                                                }))(Kind$Core$read$(_cache_term$5))((_term$12 => {
                                                    var $646 = Maybe$monad$((_m$bind$13 => _m$pure$14 => {
                                                        var $647 = _m$bind$13;
                                                        return $647;
                                                    }))(Kind$Core$read$(_cache_type$6))((_type$13 => {
                                                        var $648 = Maybe$monad$((_m$bind$14 => _m$pure$15 => {
                                                            var $649 = _m$bind$14;
                                                            return $649;
                                                        }))(Bool$read$(_cache_isct$7))((_isct$14 => {
                                                            var $650 = Maybe$monad$((_m$bind$15 => _m$pure$16 => {
                                                                var $651 = _m$bind$15;
                                                                return $651;
                                                            }))(Maybe$some$(Nat$read$(_cache_arit$8)))((_arit$15 => {
                                                                var _stat$16 = Kind$Status$done$(Bool$true);
                                                                var $652 = Maybe$monad$((_m$bind$17 => _m$pure$18 => {
                                                                    var $653 = _m$pure$18;
                                                                    return $653;
                                                                }))(Kind$Def$new$(_file$9, _code$10, _orig$11, _name$1, _term$12, _type$13, _isct$14, _arit$15, _stat$16));
                                                                return $652;
                                                            }));
                                                            return $650;
                                                        }));
                                                        return $648;
                                                    }));
                                                    return $646;
                                                }));
                                                return $644;
                                            })());
                                            return $642;
                                        }));
                                        return $640;
                                    }));
                                    return $638;
                                }));
                                return $636;
                            }));
                            var $633 = $634;
                        } else {
                            var $654 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $655 = _m$pure$6;
                                return $655;
                            }))(Maybe$none);
                            var $633 = $654;
                        };
                        return $633;
                    }));
                    return $631;
                }));
                var $628 = $629;
            } else {
                var $656 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $657 = _m$pure$4;
                    return $657;
                }))(Maybe$none);
                var $628 = $656;
            };
            return $628;
        }));
        return $626;
    };
    const Kind$Synth$load$cached$def = x0 => Kind$Synth$load$cached$def$(x0);

    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {
        var $658 = ({
            _: 'BitsMap.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $658;
    };
    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);
    const BitsMap$new = ({
        _: 'BitsMap.new'
    });
    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));

    function Kind$Map$set$(_name$2, _val$3, _map$4) {
        var $659 = (bitsmap_set((kind_name_to_bits(_name$2)), _val$3, _map$4, 'set'));
        return $659;
    };
    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);
    const Kind$Map$new = BitsMap$new;
    const Kind$Map = null;

    function Kind$Core$dependencies$go$(_term$1, _deps$2) {
        var _nil$3 = Kind$Term$typ;
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $661 = self.name;
                var $662 = Kind$Map$set$($661, Unit$new, _deps$2);
                var $660 = $662;
                break;
            case 'Kind.Term.all':
                var $663 = self.xtyp;
                var $664 = self.body;
                var _deps$9 = Kind$Core$dependencies$go$($663, _deps$2);
                var _deps$10 = Kind$Core$dependencies$go$($664(_nil$3)(_nil$3), _deps$9);
                var $665 = _deps$10;
                var $660 = $665;
                break;
            case 'Kind.Term.lam':
                var $666 = self.body;
                var _deps$6 = Kind$Core$dependencies$go$($666(_nil$3), _deps$2);
                var $667 = _deps$6;
                var $660 = $667;
                break;
            case 'Kind.Term.app':
                var $668 = self.func;
                var $669 = self.argm;
                var _deps$6 = Kind$Core$dependencies$go$($668, _deps$2);
                var _deps$7 = Kind$Core$dependencies$go$($669, _deps$6);
                var $670 = _deps$7;
                var $660 = $670;
                break;
            case 'Kind.Term.let':
                var $671 = self.expr;
                var $672 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($671, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($672(_nil$3), _deps$7);
                var $673 = _deps$8;
                var $660 = $673;
                break;
            case 'Kind.Term.def':
                var $674 = self.expr;
                var $675 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($674, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($675(_nil$3), _deps$7);
                var $676 = _deps$8;
                var $660 = $676;
                break;
            case 'Kind.Term.ann':
                var $677 = self.term;
                var $678 = self.type;
                var _deps$7 = Kind$Core$dependencies$go$($677, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($678, _deps$7);
                var $679 = _deps$8;
                var $660 = $679;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $680 = _deps$2;
                var $660 = $680;
                break;
        };
        return $660;
    };
    const Kind$Core$dependencies$go = x0 => x1 => Kind$Core$dependencies$go$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $682 = self.head;
                var $683 = self.tail;
                var $684 = List$cons$(_f$4($682), List$mapped$($683, _f$4));
                var $681 = $684;
                break;
            case 'List.nil':
                var $685 = List$nil;
                var $681 = $685;
                break;
        };
        return $681;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $686 = self.slice(0, -1);
                        var $687 = Bits$reverse$tco$($686, (_r$2 + '0'));
                        return $687;
                    case 'i':
                        var $688 = self.slice(0, -1);
                        var $689 = Bits$reverse$tco$($688, (_r$2 + '1'));
                        return $689;
                    case 'e':
                        var $690 = _r$2;
                        return $690;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $691 = Bits$reverse$tco$(_a$1, Bits$e);
        return $691;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);

    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $693 = self.val;
                var $694 = self.lft;
                var $695 = self.rgt;
                var self = $693;
                switch (self._) {
                    case 'Maybe.some':
                        var $697 = self.value;
                        var $698 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $697), _list$4);
                        var _list0$8 = $698;
                        break;
                    case 'Maybe.none':
                        var $699 = _list$4;
                        var _list0$8 = $699;
                        break;
                };
                var _list1$9 = BitsMap$to_list$go$($694, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$to_list$go$($695, (_key$3 + '1'), _list1$9);
                var $696 = _list2$10;
                var $692 = $696;
                break;
            case 'BitsMap.new':
                var $700 = _list$4;
                var $692 = $700;
                break;
        };
        return $692;
    };
    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);

    function Kind$Name$from_bits$(_bs$1) {
        var self = _bs$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $702 = self.slice(0, -1);
                var _bs$3 = $702;
                var self = _bs$3;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $704 = self.slice(0, -1);
                        var _bs$5 = $704;
                        var self = _bs$5;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $706 = self.slice(0, -1);
                                var _bs$7 = $706;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $708 = self.slice(0, -1);
                                        var _bs$9 = $708;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $710 = self.slice(0, -1);
                                                var _bs$11 = $710;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $712 = self.slice(0, -1);
                                                        var _bs$13 = $712;
                                                        var $713 = String$cons$(65, Kind$Name$from_bits$(_bs$13));
                                                        var $711 = $713;
                                                        break;
                                                    case 'i':
                                                        var $714 = self.slice(0, -1);
                                                        var _bs$13 = $714;
                                                        var $715 = String$cons$(66, Kind$Name$from_bits$(_bs$13));
                                                        var $711 = $715;
                                                        break;
                                                    case 'e':
                                                        var $716 = String$nil;
                                                        var $711 = $716;
                                                        break;
                                                };
                                                var $709 = $711;
                                                break;
                                            case 'i':
                                                var $717 = self.slice(0, -1);
                                                var _bs$11 = $717;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $719 = self.slice(0, -1);
                                                        var _bs$13 = $719;
                                                        var $720 = String$cons$(67, Kind$Name$from_bits$(_bs$13));
                                                        var $718 = $720;
                                                        break;
                                                    case 'i':
                                                        var $721 = self.slice(0, -1);
                                                        var _bs$13 = $721;
                                                        var $722 = String$cons$(68, Kind$Name$from_bits$(_bs$13));
                                                        var $718 = $722;
                                                        break;
                                                    case 'e':
                                                        var $723 = String$nil;
                                                        var $718 = $723;
                                                        break;
                                                };
                                                var $709 = $718;
                                                break;
                                            case 'e':
                                                var $724 = String$nil;
                                                var $709 = $724;
                                                break;
                                        };
                                        var $707 = $709;
                                        break;
                                    case 'i':
                                        var $725 = self.slice(0, -1);
                                        var _bs$9 = $725;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $727 = self.slice(0, -1);
                                                var _bs$11 = $727;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $729 = self.slice(0, -1);
                                                        var _bs$13 = $729;
                                                        var $730 = String$cons$(69, Kind$Name$from_bits$(_bs$13));
                                                        var $728 = $730;
                                                        break;
                                                    case 'i':
                                                        var $731 = self.slice(0, -1);
                                                        var _bs$13 = $731;
                                                        var $732 = String$cons$(70, Kind$Name$from_bits$(_bs$13));
                                                        var $728 = $732;
                                                        break;
                                                    case 'e':
                                                        var $733 = String$nil;
                                                        var $728 = $733;
                                                        break;
                                                };
                                                var $726 = $728;
                                                break;
                                            case 'i':
                                                var $734 = self.slice(0, -1);
                                                var _bs$11 = $734;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $736 = self.slice(0, -1);
                                                        var _bs$13 = $736;
                                                        var $737 = String$cons$(71, Kind$Name$from_bits$(_bs$13));
                                                        var $735 = $737;
                                                        break;
                                                    case 'i':
                                                        var $738 = self.slice(0, -1);
                                                        var _bs$13 = $738;
                                                        var $739 = String$cons$(72, Kind$Name$from_bits$(_bs$13));
                                                        var $735 = $739;
                                                        break;
                                                    case 'e':
                                                        var $740 = String$nil;
                                                        var $735 = $740;
                                                        break;
                                                };
                                                var $726 = $735;
                                                break;
                                            case 'e':
                                                var $741 = String$nil;
                                                var $726 = $741;
                                                break;
                                        };
                                        var $707 = $726;
                                        break;
                                    case 'e':
                                        var $742 = String$nil;
                                        var $707 = $742;
                                        break;
                                };
                                var $705 = $707;
                                break;
                            case 'i':
                                var $743 = self.slice(0, -1);
                                var _bs$7 = $743;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $745 = self.slice(0, -1);
                                        var _bs$9 = $745;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $747 = self.slice(0, -1);
                                                var _bs$11 = $747;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $749 = self.slice(0, -1);
                                                        var _bs$13 = $749;
                                                        var $750 = String$cons$(73, Kind$Name$from_bits$(_bs$13));
                                                        var $748 = $750;
                                                        break;
                                                    case 'i':
                                                        var $751 = self.slice(0, -1);
                                                        var _bs$13 = $751;
                                                        var $752 = String$cons$(74, Kind$Name$from_bits$(_bs$13));
                                                        var $748 = $752;
                                                        break;
                                                    case 'e':
                                                        var $753 = String$nil;
                                                        var $748 = $753;
                                                        break;
                                                };
                                                var $746 = $748;
                                                break;
                                            case 'i':
                                                var $754 = self.slice(0, -1);
                                                var _bs$11 = $754;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $756 = self.slice(0, -1);
                                                        var _bs$13 = $756;
                                                        var $757 = String$cons$(75, Kind$Name$from_bits$(_bs$13));
                                                        var $755 = $757;
                                                        break;
                                                    case 'i':
                                                        var $758 = self.slice(0, -1);
                                                        var _bs$13 = $758;
                                                        var $759 = String$cons$(76, Kind$Name$from_bits$(_bs$13));
                                                        var $755 = $759;
                                                        break;
                                                    case 'e':
                                                        var $760 = String$nil;
                                                        var $755 = $760;
                                                        break;
                                                };
                                                var $746 = $755;
                                                break;
                                            case 'e':
                                                var $761 = String$nil;
                                                var $746 = $761;
                                                break;
                                        };
                                        var $744 = $746;
                                        break;
                                    case 'i':
                                        var $762 = self.slice(0, -1);
                                        var _bs$9 = $762;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $764 = self.slice(0, -1);
                                                var _bs$11 = $764;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $766 = self.slice(0, -1);
                                                        var _bs$13 = $766;
                                                        var $767 = String$cons$(77, Kind$Name$from_bits$(_bs$13));
                                                        var $765 = $767;
                                                        break;
                                                    case 'i':
                                                        var $768 = self.slice(0, -1);
                                                        var _bs$13 = $768;
                                                        var $769 = String$cons$(78, Kind$Name$from_bits$(_bs$13));
                                                        var $765 = $769;
                                                        break;
                                                    case 'e':
                                                        var $770 = String$nil;
                                                        var $765 = $770;
                                                        break;
                                                };
                                                var $763 = $765;
                                                break;
                                            case 'i':
                                                var $771 = self.slice(0, -1);
                                                var _bs$11 = $771;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $773 = self.slice(0, -1);
                                                        var _bs$13 = $773;
                                                        var $774 = String$cons$(79, Kind$Name$from_bits$(_bs$13));
                                                        var $772 = $774;
                                                        break;
                                                    case 'i':
                                                        var $775 = self.slice(0, -1);
                                                        var _bs$13 = $775;
                                                        var $776 = String$cons$(80, Kind$Name$from_bits$(_bs$13));
                                                        var $772 = $776;
                                                        break;
                                                    case 'e':
                                                        var $777 = String$nil;
                                                        var $772 = $777;
                                                        break;
                                                };
                                                var $763 = $772;
                                                break;
                                            case 'e':
                                                var $778 = String$nil;
                                                var $763 = $778;
                                                break;
                                        };
                                        var $744 = $763;
                                        break;
                                    case 'e':
                                        var $779 = String$nil;
                                        var $744 = $779;
                                        break;
                                };
                                var $705 = $744;
                                break;
                            case 'e':
                                var $780 = String$nil;
                                var $705 = $780;
                                break;
                        };
                        var $703 = $705;
                        break;
                    case 'i':
                        var $781 = self.slice(0, -1);
                        var _bs$5 = $781;
                        var self = _bs$5;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $783 = self.slice(0, -1);
                                var _bs$7 = $783;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $785 = self.slice(0, -1);
                                        var _bs$9 = $785;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $787 = self.slice(0, -1);
                                                var _bs$11 = $787;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $789 = self.slice(0, -1);
                                                        var _bs$13 = $789;
                                                        var $790 = String$cons$(81, Kind$Name$from_bits$(_bs$13));
                                                        var $788 = $790;
                                                        break;
                                                    case 'i':
                                                        var $791 = self.slice(0, -1);
                                                        var _bs$13 = $791;
                                                        var $792 = String$cons$(82, Kind$Name$from_bits$(_bs$13));
                                                        var $788 = $792;
                                                        break;
                                                    case 'e':
                                                        var $793 = String$nil;
                                                        var $788 = $793;
                                                        break;
                                                };
                                                var $786 = $788;
                                                break;
                                            case 'i':
                                                var $794 = self.slice(0, -1);
                                                var _bs$11 = $794;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $796 = self.slice(0, -1);
                                                        var _bs$13 = $796;
                                                        var $797 = String$cons$(83, Kind$Name$from_bits$(_bs$13));
                                                        var $795 = $797;
                                                        break;
                                                    case 'i':
                                                        var $798 = self.slice(0, -1);
                                                        var _bs$13 = $798;
                                                        var $799 = String$cons$(84, Kind$Name$from_bits$(_bs$13));
                                                        var $795 = $799;
                                                        break;
                                                    case 'e':
                                                        var $800 = String$nil;
                                                        var $795 = $800;
                                                        break;
                                                };
                                                var $786 = $795;
                                                break;
                                            case 'e':
                                                var $801 = String$nil;
                                                var $786 = $801;
                                                break;
                                        };
                                        var $784 = $786;
                                        break;
                                    case 'i':
                                        var $802 = self.slice(0, -1);
                                        var _bs$9 = $802;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $804 = self.slice(0, -1);
                                                var _bs$11 = $804;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $806 = self.slice(0, -1);
                                                        var _bs$13 = $806;
                                                        var $807 = String$cons$(85, Kind$Name$from_bits$(_bs$13));
                                                        var $805 = $807;
                                                        break;
                                                    case 'i':
                                                        var $808 = self.slice(0, -1);
                                                        var _bs$13 = $808;
                                                        var $809 = String$cons$(86, Kind$Name$from_bits$(_bs$13));
                                                        var $805 = $809;
                                                        break;
                                                    case 'e':
                                                        var $810 = String$nil;
                                                        var $805 = $810;
                                                        break;
                                                };
                                                var $803 = $805;
                                                break;
                                            case 'i':
                                                var $811 = self.slice(0, -1);
                                                var _bs$11 = $811;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $813 = self.slice(0, -1);
                                                        var _bs$13 = $813;
                                                        var $814 = String$cons$(87, Kind$Name$from_bits$(_bs$13));
                                                        var $812 = $814;
                                                        break;
                                                    case 'i':
                                                        var $815 = self.slice(0, -1);
                                                        var _bs$13 = $815;
                                                        var $816 = String$cons$(88, Kind$Name$from_bits$(_bs$13));
                                                        var $812 = $816;
                                                        break;
                                                    case 'e':
                                                        var $817 = String$nil;
                                                        var $812 = $817;
                                                        break;
                                                };
                                                var $803 = $812;
                                                break;
                                            case 'e':
                                                var $818 = String$nil;
                                                var $803 = $818;
                                                break;
                                        };
                                        var $784 = $803;
                                        break;
                                    case 'e':
                                        var $819 = String$nil;
                                        var $784 = $819;
                                        break;
                                };
                                var $782 = $784;
                                break;
                            case 'i':
                                var $820 = self.slice(0, -1);
                                var _bs$7 = $820;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $822 = self.slice(0, -1);
                                        var _bs$9 = $822;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $824 = self.slice(0, -1);
                                                var _bs$11 = $824;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $826 = self.slice(0, -1);
                                                        var _bs$13 = $826;
                                                        var $827 = String$cons$(89, Kind$Name$from_bits$(_bs$13));
                                                        var $825 = $827;
                                                        break;
                                                    case 'i':
                                                        var $828 = self.slice(0, -1);
                                                        var _bs$13 = $828;
                                                        var $829 = String$cons$(90, Kind$Name$from_bits$(_bs$13));
                                                        var $825 = $829;
                                                        break;
                                                    case 'e':
                                                        var $830 = String$nil;
                                                        var $825 = $830;
                                                        break;
                                                };
                                                var $823 = $825;
                                                break;
                                            case 'i':
                                                var $831 = self.slice(0, -1);
                                                var _bs$11 = $831;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $833 = self.slice(0, -1);
                                                        var _bs$13 = $833;
                                                        var $834 = String$cons$(97, Kind$Name$from_bits$(_bs$13));
                                                        var $832 = $834;
                                                        break;
                                                    case 'i':
                                                        var $835 = self.slice(0, -1);
                                                        var _bs$13 = $835;
                                                        var $836 = String$cons$(98, Kind$Name$from_bits$(_bs$13));
                                                        var $832 = $836;
                                                        break;
                                                    case 'e':
                                                        var $837 = String$nil;
                                                        var $832 = $837;
                                                        break;
                                                };
                                                var $823 = $832;
                                                break;
                                            case 'e':
                                                var $838 = String$nil;
                                                var $823 = $838;
                                                break;
                                        };
                                        var $821 = $823;
                                        break;
                                    case 'i':
                                        var $839 = self.slice(0, -1);
                                        var _bs$9 = $839;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $841 = self.slice(0, -1);
                                                var _bs$11 = $841;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $843 = self.slice(0, -1);
                                                        var _bs$13 = $843;
                                                        var $844 = String$cons$(99, Kind$Name$from_bits$(_bs$13));
                                                        var $842 = $844;
                                                        break;
                                                    case 'i':
                                                        var $845 = self.slice(0, -1);
                                                        var _bs$13 = $845;
                                                        var $846 = String$cons$(100, Kind$Name$from_bits$(_bs$13));
                                                        var $842 = $846;
                                                        break;
                                                    case 'e':
                                                        var $847 = String$nil;
                                                        var $842 = $847;
                                                        break;
                                                };
                                                var $840 = $842;
                                                break;
                                            case 'i':
                                                var $848 = self.slice(0, -1);
                                                var _bs$11 = $848;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $850 = self.slice(0, -1);
                                                        var _bs$13 = $850;
                                                        var $851 = String$cons$(101, Kind$Name$from_bits$(_bs$13));
                                                        var $849 = $851;
                                                        break;
                                                    case 'i':
                                                        var $852 = self.slice(0, -1);
                                                        var _bs$13 = $852;
                                                        var $853 = String$cons$(102, Kind$Name$from_bits$(_bs$13));
                                                        var $849 = $853;
                                                        break;
                                                    case 'e':
                                                        var $854 = String$nil;
                                                        var $849 = $854;
                                                        break;
                                                };
                                                var $840 = $849;
                                                break;
                                            case 'e':
                                                var $855 = String$nil;
                                                var $840 = $855;
                                                break;
                                        };
                                        var $821 = $840;
                                        break;
                                    case 'e':
                                        var $856 = String$nil;
                                        var $821 = $856;
                                        break;
                                };
                                var $782 = $821;
                                break;
                            case 'e':
                                var $857 = String$nil;
                                var $782 = $857;
                                break;
                        };
                        var $703 = $782;
                        break;
                    case 'e':
                        var $858 = String$nil;
                        var $703 = $858;
                        break;
                };
                var $701 = $703;
                break;
            case 'i':
                var $859 = self.slice(0, -1);
                var _bs$3 = $859;
                var self = _bs$3;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $861 = self.slice(0, -1);
                        var _bs$5 = $861;
                        var self = _bs$5;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $863 = self.slice(0, -1);
                                var _bs$7 = $863;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $865 = self.slice(0, -1);
                                        var _bs$9 = $865;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $867 = self.slice(0, -1);
                                                var _bs$11 = $867;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $869 = self.slice(0, -1);
                                                        var _bs$13 = $869;
                                                        var $870 = String$cons$(103, Kind$Name$from_bits$(_bs$13));
                                                        var $868 = $870;
                                                        break;
                                                    case 'i':
                                                        var $871 = self.slice(0, -1);
                                                        var _bs$13 = $871;
                                                        var $872 = String$cons$(104, Kind$Name$from_bits$(_bs$13));
                                                        var $868 = $872;
                                                        break;
                                                    case 'e':
                                                        var $873 = String$nil;
                                                        var $868 = $873;
                                                        break;
                                                };
                                                var $866 = $868;
                                                break;
                                            case 'i':
                                                var $874 = self.slice(0, -1);
                                                var _bs$11 = $874;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $876 = self.slice(0, -1);
                                                        var _bs$13 = $876;
                                                        var $877 = String$cons$(105, Kind$Name$from_bits$(_bs$13));
                                                        var $875 = $877;
                                                        break;
                                                    case 'i':
                                                        var $878 = self.slice(0, -1);
                                                        var _bs$13 = $878;
                                                        var $879 = String$cons$(106, Kind$Name$from_bits$(_bs$13));
                                                        var $875 = $879;
                                                        break;
                                                    case 'e':
                                                        var $880 = String$nil;
                                                        var $875 = $880;
                                                        break;
                                                };
                                                var $866 = $875;
                                                break;
                                            case 'e':
                                                var $881 = String$nil;
                                                var $866 = $881;
                                                break;
                                        };
                                        var $864 = $866;
                                        break;
                                    case 'i':
                                        var $882 = self.slice(0, -1);
                                        var _bs$9 = $882;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $884 = self.slice(0, -1);
                                                var _bs$11 = $884;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $886 = self.slice(0, -1);
                                                        var _bs$13 = $886;
                                                        var $887 = String$cons$(107, Kind$Name$from_bits$(_bs$13));
                                                        var $885 = $887;
                                                        break;
                                                    case 'i':
                                                        var $888 = self.slice(0, -1);
                                                        var _bs$13 = $888;
                                                        var $889 = String$cons$(108, Kind$Name$from_bits$(_bs$13));
                                                        var $885 = $889;
                                                        break;
                                                    case 'e':
                                                        var $890 = String$nil;
                                                        var $885 = $890;
                                                        break;
                                                };
                                                var $883 = $885;
                                                break;
                                            case 'i':
                                                var $891 = self.slice(0, -1);
                                                var _bs$11 = $891;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $893 = self.slice(0, -1);
                                                        var _bs$13 = $893;
                                                        var $894 = String$cons$(109, Kind$Name$from_bits$(_bs$13));
                                                        var $892 = $894;
                                                        break;
                                                    case 'i':
                                                        var $895 = self.slice(0, -1);
                                                        var _bs$13 = $895;
                                                        var $896 = String$cons$(110, Kind$Name$from_bits$(_bs$13));
                                                        var $892 = $896;
                                                        break;
                                                    case 'e':
                                                        var $897 = String$nil;
                                                        var $892 = $897;
                                                        break;
                                                };
                                                var $883 = $892;
                                                break;
                                            case 'e':
                                                var $898 = String$nil;
                                                var $883 = $898;
                                                break;
                                        };
                                        var $864 = $883;
                                        break;
                                    case 'e':
                                        var $899 = String$nil;
                                        var $864 = $899;
                                        break;
                                };
                                var $862 = $864;
                                break;
                            case 'i':
                                var $900 = self.slice(0, -1);
                                var _bs$7 = $900;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $902 = self.slice(0, -1);
                                        var _bs$9 = $902;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $904 = self.slice(0, -1);
                                                var _bs$11 = $904;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $906 = self.slice(0, -1);
                                                        var _bs$13 = $906;
                                                        var $907 = String$cons$(111, Kind$Name$from_bits$(_bs$13));
                                                        var $905 = $907;
                                                        break;
                                                    case 'i':
                                                        var $908 = self.slice(0, -1);
                                                        var _bs$13 = $908;
                                                        var $909 = String$cons$(112, Kind$Name$from_bits$(_bs$13));
                                                        var $905 = $909;
                                                        break;
                                                    case 'e':
                                                        var $910 = String$nil;
                                                        var $905 = $910;
                                                        break;
                                                };
                                                var $903 = $905;
                                                break;
                                            case 'i':
                                                var $911 = self.slice(0, -1);
                                                var _bs$11 = $911;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $913 = self.slice(0, -1);
                                                        var _bs$13 = $913;
                                                        var $914 = String$cons$(113, Kind$Name$from_bits$(_bs$13));
                                                        var $912 = $914;
                                                        break;
                                                    case 'i':
                                                        var $915 = self.slice(0, -1);
                                                        var _bs$13 = $915;
                                                        var $916 = String$cons$(114, Kind$Name$from_bits$(_bs$13));
                                                        var $912 = $916;
                                                        break;
                                                    case 'e':
                                                        var $917 = String$nil;
                                                        var $912 = $917;
                                                        break;
                                                };
                                                var $903 = $912;
                                                break;
                                            case 'e':
                                                var $918 = String$nil;
                                                var $903 = $918;
                                                break;
                                        };
                                        var $901 = $903;
                                        break;
                                    case 'i':
                                        var $919 = self.slice(0, -1);
                                        var _bs$9 = $919;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $921 = self.slice(0, -1);
                                                var _bs$11 = $921;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $923 = self.slice(0, -1);
                                                        var _bs$13 = $923;
                                                        var $924 = String$cons$(115, Kind$Name$from_bits$(_bs$13));
                                                        var $922 = $924;
                                                        break;
                                                    case 'i':
                                                        var $925 = self.slice(0, -1);
                                                        var _bs$13 = $925;
                                                        var $926 = String$cons$(116, Kind$Name$from_bits$(_bs$13));
                                                        var $922 = $926;
                                                        break;
                                                    case 'e':
                                                        var $927 = String$nil;
                                                        var $922 = $927;
                                                        break;
                                                };
                                                var $920 = $922;
                                                break;
                                            case 'i':
                                                var $928 = self.slice(0, -1);
                                                var _bs$11 = $928;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $930 = self.slice(0, -1);
                                                        var _bs$13 = $930;
                                                        var $931 = String$cons$(117, Kind$Name$from_bits$(_bs$13));
                                                        var $929 = $931;
                                                        break;
                                                    case 'i':
                                                        var $932 = self.slice(0, -1);
                                                        var _bs$13 = $932;
                                                        var $933 = String$cons$(118, Kind$Name$from_bits$(_bs$13));
                                                        var $929 = $933;
                                                        break;
                                                    case 'e':
                                                        var $934 = String$nil;
                                                        var $929 = $934;
                                                        break;
                                                };
                                                var $920 = $929;
                                                break;
                                            case 'e':
                                                var $935 = String$nil;
                                                var $920 = $935;
                                                break;
                                        };
                                        var $901 = $920;
                                        break;
                                    case 'e':
                                        var $936 = String$nil;
                                        var $901 = $936;
                                        break;
                                };
                                var $862 = $901;
                                break;
                            case 'e':
                                var $937 = String$nil;
                                var $862 = $937;
                                break;
                        };
                        var $860 = $862;
                        break;
                    case 'i':
                        var $938 = self.slice(0, -1);
                        var _bs$5 = $938;
                        var self = _bs$5;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $940 = self.slice(0, -1);
                                var _bs$7 = $940;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $942 = self.slice(0, -1);
                                        var _bs$9 = $942;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $944 = self.slice(0, -1);
                                                var _bs$11 = $944;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $946 = self.slice(0, -1);
                                                        var _bs$13 = $946;
                                                        var $947 = String$cons$(119, Kind$Name$from_bits$(_bs$13));
                                                        var $945 = $947;
                                                        break;
                                                    case 'i':
                                                        var $948 = self.slice(0, -1);
                                                        var _bs$13 = $948;
                                                        var $949 = String$cons$(120, Kind$Name$from_bits$(_bs$13));
                                                        var $945 = $949;
                                                        break;
                                                    case 'e':
                                                        var $950 = String$nil;
                                                        var $945 = $950;
                                                        break;
                                                };
                                                var $943 = $945;
                                                break;
                                            case 'i':
                                                var $951 = self.slice(0, -1);
                                                var _bs$11 = $951;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $953 = self.slice(0, -1);
                                                        var _bs$13 = $953;
                                                        var $954 = String$cons$(121, Kind$Name$from_bits$(_bs$13));
                                                        var $952 = $954;
                                                        break;
                                                    case 'i':
                                                        var $955 = self.slice(0, -1);
                                                        var _bs$13 = $955;
                                                        var $956 = String$cons$(122, Kind$Name$from_bits$(_bs$13));
                                                        var $952 = $956;
                                                        break;
                                                    case 'e':
                                                        var $957 = String$nil;
                                                        var $952 = $957;
                                                        break;
                                                };
                                                var $943 = $952;
                                                break;
                                            case 'e':
                                                var $958 = String$nil;
                                                var $943 = $958;
                                                break;
                                        };
                                        var $941 = $943;
                                        break;
                                    case 'i':
                                        var $959 = self.slice(0, -1);
                                        var _bs$9 = $959;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $961 = self.slice(0, -1);
                                                var _bs$11 = $961;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $963 = self.slice(0, -1);
                                                        var _bs$13 = $963;
                                                        var $964 = String$cons$(48, Kind$Name$from_bits$(_bs$13));
                                                        var $962 = $964;
                                                        break;
                                                    case 'i':
                                                        var $965 = self.slice(0, -1);
                                                        var _bs$13 = $965;
                                                        var $966 = String$cons$(49, Kind$Name$from_bits$(_bs$13));
                                                        var $962 = $966;
                                                        break;
                                                    case 'e':
                                                        var $967 = String$nil;
                                                        var $962 = $967;
                                                        break;
                                                };
                                                var $960 = $962;
                                                break;
                                            case 'i':
                                                var $968 = self.slice(0, -1);
                                                var _bs$11 = $968;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $970 = self.slice(0, -1);
                                                        var _bs$13 = $970;
                                                        var $971 = String$cons$(50, Kind$Name$from_bits$(_bs$13));
                                                        var $969 = $971;
                                                        break;
                                                    case 'i':
                                                        var $972 = self.slice(0, -1);
                                                        var _bs$13 = $972;
                                                        var $973 = String$cons$(51, Kind$Name$from_bits$(_bs$13));
                                                        var $969 = $973;
                                                        break;
                                                    case 'e':
                                                        var $974 = String$nil;
                                                        var $969 = $974;
                                                        break;
                                                };
                                                var $960 = $969;
                                                break;
                                            case 'e':
                                                var $975 = String$nil;
                                                var $960 = $975;
                                                break;
                                        };
                                        var $941 = $960;
                                        break;
                                    case 'e':
                                        var $976 = String$nil;
                                        var $941 = $976;
                                        break;
                                };
                                var $939 = $941;
                                break;
                            case 'i':
                                var $977 = self.slice(0, -1);
                                var _bs$7 = $977;
                                var self = _bs$7;
                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                    case 'o':
                                        var $979 = self.slice(0, -1);
                                        var _bs$9 = $979;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $981 = self.slice(0, -1);
                                                var _bs$11 = $981;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $983 = self.slice(0, -1);
                                                        var _bs$13 = $983;
                                                        var $984 = String$cons$(52, Kind$Name$from_bits$(_bs$13));
                                                        var $982 = $984;
                                                        break;
                                                    case 'i':
                                                        var $985 = self.slice(0, -1);
                                                        var _bs$13 = $985;
                                                        var $986 = String$cons$(53, Kind$Name$from_bits$(_bs$13));
                                                        var $982 = $986;
                                                        break;
                                                    case 'e':
                                                        var $987 = String$nil;
                                                        var $982 = $987;
                                                        break;
                                                };
                                                var $980 = $982;
                                                break;
                                            case 'i':
                                                var $988 = self.slice(0, -1);
                                                var _bs$11 = $988;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $990 = self.slice(0, -1);
                                                        var _bs$13 = $990;
                                                        var $991 = String$cons$(54, Kind$Name$from_bits$(_bs$13));
                                                        var $989 = $991;
                                                        break;
                                                    case 'i':
                                                        var $992 = self.slice(0, -1);
                                                        var _bs$13 = $992;
                                                        var $993 = String$cons$(55, Kind$Name$from_bits$(_bs$13));
                                                        var $989 = $993;
                                                        break;
                                                    case 'e':
                                                        var $994 = String$nil;
                                                        var $989 = $994;
                                                        break;
                                                };
                                                var $980 = $989;
                                                break;
                                            case 'e':
                                                var $995 = String$nil;
                                                var $980 = $995;
                                                break;
                                        };
                                        var $978 = $980;
                                        break;
                                    case 'i':
                                        var $996 = self.slice(0, -1);
                                        var _bs$9 = $996;
                                        var self = _bs$9;
                                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                            case 'o':
                                                var $998 = self.slice(0, -1);
                                                var _bs$11 = $998;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $1000 = self.slice(0, -1);
                                                        var _bs$13 = $1000;
                                                        var $1001 = String$cons$(56, Kind$Name$from_bits$(_bs$13));
                                                        var $999 = $1001;
                                                        break;
                                                    case 'i':
                                                        var $1002 = self.slice(0, -1);
                                                        var _bs$13 = $1002;
                                                        var $1003 = String$cons$(57, Kind$Name$from_bits$(_bs$13));
                                                        var $999 = $1003;
                                                        break;
                                                    case 'e':
                                                        var $1004 = String$nil;
                                                        var $999 = $1004;
                                                        break;
                                                };
                                                var $997 = $999;
                                                break;
                                            case 'i':
                                                var $1005 = self.slice(0, -1);
                                                var _bs$11 = $1005;
                                                var self = _bs$11;
                                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                                                    case 'o':
                                                        var $1007 = self.slice(0, -1);
                                                        var _bs$13 = $1007;
                                                        var $1008 = String$cons$(46, Kind$Name$from_bits$(_bs$13));
                                                        var $1006 = $1008;
                                                        break;
                                                    case 'i':
                                                        var $1009 = self.slice(0, -1);
                                                        var _bs$13 = $1009;
                                                        var $1010 = String$cons$(95, Kind$Name$from_bits$(_bs$13));
                                                        var $1006 = $1010;
                                                        break;
                                                    case 'e':
                                                        var $1011 = String$nil;
                                                        var $1006 = $1011;
                                                        break;
                                                };
                                                var $997 = $1006;
                                                break;
                                            case 'e':
                                                var $1012 = String$nil;
                                                var $997 = $1012;
                                                break;
                                        };
                                        var $978 = $997;
                                        break;
                                    case 'e':
                                        var $1013 = String$nil;
                                        var $978 = $1013;
                                        break;
                                };
                                var $939 = $978;
                                break;
                            case 'e':
                                var $1014 = String$nil;
                                var $939 = $1014;
                                break;
                        };
                        var $860 = $939;
                        break;
                    case 'e':
                        var $1015 = String$nil;
                        var $860 = $1015;
                        break;
                };
                var $701 = $860;
                break;
            case 'e':
                var $1016 = String$nil;
                var $701 = $1016;
                break;
        };
        return $701;
    };
    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);

    function Kind$Map$to_list$(_xs$2) {
        var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        var $1017 = List$mapped$(_kvs$3, (_kv$4 => {
            var self = _kv$4;
            switch (self._) {
                case 'Pair.new':
                    var $1019 = self.fst;
                    var $1020 = self.snd;
                    var $1021 = Pair$new$(Kind$Name$from_bits$($1019), $1020);
                    var $1018 = $1021;
                    break;
            };
            return $1018;
        }));
        return $1017;
    };
    const Kind$Map$to_list = x0 => Kind$Map$to_list$(x0);

    function Kind$Map$keys$(_xs$2) {
        var $1022 = List$mapped$(Kind$Map$to_list$(_xs$2), Pair$fst);
        return $1022;
    };
    const Kind$Map$keys = x0 => Kind$Map$keys$(x0);

    function Kind$Synth$load$cached$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $1024 = self.head;
                var $1025 = self.tail;
                var self = Kind$Synth$load$cached$is_loop$($1024, _defs$2);
                if (self) {
                    var $1027 = Kind$Synth$load$cached$($1025, _defs$2);
                    var $1026 = $1027;
                } else {
                    var _name$5 = $1024;
                    var $1028 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $1029 = _m$bind$6;
                        return $1029;
                    }))(Kind$Synth$load$cached$def$(_name$5))((_defn$6 => {
                        var self = _defn$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $1031 = self.value;
                                var self = $1031;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $1033 = self.term;
                                        var $1034 = self.type;
                                        var _defs$17 = Kind$Map$set$(_name$5, $1031, _defs$2);
                                        var _deps$18 = Kind$Map$new;
                                        var _deps$19 = Kind$Core$dependencies$go$($1033, _deps$18);
                                        var _deps$20 = Kind$Core$dependencies$go$($1034, _deps$19);
                                        var _deps$21 = Kind$Map$keys$(_deps$20);
                                        var $1035 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                            var $1036 = _m$bind$22;
                                            return $1036;
                                        }))(Kind$Synth$load$cached$(_deps$21, _defs$17))((_defs$22 => {
                                            var self = _defs$22;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $1038 = self.value;
                                                    var $1039 = Kind$Synth$load$cached$($1025, $1038);
                                                    var $1037 = $1039;
                                                    break;
                                                case 'Maybe.none':
                                                    var $1040 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                                        var $1041 = _m$pure$24;
                                                        return $1041;
                                                    }))(Maybe$none);
                                                    var $1037 = $1040;
                                                    break;
                                            };
                                            return $1037;
                                        }));
                                        var $1032 = $1035;
                                        break;
                                };
                                var $1030 = $1032;
                                break;
                            case 'Maybe.none':
                                var $1042 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                    var $1043 = _m$pure$8;
                                    return $1043;
                                }))(Maybe$none);
                                var $1030 = $1042;
                                break;
                        };
                        return $1030;
                    }));
                    var $1026 = $1028;
                };
                var $1023 = $1026;
                break;
            case 'List.nil':
                var $1044 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $1045 = _m$pure$4;
                    return $1045;
                }))(Maybe$some$(_defs$2));
                var $1023 = $1044;
                break;
        };
        return $1023;
    };
    const Kind$Synth$load$cached = x0 => x1 => Kind$Synth$load$cached$(x0, x1);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $1047 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $1046 = $1047;
        } else {
            var $1048 = self.charCodeAt(0);
            var $1049 = self.slice(1);
            var $1050 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $1046 = $1050;
        };
        return $1046;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$(_V$1) {
        var $1051 = null;
        return $1051;
    };
    const Parser = x0 => Parser$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $1052 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $1052;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.some':
                var $1054 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $1056 = self.value;
                        var self = $1054;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $1058 = self.idx;
                                var self = $1056;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $1060 = self.idx;
                                        var self = ($1058 > $1060);
                                        if (self) {
                                            var $1062 = _a$1;
                                            var $1061 = $1062;
                                        } else {
                                            var $1063 = _b$2;
                                            var $1061 = $1063;
                                        };
                                        var $1059 = $1061;
                                        break;
                                };
                                var $1057 = $1059;
                                break;
                        };
                        var $1055 = $1057;
                        break;
                    case 'Maybe.none':
                        var $1064 = _a$1;
                        var $1055 = $1064;
                        break;
                };
                var $1053 = $1055;
                break;
            case 'Maybe.none':
                var $1065 = _b$2;
                var $1053 = $1065;
                break;
        };
        return $1053;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.cons':
                        var $1066 = self.head;
                        var $1067 = self.tail;
                        var _parsed$8 = $1066(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1069 = self.idx;
                                var $1070 = self.code;
                                var $1071 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($1069, $1070, $1071));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $1072 = Parser$first_of$go$($1067, _err$13, _idx$4, _code$5);
                                var $1068 = $1072;
                                break;
                            case 'Parser.Reply.value':
                                var $1073 = self.idx;
                                var $1074 = self.code;
                                var $1075 = self.val;
                                var $1076 = Parser$Reply$value$($1073, $1074, $1075);
                                var $1068 = $1076;
                                break;
                        };
                        return $1068;
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.some':
                                var $1078 = self.value;
                                var self = $1078;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $1080 = self.idx;
                                        var $1081 = self.code;
                                        var $1082 = self.err;
                                        var $1083 = Parser$Reply$error$($1080, $1081, $1082);
                                        var $1079 = $1083;
                                        break;
                                };
                                var $1077 = $1079;
                                break;
                            case 'Maybe.none':
                                var $1084 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $1077 = $1084;
                                break;
                        };
                        return $1077;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $1085 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $1085;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.cons':
                        var $1086 = self.head;
                        var $1087 = self.tail;
                        var $1088 = String$flatten$go$($1087, (_res$2 + $1086));
                        return $1088;
                    case 'List.nil':
                        var $1089 = _res$2;
                        return $1089;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $1090 = String$flatten$go$(_xs$1, "");
        return $1090;
    };
    const String$flatten = x0 => String$flatten$(x0);

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $1092 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $1091 = $1092;
        } else {
            var $1093 = self.charCodeAt(0);
            var $1094 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $1096 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $1095 = $1096;
            } else {
                var $1097 = self.charCodeAt(0);
                var $1098 = self.slice(1);
                var self = ($1093 === $1097);
                if (self) {
                    var $1100 = Parser$text$($1094, Nat$succ$(_idx$2), $1098);
                    var $1099 = $1100;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($1097, String$nil), List$cons$("\'.", List$nil))))));
                    var $1101 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $1099 = $1101;
                };
                var $1095 = $1099;
            };
            var $1091 = $1095;
        };
        return $1091;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1103 = self.err;
                var $1104 = Parser$Reply$error$(_idx$2, _code$3, $1103);
                var $1102 = $1104;
                break;
            case 'Parser.Reply.value':
                var $1105 = self.idx;
                var $1106 = self.code;
                var $1107 = self.val;
                var $1108 = Parser$Reply$value$($1105, $1106, $1107);
                var $1102 = $1108;
                break;
        };
        return $1102;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $1110 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $1109 = $1110;
        } else {
            var $1111 = self.charCodeAt(0);
            var $1112 = self.slice(1);
            var $1113 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $1109 = $1113;
        };
        return $1109;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $1115 = self.idx;
                        var $1116 = self.code;
                        var $1117 = Parser$Reply$value$($1115, $1116, List$reverse$(_values$4));
                        var $1114 = $1117;
                        break;
                    case 'Parser.Reply.error':
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1119 = self.idx;
                                var $1120 = self.code;
                                var $1121 = self.err;
                                var $1122 = Parser$Reply$error$($1119, $1120, $1121);
                                var $1118 = $1122;
                                break;
                            case 'Parser.Reply.value':
                                var $1123 = self.idx;
                                var $1124 = self.code;
                                var $1125 = self.val;
                                var $1126 = Parser$until$go$(_until$2, _parse$3, List$cons$($1125, _values$4), $1123, $1124);
                                var $1118 = $1126;
                                break;
                        };
                        var $1114 = $1118;
                        break;
                };
                return $1114;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $1127 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $1127;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $1129 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $1128 = $1129;
        } else {
            var $1130 = self.charCodeAt(0);
            var $1131 = self.slice(1);
            var $1132 = Parser$Reply$value$(Nat$succ$(_idx$1), $1131, $1130);
            var $1128 = $1132;
        };
        return $1128;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1134 = self.idx;
                var $1135 = self.code;
                var $1136 = self.err;
                var $1137 = Parser$Reply$error$($1134, $1135, $1136);
                var $1133 = $1137;
                break;
            case 'Parser.Reply.value':
                var $1138 = self.idx;
                var $1139 = self.code;
                var _endl_or_eof$6 = Parser$first_of$(List$cons$(Parser$text("\u{a}"), List$cons$(Parser$eof, List$nil)));
                var self = Parser$until$(_endl_or_eof$6, Parser$one)($1138)($1139);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1141 = self.idx;
                        var $1142 = self.code;
                        var $1143 = self.err;
                        var $1144 = Parser$Reply$error$($1141, $1142, $1143);
                        var $1140 = $1144;
                        break;
                    case 'Parser.Reply.value':
                        var $1145 = self.idx;
                        var $1146 = self.code;
                        var $1147 = Parser$Reply$value$($1145, $1146, Unit$new);
                        var $1140 = $1147;
                        break;
                };
                var $1133 = $1140;
                break;
        };
        return $1133;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $1148 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $1148;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Kind$Parser$init$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1150 = self.idx;
                var $1151 = self.code;
                var $1152 = self.err;
                var $1153 = Parser$Reply$error$($1150, $1151, $1152);
                var $1149 = $1153;
                break;
            case 'Parser.Reply.value':
                var $1154 = self.idx;
                var $1155 = self.code;
                var self = Parser$get_index$($1154, $1155);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1157 = self.idx;
                        var $1158 = self.code;
                        var $1159 = self.err;
                        var $1160 = Parser$Reply$error$($1157, $1158, $1159);
                        var $1156 = $1160;
                        break;
                    case 'Parser.Reply.value':
                        var $1161 = self.idx;
                        var $1162 = self.code;
                        var $1163 = self.val;
                        var $1164 = Parser$Reply$value$($1161, $1162, $1163);
                        var $1156 = $1164;
                        break;
                };
                var $1149 = $1156;
                break;
        };
        return $1149;
    };
    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $1165 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $1165;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function Kind$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $1167 = Bool$true;
            var $1166 = $1167;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $1169 = Bool$true;
                var $1168 = $1169;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $1171 = Bool$true;
                    var $1170 = $1171;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $1173 = Bool$true;
                        var $1172 = $1173;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $1175 = Bool$true;
                            var $1174 = $1175;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $1177 = Bool$true;
                                var $1176 = $1177;
                            } else {
                                var $1178 = Bool$false;
                                var $1176 = $1178;
                            };
                            var $1174 = $1176;
                        };
                        var $1172 = $1174;
                    };
                    var $1170 = $1172;
                };
                var $1168 = $1170;
            };
            var $1166 = $1168;
        };
        return $1166;
    };
    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);

    function Kind$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $1180 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $1179 = $1180;
        } else {
            var $1181 = self.charCodeAt(0);
            var $1182 = self.slice(1);
            var self = Kind$Name$is_letter$($1181);
            if (self) {
                var $1184 = Parser$Reply$value$(Nat$succ$(_idx$1), $1182, $1181);
                var $1183 = $1184;
            } else {
                var $1185 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $1183 = $1185;
            };
            var $1179 = $1183;
        };
        return $1179;
    };
    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $1187 = self.head;
                var $1188 = self.tail;
                var $1189 = _cons$5($1187)(List$fold$($1188, _nil$4, _cons$5));
                var $1186 = $1189;
                break;
            case 'List.nil':
                var $1190 = _nil$4;
                var $1186 = $1190;
                break;
        };
        return $1186;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Kind$Parser$name1$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1192 = self.idx;
                var $1193 = self.code;
                var $1194 = self.err;
                var $1195 = Parser$Reply$error$($1192, $1193, $1194);
                var $1191 = $1195;
                break;
            case 'Parser.Reply.value':
                var $1196 = self.idx;
                var $1197 = self.code;
                var self = Parser$many1$(Kind$Parser$letter, $1196, $1197);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1199 = self.idx;
                        var $1200 = self.code;
                        var $1201 = self.err;
                        var $1202 = Parser$Reply$error$($1199, $1200, $1201);
                        var $1198 = $1202;
                        break;
                    case 'Parser.Reply.value':
                        var $1203 = self.idx;
                        var $1204 = self.code;
                        var $1205 = self.val;
                        var $1206 = Parser$Reply$value$($1203, $1204, List$fold$($1205, String$nil, String$cons));
                        var $1198 = $1206;
                        break;
                };
                var $1191 = $1198;
                break;
        };
        return $1191;
    };
    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);

    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Kind$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1208 = self.idx;
                var $1209 = self.code;
                var $1210 = self.err;
                var $1211 = Parser$Reply$error$($1208, $1209, $1210);
                var $1207 = $1211;
                break;
            case 'Parser.Reply.value':
                var $1212 = self.idx;
                var $1213 = self.code;
                var $1214 = Parser$text$(_text$1, $1212, $1213);
                var $1207 = $1214;
                break;
        };
        return $1207;
    };
    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1216 = self.idx;
                var $1217 = self.code;
                var $1218 = self.err;
                var $1219 = Parser$Reply$error$($1216, $1217, $1218);
                var $1215 = $1219;
                break;
            case 'Parser.Reply.value':
                var $1220 = self.idx;
                var $1221 = self.code;
                var $1222 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($1220)($1221);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1224 = self.idx;
                        var $1225 = self.code;
                        var $1226 = self.err;
                        var $1227 = Parser$Reply$error$($1224, $1225, $1226);
                        var $1223 = $1227;
                        break;
                    case 'Parser.Reply.value':
                        var $1228 = self.idx;
                        var $1229 = self.code;
                        var $1230 = self.val;
                        var $1231 = Parser$Reply$value$($1228, $1229, List$cons$($1222, $1230));
                        var $1223 = $1231;
                        break;
                };
                var $1215 = $1223;
                break;
        };
        return $1215;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.value':
                var $1233 = self.idx;
                var $1234 = self.code;
                var $1235 = self.val;
                var $1236 = Parser$Reply$value$($1233, $1234, Maybe$some$($1235));
                var $1232 = $1236;
                break;
            case 'Parser.Reply.error':
                var $1237 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $1232 = $1237;
                break;
        };
        return $1232;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Kind$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1239 = self.idx;
                var $1240 = self.code;
                var $1241 = self.err;
                var $1242 = Parser$Reply$error$($1239, $1240, $1241);
                var $1238 = $1242;
                break;
            case 'Parser.Reply.value':
                var $1243 = self.idx;
                var $1244 = self.code;
                var self = _parser$2($1243)($1244);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1246 = self.idx;
                        var $1247 = self.code;
                        var $1248 = self.err;
                        var $1249 = Parser$Reply$error$($1246, $1247, $1248);
                        var $1245 = $1249;
                        break;
                    case 'Parser.Reply.value':
                        var $1250 = self.idx;
                        var $1251 = self.code;
                        var $1252 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $1250, $1251);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1254 = self.idx;
                                var $1255 = self.code;
                                var $1256 = self.err;
                                var $1257 = Parser$Reply$error$($1254, $1255, $1256);
                                var $1253 = $1257;
                                break;
                            case 'Parser.Reply.value':
                                var $1258 = self.idx;
                                var $1259 = self.code;
                                var $1260 = Parser$Reply$value$($1258, $1259, $1252);
                                var $1253 = $1260;
                                break;
                        };
                        var $1245 = $1253;
                        break;
                };
                var $1238 = $1245;
                break;
        };
        return $1238;
    };
    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);

    function Kind$Parser$name$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1262 = self.idx;
                var $1263 = self.code;
                var $1264 = self.err;
                var $1265 = Parser$Reply$error$($1262, $1263, $1264);
                var $1261 = $1265;
                break;
            case 'Parser.Reply.value':
                var $1266 = self.idx;
                var $1267 = self.code;
                var self = Parser$many$(Kind$Parser$letter)($1266)($1267);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1269 = self.idx;
                        var $1270 = self.code;
                        var $1271 = self.err;
                        var $1272 = Parser$Reply$error$($1269, $1270, $1271);
                        var $1268 = $1272;
                        break;
                    case 'Parser.Reply.value':
                        var $1273 = self.idx;
                        var $1274 = self.code;
                        var $1275 = self.val;
                        var $1276 = Parser$Reply$value$($1273, $1274, List$fold$($1275, String$nil, String$cons));
                        var $1268 = $1276;
                        break;
                };
                var $1261 = $1268;
                break;
        };
        return $1261;
    };
    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);

    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1278 = self.idx;
                var $1279 = self.code;
                var $1280 = self.err;
                var $1281 = Parser$Reply$error$($1278, $1279, $1280);
                var $1277 = $1281;
                break;
            case 'Parser.Reply.value':
                var $1282 = self.idx;
                var $1283 = self.code;
                var $1284 = self.val;
                var _orig$7 = Pair$new$(_from$1, $1284);
                var $1285 = Parser$Reply$value$($1282, $1283, _orig$7);
                var $1277 = $1285;
                break;
        };
        return $1277;
    };
    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);

    function Kind$Term$ori$(_orig$1, _expr$2) {
        var $1286 = ({
            _: 'Kind.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $1286;
    };
    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);

    function Kind$Parser$forall$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1288 = self.idx;
                var $1289 = self.code;
                var $1290 = self.err;
                var $1291 = Parser$Reply$error$($1288, $1289, $1290);
                var $1287 = $1291;
                break;
            case 'Parser.Reply.value':
                var $1292 = self.idx;
                var $1293 = self.code;
                var $1294 = self.val;
                var self = Kind$Parser$name$($1292, $1293);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1296 = self.idx;
                        var $1297 = self.code;
                        var $1298 = self.err;
                        var $1299 = Parser$Reply$error$($1296, $1297, $1298);
                        var $1295 = $1299;
                        break;
                    case 'Parser.Reply.value':
                        var $1300 = self.idx;
                        var $1301 = self.code;
                        var $1302 = self.val;
                        var self = Kind$Parser$binder$(":", $1300, $1301);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1304 = self.idx;
                                var $1305 = self.code;
                                var $1306 = self.err;
                                var $1307 = Parser$Reply$error$($1304, $1305, $1306);
                                var $1303 = $1307;
                                break;
                            case 'Parser.Reply.value':
                                var $1308 = self.idx;
                                var $1309 = self.code;
                                var $1310 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text("->"), $1308, $1309);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1312 = self.idx;
                                        var $1313 = self.code;
                                        var $1314 = self.err;
                                        var $1315 = Parser$Reply$error$($1312, $1313, $1314);
                                        var $1311 = $1315;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1316 = self.idx;
                                        var $1317 = self.code;
                                        var self = Kind$Parser$term$($1316, $1317);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1319 = self.idx;
                                                var $1320 = self.code;
                                                var $1321 = self.err;
                                                var $1322 = Parser$Reply$error$($1319, $1320, $1321);
                                                var $1318 = $1322;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1323 = self.idx;
                                                var $1324 = self.code;
                                                var $1325 = self.val;
                                                var _term$18 = List$fold$($1310, $1325, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $1328 = self.eras;
                                                            var $1329 = self.name;
                                                            var $1330 = self.term;
                                                            var $1331 = Kind$Term$all$($1328, "", $1329, $1330, (_s$23 => _x$24 => {
                                                                var $1332 = _t$19;
                                                                return $1332;
                                                            }));
                                                            var $1327 = $1331;
                                                            break;
                                                    };
                                                    return $1327;
                                                }));
                                                var self = Kind$Parser$stop$($1294, $1323, $1324);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1333 = self.idx;
                                                        var $1334 = self.code;
                                                        var $1335 = self.err;
                                                        var $1336 = Parser$Reply$error$($1333, $1334, $1335);
                                                        var $1326 = $1336;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1337 = self.idx;
                                                        var $1338 = self.code;
                                                        var $1339 = self.val;
                                                        var $1340 = Parser$Reply$value$($1337, $1338, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Kind.Term.all':
                                                                    var $1341 = self.eras;
                                                                    var $1342 = self.name;
                                                                    var $1343 = self.xtyp;
                                                                    var $1344 = self.body;
                                                                    var $1345 = Kind$Term$ori$($1339, Kind$Term$all$($1341, $1302, $1342, $1343, $1344));
                                                                    return $1345;
                                                                case 'Kind.Term.var':
                                                                case 'Kind.Term.ref':
                                                                case 'Kind.Term.typ':
                                                                case 'Kind.Term.lam':
                                                                case 'Kind.Term.app':
                                                                case 'Kind.Term.let':
                                                                case 'Kind.Term.def':
                                                                case 'Kind.Term.ann':
                                                                case 'Kind.Term.gol':
                                                                case 'Kind.Term.hol':
                                                                case 'Kind.Term.nat':
                                                                case 'Kind.Term.chr':
                                                                case 'Kind.Term.str':
                                                                case 'Kind.Term.cse':
                                                                case 'Kind.Term.ori':
                                                                    var $1346 = _term$18;
                                                                    return $1346;
                                                            };
                                                        })());
                                                        var $1326 = $1340;
                                                        break;
                                                };
                                                var $1318 = $1326;
                                                break;
                                        };
                                        var $1311 = $1318;
                                        break;
                                };
                                var $1303 = $1311;
                                break;
                        };
                        var $1295 = $1303;
                        break;
                };
                var $1287 = $1295;
                break;
        };
        return $1287;
    };
    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);

    function Kind$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $1348 = self.head;
                var $1349 = self.tail;
                var $1350 = Kind$Term$lam$($1348, (_x$5 => {
                    var $1351 = Kind$Parser$make_lambda$($1349, _body$2);
                    return $1351;
                }));
                var $1347 = $1350;
                break;
            case 'List.nil':
                var $1352 = _body$2;
                var $1347 = $1352;
                break;
        };
        return $1347;
    };
    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);

    function Kind$Parser$lambda$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1354 = self.idx;
                var $1355 = self.code;
                var $1356 = self.err;
                var $1357 = Parser$Reply$error$($1354, $1355, $1356);
                var $1353 = $1357;
                break;
            case 'Parser.Reply.value':
                var $1358 = self.idx;
                var $1359 = self.code;
                var $1360 = self.val;
                var self = Kind$Parser$text$("(", $1358, $1359);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1362 = self.idx;
                        var $1363 = self.code;
                        var $1364 = self.err;
                        var $1365 = Parser$Reply$error$($1362, $1363, $1364);
                        var $1361 = $1365;
                        break;
                    case 'Parser.Reply.value':
                        var $1366 = self.idx;
                        var $1367 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$name1), $1366, $1367);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1369 = self.idx;
                                var $1370 = self.code;
                                var $1371 = self.err;
                                var $1372 = Parser$Reply$error$($1369, $1370, $1371);
                                var $1368 = $1372;
                                break;
                            case 'Parser.Reply.value':
                                var $1373 = self.idx;
                                var $1374 = self.code;
                                var $1375 = self.val;
                                var self = Kind$Parser$term$($1373, $1374);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1377 = self.idx;
                                        var $1378 = self.code;
                                        var $1379 = self.err;
                                        var $1380 = Parser$Reply$error$($1377, $1378, $1379);
                                        var $1376 = $1380;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1381 = self.idx;
                                        var $1382 = self.code;
                                        var $1383 = self.val;
                                        var self = Kind$Parser$stop$($1360, $1381, $1382);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1385 = self.idx;
                                                var $1386 = self.code;
                                                var $1387 = self.err;
                                                var $1388 = Parser$Reply$error$($1385, $1386, $1387);
                                                var $1384 = $1388;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1389 = self.idx;
                                                var $1390 = self.code;
                                                var $1391 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1375, $1383);
                                                var $1392 = Parser$Reply$value$($1389, $1390, Kind$Term$ori$($1391, _expr$18));
                                                var $1384 = $1392;
                                                break;
                                        };
                                        var $1376 = $1384;
                                        break;
                                };
                                var $1368 = $1376;
                                break;
                        };
                        var $1361 = $1368;
                        break;
                };
                var $1353 = $1361;
                break;
        };
        return $1353;
    };
    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);

    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1394 = self.idx;
                var $1395 = self.code;
                var $1396 = self.err;
                var $1397 = Parser$Reply$error$($1394, $1395, $1396);
                var $1393 = $1397;
                break;
            case 'Parser.Reply.value':
                var $1398 = self.idx;
                var $1399 = self.code;
                var $1400 = self.val;
                var self = Kind$Parser$text$("<", $1398, $1399);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1402 = self.idx;
                        var $1403 = self.code;
                        var $1404 = self.err;
                        var $1405 = Parser$Reply$error$($1402, $1403, $1404);
                        var $1401 = $1405;
                        break;
                    case 'Parser.Reply.value':
                        var $1406 = self.idx;
                        var $1407 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(">"), Kind$Parser$item(Kind$Parser$name1), $1406, $1407);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1409 = self.idx;
                                var $1410 = self.code;
                                var $1411 = self.err;
                                var $1412 = Parser$Reply$error$($1409, $1410, $1411);
                                var $1408 = $1412;
                                break;
                            case 'Parser.Reply.value':
                                var $1413 = self.idx;
                                var $1414 = self.code;
                                var $1415 = self.val;
                                var self = Kind$Parser$term$($1413, $1414);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1417 = self.idx;
                                        var $1418 = self.code;
                                        var $1419 = self.err;
                                        var $1420 = Parser$Reply$error$($1417, $1418, $1419);
                                        var $1416 = $1420;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1421 = self.idx;
                                        var $1422 = self.code;
                                        var $1423 = self.val;
                                        var self = Kind$Parser$stop$($1400, $1421, $1422);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1425 = self.idx;
                                                var $1426 = self.code;
                                                var $1427 = self.err;
                                                var $1428 = Parser$Reply$error$($1425, $1426, $1427);
                                                var $1424 = $1428;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1429 = self.idx;
                                                var $1430 = self.code;
                                                var $1431 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1415, $1423);
                                                var $1432 = Parser$Reply$value$($1429, $1430, Kind$Term$ori$($1431, _expr$18));
                                                var $1424 = $1432;
                                                break;
                                        };
                                        var $1416 = $1424;
                                        break;
                                };
                                var $1408 = $1416;
                                break;
                        };
                        var $1401 = $1408;
                        break;
                };
                var $1393 = $1401;
                break;
        };
        return $1393;
    };
    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);

    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1434 = self.idx;
                var $1435 = self.code;
                var $1436 = self.err;
                var $1437 = Parser$Reply$error$($1434, $1435, $1436);
                var $1433 = $1437;
                break;
            case 'Parser.Reply.value':
                var $1438 = self.idx;
                var $1439 = self.code;
                var $1440 = self.val;
                var self = Kind$Parser$text$("()", $1438, $1439);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1442 = self.idx;
                        var $1443 = self.code;
                        var $1444 = self.err;
                        var $1445 = Parser$Reply$error$($1442, $1443, $1444);
                        var $1441 = $1445;
                        break;
                    case 'Parser.Reply.value':
                        var $1446 = self.idx;
                        var $1447 = self.code;
                        var self = Kind$Parser$term$($1446, $1447);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1449 = self.idx;
                                var $1450 = self.code;
                                var $1451 = self.err;
                                var $1452 = Parser$Reply$error$($1449, $1450, $1451);
                                var $1448 = $1452;
                                break;
                            case 'Parser.Reply.value':
                                var $1453 = self.idx;
                                var $1454 = self.code;
                                var $1455 = self.val;
                                var self = Kind$Parser$stop$($1440, $1453, $1454);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1457 = self.idx;
                                        var $1458 = self.code;
                                        var $1459 = self.err;
                                        var $1460 = Parser$Reply$error$($1457, $1458, $1459);
                                        var $1456 = $1460;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1461 = self.idx;
                                        var $1462 = self.code;
                                        var $1463 = self.val;
                                        var _expr$15 = Kind$Term$lam$("", (_x$15 => {
                                            var $1465 = $1455;
                                            return $1465;
                                        }));
                                        var $1464 = Parser$Reply$value$($1461, $1462, Kind$Term$ori$($1463, _expr$15));
                                        var $1456 = $1464;
                                        break;
                                };
                                var $1448 = $1456;
                                break;
                        };
                        var $1441 = $1448;
                        break;
                };
                var $1433 = $1441;
                break;
        };
        return $1433;
    };
    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);

    function Kind$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1467 = self.idx;
                var $1468 = self.code;
                var $1469 = self.err;
                var $1470 = Parser$Reply$error$($1467, $1468, $1469);
                var $1466 = $1470;
                break;
            case 'Parser.Reply.value':
                var $1471 = self.idx;
                var $1472 = self.code;
                var $1473 = self.val;
                var self = Kind$Parser$text$("(", $1471, $1472);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1475 = self.idx;
                        var $1476 = self.code;
                        var $1477 = self.err;
                        var $1478 = Parser$Reply$error$($1475, $1476, $1477);
                        var $1474 = $1478;
                        break;
                    case 'Parser.Reply.value':
                        var $1479 = self.idx;
                        var $1480 = self.code;
                        var self = Kind$Parser$term$($1479, $1480);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1482 = self.idx;
                                var $1483 = self.code;
                                var $1484 = self.err;
                                var $1485 = Parser$Reply$error$($1482, $1483, $1484);
                                var $1481 = $1485;
                                break;
                            case 'Parser.Reply.value':
                                var $1486 = self.idx;
                                var $1487 = self.code;
                                var $1488 = self.val;
                                var self = Kind$Parser$text$(")", $1486, $1487);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1490 = self.idx;
                                        var $1491 = self.code;
                                        var $1492 = self.err;
                                        var $1493 = Parser$Reply$error$($1490, $1491, $1492);
                                        var $1489 = $1493;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1494 = self.idx;
                                        var $1495 = self.code;
                                        var self = Kind$Parser$stop$($1473, $1494, $1495);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1497 = self.idx;
                                                var $1498 = self.code;
                                                var $1499 = self.err;
                                                var $1500 = Parser$Reply$error$($1497, $1498, $1499);
                                                var $1496 = $1500;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1501 = self.idx;
                                                var $1502 = self.code;
                                                var $1503 = self.val;
                                                var $1504 = Parser$Reply$value$($1501, $1502, Kind$Term$ori$($1503, $1488));
                                                var $1496 = $1504;
                                                break;
                                        };
                                        var $1489 = $1496;
                                        break;
                                };
                                var $1481 = $1489;
                                break;
                        };
                        var $1474 = $1481;
                        break;
                };
                var $1466 = $1474;
                break;
        };
        return $1466;
    };
    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);

    function Kind$Term$hol$(_path$1) {
        var $1505 = ({
            _: 'Kind.Term.hol',
            'path': _path$1
        });
        return $1505;
    };
    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);

    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1507 = self.idx;
                var $1508 = self.code;
                var $1509 = self.err;
                var $1510 = Parser$Reply$error$($1507, $1508, $1509);
                var $1506 = $1510;
                break;
            case 'Parser.Reply.value':
                var $1511 = self.idx;
                var $1512 = self.code;
                var $1513 = self.val;
                var self = Kind$Parser$text$("let ", $1511, $1512);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1515 = self.idx;
                        var $1516 = self.code;
                        var $1517 = self.err;
                        var $1518 = Parser$Reply$error$($1515, $1516, $1517);
                        var $1514 = $1518;
                        break;
                    case 'Parser.Reply.value':
                        var $1519 = self.idx;
                        var $1520 = self.code;
                        var self = Kind$Parser$name1$($1519, $1520);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1522 = self.idx;
                                var $1523 = self.code;
                                var $1524 = self.err;
                                var $1525 = Parser$Reply$error$($1522, $1523, $1524);
                                var $1521 = $1525;
                                break;
                            case 'Parser.Reply.value':
                                var $1526 = self.idx;
                                var $1527 = self.code;
                                var $1528 = self.val;
                                var self = Kind$Parser$text$("=", $1526, $1527);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1530 = self.idx;
                                        var $1531 = self.code;
                                        var $1532 = self.err;
                                        var $1533 = Parser$Reply$error$($1530, $1531, $1532);
                                        var $1529 = $1533;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1534 = self.idx;
                                        var $1535 = self.code;
                                        var self = Kind$Parser$text$("for ", $1534, $1535);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1537 = self.idx;
                                                var $1538 = self.code;
                                                var $1539 = self.err;
                                                var $1540 = Parser$Reply$error$($1537, $1538, $1539);
                                                var $1536 = $1540;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1541 = self.idx;
                                                var $1542 = self.code;
                                                var self = Kind$Parser$name1$($1541, $1542);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1544 = self.idx;
                                                        var $1545 = self.code;
                                                        var $1546 = self.err;
                                                        var $1547 = Parser$Reply$error$($1544, $1545, $1546);
                                                        var $1543 = $1547;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1548 = self.idx;
                                                        var $1549 = self.code;
                                                        var $1550 = self.val;
                                                        var self = Kind$Parser$text$(":", $1548, $1549);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1552 = self.idx;
                                                                var $1553 = self.code;
                                                                var $1554 = self.err;
                                                                var $1555 = Parser$Reply$error$($1552, $1553, $1554);
                                                                var $1551 = $1555;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1556 = self.idx;
                                                                var $1557 = self.code;
                                                                var self = Kind$Parser$text$("U32", $1556, $1557);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1559 = self.idx;
                                                                        var $1560 = self.code;
                                                                        var $1561 = self.err;
                                                                        var $1562 = Parser$Reply$error$($1559, $1560, $1561);
                                                                        var $1558 = $1562;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1563 = self.idx;
                                                                        var $1564 = self.code;
                                                                        var self = Kind$Parser$text$("from", $1563, $1564);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1566 = self.idx;
                                                                                var $1567 = self.code;
                                                                                var $1568 = self.err;
                                                                                var $1569 = Parser$Reply$error$($1566, $1567, $1568);
                                                                                var $1565 = $1569;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1570 = self.idx;
                                                                                var $1571 = self.code;
                                                                                var self = Kind$Parser$term$($1570, $1571);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1573 = self.idx;
                                                                                        var $1574 = self.code;
                                                                                        var $1575 = self.err;
                                                                                        var $1576 = Parser$Reply$error$($1573, $1574, $1575);
                                                                                        var $1572 = $1576;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1577 = self.idx;
                                                                                        var $1578 = self.code;
                                                                                        var $1579 = self.val;
                                                                                        var self = Kind$Parser$text$("to", $1577, $1578);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1581 = self.idx;
                                                                                                var $1582 = self.code;
                                                                                                var $1583 = self.err;
                                                                                                var $1584 = Parser$Reply$error$($1581, $1582, $1583);
                                                                                                var $1580 = $1584;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1585 = self.idx;
                                                                                                var $1586 = self.code;
                                                                                                var self = Kind$Parser$term$($1585, $1586);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1588 = self.idx;
                                                                                                        var $1589 = self.code;
                                                                                                        var $1590 = self.err;
                                                                                                        var $1591 = Parser$Reply$error$($1588, $1589, $1590);
                                                                                                        var $1587 = $1591;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1592 = self.idx;
                                                                                                        var $1593 = self.code;
                                                                                                        var $1594 = self.val;
                                                                                                        var self = Kind$Parser$text$(":", $1592, $1593);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1596 = self.idx;
                                                                                                                var $1597 = self.code;
                                                                                                                var $1598 = self.err;
                                                                                                                var $1599 = Parser$Reply$error$($1596, $1597, $1598);
                                                                                                                var $1595 = $1599;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1600 = self.idx;
                                                                                                                var $1601 = self.code;
                                                                                                                var self = Kind$Parser$term$($1600, $1601);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1603 = self.idx;
                                                                                                                        var $1604 = self.code;
                                                                                                                        var $1605 = self.err;
                                                                                                                        var $1606 = Parser$Reply$error$($1603, $1604, $1605);
                                                                                                                        var $1602 = $1606;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1607 = self.idx;
                                                                                                                        var $1608 = self.code;
                                                                                                                        var $1609 = self.val;
                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1607, $1608);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1611 = self.idx;
                                                                                                                                var $1612 = self.code;
                                                                                                                                var $1613 = self.err;
                                                                                                                                var $1614 = Parser$Reply$error$($1611, $1612, $1613);
                                                                                                                                var $1610 = $1614;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1615 = self.idx;
                                                                                                                                var $1616 = self.code;
                                                                                                                                var self = Kind$Parser$term$($1615, $1616);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1618 = self.idx;
                                                                                                                                        var $1619 = self.code;
                                                                                                                                        var $1620 = self.err;
                                                                                                                                        var $1621 = Parser$Reply$error$($1618, $1619, $1620);
                                                                                                                                        var $1617 = $1621;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1622 = self.idx;
                                                                                                                                        var $1623 = self.code;
                                                                                                                                        var $1624 = self.val;
                                                                                                                                        var self = Kind$Parser$stop$($1513, $1622, $1623);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $1626 = self.idx;
                                                                                                                                                var $1627 = self.code;
                                                                                                                                                var $1628 = self.err;
                                                                                                                                                var $1629 = Parser$Reply$error$($1626, $1627, $1628);
                                                                                                                                                var $1625 = $1629;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $1630 = self.idx;
                                                                                                                                                var $1631 = self.code;
                                                                                                                                                var $1632 = self.val;
                                                                                                                                                var _term$54 = Kind$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($1528));
                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $1579);
                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $1594);
                                                                                                                                                var _lamb$59 = Kind$Term$lam$($1550, (_e$59 => {
                                                                                                                                                    var $1634 = Kind$Term$lam$($1528, (_s$60 => {
                                                                                                                                                        var $1635 = $1609;
                                                                                                                                                        return $1635;
                                                                                                                                                    }));
                                                                                                                                                    return $1634;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Kind$Term$let$($1528, _term$60, (_x$61 => {
                                                                                                                                                    var $1636 = $1624;
                                                                                                                                                    return $1636;
                                                                                                                                                }));
                                                                                                                                                var $1633 = Parser$Reply$value$($1630, $1631, Kind$Term$ori$($1632, _term$61));
                                                                                                                                                var $1625 = $1633;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $1617 = $1625;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1610 = $1617;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1602 = $1610;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1595 = $1602;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1587 = $1595;
                                                                                                        break;
                                                                                                };
                                                                                                var $1580 = $1587;
                                                                                                break;
                                                                                        };
                                                                                        var $1572 = $1580;
                                                                                        break;
                                                                                };
                                                                                var $1565 = $1572;
                                                                                break;
                                                                        };
                                                                        var $1558 = $1565;
                                                                        break;
                                                                };
                                                                var $1551 = $1558;
                                                                break;
                                                        };
                                                        var $1543 = $1551;
                                                        break;
                                                };
                                                var $1536 = $1543;
                                                break;
                                        };
                                        var $1529 = $1536;
                                        break;
                                };
                                var $1521 = $1529;
                                break;
                        };
                        var $1514 = $1521;
                        break;
                };
                var $1506 = $1514;
                break;
        };
        return $1506;
    };
    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);

    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1638 = self.idx;
                var $1639 = self.code;
                var $1640 = self.err;
                var $1641 = Parser$Reply$error$($1638, $1639, $1640);
                var $1637 = $1641;
                break;
            case 'Parser.Reply.value':
                var $1642 = self.idx;
                var $1643 = self.code;
                var $1644 = self.val;
                var self = Kind$Parser$text$("for ", $1642, $1643);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1646 = self.idx;
                        var $1647 = self.code;
                        var $1648 = self.err;
                        var $1649 = Parser$Reply$error$($1646, $1647, $1648);
                        var $1645 = $1649;
                        break;
                    case 'Parser.Reply.value':
                        var $1650 = self.idx;
                        var $1651 = self.code;
                        var self = Kind$Parser$name1$($1650, $1651);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1653 = self.idx;
                                var $1654 = self.code;
                                var $1655 = self.err;
                                var $1656 = Parser$Reply$error$($1653, $1654, $1655);
                                var $1652 = $1656;
                                break;
                            case 'Parser.Reply.value':
                                var $1657 = self.idx;
                                var $1658 = self.code;
                                var $1659 = self.val;
                                var self = Kind$Parser$text$(":", $1657, $1658);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1661 = self.idx;
                                        var $1662 = self.code;
                                        var $1663 = self.err;
                                        var $1664 = Parser$Reply$error$($1661, $1662, $1663);
                                        var $1660 = $1664;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1665 = self.idx;
                                        var $1666 = self.code;
                                        var self = Kind$Parser$text$("U32", $1665, $1666);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1668 = self.idx;
                                                var $1669 = self.code;
                                                var $1670 = self.err;
                                                var $1671 = Parser$Reply$error$($1668, $1669, $1670);
                                                var $1667 = $1671;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1672 = self.idx;
                                                var $1673 = self.code;
                                                var self = Kind$Parser$text$("from", $1672, $1673);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1675 = self.idx;
                                                        var $1676 = self.code;
                                                        var $1677 = self.err;
                                                        var $1678 = Parser$Reply$error$($1675, $1676, $1677);
                                                        var $1674 = $1678;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1679 = self.idx;
                                                        var $1680 = self.code;
                                                        var self = Kind$Parser$term$($1679, $1680);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1682 = self.idx;
                                                                var $1683 = self.code;
                                                                var $1684 = self.err;
                                                                var $1685 = Parser$Reply$error$($1682, $1683, $1684);
                                                                var $1681 = $1685;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1686 = self.idx;
                                                                var $1687 = self.code;
                                                                var $1688 = self.val;
                                                                var self = Kind$Parser$text$("to", $1686, $1687);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1690 = self.idx;
                                                                        var $1691 = self.code;
                                                                        var $1692 = self.err;
                                                                        var $1693 = Parser$Reply$error$($1690, $1691, $1692);
                                                                        var $1689 = $1693;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1694 = self.idx;
                                                                        var $1695 = self.code;
                                                                        var self = Kind$Parser$term$($1694, $1695);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1697 = self.idx;
                                                                                var $1698 = self.code;
                                                                                var $1699 = self.err;
                                                                                var $1700 = Parser$Reply$error$($1697, $1698, $1699);
                                                                                var $1696 = $1700;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1701 = self.idx;
                                                                                var $1702 = self.code;
                                                                                var $1703 = self.val;
                                                                                var self = Kind$Parser$text$("with ", $1701, $1702);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1705 = self.idx;
                                                                                        var $1706 = self.code;
                                                                                        var $1707 = self.err;
                                                                                        var $1708 = Parser$Reply$error$($1705, $1706, $1707);
                                                                                        var $1704 = $1708;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1709 = self.idx;
                                                                                        var $1710 = self.code;
                                                                                        var self = Kind$Parser$name1$($1709, $1710);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1712 = self.idx;
                                                                                                var $1713 = self.code;
                                                                                                var $1714 = self.err;
                                                                                                var $1715 = Parser$Reply$error$($1712, $1713, $1714);
                                                                                                var $1711 = $1715;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1716 = self.idx;
                                                                                                var $1717 = self.code;
                                                                                                var $1718 = self.val;
                                                                                                var self = Kind$Parser$text$(":", $1716, $1717);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1720 = self.idx;
                                                                                                        var $1721 = self.code;
                                                                                                        var $1722 = self.err;
                                                                                                        var $1723 = Parser$Reply$error$($1720, $1721, $1722);
                                                                                                        var $1719 = $1723;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1724 = self.idx;
                                                                                                        var $1725 = self.code;
                                                                                                        var self = Kind$Parser$term$($1724, $1725);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1727 = self.idx;
                                                                                                                var $1728 = self.code;
                                                                                                                var $1729 = self.err;
                                                                                                                var $1730 = Parser$Reply$error$($1727, $1728, $1729);
                                                                                                                var $1726 = $1730;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1731 = self.idx;
                                                                                                                var $1732 = self.code;
                                                                                                                var $1733 = self.val;
                                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1731, $1732);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1735 = self.idx;
                                                                                                                        var $1736 = self.code;
                                                                                                                        var $1737 = self.err;
                                                                                                                        var $1738 = Parser$Reply$error$($1735, $1736, $1737);
                                                                                                                        var $1734 = $1738;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1739 = self.idx;
                                                                                                                        var $1740 = self.code;
                                                                                                                        var self = Kind$Parser$term$($1739, $1740);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1742 = self.idx;
                                                                                                                                var $1743 = self.code;
                                                                                                                                var $1744 = self.err;
                                                                                                                                var $1745 = Parser$Reply$error$($1742, $1743, $1744);
                                                                                                                                var $1741 = $1745;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1746 = self.idx;
                                                                                                                                var $1747 = self.code;
                                                                                                                                var $1748 = self.val;
                                                                                                                                var self = Kind$Parser$stop$($1644, $1746, $1747);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1750 = self.idx;
                                                                                                                                        var $1751 = self.code;
                                                                                                                                        var $1752 = self.err;
                                                                                                                                        var $1753 = Parser$Reply$error$($1750, $1751, $1752);
                                                                                                                                        var $1749 = $1753;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1754 = self.idx;
                                                                                                                                        var $1755 = self.code;
                                                                                                                                        var $1756 = self.val;
                                                                                                                                        var _term$51 = Kind$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($1718));
                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $1688);
                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $1703);
                                                                                                                                        var _lamb$56 = Kind$Term$lam$($1659, (_e$56 => {
                                                                                                                                            var $1758 = Kind$Term$lam$($1718, (_s$57 => {
                                                                                                                                                var $1759 = $1733;
                                                                                                                                                return $1759;
                                                                                                                                            }));
                                                                                                                                            return $1758;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Kind$Term$let$($1718, _term$57, (_x$58 => {
                                                                                                                                            var $1760 = $1748;
                                                                                                                                            return $1760;
                                                                                                                                        }));
                                                                                                                                        var $1757 = Parser$Reply$value$($1754, $1755, Kind$Term$ori$($1756, _term$58));
                                                                                                                                        var $1749 = $1757;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1741 = $1749;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1734 = $1741;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1726 = $1734;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1719 = $1726;
                                                                                                        break;
                                                                                                };
                                                                                                var $1711 = $1719;
                                                                                                break;
                                                                                        };
                                                                                        var $1704 = $1711;
                                                                                        break;
                                                                                };
                                                                                var $1696 = $1704;
                                                                                break;
                                                                        };
                                                                        var $1689 = $1696;
                                                                        break;
                                                                };
                                                                var $1681 = $1689;
                                                                break;
                                                        };
                                                        var $1674 = $1681;
                                                        break;
                                                };
                                                var $1667 = $1674;
                                                break;
                                        };
                                        var $1660 = $1667;
                                        break;
                                };
                                var $1652 = $1660;
                                break;
                        };
                        var $1645 = $1652;
                        break;
                };
                var $1637 = $1645;
                break;
        };
        return $1637;
    };
    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);

    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1762 = self.idx;
                var $1763 = self.code;
                var $1764 = self.err;
                var $1765 = Parser$Reply$error$($1762, $1763, $1764);
                var $1761 = $1765;
                break;
            case 'Parser.Reply.value':
                var $1766 = self.idx;
                var $1767 = self.code;
                var $1768 = self.val;
                var self = Kind$Parser$text$("let ", $1766, $1767);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1770 = self.idx;
                        var $1771 = self.code;
                        var $1772 = self.err;
                        var $1773 = Parser$Reply$error$($1770, $1771, $1772);
                        var $1769 = $1773;
                        break;
                    case 'Parser.Reply.value':
                        var $1774 = self.idx;
                        var $1775 = self.code;
                        var self = Kind$Parser$name1$($1774, $1775);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1777 = self.idx;
                                var $1778 = self.code;
                                var $1779 = self.err;
                                var $1780 = Parser$Reply$error$($1777, $1778, $1779);
                                var $1776 = $1780;
                                break;
                            case 'Parser.Reply.value':
                                var $1781 = self.idx;
                                var $1782 = self.code;
                                var $1783 = self.val;
                                var self = Kind$Parser$text$("=", $1781, $1782);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1785 = self.idx;
                                        var $1786 = self.code;
                                        var $1787 = self.err;
                                        var $1788 = Parser$Reply$error$($1785, $1786, $1787);
                                        var $1784 = $1788;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1789 = self.idx;
                                        var $1790 = self.code;
                                        var self = Kind$Parser$text$("for ", $1789, $1790);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1792 = self.idx;
                                                var $1793 = self.code;
                                                var $1794 = self.err;
                                                var $1795 = Parser$Reply$error$($1792, $1793, $1794);
                                                var $1791 = $1795;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1796 = self.idx;
                                                var $1797 = self.code;
                                                var self = Kind$Parser$name1$($1796, $1797);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1799 = self.idx;
                                                        var $1800 = self.code;
                                                        var $1801 = self.err;
                                                        var $1802 = Parser$Reply$error$($1799, $1800, $1801);
                                                        var $1798 = $1802;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1803 = self.idx;
                                                        var $1804 = self.code;
                                                        var $1805 = self.val;
                                                        var self = Kind$Parser$text$("from", $1803, $1804);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1807 = self.idx;
                                                                var $1808 = self.code;
                                                                var $1809 = self.err;
                                                                var $1810 = Parser$Reply$error$($1807, $1808, $1809);
                                                                var $1806 = $1810;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1811 = self.idx;
                                                                var $1812 = self.code;
                                                                var self = Kind$Parser$term$($1811, $1812);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1814 = self.idx;
                                                                        var $1815 = self.code;
                                                                        var $1816 = self.err;
                                                                        var $1817 = Parser$Reply$error$($1814, $1815, $1816);
                                                                        var $1813 = $1817;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1818 = self.idx;
                                                                        var $1819 = self.code;
                                                                        var $1820 = self.val;
                                                                        var self = Kind$Parser$text$("to", $1818, $1819);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1822 = self.idx;
                                                                                var $1823 = self.code;
                                                                                var $1824 = self.err;
                                                                                var $1825 = Parser$Reply$error$($1822, $1823, $1824);
                                                                                var $1821 = $1825;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1826 = self.idx;
                                                                                var $1827 = self.code;
                                                                                var self = Kind$Parser$term$($1826, $1827);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1829 = self.idx;
                                                                                        var $1830 = self.code;
                                                                                        var $1831 = self.err;
                                                                                        var $1832 = Parser$Reply$error$($1829, $1830, $1831);
                                                                                        var $1828 = $1832;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1833 = self.idx;
                                                                                        var $1834 = self.code;
                                                                                        var $1835 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1833, $1834);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1837 = self.idx;
                                                                                                var $1838 = self.code;
                                                                                                var $1839 = self.err;
                                                                                                var $1840 = Parser$Reply$error$($1837, $1838, $1839);
                                                                                                var $1836 = $1840;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1841 = self.idx;
                                                                                                var $1842 = self.code;
                                                                                                var self = Kind$Parser$term$($1841, $1842);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1844 = self.idx;
                                                                                                        var $1845 = self.code;
                                                                                                        var $1846 = self.err;
                                                                                                        var $1847 = Parser$Reply$error$($1844, $1845, $1846);
                                                                                                        var $1843 = $1847;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1848 = self.idx;
                                                                                                        var $1849 = self.code;
                                                                                                        var $1850 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1848, $1849);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1852 = self.idx;
                                                                                                                var $1853 = self.code;
                                                                                                                var $1854 = self.err;
                                                                                                                var $1855 = Parser$Reply$error$($1852, $1853, $1854);
                                                                                                                var $1851 = $1855;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1856 = self.idx;
                                                                                                                var $1857 = self.code;
                                                                                                                var self = Kind$Parser$term$($1856, $1857);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1859 = self.idx;
                                                                                                                        var $1860 = self.code;
                                                                                                                        var $1861 = self.err;
                                                                                                                        var $1862 = Parser$Reply$error$($1859, $1860, $1861);
                                                                                                                        var $1858 = $1862;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1863 = self.idx;
                                                                                                                        var $1864 = self.code;
                                                                                                                        var $1865 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($1768, $1863, $1864);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1867 = self.idx;
                                                                                                                                var $1868 = self.code;
                                                                                                                                var $1869 = self.err;
                                                                                                                                var $1870 = Parser$Reply$error$($1867, $1868, $1869);
                                                                                                                                var $1866 = $1870;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1871 = self.idx;
                                                                                                                                var $1872 = self.code;
                                                                                                                                var $1873 = self.val;
                                                                                                                                var _term$48 = Kind$Term$ref$("Nat.for");
                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($1783));
                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $1820);
                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1835);
                                                                                                                                var _lamb$53 = Kind$Term$lam$($1805, (_e$53 => {
                                                                                                                                    var $1875 = Kind$Term$lam$($1783, (_s$54 => {
                                                                                                                                        var $1876 = $1850;
                                                                                                                                        return $1876;
                                                                                                                                    }));
                                                                                                                                    return $1875;
                                                                                                                                }));
                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);
                                                                                                                                var _term$55 = Kind$Term$let$($1783, _term$54, (_x$55 => {
                                                                                                                                    var $1877 = $1865;
                                                                                                                                    return $1877;
                                                                                                                                }));
                                                                                                                                var $1874 = Parser$Reply$value$($1871, $1872, Kind$Term$ori$($1873, _term$55));
                                                                                                                                var $1866 = $1874;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1858 = $1866;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1851 = $1858;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1843 = $1851;
                                                                                                        break;
                                                                                                };
                                                                                                var $1836 = $1843;
                                                                                                break;
                                                                                        };
                                                                                        var $1828 = $1836;
                                                                                        break;
                                                                                };
                                                                                var $1821 = $1828;
                                                                                break;
                                                                        };
                                                                        var $1813 = $1821;
                                                                        break;
                                                                };
                                                                var $1806 = $1813;
                                                                break;
                                                        };
                                                        var $1798 = $1806;
                                                        break;
                                                };
                                                var $1791 = $1798;
                                                break;
                                        };
                                        var $1784 = $1791;
                                        break;
                                };
                                var $1776 = $1784;
                                break;
                        };
                        var $1769 = $1776;
                        break;
                };
                var $1761 = $1769;
                break;
        };
        return $1761;
    };
    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);

    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1879 = self.idx;
                var $1880 = self.code;
                var $1881 = self.err;
                var $1882 = Parser$Reply$error$($1879, $1880, $1881);
                var $1878 = $1882;
                break;
            case 'Parser.Reply.value':
                var $1883 = self.idx;
                var $1884 = self.code;
                var $1885 = self.val;
                var self = Kind$Parser$text$("for ", $1883, $1884);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1887 = self.idx;
                        var $1888 = self.code;
                        var $1889 = self.err;
                        var $1890 = Parser$Reply$error$($1887, $1888, $1889);
                        var $1886 = $1890;
                        break;
                    case 'Parser.Reply.value':
                        var $1891 = self.idx;
                        var $1892 = self.code;
                        var self = Kind$Parser$name1$($1891, $1892);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1894 = self.idx;
                                var $1895 = self.code;
                                var $1896 = self.err;
                                var $1897 = Parser$Reply$error$($1894, $1895, $1896);
                                var $1893 = $1897;
                                break;
                            case 'Parser.Reply.value':
                                var $1898 = self.idx;
                                var $1899 = self.code;
                                var $1900 = self.val;
                                var self = Kind$Parser$text$("from", $1898, $1899);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1902 = self.idx;
                                        var $1903 = self.code;
                                        var $1904 = self.err;
                                        var $1905 = Parser$Reply$error$($1902, $1903, $1904);
                                        var $1901 = $1905;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1906 = self.idx;
                                        var $1907 = self.code;
                                        var self = Kind$Parser$term$($1906, $1907);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1909 = self.idx;
                                                var $1910 = self.code;
                                                var $1911 = self.err;
                                                var $1912 = Parser$Reply$error$($1909, $1910, $1911);
                                                var $1908 = $1912;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1913 = self.idx;
                                                var $1914 = self.code;
                                                var $1915 = self.val;
                                                var self = Kind$Parser$text$("to", $1913, $1914);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1917 = self.idx;
                                                        var $1918 = self.code;
                                                        var $1919 = self.err;
                                                        var $1920 = Parser$Reply$error$($1917, $1918, $1919);
                                                        var $1916 = $1920;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1921 = self.idx;
                                                        var $1922 = self.code;
                                                        var self = Kind$Parser$term$($1921, $1922);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1924 = self.idx;
                                                                var $1925 = self.code;
                                                                var $1926 = self.err;
                                                                var $1927 = Parser$Reply$error$($1924, $1925, $1926);
                                                                var $1923 = $1927;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1928 = self.idx;
                                                                var $1929 = self.code;
                                                                var $1930 = self.val;
                                                                var self = Kind$Parser$text$("with ", $1928, $1929);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1932 = self.idx;
                                                                        var $1933 = self.code;
                                                                        var $1934 = self.err;
                                                                        var $1935 = Parser$Reply$error$($1932, $1933, $1934);
                                                                        var $1931 = $1935;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1936 = self.idx;
                                                                        var $1937 = self.code;
                                                                        var self = Kind$Parser$name1$($1936, $1937);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1939 = self.idx;
                                                                                var $1940 = self.code;
                                                                                var $1941 = self.err;
                                                                                var $1942 = Parser$Reply$error$($1939, $1940, $1941);
                                                                                var $1938 = $1942;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1943 = self.idx;
                                                                                var $1944 = self.code;
                                                                                var $1945 = self.val;
                                                                                var self = Kind$Parser$text$(":", $1943, $1944);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1947 = self.idx;
                                                                                        var $1948 = self.code;
                                                                                        var $1949 = self.err;
                                                                                        var $1950 = Parser$Reply$error$($1947, $1948, $1949);
                                                                                        var $1946 = $1950;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1951 = self.idx;
                                                                                        var $1952 = self.code;
                                                                                        var self = Kind$Parser$term$($1951, $1952);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1954 = self.idx;
                                                                                                var $1955 = self.code;
                                                                                                var $1956 = self.err;
                                                                                                var $1957 = Parser$Reply$error$($1954, $1955, $1956);
                                                                                                var $1953 = $1957;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1958 = self.idx;
                                                                                                var $1959 = self.code;
                                                                                                var $1960 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1958, $1959);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1962 = self.idx;
                                                                                                        var $1963 = self.code;
                                                                                                        var $1964 = self.err;
                                                                                                        var $1965 = Parser$Reply$error$($1962, $1963, $1964);
                                                                                                        var $1961 = $1965;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1966 = self.idx;
                                                                                                        var $1967 = self.code;
                                                                                                        var self = Kind$Parser$term$($1966, $1967);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1969 = self.idx;
                                                                                                                var $1970 = self.code;
                                                                                                                var $1971 = self.err;
                                                                                                                var $1972 = Parser$Reply$error$($1969, $1970, $1971);
                                                                                                                var $1968 = $1972;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1973 = self.idx;
                                                                                                                var $1974 = self.code;
                                                                                                                var $1975 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1885, $1973, $1974);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1977 = self.idx;
                                                                                                                        var $1978 = self.code;
                                                                                                                        var $1979 = self.err;
                                                                                                                        var $1980 = Parser$Reply$error$($1977, $1978, $1979);
                                                                                                                        var $1976 = $1980;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1981 = self.idx;
                                                                                                                        var $1982 = self.code;
                                                                                                                        var $1983 = self.val;
                                                                                                                        var _term$45 = Kind$Term$ref$("Nat.for");
                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1945));
                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1915);
                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1930);
                                                                                                                        var _lamb$50 = Kind$Term$lam$($1900, (_e$50 => {
                                                                                                                            var $1985 = Kind$Term$lam$($1945, (_s$51 => {
                                                                                                                                var $1986 = $1960;
                                                                                                                                return $1986;
                                                                                                                            }));
                                                                                                                            return $1985;
                                                                                                                        }));
                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Kind$Term$let$($1945, _term$51, (_x$52 => {
                                                                                                                            var $1987 = $1975;
                                                                                                                            return $1987;
                                                                                                                        }));
                                                                                                                        var $1984 = Parser$Reply$value$($1981, $1982, Kind$Term$ori$($1983, _term$52));
                                                                                                                        var $1976 = $1984;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1968 = $1976;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1961 = $1968;
                                                                                                        break;
                                                                                                };
                                                                                                var $1953 = $1961;
                                                                                                break;
                                                                                        };
                                                                                        var $1946 = $1953;
                                                                                        break;
                                                                                };
                                                                                var $1938 = $1946;
                                                                                break;
                                                                        };
                                                                        var $1931 = $1938;
                                                                        break;
                                                                };
                                                                var $1923 = $1931;
                                                                break;
                                                        };
                                                        var $1916 = $1923;
                                                        break;
                                                };
                                                var $1908 = $1916;
                                                break;
                                        };
                                        var $1901 = $1908;
                                        break;
                                };
                                var $1893 = $1901;
                                break;
                        };
                        var $1886 = $1893;
                        break;
                };
                var $1878 = $1886;
                break;
        };
        return $1878;
    };
    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);

    function Kind$Parser$letforin$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1989 = self.idx;
                var $1990 = self.code;
                var $1991 = self.err;
                var $1992 = Parser$Reply$error$($1989, $1990, $1991);
                var $1988 = $1992;
                break;
            case 'Parser.Reply.value':
                var $1993 = self.idx;
                var $1994 = self.code;
                var $1995 = self.val;
                var self = Kind$Parser$text$("let ", $1993, $1994);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1997 = self.idx;
                        var $1998 = self.code;
                        var $1999 = self.err;
                        var $2000 = Parser$Reply$error$($1997, $1998, $1999);
                        var $1996 = $2000;
                        break;
                    case 'Parser.Reply.value':
                        var $2001 = self.idx;
                        var $2002 = self.code;
                        var self = Kind$Parser$name1$($2001, $2002);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2004 = self.idx;
                                var $2005 = self.code;
                                var $2006 = self.err;
                                var $2007 = Parser$Reply$error$($2004, $2005, $2006);
                                var $2003 = $2007;
                                break;
                            case 'Parser.Reply.value':
                                var $2008 = self.idx;
                                var $2009 = self.code;
                                var $2010 = self.val;
                                var self = Kind$Parser$text$("=", $2008, $2009);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2012 = self.idx;
                                        var $2013 = self.code;
                                        var $2014 = self.err;
                                        var $2015 = Parser$Reply$error$($2012, $2013, $2014);
                                        var $2011 = $2015;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2016 = self.idx;
                                        var $2017 = self.code;
                                        var self = Kind$Parser$text$("for ", $2016, $2017);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2019 = self.idx;
                                                var $2020 = self.code;
                                                var $2021 = self.err;
                                                var $2022 = Parser$Reply$error$($2019, $2020, $2021);
                                                var $2018 = $2022;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2023 = self.idx;
                                                var $2024 = self.code;
                                                var self = Kind$Parser$name1$($2023, $2024);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2026 = self.idx;
                                                        var $2027 = self.code;
                                                        var $2028 = self.err;
                                                        var $2029 = Parser$Reply$error$($2026, $2027, $2028);
                                                        var $2025 = $2029;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2030 = self.idx;
                                                        var $2031 = self.code;
                                                        var $2032 = self.val;
                                                        var self = Kind$Parser$text$("in", $2030, $2031);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2034 = self.idx;
                                                                var $2035 = self.code;
                                                                var $2036 = self.err;
                                                                var $2037 = Parser$Reply$error$($2034, $2035, $2036);
                                                                var $2033 = $2037;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2038 = self.idx;
                                                                var $2039 = self.code;
                                                                var self = Kind$Parser$term$($2038, $2039);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2041 = self.idx;
                                                                        var $2042 = self.code;
                                                                        var $2043 = self.err;
                                                                        var $2044 = Parser$Reply$error$($2041, $2042, $2043);
                                                                        var $2040 = $2044;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2045 = self.idx;
                                                                        var $2046 = self.code;
                                                                        var $2047 = self.val;
                                                                        var self = Kind$Parser$text$(":", $2045, $2046);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2049 = self.idx;
                                                                                var $2050 = self.code;
                                                                                var $2051 = self.err;
                                                                                var $2052 = Parser$Reply$error$($2049, $2050, $2051);
                                                                                var $2048 = $2052;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2053 = self.idx;
                                                                                var $2054 = self.code;
                                                                                var self = Kind$Parser$term$($2053, $2054);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2056 = self.idx;
                                                                                        var $2057 = self.code;
                                                                                        var $2058 = self.err;
                                                                                        var $2059 = Parser$Reply$error$($2056, $2057, $2058);
                                                                                        var $2055 = $2059;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2060 = self.idx;
                                                                                        var $2061 = self.code;
                                                                                        var $2062 = self.val;
                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2060, $2061);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2064 = self.idx;
                                                                                                var $2065 = self.code;
                                                                                                var $2066 = self.err;
                                                                                                var $2067 = Parser$Reply$error$($2064, $2065, $2066);
                                                                                                var $2063 = $2067;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2068 = self.idx;
                                                                                                var $2069 = self.code;
                                                                                                var self = Kind$Parser$term$($2068, $2069);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2071 = self.idx;
                                                                                                        var $2072 = self.code;
                                                                                                        var $2073 = self.err;
                                                                                                        var $2074 = Parser$Reply$error$($2071, $2072, $2073);
                                                                                                        var $2070 = $2074;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2075 = self.idx;
                                                                                                        var $2076 = self.code;
                                                                                                        var $2077 = self.val;
                                                                                                        var self = Kind$Parser$stop$($1995, $2075, $2076);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2079 = self.idx;
                                                                                                                var $2080 = self.code;
                                                                                                                var $2081 = self.err;
                                                                                                                var $2082 = Parser$Reply$error$($2079, $2080, $2081);
                                                                                                                var $2078 = $2082;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2083 = self.idx;
                                                                                                                var $2084 = self.code;
                                                                                                                var $2085 = self.val;
                                                                                                                var _term$42 = Kind$Term$ref$("List.for");
                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $2047);
                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($2010));
                                                                                                                var _lamb$47 = Kind$Term$lam$($2032, (_i$47 => {
                                                                                                                    var $2087 = Kind$Term$lam$($2010, (_x$48 => {
                                                                                                                        var $2088 = $2062;
                                                                                                                        return $2088;
                                                                                                                    }));
                                                                                                                    return $2087;
                                                                                                                }));
                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Kind$Term$let$($2010, _term$48, (_x$49 => {
                                                                                                                    var $2089 = $2077;
                                                                                                                    return $2089;
                                                                                                                }));
                                                                                                                var $2086 = Parser$Reply$value$($2083, $2084, Kind$Term$ori$($2085, _term$49));
                                                                                                                var $2078 = $2086;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2070 = $2078;
                                                                                                        break;
                                                                                                };
                                                                                                var $2063 = $2070;
                                                                                                break;
                                                                                        };
                                                                                        var $2055 = $2063;
                                                                                        break;
                                                                                };
                                                                                var $2048 = $2055;
                                                                                break;
                                                                        };
                                                                        var $2040 = $2048;
                                                                        break;
                                                                };
                                                                var $2033 = $2040;
                                                                break;
                                                        };
                                                        var $2025 = $2033;
                                                        break;
                                                };
                                                var $2018 = $2025;
                                                break;
                                        };
                                        var $2011 = $2018;
                                        break;
                                };
                                var $2003 = $2011;
                                break;
                        };
                        var $1996 = $2003;
                        break;
                };
                var $1988 = $1996;
                break;
        };
        return $1988;
    };
    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);

    function Kind$Parser$letforin$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2091 = self.idx;
                var $2092 = self.code;
                var $2093 = self.err;
                var $2094 = Parser$Reply$error$($2091, $2092, $2093);
                var $2090 = $2094;
                break;
            case 'Parser.Reply.value':
                var $2095 = self.idx;
                var $2096 = self.code;
                var $2097 = self.val;
                var self = Kind$Parser$text$("for ", $2095, $2096);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2099 = self.idx;
                        var $2100 = self.code;
                        var $2101 = self.err;
                        var $2102 = Parser$Reply$error$($2099, $2100, $2101);
                        var $2098 = $2102;
                        break;
                    case 'Parser.Reply.value':
                        var $2103 = self.idx;
                        var $2104 = self.code;
                        var self = Kind$Parser$name1$($2103, $2104);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2106 = self.idx;
                                var $2107 = self.code;
                                var $2108 = self.err;
                                var $2109 = Parser$Reply$error$($2106, $2107, $2108);
                                var $2105 = $2109;
                                break;
                            case 'Parser.Reply.value':
                                var $2110 = self.idx;
                                var $2111 = self.code;
                                var $2112 = self.val;
                                var self = Kind$Parser$text$("in", $2110, $2111);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2114 = self.idx;
                                        var $2115 = self.code;
                                        var $2116 = self.err;
                                        var $2117 = Parser$Reply$error$($2114, $2115, $2116);
                                        var $2113 = $2117;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2118 = self.idx;
                                        var $2119 = self.code;
                                        var self = Kind$Parser$term$($2118, $2119);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2121 = self.idx;
                                                var $2122 = self.code;
                                                var $2123 = self.err;
                                                var $2124 = Parser$Reply$error$($2121, $2122, $2123);
                                                var $2120 = $2124;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2125 = self.idx;
                                                var $2126 = self.code;
                                                var $2127 = self.val;
                                                var self = Kind$Parser$text$("with ", $2125, $2126);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2129 = self.idx;
                                                        var $2130 = self.code;
                                                        var $2131 = self.err;
                                                        var $2132 = Parser$Reply$error$($2129, $2130, $2131);
                                                        var $2128 = $2132;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2133 = self.idx;
                                                        var $2134 = self.code;
                                                        var self = Kind$Parser$name1$($2133, $2134);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2136 = self.idx;
                                                                var $2137 = self.code;
                                                                var $2138 = self.err;
                                                                var $2139 = Parser$Reply$error$($2136, $2137, $2138);
                                                                var $2135 = $2139;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2140 = self.idx;
                                                                var $2141 = self.code;
                                                                var $2142 = self.val;
                                                                var self = Kind$Parser$text$(":", $2140, $2141);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2144 = self.idx;
                                                                        var $2145 = self.code;
                                                                        var $2146 = self.err;
                                                                        var $2147 = Parser$Reply$error$($2144, $2145, $2146);
                                                                        var $2143 = $2147;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2148 = self.idx;
                                                                        var $2149 = self.code;
                                                                        var self = Kind$Parser$term$($2148, $2149);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2151 = self.idx;
                                                                                var $2152 = self.code;
                                                                                var $2153 = self.err;
                                                                                var $2154 = Parser$Reply$error$($2151, $2152, $2153);
                                                                                var $2150 = $2154;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2155 = self.idx;
                                                                                var $2156 = self.code;
                                                                                var $2157 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2155, $2156);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2159 = self.idx;
                                                                                        var $2160 = self.code;
                                                                                        var $2161 = self.err;
                                                                                        var $2162 = Parser$Reply$error$($2159, $2160, $2161);
                                                                                        var $2158 = $2162;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2163 = self.idx;
                                                                                        var $2164 = self.code;
                                                                                        var self = Kind$Parser$term$($2163, $2164);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2166 = self.idx;
                                                                                                var $2167 = self.code;
                                                                                                var $2168 = self.err;
                                                                                                var $2169 = Parser$Reply$error$($2166, $2167, $2168);
                                                                                                var $2165 = $2169;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2170 = self.idx;
                                                                                                var $2171 = self.code;
                                                                                                var $2172 = self.val;
                                                                                                var self = Kind$Parser$stop$($2097, $2170, $2171);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2174 = self.idx;
                                                                                                        var $2175 = self.code;
                                                                                                        var $2176 = self.err;
                                                                                                        var $2177 = Parser$Reply$error$($2174, $2175, $2176);
                                                                                                        var $2173 = $2177;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2178 = self.idx;
                                                                                                        var $2179 = self.code;
                                                                                                        var $2180 = self.val;
                                                                                                        var _term$39 = Kind$Term$ref$("List.for");
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $2127);
                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($2142));
                                                                                                        var _lamb$44 = Kind$Term$lam$($2112, (_i$44 => {
                                                                                                            var $2182 = Kind$Term$lam$($2142, (_x$45 => {
                                                                                                                var $2183 = $2157;
                                                                                                                return $2183;
                                                                                                            }));
                                                                                                            return $2182;
                                                                                                        }));
                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Kind$Term$let$($2142, _term$45, (_x$46 => {
                                                                                                            var $2184 = $2172;
                                                                                                            return $2184;
                                                                                                        }));
                                                                                                        var $2181 = Parser$Reply$value$($2178, $2179, Kind$Term$ori$($2180, _term$46));
                                                                                                        var $2173 = $2181;
                                                                                                        break;
                                                                                                };
                                                                                                var $2165 = $2173;
                                                                                                break;
                                                                                        };
                                                                                        var $2158 = $2165;
                                                                                        break;
                                                                                };
                                                                                var $2150 = $2158;
                                                                                break;
                                                                        };
                                                                        var $2143 = $2150;
                                                                        break;
                                                                };
                                                                var $2135 = $2143;
                                                                break;
                                                        };
                                                        var $2128 = $2135;
                                                        break;
                                                };
                                                var $2120 = $2128;
                                                break;
                                        };
                                        var $2113 = $2120;
                                        break;
                                };
                                var $2105 = $2113;
                                break;
                        };
                        var $2098 = $2105;
                        break;
                };
                var $2090 = $2098;
                break;
        };
        return $2090;
    };
    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);

    function Kind$Parser$letwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2186 = self.idx;
                var $2187 = self.code;
                var $2188 = self.err;
                var $2189 = Parser$Reply$error$($2186, $2187, $2188);
                var $2185 = $2189;
                break;
            case 'Parser.Reply.value':
                var $2190 = self.idx;
                var $2191 = self.code;
                var $2192 = self.val;
                var self = Kind$Parser$text$("let ", $2190, $2191);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2194 = self.idx;
                        var $2195 = self.code;
                        var $2196 = self.err;
                        var $2197 = Parser$Reply$error$($2194, $2195, $2196);
                        var $2193 = $2197;
                        break;
                    case 'Parser.Reply.value':
                        var $2198 = self.idx;
                        var $2199 = self.code;
                        var self = Kind$Parser$name1$($2198, $2199);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2201 = self.idx;
                                var $2202 = self.code;
                                var $2203 = self.err;
                                var $2204 = Parser$Reply$error$($2201, $2202, $2203);
                                var $2200 = $2204;
                                break;
                            case 'Parser.Reply.value':
                                var $2205 = self.idx;
                                var $2206 = self.code;
                                var $2207 = self.val;
                                var self = Kind$Parser$text$("=", $2205, $2206);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2209 = self.idx;
                                        var $2210 = self.code;
                                        var $2211 = self.err;
                                        var $2212 = Parser$Reply$error$($2209, $2210, $2211);
                                        var $2208 = $2212;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2213 = self.idx;
                                        var $2214 = self.code;
                                        var self = Kind$Parser$text$("while ", $2213, $2214);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2216 = self.idx;
                                                var $2217 = self.code;
                                                var $2218 = self.err;
                                                var $2219 = Parser$Reply$error$($2216, $2217, $2218);
                                                var $2215 = $2219;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2220 = self.idx;
                                                var $2221 = self.code;
                                                var self = Kind$Parser$term$($2220, $2221);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2223 = self.idx;
                                                        var $2224 = self.code;
                                                        var $2225 = self.err;
                                                        var $2226 = Parser$Reply$error$($2223, $2224, $2225);
                                                        var $2222 = $2226;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2227 = self.idx;
                                                        var $2228 = self.code;
                                                        var $2229 = self.val;
                                                        var self = Kind$Parser$text$(":", $2227, $2228);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2231 = self.idx;
                                                                var $2232 = self.code;
                                                                var $2233 = self.err;
                                                                var $2234 = Parser$Reply$error$($2231, $2232, $2233);
                                                                var $2230 = $2234;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2235 = self.idx;
                                                                var $2236 = self.code;
                                                                var self = Kind$Parser$term$($2235, $2236);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2238 = self.idx;
                                                                        var $2239 = self.code;
                                                                        var $2240 = self.err;
                                                                        var $2241 = Parser$Reply$error$($2238, $2239, $2240);
                                                                        var $2237 = $2241;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2242 = self.idx;
                                                                        var $2243 = self.code;
                                                                        var $2244 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2242, $2243);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2246 = self.idx;
                                                                                var $2247 = self.code;
                                                                                var $2248 = self.err;
                                                                                var $2249 = Parser$Reply$error$($2246, $2247, $2248);
                                                                                var $2245 = $2249;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2250 = self.idx;
                                                                                var $2251 = self.code;
                                                                                var self = Kind$Parser$term$($2250, $2251);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2253 = self.idx;
                                                                                        var $2254 = self.code;
                                                                                        var $2255 = self.err;
                                                                                        var $2256 = Parser$Reply$error$($2253, $2254, $2255);
                                                                                        var $2252 = $2256;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2257 = self.idx;
                                                                                        var $2258 = self.code;
                                                                                        var $2259 = self.val;
                                                                                        var self = Kind$Parser$stop$($2192, $2257, $2258);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2261 = self.idx;
                                                                                                var $2262 = self.code;
                                                                                                var $2263 = self.err;
                                                                                                var $2264 = Parser$Reply$error$($2261, $2262, $2263);
                                                                                                var $2260 = $2264;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2265 = self.idx;
                                                                                                var $2266 = self.code;
                                                                                                var $2267 = self.val;
                                                                                                var _term$36 = Kind$Term$ref$("Function.while");
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($2207));
                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($2207, (_s$39 => {
                                                                                                    var $2269 = $2229;
                                                                                                    return $2269;
                                                                                                })));
                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($2207, (_s$40 => {
                                                                                                    var $2270 = $2244;
                                                                                                    return $2270;
                                                                                                })));
                                                                                                var _term$41 = Kind$Term$let$($2207, _term$40, (_x$41 => {
                                                                                                    var $2271 = $2259;
                                                                                                    return $2271;
                                                                                                }));
                                                                                                var $2268 = Parser$Reply$value$($2265, $2266, Kind$Term$ori$($2267, _term$41));
                                                                                                var $2260 = $2268;
                                                                                                break;
                                                                                        };
                                                                                        var $2252 = $2260;
                                                                                        break;
                                                                                };
                                                                                var $2245 = $2252;
                                                                                break;
                                                                        };
                                                                        var $2237 = $2245;
                                                                        break;
                                                                };
                                                                var $2230 = $2237;
                                                                break;
                                                        };
                                                        var $2222 = $2230;
                                                        break;
                                                };
                                                var $2215 = $2222;
                                                break;
                                        };
                                        var $2208 = $2215;
                                        break;
                                };
                                var $2200 = $2208;
                                break;
                        };
                        var $2193 = $2200;
                        break;
                };
                var $2185 = $2193;
                break;
        };
        return $2185;
    };
    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);

    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2273 = self.idx;
                var $2274 = self.code;
                var $2275 = self.err;
                var $2276 = Parser$Reply$error$($2273, $2274, $2275);
                var $2272 = $2276;
                break;
            case 'Parser.Reply.value':
                var $2277 = self.idx;
                var $2278 = self.code;
                var $2279 = self.val;
                var self = Kind$Parser$text$("while ", $2277, $2278);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2281 = self.idx;
                        var $2282 = self.code;
                        var $2283 = self.err;
                        var $2284 = Parser$Reply$error$($2281, $2282, $2283);
                        var $2280 = $2284;
                        break;
                    case 'Parser.Reply.value':
                        var $2285 = self.idx;
                        var $2286 = self.code;
                        var self = Kind$Parser$term$($2285, $2286);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2288 = self.idx;
                                var $2289 = self.code;
                                var $2290 = self.err;
                                var $2291 = Parser$Reply$error$($2288, $2289, $2290);
                                var $2287 = $2291;
                                break;
                            case 'Parser.Reply.value':
                                var $2292 = self.idx;
                                var $2293 = self.code;
                                var $2294 = self.val;
                                var self = Kind$Parser$text$("with ", $2292, $2293);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2296 = self.idx;
                                        var $2297 = self.code;
                                        var $2298 = self.err;
                                        var $2299 = Parser$Reply$error$($2296, $2297, $2298);
                                        var $2295 = $2299;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2300 = self.idx;
                                        var $2301 = self.code;
                                        var self = Kind$Parser$name1$($2300, $2301);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2303 = self.idx;
                                                var $2304 = self.code;
                                                var $2305 = self.err;
                                                var $2306 = Parser$Reply$error$($2303, $2304, $2305);
                                                var $2302 = $2306;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2307 = self.idx;
                                                var $2308 = self.code;
                                                var $2309 = self.val;
                                                var self = Kind$Parser$text$(":", $2307, $2308);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2311 = self.idx;
                                                        var $2312 = self.code;
                                                        var $2313 = self.err;
                                                        var $2314 = Parser$Reply$error$($2311, $2312, $2313);
                                                        var $2310 = $2314;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2315 = self.idx;
                                                        var $2316 = self.code;
                                                        var self = Kind$Parser$term$($2315, $2316);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2318 = self.idx;
                                                                var $2319 = self.code;
                                                                var $2320 = self.err;
                                                                var $2321 = Parser$Reply$error$($2318, $2319, $2320);
                                                                var $2317 = $2321;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2322 = self.idx;
                                                                var $2323 = self.code;
                                                                var $2324 = self.val;
                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2322, $2323);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2326 = self.idx;
                                                                        var $2327 = self.code;
                                                                        var $2328 = self.err;
                                                                        var $2329 = Parser$Reply$error$($2326, $2327, $2328);
                                                                        var $2325 = $2329;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2330 = self.idx;
                                                                        var $2331 = self.code;
                                                                        var self = Kind$Parser$term$($2330, $2331);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2333 = self.idx;
                                                                                var $2334 = self.code;
                                                                                var $2335 = self.err;
                                                                                var $2336 = Parser$Reply$error$($2333, $2334, $2335);
                                                                                var $2332 = $2336;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2337 = self.idx;
                                                                                var $2338 = self.code;
                                                                                var $2339 = self.val;
                                                                                var self = Kind$Parser$stop$($2279, $2337, $2338);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2341 = self.idx;
                                                                                        var $2342 = self.code;
                                                                                        var $2343 = self.err;
                                                                                        var $2344 = Parser$Reply$error$($2341, $2342, $2343);
                                                                                        var $2340 = $2344;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2345 = self.idx;
                                                                                        var $2346 = self.code;
                                                                                        var $2347 = self.val;
                                                                                        var _term$33 = Kind$Term$ref$("Function.while");
                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($2309));
                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($2309, (_s$36 => {
                                                                                            var $2349 = $2294;
                                                                                            return $2349;
                                                                                        })));
                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($2309, (_s$37 => {
                                                                                            var $2350 = $2324;
                                                                                            return $2350;
                                                                                        })));
                                                                                        var _term$38 = Kind$Term$let$($2309, _term$37, (_x$38 => {
                                                                                            var $2351 = $2339;
                                                                                            return $2351;
                                                                                        }));
                                                                                        var $2348 = Parser$Reply$value$($2345, $2346, Kind$Term$ori$($2347, _term$38));
                                                                                        var $2340 = $2348;
                                                                                        break;
                                                                                };
                                                                                var $2332 = $2340;
                                                                                break;
                                                                        };
                                                                        var $2325 = $2332;
                                                                        break;
                                                                };
                                                                var $2317 = $2325;
                                                                break;
                                                        };
                                                        var $2310 = $2317;
                                                        break;
                                                };
                                                var $2302 = $2310;
                                                break;
                                        };
                                        var $2295 = $2302;
                                        break;
                                };
                                var $2287 = $2295;
                                break;
                        };
                        var $2280 = $2287;
                        break;
                };
                var $2272 = $2280;
                break;
        };
        return $2272;
    };
    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);

    function Kind$Parser$let$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2353 = self.idx;
                var $2354 = self.code;
                var $2355 = self.err;
                var $2356 = Parser$Reply$error$($2353, $2354, $2355);
                var $2352 = $2356;
                break;
            case 'Parser.Reply.value':
                var $2357 = self.idx;
                var $2358 = self.code;
                var $2359 = self.val;
                var self = Kind$Parser$text$("let ", $2357, $2358);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2361 = self.idx;
                        var $2362 = self.code;
                        var $2363 = self.err;
                        var $2364 = Parser$Reply$error$($2361, $2362, $2363);
                        var $2360 = $2364;
                        break;
                    case 'Parser.Reply.value':
                        var $2365 = self.idx;
                        var $2366 = self.code;
                        var self = Kind$Parser$name$($2365, $2366);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2368 = self.idx;
                                var $2369 = self.code;
                                var $2370 = self.err;
                                var $2371 = Parser$Reply$error$($2368, $2369, $2370);
                                var $2367 = $2371;
                                break;
                            case 'Parser.Reply.value':
                                var $2372 = self.idx;
                                var $2373 = self.code;
                                var $2374 = self.val;
                                var self = Kind$Parser$text$("=", $2372, $2373);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2376 = self.idx;
                                        var $2377 = self.code;
                                        var $2378 = self.err;
                                        var $2379 = Parser$Reply$error$($2376, $2377, $2378);
                                        var $2375 = $2379;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2380 = self.idx;
                                        var $2381 = self.code;
                                        var self = Kind$Parser$term$($2380, $2381);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2383 = self.idx;
                                                var $2384 = self.code;
                                                var $2385 = self.err;
                                                var $2386 = Parser$Reply$error$($2383, $2384, $2385);
                                                var $2382 = $2386;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2387 = self.idx;
                                                var $2388 = self.code;
                                                var $2389 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2387, $2388);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2391 = self.idx;
                                                        var $2392 = self.code;
                                                        var $2393 = self.err;
                                                        var $2394 = Parser$Reply$error$($2391, $2392, $2393);
                                                        var $2390 = $2394;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2395 = self.idx;
                                                        var $2396 = self.code;
                                                        var self = Kind$Parser$term$($2395, $2396);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2398 = self.idx;
                                                                var $2399 = self.code;
                                                                var $2400 = self.err;
                                                                var $2401 = Parser$Reply$error$($2398, $2399, $2400);
                                                                var $2397 = $2401;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2402 = self.idx;
                                                                var $2403 = self.code;
                                                                var $2404 = self.val;
                                                                var self = Kind$Parser$stop$($2359, $2402, $2403);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2406 = self.idx;
                                                                        var $2407 = self.code;
                                                                        var $2408 = self.err;
                                                                        var $2409 = Parser$Reply$error$($2406, $2407, $2408);
                                                                        var $2405 = $2409;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2410 = self.idx;
                                                                        var $2411 = self.code;
                                                                        var $2412 = self.val;
                                                                        var $2413 = Parser$Reply$value$($2410, $2411, Kind$Term$ori$($2412, Kind$Term$let$($2374, $2389, (_x$27 => {
                                                                            var $2414 = $2404;
                                                                            return $2414;
                                                                        }))));
                                                                        var $2405 = $2413;
                                                                        break;
                                                                };
                                                                var $2397 = $2405;
                                                                break;
                                                        };
                                                        var $2390 = $2397;
                                                        break;
                                                };
                                                var $2382 = $2390;
                                                break;
                                        };
                                        var $2375 = $2382;
                                        break;
                                };
                                var $2367 = $2375;
                                break;
                        };
                        var $2360 = $2367;
                        break;
                };
                var $2352 = $2360;
                break;
        };
        return $2352;
    };
    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);

    function Kind$Parser$let$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2416 = self.idx;
                var $2417 = self.code;
                var $2418 = self.err;
                var $2419 = Parser$Reply$error$($2416, $2417, $2418);
                var $2415 = $2419;
                break;
            case 'Parser.Reply.value':
                var $2420 = self.idx;
                var $2421 = self.code;
                var $2422 = self.val;
                var self = Kind$Parser$name$($2420, $2421);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2424 = self.idx;
                        var $2425 = self.code;
                        var $2426 = self.err;
                        var $2427 = Parser$Reply$error$($2424, $2425, $2426);
                        var $2423 = $2427;
                        break;
                    case 'Parser.Reply.value':
                        var $2428 = self.idx;
                        var $2429 = self.code;
                        var $2430 = self.val;
                        var self = Kind$Parser$text$("= ", $2428, $2429);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2432 = self.idx;
                                var $2433 = self.code;
                                var $2434 = self.err;
                                var $2435 = Parser$Reply$error$($2432, $2433, $2434);
                                var $2431 = $2435;
                                break;
                            case 'Parser.Reply.value':
                                var $2436 = self.idx;
                                var $2437 = self.code;
                                var self = Kind$Parser$term$($2436, $2437);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2439 = self.idx;
                                        var $2440 = self.code;
                                        var $2441 = self.err;
                                        var $2442 = Parser$Reply$error$($2439, $2440, $2441);
                                        var $2438 = $2442;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2443 = self.idx;
                                        var $2444 = self.code;
                                        var $2445 = self.val;
                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2443, $2444);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2447 = self.idx;
                                                var $2448 = self.code;
                                                var $2449 = self.err;
                                                var $2450 = Parser$Reply$error$($2447, $2448, $2449);
                                                var $2446 = $2450;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2451 = self.idx;
                                                var $2452 = self.code;
                                                var self = Kind$Parser$term$($2451, $2452);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2454 = self.idx;
                                                        var $2455 = self.code;
                                                        var $2456 = self.err;
                                                        var $2457 = Parser$Reply$error$($2454, $2455, $2456);
                                                        var $2453 = $2457;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2458 = self.idx;
                                                        var $2459 = self.code;
                                                        var $2460 = self.val;
                                                        var self = Kind$Parser$stop$($2422, $2458, $2459);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2462 = self.idx;
                                                                var $2463 = self.code;
                                                                var $2464 = self.err;
                                                                var $2465 = Parser$Reply$error$($2462, $2463, $2464);
                                                                var $2461 = $2465;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2466 = self.idx;
                                                                var $2467 = self.code;
                                                                var $2468 = self.val;
                                                                var $2469 = Parser$Reply$value$($2466, $2467, Kind$Term$ori$($2468, Kind$Term$let$($2430, $2445, (_x$24 => {
                                                                    var $2470 = $2460;
                                                                    return $2470;
                                                                }))));
                                                                var $2461 = $2469;
                                                                break;
                                                        };
                                                        var $2453 = $2461;
                                                        break;
                                                };
                                                var $2446 = $2453;
                                                break;
                                        };
                                        var $2438 = $2446;
                                        break;
                                };
                                var $2431 = $2438;
                                break;
                        };
                        var $2423 = $2431;
                        break;
                };
                var $2415 = $2423;
                break;
        };
        return $2415;
    };
    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);

    function Kind$Parser$getwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2472 = self.idx;
                var $2473 = self.code;
                var $2474 = self.err;
                var $2475 = Parser$Reply$error$($2472, $2473, $2474);
                var $2471 = $2475;
                break;
            case 'Parser.Reply.value':
                var $2476 = self.idx;
                var $2477 = self.code;
                var $2478 = self.val;
                var self = Parser$maybe$(Kind$Parser$text("let "), $2476, $2477);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2480 = self.idx;
                        var $2481 = self.code;
                        var $2482 = self.err;
                        var $2483 = Parser$Reply$error$($2480, $2481, $2482);
                        var $2479 = $2483;
                        break;
                    case 'Parser.Reply.value':
                        var $2484 = self.idx;
                        var $2485 = self.code;
                        var self = Kind$Parser$text$("{", $2484, $2485);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2487 = self.idx;
                                var $2488 = self.code;
                                var $2489 = self.err;
                                var $2490 = Parser$Reply$error$($2487, $2488, $2489);
                                var $2486 = $2490;
                                break;
                            case 'Parser.Reply.value':
                                var $2491 = self.idx;
                                var $2492 = self.code;
                                var self = Kind$Parser$name$($2491, $2492);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2494 = self.idx;
                                        var $2495 = self.code;
                                        var $2496 = self.err;
                                        var $2497 = Parser$Reply$error$($2494, $2495, $2496);
                                        var $2493 = $2497;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2498 = self.idx;
                                        var $2499 = self.code;
                                        var $2500 = self.val;
                                        var self = Kind$Parser$text$(",", $2498, $2499);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2502 = self.idx;
                                                var $2503 = self.code;
                                                var $2504 = self.err;
                                                var $2505 = Parser$Reply$error$($2502, $2503, $2504);
                                                var $2501 = $2505;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2506 = self.idx;
                                                var $2507 = self.code;
                                                var self = Kind$Parser$name$($2506, $2507);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2509 = self.idx;
                                                        var $2510 = self.code;
                                                        var $2511 = self.err;
                                                        var $2512 = Parser$Reply$error$($2509, $2510, $2511);
                                                        var $2508 = $2512;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2513 = self.idx;
                                                        var $2514 = self.code;
                                                        var $2515 = self.val;
                                                        var self = Kind$Parser$text$("}", $2513, $2514);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2517 = self.idx;
                                                                var $2518 = self.code;
                                                                var $2519 = self.err;
                                                                var $2520 = Parser$Reply$error$($2517, $2518, $2519);
                                                                var $2516 = $2520;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2521 = self.idx;
                                                                var $2522 = self.code;
                                                                var self = Kind$Parser$text$("=", $2521, $2522);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2524 = self.idx;
                                                                        var $2525 = self.code;
                                                                        var $2526 = self.err;
                                                                        var $2527 = Parser$Reply$error$($2524, $2525, $2526);
                                                                        var $2523 = $2527;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2528 = self.idx;
                                                                        var $2529 = self.code;
                                                                        var self = Kind$Parser$text$("while ", $2528, $2529);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2531 = self.idx;
                                                                                var $2532 = self.code;
                                                                                var $2533 = self.err;
                                                                                var $2534 = Parser$Reply$error$($2531, $2532, $2533);
                                                                                var $2530 = $2534;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2535 = self.idx;
                                                                                var $2536 = self.code;
                                                                                var self = Kind$Parser$term$($2535, $2536);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2538 = self.idx;
                                                                                        var $2539 = self.code;
                                                                                        var $2540 = self.err;
                                                                                        var $2541 = Parser$Reply$error$($2538, $2539, $2540);
                                                                                        var $2537 = $2541;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2542 = self.idx;
                                                                                        var $2543 = self.code;
                                                                                        var $2544 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $2542, $2543);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2546 = self.idx;
                                                                                                var $2547 = self.code;
                                                                                                var $2548 = self.err;
                                                                                                var $2549 = Parser$Reply$error$($2546, $2547, $2548);
                                                                                                var $2545 = $2549;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2550 = self.idx;
                                                                                                var $2551 = self.code;
                                                                                                var self = Kind$Parser$term$($2550, $2551);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2553 = self.idx;
                                                                                                        var $2554 = self.code;
                                                                                                        var $2555 = self.err;
                                                                                                        var $2556 = Parser$Reply$error$($2553, $2554, $2555);
                                                                                                        var $2552 = $2556;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2557 = self.idx;
                                                                                                        var $2558 = self.code;
                                                                                                        var $2559 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2557, $2558);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2561 = self.idx;
                                                                                                                var $2562 = self.code;
                                                                                                                var $2563 = self.err;
                                                                                                                var $2564 = Parser$Reply$error$($2561, $2562, $2563);
                                                                                                                var $2560 = $2564;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2565 = self.idx;
                                                                                                                var $2566 = self.code;
                                                                                                                var self = Kind$Parser$term$($2565, $2566);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2568 = self.idx;
                                                                                                                        var $2569 = self.code;
                                                                                                                        var $2570 = self.err;
                                                                                                                        var $2571 = Parser$Reply$error$($2568, $2569, $2570);
                                                                                                                        var $2567 = $2571;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2572 = self.idx;
                                                                                                                        var $2573 = self.code;
                                                                                                                        var $2574 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($2478, $2572, $2573);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $2576 = self.idx;
                                                                                                                                var $2577 = self.code;
                                                                                                                                var $2578 = self.err;
                                                                                                                                var $2579 = Parser$Reply$error$($2576, $2577, $2578);
                                                                                                                                var $2575 = $2579;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $2580 = self.idx;
                                                                                                                                var $2581 = self.code;
                                                                                                                                var $2582 = self.val;
                                                                                                                                var _moti$48 = Kind$Term$lam$("", (_x$48 => {
                                                                                                                                    var $2584 = Kind$Term$hol$(Bits$e);
                                                                                                                                    return $2584;
                                                                                                                                }));
                                                                                                                                var _term$49 = Kind$Term$ref$("Function.while");
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$51 = Kind$Term$ref$("Pair.new");
                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($2500));
                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($2515));
                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);
                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$("s", (_s$57 => {
                                                                                                                                    var $2585 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($2500, (_x$58 => {
                                                                                                                                        var $2586 = Kind$Term$lam$($2515, (_y$59 => {
                                                                                                                                            var $2587 = $2544;
                                                                                                                                            return $2587;
                                                                                                                                        }));
                                                                                                                                        return $2586;
                                                                                                                                    })));
                                                                                                                                    return $2585;
                                                                                                                                })));
                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$("s", (_s$58 => {
                                                                                                                                    var $2588 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($2500, (_x$59 => {
                                                                                                                                        var $2589 = Kind$Term$lam$($2515, (_y$60 => {
                                                                                                                                            var $2590 = $2559;
                                                                                                                                            return $2590;
                                                                                                                                        }));
                                                                                                                                        return $2589;
                                                                                                                                    })));
                                                                                                                                    return $2588;
                                                                                                                                })));
                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($2500, (_x$59 => {
                                                                                                                                    var $2591 = Kind$Term$lam$($2515, (_y$60 => {
                                                                                                                                        var $2592 = $2574;
                                                                                                                                        return $2592;
                                                                                                                                    }));
                                                                                                                                    return $2591;
                                                                                                                                })));
                                                                                                                                var $2583 = Parser$Reply$value$($2580, $2581, Kind$Term$ori$($2582, _term$59));
                                                                                                                                var $2575 = $2583;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $2567 = $2575;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2560 = $2567;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2552 = $2560;
                                                                                                        break;
                                                                                                };
                                                                                                var $2545 = $2552;
                                                                                                break;
                                                                                        };
                                                                                        var $2537 = $2545;
                                                                                        break;
                                                                                };
                                                                                var $2530 = $2537;
                                                                                break;
                                                                        };
                                                                        var $2523 = $2530;
                                                                        break;
                                                                };
                                                                var $2516 = $2523;
                                                                break;
                                                        };
                                                        var $2508 = $2516;
                                                        break;
                                                };
                                                var $2501 = $2508;
                                                break;
                                        };
                                        var $2493 = $2501;
                                        break;
                                };
                                var $2486 = $2493;
                                break;
                        };
                        var $2479 = $2486;
                        break;
                };
                var $2471 = $2479;
                break;
        };
        return $2471;
    };
    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);

    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2594 = self.idx;
                var $2595 = self.code;
                var $2596 = self.err;
                var $2597 = Parser$Reply$error$($2594, $2595, $2596);
                var $2593 = $2597;
                break;
            case 'Parser.Reply.value':
                var $2598 = self.idx;
                var $2599 = self.code;
                var $2600 = self.val;
                var self = Kind$Parser$text$("while ", $2598, $2599);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2602 = self.idx;
                        var $2603 = self.code;
                        var $2604 = self.err;
                        var $2605 = Parser$Reply$error$($2602, $2603, $2604);
                        var $2601 = $2605;
                        break;
                    case 'Parser.Reply.value':
                        var $2606 = self.idx;
                        var $2607 = self.code;
                        var self = Kind$Parser$term$($2606, $2607);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2609 = self.idx;
                                var $2610 = self.code;
                                var $2611 = self.err;
                                var $2612 = Parser$Reply$error$($2609, $2610, $2611);
                                var $2608 = $2612;
                                break;
                            case 'Parser.Reply.value':
                                var $2613 = self.idx;
                                var $2614 = self.code;
                                var $2615 = self.val;
                                var self = Kind$Parser$text$("with ", $2613, $2614);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2617 = self.idx;
                                        var $2618 = self.code;
                                        var $2619 = self.err;
                                        var $2620 = Parser$Reply$error$($2617, $2618, $2619);
                                        var $2616 = $2620;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2621 = self.idx;
                                        var $2622 = self.code;
                                        var self = Kind$Parser$text$("{", $2621, $2622);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2624 = self.idx;
                                                var $2625 = self.code;
                                                var $2626 = self.err;
                                                var $2627 = Parser$Reply$error$($2624, $2625, $2626);
                                                var $2623 = $2627;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2628 = self.idx;
                                                var $2629 = self.code;
                                                var self = Kind$Parser$name$($2628, $2629);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2631 = self.idx;
                                                        var $2632 = self.code;
                                                        var $2633 = self.err;
                                                        var $2634 = Parser$Reply$error$($2631, $2632, $2633);
                                                        var $2630 = $2634;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2635 = self.idx;
                                                        var $2636 = self.code;
                                                        var $2637 = self.val;
                                                        var self = Kind$Parser$text$(",", $2635, $2636);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2639 = self.idx;
                                                                var $2640 = self.code;
                                                                var $2641 = self.err;
                                                                var $2642 = Parser$Reply$error$($2639, $2640, $2641);
                                                                var $2638 = $2642;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2643 = self.idx;
                                                                var $2644 = self.code;
                                                                var self = Kind$Parser$name$($2643, $2644);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2646 = self.idx;
                                                                        var $2647 = self.code;
                                                                        var $2648 = self.err;
                                                                        var $2649 = Parser$Reply$error$($2646, $2647, $2648);
                                                                        var $2645 = $2649;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2650 = self.idx;
                                                                        var $2651 = self.code;
                                                                        var $2652 = self.val;
                                                                        var self = Kind$Parser$text$("}", $2650, $2651);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2654 = self.idx;
                                                                                var $2655 = self.code;
                                                                                var $2656 = self.err;
                                                                                var $2657 = Parser$Reply$error$($2654, $2655, $2656);
                                                                                var $2653 = $2657;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2658 = self.idx;
                                                                                var $2659 = self.code;
                                                                                var self = Kind$Parser$text$(":", $2658, $2659);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2661 = self.idx;
                                                                                        var $2662 = self.code;
                                                                                        var $2663 = self.err;
                                                                                        var $2664 = Parser$Reply$error$($2661, $2662, $2663);
                                                                                        var $2660 = $2664;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2665 = self.idx;
                                                                                        var $2666 = self.code;
                                                                                        var self = Kind$Parser$term$($2665, $2666);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2668 = self.idx;
                                                                                                var $2669 = self.code;
                                                                                                var $2670 = self.err;
                                                                                                var $2671 = Parser$Reply$error$($2668, $2669, $2670);
                                                                                                var $2667 = $2671;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2672 = self.idx;
                                                                                                var $2673 = self.code;
                                                                                                var $2674 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2672, $2673);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2676 = self.idx;
                                                                                                        var $2677 = self.code;
                                                                                                        var $2678 = self.err;
                                                                                                        var $2679 = Parser$Reply$error$($2676, $2677, $2678);
                                                                                                        var $2675 = $2679;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2680 = self.idx;
                                                                                                        var $2681 = self.code;
                                                                                                        var self = Kind$Parser$term$($2680, $2681);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2683 = self.idx;
                                                                                                                var $2684 = self.code;
                                                                                                                var $2685 = self.err;
                                                                                                                var $2686 = Parser$Reply$error$($2683, $2684, $2685);
                                                                                                                var $2682 = $2686;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2687 = self.idx;
                                                                                                                var $2688 = self.code;
                                                                                                                var $2689 = self.val;
                                                                                                                var self = Kind$Parser$stop$($2600, $2687, $2688);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2691 = self.idx;
                                                                                                                        var $2692 = self.code;
                                                                                                                        var $2693 = self.err;
                                                                                                                        var $2694 = Parser$Reply$error$($2691, $2692, $2693);
                                                                                                                        var $2690 = $2694;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2695 = self.idx;
                                                                                                                        var $2696 = self.code;
                                                                                                                        var $2697 = self.val;
                                                                                                                        var _moti$45 = Kind$Term$lam$("", (_x$45 => {
                                                                                                                            var $2699 = Kind$Term$hol$(Bits$e);
                                                                                                                            return $2699;
                                                                                                                        }));
                                                                                                                        var _term$46 = Kind$Term$ref$("Function.while");
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$48 = Kind$Term$ref$("Pair.new");
                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($2637));
                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($2652));
                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);
                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$("s", (_s$54 => {
                                                                                                                            var $2700 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($2637, (_x$55 => {
                                                                                                                                var $2701 = Kind$Term$lam$($2652, (_y$56 => {
                                                                                                                                    var $2702 = $2615;
                                                                                                                                    return $2702;
                                                                                                                                }));
                                                                                                                                return $2701;
                                                                                                                            })));
                                                                                                                            return $2700;
                                                                                                                        })));
                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$("s", (_s$55 => {
                                                                                                                            var $2703 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($2637, (_x$56 => {
                                                                                                                                var $2704 = Kind$Term$lam$($2652, (_y$57 => {
                                                                                                                                    var $2705 = $2674;
                                                                                                                                    return $2705;
                                                                                                                                }));
                                                                                                                                return $2704;
                                                                                                                            })));
                                                                                                                            return $2703;
                                                                                                                        })));
                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($2637, (_x$56 => {
                                                                                                                            var $2706 = Kind$Term$lam$($2652, (_y$57 => {
                                                                                                                                var $2707 = $2689;
                                                                                                                                return $2707;
                                                                                                                            }));
                                                                                                                            return $2706;
                                                                                                                        })));
                                                                                                                        var $2698 = Parser$Reply$value$($2695, $2696, Kind$Term$ori$($2697, _term$56));
                                                                                                                        var $2690 = $2698;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2682 = $2690;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2675 = $2682;
                                                                                                        break;
                                                                                                };
                                                                                                var $2667 = $2675;
                                                                                                break;
                                                                                        };
                                                                                        var $2660 = $2667;
                                                                                        break;
                                                                                };
                                                                                var $2653 = $2660;
                                                                                break;
                                                                        };
                                                                        var $2645 = $2653;
                                                                        break;
                                                                };
                                                                var $2638 = $2645;
                                                                break;
                                                        };
                                                        var $2630 = $2638;
                                                        break;
                                                };
                                                var $2623 = $2630;
                                                break;
                                        };
                                        var $2616 = $2623;
                                        break;
                                };
                                var $2608 = $2616;
                                break;
                        };
                        var $2601 = $2608;
                        break;
                };
                var $2593 = $2601;
                break;
        };
        return $2593;
    };
    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);

    function Kind$Parser$get$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2709 = self.idx;
                var $2710 = self.code;
                var $2711 = self.err;
                var $2712 = Parser$Reply$error$($2709, $2710, $2711);
                var $2708 = $2712;
                break;
            case 'Parser.Reply.value':
                var $2713 = self.idx;
                var $2714 = self.code;
                var $2715 = self.val;
                var self = Kind$Parser$text$("let ", $2713, $2714);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2717 = self.idx;
                        var $2718 = self.code;
                        var $2719 = self.err;
                        var $2720 = Parser$Reply$error$($2717, $2718, $2719);
                        var $2716 = $2720;
                        break;
                    case 'Parser.Reply.value':
                        var $2721 = self.idx;
                        var $2722 = self.code;
                        var self = Kind$Parser$text$("{", $2721, $2722);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2724 = self.idx;
                                var $2725 = self.code;
                                var $2726 = self.err;
                                var $2727 = Parser$Reply$error$($2724, $2725, $2726);
                                var $2723 = $2727;
                                break;
                            case 'Parser.Reply.value':
                                var $2728 = self.idx;
                                var $2729 = self.code;
                                var self = Kind$Parser$name$($2728, $2729);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2731 = self.idx;
                                        var $2732 = self.code;
                                        var $2733 = self.err;
                                        var $2734 = Parser$Reply$error$($2731, $2732, $2733);
                                        var $2730 = $2734;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2735 = self.idx;
                                        var $2736 = self.code;
                                        var $2737 = self.val;
                                        var self = Kind$Parser$text$(",", $2735, $2736);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2739 = self.idx;
                                                var $2740 = self.code;
                                                var $2741 = self.err;
                                                var $2742 = Parser$Reply$error$($2739, $2740, $2741);
                                                var $2738 = $2742;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2743 = self.idx;
                                                var $2744 = self.code;
                                                var self = Kind$Parser$name$($2743, $2744);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2746 = self.idx;
                                                        var $2747 = self.code;
                                                        var $2748 = self.err;
                                                        var $2749 = Parser$Reply$error$($2746, $2747, $2748);
                                                        var $2745 = $2749;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2750 = self.idx;
                                                        var $2751 = self.code;
                                                        var $2752 = self.val;
                                                        var self = Kind$Parser$text$("}", $2750, $2751);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2754 = self.idx;
                                                                var $2755 = self.code;
                                                                var $2756 = self.err;
                                                                var $2757 = Parser$Reply$error$($2754, $2755, $2756);
                                                                var $2753 = $2757;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2758 = self.idx;
                                                                var $2759 = self.code;
                                                                var self = Kind$Parser$text$("=", $2758, $2759);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2761 = self.idx;
                                                                        var $2762 = self.code;
                                                                        var $2763 = self.err;
                                                                        var $2764 = Parser$Reply$error$($2761, $2762, $2763);
                                                                        var $2760 = $2764;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2765 = self.idx;
                                                                        var $2766 = self.code;
                                                                        var self = Kind$Parser$term$($2765, $2766);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2768 = self.idx;
                                                                                var $2769 = self.code;
                                                                                var $2770 = self.err;
                                                                                var $2771 = Parser$Reply$error$($2768, $2769, $2770);
                                                                                var $2767 = $2771;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2772 = self.idx;
                                                                                var $2773 = self.code;
                                                                                var $2774 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2772, $2773);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2776 = self.idx;
                                                                                        var $2777 = self.code;
                                                                                        var $2778 = self.err;
                                                                                        var $2779 = Parser$Reply$error$($2776, $2777, $2778);
                                                                                        var $2775 = $2779;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2780 = self.idx;
                                                                                        var $2781 = self.code;
                                                                                        var self = Kind$Parser$term$($2780, $2781);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2783 = self.idx;
                                                                                                var $2784 = self.code;
                                                                                                var $2785 = self.err;
                                                                                                var $2786 = Parser$Reply$error$($2783, $2784, $2785);
                                                                                                var $2782 = $2786;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2787 = self.idx;
                                                                                                var $2788 = self.code;
                                                                                                var $2789 = self.val;
                                                                                                var self = Kind$Parser$stop$($2715, $2787, $2788);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2791 = self.idx;
                                                                                                        var $2792 = self.code;
                                                                                                        var $2793 = self.err;
                                                                                                        var $2794 = Parser$Reply$error$($2791, $2792, $2793);
                                                                                                        var $2790 = $2794;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2795 = self.idx;
                                                                                                        var $2796 = self.code;
                                                                                                        var $2797 = self.val;
                                                                                                        var _term$39 = $2774;
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$("", (_x$40 => {
                                                                                                            var $2799 = Kind$Term$hol$(Bits$e);
                                                                                                            return $2799;
                                                                                                        })));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($2737, (_x$41 => {
                                                                                                            var $2800 = Kind$Term$lam$($2752, (_y$42 => {
                                                                                                                var $2801 = $2789;
                                                                                                                return $2801;
                                                                                                            }));
                                                                                                            return $2800;
                                                                                                        })));
                                                                                                        var $2798 = Parser$Reply$value$($2795, $2796, Kind$Term$ori$($2797, _term$41));
                                                                                                        var $2790 = $2798;
                                                                                                        break;
                                                                                                };
                                                                                                var $2782 = $2790;
                                                                                                break;
                                                                                        };
                                                                                        var $2775 = $2782;
                                                                                        break;
                                                                                };
                                                                                var $2767 = $2775;
                                                                                break;
                                                                        };
                                                                        var $2760 = $2767;
                                                                        break;
                                                                };
                                                                var $2753 = $2760;
                                                                break;
                                                        };
                                                        var $2745 = $2753;
                                                        break;
                                                };
                                                var $2738 = $2745;
                                                break;
                                        };
                                        var $2730 = $2738;
                                        break;
                                };
                                var $2723 = $2730;
                                break;
                        };
                        var $2716 = $2723;
                        break;
                };
                var $2708 = $2716;
                break;
        };
        return $2708;
    };
    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);

    function Kind$Parser$get$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2803 = self.idx;
                var $2804 = self.code;
                var $2805 = self.err;
                var $2806 = Parser$Reply$error$($2803, $2804, $2805);
                var $2802 = $2806;
                break;
            case 'Parser.Reply.value':
                var $2807 = self.idx;
                var $2808 = self.code;
                var $2809 = self.val;
                var self = Kind$Parser$text$("{", $2807, $2808);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2811 = self.idx;
                        var $2812 = self.code;
                        var $2813 = self.err;
                        var $2814 = Parser$Reply$error$($2811, $2812, $2813);
                        var $2810 = $2814;
                        break;
                    case 'Parser.Reply.value':
                        var $2815 = self.idx;
                        var $2816 = self.code;
                        var self = Kind$Parser$name$($2815, $2816);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2818 = self.idx;
                                var $2819 = self.code;
                                var $2820 = self.err;
                                var $2821 = Parser$Reply$error$($2818, $2819, $2820);
                                var $2817 = $2821;
                                break;
                            case 'Parser.Reply.value':
                                var $2822 = self.idx;
                                var $2823 = self.code;
                                var $2824 = self.val;
                                var self = Kind$Parser$text$(",", $2822, $2823);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2826 = self.idx;
                                        var $2827 = self.code;
                                        var $2828 = self.err;
                                        var $2829 = Parser$Reply$error$($2826, $2827, $2828);
                                        var $2825 = $2829;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2830 = self.idx;
                                        var $2831 = self.code;
                                        var self = Kind$Parser$name$($2830, $2831);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2833 = self.idx;
                                                var $2834 = self.code;
                                                var $2835 = self.err;
                                                var $2836 = Parser$Reply$error$($2833, $2834, $2835);
                                                var $2832 = $2836;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2837 = self.idx;
                                                var $2838 = self.code;
                                                var $2839 = self.val;
                                                var self = Kind$Parser$text$("}", $2837, $2838);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2841 = self.idx;
                                                        var $2842 = self.code;
                                                        var $2843 = self.err;
                                                        var $2844 = Parser$Reply$error$($2841, $2842, $2843);
                                                        var $2840 = $2844;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2845 = self.idx;
                                                        var $2846 = self.code;
                                                        var self = Kind$Parser$text$("= ", $2845, $2846);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2848 = self.idx;
                                                                var $2849 = self.code;
                                                                var $2850 = self.err;
                                                                var $2851 = Parser$Reply$error$($2848, $2849, $2850);
                                                                var $2847 = $2851;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2852 = self.idx;
                                                                var $2853 = self.code;
                                                                var self = Kind$Parser$term$($2852, $2853);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2855 = self.idx;
                                                                        var $2856 = self.code;
                                                                        var $2857 = self.err;
                                                                        var $2858 = Parser$Reply$error$($2855, $2856, $2857);
                                                                        var $2854 = $2858;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2859 = self.idx;
                                                                        var $2860 = self.code;
                                                                        var $2861 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2859, $2860);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2863 = self.idx;
                                                                                var $2864 = self.code;
                                                                                var $2865 = self.err;
                                                                                var $2866 = Parser$Reply$error$($2863, $2864, $2865);
                                                                                var $2862 = $2866;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2867 = self.idx;
                                                                                var $2868 = self.code;
                                                                                var self = Kind$Parser$term$($2867, $2868);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2870 = self.idx;
                                                                                        var $2871 = self.code;
                                                                                        var $2872 = self.err;
                                                                                        var $2873 = Parser$Reply$error$($2870, $2871, $2872);
                                                                                        var $2869 = $2873;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2874 = self.idx;
                                                                                        var $2875 = self.code;
                                                                                        var $2876 = self.val;
                                                                                        var self = Kind$Parser$stop$($2809, $2874, $2875);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2878 = self.idx;
                                                                                                var $2879 = self.code;
                                                                                                var $2880 = self.err;
                                                                                                var $2881 = Parser$Reply$error$($2878, $2879, $2880);
                                                                                                var $2877 = $2881;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2882 = self.idx;
                                                                                                var $2883 = self.code;
                                                                                                var $2884 = self.val;
                                                                                                var _term$36 = $2861;
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$("", (_x$37 => {
                                                                                                    var $2886 = Kind$Term$hol$(Bits$e);
                                                                                                    return $2886;
                                                                                                })));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($2824, (_x$38 => {
                                                                                                    var $2887 = Kind$Term$lam$($2839, (_y$39 => {
                                                                                                        var $2888 = $2876;
                                                                                                        return $2888;
                                                                                                    }));
                                                                                                    return $2887;
                                                                                                })));
                                                                                                var $2885 = Parser$Reply$value$($2882, $2883, Kind$Term$ori$($2884, _term$38));
                                                                                                var $2877 = $2885;
                                                                                                break;
                                                                                        };
                                                                                        var $2869 = $2877;
                                                                                        break;
                                                                                };
                                                                                var $2862 = $2869;
                                                                                break;
                                                                        };
                                                                        var $2854 = $2862;
                                                                        break;
                                                                };
                                                                var $2847 = $2854;
                                                                break;
                                                        };
                                                        var $2840 = $2847;
                                                        break;
                                                };
                                                var $2832 = $2840;
                                                break;
                                        };
                                        var $2825 = $2832;
                                        break;
                                };
                                var $2817 = $2825;
                                break;
                        };
                        var $2810 = $2817;
                        break;
                };
                var $2802 = $2810;
                break;
        };
        return $2802;
    };
    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);

    function Kind$Parser$def$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2890 = self.idx;
                var $2891 = self.code;
                var $2892 = self.err;
                var $2893 = Parser$Reply$error$($2890, $2891, $2892);
                var $2889 = $2893;
                break;
            case 'Parser.Reply.value':
                var $2894 = self.idx;
                var $2895 = self.code;
                var $2896 = self.val;
                var self = Kind$Parser$text$("def ", $2894, $2895);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2898 = self.idx;
                        var $2899 = self.code;
                        var $2900 = self.err;
                        var $2901 = Parser$Reply$error$($2898, $2899, $2900);
                        var $2897 = $2901;
                        break;
                    case 'Parser.Reply.value':
                        var $2902 = self.idx;
                        var $2903 = self.code;
                        var self = Kind$Parser$name$($2902, $2903);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2905 = self.idx;
                                var $2906 = self.code;
                                var $2907 = self.err;
                                var $2908 = Parser$Reply$error$($2905, $2906, $2907);
                                var $2904 = $2908;
                                break;
                            case 'Parser.Reply.value':
                                var $2909 = self.idx;
                                var $2910 = self.code;
                                var $2911 = self.val;
                                var self = Kind$Parser$text$("=", $2909, $2910);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2913 = self.idx;
                                        var $2914 = self.code;
                                        var $2915 = self.err;
                                        var $2916 = Parser$Reply$error$($2913, $2914, $2915);
                                        var $2912 = $2916;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2917 = self.idx;
                                        var $2918 = self.code;
                                        var self = Kind$Parser$term$($2917, $2918);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2920 = self.idx;
                                                var $2921 = self.code;
                                                var $2922 = self.err;
                                                var $2923 = Parser$Reply$error$($2920, $2921, $2922);
                                                var $2919 = $2923;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2924 = self.idx;
                                                var $2925 = self.code;
                                                var $2926 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2924, $2925);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2928 = self.idx;
                                                        var $2929 = self.code;
                                                        var $2930 = self.err;
                                                        var $2931 = Parser$Reply$error$($2928, $2929, $2930);
                                                        var $2927 = $2931;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2932 = self.idx;
                                                        var $2933 = self.code;
                                                        var self = Kind$Parser$term$($2932, $2933);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2935 = self.idx;
                                                                var $2936 = self.code;
                                                                var $2937 = self.err;
                                                                var $2938 = Parser$Reply$error$($2935, $2936, $2937);
                                                                var $2934 = $2938;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2939 = self.idx;
                                                                var $2940 = self.code;
                                                                var $2941 = self.val;
                                                                var self = Kind$Parser$stop$($2896, $2939, $2940);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2943 = self.idx;
                                                                        var $2944 = self.code;
                                                                        var $2945 = self.err;
                                                                        var $2946 = Parser$Reply$error$($2943, $2944, $2945);
                                                                        var $2942 = $2946;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2947 = self.idx;
                                                                        var $2948 = self.code;
                                                                        var $2949 = self.val;
                                                                        var $2950 = Parser$Reply$value$($2947, $2948, Kind$Term$ori$($2949, Kind$Term$def$($2911, $2926, (_x$27 => {
                                                                            var $2951 = $2941;
                                                                            return $2951;
                                                                        }))));
                                                                        var $2942 = $2950;
                                                                        break;
                                                                };
                                                                var $2934 = $2942;
                                                                break;
                                                        };
                                                        var $2927 = $2934;
                                                        break;
                                                };
                                                var $2919 = $2927;
                                                break;
                                        };
                                        var $2912 = $2919;
                                        break;
                                };
                                var $2904 = $2912;
                                break;
                        };
                        var $2897 = $2904;
                        break;
                };
                var $2889 = $2897;
                break;
        };
        return $2889;
    };
    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);

    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2953 = self.idx;
                var $2954 = self.code;
                var $2955 = self.err;
                var $2956 = Parser$Reply$error$($2953, $2954, $2955);
                var $2952 = $2956;
                break;
            case 'Parser.Reply.value':
                var $2957 = self.idx;
                var $2958 = self.code;
                var $2959 = self.val;
                var self = Kind$Parser$text$("rewrite ", $2957, $2958);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2961 = self.idx;
                        var $2962 = self.code;
                        var $2963 = self.err;
                        var $2964 = Parser$Reply$error$($2961, $2962, $2963);
                        var $2960 = $2964;
                        break;
                    case 'Parser.Reply.value':
                        var $2965 = self.idx;
                        var $2966 = self.code;
                        var self = Kind$Parser$name1$($2965, $2966);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2968 = self.idx;
                                var $2969 = self.code;
                                var $2970 = self.err;
                                var $2971 = Parser$Reply$error$($2968, $2969, $2970);
                                var $2967 = $2971;
                                break;
                            case 'Parser.Reply.value':
                                var $2972 = self.idx;
                                var $2973 = self.code;
                                var $2974 = self.val;
                                var self = Kind$Parser$text$("in", $2972, $2973);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2976 = self.idx;
                                        var $2977 = self.code;
                                        var $2978 = self.err;
                                        var $2979 = Parser$Reply$error$($2976, $2977, $2978);
                                        var $2975 = $2979;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2980 = self.idx;
                                        var $2981 = self.code;
                                        var self = Kind$Parser$term$($2980, $2981);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2983 = self.idx;
                                                var $2984 = self.code;
                                                var $2985 = self.err;
                                                var $2986 = Parser$Reply$error$($2983, $2984, $2985);
                                                var $2982 = $2986;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2987 = self.idx;
                                                var $2988 = self.code;
                                                var $2989 = self.val;
                                                var self = Kind$Parser$text$("with", $2987, $2988);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2991 = self.idx;
                                                        var $2992 = self.code;
                                                        var $2993 = self.err;
                                                        var $2994 = Parser$Reply$error$($2991, $2992, $2993);
                                                        var $2990 = $2994;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2995 = self.idx;
                                                        var $2996 = self.code;
                                                        var self = Kind$Parser$term$($2995, $2996);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2998 = self.idx;
                                                                var $2999 = self.code;
                                                                var $3000 = self.err;
                                                                var $3001 = Parser$Reply$error$($2998, $2999, $3000);
                                                                var $2997 = $3001;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3002 = self.idx;
                                                                var $3003 = self.code;
                                                                var $3004 = self.val;
                                                                var self = Kind$Parser$term$($3002, $3003);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3006 = self.idx;
                                                                        var $3007 = self.code;
                                                                        var $3008 = self.err;
                                                                        var $3009 = Parser$Reply$error$($3006, $3007, $3008);
                                                                        var $3005 = $3009;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3010 = self.idx;
                                                                        var $3011 = self.code;
                                                                        var $3012 = self.val;
                                                                        var self = Kind$Parser$stop$($2959, $3010, $3011);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $3014 = self.idx;
                                                                                var $3015 = self.code;
                                                                                var $3016 = self.err;
                                                                                var $3017 = Parser$Reply$error$($3014, $3015, $3016);
                                                                                var $3013 = $3017;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $3018 = self.idx;
                                                                                var $3019 = self.code;
                                                                                var $3020 = self.val;
                                                                                var _moti$30 = Kind$Term$lam$($2974, (_s$30 => {
                                                                                    var $3022 = Kind$Term$lam$("", (_x$31 => {
                                                                                        var $3023 = $2989;
                                                                                        return $3023;
                                                                                    }));
                                                                                    return $3022;
                                                                                }));
                                                                                var _term$31 = Kind$Term$ref$("Equal.mirror");
                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));
                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                var _term$35 = Kind$Term$app$(_term$34, $3004);
                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);
                                                                                var _term$37 = Kind$Term$app$(_term$36, $3012);
                                                                                var $3021 = Parser$Reply$value$($3018, $3019, Kind$Term$ori$($3020, _term$37));
                                                                                var $3013 = $3021;
                                                                                break;
                                                                        };
                                                                        var $3005 = $3013;
                                                                        break;
                                                                };
                                                                var $2997 = $3005;
                                                                break;
                                                        };
                                                        var $2990 = $2997;
                                                        break;
                                                };
                                                var $2982 = $2990;
                                                break;
                                        };
                                        var $2975 = $2982;
                                        break;
                                };
                                var $2967 = $2975;
                                break;
                        };
                        var $2960 = $2967;
                        break;
                };
                var $2952 = $2960;
                break;
        };
        return $2952;
    };
    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);

    function Kind$Parser$if$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3025 = self.idx;
                var $3026 = self.code;
                var $3027 = self.err;
                var $3028 = Parser$Reply$error$($3025, $3026, $3027);
                var $3024 = $3028;
                break;
            case 'Parser.Reply.value':
                var $3029 = self.idx;
                var $3030 = self.code;
                var $3031 = self.val;
                var self = Kind$Parser$text$("if ", $3029, $3030);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3033 = self.idx;
                        var $3034 = self.code;
                        var $3035 = self.err;
                        var $3036 = Parser$Reply$error$($3033, $3034, $3035);
                        var $3032 = $3036;
                        break;
                    case 'Parser.Reply.value':
                        var $3037 = self.idx;
                        var $3038 = self.code;
                        var self = Kind$Parser$term$($3037, $3038);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3040 = self.idx;
                                var $3041 = self.code;
                                var $3042 = self.err;
                                var $3043 = Parser$Reply$error$($3040, $3041, $3042);
                                var $3039 = $3043;
                                break;
                            case 'Parser.Reply.value':
                                var $3044 = self.idx;
                                var $3045 = self.code;
                                var $3046 = self.val;
                                var self = Kind$Parser$text$("then", $3044, $3045);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3048 = self.idx;
                                        var $3049 = self.code;
                                        var $3050 = self.err;
                                        var $3051 = Parser$Reply$error$($3048, $3049, $3050);
                                        var $3047 = $3051;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3052 = self.idx;
                                        var $3053 = self.code;
                                        var self = Kind$Parser$term$($3052, $3053);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3055 = self.idx;
                                                var $3056 = self.code;
                                                var $3057 = self.err;
                                                var $3058 = Parser$Reply$error$($3055, $3056, $3057);
                                                var $3054 = $3058;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3059 = self.idx;
                                                var $3060 = self.code;
                                                var $3061 = self.val;
                                                var self = Kind$Parser$text$("else", $3059, $3060);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3063 = self.idx;
                                                        var $3064 = self.code;
                                                        var $3065 = self.err;
                                                        var $3066 = Parser$Reply$error$($3063, $3064, $3065);
                                                        var $3062 = $3066;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3067 = self.idx;
                                                        var $3068 = self.code;
                                                        var self = Kind$Parser$term$($3067, $3068);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3070 = self.idx;
                                                                var $3071 = self.code;
                                                                var $3072 = self.err;
                                                                var $3073 = Parser$Reply$error$($3070, $3071, $3072);
                                                                var $3069 = $3073;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3074 = self.idx;
                                                                var $3075 = self.code;
                                                                var $3076 = self.val;
                                                                var self = Kind$Parser$stop$($3031, $3074, $3075);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3078 = self.idx;
                                                                        var $3079 = self.code;
                                                                        var $3080 = self.err;
                                                                        var $3081 = Parser$Reply$error$($3078, $3079, $3080);
                                                                        var $3077 = $3081;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3082 = self.idx;
                                                                        var $3083 = self.code;
                                                                        var $3084 = self.val;
                                                                        var _term$27 = $3046;
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$("", (_x$28 => {
                                                                            var $3086 = Kind$Term$hol$(Bits$e);
                                                                            return $3086;
                                                                        })));
                                                                        var _term$29 = Kind$Term$app$(_term$28, $3061);
                                                                        var _term$30 = Kind$Term$app$(_term$29, $3076);
                                                                        var $3085 = Parser$Reply$value$($3082, $3083, Kind$Term$ori$($3084, _term$30));
                                                                        var $3077 = $3085;
                                                                        break;
                                                                };
                                                                var $3069 = $3077;
                                                                break;
                                                        };
                                                        var $3062 = $3069;
                                                        break;
                                                };
                                                var $3054 = $3062;
                                                break;
                                        };
                                        var $3047 = $3054;
                                        break;
                                };
                                var $3039 = $3047;
                                break;
                        };
                        var $3032 = $3039;
                        break;
                };
                var $3024 = $3032;
                break;
        };
        return $3024;
    };
    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);
    const Kind$Code$backslash = 92;
    const Kind$Code$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $3088 = self.fst;
                var $3089 = self.snd;
                var $3090 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($3088, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3092 = self.idx;
                            var $3093 = self.code;
                            var $3094 = self.err;
                            var $3095 = Parser$Reply$error$($3092, $3093, $3094);
                            var $3091 = $3095;
                            break;
                        case 'Parser.Reply.value':
                            var $3096 = self.idx;
                            var $3097 = self.code;
                            var $3098 = Parser$Reply$value$($3096, $3097, $3089);
                            var $3091 = $3098;
                            break;
                    };
                    return $3091;
                });
                var $3087 = $3090;
                break;
        };
        return $3087;
    }))), List$cons$(Parser$one, List$nil)));

    function Kind$Parser$char$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3100 = self.idx;
                var $3101 = self.code;
                var $3102 = self.err;
                var $3103 = Parser$Reply$error$($3100, $3101, $3102);
                var $3099 = $3103;
                break;
            case 'Parser.Reply.value':
                var $3104 = self.idx;
                var $3105 = self.code;
                var $3106 = self.val;
                var self = Kind$Parser$text$("\'", $3104, $3105);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3108 = self.idx;
                        var $3109 = self.code;
                        var $3110 = self.err;
                        var $3111 = Parser$Reply$error$($3108, $3109, $3110);
                        var $3107 = $3111;
                        break;
                    case 'Parser.Reply.value':
                        var $3112 = self.idx;
                        var $3113 = self.code;
                        var self = Kind$Parser$char$single($3112)($3113);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3115 = self.idx;
                                var $3116 = self.code;
                                var $3117 = self.err;
                                var $3118 = Parser$Reply$error$($3115, $3116, $3117);
                                var $3114 = $3118;
                                break;
                            case 'Parser.Reply.value':
                                var $3119 = self.idx;
                                var $3120 = self.code;
                                var $3121 = self.val;
                                var self = Parser$text$("\'", $3119, $3120);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3123 = self.idx;
                                        var $3124 = self.code;
                                        var $3125 = self.err;
                                        var $3126 = Parser$Reply$error$($3123, $3124, $3125);
                                        var $3122 = $3126;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3127 = self.idx;
                                        var $3128 = self.code;
                                        var self = Kind$Parser$stop$($3106, $3127, $3128);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3130 = self.idx;
                                                var $3131 = self.code;
                                                var $3132 = self.err;
                                                var $3133 = Parser$Reply$error$($3130, $3131, $3132);
                                                var $3129 = $3133;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3134 = self.idx;
                                                var $3135 = self.code;
                                                var $3136 = self.val;
                                                var $3137 = Parser$Reply$value$($3134, $3135, Kind$Term$ori$($3136, Kind$Term$chr$($3121)));
                                                var $3129 = $3137;
                                                break;
                                        };
                                        var $3122 = $3129;
                                        break;
                                };
                                var $3114 = $3122;
                                break;
                        };
                        var $3107 = $3114;
                        break;
                };
                var $3099 = $3107;
                break;
        };
        return $3099;
    };
    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $3138 = _res$2;
                    return $3138;
                } else {
                    var $3139 = self.charCodeAt(0);
                    var $3140 = self.slice(1);
                    var $3141 = String$reverse$go$($3140, String$cons$($3139, _res$2));
                    return $3141;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $3142 = String$reverse$go$(_xs$1, String$nil);
        return $3142;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Kind$Parser$string$go$(_delim$1, _str$2, _idx$3, _code$4) {
        var Kind$Parser$string$go$ = (_delim$1, _str$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_delim$1, _str$2, _idx$3, _code$4]
        });
        var Kind$Parser$string$go = _delim$1 => _str$2 => _idx$3 => _code$4 => Kind$Parser$string$go$(_delim$1, _str$2, _idx$3, _code$4);
        var arg = [_delim$1, _str$2, _idx$3, _code$4];
        while (true) {
            let [_delim$1, _str$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var self = _code$4;
                if (self.length === 0) {
                    var $3143 = Parser$Reply$error$(_idx$3, _code$4, "Non-terminating string.");
                    return $3143;
                } else {
                    var $3144 = self.charCodeAt(0);
                    var $3145 = self.slice(1);
                    var self = ($3144 === _delim$1);
                    if (self) {
                        var $3147 = Parser$Reply$value$(Nat$succ$(_idx$3), $3145, String$reverse$(_str$2));
                        var $3146 = $3147;
                    } else {
                        var self = Kind$Parser$char$single(_idx$3)(_code$4);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3149 = self.idx;
                                var $3150 = self.code;
                                var $3151 = self.err;
                                var $3152 = Parser$Reply$error$($3149, $3150, $3151);
                                var $3148 = $3152;
                                break;
                            case 'Parser.Reply.value':
                                var $3153 = self.idx;
                                var $3154 = self.code;
                                var $3155 = self.val;
                                var $3156 = Kind$Parser$string$go$(_delim$1, String$cons$($3155, _str$2), $3153, $3154);
                                var $3148 = $3156;
                                break;
                        };
                        var $3146 = $3148;
                    };
                    return $3146;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$string$go = x0 => x1 => x2 => x3 => Kind$Parser$string$go$(x0, x1, x2, x3);

    function Kind$Parser$string$(_delim$1, _idx$2, _code$3) {
        var self = Kind$Parser$init$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3158 = self.idx;
                var $3159 = self.code;
                var $3160 = self.err;
                var $3161 = Parser$Reply$error$($3158, $3159, $3160);
                var $3157 = $3161;
                break;
            case 'Parser.Reply.value':
                var $3162 = self.idx;
                var $3163 = self.code;
                var $3164 = self.val;
                var self = Kind$Parser$text$(String$cons$(_delim$1, String$nil), $3162, $3163);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3166 = self.idx;
                        var $3167 = self.code;
                        var $3168 = self.err;
                        var $3169 = Parser$Reply$error$($3166, $3167, $3168);
                        var $3165 = $3169;
                        break;
                    case 'Parser.Reply.value':
                        var $3170 = self.idx;
                        var $3171 = self.code;
                        var self = Kind$Parser$string$go$(_delim$1, "", $3170, $3171);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3173 = self.idx;
                                var $3174 = self.code;
                                var $3175 = self.err;
                                var $3176 = Parser$Reply$error$($3173, $3174, $3175);
                                var $3172 = $3176;
                                break;
                            case 'Parser.Reply.value':
                                var $3177 = self.idx;
                                var $3178 = self.code;
                                var $3179 = self.val;
                                var self = Kind$Parser$stop$($3164, $3177, $3178);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3181 = self.idx;
                                        var $3182 = self.code;
                                        var $3183 = self.err;
                                        var $3184 = Parser$Reply$error$($3181, $3182, $3183);
                                        var $3180 = $3184;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3185 = self.idx;
                                        var $3186 = self.code;
                                        var $3187 = self.val;
                                        var $3188 = Parser$Reply$value$($3185, $3186, Kind$Term$ori$($3187, Kind$Term$str$($3179)));
                                        var $3180 = $3188;
                                        break;
                                };
                                var $3172 = $3180;
                                break;
                        };
                        var $3165 = $3172;
                        break;
                };
                var $3157 = $3165;
                break;
        };
        return $3157;
    };
    const Kind$Parser$string = x0 => x1 => x2 => Kind$Parser$string$(x0, x1, x2);

    function Kind$Parser$pair$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3190 = self.idx;
                var $3191 = self.code;
                var $3192 = self.err;
                var $3193 = Parser$Reply$error$($3190, $3191, $3192);
                var $3189 = $3193;
                break;
            case 'Parser.Reply.value':
                var $3194 = self.idx;
                var $3195 = self.code;
                var $3196 = self.val;
                var self = Kind$Parser$text$("{", $3194, $3195);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3198 = self.idx;
                        var $3199 = self.code;
                        var $3200 = self.err;
                        var $3201 = Parser$Reply$error$($3198, $3199, $3200);
                        var $3197 = $3201;
                        break;
                    case 'Parser.Reply.value':
                        var $3202 = self.idx;
                        var $3203 = self.code;
                        var self = Kind$Parser$term$($3202, $3203);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3205 = self.idx;
                                var $3206 = self.code;
                                var $3207 = self.err;
                                var $3208 = Parser$Reply$error$($3205, $3206, $3207);
                                var $3204 = $3208;
                                break;
                            case 'Parser.Reply.value':
                                var $3209 = self.idx;
                                var $3210 = self.code;
                                var $3211 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text(","), $3209, $3210);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3213 = self.idx;
                                        var $3214 = self.code;
                                        var $3215 = self.err;
                                        var $3216 = Parser$Reply$error$($3213, $3214, $3215);
                                        var $3212 = $3216;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3217 = self.idx;
                                        var $3218 = self.code;
                                        var self = Kind$Parser$term$($3217, $3218);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3220 = self.idx;
                                                var $3221 = self.code;
                                                var $3222 = self.err;
                                                var $3223 = Parser$Reply$error$($3220, $3221, $3222);
                                                var $3219 = $3223;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3224 = self.idx;
                                                var $3225 = self.code;
                                                var $3226 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(","), $3224, $3225);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3228 = self.idx;
                                                        var $3229 = self.code;
                                                        var $3230 = self.err;
                                                        var $3231 = Parser$Reply$error$($3228, $3229, $3230);
                                                        var $3227 = $3231;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3232 = self.idx;
                                                        var $3233 = self.code;
                                                        var self = Kind$Parser$text$("}", $3232, $3233);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3235 = self.idx;
                                                                var $3236 = self.code;
                                                                var $3237 = self.err;
                                                                var $3238 = Parser$Reply$error$($3235, $3236, $3237);
                                                                var $3234 = $3238;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3239 = self.idx;
                                                                var $3240 = self.code;
                                                                var self = Kind$Parser$stop$($3196, $3239, $3240);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3242 = self.idx;
                                                                        var $3243 = self.code;
                                                                        var $3244 = self.err;
                                                                        var $3245 = Parser$Reply$error$($3242, $3243, $3244);
                                                                        var $3241 = $3245;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3246 = self.idx;
                                                                        var $3247 = self.code;
                                                                        var $3248 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Pair.new");
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));
                                                                        var _term$30 = Kind$Term$app$(_term$29, $3211);
                                                                        var _term$31 = Kind$Term$app$(_term$30, $3226);
                                                                        var $3249 = Parser$Reply$value$($3246, $3247, Kind$Term$ori$($3248, _term$31));
                                                                        var $3241 = $3249;
                                                                        break;
                                                                };
                                                                var $3234 = $3241;
                                                                break;
                                                        };
                                                        var $3227 = $3234;
                                                        break;
                                                };
                                                var $3219 = $3227;
                                                break;
                                        };
                                        var $3212 = $3219;
                                        break;
                                };
                                var $3204 = $3212;
                                break;
                        };
                        var $3197 = $3204;
                        break;
                };
                var $3189 = $3197;
                break;
        };
        return $3189;
    };
    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);

    function Kind$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3251 = self.idx;
                var $3252 = self.code;
                var $3253 = self.err;
                var $3254 = Parser$Reply$error$($3251, $3252, $3253);
                var $3250 = $3254;
                break;
            case 'Parser.Reply.value':
                var $3255 = self.idx;
                var $3256 = self.code;
                var $3257 = self.val;
                var self = Kind$Parser$text$("[", $3255, $3256);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3259 = self.idx;
                        var $3260 = self.code;
                        var $3261 = self.err;
                        var $3262 = Parser$Reply$error$($3259, $3260, $3261);
                        var $3258 = $3262;
                        break;
                    case 'Parser.Reply.value':
                        var $3263 = self.idx;
                        var $3264 = self.code;
                        var self = Kind$Parser$name1$($3263, $3264);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3266 = self.idx;
                                var $3267 = self.code;
                                var $3268 = self.err;
                                var $3269 = Parser$Reply$error$($3266, $3267, $3268);
                                var $3265 = $3269;
                                break;
                            case 'Parser.Reply.value':
                                var $3270 = self.idx;
                                var $3271 = self.code;
                                var $3272 = self.val;
                                var self = Kind$Parser$text$(":", $3270, $3271);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3274 = self.idx;
                                        var $3275 = self.code;
                                        var $3276 = self.err;
                                        var $3277 = Parser$Reply$error$($3274, $3275, $3276);
                                        var $3273 = $3277;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3278 = self.idx;
                                        var $3279 = self.code;
                                        var self = Kind$Parser$term$($3278, $3279);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3281 = self.idx;
                                                var $3282 = self.code;
                                                var $3283 = self.err;
                                                var $3284 = Parser$Reply$error$($3281, $3282, $3283);
                                                var $3280 = $3284;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3285 = self.idx;
                                                var $3286 = self.code;
                                                var $3287 = self.val;
                                                var self = Kind$Parser$text$("]", $3285, $3286);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3289 = self.idx;
                                                        var $3290 = self.code;
                                                        var $3291 = self.err;
                                                        var $3292 = Parser$Reply$error$($3289, $3290, $3291);
                                                        var $3288 = $3292;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3293 = self.idx;
                                                        var $3294 = self.code;
                                                        var self = Kind$Parser$term$($3293, $3294);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3296 = self.idx;
                                                                var $3297 = self.code;
                                                                var $3298 = self.err;
                                                                var $3299 = Parser$Reply$error$($3296, $3297, $3298);
                                                                var $3295 = $3299;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3300 = self.idx;
                                                                var $3301 = self.code;
                                                                var $3302 = self.val;
                                                                var self = Kind$Parser$stop$($3257, $3300, $3301);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3304 = self.idx;
                                                                        var $3305 = self.code;
                                                                        var $3306 = self.err;
                                                                        var $3307 = Parser$Reply$error$($3304, $3305, $3306);
                                                                        var $3303 = $3307;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3308 = self.idx;
                                                                        var $3309 = self.code;
                                                                        var $3310 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Sigma");
                                                                        var _term$28 = Kind$Term$app$(_term$27, $3287);
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($3272, (_x$29 => {
                                                                            var $3312 = $3302;
                                                                            return $3312;
                                                                        })));
                                                                        var $3311 = Parser$Reply$value$($3308, $3309, Kind$Term$ori$($3310, _term$29));
                                                                        var $3303 = $3311;
                                                                        break;
                                                                };
                                                                var $3295 = $3303;
                                                                break;
                                                        };
                                                        var $3288 = $3295;
                                                        break;
                                                };
                                                var $3280 = $3288;
                                                break;
                                        };
                                        var $3273 = $3280;
                                        break;
                                };
                                var $3265 = $3273;
                                break;
                        };
                        var $3258 = $3265;
                        break;
                };
                var $3250 = $3258;
                break;
        };
        return $3250;
    };
    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);

    function Kind$Parser$some$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3314 = self.idx;
                var $3315 = self.code;
                var $3316 = self.err;
                var $3317 = Parser$Reply$error$($3314, $3315, $3316);
                var $3313 = $3317;
                break;
            case 'Parser.Reply.value':
                var $3318 = self.idx;
                var $3319 = self.code;
                var $3320 = self.val;
                var self = Kind$Parser$text$("some(", $3318, $3319);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3322 = self.idx;
                        var $3323 = self.code;
                        var $3324 = self.err;
                        var $3325 = Parser$Reply$error$($3322, $3323, $3324);
                        var $3321 = $3325;
                        break;
                    case 'Parser.Reply.value':
                        var $3326 = self.idx;
                        var $3327 = self.code;
                        var self = Kind$Parser$term$($3326, $3327);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3329 = self.idx;
                                var $3330 = self.code;
                                var $3331 = self.err;
                                var $3332 = Parser$Reply$error$($3329, $3330, $3331);
                                var $3328 = $3332;
                                break;
                            case 'Parser.Reply.value':
                                var $3333 = self.idx;
                                var $3334 = self.code;
                                var $3335 = self.val;
                                var self = Kind$Parser$text$(")", $3333, $3334);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3337 = self.idx;
                                        var $3338 = self.code;
                                        var $3339 = self.err;
                                        var $3340 = Parser$Reply$error$($3337, $3338, $3339);
                                        var $3336 = $3340;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3341 = self.idx;
                                        var $3342 = self.code;
                                        var self = Kind$Parser$stop$($3320, $3341, $3342);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3344 = self.idx;
                                                var $3345 = self.code;
                                                var $3346 = self.err;
                                                var $3347 = Parser$Reply$error$($3344, $3345, $3346);
                                                var $3343 = $3347;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3348 = self.idx;
                                                var $3349 = self.code;
                                                var $3350 = self.val;
                                                var _term$18 = Kind$Term$ref$("Maybe.some");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, $3335);
                                                var $3351 = Parser$Reply$value$($3348, $3349, Kind$Term$ori$($3350, _term$20));
                                                var $3343 = $3351;
                                                break;
                                        };
                                        var $3336 = $3343;
                                        break;
                                };
                                var $3328 = $3336;
                                break;
                        };
                        var $3321 = $3328;
                        break;
                };
                var $3313 = $3321;
                break;
        };
        return $3313;
    };
    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);

    function Kind$Parser$not$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3353 = self.idx;
                var $3354 = self.code;
                var $3355 = self.err;
                var $3356 = Parser$Reply$error$($3353, $3354, $3355);
                var $3352 = $3356;
                break;
            case 'Parser.Reply.value':
                var $3357 = self.idx;
                var $3358 = self.code;
                var $3359 = self.val;
                var self = Kind$Parser$text$("not(", $3357, $3358);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3361 = self.idx;
                        var $3362 = self.code;
                        var $3363 = self.err;
                        var $3364 = Parser$Reply$error$($3361, $3362, $3363);
                        var $3360 = $3364;
                        break;
                    case 'Parser.Reply.value':
                        var $3365 = self.idx;
                        var $3366 = self.code;
                        var self = Kind$Parser$term$($3365, $3366);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3368 = self.idx;
                                var $3369 = self.code;
                                var $3370 = self.err;
                                var $3371 = Parser$Reply$error$($3368, $3369, $3370);
                                var $3367 = $3371;
                                break;
                            case 'Parser.Reply.value':
                                var $3372 = self.idx;
                                var $3373 = self.code;
                                var $3374 = self.val;
                                var self = Kind$Parser$text$(")", $3372, $3373);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3376 = self.idx;
                                        var $3377 = self.code;
                                        var $3378 = self.err;
                                        var $3379 = Parser$Reply$error$($3376, $3377, $3378);
                                        var $3375 = $3379;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3380 = self.idx;
                                        var $3381 = self.code;
                                        var self = Kind$Parser$stop$($3359, $3380, $3381);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3383 = self.idx;
                                                var $3384 = self.code;
                                                var $3385 = self.err;
                                                var $3386 = Parser$Reply$error$($3383, $3384, $3385);
                                                var $3382 = $3386;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3387 = self.idx;
                                                var $3388 = self.code;
                                                var $3389 = self.val;
                                                var _term$18 = Kind$Term$ref$("Bool.not");
                                                var _term$19 = Kind$Term$app$(_term$18, $3374);
                                                var $3390 = Parser$Reply$value$($3387, $3388, Kind$Term$ori$($3389, _term$19));
                                                var $3382 = $3390;
                                                break;
                                        };
                                        var $3375 = $3382;
                                        break;
                                };
                                var $3367 = $3375;
                                break;
                        };
                        var $3360 = $3367;
                        break;
                };
                var $3352 = $3360;
                break;
        };
        return $3352;
    };
    const Kind$Parser$not = x0 => x1 => Kind$Parser$not$(x0, x1);

    function Kind$Parser$left$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3392 = self.idx;
                var $3393 = self.code;
                var $3394 = self.err;
                var $3395 = Parser$Reply$error$($3392, $3393, $3394);
                var $3391 = $3395;
                break;
            case 'Parser.Reply.value':
                var $3396 = self.idx;
                var $3397 = self.code;
                var $3398 = self.val;
                var self = Kind$Parser$text$("left(", $3396, $3397);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3400 = self.idx;
                        var $3401 = self.code;
                        var $3402 = self.err;
                        var $3403 = Parser$Reply$error$($3400, $3401, $3402);
                        var $3399 = $3403;
                        break;
                    case 'Parser.Reply.value':
                        var $3404 = self.idx;
                        var $3405 = self.code;
                        var self = Kind$Parser$term$($3404, $3405);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3407 = self.idx;
                                var $3408 = self.code;
                                var $3409 = self.err;
                                var $3410 = Parser$Reply$error$($3407, $3408, $3409);
                                var $3406 = $3410;
                                break;
                            case 'Parser.Reply.value':
                                var $3411 = self.idx;
                                var $3412 = self.code;
                                var $3413 = self.val;
                                var self = Kind$Parser$text$(")", $3411, $3412);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3415 = self.idx;
                                        var $3416 = self.code;
                                        var $3417 = self.err;
                                        var $3418 = Parser$Reply$error$($3415, $3416, $3417);
                                        var $3414 = $3418;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3419 = self.idx;
                                        var $3420 = self.code;
                                        var self = Kind$Parser$stop$($3398, $3419, $3420);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3422 = self.idx;
                                                var $3423 = self.code;
                                                var $3424 = self.err;
                                                var $3425 = Parser$Reply$error$($3422, $3423, $3424);
                                                var $3421 = $3425;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3426 = self.idx;
                                                var $3427 = self.code;
                                                var $3428 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.left");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3413);
                                                var $3429 = Parser$Reply$value$($3426, $3427, Kind$Term$ori$($3428, _term$21));
                                                var $3421 = $3429;
                                                break;
                                        };
                                        var $3414 = $3421;
                                        break;
                                };
                                var $3406 = $3414;
                                break;
                        };
                        var $3399 = $3406;
                        break;
                };
                var $3391 = $3399;
                break;
        };
        return $3391;
    };
    const Kind$Parser$left = x0 => x1 => Kind$Parser$left$(x0, x1);

    function Kind$Parser$right$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3431 = self.idx;
                var $3432 = self.code;
                var $3433 = self.err;
                var $3434 = Parser$Reply$error$($3431, $3432, $3433);
                var $3430 = $3434;
                break;
            case 'Parser.Reply.value':
                var $3435 = self.idx;
                var $3436 = self.code;
                var $3437 = self.val;
                var self = Kind$Parser$text$("right(", $3435, $3436);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3439 = self.idx;
                        var $3440 = self.code;
                        var $3441 = self.err;
                        var $3442 = Parser$Reply$error$($3439, $3440, $3441);
                        var $3438 = $3442;
                        break;
                    case 'Parser.Reply.value':
                        var $3443 = self.idx;
                        var $3444 = self.code;
                        var self = Kind$Parser$term$($3443, $3444);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3446 = self.idx;
                                var $3447 = self.code;
                                var $3448 = self.err;
                                var $3449 = Parser$Reply$error$($3446, $3447, $3448);
                                var $3445 = $3449;
                                break;
                            case 'Parser.Reply.value':
                                var $3450 = self.idx;
                                var $3451 = self.code;
                                var $3452 = self.val;
                                var self = Kind$Parser$text$(")", $3450, $3451);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3454 = self.idx;
                                        var $3455 = self.code;
                                        var $3456 = self.err;
                                        var $3457 = Parser$Reply$error$($3454, $3455, $3456);
                                        var $3453 = $3457;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3458 = self.idx;
                                        var $3459 = self.code;
                                        var self = Kind$Parser$stop$($3437, $3458, $3459);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3461 = self.idx;
                                                var $3462 = self.code;
                                                var $3463 = self.err;
                                                var $3464 = Parser$Reply$error$($3461, $3462, $3463);
                                                var $3460 = $3464;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3465 = self.idx;
                                                var $3466 = self.code;
                                                var $3467 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.right");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3452);
                                                var $3468 = Parser$Reply$value$($3465, $3466, Kind$Term$ori$($3467, _term$21));
                                                var $3460 = $3468;
                                                break;
                                        };
                                        var $3453 = $3460;
                                        break;
                                };
                                var $3445 = $3453;
                                break;
                        };
                        var $3438 = $3445;
                        break;
                };
                var $3430 = $3438;
                break;
        };
        return $3430;
    };
    const Kind$Parser$right = x0 => x1 => Kind$Parser$right$(x0, x1);

    function Kind$Parser$apply$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3470 = self.idx;
                var $3471 = self.code;
                var $3472 = self.err;
                var $3473 = Parser$Reply$error$($3470, $3471, $3472);
                var $3469 = $3473;
                break;
            case 'Parser.Reply.value':
                var $3474 = self.idx;
                var $3475 = self.code;
                var $3476 = self.val;
                var self = Kind$Parser$text$("apply(", $3474, $3475);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3478 = self.idx;
                        var $3479 = self.code;
                        var $3480 = self.err;
                        var $3481 = Parser$Reply$error$($3478, $3479, $3480);
                        var $3477 = $3481;
                        break;
                    case 'Parser.Reply.value':
                        var $3482 = self.idx;
                        var $3483 = self.code;
                        var self = Kind$Parser$term$($3482, $3483);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3485 = self.idx;
                                var $3486 = self.code;
                                var $3487 = self.err;
                                var $3488 = Parser$Reply$error$($3485, $3486, $3487);
                                var $3484 = $3488;
                                break;
                            case 'Parser.Reply.value':
                                var $3489 = self.idx;
                                var $3490 = self.code;
                                var $3491 = self.val;
                                var self = Kind$Parser$text$(",", $3489, $3490);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3493 = self.idx;
                                        var $3494 = self.code;
                                        var $3495 = self.err;
                                        var $3496 = Parser$Reply$error$($3493, $3494, $3495);
                                        var $3492 = $3496;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3497 = self.idx;
                                        var $3498 = self.code;
                                        var self = Kind$Parser$term$($3497, $3498);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3500 = self.idx;
                                                var $3501 = self.code;
                                                var $3502 = self.err;
                                                var $3503 = Parser$Reply$error$($3500, $3501, $3502);
                                                var $3499 = $3503;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3504 = self.idx;
                                                var $3505 = self.code;
                                                var $3506 = self.val;
                                                var self = Kind$Parser$text$(")", $3504, $3505);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3508 = self.idx;
                                                        var $3509 = self.code;
                                                        var $3510 = self.err;
                                                        var $3511 = Parser$Reply$error$($3508, $3509, $3510);
                                                        var $3507 = $3511;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3512 = self.idx;
                                                        var $3513 = self.code;
                                                        var self = Kind$Parser$stop$($3476, $3512, $3513);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3515 = self.idx;
                                                                var $3516 = self.code;
                                                                var $3517 = self.err;
                                                                var $3518 = Parser$Reply$error$($3515, $3516, $3517);
                                                                var $3514 = $3518;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3519 = self.idx;
                                                                var $3520 = self.code;
                                                                var $3521 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.apply");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3491);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3506);
                                                                var $3522 = Parser$Reply$value$($3519, $3520, Kind$Term$ori$($3521, _term$30));
                                                                var $3514 = $3522;
                                                                break;
                                                        };
                                                        var $3507 = $3514;
                                                        break;
                                                };
                                                var $3499 = $3507;
                                                break;
                                        };
                                        var $3492 = $3499;
                                        break;
                                };
                                var $3484 = $3492;
                                break;
                        };
                        var $3477 = $3484;
                        break;
                };
                var $3469 = $3477;
                break;
        };
        return $3469;
    };
    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);

    function Kind$Parser$chain$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3524 = self.idx;
                var $3525 = self.code;
                var $3526 = self.err;
                var $3527 = Parser$Reply$error$($3524, $3525, $3526);
                var $3523 = $3527;
                break;
            case 'Parser.Reply.value':
                var $3528 = self.idx;
                var $3529 = self.code;
                var $3530 = self.val;
                var self = Kind$Parser$text$("chain(", $3528, $3529);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3532 = self.idx;
                        var $3533 = self.code;
                        var $3534 = self.err;
                        var $3535 = Parser$Reply$error$($3532, $3533, $3534);
                        var $3531 = $3535;
                        break;
                    case 'Parser.Reply.value':
                        var $3536 = self.idx;
                        var $3537 = self.code;
                        var self = Kind$Parser$term$($3536, $3537);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3539 = self.idx;
                                var $3540 = self.code;
                                var $3541 = self.err;
                                var $3542 = Parser$Reply$error$($3539, $3540, $3541);
                                var $3538 = $3542;
                                break;
                            case 'Parser.Reply.value':
                                var $3543 = self.idx;
                                var $3544 = self.code;
                                var $3545 = self.val;
                                var self = Kind$Parser$text$(",", $3543, $3544);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3547 = self.idx;
                                        var $3548 = self.code;
                                        var $3549 = self.err;
                                        var $3550 = Parser$Reply$error$($3547, $3548, $3549);
                                        var $3546 = $3550;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3551 = self.idx;
                                        var $3552 = self.code;
                                        var self = Kind$Parser$term$($3551, $3552);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3554 = self.idx;
                                                var $3555 = self.code;
                                                var $3556 = self.err;
                                                var $3557 = Parser$Reply$error$($3554, $3555, $3556);
                                                var $3553 = $3557;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3558 = self.idx;
                                                var $3559 = self.code;
                                                var $3560 = self.val;
                                                var self = Kind$Parser$text$(")", $3558, $3559);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3562 = self.idx;
                                                        var $3563 = self.code;
                                                        var $3564 = self.err;
                                                        var $3565 = Parser$Reply$error$($3562, $3563, $3564);
                                                        var $3561 = $3565;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3566 = self.idx;
                                                        var $3567 = self.code;
                                                        var self = Kind$Parser$stop$($3530, $3566, $3567);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3569 = self.idx;
                                                                var $3570 = self.code;
                                                                var $3571 = self.err;
                                                                var $3572 = Parser$Reply$error$($3569, $3570, $3571);
                                                                var $3568 = $3572;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3573 = self.idx;
                                                                var $3574 = self.code;
                                                                var $3575 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.chain");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3545);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3560);
                                                                var $3576 = Parser$Reply$value$($3573, $3574, Kind$Term$ori$($3575, _term$30));
                                                                var $3568 = $3576;
                                                                break;
                                                        };
                                                        var $3561 = $3568;
                                                        break;
                                                };
                                                var $3553 = $3561;
                                                break;
                                        };
                                        var $3546 = $3553;
                                        break;
                                };
                                var $3538 = $3546;
                                break;
                        };
                        var $3531 = $3538;
                        break;
                };
                var $3523 = $3531;
                break;
        };
        return $3523;
    };
    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);

    function Kind$Parser$mirror$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3578 = self.idx;
                var $3579 = self.code;
                var $3580 = self.err;
                var $3581 = Parser$Reply$error$($3578, $3579, $3580);
                var $3577 = $3581;
                break;
            case 'Parser.Reply.value':
                var $3582 = self.idx;
                var $3583 = self.code;
                var $3584 = self.val;
                var self = Kind$Parser$text$("mirror(", $3582, $3583);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3586 = self.idx;
                        var $3587 = self.code;
                        var $3588 = self.err;
                        var $3589 = Parser$Reply$error$($3586, $3587, $3588);
                        var $3585 = $3589;
                        break;
                    case 'Parser.Reply.value':
                        var $3590 = self.idx;
                        var $3591 = self.code;
                        var self = Kind$Parser$term$($3590, $3591);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3593 = self.idx;
                                var $3594 = self.code;
                                var $3595 = self.err;
                                var $3596 = Parser$Reply$error$($3593, $3594, $3595);
                                var $3592 = $3596;
                                break;
                            case 'Parser.Reply.value':
                                var $3597 = self.idx;
                                var $3598 = self.code;
                                var $3599 = self.val;
                                var self = Kind$Parser$text$(")", $3597, $3598);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3601 = self.idx;
                                        var $3602 = self.code;
                                        var $3603 = self.err;
                                        var $3604 = Parser$Reply$error$($3601, $3602, $3603);
                                        var $3600 = $3604;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3605 = self.idx;
                                        var $3606 = self.code;
                                        var self = Kind$Parser$stop$($3584, $3605, $3606);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3608 = self.idx;
                                                var $3609 = self.code;
                                                var $3610 = self.err;
                                                var $3611 = Parser$Reply$error$($3608, $3609, $3610);
                                                var $3607 = $3611;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3612 = self.idx;
                                                var $3613 = self.code;
                                                var $3614 = self.val;
                                                var _term$18 = Kind$Term$ref$("Equal.mirror");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                var _term$22 = Kind$Term$app$(_term$21, $3599);
                                                var $3615 = Parser$Reply$value$($3612, $3613, Kind$Term$ori$($3614, _term$22));
                                                var $3607 = $3615;
                                                break;
                                        };
                                        var $3600 = $3607;
                                        break;
                                };
                                var $3592 = $3600;
                                break;
                        };
                        var $3585 = $3592;
                        break;
                };
                var $3577 = $3585;
                break;
        };
        return $3577;
    };
    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);

    function Kind$Name$read$(_str$1) {
        var $3616 = _str$1;
        return $3616;
    };
    const Kind$Name$read = x0 => Kind$Name$read$(x0);

    function Kind$Parser$list$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3618 = self.idx;
                var $3619 = self.code;
                var $3620 = self.err;
                var $3621 = Parser$Reply$error$($3618, $3619, $3620);
                var $3617 = $3621;
                break;
            case 'Parser.Reply.value':
                var $3622 = self.idx;
                var $3623 = self.code;
                var $3624 = self.val;
                var self = Kind$Parser$text$("[", $3622, $3623);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3626 = self.idx;
                        var $3627 = self.code;
                        var $3628 = self.err;
                        var $3629 = Parser$Reply$error$($3626, $3627, $3628);
                        var $3625 = $3629;
                        break;
                    case 'Parser.Reply.value':
                        var $3630 = self.idx;
                        var $3631 = self.code;
                        var self = Parser$until$(Kind$Parser$text("]"), Kind$Parser$item(Kind$Parser$term))($3630)($3631);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3633 = self.idx;
                                var $3634 = self.code;
                                var $3635 = self.err;
                                var $3636 = Parser$Reply$error$($3633, $3634, $3635);
                                var $3632 = $3636;
                                break;
                            case 'Parser.Reply.value':
                                var $3637 = self.idx;
                                var $3638 = self.code;
                                var $3639 = self.val;
                                var self = Kind$Parser$stop$($3624, $3637, $3638);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3641 = self.idx;
                                        var $3642 = self.code;
                                        var $3643 = self.err;
                                        var $3644 = Parser$Reply$error$($3641, $3642, $3643);
                                        var $3640 = $3644;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3645 = self.idx;
                                        var $3646 = self.code;
                                        var $3647 = self.val;
                                        var $3648 = Parser$Reply$value$($3645, $3646, List$fold$($3639, Kind$Term$ori$($3647, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")), Kind$Term$hol$(Bits$e))), (_x$15 => _xs$16 => {
                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));
                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);
                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);
                                            var $3649 = Kind$Term$ori$($3647, _term$20);
                                            return $3649;
                                        })));
                                        var $3640 = $3648;
                                        break;
                                };
                                var $3632 = $3640;
                                break;
                        };
                        var $3625 = $3632;
                        break;
                };
                var $3617 = $3625;
                break;
        };
        return $3617;
    };
    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);

    function Kind$Parser$map$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3651 = self.idx;
                var $3652 = self.code;
                var $3653 = self.err;
                var $3654 = Parser$Reply$error$($3651, $3652, $3653);
                var $3650 = $3654;
                break;
            case 'Parser.Reply.value':
                var $3655 = self.idx;
                var $3656 = self.code;
                var $3657 = self.val;
                var self = Kind$Parser$text$("{", $3655, $3656);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3659 = self.idx;
                        var $3660 = self.code;
                        var $3661 = self.err;
                        var $3662 = Parser$Reply$error$($3659, $3660, $3661);
                        var $3658 = $3662;
                        break;
                    case 'Parser.Reply.value':
                        var $3663 = self.idx;
                        var $3664 = self.code;
                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item((_idx$9 => _code$10 => {
                            var self = Kind$Parser$term$(_idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3667 = self.idx;
                                    var $3668 = self.code;
                                    var $3669 = self.err;
                                    var $3670 = Parser$Reply$error$($3667, $3668, $3669);
                                    var $3666 = $3670;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3671 = self.idx;
                                    var $3672 = self.code;
                                    var $3673 = self.val;
                                    var self = Kind$Parser$text$(":", $3671, $3672);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3675 = self.idx;
                                            var $3676 = self.code;
                                            var $3677 = self.err;
                                            var $3678 = Parser$Reply$error$($3675, $3676, $3677);
                                            var $3674 = $3678;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3679 = self.idx;
                                            var $3680 = self.code;
                                            var self = Kind$Parser$term$($3679, $3680);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3682 = self.idx;
                                                    var $3683 = self.code;
                                                    var $3684 = self.err;
                                                    var $3685 = Parser$Reply$error$($3682, $3683, $3684);
                                                    var $3681 = $3685;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3686 = self.idx;
                                                    var $3687 = self.code;
                                                    var $3688 = self.val;
                                                    var $3689 = Parser$Reply$value$($3686, $3687, Pair$new$($3673, $3688));
                                                    var $3681 = $3689;
                                                    break;
                                            };
                                            var $3674 = $3681;
                                            break;
                                    };
                                    var $3666 = $3674;
                                    break;
                            };
                            return $3666;
                        })))($3663)($3664);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3690 = self.idx;
                                var $3691 = self.code;
                                var $3692 = self.err;
                                var $3693 = Parser$Reply$error$($3690, $3691, $3692);
                                var $3665 = $3693;
                                break;
                            case 'Parser.Reply.value':
                                var $3694 = self.idx;
                                var $3695 = self.code;
                                var $3696 = self.val;
                                var self = Kind$Parser$stop$($3657, $3694, $3695);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3698 = self.idx;
                                        var $3699 = self.code;
                                        var $3700 = self.err;
                                        var $3701 = Parser$Reply$error$($3698, $3699, $3700);
                                        var $3697 = $3701;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3702 = self.idx;
                                        var $3703 = self.code;
                                        var $3704 = self.val;
                                        var _list$15 = List$fold$($3696, Kind$Term$ori$($3704, Kind$Term$app$(Kind$Term$ref$("List.nil"), Kind$Term$hol$(Bits$e))), (_kv$15 => _xs$16 => {
                                            var self = _kv$15;
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $3707 = self.fst;
                                                    var $3708 = self.snd;
                                                    var _pair$19 = Kind$Term$ref$("Pair.new");
                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));
                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));
                                                    var _pair$22 = Kind$Term$app$(_pair$21, $3707);
                                                    var _pair$23 = Kind$Term$app$(_pair$22, $3708);
                                                    var _term$24 = Kind$Term$ref$("List.cons");
                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);
                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);
                                                    var $3709 = Kind$Term$ori$($3704, _term$27);
                                                    var $3706 = $3709;
                                                    break;
                                            };
                                            return $3706;
                                        }));
                                        var _term$16 = Kind$Term$ref$("Map.from_list");
                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));
                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);
                                        var $3705 = Parser$Reply$value$($3702, $3703, Kind$Term$ori$($3704, _term$18));
                                        var $3697 = $3705;
                                        break;
                                };
                                var $3665 = $3697;
                                break;
                        };
                        var $3658 = $3665;
                        break;
                };
                var $3650 = $3658;
                break;
        };
        return $3650;
    };
    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);

    function Kind$Parser$log$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3711 = self.idx;
                var $3712 = self.code;
                var $3713 = self.err;
                var $3714 = Parser$Reply$error$($3711, $3712, $3713);
                var $3710 = $3714;
                break;
            case 'Parser.Reply.value':
                var $3715 = self.idx;
                var $3716 = self.code;
                var $3717 = self.val;
                var self = Kind$Parser$text$("log(", $3715, $3716);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3719 = self.idx;
                        var $3720 = self.code;
                        var $3721 = self.err;
                        var $3722 = Parser$Reply$error$($3719, $3720, $3721);
                        var $3718 = $3722;
                        break;
                    case 'Parser.Reply.value':
                        var $3723 = self.idx;
                        var $3724 = self.code;
                        var self = Parser$until$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term))($3723)($3724);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3726 = self.idx;
                                var $3727 = self.code;
                                var $3728 = self.err;
                                var $3729 = Parser$Reply$error$($3726, $3727, $3728);
                                var $3725 = $3729;
                                break;
                            case 'Parser.Reply.value':
                                var $3730 = self.idx;
                                var $3731 = self.code;
                                var $3732 = self.val;
                                var self = Kind$Parser$term$($3730, $3731);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3734 = self.idx;
                                        var $3735 = self.code;
                                        var $3736 = self.err;
                                        var $3737 = Parser$Reply$error$($3734, $3735, $3736);
                                        var $3733 = $3737;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3738 = self.idx;
                                        var $3739 = self.code;
                                        var $3740 = self.val;
                                        var _term$15 = Kind$Term$ref$("Debug.log");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($3732, Kind$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Kind$Term$ref$("String.concat");
                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);
                                            var $3742 = _arg$21;
                                            return $3742;
                                        }));
                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);
                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$("", (_x$19 => {
                                            var $3743 = $3740;
                                            return $3743;
                                        })));
                                        var self = Kind$Parser$stop$($3717, $3738, $3739);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3744 = self.idx;
                                                var $3745 = self.code;
                                                var $3746 = self.err;
                                                var $3747 = Parser$Reply$error$($3744, $3745, $3746);
                                                var $3741 = $3747;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3748 = self.idx;
                                                var $3749 = self.code;
                                                var $3750 = self.val;
                                                var $3751 = Parser$Reply$value$($3748, $3749, Kind$Term$ori$($3750, _term$19));
                                                var $3741 = $3751;
                                                break;
                                        };
                                        var $3733 = $3741;
                                        break;
                                };
                                var $3725 = $3733;
                                break;
                        };
                        var $3718 = $3725;
                        break;
                };
                var $3710 = $3718;
                break;
        };
        return $3710;
    };
    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);

    function Kind$Parser$do$statements$(_monad_name$1) {
        var $3752 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3754 = self.idx;
                    var $3755 = self.code;
                    var $3756 = self.err;
                    var $3757 = Parser$Reply$error$($3754, $3755, $3756);
                    var $3753 = $3757;
                    break;
                case 'Parser.Reply.value':
                    var $3758 = self.idx;
                    var $3759 = self.code;
                    var $3760 = self.val;
                    var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "), List$cons$(Kind$Parser$text("get "), List$nil)))($3758)($3759);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3762 = self.idx;
                            var $3763 = self.code;
                            var $3764 = self.err;
                            var $3765 = Parser$Reply$error$($3762, $3763, $3764);
                            var $3761 = $3765;
                            break;
                        case 'Parser.Reply.value':
                            var $3766 = self.idx;
                            var $3767 = self.code;
                            var self = Kind$Parser$name1$($3766, $3767);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3769 = self.idx;
                                    var $3770 = self.code;
                                    var $3771 = self.err;
                                    var $3772 = Parser$Reply$error$($3769, $3770, $3771);
                                    var $3768 = $3772;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3773 = self.idx;
                                    var $3774 = self.code;
                                    var $3775 = self.val;
                                    var self = Kind$Parser$text$("=", $3773, $3774);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3777 = self.idx;
                                            var $3778 = self.code;
                                            var $3779 = self.err;
                                            var $3780 = Parser$Reply$error$($3777, $3778, $3779);
                                            var $3776 = $3780;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3781 = self.idx;
                                            var $3782 = self.code;
                                            var self = Kind$Parser$term$($3781, $3782);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3784 = self.idx;
                                                    var $3785 = self.code;
                                                    var $3786 = self.err;
                                                    var $3787 = Parser$Reply$error$($3784, $3785, $3786);
                                                    var $3783 = $3787;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3788 = self.idx;
                                                    var $3789 = self.code;
                                                    var $3790 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3788, $3789);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3792 = self.idx;
                                                            var $3793 = self.code;
                                                            var $3794 = self.err;
                                                            var $3795 = Parser$Reply$error$($3792, $3793, $3794);
                                                            var $3791 = $3795;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3796 = self.idx;
                                                            var $3797 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3796)($3797);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3799 = self.idx;
                                                                    var $3800 = self.code;
                                                                    var $3801 = self.err;
                                                                    var $3802 = Parser$Reply$error$($3799, $3800, $3801);
                                                                    var $3798 = $3802;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3803 = self.idx;
                                                                    var $3804 = self.code;
                                                                    var $3805 = self.val;
                                                                    var self = Kind$Parser$stop$($3760, $3803, $3804);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3807 = self.idx;
                                                                            var $3808 = self.code;
                                                                            var $3809 = self.err;
                                                                            var $3810 = Parser$Reply$error$($3807, $3808, $3809);
                                                                            var $3806 = $3810;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3811 = self.idx;
                                                                            var $3812 = self.code;
                                                                            var $3813 = self.val;
                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                            var _term$32 = Kind$Term$app$(_term$31, $3790);
                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($3775, (_x$33 => {
                                                                                var $3815 = $3805;
                                                                                return $3815;
                                                                            })));
                                                                            var $3814 = Parser$Reply$value$($3811, $3812, Kind$Term$ori$($3813, _term$33));
                                                                            var $3806 = $3814;
                                                                            break;
                                                                    };
                                                                    var $3798 = $3806;
                                                                    break;
                                                            };
                                                            var $3791 = $3798;
                                                            break;
                                                    };
                                                    var $3783 = $3791;
                                                    break;
                                            };
                                            var $3776 = $3783;
                                            break;
                                    };
                                    var $3768 = $3776;
                                    break;
                            };
                            var $3761 = $3768;
                            break;
                    };
                    var $3753 = $3761;
                    break;
            };
            return $3753;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3817 = self.idx;
                    var $3818 = self.code;
                    var $3819 = self.err;
                    var $3820 = Parser$Reply$error$($3817, $3818, $3819);
                    var $3816 = $3820;
                    break;
                case 'Parser.Reply.value':
                    var $3821 = self.idx;
                    var $3822 = self.code;
                    var $3823 = self.val;
                    var self = Kind$Parser$text$("let ", $3821, $3822);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3825 = self.idx;
                            var $3826 = self.code;
                            var $3827 = self.err;
                            var $3828 = Parser$Reply$error$($3825, $3826, $3827);
                            var $3824 = $3828;
                            break;
                        case 'Parser.Reply.value':
                            var $3829 = self.idx;
                            var $3830 = self.code;
                            var self = Kind$Parser$name1$($3829, $3830);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3832 = self.idx;
                                    var $3833 = self.code;
                                    var $3834 = self.err;
                                    var $3835 = Parser$Reply$error$($3832, $3833, $3834);
                                    var $3831 = $3835;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3836 = self.idx;
                                    var $3837 = self.code;
                                    var $3838 = self.val;
                                    var self = Kind$Parser$text$("=", $3836, $3837);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3840 = self.idx;
                                            var $3841 = self.code;
                                            var $3842 = self.err;
                                            var $3843 = Parser$Reply$error$($3840, $3841, $3842);
                                            var $3839 = $3843;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3844 = self.idx;
                                            var $3845 = self.code;
                                            var self = Kind$Parser$term$($3844, $3845);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3847 = self.idx;
                                                    var $3848 = self.code;
                                                    var $3849 = self.err;
                                                    var $3850 = Parser$Reply$error$($3847, $3848, $3849);
                                                    var $3846 = $3850;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3851 = self.idx;
                                                    var $3852 = self.code;
                                                    var $3853 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3851, $3852);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3855 = self.idx;
                                                            var $3856 = self.code;
                                                            var $3857 = self.err;
                                                            var $3858 = Parser$Reply$error$($3855, $3856, $3857);
                                                            var $3854 = $3858;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3859 = self.idx;
                                                            var $3860 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3859)($3860);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3862 = self.idx;
                                                                    var $3863 = self.code;
                                                                    var $3864 = self.err;
                                                                    var $3865 = Parser$Reply$error$($3862, $3863, $3864);
                                                                    var $3861 = $3865;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3866 = self.idx;
                                                                    var $3867 = self.code;
                                                                    var $3868 = self.val;
                                                                    var self = Kind$Parser$stop$($3823, $3866, $3867);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3870 = self.idx;
                                                                            var $3871 = self.code;
                                                                            var $3872 = self.err;
                                                                            var $3873 = Parser$Reply$error$($3870, $3871, $3872);
                                                                            var $3869 = $3873;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3874 = self.idx;
                                                                            var $3875 = self.code;
                                                                            var $3876 = self.val;
                                                                            var $3877 = Parser$Reply$value$($3874, $3875, Kind$Term$ori$($3876, Kind$Term$let$($3838, $3853, (_x$28 => {
                                                                                var $3878 = $3868;
                                                                                return $3878;
                                                                            }))));
                                                                            var $3869 = $3877;
                                                                            break;
                                                                    };
                                                                    var $3861 = $3869;
                                                                    break;
                                                            };
                                                            var $3854 = $3861;
                                                            break;
                                                    };
                                                    var $3846 = $3854;
                                                    break;
                                            };
                                            var $3839 = $3846;
                                            break;
                                    };
                                    var $3831 = $3839;
                                    break;
                            };
                            var $3824 = $3831;
                            break;
                    };
                    var $3816 = $3824;
                    break;
            };
            return $3816;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3880 = self.idx;
                    var $3881 = self.code;
                    var $3882 = self.err;
                    var $3883 = Parser$Reply$error$($3880, $3881, $3882);
                    var $3879 = $3883;
                    break;
                case 'Parser.Reply.value':
                    var $3884 = self.idx;
                    var $3885 = self.code;
                    var $3886 = self.val;
                    var self = Kind$Parser$text$("return ", $3884, $3885);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3888 = self.idx;
                            var $3889 = self.code;
                            var $3890 = self.err;
                            var $3891 = Parser$Reply$error$($3888, $3889, $3890);
                            var $3887 = $3891;
                            break;
                        case 'Parser.Reply.value':
                            var $3892 = self.idx;
                            var $3893 = self.code;
                            var self = Kind$Parser$term$($3892, $3893);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3895 = self.idx;
                                    var $3896 = self.code;
                                    var $3897 = self.err;
                                    var $3898 = Parser$Reply$error$($3895, $3896, $3897);
                                    var $3894 = $3898;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3899 = self.idx;
                                    var $3900 = self.code;
                                    var $3901 = self.val;
                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3899, $3900);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3903 = self.idx;
                                            var $3904 = self.code;
                                            var $3905 = self.err;
                                            var $3906 = Parser$Reply$error$($3903, $3904, $3905);
                                            var $3902 = $3906;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3907 = self.idx;
                                            var $3908 = self.code;
                                            var self = Kind$Parser$stop$($3886, $3907, $3908);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3910 = self.idx;
                                                    var $3911 = self.code;
                                                    var $3912 = self.err;
                                                    var $3913 = Parser$Reply$error$($3910, $3911, $3912);
                                                    var $3909 = $3913;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3914 = self.idx;
                                                    var $3915 = self.code;
                                                    var $3916 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, $3901);
                                                    var $3917 = Parser$Reply$value$($3914, $3915, Kind$Term$ori$($3916, _term$22));
                                                    var $3909 = $3917;
                                                    break;
                                            };
                                            var $3902 = $3909;
                                            break;
                                    };
                                    var $3894 = $3902;
                                    break;
                            };
                            var $3887 = $3894;
                            break;
                    };
                    var $3879 = $3887;
                    break;
            };
            return $3879;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3919 = self.idx;
                    var $3920 = self.code;
                    var $3921 = self.err;
                    var $3922 = Parser$Reply$error$($3919, $3920, $3921);
                    var $3918 = $3922;
                    break;
                case 'Parser.Reply.value':
                    var $3923 = self.idx;
                    var $3924 = self.code;
                    var $3925 = self.val;
                    var self = Kind$Parser$term$($3923, $3924);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3927 = self.idx;
                            var $3928 = self.code;
                            var $3929 = self.err;
                            var $3930 = Parser$Reply$error$($3927, $3928, $3929);
                            var $3926 = $3930;
                            break;
                        case 'Parser.Reply.value':
                            var $3931 = self.idx;
                            var $3932 = self.code;
                            var $3933 = self.val;
                            var self = Parser$maybe$(Kind$Parser$text(";"), $3931, $3932);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3935 = self.idx;
                                    var $3936 = self.code;
                                    var $3937 = self.err;
                                    var $3938 = Parser$Reply$error$($3935, $3936, $3937);
                                    var $3934 = $3938;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3939 = self.idx;
                                    var $3940 = self.code;
                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3939)($3940);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3942 = self.idx;
                                            var $3943 = self.code;
                                            var $3944 = self.err;
                                            var $3945 = Parser$Reply$error$($3942, $3943, $3944);
                                            var $3941 = $3945;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3946 = self.idx;
                                            var $3947 = self.code;
                                            var $3948 = self.val;
                                            var self = Kind$Parser$stop$($3925, $3946, $3947);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3950 = self.idx;
                                                    var $3951 = self.code;
                                                    var $3952 = self.err;
                                                    var $3953 = Parser$Reply$error$($3950, $3951, $3952);
                                                    var $3949 = $3953;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3954 = self.idx;
                                                    var $3955 = self.code;
                                                    var $3956 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));
                                                    var _term$23 = Kind$Term$app$(_term$22, $3933);
                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$("", (_x$24 => {
                                                        var $3958 = $3948;
                                                        return $3958;
                                                    })));
                                                    var $3957 = Parser$Reply$value$($3954, $3955, Kind$Term$ori$($3956, _term$24));
                                                    var $3949 = $3957;
                                                    break;
                                            };
                                            var $3941 = $3949;
                                            break;
                                    };
                                    var $3934 = $3941;
                                    break;
                            };
                            var $3926 = $3934;
                            break;
                    };
                    var $3918 = $3926;
                    break;
            };
            return $3918;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3960 = self.idx;
                    var $3961 = self.code;
                    var $3962 = self.err;
                    var $3963 = Parser$Reply$error$($3960, $3961, $3962);
                    var $3959 = $3963;
                    break;
                case 'Parser.Reply.value':
                    var $3964 = self.idx;
                    var $3965 = self.code;
                    var $3966 = self.val;
                    var self = Parser$maybe$(Kind$Parser$text(";"), $3964, $3965);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3968 = self.idx;
                            var $3969 = self.code;
                            var $3970 = self.err;
                            var $3971 = Parser$Reply$error$($3968, $3969, $3970);
                            var $3967 = $3971;
                            break;
                        case 'Parser.Reply.value':
                            var $3972 = self.idx;
                            var $3973 = self.code;
                            var $3974 = Parser$Reply$value$($3972, $3973, $3966);
                            var $3967 = $3974;
                            break;
                    };
                    var $3959 = $3967;
                    break;
            };
            return $3959;
        }), List$nil))))));
        return $3752;
    };
    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);

    function Kind$Parser$do$(_idx$1, _code$2) {
        var self = Parser$maybe$(Kind$Parser$text("do "), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3976 = self.idx;
                var $3977 = self.code;
                var $3978 = self.err;
                var $3979 = Parser$Reply$error$($3976, $3977, $3978);
                var $3975 = $3979;
                break;
            case 'Parser.Reply.value':
                var $3980 = self.idx;
                var $3981 = self.code;
                var self = Kind$Parser$name1$($3980, $3981);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3983 = self.idx;
                        var $3984 = self.code;
                        var $3985 = self.err;
                        var $3986 = Parser$Reply$error$($3983, $3984, $3985);
                        var $3982 = $3986;
                        break;
                    case 'Parser.Reply.value':
                        var $3987 = self.idx;
                        var $3988 = self.code;
                        var $3989 = self.val;
                        var self = Parser$text$(" {", $3987, $3988);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3991 = self.idx;
                                var $3992 = self.code;
                                var $3993 = self.err;
                                var $3994 = Parser$Reply$error$($3991, $3992, $3993);
                                var $3990 = $3994;
                                break;
                            case 'Parser.Reply.value':
                                var $3995 = self.idx;
                                var $3996 = self.code;
                                var self = Kind$Parser$do$statements$($3989)($3995)($3996);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3998 = self.idx;
                                        var $3999 = self.code;
                                        var $4000 = self.err;
                                        var $4001 = Parser$Reply$error$($3998, $3999, $4000);
                                        var $3997 = $4001;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4002 = self.idx;
                                        var $4003 = self.code;
                                        var $4004 = self.val;
                                        var self = Kind$Parser$text$("}", $4002, $4003);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4006 = self.idx;
                                                var $4007 = self.code;
                                                var $4008 = self.err;
                                                var $4009 = Parser$Reply$error$($4006, $4007, $4008);
                                                var $4005 = $4009;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4010 = self.idx;
                                                var $4011 = self.code;
                                                var $4012 = Parser$Reply$value$($4010, $4011, $4004);
                                                var $4005 = $4012;
                                                break;
                                        };
                                        var $3997 = $4005;
                                        break;
                                };
                                var $3990 = $3997;
                                break;
                        };
                        var $3982 = $3990;
                        break;
                };
                var $3975 = $3982;
                break;
        };
        return $3975;
    };
    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);

    function Parser$try$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4014 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);
                var $4013 = $4014;
                break;
            case 'Parser.Reply.value':
                var $4015 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);
                var $4013 = $4015;
                break;
        };
        return $4013;
    };
    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $4016 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $4016;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {
        var self = Parser$try$(_test$2, _idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4018 = self.idx;
                var $4019 = self.code;
                var $4020 = self.err;
                var $4021 = Parser$Reply$error$($4018, $4019, $4020);
                var $4017 = $4021;
                break;
            case 'Parser.Reply.value':
                var $4022 = self.idx;
                var $4023 = self.code;
                var $4024 = self.val;
                var self = $4024;
                if (self) {
                    var $4026 = Parser$fail("Avoided.");
                    var $4025 = $4026;
                } else {
                    var $4027 = _parse$3;
                    var $4025 = $4027;
                };
                var $4025 = $4025($4022)($4023);
                var $4017 = $4025;
                break;
        };
        return $4017;
    };
    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);

    function Maybe$default$(_m$2, _a$3) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $4029 = self.value;
                var $4030 = $4029;
                var $4028 = $4030;
                break;
            case 'Maybe.none':
                var $4031 = _a$3;
                var $4028 = $4031;
                break;
        };
        return $4028;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Kind$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $4033 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));
            var $4032 = $4033;
        } else {
            var $4034 = (self - 1n);
            var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));
            var _argm$4 = Kind$Term$nat$($4034);
            var $4035 = Kind$Term$app$(_func$3, _argm$4);
            var $4032 = $4035;
        };
        return $4032;
    };
    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $4037 = self.pred;
                var $4038 = (Word$to_bits$($4037) + '0');
                var $4036 = $4038;
                break;
            case 'Word.i':
                var $4039 = self.pred;
                var $4040 = (Word$to_bits$($4039) + '1');
                var $4036 = $4040;
                break;
            case 'Word.e':
                var $4041 = Bits$e;
                var $4036 = $4041;
                break;
        };
        return $4036;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Kind$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4043 = self.slice(0, -1);
                var $4044 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")), Kind$Term$unroll_chr$bits$($4043));
                var $4042 = $4044;
                break;
            case 'i':
                var $4045 = self.slice(0, -1);
                var $4046 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")), Kind$Term$unroll_chr$bits$($4045));
                var $4042 = $4046;
                break;
            case 'e':
                var $4047 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));
                var $4042 = $4047;
                break;
        };
        return $4042;
    };
    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);

    function Kind$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));
        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));
        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")), _term$5);
        var $4048 = _term$6;
        return $4048;
    };
    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);

    function Kind$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $4050 = Kind$Term$ref$(Kind$Name$read$("String.nil"));
            var $4049 = $4050;
        } else {
            var $4051 = self.charCodeAt(0);
            var $4052 = self.slice(1);
            var _char$4 = Kind$Term$chr$($4051);
            var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));
            var _term$6 = Kind$Term$app$(_term$5, _char$4);
            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($4052));
            var $4053 = _term$7;
            var $4049 = $4053;
        };
        return $4049;
    };
    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);

    function Kind$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $4055 = self.name;
                var self = Kind$Map$get$($4055, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $4057 = self.value;
                        var self = $4057;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $4059 = self.term;
                                var $4060 = Kind$Term$reduce$($4059, _defs$2);
                                var $4058 = $4060;
                                break;
                        };
                        var $4056 = $4058;
                        break;
                    case 'Maybe.none':
                        var $4061 = Kind$Term$ref$($4055);
                        var $4056 = $4061;
                        break;
                };
                var $4054 = $4056;
                break;
            case 'Kind.Term.app':
                var $4062 = self.func;
                var $4063 = self.argm;
                var _func$5 = Kind$Term$reduce$($4062, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $4065 = self.body;
                        var $4066 = Kind$Term$reduce$($4065($4063), _defs$2);
                        var $4064 = $4066;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $4067 = _term$1;
                        var $4064 = $4067;
                        break;
                };
                var $4054 = $4064;
                break;
            case 'Kind.Term.let':
                var $4068 = self.expr;
                var $4069 = self.body;
                var $4070 = Kind$Term$reduce$($4069($4068), _defs$2);
                var $4054 = $4070;
                break;
            case 'Kind.Term.def':
                var $4071 = self.expr;
                var $4072 = self.body;
                var $4073 = Kind$Term$reduce$($4072($4071), _defs$2);
                var $4054 = $4073;
                break;
            case 'Kind.Term.ann':
                var $4074 = self.term;
                var $4075 = Kind$Term$reduce$($4074, _defs$2);
                var $4054 = $4075;
                break;
            case 'Kind.Term.nat':
                var $4076 = self.natx;
                var $4077 = Kind$Term$reduce$(Kind$Term$unroll_nat$($4076), _defs$2);
                var $4054 = $4077;
                break;
            case 'Kind.Term.chr':
                var $4078 = self.chrx;
                var $4079 = Kind$Term$reduce$(Kind$Term$unroll_chr$($4078), _defs$2);
                var $4054 = $4079;
                break;
            case 'Kind.Term.str':
                var $4080 = self.strx;
                var $4081 = Kind$Term$reduce$(Kind$Term$unroll_str$($4080), _defs$2);
                var $4054 = $4081;
                break;
            case 'Kind.Term.ori':
                var $4082 = self.expr;
                var $4083 = Kind$Term$reduce$($4082, _defs$2);
                var $4054 = $4083;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.cse':
                var $4084 = _term$1;
                var $4054 = $4084;
                break;
        };
        return $4054;
    };
    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);

    function Kind$Term$extract_name$(_term$1) {
        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
                var $4086 = self.name;
                var $4087 = $4086;
                var $4085 = $4087;
                break;
            case 'Kind.Term.ref':
                var $4088 = self.name;
                var $4089 = $4088;
                var $4085 = $4089;
                break;
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $4090 = "self";
                var $4085 = $4090;
                break;
        };
        return $4085;
    };
    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);

    function Kind$Ann$new$(_name$1, _term$2, _type$3) {
        var $4091 = ({
            _: 'Kind.Ann.new',
            'name': _name$1,
            'term': _term$2,
            'type': _type$3
        });
        return $4091;
    };
    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);
    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {
        var self = Kind$Parser$text$("with ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4093 = self.idx;
                var $4094 = self.code;
                var $4095 = self.err;
                var $4096 = Parser$Reply$error$($4093, $4094, $4095);
                var $4092 = $4096;
                break;
            case 'Parser.Reply.value':
                var $4097 = self.idx;
                var $4098 = self.code;
                var $4099 = Parser$many$((_idx$6 => _code$7 => {
                    var self = Kind$Parser$name1$(_idx$6, _code$7);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4101 = self.idx;
                            var $4102 = self.code;
                            var $4103 = self.err;
                            var $4104 = Parser$Reply$error$($4101, $4102, $4103);
                            var $4100 = $4104;
                            break;
                        case 'Parser.Reply.value':
                            var $4105 = self.idx;
                            var $4106 = self.code;
                            var $4107 = self.val;
                            var self = Parser$maybe$((_idx$11 => _code$12 => {
                                var self = Kind$Parser$text$(":", _idx$11, _code$12);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4110 = self.idx;
                                        var $4111 = self.code;
                                        var $4112 = self.err;
                                        var $4113 = Parser$Reply$error$($4110, $4111, $4112);
                                        var $4109 = $4113;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4114 = self.idx;
                                        var $4115 = self.code;
                                        var self = Kind$Parser$term$($4114, $4115);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4117 = self.idx;
                                                var $4118 = self.code;
                                                var $4119 = self.err;
                                                var $4120 = Parser$Reply$error$($4117, $4118, $4119);
                                                var $4116 = $4120;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4121 = self.idx;
                                                var $4122 = self.code;
                                                var $4123 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $4121, $4122);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4125 = self.idx;
                                                        var $4126 = self.code;
                                                        var $4127 = self.err;
                                                        var $4128 = Parser$Reply$error$($4125, $4126, $4127);
                                                        var $4124 = $4128;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4129 = self.idx;
                                                        var $4130 = self.code;
                                                        var $4131 = Parser$Reply$value$($4129, $4130, $4123);
                                                        var $4124 = $4131;
                                                        break;
                                                };
                                                var $4116 = $4124;
                                                break;
                                        };
                                        var $4109 = $4116;
                                        break;
                                };
                                return $4109;
                            }), $4105, $4106);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4132 = self.idx;
                                    var $4133 = self.code;
                                    var $4134 = self.err;
                                    var $4135 = Parser$Reply$error$($4132, $4133, $4134);
                                    var $4108 = $4135;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4136 = self.idx;
                                    var $4137 = self.code;
                                    var $4138 = self.val;
                                    var $4139 = Parser$Reply$value$($4136, $4137, Kind$Ann$new$($4107, Kind$Term$ref$($4107), $4138));
                                    var $4108 = $4139;
                                    break;
                            };
                            var $4100 = $4108;
                            break;
                    };
                    return $4100;
                }))($4097)($4098);
                var $4092 = $4099;
                break;
        };
        return $4092;
    }), List$cons$((_idx$1 => _code$2 => {
        var $4140 = Parser$Reply$value$(_idx$1, _code$2, List$nil);
        return $4140;
    }), List$nil)));

    function Kind$Parser$case$case$(_idx$1, _code$2) {
        var self = Parser$until$(Kind$Parser$text(":"), Kind$Parser$name1)(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4142 = self.idx;
                var $4143 = self.code;
                var $4144 = self.err;
                var $4145 = Parser$Reply$error$($4142, $4143, $4144);
                var $4141 = $4145;
                break;
            case 'Parser.Reply.value':
                var $4146 = self.idx;
                var $4147 = self.code;
                var $4148 = self.val;
                var self = Kind$Parser$term$($4146, $4147);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4150 = self.idx;
                        var $4151 = self.code;
                        var $4152 = self.err;
                        var $4153 = Parser$Reply$error$($4150, $4151, $4152);
                        var $4149 = $4153;
                        break;
                    case 'Parser.Reply.value':
                        var $4154 = self.idx;
                        var $4155 = self.code;
                        var $4156 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $4154, $4155);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4158 = self.idx;
                                var $4159 = self.code;
                                var $4160 = self.err;
                                var $4161 = Parser$Reply$error$($4158, $4159, $4160);
                                var $4157 = $4161;
                                break;
                            case 'Parser.Reply.value':
                                var $4162 = self.idx;
                                var $4163 = self.code;
                                var $4164 = Parser$Reply$value$($4162, $4163, Pair$new$($4148, $4156));
                                var $4157 = $4164;
                                break;
                        };
                        var $4149 = $4157;
                        break;
                };
                var $4141 = $4149;
                break;
        };
        return $4141;
    };
    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);
    const Debug$log = a0 => a1 => ((console.log(a0), a1()));

    function Kind$Parser$case$group$(_dflt$1, _cses$2) {
        var self = _cses$2;
        switch (self._) {
            case 'List.cons':
                var $4166 = self.head;
                var $4167 = self.tail;
                var _map$5 = Kind$Parser$case$group$(_dflt$1, $4167);
                var self = $4166;
                switch (self._) {
                    case 'Pair.new':
                        var $4169 = self.fst;
                        var $4170 = self.snd;
                        var self = $4169;
                        switch (self._) {
                            case 'List.cons':
                                var $4172 = self.head;
                                var $4173 = self.tail;
                                var _rest$10 = Maybe$default$(Kind$Map$get$($4172, _map$5), List$nil);
                                var $4174 = Kind$Map$set$($4172, List$cons$(Pair$new$($4173, $4170), _rest$10), _map$5);
                                var $4171 = $4174;
                                break;
                            case 'List.nil':
                                var $4175 = _map$5;
                                var $4171 = $4175;
                                break;
                        };
                        var $4168 = $4171;
                        break;
                };
                var $4165 = $4168;
                break;
            case 'List.nil':
                var self = _dflt$1;
                switch (self._) {
                    case 'Maybe.some':
                        var $4177 = self.value;
                        var $4178 = Kind$Map$set$("_", List$cons$(Pair$new$(List$nil, $4177), List$nil), Kind$Map$new);
                        var $4176 = $4178;
                        break;
                    case 'Maybe.none':
                        var $4179 = Kind$Map$new;
                        var $4176 = $4179;
                        break;
                };
                var $4165 = $4176;
                break;
        };
        return $4165;
    };
    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);

    function BitsMap$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'BitsMap.tie':
                var $4181 = self.val;
                var $4182 = self.lft;
                var $4183 = self.rgt;
                var self = $4181;
                switch (self._) {
                    case 'Maybe.some':
                        var $4185 = self.value;
                        var $4186 = Maybe$some$(_fn$3($4185));
                        var _val$8 = $4186;
                        break;
                    case 'Maybe.none':
                        var $4187 = Maybe$none;
                        var _val$8 = $4187;
                        break;
                };
                var _lft$9 = BitsMap$map$(_fn$3, $4182);
                var _rgt$10 = BitsMap$map$(_fn$3, $4183);
                var $4184 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);
                var $4180 = $4184;
                break;
            case 'BitsMap.new':
                var $4188 = BitsMap$new;
                var $4180 = $4188;
                break;
        };
        return $4180;
    };
    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);

    function Kind$Map$map$(_fn$3, _map$4) {
        var $4189 = BitsMap$map$(_fn$3, _map$4);
        return $4189;
    };
    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);

    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $4190 = ({
            _: 'Kind.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $4190;
    };
    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {
        var self = _vals$1;
        switch (self._) {
            case 'List.cons':
                var $4192 = self.head;
                var $4193 = self.tail;
                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);
                var _name$10 = Pair$fst$($4192);
                var _expr$11 = Pair$snd$($4192);
                var _cses$12 = Kind$Map$map$((_cses$12 => {
                    var $4195 = Kind$Parser$case$build$($4193, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);
                    return $4195;
                }), _group$9);
                var $4194 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));
                var $4191 = $4194;
                break;
            case 'List.nil':
                var self = _cses$3;
                switch (self._) {
                    case 'List.cons':
                        var $4197 = self.head;
                        var $4198 = Pair$snd$($4197);
                        var $4196 = $4198;
                        break;
                    case 'List.nil':
                        var $4199 = ((console.log(("MISSING CASE" + String$nil)), (_$7 => {
                            var $4200 = Kind$Term$ref$("missing_case");
                            return $4200;
                        })()));
                        var $4196 = $4199;
                        break;
                };
                var $4191 = $4196;
                break;
        };
        return $4191;
    };
    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4202 = self.idx;
                var $4203 = self.code;
                var $4204 = self.err;
                var $4205 = Parser$Reply$error$($4202, $4203, $4204);
                var $4201 = $4205;
                break;
            case 'Parser.Reply.value':
                var $4206 = self.idx;
                var $4207 = self.code;
                var $4208 = self.val;
                var self = Kind$Parser$text$("case ", $4206, $4207);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4210 = self.idx;
                        var $4211 = self.code;
                        var $4212 = self.err;
                        var $4213 = Parser$Reply$error$($4210, $4211, $4212);
                        var $4209 = $4213;
                        break;
                    case 'Parser.Reply.value':
                        var $4214 = self.idx;
                        var $4215 = self.code;
                        var self = Parser$many1$((_idx$9 => _code$10 => {
                            var self = Parser$avoiding$(Kind$Parser$text("{"), Kind$Parser$term, _idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4218 = self.idx;
                                    var $4219 = self.code;
                                    var $4220 = self.err;
                                    var $4221 = Parser$Reply$error$($4218, $4219, $4220);
                                    var $4217 = $4221;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4222 = self.idx;
                                    var $4223 = self.code;
                                    var $4224 = self.val;
                                    var self = Parser$maybe$((_idx$14 => _code$15 => {
                                        var self = Kind$Parser$text$("as", _idx$14, _code$15);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4227 = self.idx;
                                                var $4228 = self.code;
                                                var $4229 = self.err;
                                                var $4230 = Parser$Reply$error$($4227, $4228, $4229);
                                                var $4226 = $4230;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4231 = self.idx;
                                                var $4232 = self.code;
                                                var self = Kind$Parser$name1$($4231, $4232);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4234 = self.idx;
                                                        var $4235 = self.code;
                                                        var $4236 = self.err;
                                                        var $4237 = Parser$Reply$error$($4234, $4235, $4236);
                                                        var $4233 = $4237;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4238 = self.idx;
                                                        var $4239 = self.code;
                                                        var $4240 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $4238, $4239);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4242 = self.idx;
                                                                var $4243 = self.code;
                                                                var $4244 = self.err;
                                                                var $4245 = Parser$Reply$error$($4242, $4243, $4244);
                                                                var $4241 = $4245;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4246 = self.idx;
                                                                var $4247 = self.code;
                                                                var $4248 = Parser$Reply$value$($4246, $4247, $4240);
                                                                var $4241 = $4248;
                                                                break;
                                                        };
                                                        var $4233 = $4241;
                                                        break;
                                                };
                                                var $4226 = $4233;
                                                break;
                                        };
                                        return $4226;
                                    }), $4222, $4223);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4249 = self.idx;
                                            var $4250 = self.code;
                                            var $4251 = self.err;
                                            var $4252 = Parser$Reply$error$($4249, $4250, $4251);
                                            var $4225 = $4252;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4253 = self.idx;
                                            var $4254 = self.code;
                                            var $4255 = self.val;
                                            var _name$17 = Maybe$default$($4255, Kind$Term$extract_name$($4224));
                                            var $4256 = Parser$Reply$value$($4253, $4254, Pair$new$(_name$17, $4224));
                                            var $4225 = $4256;
                                            break;
                                    };
                                    var $4217 = $4225;
                                    break;
                            };
                            return $4217;
                        }), $4214, $4215);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4257 = self.idx;
                                var $4258 = self.code;
                                var $4259 = self.err;
                                var $4260 = Parser$Reply$error$($4257, $4258, $4259);
                                var $4216 = $4260;
                                break;
                            case 'Parser.Reply.value':
                                var $4261 = self.idx;
                                var $4262 = self.code;
                                var $4263 = self.val;
                                var self = Kind$Parser$case$with($4261)($4262);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4265 = self.idx;
                                        var $4266 = self.code;
                                        var $4267 = self.err;
                                        var $4268 = Parser$Reply$error$($4265, $4266, $4267);
                                        var $4264 = $4268;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4269 = self.idx;
                                        var $4270 = self.code;
                                        var $4271 = self.val;
                                        var self = Kind$Parser$text$("{", $4269, $4270);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4273 = self.idx;
                                                var $4274 = self.code;
                                                var $4275 = self.err;
                                                var $4276 = Parser$Reply$error$($4273, $4274, $4275);
                                                var $4272 = $4276;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4277 = self.idx;
                                                var $4278 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$case$case)($4277)($4278);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4280 = self.idx;
                                                        var $4281 = self.code;
                                                        var $4282 = self.err;
                                                        var $4283 = Parser$Reply$error$($4280, $4281, $4282);
                                                        var $4279 = $4283;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4284 = self.idx;
                                                        var $4285 = self.code;
                                                        var $4286 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text("!"), $4284, $4285);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4288 = self.idx;
                                                                var $4289 = self.code;
                                                                var $4290 = self.err;
                                                                var $4291 = Parser$Reply$error$($4288, $4289, $4290);
                                                                var $4287 = $4291;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4292 = self.idx;
                                                                var $4293 = self.code;
                                                                var $4294 = self.val;
                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {
                                                                    var self = Kind$Parser$text$("default", _idx$24, _code$25);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $4297 = self.idx;
                                                                            var $4298 = self.code;
                                                                            var $4299 = self.err;
                                                                            var $4300 = Parser$Reply$error$($4297, $4298, $4299);
                                                                            var $4296 = $4300;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $4301 = self.idx;
                                                                            var $4302 = self.code;
                                                                            var self = Kind$Parser$term$($4301, $4302);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4304 = self.idx;
                                                                                    var $4305 = self.code;
                                                                                    var $4306 = self.err;
                                                                                    var $4307 = Parser$Reply$error$($4304, $4305, $4306);
                                                                                    var $4303 = $4307;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4308 = self.idx;
                                                                                    var $4309 = self.code;
                                                                                    var $4310 = self.val;
                                                                                    var $4311 = Parser$Reply$value$($4308, $4309, $4310);
                                                                                    var $4303 = $4311;
                                                                                    break;
                                                                            };
                                                                            var $4296 = $4303;
                                                                            break;
                                                                    };
                                                                    return $4296;
                                                                }), $4292, $4293);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4312 = self.idx;
                                                                        var $4313 = self.code;
                                                                        var $4314 = self.err;
                                                                        var $4315 = Parser$Reply$error$($4312, $4313, $4314);
                                                                        var $4295 = $4315;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4316 = self.idx;
                                                                        var $4317 = self.code;
                                                                        var $4318 = self.val;
                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {
                                                                            var self = Kind$Parser$text$(":", _idx$27, _code$28);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4321 = self.idx;
                                                                                    var $4322 = self.code;
                                                                                    var $4323 = self.err;
                                                                                    var $4324 = Parser$Reply$error$($4321, $4322, $4323);
                                                                                    var $4320 = $4324;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4325 = self.idx;
                                                                                    var $4326 = self.code;
                                                                                    var $4327 = Kind$Parser$term$($4325, $4326);
                                                                                    var $4320 = $4327;
                                                                                    break;
                                                                            };
                                                                            return $4320;
                                                                        }), $4316, $4317);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $4328 = self.idx;
                                                                                var $4329 = self.code;
                                                                                var $4330 = self.err;
                                                                                var $4331 = Parser$Reply$error$($4328, $4329, $4330);
                                                                                var $4319 = $4331;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $4332 = self.idx;
                                                                                var $4333 = self.code;
                                                                                var $4334 = self.val;
                                                                                var self = $4334;
                                                                                switch (self._) {
                                                                                    case 'Maybe.some':
                                                                                        var $4336 = self.value;
                                                                                        var $4337 = Maybe$some$($4336);
                                                                                        var _moti$30 = $4337;
                                                                                        break;
                                                                                    case 'Maybe.none':
                                                                                        var self = $4294;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.none':
                                                                                                var $4339 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                                                var $4338 = $4339;
                                                                                                break;
                                                                                            case 'Maybe.some':
                                                                                                var $4340 = Maybe$none;
                                                                                                var $4338 = $4340;
                                                                                                break;
                                                                                        };
                                                                                        var _moti$30 = $4338;
                                                                                        break;
                                                                                };
                                                                                var self = Kind$Parser$stop$($4208, $4332, $4333);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $4341 = self.idx;
                                                                                        var $4342 = self.code;
                                                                                        var $4343 = self.err;
                                                                                        var $4344 = Parser$Reply$error$($4341, $4342, $4343);
                                                                                        var $4335 = $4344;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $4345 = self.idx;
                                                                                        var $4346 = self.code;
                                                                                        var $4347 = self.val;
                                                                                        var $4348 = Parser$Reply$value$($4345, $4346, Kind$Parser$case$build$($4263, $4271, $4286, $4318, _moti$30, $4347));
                                                                                        var $4335 = $4348;
                                                                                        break;
                                                                                };
                                                                                var $4319 = $4335;
                                                                                break;
                                                                        };
                                                                        var $4295 = $4319;
                                                                        break;
                                                                };
                                                                var $4287 = $4295;
                                                                break;
                                                        };
                                                        var $4279 = $4287;
                                                        break;
                                                };
                                                var $4272 = $4279;
                                                break;
                                        };
                                        var $4264 = $4272;
                                        break;
                                };
                                var $4216 = $4264;
                                break;
                        };
                        var $4209 = $4216;
                        break;
                };
                var $4201 = $4209;
                break;
        };
        return $4201;
    };
    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);

    function Kind$Parser$open$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4350 = self.idx;
                var $4351 = self.code;
                var $4352 = self.err;
                var $4353 = Parser$Reply$error$($4350, $4351, $4352);
                var $4349 = $4353;
                break;
            case 'Parser.Reply.value':
                var $4354 = self.idx;
                var $4355 = self.code;
                var $4356 = self.val;
                var self = Kind$Parser$text$("open ", $4354, $4355);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4358 = self.idx;
                        var $4359 = self.code;
                        var $4360 = self.err;
                        var $4361 = Parser$Reply$error$($4358, $4359, $4360);
                        var $4357 = $4361;
                        break;
                    case 'Parser.Reply.value':
                        var $4362 = self.idx;
                        var $4363 = self.code;
                        var self = Kind$Parser$spaces($4362)($4363);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4365 = self.idx;
                                var $4366 = self.code;
                                var $4367 = self.err;
                                var $4368 = Parser$Reply$error$($4365, $4366, $4367);
                                var $4364 = $4368;
                                break;
                            case 'Parser.Reply.value':
                                var $4369 = self.idx;
                                var $4370 = self.code;
                                var self = Kind$Parser$term$($4369, $4370);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4372 = self.idx;
                                        var $4373 = self.code;
                                        var $4374 = self.err;
                                        var $4375 = Parser$Reply$error$($4372, $4373, $4374);
                                        var $4371 = $4375;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4376 = self.idx;
                                        var $4377 = self.code;
                                        var $4378 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Kind$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4381 = self.idx;
                                                    var $4382 = self.code;
                                                    var $4383 = self.err;
                                                    var $4384 = Parser$Reply$error$($4381, $4382, $4383);
                                                    var $4380 = $4384;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4385 = self.idx;
                                                    var $4386 = self.code;
                                                    var $4387 = Kind$Parser$name1$($4385, $4386);
                                                    var $4380 = $4387;
                                                    break;
                                            };
                                            return $4380;
                                        }), $4376, $4377);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4388 = self.idx;
                                                var $4389 = self.code;
                                                var $4390 = self.err;
                                                var $4391 = Parser$Reply$error$($4388, $4389, $4390);
                                                var $4379 = $4391;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4392 = self.idx;
                                                var $4393 = self.code;
                                                var $4394 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $4392, $4393);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4396 = self.idx;
                                                        var $4397 = self.code;
                                                        var $4398 = self.err;
                                                        var $4399 = Parser$Reply$error$($4396, $4397, $4398);
                                                        var $4395 = $4399;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4400 = self.idx;
                                                        var $4401 = self.code;
                                                        var self = $4394;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $4403 = self.value;
                                                                var $4404 = $4403;
                                                                var _name$21 = $4404;
                                                                break;
                                                            case 'Maybe.none':
                                                                var self = Kind$Term$reduce$($4378, Kind$Map$new);
                                                                switch (self._) {
                                                                    case 'Kind.Term.var':
                                                                        var $4406 = self.name;
                                                                        var $4407 = $4406;
                                                                        var $4405 = $4407;
                                                                        break;
                                                                    case 'Kind.Term.ref':
                                                                        var $4408 = self.name;
                                                                        var $4409 = $4408;
                                                                        var $4405 = $4409;
                                                                        break;
                                                                    case 'Kind.Term.typ':
                                                                    case 'Kind.Term.all':
                                                                    case 'Kind.Term.lam':
                                                                    case 'Kind.Term.app':
                                                                    case 'Kind.Term.let':
                                                                    case 'Kind.Term.def':
                                                                    case 'Kind.Term.ann':
                                                                    case 'Kind.Term.gol':
                                                                    case 'Kind.Term.hol':
                                                                    case 'Kind.Term.nat':
                                                                    case 'Kind.Term.chr':
                                                                    case 'Kind.Term.str':
                                                                    case 'Kind.Term.cse':
                                                                    case 'Kind.Term.ori':
                                                                        var $4410 = Kind$Name$read$("self");
                                                                        var $4405 = $4410;
                                                                        break;
                                                                };
                                                                var _name$21 = $4405;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Kind$Parser$term$($4400, $4401);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4411 = self.idx;
                                                                var $4412 = self.code;
                                                                var $4413 = self.err;
                                                                var $4414 = Parser$Reply$error$($4411, $4412, $4413);
                                                                var $4402 = $4414;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4415 = self.idx;
                                                                var $4416 = self.code;
                                                                var $4417 = self.val;
                                                                var _cses$26 = Kind$Map$set$("_", $4417, Kind$Map$new);
                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                var self = Kind$Parser$stop$($4356, $4415, $4416);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4419 = self.idx;
                                                                        var $4420 = self.code;
                                                                        var $4421 = self.err;
                                                                        var $4422 = Parser$Reply$error$($4419, $4420, $4421);
                                                                        var $4418 = $4422;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4423 = self.idx;
                                                                        var $4424 = self.code;
                                                                        var $4425 = self.val;
                                                                        var $4426 = Parser$Reply$value$($4423, $4424, Kind$Term$ori$($4425, Kind$Term$cse$(Bits$e, $4378, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $4418 = $4426;
                                                                        break;
                                                                };
                                                                var $4402 = $4418;
                                                                break;
                                                        };
                                                        var $4395 = $4402;
                                                        break;
                                                };
                                                var $4379 = $4395;
                                                break;
                                        };
                                        var $4371 = $4379;
                                        break;
                                };
                                var $4364 = $4371;
                                break;
                        };
                        var $4357 = $4364;
                        break;
                };
                var $4349 = $4357;
                break;
        };
        return $4349;
    };
    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);

    function Kind$Parser$without$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4428 = self.idx;
                var $4429 = self.code;
                var $4430 = self.err;
                var $4431 = Parser$Reply$error$($4428, $4429, $4430);
                var $4427 = $4431;
                break;
            case 'Parser.Reply.value':
                var $4432 = self.idx;
                var $4433 = self.code;
                var $4434 = self.val;
                var self = Kind$Parser$text$("without ", $4432, $4433);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4436 = self.idx;
                        var $4437 = self.code;
                        var $4438 = self.err;
                        var $4439 = Parser$Reply$error$($4436, $4437, $4438);
                        var $4435 = $4439;
                        break;
                    case 'Parser.Reply.value':
                        var $4440 = self.idx;
                        var $4441 = self.code;
                        var self = Kind$Parser$name1$($4440, $4441);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4443 = self.idx;
                                var $4444 = self.code;
                                var $4445 = self.err;
                                var $4446 = Parser$Reply$error$($4443, $4444, $4445);
                                var $4442 = $4446;
                                break;
                            case 'Parser.Reply.value':
                                var $4447 = self.idx;
                                var $4448 = self.code;
                                var $4449 = self.val;
                                var self = Kind$Parser$text$(":", $4447, $4448);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4451 = self.idx;
                                        var $4452 = self.code;
                                        var $4453 = self.err;
                                        var $4454 = Parser$Reply$error$($4451, $4452, $4453);
                                        var $4450 = $4454;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4455 = self.idx;
                                        var $4456 = self.code;
                                        var self = Kind$Parser$term$($4455, $4456);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4458 = self.idx;
                                                var $4459 = self.code;
                                                var $4460 = self.err;
                                                var $4461 = Parser$Reply$error$($4458, $4459, $4460);
                                                var $4457 = $4461;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4462 = self.idx;
                                                var $4463 = self.code;
                                                var $4464 = self.val;
                                                var self = Kind$Parser$term$($4462, $4463);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4466 = self.idx;
                                                        var $4467 = self.code;
                                                        var $4468 = self.err;
                                                        var $4469 = Parser$Reply$error$($4466, $4467, $4468);
                                                        var $4465 = $4469;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4470 = self.idx;
                                                        var $4471 = self.code;
                                                        var $4472 = self.val;
                                                        var self = Kind$Parser$stop$($4434, $4470, $4471);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4474 = self.idx;
                                                                var $4475 = self.code;
                                                                var $4476 = self.err;
                                                                var $4477 = Parser$Reply$error$($4474, $4475, $4476);
                                                                var $4473 = $4477;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4478 = self.idx;
                                                                var $4479 = self.code;
                                                                var $4480 = self.val;
                                                                var _term$24 = Kind$Term$ref$($4449);
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$("", (_x$25 => {
                                                                    var $4482 = Kind$Term$hol$(Bits$e);
                                                                    return $4482;
                                                                })));
                                                                var _term$26 = Kind$Term$app$(_term$25, $4464);
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($4449, (_x$27 => {
                                                                    var $4483 = $4472;
                                                                    return $4483;
                                                                })));
                                                                var $4481 = Parser$Reply$value$($4478, $4479, Kind$Term$ori$($4480, _term$27));
                                                                var $4473 = $4481;
                                                                break;
                                                        };
                                                        var $4465 = $4473;
                                                        break;
                                                };
                                                var $4457 = $4465;
                                                break;
                                        };
                                        var $4450 = $4457;
                                        break;
                                };
                                var $4442 = $4450;
                                break;
                        };
                        var $4435 = $4442;
                        break;
                };
                var $4427 = $4435;
                break;
        };
        return $4427;
    };
    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);

    function Kind$Parser$switch$case$(_idx$1, _code$2) {
        var self = Kind$Parser$term$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4485 = self.idx;
                var $4486 = self.code;
                var $4487 = self.err;
                var $4488 = Parser$Reply$error$($4485, $4486, $4487);
                var $4484 = $4488;
                break;
            case 'Parser.Reply.value':
                var $4489 = self.idx;
                var $4490 = self.code;
                var $4491 = self.val;
                var self = Kind$Parser$text$(":", $4489, $4490);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4493 = self.idx;
                        var $4494 = self.code;
                        var $4495 = self.err;
                        var $4496 = Parser$Reply$error$($4493, $4494, $4495);
                        var $4492 = $4496;
                        break;
                    case 'Parser.Reply.value':
                        var $4497 = self.idx;
                        var $4498 = self.code;
                        var self = Kind$Parser$term$($4497, $4498);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4500 = self.idx;
                                var $4501 = self.code;
                                var $4502 = self.err;
                                var $4503 = Parser$Reply$error$($4500, $4501, $4502);
                                var $4499 = $4503;
                                break;
                            case 'Parser.Reply.value':
                                var $4504 = self.idx;
                                var $4505 = self.code;
                                var $4506 = self.val;
                                var $4507 = Parser$Reply$value$($4504, $4505, Pair$new$($4491, $4506));
                                var $4499 = $4507;
                                break;
                        };
                        var $4492 = $4499;
                        break;
                };
                var $4484 = $4492;
                break;
        };
        return $4484;
    };
    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);

    function Kind$Parser$switch$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4509 = self.idx;
                var $4510 = self.code;
                var $4511 = self.err;
                var $4512 = Parser$Reply$error$($4509, $4510, $4511);
                var $4508 = $4512;
                break;
            case 'Parser.Reply.value':
                var $4513 = self.idx;
                var $4514 = self.code;
                var $4515 = self.val;
                var self = Kind$Parser$text$("switch ", $4513, $4514);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4517 = self.idx;
                        var $4518 = self.code;
                        var $4519 = self.err;
                        var $4520 = Parser$Reply$error$($4517, $4518, $4519);
                        var $4516 = $4520;
                        break;
                    case 'Parser.Reply.value':
                        var $4521 = self.idx;
                        var $4522 = self.code;
                        var self = Kind$Parser$term$($4521, $4522);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4524 = self.idx;
                                var $4525 = self.code;
                                var $4526 = self.err;
                                var $4527 = Parser$Reply$error$($4524, $4525, $4526);
                                var $4523 = $4527;
                                break;
                            case 'Parser.Reply.value':
                                var $4528 = self.idx;
                                var $4529 = self.code;
                                var $4530 = self.val;
                                var self = Kind$Parser$text$("{", $4528, $4529);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4532 = self.idx;
                                        var $4533 = self.code;
                                        var $4534 = self.err;
                                        var $4535 = Parser$Reply$error$($4532, $4533, $4534);
                                        var $4531 = $4535;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4536 = self.idx;
                                        var $4537 = self.code;
                                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$switch$case)($4536)($4537);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4539 = self.idx;
                                                var $4540 = self.code;
                                                var $4541 = self.err;
                                                var $4542 = Parser$Reply$error$($4539, $4540, $4541);
                                                var $4538 = $4542;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4543 = self.idx;
                                                var $4544 = self.code;
                                                var $4545 = self.val;
                                                var self = Kind$Parser$text$("default ", $4543, $4544);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4547 = self.idx;
                                                        var $4548 = self.code;
                                                        var $4549 = self.err;
                                                        var $4550 = Parser$Reply$error$($4547, $4548, $4549);
                                                        var $4546 = $4550;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4551 = self.idx;
                                                        var $4552 = self.code;
                                                        var self = Kind$Parser$term$($4551, $4552);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4554 = self.idx;
                                                                var $4555 = self.code;
                                                                var $4556 = self.err;
                                                                var $4557 = Parser$Reply$error$($4554, $4555, $4556);
                                                                var $4553 = $4557;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4558 = self.idx;
                                                                var $4559 = self.code;
                                                                var $4560 = self.val;
                                                                var self = Kind$Parser$stop$($4515, $4558, $4559);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4562 = self.idx;
                                                                        var $4563 = self.code;
                                                                        var $4564 = self.err;
                                                                        var $4565 = Parser$Reply$error$($4562, $4563, $4564);
                                                                        var $4561 = $4565;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4566 = self.idx;
                                                                        var $4567 = self.code;
                                                                        var $4568 = self.val;
                                                                        var _term$27 = List$fold$($4545, $4560, (_cse$27 => _rest$28 => {
                                                                            var self = _cse$27;
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $4571 = self.fst;
                                                                                    var $4572 = self.snd;
                                                                                    var _term$31 = Kind$Term$app$($4530, $4571);
                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$("", (_x$32 => {
                                                                                        var $4574 = Kind$Term$hol$(Bits$e);
                                                                                        return $4574;
                                                                                    })));
                                                                                    var _term$33 = Kind$Term$app$(_term$32, $4572);
                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);
                                                                                    var $4573 = _term$34;
                                                                                    var $4570 = $4573;
                                                                                    break;
                                                                            };
                                                                            return $4570;
                                                                        }));
                                                                        var $4569 = Parser$Reply$value$($4566, $4567, Kind$Term$ori$($4568, _term$27));
                                                                        var $4561 = $4569;
                                                                        break;
                                                                };
                                                                var $4553 = $4561;
                                                                break;
                                                        };
                                                        var $4546 = $4553;
                                                        break;
                                                };
                                                var $4538 = $4546;
                                                break;
                                        };
                                        var $4531 = $4538;
                                        break;
                                };
                                var $4523 = $4531;
                                break;
                        };
                        var $4516 = $4523;
                        break;
                };
                var $4508 = $4516;
                break;
        };
        return $4508;
    };
    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4576 = self.slice(0, -1);
                var $4577 = $4576;
                var $4575 = $4577;
                break;
            case 'i':
                var $4578 = self.slice(0, -1);
                var $4579 = $4578;
                var $4575 = $4579;
                break;
            case 'e':
                var $4580 = Bits$e;
                var $4575 = $4580;
                break;
        };
        return $4575;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4582 = self.slice(0, -1);
                var $4583 = ($4582 + '1');
                var $4581 = $4583;
                break;
            case 'i':
                var $4584 = self.slice(0, -1);
                var $4585 = (Bits$inc$($4584) + '0');
                var $4581 = $4585;
                break;
            case 'e':
                var $4586 = (Bits$e + '1');
                var $4581 = $4586;
                break;
        };
        return $4581;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$is_some$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4588 = Bool$false;
                var $4587 = $4588;
                break;
            case 'Maybe.some':
                var $4589 = Bool$true;
                var $4587 = $4589;
                break;
        };
        return $4587;
    };
    const Maybe$is_some = x0 => Maybe$is_some$(x0);

    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $4590 = ({
            _: 'Kind.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $4590;
    };
    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);

    function Kind$Parser$goal$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4592 = self.idx;
                var $4593 = self.code;
                var $4594 = self.err;
                var $4595 = Parser$Reply$error$($4592, $4593, $4594);
                var $4591 = $4595;
                break;
            case 'Parser.Reply.value':
                var $4596 = self.idx;
                var $4597 = self.code;
                var $4598 = self.val;
                var self = Kind$Parser$text$("?", $4596, $4597);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4600 = self.idx;
                        var $4601 = self.code;
                        var $4602 = self.err;
                        var $4603 = Parser$Reply$error$($4600, $4601, $4602);
                        var $4599 = $4603;
                        break;
                    case 'Parser.Reply.value':
                        var $4604 = self.idx;
                        var $4605 = self.code;
                        var self = Kind$Parser$name$($4604, $4605);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4607 = self.idx;
                                var $4608 = self.code;
                                var $4609 = self.err;
                                var $4610 = Parser$Reply$error$($4607, $4608, $4609);
                                var $4606 = $4610;
                                break;
                            case 'Parser.Reply.value':
                                var $4611 = self.idx;
                                var $4612 = self.code;
                                var $4613 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4616 = self.idx;
                                            var $4617 = self.code;
                                            var $4618 = self.err;
                                            var $4619 = Parser$Reply$error$($4616, $4617, $4618);
                                            var $4615 = $4619;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4620 = self.idx;
                                            var $4621 = self.code;
                                            var self = Parser$nat$($4620, $4621);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4623 = self.idx;
                                                    var $4624 = self.code;
                                                    var $4625 = self.err;
                                                    var $4626 = Parser$Reply$error$($4623, $4624, $4625);
                                                    var $4622 = $4626;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4627 = self.idx;
                                                    var $4628 = self.code;
                                                    var $4629 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($4629)))));
                                                    var $4630 = Parser$Reply$value$($4627, $4628, _bits$20);
                                                    var $4622 = $4630;
                                                    break;
                                            };
                                            var $4615 = $4622;
                                            break;
                                    };
                                    return $4615;
                                }))($4611)($4612);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4631 = self.idx;
                                        var $4632 = self.code;
                                        var $4633 = self.err;
                                        var $4634 = Parser$Reply$error$($4631, $4632, $4633);
                                        var $4614 = $4634;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4635 = self.idx;
                                        var $4636 = self.code;
                                        var $4637 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $4635, $4636);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4639 = self.idx;
                                                var $4640 = self.code;
                                                var $4641 = self.err;
                                                var $4642 = Parser$Reply$error$($4639, $4640, $4641);
                                                var self = $4642;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4643 = self.idx;
                                                var $4644 = self.code;
                                                var $4645 = self.val;
                                                var $4646 = Parser$Reply$value$($4643, $4644, Maybe$is_some$($4645));
                                                var self = $4646;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4647 = self.idx;
                                                var $4648 = self.code;
                                                var $4649 = self.err;
                                                var $4650 = Parser$Reply$error$($4647, $4648, $4649);
                                                var $4638 = $4650;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4651 = self.idx;
                                                var $4652 = self.code;
                                                var $4653 = self.val;
                                                var self = Kind$Parser$stop$($4598, $4651, $4652);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4655 = self.idx;
                                                        var $4656 = self.code;
                                                        var $4657 = self.err;
                                                        var $4658 = Parser$Reply$error$($4655, $4656, $4657);
                                                        var $4654 = $4658;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4659 = self.idx;
                                                        var $4660 = self.code;
                                                        var $4661 = self.val;
                                                        var $4662 = Parser$Reply$value$($4659, $4660, Kind$Term$ori$($4661, Kind$Term$gol$($4613, $4637, $4653)));
                                                        var $4654 = $4662;
                                                        break;
                                                };
                                                var $4638 = $4654;
                                                break;
                                        };
                                        var $4614 = $4638;
                                        break;
                                };
                                var $4606 = $4614;
                                break;
                        };
                        var $4599 = $4606;
                        break;
                };
                var $4591 = $4599;
                break;
        };
        return $4591;
    };
    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);

    function Kind$Parser$hole$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4664 = self.idx;
                var $4665 = self.code;
                var $4666 = self.err;
                var $4667 = Parser$Reply$error$($4664, $4665, $4666);
                var $4663 = $4667;
                break;
            case 'Parser.Reply.value':
                var $4668 = self.idx;
                var $4669 = self.code;
                var $4670 = self.val;
                var self = Kind$Parser$text$("_", $4668, $4669);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4672 = self.idx;
                        var $4673 = self.code;
                        var $4674 = self.err;
                        var $4675 = Parser$Reply$error$($4672, $4673, $4674);
                        var $4671 = $4675;
                        break;
                    case 'Parser.Reply.value':
                        var $4676 = self.idx;
                        var $4677 = self.code;
                        var self = Kind$Parser$stop$($4670, $4676, $4677);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4679 = self.idx;
                                var $4680 = self.code;
                                var $4681 = self.err;
                                var $4682 = Parser$Reply$error$($4679, $4680, $4681);
                                var $4678 = $4682;
                                break;
                            case 'Parser.Reply.value':
                                var $4683 = self.idx;
                                var $4684 = self.code;
                                var $4685 = self.val;
                                var $4686 = Parser$Reply$value$($4683, $4684, Kind$Term$ori$($4685, Kind$Term$hol$(Bits$e)));
                                var $4678 = $4686;
                                break;
                        };
                        var $4671 = $4678;
                        break;
                };
                var $4663 = $4671;
                break;
        };
        return $4663;
    };
    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);

    function Kind$Parser$float$sign$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4688 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' or \'-\'.");
            var $4687 = $4688;
        } else {
            var $4689 = self.charCodeAt(0);
            var $4690 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = (($4689 === 43) || ($4689 === 45));
            if (self) {
                var $4692 = Parser$Reply$value$(_sidx$5, $4690, $4689);
                var $4691 = $4692;
            } else {
                var $4693 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' ou \'-\'.");
                var $4691 = $4693;
            };
            var $4687 = $4691;
        };
        return $4687;
    };
    const Kind$Parser$float$sign = x0 => x1 => Kind$Parser$float$sign$(x0, x1);

    function List$any$(_cond$2, _list$3) {
        var List$any$ = (_cond$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_cond$2, _list$3]
        });
        var List$any = _cond$2 => _list$3 => List$any$(_cond$2, _list$3);
        var arg = [_cond$2, _list$3];
        while (true) {
            let [_cond$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4694 = self.head;
                        var $4695 = self.tail;
                        var self = _cond$2($4694);
                        if (self) {
                            var $4697 = Bool$true;
                            var $4696 = $4697;
                        } else {
                            var $4698 = List$any$(_cond$2, $4695);
                            var $4696 = $4698;
                        };
                        return $4696;
                    case 'List.nil':
                        var $4699 = Bool$false;
                        return $4699;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$any = x0 => x1 => List$any$(x0, x1);

    function Kind$Parser$float$str_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4701 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4700 = $4701;
        } else {
            var $4702 = self.charCodeAt(0);
            var $4703 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var _digits$6 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$nil)))))))))));
            var self = List$any$(a1 => ($4702 === a1), _digits$6);
            if (self) {
                var $4705 = Parser$Reply$value$(_sidx$5, $4703, $4702);
                var $4704 = $4705;
            } else {
                var $4706 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                var $4704 = $4706;
            };
            var $4700 = $4704;
        };
        return $4700;
    };
    const Kind$Parser$float$str_digit = x0 => x1 => Kind$Parser$float$str_digit$(x0, x1);

    function String$from_list$(_xs$1) {
        var self = _xs$1;
        switch (self._) {
            case 'List.cons':
                var $4708 = self.head;
                var $4709 = self.tail;
                var $4710 = String$cons$($4708, String$from_list$($4709));
                var $4707 = $4710;
                break;
            case 'List.nil':
                var $4711 = String$nil;
                var $4707 = $4711;
                break;
        };
        return $4707;
    };
    const String$from_list = x0 => String$from_list$(x0);

    function Kind$Parser$float$64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4713 = self.idx;
                var $4714 = self.code;
                var $4715 = self.err;
                var $4716 = Parser$Reply$error$($4713, $4714, $4715);
                var $4712 = $4716;
                break;
            case 'Parser.Reply.value':
                var $4717 = self.idx;
                var $4718 = self.code;
                var $4719 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4717, $4718);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4721 = self.idx;
                        var $4722 = self.code;
                        var $4723 = self.err;
                        var $4724 = Parser$Reply$error$($4721, $4722, $4723);
                        var $4720 = $4724;
                        break;
                    case 'Parser.Reply.value':
                        var $4725 = self.idx;
                        var $4726 = self.code;
                        var $4727 = self.val;
                        var _sign$9 = Maybe$default$($4727, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4725, $4726);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4729 = self.idx;
                                var $4730 = self.code;
                                var $4731 = self.err;
                                var $4732 = Parser$Reply$error$($4729, $4730, $4731);
                                var $4728 = $4732;
                                break;
                            case 'Parser.Reply.value':
                                var $4733 = self.idx;
                                var $4734 = self.code;
                                var $4735 = self.val;
                                var self = Parser$text$(".", $4733, $4734);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4737 = self.idx;
                                        var $4738 = self.code;
                                        var $4739 = self.err;
                                        var $4740 = Parser$Reply$error$($4737, $4738, $4739);
                                        var $4736 = $4740;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4741 = self.idx;
                                        var $4742 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4741, $4742);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4744 = self.idx;
                                                var $4745 = self.code;
                                                var $4746 = self.err;
                                                var $4747 = Parser$Reply$error$($4744, $4745, $4746);
                                                var $4743 = $4747;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4748 = self.idx;
                                                var $4749 = self.code;
                                                var $4750 = self.val;
                                                var self = Parser$text$("#64", $4748, $4749);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4752 = self.idx;
                                                        var $4753 = self.code;
                                                        var $4754 = self.err;
                                                        var $4755 = Parser$Reply$error$($4752, $4753, $4754);
                                                        var $4751 = $4755;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4756 = self.idx;
                                                        var $4757 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4735)) + ("." + String$from_list$($4750))));
                                                        var _conv$23 = Kind$Term$ref$("F64.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4719, $4756, $4757);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4759 = self.idx;
                                                                var $4760 = self.code;
                                                                var $4761 = self.err;
                                                                var $4762 = Parser$Reply$error$($4759, $4760, $4761);
                                                                var $4758 = $4762;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4763 = self.idx;
                                                                var $4764 = self.code;
                                                                var $4765 = self.val;
                                                                var $4766 = Parser$Reply$value$($4763, $4764, Kind$Term$ori$($4765, _term$24));
                                                                var $4758 = $4766;
                                                                break;
                                                        };
                                                        var $4751 = $4758;
                                                        break;
                                                };
                                                var $4743 = $4751;
                                                break;
                                        };
                                        var $4736 = $4743;
                                        break;
                                };
                                var $4728 = $4736;
                                break;
                        };
                        var $4720 = $4728;
                        break;
                };
                var $4712 = $4720;
                break;
        };
        return $4712;
    };
    const Kind$Parser$float$64 = x0 => x1 => Kind$Parser$float$64$(x0, x1);

    function Kind$Parser$float$32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4768 = self.idx;
                var $4769 = self.code;
                var $4770 = self.err;
                var $4771 = Parser$Reply$error$($4768, $4769, $4770);
                var $4767 = $4771;
                break;
            case 'Parser.Reply.value':
                var $4772 = self.idx;
                var $4773 = self.code;
                var $4774 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4772, $4773);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4776 = self.idx;
                        var $4777 = self.code;
                        var $4778 = self.err;
                        var $4779 = Parser$Reply$error$($4776, $4777, $4778);
                        var $4775 = $4779;
                        break;
                    case 'Parser.Reply.value':
                        var $4780 = self.idx;
                        var $4781 = self.code;
                        var $4782 = self.val;
                        var _sign$9 = Maybe$default$($4782, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4780, $4781);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4784 = self.idx;
                                var $4785 = self.code;
                                var $4786 = self.err;
                                var $4787 = Parser$Reply$error$($4784, $4785, $4786);
                                var $4783 = $4787;
                                break;
                            case 'Parser.Reply.value':
                                var $4788 = self.idx;
                                var $4789 = self.code;
                                var $4790 = self.val;
                                var self = Parser$text$(".", $4788, $4789);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4792 = self.idx;
                                        var $4793 = self.code;
                                        var $4794 = self.err;
                                        var $4795 = Parser$Reply$error$($4792, $4793, $4794);
                                        var $4791 = $4795;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4796 = self.idx;
                                        var $4797 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4796, $4797);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4799 = self.idx;
                                                var $4800 = self.code;
                                                var $4801 = self.err;
                                                var $4802 = Parser$Reply$error$($4799, $4800, $4801);
                                                var $4798 = $4802;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4803 = self.idx;
                                                var $4804 = self.code;
                                                var $4805 = self.val;
                                                var self = Parser$text$("#32", $4803, $4804);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4807 = self.idx;
                                                        var $4808 = self.code;
                                                        var $4809 = self.err;
                                                        var $4810 = Parser$Reply$error$($4807, $4808, $4809);
                                                        var $4806 = $4810;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4811 = self.idx;
                                                        var $4812 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4790)) + ("." + String$from_list$($4805))));
                                                        var _conv$23 = Kind$Term$ref$("F32.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4774, $4811, $4812);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4814 = self.idx;
                                                                var $4815 = self.code;
                                                                var $4816 = self.err;
                                                                var $4817 = Parser$Reply$error$($4814, $4815, $4816);
                                                                var $4813 = $4817;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4818 = self.idx;
                                                                var $4819 = self.code;
                                                                var $4820 = self.val;
                                                                var $4821 = Parser$Reply$value$($4818, $4819, Kind$Term$ori$($4820, _term$24));
                                                                var $4813 = $4821;
                                                                break;
                                                        };
                                                        var $4806 = $4813;
                                                        break;
                                                };
                                                var $4798 = $4806;
                                                break;
                                        };
                                        var $4791 = $4798;
                                        break;
                                };
                                var $4783 = $4791;
                                break;
                        };
                        var $4775 = $4783;
                        break;
                };
                var $4767 = $4775;
                break;
        };
        return $4767;
    };
    const Kind$Parser$float$32 = x0 => x1 => Kind$Parser$float$32$(x0, x1);

    function Either$(_A$1, _B$2) {
        var $4822 = null;
        return $4822;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function Either$left$(_value$3) {
        var $4823 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4823;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4824 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4824;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4825 = Either$left$(_n$1);
                    return $4825;
                } else {
                    var $4826 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4828 = Either$right$(Nat$succ$($4826));
                        var $4827 = $4828;
                    } else {
                        var $4829 = (self - 1n);
                        var $4830 = Nat$sub_rem$($4829, $4826);
                        var $4827 = $4830;
                    };
                    return $4827;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4831 = self.value;
                        var $4832 = Nat$div_mod$go$($4831, _m$2, Nat$succ$(_d$3));
                        return $4832;
                    case 'Either.right':
                        var $4833 = Pair$new$(_d$3, _n$1);
                        return $4833;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4834 = self.fst;
                        var $4835 = self.snd;
                        var self = $4834;
                        if (self === 0n) {
                            var $4837 = List$cons$($4835, _res$3);
                            var $4836 = $4837;
                        } else {
                            var $4838 = (self - 1n);
                            var $4839 = Nat$to_base$go$(_base$1, $4834, List$cons$($4835, _res$3));
                            var $4836 = $4839;
                        };
                        return $4836;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4840 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4840;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4841 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4841;
                } else {
                    var $4842 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4844 = _r$3;
                        var $4843 = $4844;
                    } else {
                        var $4845 = (self - 1n);
                        var $4846 = Nat$mod$go$($4845, $4842, Nat$succ$(_r$3));
                        var $4843 = $4846;
                    };
                    return $4843;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);
    const Nat$mod = a0 => a1 => (a0 % a1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4847 = self.head;
                        var $4848 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $4850 = Maybe$some$($4847);
                            var $4849 = $4850;
                        } else {
                            var $4851 = (self - 1n);
                            var $4852 = List$at$($4851, $4848);
                            var $4849 = $4852;
                        };
                        return $4849;
                    case 'List.nil':
                        var $4853 = Maybe$none;
                        return $4853;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = (_n$2 % _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.some':
                    var $4856 = self.value;
                    var $4857 = $4856;
                    var $4855 = $4857;
                    break;
                case 'Maybe.none':
                    var $4858 = 35;
                    var $4855 = $4858;
                    break;
            };
            var $4854 = $4855;
        } else {
            var $4859 = 35;
            var $4854 = $4859;
        };
        return $4854;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4860 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4861 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4861;
        }));
        return $4860;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4862 = Nat$to_string_base$(10n, _n$1);
        return $4862;
    };
    const Nat$show = x0 => Nat$show$(x0);

    function Kind$Parser$int_pos$(_idx$1, _code$2) {
        var self = Parser$text$("+", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4864 = self.idx;
                var $4865 = self.code;
                var $4866 = self.err;
                var $4867 = Parser$Reply$error$($4864, $4865, $4866);
                var $4863 = $4867;
                break;
            case 'Parser.Reply.value':
                var $4868 = self.idx;
                var $4869 = self.code;
                var self = Parser$many1$(Parser$digit, $4868, $4869);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4871 = self.idx;
                        var $4872 = self.code;
                        var $4873 = self.err;
                        var $4874 = Parser$Reply$error$($4871, $4872, $4873);
                        var $4870 = $4874;
                        break;
                    case 'Parser.Reply.value':
                        var $4875 = self.idx;
                        var $4876 = self.code;
                        var $4877 = self.val;
                        var $4878 = Parser$Reply$value$($4875, $4876, Pair$new$(Bool$true, Nat$from_base$(10n, $4877)));
                        var $4870 = $4878;
                        break;
                };
                var $4863 = $4870;
                break;
        };
        return $4863;
    };
    const Kind$Parser$int_pos = x0 => x1 => Kind$Parser$int_pos$(x0, x1);

    function Kind$Parser$int_neg$(_idx$1, _code$2) {
        var self = Parser$text$("-", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4880 = self.idx;
                var $4881 = self.code;
                var $4882 = self.err;
                var $4883 = Parser$Reply$error$($4880, $4881, $4882);
                var $4879 = $4883;
                break;
            case 'Parser.Reply.value':
                var $4884 = self.idx;
                var $4885 = self.code;
                var self = Parser$many1$(Parser$digit, $4884, $4885);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4887 = self.idx;
                        var $4888 = self.code;
                        var $4889 = self.err;
                        var $4890 = Parser$Reply$error$($4887, $4888, $4889);
                        var $4886 = $4890;
                        break;
                    case 'Parser.Reply.value':
                        var $4891 = self.idx;
                        var $4892 = self.code;
                        var $4893 = self.val;
                        var $4894 = Parser$Reply$value$($4891, $4892, Pair$new$(Bool$false, Nat$from_base$(10n, $4893)));
                        var $4886 = $4894;
                        break;
                };
                var $4879 = $4886;
                break;
        };
        return $4879;
    };
    const Kind$Parser$int_neg = x0 => x1 => Kind$Parser$int_neg$(x0, x1);

    function Kind$Parser$int$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4896 = self.idx;
                var $4897 = self.code;
                var $4898 = self.err;
                var $4899 = Parser$Reply$error$($4896, $4897, $4898);
                var $4895 = $4899;
                break;
            case 'Parser.Reply.value':
                var $4900 = self.idx;
                var $4901 = self.code;
                var $4902 = self.val;
                var self = Kind$Parser$spaces($4900)($4901);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4904 = self.idx;
                        var $4905 = self.code;
                        var $4906 = self.err;
                        var $4907 = Parser$Reply$error$($4904, $4905, $4906);
                        var $4903 = $4907;
                        break;
                    case 'Parser.Reply.value':
                        var $4908 = self.idx;
                        var $4909 = self.code;
                        var self = Parser$first_of$(List$cons$(Kind$Parser$int_pos, List$cons$(Kind$Parser$int_neg, List$nil)))($4908)($4909);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4911 = self.idx;
                                var $4912 = self.code;
                                var $4913 = self.err;
                                var $4914 = Parser$Reply$error$($4911, $4912, $4913);
                                var $4910 = $4914;
                                break;
                            case 'Parser.Reply.value':
                                var $4915 = self.idx;
                                var $4916 = self.code;
                                var $4917 = self.val;
                                var self = $4917;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $4919 = self.fst;
                                        var $4920 = self.snd;
                                        var _ret$14 = Kind$Term$ref$("Int.from_nat");
                                        var _ret$15 = Kind$Term$app$(_ret$14, Kind$Term$nat$($4920));
                                        var self = $4919;
                                        if (self) {
                                            var $4922 = _ret$15;
                                            var $4921 = $4922;
                                        } else {
                                            var _inv$16 = Kind$Term$ref$("Int.neg");
                                            var $4923 = Kind$Term$app$(_inv$16, _ret$15);
                                            var $4921 = $4923;
                                        };
                                        var _term$12 = $4921;
                                        break;
                                };
                                var self = Kind$Parser$stop$($4902, $4915, $4916);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4924 = self.idx;
                                        var $4925 = self.code;
                                        var $4926 = self.err;
                                        var $4927 = Parser$Reply$error$($4924, $4925, $4926);
                                        var $4918 = $4927;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4928 = self.idx;
                                        var $4929 = self.code;
                                        var $4930 = self.val;
                                        var $4931 = Parser$Reply$value$($4928, $4929, Kind$Term$ori$($4930, _term$12));
                                        var $4918 = $4931;
                                        break;
                                };
                                var $4910 = $4918;
                                break;
                        };
                        var $4903 = $4910;
                        break;
                };
                var $4895 = $4903;
                break;
        };
        return $4895;
    };
    const Kind$Parser$int = x0 => x1 => Kind$Parser$int$(x0, x1);

    function Kind$Parser$machine_integer$signed$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4932 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4934 = self.idx;
                    var $4935 = self.code;
                    var $4936 = self.err;
                    var $4937 = Parser$Reply$error$($4934, $4935, $4936);
                    var $4933 = $4937;
                    break;
                case 'Parser.Reply.value':
                    var $4938 = self.idx;
                    var $4939 = self.code;
                    var $4940 = self.val;
                    var self = Kind$Parser$spaces($4938)($4939);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4942 = self.idx;
                            var $4943 = self.code;
                            var $4944 = self.err;
                            var $4945 = Parser$Reply$error$($4942, $4943, $4944);
                            var $4941 = $4945;
                            break;
                        case 'Parser.Reply.value':
                            var $4946 = self.idx;
                            var $4947 = self.code;
                            var self = Kind$Parser$int$($4946, $4947);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4949 = self.idx;
                                    var $4950 = self.code;
                                    var $4951 = self.err;
                                    var $4952 = Parser$Reply$error$($4949, $4950, $4951);
                                    var $4948 = $4952;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4953 = self.idx;
                                    var $4954 = self.code;
                                    var $4955 = self.val;
                                    var self = $4955;
                                    switch (self._) {
                                        case 'Kind.Term.ori':
                                            var $4957 = self.expr;
                                            var self = $4957;
                                            switch (self._) {
                                                case 'Kind.Term.app':
                                                    var $4959 = self.argm;
                                                    var $4960 = $4959;
                                                    var $4958 = $4960;
                                                    break;
                                                case 'Kind.Term.var':
                                                case 'Kind.Term.ref':
                                                case 'Kind.Term.typ':
                                                case 'Kind.Term.all':
                                                case 'Kind.Term.lam':
                                                case 'Kind.Term.let':
                                                case 'Kind.Term.def':
                                                case 'Kind.Term.ann':
                                                case 'Kind.Term.gol':
                                                case 'Kind.Term.hol':
                                                case 'Kind.Term.nat':
                                                case 'Kind.Term.chr':
                                                case 'Kind.Term.str':
                                                case 'Kind.Term.cse':
                                                case 'Kind.Term.ori':
                                                    var $4961 = Kind$Term$ref$("?");
                                                    var $4958 = $4961;
                                                    break;
                                            };
                                            var _intx$14 = $4958;
                                            break;
                                        case 'Kind.Term.var':
                                        case 'Kind.Term.ref':
                                        case 'Kind.Term.typ':
                                        case 'Kind.Term.all':
                                        case 'Kind.Term.lam':
                                        case 'Kind.Term.app':
                                        case 'Kind.Term.let':
                                        case 'Kind.Term.def':
                                        case 'Kind.Term.ann':
                                        case 'Kind.Term.gol':
                                        case 'Kind.Term.hol':
                                        case 'Kind.Term.nat':
                                        case 'Kind.Term.chr':
                                        case 'Kind.Term.str':
                                        case 'Kind.Term.cse':
                                            var $4962 = Kind$Term$ref$("?");
                                            var _intx$14 = $4962;
                                            break;
                                    };
                                    var self = Parser$text$(("#" + _size_str$2), $4953, $4954);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4963 = self.idx;
                                            var $4964 = self.code;
                                            var $4965 = self.err;
                                            var $4966 = Parser$Reply$error$($4963, $4964, $4965);
                                            var $4956 = $4966;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4967 = self.idx;
                                            var $4968 = self.code;
                                            var _term$18 = Kind$Term$ref$(("Nat.to_i" + _size_str$2));
                                            var _term$19 = Kind$Term$app$(_term$18, _intx$14);
                                            var self = Kind$Parser$stop$($4940, $4967, $4968);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4970 = self.idx;
                                                    var $4971 = self.code;
                                                    var $4972 = self.err;
                                                    var $4973 = Parser$Reply$error$($4970, $4971, $4972);
                                                    var $4969 = $4973;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4974 = self.idx;
                                                    var $4975 = self.code;
                                                    var $4976 = self.val;
                                                    var $4977 = Parser$Reply$value$($4974, $4975, Kind$Term$ori$($4976, _term$19));
                                                    var $4969 = $4977;
                                                    break;
                                            };
                                            var $4956 = $4969;
                                            break;
                                    };
                                    var $4948 = $4956;
                                    break;
                            };
                            var $4941 = $4948;
                            break;
                    };
                    var $4933 = $4941;
                    break;
            };
            return $4933;
        });
        return $4932;
    };
    const Kind$Parser$machine_integer$signed = x0 => Kind$Parser$machine_integer$signed$(x0);

    function Parser$hex_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4979 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4978 = $4979;
        } else {
            var $4980 = self.charCodeAt(0);
            var $4981 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($4980 === 48);
            if (self) {
                var $4983 = Parser$Reply$value$(_sidx$5, $4981, 0n);
                var $4982 = $4983;
            } else {
                var self = ($4980 === 49);
                if (self) {
                    var $4985 = Parser$Reply$value$(_sidx$5, $4981, 1n);
                    var $4984 = $4985;
                } else {
                    var self = ($4980 === 50);
                    if (self) {
                        var $4987 = Parser$Reply$value$(_sidx$5, $4981, 2n);
                        var $4986 = $4987;
                    } else {
                        var self = ($4980 === 51);
                        if (self) {
                            var $4989 = Parser$Reply$value$(_sidx$5, $4981, 3n);
                            var $4988 = $4989;
                        } else {
                            var self = ($4980 === 52);
                            if (self) {
                                var $4991 = Parser$Reply$value$(_sidx$5, $4981, 4n);
                                var $4990 = $4991;
                            } else {
                                var self = ($4980 === 53);
                                if (self) {
                                    var $4993 = Parser$Reply$value$(_sidx$5, $4981, 5n);
                                    var $4992 = $4993;
                                } else {
                                    var self = ($4980 === 54);
                                    if (self) {
                                        var $4995 = Parser$Reply$value$(_sidx$5, $4981, 6n);
                                        var $4994 = $4995;
                                    } else {
                                        var self = ($4980 === 55);
                                        if (self) {
                                            var $4997 = Parser$Reply$value$(_sidx$5, $4981, 7n);
                                            var $4996 = $4997;
                                        } else {
                                            var self = ($4980 === 56);
                                            if (self) {
                                                var $4999 = Parser$Reply$value$(_sidx$5, $4981, 8n);
                                                var $4998 = $4999;
                                            } else {
                                                var self = ($4980 === 57);
                                                if (self) {
                                                    var $5001 = Parser$Reply$value$(_sidx$5, $4981, 9n);
                                                    var $5000 = $5001;
                                                } else {
                                                    var self = ($4980 === 97);
                                                    if (self) {
                                                        var $5003 = Parser$Reply$value$(_sidx$5, $4981, 10n);
                                                        var $5002 = $5003;
                                                    } else {
                                                        var self = ($4980 === 98);
                                                        if (self) {
                                                            var $5005 = Parser$Reply$value$(_sidx$5, $4981, 11n);
                                                            var $5004 = $5005;
                                                        } else {
                                                            var self = ($4980 === 99);
                                                            if (self) {
                                                                var $5007 = Parser$Reply$value$(_sidx$5, $4981, 12n);
                                                                var $5006 = $5007;
                                                            } else {
                                                                var self = ($4980 === 100);
                                                                if (self) {
                                                                    var $5009 = Parser$Reply$value$(_sidx$5, $4981, 13n);
                                                                    var $5008 = $5009;
                                                                } else {
                                                                    var self = ($4980 === 101);
                                                                    if (self) {
                                                                        var $5011 = Parser$Reply$value$(_sidx$5, $4981, 14n);
                                                                        var $5010 = $5011;
                                                                    } else {
                                                                        var self = ($4980 === 102);
                                                                        if (self) {
                                                                            var $5013 = Parser$Reply$value$(_sidx$5, $4981, 15n);
                                                                            var $5012 = $5013;
                                                                        } else {
                                                                            var self = ($4980 === 65);
                                                                            if (self) {
                                                                                var $5015 = Parser$Reply$value$(_sidx$5, $4981, 10n);
                                                                                var $5014 = $5015;
                                                                            } else {
                                                                                var self = ($4980 === 66);
                                                                                if (self) {
                                                                                    var $5017 = Parser$Reply$value$(_sidx$5, $4981, 11n);
                                                                                    var $5016 = $5017;
                                                                                } else {
                                                                                    var self = ($4980 === 67);
                                                                                    if (self) {
                                                                                        var $5019 = Parser$Reply$value$(_sidx$5, $4981, 12n);
                                                                                        var $5018 = $5019;
                                                                                    } else {
                                                                                        var self = ($4980 === 68);
                                                                                        if (self) {
                                                                                            var $5021 = Parser$Reply$value$(_sidx$5, $4981, 13n);
                                                                                            var $5020 = $5021;
                                                                                        } else {
                                                                                            var self = ($4980 === 69);
                                                                                            if (self) {
                                                                                                var $5023 = Parser$Reply$value$(_sidx$5, $4981, 14n);
                                                                                                var $5022 = $5023;
                                                                                            } else {
                                                                                                var self = ($4980 === 70);
                                                                                                if (self) {
                                                                                                    var $5025 = Parser$Reply$value$(_sidx$5, $4981, 15n);
                                                                                                    var $5024 = $5025;
                                                                                                } else {
                                                                                                    var $5026 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                                                                    var $5024 = $5026;
                                                                                                };
                                                                                                var $5022 = $5024;
                                                                                            };
                                                                                            var $5020 = $5022;
                                                                                        };
                                                                                        var $5018 = $5020;
                                                                                    };
                                                                                    var $5016 = $5018;
                                                                                };
                                                                                var $5014 = $5016;
                                                                            };
                                                                            var $5012 = $5014;
                                                                        };
                                                                        var $5010 = $5012;
                                                                    };
                                                                    var $5008 = $5010;
                                                                };
                                                                var $5006 = $5008;
                                                            };
                                                            var $5004 = $5006;
                                                        };
                                                        var $5002 = $5004;
                                                    };
                                                    var $5000 = $5002;
                                                };
                                                var $4998 = $5000;
                                            };
                                            var $4996 = $4998;
                                        };
                                        var $4994 = $4996;
                                    };
                                    var $4992 = $4994;
                                };
                                var $4990 = $4992;
                            };
                            var $4988 = $4990;
                        };
                        var $4986 = $4988;
                    };
                    var $4984 = $4986;
                };
                var $4982 = $4984;
            };
            var $4978 = $4982;
        };
        return $4978;
    };
    const Parser$hex_digit = x0 => x1 => Parser$hex_digit$(x0, x1);

    function Parser$hex_nat$(_idx$1, _code$2) {
        var self = Parser$text$("0x", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5028 = self.idx;
                var $5029 = self.code;
                var $5030 = self.err;
                var $5031 = Parser$Reply$error$($5028, $5029, $5030);
                var $5027 = $5031;
                break;
            case 'Parser.Reply.value':
                var $5032 = self.idx;
                var $5033 = self.code;
                var self = Parser$many1$(Parser$hex_digit, $5032, $5033);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5035 = self.idx;
                        var $5036 = self.code;
                        var $5037 = self.err;
                        var $5038 = Parser$Reply$error$($5035, $5036, $5037);
                        var $5034 = $5038;
                        break;
                    case 'Parser.Reply.value':
                        var $5039 = self.idx;
                        var $5040 = self.code;
                        var $5041 = self.val;
                        var $5042 = Parser$Reply$value$($5039, $5040, Nat$from_base$(16n, $5041));
                        var $5034 = $5042;
                        break;
                };
                var $5027 = $5034;
                break;
        };
        return $5027;
    };
    const Parser$hex_nat = x0 => x1 => Parser$hex_nat$(x0, x1);

    function Kind$Parser$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5044 = self.idx;
                var $5045 = self.code;
                var $5046 = self.err;
                var $5047 = Parser$Reply$error$($5044, $5045, $5046);
                var $5043 = $5047;
                break;
            case 'Parser.Reply.value':
                var $5048 = self.idx;
                var $5049 = self.code;
                var $5050 = self.val;
                var self = Kind$Parser$spaces($5048)($5049);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5052 = self.idx;
                        var $5053 = self.code;
                        var $5054 = self.err;
                        var $5055 = Parser$Reply$error$($5052, $5053, $5054);
                        var $5051 = $5055;
                        break;
                    case 'Parser.Reply.value':
                        var $5056 = self.idx;
                        var $5057 = self.code;
                        var self = Parser$first_of$(List$cons$(Parser$hex_nat, List$cons$(Parser$nat, List$nil)))($5056)($5057);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5059 = self.idx;
                                var $5060 = self.code;
                                var $5061 = self.err;
                                var $5062 = Parser$Reply$error$($5059, $5060, $5061);
                                var $5058 = $5062;
                                break;
                            case 'Parser.Reply.value':
                                var $5063 = self.idx;
                                var $5064 = self.code;
                                var $5065 = self.val;
                                var self = Kind$Parser$stop$($5050, $5063, $5064);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5067 = self.idx;
                                        var $5068 = self.code;
                                        var $5069 = self.err;
                                        var $5070 = Parser$Reply$error$($5067, $5068, $5069);
                                        var $5066 = $5070;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5071 = self.idx;
                                        var $5072 = self.code;
                                        var $5073 = self.val;
                                        var $5074 = Parser$Reply$value$($5071, $5072, Kind$Term$ori$($5073, Kind$Term$nat$($5065)));
                                        var $5066 = $5074;
                                        break;
                                };
                                var $5058 = $5066;
                                break;
                        };
                        var $5051 = $5058;
                        break;
                };
                var $5043 = $5051;
                break;
        };
        return $5043;
    };
    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);

    function Kind$Parser$machine_integer$unsigned$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $5075 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $5077 = self.idx;
                    var $5078 = self.code;
                    var $5079 = self.err;
                    var $5080 = Parser$Reply$error$($5077, $5078, $5079);
                    var $5076 = $5080;
                    break;
                case 'Parser.Reply.value':
                    var $5081 = self.idx;
                    var $5082 = self.code;
                    var $5083 = self.val;
                    var self = Kind$Parser$spaces($5081)($5082);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $5085 = self.idx;
                            var $5086 = self.code;
                            var $5087 = self.err;
                            var $5088 = Parser$Reply$error$($5085, $5086, $5087);
                            var $5084 = $5088;
                            break;
                        case 'Parser.Reply.value':
                            var $5089 = self.idx;
                            var $5090 = self.code;
                            var self = Kind$Parser$nat$($5089, $5090);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $5092 = self.idx;
                                    var $5093 = self.code;
                                    var $5094 = self.err;
                                    var $5095 = Parser$Reply$error$($5092, $5093, $5094);
                                    var $5091 = $5095;
                                    break;
                                case 'Parser.Reply.value':
                                    var $5096 = self.idx;
                                    var $5097 = self.code;
                                    var $5098 = self.val;
                                    var self = Parser$text$(("#" + Nat$show$(_size$1)), $5096, $5097);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $5100 = self.idx;
                                            var $5101 = self.code;
                                            var $5102 = self.err;
                                            var $5103 = Parser$Reply$error$($5100, $5101, $5102);
                                            var $5099 = $5103;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $5104 = self.idx;
                                            var $5105 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Nat.to_u" + Nat$show$(_size$1)));
                                            var _term$18 = Kind$Term$app$(_term$17, $5098);
                                            var self = Kind$Parser$stop$($5083, $5104, $5105);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $5107 = self.idx;
                                                    var $5108 = self.code;
                                                    var $5109 = self.err;
                                                    var $5110 = Parser$Reply$error$($5107, $5108, $5109);
                                                    var $5106 = $5110;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $5111 = self.idx;
                                                    var $5112 = self.code;
                                                    var $5113 = self.val;
                                                    var $5114 = Parser$Reply$value$($5111, $5112, Kind$Term$ori$($5113, _term$18));
                                                    var $5106 = $5114;
                                                    break;
                                            };
                                            var $5099 = $5106;
                                            break;
                                    };
                                    var $5091 = $5099;
                                    break;
                            };
                            var $5084 = $5091;
                            break;
                    };
                    var $5076 = $5084;
                    break;
            };
            return $5076;
        });
        return $5075;
    };
    const Kind$Parser$machine_integer$unsigned = x0 => Kind$Parser$machine_integer$unsigned$(x0);

    function Kind$Parser$u64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5116 = self.idx;
                var $5117 = self.code;
                var $5118 = self.err;
                var $5119 = Parser$Reply$error$($5116, $5117, $5118);
                var $5115 = $5119;
                break;
            case 'Parser.Reply.value':
                var $5120 = self.idx;
                var $5121 = self.code;
                var $5122 = self.val;
                var self = Kind$Parser$spaces($5120)($5121);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5124 = self.idx;
                        var $5125 = self.code;
                        var $5126 = self.err;
                        var $5127 = Parser$Reply$error$($5124, $5125, $5126);
                        var $5123 = $5127;
                        break;
                    case 'Parser.Reply.value':
                        var $5128 = self.idx;
                        var $5129 = self.code;
                        var self = Parser$nat$($5128, $5129);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5131 = self.idx;
                                var $5132 = self.code;
                                var $5133 = self.err;
                                var $5134 = Parser$Reply$error$($5131, $5132, $5133);
                                var $5130 = $5134;
                                break;
                            case 'Parser.Reply.value':
                                var $5135 = self.idx;
                                var $5136 = self.code;
                                var $5137 = self.val;
                                var self = Parser$text$("l", $5135, $5136);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5139 = self.idx;
                                        var $5140 = self.code;
                                        var $5141 = self.err;
                                        var $5142 = Parser$Reply$error$($5139, $5140, $5141);
                                        var $5138 = $5142;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5143 = self.idx;
                                        var $5144 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u64");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($5137));
                                        var self = Kind$Parser$stop$($5122, $5143, $5144);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5146 = self.idx;
                                                var $5147 = self.code;
                                                var $5148 = self.err;
                                                var $5149 = Parser$Reply$error$($5146, $5147, $5148);
                                                var $5145 = $5149;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5150 = self.idx;
                                                var $5151 = self.code;
                                                var $5152 = self.val;
                                                var $5153 = Parser$Reply$value$($5150, $5151, Kind$Term$ori$($5152, _term$16));
                                                var $5145 = $5153;
                                                break;
                                        };
                                        var $5138 = $5145;
                                        break;
                                };
                                var $5130 = $5138;
                                break;
                        };
                        var $5123 = $5130;
                        break;
                };
                var $5115 = $5123;
                break;
        };
        return $5115;
    };
    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);

    function Kind$Parser$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5155 = self.idx;
                var $5156 = self.code;
                var $5157 = self.err;
                var $5158 = Parser$Reply$error$($5155, $5156, $5157);
                var $5154 = $5158;
                break;
            case 'Parser.Reply.value':
                var $5159 = self.idx;
                var $5160 = self.code;
                var $5161 = self.val;
                var self = Kind$Parser$spaces($5159)($5160);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5163 = self.idx;
                        var $5164 = self.code;
                        var $5165 = self.err;
                        var $5166 = Parser$Reply$error$($5163, $5164, $5165);
                        var $5162 = $5166;
                        break;
                    case 'Parser.Reply.value':
                        var $5167 = self.idx;
                        var $5168 = self.code;
                        var self = Parser$nat$($5167, $5168);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5170 = self.idx;
                                var $5171 = self.code;
                                var $5172 = self.err;
                                var $5173 = Parser$Reply$error$($5170, $5171, $5172);
                                var $5169 = $5173;
                                break;
                            case 'Parser.Reply.value':
                                var $5174 = self.idx;
                                var $5175 = self.code;
                                var $5176 = self.val;
                                var self = Parser$text$("u", $5174, $5175);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5178 = self.idx;
                                        var $5179 = self.code;
                                        var $5180 = self.err;
                                        var $5181 = Parser$Reply$error$($5178, $5179, $5180);
                                        var $5177 = $5181;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5182 = self.idx;
                                        var $5183 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u32");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($5176));
                                        var self = Kind$Parser$stop$($5161, $5182, $5183);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5185 = self.idx;
                                                var $5186 = self.code;
                                                var $5187 = self.err;
                                                var $5188 = Parser$Reply$error$($5185, $5186, $5187);
                                                var $5184 = $5188;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5189 = self.idx;
                                                var $5190 = self.code;
                                                var $5191 = self.val;
                                                var $5192 = Parser$Reply$value$($5189, $5190, Kind$Term$ori$($5191, _term$16));
                                                var $5184 = $5192;
                                                break;
                                        };
                                        var $5177 = $5184;
                                        break;
                                };
                                var $5169 = $5177;
                                break;
                        };
                        var $5162 = $5169;
                        break;
                };
                var $5154 = $5162;
                break;
        };
        return $5154;
    };
    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);

    function Kind$Parser$u16$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5194 = self.idx;
                var $5195 = self.code;
                var $5196 = self.err;
                var $5197 = Parser$Reply$error$($5194, $5195, $5196);
                var $5193 = $5197;
                break;
            case 'Parser.Reply.value':
                var $5198 = self.idx;
                var $5199 = self.code;
                var $5200 = self.val;
                var self = Kind$Parser$spaces($5198)($5199);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5202 = self.idx;
                        var $5203 = self.code;
                        var $5204 = self.err;
                        var $5205 = Parser$Reply$error$($5202, $5203, $5204);
                        var $5201 = $5205;
                        break;
                    case 'Parser.Reply.value':
                        var $5206 = self.idx;
                        var $5207 = self.code;
                        var self = Parser$nat$($5206, $5207);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5209 = self.idx;
                                var $5210 = self.code;
                                var $5211 = self.err;
                                var $5212 = Parser$Reply$error$($5209, $5210, $5211);
                                var $5208 = $5212;
                                break;
                            case 'Parser.Reply.value':
                                var $5213 = self.idx;
                                var $5214 = self.code;
                                var $5215 = self.val;
                                var self = Parser$text$("s", $5213, $5214);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5217 = self.idx;
                                        var $5218 = self.code;
                                        var $5219 = self.err;
                                        var $5220 = Parser$Reply$error$($5217, $5218, $5219);
                                        var $5216 = $5220;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5221 = self.idx;
                                        var $5222 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u16");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($5215));
                                        var self = Kind$Parser$stop$($5200, $5221, $5222);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5224 = self.idx;
                                                var $5225 = self.code;
                                                var $5226 = self.err;
                                                var $5227 = Parser$Reply$error$($5224, $5225, $5226);
                                                var $5223 = $5227;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5228 = self.idx;
                                                var $5229 = self.code;
                                                var $5230 = self.val;
                                                var $5231 = Parser$Reply$value$($5228, $5229, Kind$Term$ori$($5230, _term$16));
                                                var $5223 = $5231;
                                                break;
                                        };
                                        var $5216 = $5223;
                                        break;
                                };
                                var $5208 = $5216;
                                break;
                        };
                        var $5201 = $5208;
                        break;
                };
                var $5193 = $5201;
                break;
        };
        return $5193;
    };
    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);

    function Kind$Parser$u8$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5233 = self.idx;
                var $5234 = self.code;
                var $5235 = self.err;
                var $5236 = Parser$Reply$error$($5233, $5234, $5235);
                var $5232 = $5236;
                break;
            case 'Parser.Reply.value':
                var $5237 = self.idx;
                var $5238 = self.code;
                var $5239 = self.val;
                var self = Kind$Parser$spaces($5237)($5238);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5241 = self.idx;
                        var $5242 = self.code;
                        var $5243 = self.err;
                        var $5244 = Parser$Reply$error$($5241, $5242, $5243);
                        var $5240 = $5244;
                        break;
                    case 'Parser.Reply.value':
                        var $5245 = self.idx;
                        var $5246 = self.code;
                        var self = Parser$nat$($5245, $5246);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5248 = self.idx;
                                var $5249 = self.code;
                                var $5250 = self.err;
                                var $5251 = Parser$Reply$error$($5248, $5249, $5250);
                                var $5247 = $5251;
                                break;
                            case 'Parser.Reply.value':
                                var $5252 = self.idx;
                                var $5253 = self.code;
                                var $5254 = self.val;
                                var self = Parser$text$("b", $5252, $5253);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5256 = self.idx;
                                        var $5257 = self.code;
                                        var $5258 = self.err;
                                        var $5259 = Parser$Reply$error$($5256, $5257, $5258);
                                        var $5255 = $5259;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5260 = self.idx;
                                        var $5261 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u8");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($5254));
                                        var self = Kind$Parser$stop$($5239, $5260, $5261);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5263 = self.idx;
                                                var $5264 = self.code;
                                                var $5265 = self.err;
                                                var $5266 = Parser$Reply$error$($5263, $5264, $5265);
                                                var $5262 = $5266;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5267 = self.idx;
                                                var $5268 = self.code;
                                                var $5269 = self.val;
                                                var $5270 = Parser$Reply$value$($5267, $5268, Kind$Term$ori$($5269, _term$16));
                                                var $5262 = $5270;
                                                break;
                                        };
                                        var $5255 = $5262;
                                        break;
                                };
                                var $5247 = $5255;
                                break;
                        };
                        var $5240 = $5247;
                        break;
                };
                var $5232 = $5240;
                break;
        };
        return $5232;
    };
    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);

    function Kind$Parser$reference$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5272 = self.idx;
                var $5273 = self.code;
                var $5274 = self.err;
                var $5275 = Parser$Reply$error$($5272, $5273, $5274);
                var $5271 = $5275;
                break;
            case 'Parser.Reply.value':
                var $5276 = self.idx;
                var $5277 = self.code;
                var $5278 = self.val;
                var self = Kind$Parser$name1$($5276, $5277);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5280 = self.idx;
                        var $5281 = self.code;
                        var $5282 = self.err;
                        var $5283 = Parser$Reply$error$($5280, $5281, $5282);
                        var $5279 = $5283;
                        break;
                    case 'Parser.Reply.value':
                        var $5284 = self.idx;
                        var $5285 = self.code;
                        var $5286 = self.val;
                        var self = Kind$Parser$stop$($5278, $5284, $5285);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5288 = self.idx;
                                var $5289 = self.code;
                                var $5290 = self.err;
                                var $5291 = Parser$Reply$error$($5288, $5289, $5290);
                                var $5287 = $5291;
                                break;
                            case 'Parser.Reply.value':
                                var $5292 = self.idx;
                                var $5293 = self.code;
                                var $5294 = self.val;
                                var self = ($5286 === "case");
                                if (self) {
                                    var $5296 = Parser$fail("Reserved keyword.");
                                    var $5295 = $5296;
                                } else {
                                    var self = ($5286 === "do");
                                    if (self) {
                                        var $5298 = Parser$fail("Reserved keyword.");
                                        var $5297 = $5298;
                                    } else {
                                        var self = ($5286 === "if");
                                        if (self) {
                                            var $5300 = Parser$fail("Reserved keyword.");
                                            var $5299 = $5300;
                                        } else {
                                            var self = ($5286 === "with");
                                            if (self) {
                                                var $5302 = Parser$fail("Reserved keyword.");
                                                var $5301 = $5302;
                                            } else {
                                                var self = ($5286 === "let");
                                                if (self) {
                                                    var $5304 = Parser$fail("Reserved keyword.");
                                                    var $5303 = $5304;
                                                } else {
                                                    var self = ($5286 === "def");
                                                    if (self) {
                                                        var $5306 = Parser$fail("Reserved keyword.");
                                                        var $5305 = $5306;
                                                    } else {
                                                        var self = ($5286 === "Type");
                                                        if (self) {
                                                            var $5308 = (_idx$12 => _code$13 => {
                                                                var $5309 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5294, Kind$Term$typ));
                                                                return $5309;
                                                            });
                                                            var $5307 = $5308;
                                                        } else {
                                                            var self = ($5286 === "true");
                                                            if (self) {
                                                                var $5311 = (_idx$12 => _code$13 => {
                                                                    var $5312 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5294, Kind$Term$ref$("Bool.true")));
                                                                    return $5312;
                                                                });
                                                                var $5310 = $5311;
                                                            } else {
                                                                var self = ($5286 === "false");
                                                                if (self) {
                                                                    var $5314 = (_idx$12 => _code$13 => {
                                                                        var $5315 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5294, Kind$Term$ref$("Bool.false")));
                                                                        return $5315;
                                                                    });
                                                                    var $5313 = $5314;
                                                                } else {
                                                                    var self = ($5286 === "unit");
                                                                    if (self) {
                                                                        var $5317 = (_idx$12 => _code$13 => {
                                                                            var $5318 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5294, Kind$Term$ref$("Unit.new")));
                                                                            return $5318;
                                                                        });
                                                                        var $5316 = $5317;
                                                                    } else {
                                                                        var self = ($5286 === "none");
                                                                        if (self) {
                                                                            var _term$12 = Kind$Term$ref$("Maybe.none");
                                                                            var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                            var $5320 = (_idx$14 => _code$15 => {
                                                                                var $5321 = Parser$Reply$value$(_idx$14, _code$15, Kind$Term$ori$($5294, _term$13));
                                                                                return $5321;
                                                                            });
                                                                            var $5319 = $5320;
                                                                        } else {
                                                                            var self = ($5286 === "refl");
                                                                            if (self) {
                                                                                var _term$12 = Kind$Term$ref$("Equal.refl");
                                                                                var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                                var _term$14 = Kind$Term$app$(_term$13, Kind$Term$hol$(Bits$e));
                                                                                var $5323 = (_idx$15 => _code$16 => {
                                                                                    var $5324 = Parser$Reply$value$(_idx$15, _code$16, Kind$Term$ori$($5294, _term$14));
                                                                                    return $5324;
                                                                                });
                                                                                var $5322 = $5323;
                                                                            } else {
                                                                                var $5325 = (_idx$12 => _code$13 => {
                                                                                    var $5326 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5294, Kind$Term$ref$($5286)));
                                                                                    return $5326;
                                                                                });
                                                                                var $5322 = $5325;
                                                                            };
                                                                            var $5319 = $5322;
                                                                        };
                                                                        var $5316 = $5319;
                                                                    };
                                                                    var $5313 = $5316;
                                                                };
                                                                var $5310 = $5313;
                                                            };
                                                            var $5307 = $5310;
                                                        };
                                                        var $5305 = $5307;
                                                    };
                                                    var $5303 = $5305;
                                                };
                                                var $5301 = $5303;
                                            };
                                            var $5299 = $5301;
                                        };
                                        var $5297 = $5299;
                                    };
                                    var $5295 = $5297;
                                };
                                var $5295 = $5295($5292)($5293);
                                var $5287 = $5295;
                                break;
                        };
                        var $5279 = $5287;
                        break;
                };
                var $5271 = $5279;
                break;
        };
        return $5271;
    };
    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5328 = self.idx;
                var $5329 = self.code;
                var $5330 = self.err;
                var $5331 = Parser$Reply$error$($5328, $5329, $5330);
                var $5327 = $5331;
                break;
            case 'Parser.Reply.value':
                var $5332 = self.idx;
                var $5333 = self.code;
                var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term), $5332, $5333);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5335 = self.idx;
                        var $5336 = self.code;
                        var $5337 = self.err;
                        var $5338 = Parser$Reply$error$($5335, $5336, $5337);
                        var $5334 = $5338;
                        break;
                    case 'Parser.Reply.value':
                        var $5339 = self.idx;
                        var $5340 = self.code;
                        var $5341 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5339, $5340);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5343 = self.idx;
                                var $5344 = self.code;
                                var $5345 = self.err;
                                var $5346 = Parser$Reply$error$($5343, $5344, $5345);
                                var $5342 = $5346;
                                break;
                            case 'Parser.Reply.value':
                                var $5347 = self.idx;
                                var $5348 = self.code;
                                var $5349 = self.val;
                                var _expr$14 = (() => {
                                    var $5352 = _func$2;
                                    var $5353 = $5341;
                                    let _f$15 = $5352;
                                    let _x$14;
                                    while ($5353._ === 'List.cons') {
                                        _x$14 = $5353.head;
                                        var $5352 = Kind$Term$app$(_f$15, _x$14);
                                        _f$15 = $5352;
                                        $5353 = $5353.tail;
                                    }
                                    return _f$15;
                                })();
                                var $5350 = Parser$Reply$value$($5347, $5348, Kind$Term$ori$($5349, _expr$14));
                                var $5342 = $5350;
                                break;
                        };
                        var $5334 = $5342;
                        break;
                };
                var $5327 = $5334;
                break;
        };
        return $5327;
    };
    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5355 = self.idx;
                var $5356 = self.code;
                var $5357 = self.err;
                var $5358 = Parser$Reply$error$($5355, $5356, $5357);
                var $5354 = $5358;
                break;
            case 'Parser.Reply.value':
                var $5359 = self.idx;
                var $5360 = self.code;
                var $5361 = Parser$text$(_text$1, $5359, $5360);
                var $5354 = $5361;
                break;
        };
        return $5354;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5363 = self.idx;
                var $5364 = self.code;
                var $5365 = self.err;
                var $5366 = Parser$Reply$error$($5363, $5364, $5365);
                var $5362 = $5366;
                break;
            case 'Parser.Reply.value':
                var $5367 = self.idx;
                var $5368 = self.code;
                var $5369 = self.val;
                var self = Parser$text$("<", $5367, $5368);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5371 = self.idx;
                        var $5372 = self.code;
                        var $5373 = self.err;
                        var $5374 = Parser$Reply$error$($5371, $5372, $5373);
                        var $5370 = $5374;
                        break;
                    case 'Parser.Reply.value':
                        var $5375 = self.idx;
                        var $5376 = self.code;
                        var self = Parser$until1$(Parser$spaces_text(">"), Kind$Parser$item(Kind$Parser$term), $5375, $5376);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5378 = self.idx;
                                var $5379 = self.code;
                                var $5380 = self.err;
                                var $5381 = Parser$Reply$error$($5378, $5379, $5380);
                                var $5377 = $5381;
                                break;
                            case 'Parser.Reply.value':
                                var $5382 = self.idx;
                                var $5383 = self.code;
                                var $5384 = self.val;
                                var self = Kind$Parser$stop$($5369, $5382, $5383);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5386 = self.idx;
                                        var $5387 = self.code;
                                        var $5388 = self.err;
                                        var $5389 = Parser$Reply$error$($5386, $5387, $5388);
                                        var $5385 = $5389;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5390 = self.idx;
                                        var $5391 = self.code;
                                        var $5392 = self.val;
                                        var _expr$17 = (() => {
                                            var $5395 = _func$2;
                                            var $5396 = $5384;
                                            let _f$18 = $5395;
                                            let _x$17;
                                            while ($5396._ === 'List.cons') {
                                                _x$17 = $5396.head;
                                                var $5395 = Kind$Term$app$(_f$18, _x$17);
                                                _f$18 = $5395;
                                                $5396 = $5396.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $5393 = Parser$Reply$value$($5390, $5391, Kind$Term$ori$($5392, _expr$17));
                                        var $5385 = $5393;
                                        break;
                                };
                                var $5377 = $5385;
                                break;
                        };
                        var $5370 = $5377;
                        break;
                };
                var $5362 = $5370;
                break;
        };
        return $5362;
    };
    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);

    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5398 = self.idx;
                var $5399 = self.code;
                var $5400 = self.err;
                var $5401 = Parser$Reply$error$($5398, $5399, $5400);
                var $5397 = $5401;
                break;
            case 'Parser.Reply.value':
                var $5402 = self.idx;
                var $5403 = self.code;
                var self = Kind$Parser$term$($5402, $5403);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5405 = self.idx;
                        var $5406 = self.code;
                        var $5407 = self.err;
                        var $5408 = Parser$Reply$error$($5405, $5406, $5407);
                        var $5404 = $5408;
                        break;
                    case 'Parser.Reply.value':
                        var $5409 = self.idx;
                        var $5410 = self.code;
                        var $5411 = self.val;
                        var self = Kind$Parser$text$("]", $5409, $5410);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5413 = self.idx;
                                var $5414 = self.code;
                                var $5415 = self.err;
                                var $5416 = Parser$Reply$error$($5413, $5414, $5415);
                                var $5412 = $5416;
                                break;
                            case 'Parser.Reply.value':
                                var $5417 = self.idx;
                                var $5418 = self.code;
                                var self = Kind$Parser$text$("<-", $5417, $5418);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5420 = self.idx;
                                        var $5421 = self.code;
                                        var $5422 = self.err;
                                        var $5423 = Parser$Reply$error$($5420, $5421, $5422);
                                        var $5419 = $5423;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5424 = self.idx;
                                        var $5425 = self.code;
                                        var self = Kind$Parser$term$($5424, $5425);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5427 = self.idx;
                                                var $5428 = self.code;
                                                var $5429 = self.err;
                                                var $5430 = Parser$Reply$error$($5427, $5428, $5429);
                                                var $5426 = $5430;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5431 = self.idx;
                                                var $5432 = self.code;
                                                var $5433 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5431, $5432);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5435 = self.idx;
                                                        var $5436 = self.code;
                                                        var $5437 = self.err;
                                                        var $5438 = Parser$Reply$error$($5435, $5436, $5437);
                                                        var $5434 = $5438;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5439 = self.idx;
                                                        var $5440 = self.code;
                                                        var $5441 = self.val;
                                                        var _term$23 = Kind$Term$ref$("List.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5411);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5433);
                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);
                                                        var $5442 = Parser$Reply$value$($5439, $5440, Kind$Term$ori$($5441, _term$27));
                                                        var $5434 = $5442;
                                                        break;
                                                };
                                                var $5426 = $5434;
                                                break;
                                        };
                                        var $5419 = $5426;
                                        break;
                                };
                                var $5412 = $5419;
                                break;
                        };
                        var $5404 = $5412;
                        break;
                };
                var $5397 = $5404;
                break;
        };
        return $5397;
    };
    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);

    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5444 = self.idx;
                var $5445 = self.code;
                var $5446 = self.err;
                var $5447 = Parser$Reply$error$($5444, $5445, $5446);
                var $5443 = $5447;
                break;
            case 'Parser.Reply.value':
                var $5448 = self.idx;
                var $5449 = self.code;
                var self = Kind$Parser$term$($5448, $5449);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5451 = self.idx;
                        var $5452 = self.code;
                        var $5453 = self.err;
                        var $5454 = Parser$Reply$error$($5451, $5452, $5453);
                        var $5450 = $5454;
                        break;
                    case 'Parser.Reply.value':
                        var $5455 = self.idx;
                        var $5456 = self.code;
                        var $5457 = self.val;
                        var self = Kind$Parser$text$("]", $5455, $5456);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5459 = self.idx;
                                var $5460 = self.code;
                                var $5461 = self.err;
                                var $5462 = Parser$Reply$error$($5459, $5460, $5461);
                                var $5458 = $5462;
                                break;
                            case 'Parser.Reply.value':
                                var $5463 = self.idx;
                                var $5464 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5463, $5464);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5466 = self.idx;
                                        var $5467 = self.code;
                                        var $5468 = self.err;
                                        var $5469 = Parser$Reply$error$($5466, $5467, $5468);
                                        var $5465 = $5469;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5470 = self.idx;
                                        var $5471 = self.code;
                                        var $5472 = self.val;
                                        var _term$17 = Kind$Term$ref$("List.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5457);
                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);
                                        var $5473 = Parser$Reply$value$($5470, $5471, Kind$Term$ori$($5472, _term$20));
                                        var $5465 = $5473;
                                        break;
                                };
                                var $5458 = $5465;
                                break;
                        };
                        var $5450 = $5458;
                        break;
                };
                var $5443 = $5450;
                break;
        };
        return $5443;
    };
    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);

    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5475 = self.idx;
                var $5476 = self.code;
                var $5477 = self.err;
                var $5478 = Parser$Reply$error$($5475, $5476, $5477);
                var $5474 = $5478;
                break;
            case 'Parser.Reply.value':
                var $5479 = self.idx;
                var $5480 = self.code;
                var self = Kind$Parser$term$($5479, $5480);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5482 = self.idx;
                        var $5483 = self.code;
                        var $5484 = self.err;
                        var $5485 = Parser$Reply$error$($5482, $5483, $5484);
                        var $5481 = $5485;
                        break;
                    case 'Parser.Reply.value':
                        var $5486 = self.idx;
                        var $5487 = self.code;
                        var $5488 = self.val;
                        var self = Kind$Parser$text$("}", $5486, $5487);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5490 = self.idx;
                                var $5491 = self.code;
                                var $5492 = self.err;
                                var $5493 = Parser$Reply$error$($5490, $5491, $5492);
                                var $5489 = $5493;
                                break;
                            case 'Parser.Reply.value':
                                var $5494 = self.idx;
                                var $5495 = self.code;
                                var self = Kind$Parser$text$("<-", $5494, $5495);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5497 = self.idx;
                                        var $5498 = self.code;
                                        var $5499 = self.err;
                                        var $5500 = Parser$Reply$error$($5497, $5498, $5499);
                                        var $5496 = $5500;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5501 = self.idx;
                                        var $5502 = self.code;
                                        var self = Kind$Parser$term$($5501, $5502);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5504 = self.idx;
                                                var $5505 = self.code;
                                                var $5506 = self.err;
                                                var $5507 = Parser$Reply$error$($5504, $5505, $5506);
                                                var $5503 = $5507;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5508 = self.idx;
                                                var $5509 = self.code;
                                                var $5510 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5508, $5509);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5512 = self.idx;
                                                        var $5513 = self.code;
                                                        var $5514 = self.err;
                                                        var $5515 = Parser$Reply$error$($5512, $5513, $5514);
                                                        var $5511 = $5515;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5516 = self.idx;
                                                        var $5517 = self.code;
                                                        var $5518 = self.val;
                                                        var _term$23 = Kind$Term$ref$("Map.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5488);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5510);
                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);
                                                        var $5519 = Parser$Reply$value$($5516, $5517, Kind$Term$ori$($5518, _term$27));
                                                        var $5511 = $5519;
                                                        break;
                                                };
                                                var $5503 = $5511;
                                                break;
                                        };
                                        var $5496 = $5503;
                                        break;
                                };
                                var $5489 = $5496;
                                break;
                        };
                        var $5481 = $5489;
                        break;
                };
                var $5474 = $5481;
                break;
        };
        return $5474;
    };
    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);

    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5521 = self.idx;
                var $5522 = self.code;
                var $5523 = self.err;
                var $5524 = Parser$Reply$error$($5521, $5522, $5523);
                var $5520 = $5524;
                break;
            case 'Parser.Reply.value':
                var $5525 = self.idx;
                var $5526 = self.code;
                var self = Kind$Parser$term$($5525, $5526);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5528 = self.idx;
                        var $5529 = self.code;
                        var $5530 = self.err;
                        var $5531 = Parser$Reply$error$($5528, $5529, $5530);
                        var $5527 = $5531;
                        break;
                    case 'Parser.Reply.value':
                        var $5532 = self.idx;
                        var $5533 = self.code;
                        var $5534 = self.val;
                        var self = Kind$Parser$text$("}", $5532, $5533);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5536 = self.idx;
                                var $5537 = self.code;
                                var $5538 = self.err;
                                var $5539 = Parser$Reply$error$($5536, $5537, $5538);
                                var $5535 = $5539;
                                break;
                            case 'Parser.Reply.value':
                                var $5540 = self.idx;
                                var $5541 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5540, $5541);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5543 = self.idx;
                                        var $5544 = self.code;
                                        var $5545 = self.err;
                                        var $5546 = Parser$Reply$error$($5543, $5544, $5545);
                                        var $5542 = $5546;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5547 = self.idx;
                                        var $5548 = self.code;
                                        var $5549 = self.val;
                                        var _term$17 = Kind$Term$ref$("Map.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5534);
                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);
                                        var $5550 = Parser$Reply$value$($5547, $5548, Kind$Term$ori$($5549, _term$20));
                                        var $5542 = $5550;
                                        break;
                                };
                                var $5535 = $5542;
                                break;
                        };
                        var $5527 = $5535;
                        break;
                };
                var $5520 = $5527;
                break;
        };
        return $5520;
    };
    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);

    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5552 = self.idx;
                var $5553 = self.code;
                var $5554 = self.err;
                var $5555 = Parser$Reply$error$($5552, $5553, $5554);
                var $5551 = $5555;
                break;
            case 'Parser.Reply.value':
                var $5556 = self.idx;
                var $5557 = self.code;
                var self = Kind$Parser$term$($5556, $5557);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5559 = self.idx;
                        var $5560 = self.code;
                        var $5561 = self.err;
                        var $5562 = Parser$Reply$error$($5559, $5560, $5561);
                        var $5558 = $5562;
                        break;
                    case 'Parser.Reply.value':
                        var $5563 = self.idx;
                        var $5564 = self.code;
                        var $5565 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5563, $5564);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5567 = self.idx;
                                var $5568 = self.code;
                                var $5569 = self.err;
                                var $5570 = Parser$Reply$error$($5567, $5568, $5569);
                                var $5566 = $5570;
                                break;
                            case 'Parser.Reply.value':
                                var $5571 = self.idx;
                                var $5572 = self.code;
                                var $5573 = self.val;
                                var $5574 = Parser$Reply$value$($5571, $5572, Kind$Term$ori$($5573, Kind$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $5575 = $5565;
                                    return $5575;
                                }))));
                                var $5566 = $5574;
                                break;
                        };
                        var $5558 = $5566;
                        break;
                };
                var $5551 = $5558;
                break;
        };
        return $5551;
    };
    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);

    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5577 = self.idx;
                var $5578 = self.code;
                var $5579 = self.err;
                var $5580 = Parser$Reply$error$($5577, $5578, $5579);
                var $5576 = $5580;
                break;
            case 'Parser.Reply.value':
                var $5581 = self.idx;
                var $5582 = self.code;
                var self = Parser$text$(" ", $5581, $5582);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5584 = self.idx;
                        var $5585 = self.code;
                        var $5586 = self.err;
                        var $5587 = Parser$Reply$error$($5584, $5585, $5586);
                        var $5583 = $5587;
                        break;
                    case 'Parser.Reply.value':
                        var $5588 = self.idx;
                        var $5589 = self.code;
                        var self = Kind$Parser$term$($5588, $5589);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5591 = self.idx;
                                var $5592 = self.code;
                                var $5593 = self.err;
                                var $5594 = Parser$Reply$error$($5591, $5592, $5593);
                                var $5590 = $5594;
                                break;
                            case 'Parser.Reply.value':
                                var $5595 = self.idx;
                                var $5596 = self.code;
                                var $5597 = self.val;
                                var self = Kind$Parser$stop$(_init$3, $5595, $5596);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5599 = self.idx;
                                        var $5600 = self.code;
                                        var $5601 = self.err;
                                        var $5602 = Parser$Reply$error$($5599, $5600, $5601);
                                        var $5598 = $5602;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5603 = self.idx;
                                        var $5604 = self.code;
                                        var $5605 = self.val;
                                        var _term$19 = Kind$Term$ref$(_ref$2);
                                        var _term$20 = Kind$Term$app$(_term$19, _val0$4);
                                        var _term$21 = Kind$Term$app$(_term$20, $5597);
                                        var $5606 = Parser$Reply$value$($5603, $5604, Kind$Term$ori$($5605, _term$21));
                                        var $5598 = $5606;
                                        break;
                                };
                                var $5590 = $5598;
                                break;
                        };
                        var $5583 = $5590;
                        break;
                };
                var $5576 = $5583;
                break;
        };
        return $5576;
    };
    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
    const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
    const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
    const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
    const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
    const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
    const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
    const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
    const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
    const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
    const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
    const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");

    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("<>", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5608 = self.idx;
                var $5609 = self.code;
                var $5610 = self.err;
                var $5611 = Parser$Reply$error$($5608, $5609, $5610);
                var $5607 = $5611;
                break;
            case 'Parser.Reply.value':
                var $5612 = self.idx;
                var $5613 = self.code;
                var self = Kind$Parser$term$($5612, $5613);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5615 = self.idx;
                        var $5616 = self.code;
                        var $5617 = self.err;
                        var $5618 = Parser$Reply$error$($5615, $5616, $5617);
                        var $5614 = $5618;
                        break;
                    case 'Parser.Reply.value':
                        var $5619 = self.idx;
                        var $5620 = self.code;
                        var $5621 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5619, $5620);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5623 = self.idx;
                                var $5624 = self.code;
                                var $5625 = self.err;
                                var $5626 = Parser$Reply$error$($5623, $5624, $5625);
                                var $5622 = $5626;
                                break;
                            case 'Parser.Reply.value':
                                var $5627 = self.idx;
                                var $5628 = self.code;
                                var $5629 = self.val;
                                var _term$14 = Kind$Term$ref$("Maybe.default");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5621);
                                var $5630 = Parser$Reply$value$($5627, $5628, Kind$Term$ori$($5629, _term$17));
                                var $5622 = $5630;
                                break;
                        };
                        var $5614 = $5622;
                        break;
                };
                var $5607 = $5614;
                break;
        };
        return $5607;
    };
    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);

    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5632 = self.idx;
                var $5633 = self.code;
                var $5634 = self.err;
                var $5635 = Parser$Reply$error$($5632, $5633, $5634);
                var $5631 = $5635;
                break;
            case 'Parser.Reply.value':
                var $5636 = self.idx;
                var $5637 = self.code;
                var self = Kind$Parser$term$($5636, $5637);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5639 = self.idx;
                        var $5640 = self.code;
                        var $5641 = self.err;
                        var $5642 = Parser$Reply$error$($5639, $5640, $5641);
                        var $5638 = $5642;
                        break;
                    case 'Parser.Reply.value':
                        var $5643 = self.idx;
                        var $5644 = self.code;
                        var $5645 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5643, $5644);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5647 = self.idx;
                                var $5648 = self.code;
                                var $5649 = self.err;
                                var $5650 = Parser$Reply$error$($5647, $5648, $5649);
                                var $5646 = $5650;
                                break;
                            case 'Parser.Reply.value':
                                var $5651 = self.idx;
                                var $5652 = self.code;
                                var _term$14 = Kind$Term$ref$("List.cons");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _head$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5645);
                                var self = Kind$Parser$stop$(_init$1, $5651, $5652);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5654 = self.idx;
                                        var $5655 = self.code;
                                        var $5656 = self.err;
                                        var $5657 = Parser$Reply$error$($5654, $5655, $5656);
                                        var $5653 = $5657;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5658 = self.idx;
                                        var $5659 = self.code;
                                        var $5660 = self.val;
                                        var $5661 = Parser$Reply$value$($5658, $5659, Kind$Term$ori$($5660, _term$17));
                                        var $5653 = $5661;
                                        break;
                                };
                                var $5646 = $5653;
                                break;
                        };
                        var $5638 = $5646;
                        break;
                };
                var $5631 = $5638;
                break;
        };
        return $5631;
    };
    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);

    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5663 = self.idx;
                var $5664 = self.code;
                var $5665 = self.err;
                var $5666 = Parser$Reply$error$($5663, $5664, $5665);
                var $5662 = $5666;
                break;
            case 'Parser.Reply.value':
                var $5667 = self.idx;
                var $5668 = self.code;
                var self = Kind$Parser$term$($5667, $5668);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5670 = self.idx;
                        var $5671 = self.code;
                        var $5672 = self.err;
                        var $5673 = Parser$Reply$error$($5670, $5671, $5672);
                        var $5669 = $5673;
                        break;
                    case 'Parser.Reply.value':
                        var $5674 = self.idx;
                        var $5675 = self.code;
                        var $5676 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5674, $5675);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5678 = self.idx;
                                var $5679 = self.code;
                                var $5680 = self.err;
                                var $5681 = Parser$Reply$error$($5678, $5679, $5680);
                                var $5677 = $5681;
                                break;
                            case 'Parser.Reply.value':
                                var $5682 = self.idx;
                                var $5683 = self.code;
                                var _term$14 = Kind$Term$ref$("List.concat");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5676);
                                var self = Kind$Parser$stop$(_init$1, $5682, $5683);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5685 = self.idx;
                                        var $5686 = self.code;
                                        var $5687 = self.err;
                                        var $5688 = Parser$Reply$error$($5685, $5686, $5687);
                                        var $5684 = $5688;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5689 = self.idx;
                                        var $5690 = self.code;
                                        var $5691 = self.val;
                                        var $5692 = Parser$Reply$value$($5689, $5690, Kind$Term$ori$($5691, _term$17));
                                        var $5684 = $5692;
                                        break;
                                };
                                var $5677 = $5684;
                                break;
                        };
                        var $5669 = $5677;
                        break;
                };
                var $5662 = $5669;
                break;
        };
        return $5662;
    };
    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);

    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5694 = self.idx;
                var $5695 = self.code;
                var $5696 = self.err;
                var $5697 = Parser$Reply$error$($5694, $5695, $5696);
                var $5693 = $5697;
                break;
            case 'Parser.Reply.value':
                var $5698 = self.idx;
                var $5699 = self.code;
                var self = Kind$Parser$term$($5698, $5699);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5701 = self.idx;
                        var $5702 = self.code;
                        var $5703 = self.err;
                        var $5704 = Parser$Reply$error$($5701, $5702, $5703);
                        var $5700 = $5704;
                        break;
                    case 'Parser.Reply.value':
                        var $5705 = self.idx;
                        var $5706 = self.code;
                        var $5707 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5705, $5706);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5709 = self.idx;
                                var $5710 = self.code;
                                var $5711 = self.err;
                                var $5712 = Parser$Reply$error$($5709, $5710, $5711);
                                var $5708 = $5712;
                                break;
                            case 'Parser.Reply.value':
                                var $5713 = self.idx;
                                var $5714 = self.code;
                                var _term$14 = Kind$Term$ref$("String.concat");
                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);
                                var _term$16 = Kind$Term$app$(_term$15, $5707);
                                var self = Kind$Parser$stop$(_init$1, $5713, $5714);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5716 = self.idx;
                                        var $5717 = self.code;
                                        var $5718 = self.err;
                                        var $5719 = Parser$Reply$error$($5716, $5717, $5718);
                                        var $5715 = $5719;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5720 = self.idx;
                                        var $5721 = self.code;
                                        var $5722 = self.val;
                                        var $5723 = Parser$Reply$value$($5720, $5721, Kind$Term$ori$($5722, _term$16));
                                        var $5715 = $5723;
                                        break;
                                };
                                var $5708 = $5715;
                                break;
                        };
                        var $5700 = $5708;
                        break;
                };
                var $5693 = $5700;
                break;
        };
        return $5693;
    };
    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);

    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5725 = self.idx;
                var $5726 = self.code;
                var $5727 = self.err;
                var $5728 = Parser$Reply$error$($5725, $5726, $5727);
                var $5724 = $5728;
                break;
            case 'Parser.Reply.value':
                var $5729 = self.idx;
                var $5730 = self.code;
                var self = Kind$Parser$term$($5729, $5730);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5732 = self.idx;
                        var $5733 = self.code;
                        var $5734 = self.err;
                        var $5735 = Parser$Reply$error$($5732, $5733, $5734);
                        var $5731 = $5735;
                        break;
                    case 'Parser.Reply.value':
                        var $5736 = self.idx;
                        var $5737 = self.code;
                        var $5738 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5736, $5737);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5740 = self.idx;
                                var $5741 = self.code;
                                var $5742 = self.err;
                                var $5743 = Parser$Reply$error$($5740, $5741, $5742);
                                var $5739 = $5743;
                                break;
                            case 'Parser.Reply.value':
                                var $5744 = self.idx;
                                var $5745 = self.code;
                                var $5746 = self.val;
                                var _term$14 = Kind$Term$ref$("Sigma.new");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);
                                var _term$18 = Kind$Term$app$(_term$17, $5738);
                                var $5747 = Parser$Reply$value$($5744, $5745, Kind$Term$ori$($5746, _term$18));
                                var $5739 = $5747;
                                break;
                        };
                        var $5731 = $5739;
                        break;
                };
                var $5724 = $5731;
                break;
        };
        return $5724;
    };
    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);

    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5749 = self.idx;
                var $5750 = self.code;
                var $5751 = self.err;
                var $5752 = Parser$Reply$error$($5749, $5750, $5751);
                var $5748 = $5752;
                break;
            case 'Parser.Reply.value':
                var $5753 = self.idx;
                var $5754 = self.code;
                var self = Kind$Parser$term$($5753, $5754);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5756 = self.idx;
                        var $5757 = self.code;
                        var $5758 = self.err;
                        var $5759 = Parser$Reply$error$($5756, $5757, $5758);
                        var $5755 = $5759;
                        break;
                    case 'Parser.Reply.value':
                        var $5760 = self.idx;
                        var $5761 = self.code;
                        var $5762 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5760, $5761);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5764 = self.idx;
                                var $5765 = self.code;
                                var $5766 = self.err;
                                var $5767 = Parser$Reply$error$($5764, $5765, $5766);
                                var $5763 = $5767;
                                break;
                            case 'Parser.Reply.value':
                                var $5768 = self.idx;
                                var $5769 = self.code;
                                var $5770 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5762);
                                var $5771 = Parser$Reply$value$($5768, $5769, Kind$Term$ori$($5770, _term$17));
                                var $5763 = $5771;
                                break;
                        };
                        var $5755 = $5763;
                        break;
                };
                var $5748 = $5755;
                break;
        };
        return $5748;
    };
    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);

    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5773 = self.idx;
                var $5774 = self.code;
                var $5775 = self.err;
                var $5776 = Parser$Reply$error$($5773, $5774, $5775);
                var $5772 = $5776;
                break;
            case 'Parser.Reply.value':
                var $5777 = self.idx;
                var $5778 = self.code;
                var self = Kind$Parser$term$($5777, $5778);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5780 = self.idx;
                        var $5781 = self.code;
                        var $5782 = self.err;
                        var $5783 = Parser$Reply$error$($5780, $5781, $5782);
                        var $5779 = $5783;
                        break;
                    case 'Parser.Reply.value':
                        var $5784 = self.idx;
                        var $5785 = self.code;
                        var $5786 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5784, $5785);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5788 = self.idx;
                                var $5789 = self.code;
                                var $5790 = self.err;
                                var $5791 = Parser$Reply$error$($5788, $5789, $5790);
                                var $5787 = $5791;
                                break;
                            case 'Parser.Reply.value':
                                var $5792 = self.idx;
                                var $5793 = self.code;
                                var $5794 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5786);
                                var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"), _term$17);
                                var $5795 = Parser$Reply$value$($5792, $5793, Kind$Term$ori$($5794, _term$18));
                                var $5787 = $5795;
                                break;
                        };
                        var $5779 = $5787;
                        break;
                };
                var $5772 = $5779;
                break;
        };
        return $5772;
    };
    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);

    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5797 = self.idx;
                var $5798 = self.code;
                var $5799 = self.err;
                var $5800 = Parser$Reply$error$($5797, $5798, $5799);
                var $5796 = $5800;
                break;
            case 'Parser.Reply.value':
                var $5801 = self.idx;
                var $5802 = self.code;
                var self = Kind$Parser$text$("rewrite", $5801, $5802);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5804 = self.idx;
                        var $5805 = self.code;
                        var $5806 = self.err;
                        var $5807 = Parser$Reply$error$($5804, $5805, $5806);
                        var $5803 = $5807;
                        break;
                    case 'Parser.Reply.value':
                        var $5808 = self.idx;
                        var $5809 = self.code;
                        var self = Kind$Parser$name1$($5808, $5809);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5811 = self.idx;
                                var $5812 = self.code;
                                var $5813 = self.err;
                                var $5814 = Parser$Reply$error$($5811, $5812, $5813);
                                var $5810 = $5814;
                                break;
                            case 'Parser.Reply.value':
                                var $5815 = self.idx;
                                var $5816 = self.code;
                                var $5817 = self.val;
                                var self = Kind$Parser$text$("in", $5815, $5816);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5819 = self.idx;
                                        var $5820 = self.code;
                                        var $5821 = self.err;
                                        var $5822 = Parser$Reply$error$($5819, $5820, $5821);
                                        var $5818 = $5822;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5823 = self.idx;
                                        var $5824 = self.code;
                                        var self = Kind$Parser$term$($5823, $5824);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5826 = self.idx;
                                                var $5827 = self.code;
                                                var $5828 = self.err;
                                                var $5829 = Parser$Reply$error$($5826, $5827, $5828);
                                                var $5825 = $5829;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5830 = self.idx;
                                                var $5831 = self.code;
                                                var $5832 = self.val;
                                                var self = Kind$Parser$text$("with", $5830, $5831);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5834 = self.idx;
                                                        var $5835 = self.code;
                                                        var $5836 = self.err;
                                                        var $5837 = Parser$Reply$error$($5834, $5835, $5836);
                                                        var $5833 = $5837;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5838 = self.idx;
                                                        var $5839 = self.code;
                                                        var self = Kind$Parser$term$($5838, $5839);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5841 = self.idx;
                                                                var $5842 = self.code;
                                                                var $5843 = self.err;
                                                                var $5844 = Parser$Reply$error$($5841, $5842, $5843);
                                                                var $5840 = $5844;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5845 = self.idx;
                                                                var $5846 = self.code;
                                                                var $5847 = self.val;
                                                                var self = Kind$Parser$stop$(_init$1, $5845, $5846);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $5849 = self.idx;
                                                                        var $5850 = self.code;
                                                                        var $5851 = self.err;
                                                                        var $5852 = Parser$Reply$error$($5849, $5850, $5851);
                                                                        var $5848 = $5852;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $5853 = self.idx;
                                                                        var $5854 = self.code;
                                                                        var $5855 = self.val;
                                                                        var _term$29 = Kind$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                        var _term$33 = Kind$Term$app$(_term$32, $5847);
                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($5817, (_x$34 => {
                                                                            var $5857 = $5832;
                                                                            return $5857;
                                                                        })));
                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);
                                                                        var $5856 = Parser$Reply$value$($5853, $5854, Kind$Term$ori$($5855, _term$35));
                                                                        var $5848 = $5856;
                                                                        break;
                                                                };
                                                                var $5840 = $5848;
                                                                break;
                                                        };
                                                        var $5833 = $5840;
                                                        break;
                                                };
                                                var $5825 = $5833;
                                                break;
                                        };
                                        var $5818 = $5825;
                                        break;
                                };
                                var $5810 = $5818;
                                break;
                        };
                        var $5803 = $5810;
                        break;
                };
                var $5796 = $5803;
                break;
        };
        return $5796;
    };
    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);

    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5859 = self.idx;
                var $5860 = self.code;
                var $5861 = self.err;
                var $5862 = Parser$Reply$error$($5859, $5860, $5861);
                var $5858 = $5862;
                break;
            case 'Parser.Reply.value':
                var $5863 = self.idx;
                var $5864 = self.code;
                var self = Kind$Parser$term$($5863, $5864);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5866 = self.idx;
                        var $5867 = self.code;
                        var $5868 = self.err;
                        var $5869 = Parser$Reply$error$($5866, $5867, $5868);
                        var $5865 = $5869;
                        break;
                    case 'Parser.Reply.value':
                        var $5870 = self.idx;
                        var $5871 = self.code;
                        var $5872 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5870, $5871);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5874 = self.idx;
                                var $5875 = self.code;
                                var $5876 = self.err;
                                var $5877 = Parser$Reply$error$($5874, $5875, $5876);
                                var $5873 = $5877;
                                break;
                            case 'Parser.Reply.value':
                                var $5878 = self.idx;
                                var $5879 = self.code;
                                var $5880 = self.val;
                                var $5881 = Parser$Reply$value$($5878, $5879, Kind$Term$ori$($5880, Kind$Term$ann$(Bool$false, _term$2, $5872)));
                                var $5873 = $5881;
                                break;
                        };
                        var $5865 = $5873;
                        break;
                };
                var $5858 = $5865;
                break;
        };
        return $5858;
    };
    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);

    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5883 = self.idx;
                var $5884 = self.code;
                var $5885 = self.err;
                var $5886 = Parser$Reply$error$($5883, $5884, $5885);
                var $5882 = $5886;
                break;
            case 'Parser.Reply.value':
                var $5887 = self.idx;
                var $5888 = self.code;
                var self = Kind$Parser$stop$(_init$1, $5887, $5888);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5890 = self.idx;
                        var $5891 = self.code;
                        var $5892 = self.err;
                        var $5893 = Parser$Reply$error$($5890, $5891, $5892);
                        var $5889 = $5893;
                        break;
                    case 'Parser.Reply.value':
                        var $5894 = self.idx;
                        var $5895 = self.code;
                        var $5896 = self.val;
                        var $5897 = Parser$Reply$value$($5894, $5895, Kind$Term$ori$($5896, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));
                        var $5889 = $5897;
                        break;
                };
                var $5882 = $5889;
                break;
        };
        return $5882;
    };
    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);

    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $5899 = self.idx;
                        var $5900 = self.code;
                        var $5901 = self.val;
                        var $5902 = Kind$Parser$suffix$(_init$1, $5901, $5899, $5900);
                        var $5898 = $5902;
                        break;
                    case 'Parser.Reply.error':
                        var $5903 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $5898 = $5903;
                        break;
                };
                return $5898;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);

    function Kind$Parser$term$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5905 = self.idx;
                var $5906 = self.code;
                var $5907 = self.err;
                var $5908 = Parser$Reply$error$($5905, $5906, $5907);
                var $5904 = $5908;
                break;
            case 'Parser.Reply.value':
                var $5909 = self.idx;
                var $5910 = self.code;
                var $5911 = self.val;
                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string(34), List$cons$(Kind$Parser$string(96), List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$not, List$cons$(Kind$Parser$left, List$cons$(Kind$Parser$right, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$float$64, List$cons$(Kind$Parser$float$32, List$cons$(Kind$Parser$machine_integer$signed$(256n), List$cons$(Kind$Parser$machine_integer$signed$(128n), List$cons$(Kind$Parser$machine_integer$signed$(64n), List$cons$(Kind$Parser$machine_integer$signed$(32n), List$cons$(Kind$Parser$machine_integer$signed$(16n), List$cons$(Kind$Parser$machine_integer$signed$(8n), List$cons$(Kind$Parser$int, List$cons$(Kind$Parser$machine_integer$unsigned$(256n), List$cons$(Kind$Parser$machine_integer$unsigned$(128n), List$cons$(Kind$Parser$machine_integer$unsigned$(64n), List$cons$(Kind$Parser$machine_integer$unsigned$(32n), List$cons$(Kind$Parser$machine_integer$unsigned$(16n), List$cons$(Kind$Parser$machine_integer$unsigned$(8n), List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))($5909)($5910);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5913 = self.idx;
                        var $5914 = self.code;
                        var $5915 = self.err;
                        var $5916 = Parser$Reply$error$($5913, $5914, $5915);
                        var $5912 = $5916;
                        break;
                    case 'Parser.Reply.value':
                        var $5917 = self.idx;
                        var $5918 = self.code;
                        var $5919 = self.val;
                        var $5920 = Kind$Parser$suffix$($5911, $5919, $5917, $5918);
                        var $5912 = $5920;
                        break;
                };
                var $5904 = $5912;
                break;
        };
        return $5904;
    };
    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);

    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {
        var self = Kind$Parser$name$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5922 = self.idx;
                var $5923 = self.code;
                var $5924 = self.err;
                var $5925 = Parser$Reply$error$($5922, $5923, $5924);
                var $5921 = $5925;
                break;
            case 'Parser.Reply.value':
                var $5926 = self.idx;
                var $5927 = self.code;
                var $5928 = self.val;
                var self = Kind$Parser$text$(_sep$1, $5926, $5927);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5930 = self.idx;
                        var $5931 = self.code;
                        var $5932 = self.err;
                        var $5933 = Parser$Reply$error$($5930, $5931, $5932);
                        var $5929 = $5933;
                        break;
                    case 'Parser.Reply.value':
                        var $5934 = self.idx;
                        var $5935 = self.code;
                        var self = Kind$Parser$term$($5934, $5935);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5937 = self.idx;
                                var $5938 = self.code;
                                var $5939 = self.err;
                                var $5940 = Parser$Reply$error$($5937, $5938, $5939);
                                var $5936 = $5940;
                                break;
                            case 'Parser.Reply.value':
                                var $5941 = self.idx;
                                var $5942 = self.code;
                                var $5943 = self.val;
                                var $5944 = Parser$Reply$value$($5941, $5942, Pair$new$($5928, $5943));
                                var $5936 = $5944;
                                break;
                        };
                        var $5929 = $5936;
                        break;
                };
                var $5921 = $5929;
                break;
        };
        return $5921;
    };
    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);

    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {
        var $5945 = ({
            _: 'Kind.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $5945;
    };
    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);

    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$((() => {
            var self = _eras$2;
            if (self) {
                var $5947 = "<";
                return $5947;
            } else {
                var $5948 = "(";
                return $5948;
            };
        })(), _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5949 = self.idx;
                var $5950 = self.code;
                var $5951 = self.err;
                var $5952 = Parser$Reply$error$($5949, $5950, $5951);
                var $5946 = $5952;
                break;
            case 'Parser.Reply.value':
                var $5953 = self.idx;
                var $5954 = self.code;
                var self = Parser$until1$(Kind$Parser$text((() => {
                    var self = _eras$2;
                    if (self) {
                        var $5956 = ">";
                        return $5956;
                    } else {
                        var $5957 = ")";
                        return $5957;
                    };
                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $5953, $5954);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5958 = self.idx;
                        var $5959 = self.code;
                        var $5960 = self.err;
                        var $5961 = Parser$Reply$error$($5958, $5959, $5960);
                        var $5955 = $5961;
                        break;
                    case 'Parser.Reply.value':
                        var $5962 = self.idx;
                        var $5963 = self.code;
                        var $5964 = self.val;
                        var $5965 = Parser$Reply$value$($5962, $5963, List$mapped$($5964, (_pair$11 => {
                            var self = _pair$11;
                            switch (self._) {
                                case 'Pair.new':
                                    var $5967 = self.fst;
                                    var $5968 = self.snd;
                                    var $5969 = Kind$Binder$new$(_eras$2, $5967, $5968);
                                    var $5966 = $5969;
                                    break;
                            };
                            return $5966;
                        })));
                        var $5955 = $5965;
                        break;
                };
                var $5946 = $5955;
                break;
        };
        return $5946;
    };
    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $5971 = self.head;
                var $5972 = self.tail;
                var $5973 = List$cons$($5971, List$concat$($5972, _bs$3));
                var $5970 = $5973;
                break;
            case 'List.nil':
                var $5974 = _bs$3;
                var $5970 = $5974;
                break;
        };
        return $5970;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $5976 = self.head;
                var $5977 = self.tail;
                var $5978 = List$concat$($5976, List$flatten$($5977));
                var $5975 = $5978;
                break;
            case 'List.nil':
                var $5979 = List$nil;
                var $5975 = $5979;
                break;
        };
        return $5975;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5981 = self.idx;
                var $5982 = self.code;
                var $5983 = self.err;
                var $5984 = Parser$Reply$error$($5981, $5982, $5983);
                var $5980 = $5984;
                break;
            case 'Parser.Reply.value':
                var $5985 = self.idx;
                var $5986 = self.code;
                var $5987 = self.val;
                var $5988 = Parser$Reply$value$($5985, $5986, List$flatten$($5987));
                var $5980 = $5988;
                break;
        };
        return $5980;
    };
    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);
    const List$length = a0 => (list_length(a0));

    function Kind$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.cons':
                var $5990 = self.head;
                var $5991 = self.tail;
                var self = $5990;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5993 = self.eras;
                        var $5994 = self.name;
                        var $5995 = self.term;
                        var $5996 = Kind$Term$all$($5993, "", $5994, $5995, (_s$8 => _x$9 => {
                            var $5997 = Kind$Parser$make_forall$($5991, _body$2);
                            return $5997;
                        }));
                        var $5992 = $5996;
                        break;
                };
                var $5989 = $5992;
                break;
            case 'List.nil':
                var $5998 = _body$2;
                var $5989 = $5998;
                break;
        };
        return $5989;
    };
    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $5999 = List$at$(_index$2, List$reverse$(_list$3));
        return $5999;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Kind$Term$var$(_name$1, _indx$2) {
        var $6000 = ({
            _: 'Kind.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $6000;
    };
    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);

    function Kind$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $6002 = Pair$new$("", 0n);
            var $6001 = $6002;
        } else {
            var $6003 = self.charCodeAt(0);
            var $6004 = self.slice(1);
            var _name_skips$4 = Kind$Context$get_name_skips$($6004);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $6006 = self.fst;
                    var $6007 = self.snd;
                    var self = ($6003 === 94);
                    if (self) {
                        var $6009 = Pair$new$($6006, Nat$succ$($6007));
                        var $6008 = $6009;
                    } else {
                        var $6010 = Pair$new$(String$cons$($6003, $6006), $6007);
                        var $6008 = $6010;
                    };
                    var $6005 = $6008;
                    break;
            };
            var $6001 = $6005;
        };
        return $6001;
    };
    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);

    function Kind$Name$eql$(_a$1, _b$2) {
        var $6011 = (_a$1 === _b$2);
        return $6011;
    };
    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);

    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.cons':
                        var $6012 = self.head;
                        var $6013 = self.tail;
                        var self = $6012;
                        switch (self._) {
                            case 'Pair.new':
                                var $6015 = self.fst;
                                var $6016 = self.snd;
                                var self = Kind$Name$eql$(_name$1, $6015);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $6019 = Maybe$some$($6016);
                                        var $6018 = $6019;
                                    } else {
                                        var $6020 = (self - 1n);
                                        var $6021 = Kind$Context$find$go$(_name$1, $6020, $6013);
                                        var $6018 = $6021;
                                    };
                                    var $6017 = $6018;
                                } else {
                                    var $6022 = Kind$Context$find$go$(_name$1, _skip$2, $6013);
                                    var $6017 = $6022;
                                };
                                var $6014 = $6017;
                                break;
                        };
                        return $6014;
                    case 'List.nil':
                        var $6023 = Maybe$none;
                        return $6023;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);

    function Kind$Context$find$(_name$1, _ctx$2) {
        var self = Kind$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $6025 = self.fst;
                var $6026 = self.snd;
                var $6027 = Kind$Context$find$go$($6025, $6026, _ctx$2);
                var $6024 = $6027;
                break;
        };
        return $6024;
    };
    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);

    function Kind$Path$o$(_path$1, _x$2) {
        var $6028 = _path$1((_x$2 + '0'));
        return $6028;
    };
    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);

    function Kind$Path$i$(_path$1, _x$2) {
        var $6029 = _path$1((_x$2 + '1'));
        return $6029;
    };
    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);

    function Kind$Path$to_bits$(_path$1) {
        var $6030 = _path$1(Bits$e);
        return $6030;
    };
    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);

    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Kind.Term.var':
                var $6032 = self.name;
                var $6033 = self.indx;
                var self = List$at_last$($6033, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $6035 = self.value;
                        var $6036 = Pair$snd$($6035);
                        var $6034 = $6036;
                        break;
                    case 'Maybe.none':
                        var $6037 = Kind$Term$var$($6032, $6033);
                        var $6034 = $6037;
                        break;
                };
                var $6031 = $6034;
                break;
            case 'Kind.Term.ref':
                var $6038 = self.name;
                var self = Kind$Context$find$($6038, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $6040 = self.value;
                        var $6041 = $6040;
                        var $6039 = $6041;
                        break;
                    case 'Maybe.none':
                        var $6042 = Kind$Term$ref$($6038);
                        var $6039 = $6042;
                        break;
                };
                var $6031 = $6039;
                break;
            case 'Kind.Term.all':
                var $6043 = self.eras;
                var $6044 = self.self;
                var $6045 = self.name;
                var $6046 = self.xtyp;
                var $6047 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $6048 = Kind$Term$all$($6043, $6044, $6045, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6046), (_s$10 => _x$11 => {
                    var $6049 = Kind$Term$bind$(List$cons$(Pair$new$($6045, _x$11), List$cons$(Pair$new$($6044, _s$10), _vars$1)), Kind$Path$i(_path$2), $6047(Kind$Term$var$($6044, _vlen$9))(Kind$Term$var$($6045, Nat$succ$(_vlen$9))));
                    return $6049;
                }));
                var $6031 = $6048;
                break;
            case 'Kind.Term.lam':
                var $6050 = self.name;
                var $6051 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $6052 = Kind$Term$lam$($6050, (_x$7 => {
                    var $6053 = Kind$Term$bind$(List$cons$(Pair$new$($6050, _x$7), _vars$1), Kind$Path$o(_path$2), $6051(Kind$Term$var$($6050, _vlen$6)));
                    return $6053;
                }));
                var $6031 = $6052;
                break;
            case 'Kind.Term.app':
                var $6054 = self.func;
                var $6055 = self.argm;
                var $6056 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6054), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $6055));
                var $6031 = $6056;
                break;
            case 'Kind.Term.let':
                var $6057 = self.name;
                var $6058 = self.expr;
                var $6059 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $6060 = Kind$Term$let$($6057, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6058), (_x$8 => {
                    var $6061 = Kind$Term$bind$(List$cons$(Pair$new$($6057, _x$8), _vars$1), Kind$Path$i(_path$2), $6059(Kind$Term$var$($6057, _vlen$7)));
                    return $6061;
                }));
                var $6031 = $6060;
                break;
            case 'Kind.Term.def':
                var $6062 = self.name;
                var $6063 = self.expr;
                var $6064 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $6065 = Kind$Term$def$($6062, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6063), (_x$8 => {
                    var $6066 = Kind$Term$bind$(List$cons$(Pair$new$($6062, _x$8), _vars$1), Kind$Path$i(_path$2), $6064(Kind$Term$var$($6062, _vlen$7)));
                    return $6066;
                }));
                var $6031 = $6065;
                break;
            case 'Kind.Term.ann':
                var $6067 = self.done;
                var $6068 = self.term;
                var $6069 = self.type;
                var $6070 = Kind$Term$ann$($6067, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6068), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $6069));
                var $6031 = $6070;
                break;
            case 'Kind.Term.gol':
                var $6071 = self.name;
                var $6072 = self.dref;
                var $6073 = self.verb;
                var $6074 = Kind$Term$gol$($6071, $6072, $6073);
                var $6031 = $6074;
                break;
            case 'Kind.Term.nat':
                var $6075 = self.natx;
                var $6076 = Kind$Term$nat$($6075);
                var $6031 = $6076;
                break;
            case 'Kind.Term.chr':
                var $6077 = self.chrx;
                var $6078 = Kind$Term$chr$($6077);
                var $6031 = $6078;
                break;
            case 'Kind.Term.str':
                var $6079 = self.strx;
                var $6080 = Kind$Term$str$($6079);
                var $6031 = $6080;
                break;
            case 'Kind.Term.cse':
                var $6081 = self.expr;
                var $6082 = self.name;
                var $6083 = self.with;
                var $6084 = self.cses;
                var $6085 = self.moti;
                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $6081);
                var _name$11 = $6082;
                var _wyth$12 = List$mapped$($6083, (_with_var$12 => {
                    var self = _with_var$12;
                    switch (self._) {
                        case 'Kind.Ann.new':
                            var $6088 = self.name;
                            var $6089 = self.term;
                            var $6090 = self.type;
                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $6089);
                            var self = $6090;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6092 = self.value;
                                    var $6093 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $6092));
                                    var _with_var_type$17 = $6093;
                                    break;
                                case 'Maybe.none':
                                    var $6094 = Maybe$none;
                                    var _with_var_type$17 = $6094;
                                    break;
                            };
                            var $6091 = Kind$Ann$new$($6088, _with_var_term$16, _with_var_type$17);
                            var $6087 = $6091;
                            break;
                    };
                    return $6087;
                }));
                var _cses$13 = $6084;
                var _moti$14 = $6085;
                var $6086 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $6031 = $6086;
                break;
            case 'Kind.Term.ori':
                var $6095 = self.orig;
                var $6096 = self.expr;
                var $6097 = Kind$Term$ori$($6095, Kind$Term$bind$(_vars$1, _path$2, $6096));
                var $6031 = $6097;
                break;
            case 'Kind.Term.typ':
                var $6098 = Kind$Term$typ;
                var $6031 = $6098;
                break;
            case 'Kind.Term.hol':
                var $6099 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));
                var $6031 = $6099;
                break;
        };
        return $6031;
    };
    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);

    function Trampoline$call$(_t$2) {
        var Trampoline$call$ = (_t$2) => ({
            ctr: 'TCO',
            arg: [_t$2]
        });
        var Trampoline$call = _t$2 => Trampoline$call$(_t$2);
        var arg = [_t$2];
        while (true) {
            let [_t$2] = arg;
            var R = (() => {
                var self = _t$2;
                switch (self._) {
                    case 'Trampoline.done':
                        var $6100 = self.value;
                        var $6101 = $6100;
                        return $6101;
                    case 'Trampoline.wrap':
                        var $6102 = self.value;
                        var $6103 = Trampoline$call$($6102(Unit$new));
                        return $6103;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Trampoline$call = x0 => Trampoline$call$(x0);

    function Trampoline$(_A$1) {
        var $6104 = null;
        return $6104;
    };
    const Trampoline = x0 => Trampoline$(x0);

    function Trampoline$wrap$(_value$2) {
        var $6105 = ({
            _: 'Trampoline.wrap',
            'value': _value$2
        });
        return $6105;
    };
    const Trampoline$wrap = x0 => Trampoline$wrap$(x0);

    function BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5) {
        var BitsMap$set_if_empty$cps$go$ = (_bits$2, _val$3, _map$4, _cont$5) => ({
            ctr: 'TCO',
            arg: [_bits$2, _val$3, _map$4, _cont$5]
        });
        var BitsMap$set_if_empty$cps$go = _bits$2 => _val$3 => _map$4 => _cont$5 => BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5);
        var arg = [_bits$2, _val$3, _map$4, _cont$5];
        while (true) {
            let [_bits$2, _val$3, _map$4, _cont$5] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6106 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $6108 = self.val;
                                var $6109 = self.lft;
                                var $6110 = self.rgt;
                                var $6111 = BitsMap$set_if_empty$cps$go$($6106, _val$3, $6109, (_lft$10 => {
                                    var $6112 = Trampoline$wrap$((_$11 => {
                                        var $6113 = _cont$5(BitsMap$tie$($6108, _lft$10, $6110));
                                        return $6113;
                                    }));
                                    return $6112;
                                }));
                                var $6107 = $6111;
                                break;
                            case 'BitsMap.new':
                                var $6114 = BitsMap$set_if_empty$cps$go$($6106, _val$3, BitsMap$new, (_lft$7 => {
                                    var $6115 = Trampoline$wrap$((_$8 => {
                                        var $6116 = _cont$5(BitsMap$tie$(Maybe$none, _lft$7, BitsMap$new));
                                        return $6116;
                                    }));
                                    return $6115;
                                }));
                                var $6107 = $6114;
                                break;
                        };
                        return $6107;
                    case 'i':
                        var $6117 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $6119 = self.val;
                                var $6120 = self.lft;
                                var $6121 = self.rgt;
                                var $6122 = BitsMap$set_if_empty$cps$go$($6117, _val$3, $6121, (_rgt$10 => {
                                    var $6123 = Trampoline$wrap$((_$11 => {
                                        var $6124 = _cont$5(BitsMap$tie$($6119, $6120, _rgt$10));
                                        return $6124;
                                    }));
                                    return $6123;
                                }));
                                var $6118 = $6122;
                                break;
                            case 'BitsMap.new':
                                var $6125 = BitsMap$set_if_empty$cps$go$($6117, _val$3, BitsMap$new, (_rgt$7 => {
                                    var $6126 = Trampoline$wrap$((_$8 => {
                                        var $6127 = _cont$5(BitsMap$tie$(Maybe$none, BitsMap$new, _rgt$7));
                                        return $6127;
                                    }));
                                    return $6126;
                                }));
                                var $6118 = $6125;
                                break;
                        };
                        return $6118;
                    case 'e':
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $6129 = self.val;
                                var $6130 = self.lft;
                                var $6131 = self.rgt;
                                var $6132 = _cont$5(BitsMap$tie$((() => {
                                    var self = $6129;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $6133 = self.value;
                                            var $6134 = Maybe$some$($6133);
                                            return $6134;
                                        case 'Maybe.none':
                                            var $6135 = Maybe$some$(_val$3);
                                            return $6135;
                                    };
                                })(), $6130, $6131));
                                var $6128 = $6132;
                                break;
                            case 'BitsMap.new':
                                var $6136 = _cont$5(BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new));
                                var $6128 = $6136;
                                break;
                        };
                        return $6128;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$set_if_empty$cps$go = x0 => x1 => x2 => x3 => BitsMap$set_if_empty$cps$go$(x0, x1, x2, x3);

    function Trampoline$done$(_value$2) {
        var $6137 = ({
            _: 'Trampoline.done',
            'value': _value$2
        });
        return $6137;
    };
    const Trampoline$done = x0 => Trampoline$done$(x0);

    function BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4) {
        var $6138 = Trampoline$call$(BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, Trampoline$done));
        return $6138;
    };
    const BitsMap$set_if_empty$cps = x0 => x1 => x2 => BitsMap$set_if_empty$cps$(x0, x1, x2);

    function BitsMap$set_if_empty$(_bits$2, _val$3, _map$4) {
        var $6139 = BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4);
        return $6139;
    };
    const BitsMap$set_if_empty = x0 => x1 => x2 => BitsMap$set_if_empty$(x0, x1, x2);

    function Kind$Map$set_if_empty$(_name$2, _val$3, _map$4) {
        var $6140 = BitsMap$set_if_empty$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $6140;
    };
    const Kind$Map$set_if_empty = x0 => x1 => x2 => Kind$Map$set_if_empty$(x0, x1, x2);
    const Kind$Status$init = ({
        _: 'Kind.Status.init'
    });

    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var _defn$11 = Kind$Def$new(_file$1)(_code$2)(_orig$3)(_name$4)(_term$5)(_type$6)(_isct$7)(_arit$8);
        var self = _done$9;
        if (self) {
            var $6142 = Kind$Map$set$(_name$4, _defn$11(Kind$Status$done$(Bool$false)), _defs$10);
            var $6141 = $6142;
        } else {
            var $6143 = Kind$Map$set_if_empty$(_name$4, _defn$11(Kind$Status$init), _defs$10);
            var $6141 = $6143;
        };
        return $6141;
    };
    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6145 = self.idx;
                var $6146 = self.code;
                var $6147 = self.err;
                var $6148 = Parser$Reply$error$($6145, $6146, $6147);
                var $6144 = $6148;
                break;
            case 'Parser.Reply.value':
                var $6149 = self.idx;
                var $6150 = self.code;
                var $6151 = self.val;
                var self = Kind$Parser$name1$($6149, $6150);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6153 = self.idx;
                        var $6154 = self.code;
                        var $6155 = self.err;
                        var $6156 = Parser$Reply$error$($6153, $6154, $6155);
                        var $6152 = $6156;
                        break;
                    case 'Parser.Reply.value':
                        var $6157 = self.idx;
                        var $6158 = self.code;
                        var $6159 = self.val;
                        var self = Parser$many$(Kind$Parser$binder(":"))($6157)($6158);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6161 = self.idx;
                                var $6162 = self.code;
                                var $6163 = self.err;
                                var $6164 = Parser$Reply$error$($6161, $6162, $6163);
                                var $6160 = $6164;
                                break;
                            case 'Parser.Reply.value':
                                var $6165 = self.idx;
                                var $6166 = self.code;
                                var $6167 = self.val;
                                var _args$15 = List$flatten$($6167);
                                var self = Kind$Parser$text$(":", $6165, $6166);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $6169 = self.idx;
                                        var $6170 = self.code;
                                        var $6171 = self.err;
                                        var $6172 = Parser$Reply$error$($6169, $6170, $6171);
                                        var $6168 = $6172;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $6173 = self.idx;
                                        var $6174 = self.code;
                                        var self = Kind$Parser$term$($6173, $6174);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $6176 = self.idx;
                                                var $6177 = self.code;
                                                var $6178 = self.err;
                                                var $6179 = Parser$Reply$error$($6176, $6177, $6178);
                                                var $6175 = $6179;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $6180 = self.idx;
                                                var $6181 = self.code;
                                                var $6182 = self.val;
                                                var self = Kind$Parser$term$($6180, $6181);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $6184 = self.idx;
                                                        var $6185 = self.code;
                                                        var $6186 = self.err;
                                                        var $6187 = Parser$Reply$error$($6184, $6185, $6186);
                                                        var $6183 = $6187;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $6188 = self.idx;
                                                        var $6189 = self.code;
                                                        var $6190 = self.val;
                                                        var self = Kind$Parser$stop$($6151, $6188, $6189);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $6192 = self.idx;
                                                                var $6193 = self.code;
                                                                var $6194 = self.err;
                                                                var $6195 = Parser$Reply$error$($6192, $6193, $6194);
                                                                var $6191 = $6195;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $6196 = self.idx;
                                                                var $6197 = self.code;
                                                                var $6198 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $6182);
                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Kind.Binder.new':
                                                                            var $6201 = self.name;
                                                                            var $6202 = $6201;
                                                                            var $6200 = $6202;
                                                                            break;
                                                                    };
                                                                    return $6200;
                                                                })), $6190);
                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                                    var $6203 = (_x$31 + '1');
                                                                    return $6203;
                                                                }), _type$29);
                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {
                                                                    var $6204 = (_x$32 + '0');
                                                                    return $6204;
                                                                }), _term$30);
                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $6198, $6159, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $6199 = Parser$Reply$value$($6196, $6197, _defs$33);
                                                                var $6191 = $6199;
                                                                break;
                                                        };
                                                        var $6183 = $6191;
                                                        break;
                                                };
                                                var $6175 = $6183;
                                                break;
                                        };
                                        var $6168 = $6175;
                                        break;
                                };
                                var $6160 = $6168;
                                break;
                        };
                        var $6152 = $6160;
                        break;
                };
                var $6144 = $6152;
                break;
        };
        return $6144;
    };
    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);

    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $6205 = ({
            _: 'Kind.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $6205;
    };
    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);

    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Kind$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6207 = self.idx;
                var $6208 = self.code;
                var $6209 = self.err;
                var $6210 = Parser$Reply$error$($6207, $6208, $6209);
                var $6206 = $6210;
                break;
            case 'Parser.Reply.value':
                var $6211 = self.idx;
                var $6212 = self.code;
                var $6213 = self.val;
                var self = Parser$maybe$(Kind$Parser$binder(":"), $6211, $6212);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6215 = self.idx;
                        var $6216 = self.code;
                        var $6217 = self.err;
                        var $6218 = Parser$Reply$error$($6215, $6216, $6217);
                        var $6214 = $6218;
                        break;
                    case 'Parser.Reply.value':
                        var $6219 = self.idx;
                        var $6220 = self.code;
                        var $6221 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Kind$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $6224 = self.idx;
                                    var $6225 = self.code;
                                    var $6226 = self.err;
                                    var $6227 = Parser$Reply$error$($6224, $6225, $6226);
                                    var $6223 = $6227;
                                    break;
                                case 'Parser.Reply.value':
                                    var $6228 = self.idx;
                                    var $6229 = self.code;
                                    var $6230 = Kind$Parser$binder$("=", $6228, $6229);
                                    var $6223 = $6230;
                                    break;
                            };
                            return $6223;
                        }), $6219, $6220);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6231 = self.idx;
                                var $6232 = self.code;
                                var $6233 = self.err;
                                var $6234 = Parser$Reply$error$($6231, $6232, $6233);
                                var $6222 = $6234;
                                break;
                            case 'Parser.Reply.value':
                                var $6235 = self.idx;
                                var $6236 = self.code;
                                var $6237 = self.val;
                                var _args$13 = Maybe$default$($6221, List$nil);
                                var _inds$14 = Maybe$default$($6237, List$nil);
                                var $6238 = Parser$Reply$value$($6235, $6236, Kind$Constructor$new$($6213, _args$13, _inds$14));
                                var $6222 = $6238;
                                break;
                        };
                        var $6214 = $6222;
                        break;
                };
                var $6206 = $6214;
                break;
        };
        return $6206;
    };
    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);

    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $6239 = ({
            _: 'Kind.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $6239;
    };
    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);

    function Kind$Parser$datatype$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6241 = self.idx;
                var $6242 = self.code;
                var $6243 = self.err;
                var $6244 = Parser$Reply$error$($6241, $6242, $6243);
                var $6240 = $6244;
                break;
            case 'Parser.Reply.value':
                var $6245 = self.idx;
                var $6246 = self.code;
                var self = Kind$Parser$name1$($6245, $6246);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6248 = self.idx;
                        var $6249 = self.code;
                        var $6250 = self.err;
                        var $6251 = Parser$Reply$error$($6248, $6249, $6250);
                        var $6247 = $6251;
                        break;
                    case 'Parser.Reply.value':
                        var $6252 = self.idx;
                        var $6253 = self.code;
                        var $6254 = self.val;
                        var self = Parser$maybe$(Kind$Parser$binder(":"), $6252, $6253);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6256 = self.idx;
                                var $6257 = self.code;
                                var $6258 = self.err;
                                var $6259 = Parser$Reply$error$($6256, $6257, $6258);
                                var $6255 = $6259;
                                break;
                            case 'Parser.Reply.value':
                                var $6260 = self.idx;
                                var $6261 = self.code;
                                var $6262 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $6265 = self.idx;
                                            var $6266 = self.code;
                                            var $6267 = self.err;
                                            var $6268 = Parser$Reply$error$($6265, $6266, $6267);
                                            var $6264 = $6268;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $6269 = self.idx;
                                            var $6270 = self.code;
                                            var $6271 = Kind$Parser$binder$(":", $6269, $6270);
                                            var $6264 = $6271;
                                            break;
                                    };
                                    return $6264;
                                }), $6260, $6261);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $6272 = self.idx;
                                        var $6273 = self.code;
                                        var $6274 = self.err;
                                        var $6275 = Parser$Reply$error$($6272, $6273, $6274);
                                        var $6263 = $6275;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $6276 = self.idx;
                                        var $6277 = self.code;
                                        var $6278 = self.val;
                                        var _pars$15 = Maybe$default$($6262, List$nil);
                                        var _inds$16 = Maybe$default$($6278, List$nil);
                                        var self = Kind$Parser$text$("{", $6276, $6277);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $6280 = self.idx;
                                                var $6281 = self.code;
                                                var $6282 = self.err;
                                                var $6283 = Parser$Reply$error$($6280, $6281, $6282);
                                                var $6279 = $6283;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $6284 = self.idx;
                                                var $6285 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item(Kind$Parser$constructor($6254)))($6284)($6285);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $6287 = self.idx;
                                                        var $6288 = self.code;
                                                        var $6289 = self.err;
                                                        var $6290 = Parser$Reply$error$($6287, $6288, $6289);
                                                        var $6286 = $6290;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $6291 = self.idx;
                                                        var $6292 = self.code;
                                                        var $6293 = self.val;
                                                        var $6294 = Parser$Reply$value$($6291, $6292, Kind$Datatype$new$($6254, _pars$15, _inds$16, $6293));
                                                        var $6286 = $6294;
                                                        break;
                                                };
                                                var $6279 = $6286;
                                                break;
                                        };
                                        var $6263 = $6279;
                                        break;
                                };
                                var $6255 = $6263;
                                break;
                        };
                        var $6247 = $6255;
                        break;
                };
                var $6240 = $6247;
                break;
        };
        return $6240;
    };
    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);

    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.cons':
                var $6296 = self.head;
                var $6297 = self.tail;
                var self = $6296;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6299 = self.eras;
                        var $6300 = self.name;
                        var $6301 = self.term;
                        var $6302 = Kind$Term$all$($6299, "", $6300, $6301, (_s$9 => _x$10 => {
                            var $6303 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $6297);
                            return $6303;
                        }));
                        var $6298 = $6302;
                        break;
                };
                var $6295 = $6298;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6305 = self.pars;
                        var $6306 = self.inds;
                        var _slf$8 = Kind$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $6309 = _slf$8;
                            var $6310 = $6305;
                            let _slf$10 = $6309;
                            let _v$9;
                            while ($6310._ === 'List.cons') {
                                _v$9 = $6310.head;
                                var $6309 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6311 = self.name;
                                            var $6312 = $6311;
                                            return $6312;
                                    };
                                })()));
                                _slf$10 = $6309;
                                $6310 = $6310.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $6314 = _slf$9;
                            var $6315 = $6306;
                            let _slf$11 = $6314;
                            let _v$10;
                            while ($6315._ === 'List.cons') {
                                _v$10 = $6315.head;
                                var $6314 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {
                                    var self = _v$10;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6316 = self.name;
                                            var $6317 = $6316;
                                            return $6317;
                                    };
                                })()));
                                _slf$11 = $6314;
                                $6315 = $6315.tail;
                            }
                            return _slf$11;
                        })();
                        var $6307 = Kind$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $6318 = Kind$Term$typ;
                            return $6318;
                        }));
                        var $6304 = $6307;
                        break;
                };
                var $6295 = $6304;
                break;
        };
        return $6295;
    };
    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);

    function Kind$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6320 = self.name;
                var $6321 = self.inds;
                var $6322 = Kind$Datatype$build_term$motive$go$(_type$1, $6320, $6321);
                var $6319 = $6322;
                break;
        };
        return $6319;
    };
    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);

    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.cons':
                var $6324 = self.head;
                var $6325 = self.tail;
                var self = $6324;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6327 = self.eras;
                        var $6328 = self.name;
                        var $6329 = self.term;
                        var _eras$9 = $6327;
                        var _name$10 = $6328;
                        var _xtyp$11 = $6329;
                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6325);
                        var $6330 = Kind$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $6331 = _body$12;
                            return $6331;
                        }));
                        var $6326 = $6330;
                        break;
                };
                var $6323 = $6326;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6333 = self.name;
                        var $6334 = self.pars;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Kind.Constructor.new':
                                var $6336 = self.name;
                                var $6337 = self.args;
                                var $6338 = self.inds;
                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $6341 = _ret$11;
                                    var $6342 = $6338;
                                    let _ret$13 = $6341;
                                    let _v$12;
                                    while ($6342._ === 'List.cons') {
                                        _v$12 = $6342.head;
                                        var $6341 = Kind$Term$app$(_ret$13, (() => {
                                            var self = _v$12;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6343 = self.term;
                                                    var $6344 = $6343;
                                                    return $6344;
                                            };
                                        })());
                                        _ret$13 = $6341;
                                        $6342 = $6342.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($6333, List$cons$(Kind$Name$read$("."), List$cons$($6336, List$nil))));
                                var _slf$14 = Kind$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $6346 = _slf$14;
                                    var $6347 = $6334;
                                    let _slf$16 = $6346;
                                    let _v$15;
                                    while ($6347._ === 'List.cons') {
                                        _v$15 = $6347.head;
                                        var $6346 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {
                                            var self = _v$15;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6348 = self.name;
                                                    var $6349 = $6348;
                                                    return $6349;
                                            };
                                        })()));
                                        _slf$16 = $6346;
                                        $6347 = $6347.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $6351 = _slf$15;
                                    var $6352 = $6337;
                                    let _slf$17 = $6351;
                                    let _v$16;
                                    while ($6352._ === 'List.cons') {
                                        _v$16 = $6352.head;
                                        var $6351 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {
                                            var self = _v$16;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6353 = self.name;
                                                    var $6354 = $6353;
                                                    return $6354;
                                            };
                                        })()));
                                        _slf$17 = $6351;
                                        $6352 = $6352.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $6339 = Kind$Term$app$(_ret$12, _slf$16);
                                var $6335 = $6339;
                                break;
                        };
                        var $6332 = $6335;
                        break;
                };
                var $6323 = $6332;
                break;
        };
        return $6323;
    };
    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Kind.Constructor.new':
                var $6356 = self.args;
                var $6357 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6356);
                var $6355 = $6357;
                break;
        };
        return $6355;
    };
    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);

    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6359 = self.head;
                var $6360 = self.tail;
                var self = $6359;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6362 = self.name;
                        var $6363 = Kind$Term$all$(Bool$false, "", $6362, Kind$Datatype$build_term$constructor$(_type$1, $6359), (_s$9 => _x$10 => {
                            var $6364 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $6360);
                            return $6364;
                        }));
                        var $6361 = $6363;
                        break;
                };
                var $6358 = $6361;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6366 = self.inds;
                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $6369 = _ret$8;
                            var $6370 = $6366;
                            let _ret$10 = $6369;
                            let _v$9;
                            while ($6370._ === 'List.cons') {
                                _v$9 = $6370.head;
                                var $6369 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6371 = self.name;
                                            var $6372 = $6371;
                                            return $6372;
                                    };
                                })()));
                                _ret$10 = $6369;
                                $6370 = $6370.tail;
                            }
                            return _ret$10;
                        })();
                        var $6367 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + ".Self")));
                        var $6365 = $6367;
                        break;
                };
                var $6358 = $6365;
                break;
        };
        return $6358;
    };
    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6374 = self.name;
                var $6375 = self.ctrs;
                var $6376 = Kind$Datatype$build_term$constructors$go$(_type$1, $6374, $6375);
                var $6373 = $6376;
                break;
        };
        return $6373;
    };
    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);

    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6378 = self.head;
                var $6379 = self.tail;
                var self = $6378;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6381 = self.name;
                        var $6382 = Kind$Term$lam$($6381, (_x$10 => {
                            var $6383 = Kind$Datatype$build_term$go$(_type$1, _name$2, $6379, _inds$4);
                            return $6383;
                        }));
                        var $6380 = $6382;
                        break;
                };
                var $6377 = $6380;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6385 = self.head;
                        var $6386 = self.tail;
                        var self = $6385;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6388 = self.name;
                                var $6389 = Kind$Term$lam$($6388, (_x$10 => {
                                    var $6390 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $6386);
                                    return $6390;
                                }));
                                var $6387 = $6389;
                                break;
                        };
                        var $6384 = $6387;
                        break;
                    case 'List.nil':
                        var $6391 = Kind$Term$all$(Bool$true, (_name$2 + ".Self"), Kind$Name$read$("P"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $6392 = Kind$Datatype$build_term$constructors$(_type$1);
                            return $6392;
                        }));
                        var $6384 = $6391;
                        break;
                };
                var $6377 = $6384;
                break;
        };
        return $6377;
    };
    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6394 = self.name;
                var $6395 = self.pars;
                var $6396 = self.inds;
                var $6397 = Kind$Datatype$build_term$go$(_type$1, $6394, $6395, $6396);
                var $6393 = $6397;
                break;
        };
        return $6393;
    };
    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);

    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6399 = self.head;
                var $6400 = self.tail;
                var self = $6399;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6402 = self.name;
                        var $6403 = self.term;
                        var $6404 = Kind$Term$all$(Bool$false, "", $6402, $6403, (_s$10 => _x$11 => {
                            var $6405 = Kind$Datatype$build_type$go$(_type$1, _name$2, $6400, _inds$4);
                            return $6405;
                        }));
                        var $6401 = $6404;
                        break;
                };
                var $6398 = $6401;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6407 = self.head;
                        var $6408 = self.tail;
                        var self = $6407;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6410 = self.name;
                                var $6411 = self.term;
                                var $6412 = Kind$Term$all$(Bool$false, "", $6410, $6411, (_s$10 => _x$11 => {
                                    var $6413 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $6408);
                                    return $6413;
                                }));
                                var $6409 = $6412;
                                break;
                        };
                        var $6406 = $6409;
                        break;
                    case 'List.nil':
                        var $6414 = Kind$Term$typ;
                        var $6406 = $6414;
                        break;
                };
                var $6398 = $6406;
                break;
        };
        return $6398;
    };
    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6416 = self.name;
                var $6417 = self.pars;
                var $6418 = self.inds;
                var $6419 = Kind$Datatype$build_type$go$(_type$1, $6416, $6417, $6418);
                var $6415 = $6419;
                break;
        };
        return $6415;
    };
    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);

    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6421 = self.head;
                var $6422 = self.tail;
                var self = $6421;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6424 = self.name;
                        var $6425 = Kind$Term$lam$($6424, (_x$9 => {
                            var $6426 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6422);
                            return $6426;
                        }));
                        var $6423 = $6425;
                        break;
                };
                var $6420 = $6423;
                break;
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6428 = self.name;
                        var $6429 = self.args;
                        var _ret$7 = Kind$Term$ref$($6428);
                        var _ret$8 = (() => {
                            var $6432 = _ret$7;
                            var $6433 = $6429;
                            let _ret$9 = $6432;
                            let _arg$8;
                            while ($6433._ === 'List.cons') {
                                _arg$8 = $6433.head;
                                var $6432 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6434 = self.name;
                                            var $6435 = $6434;
                                            return $6435;
                                    };
                                })()));
                                _ret$9 = $6432;
                                $6433 = $6433.tail;
                            }
                            return _ret$9;
                        })();
                        var $6430 = _ret$8;
                        var $6427 = $6430;
                        break;
                };
                var $6420 = $6427;
                break;
        };
        return $6420;
    };
    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);

    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6437 = self.ctrs;
                var $6438 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6437);
                var $6436 = $6438;
                break;
        };
        return $6436;
    };
    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);

    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6440 = self.head;
                var $6441 = self.tail;
                var self = $6440;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6443 = self.name;
                        var $6444 = Kind$Term$lam$($6443, (_x$11 => {
                            var $6445 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $6441, _args$5);
                            return $6445;
                        }));
                        var $6442 = $6444;
                        break;
                };
                var $6439 = $6442;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6447 = self.head;
                        var $6448 = self.tail;
                        var self = $6447;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6450 = self.name;
                                var $6451 = Kind$Term$lam$($6450, (_x$11 => {
                                    var $6452 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $6448);
                                    return $6452;
                                }));
                                var $6449 = $6451;
                                break;
                        };
                        var $6446 = $6449;
                        break;
                    case 'List.nil':
                        var $6453 = Kind$Term$lam$(Kind$Name$read$("P"), (_x$6 => {
                            var $6454 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $6454;
                        }));
                        var $6446 = $6453;
                        break;
                };
                var $6439 = $6446;
                break;
        };
        return $6439;
    };
    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6456 = self.name;
                var $6457 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6459 = self.args;
                        var $6460 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $6456, $6457, $6459);
                        var $6458 = $6460;
                        break;
                };
                var $6455 = $6458;
                break;
        };
        return $6455;
    };
    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);

    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6462 = self.head;
                var $6463 = self.tail;
                var self = $6462;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6465 = self.eras;
                        var $6466 = self.name;
                        var $6467 = self.term;
                        var $6468 = Kind$Term$all$($6465, "", $6466, $6467, (_s$11 => _x$12 => {
                            var $6469 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $6463, _args$5);
                            return $6469;
                        }));
                        var $6464 = $6468;
                        break;
                };
                var $6461 = $6464;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6471 = self.head;
                        var $6472 = self.tail;
                        var self = $6471;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6474 = self.eras;
                                var $6475 = self.name;
                                var $6476 = self.term;
                                var $6477 = Kind$Term$all$($6474, "", $6475, $6476, (_s$11 => _x$12 => {
                                    var $6478 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $6472);
                                    return $6478;
                                }));
                                var $6473 = $6477;
                                break;
                        };
                        var $6470 = $6473;
                        break;
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Kind.Datatype.new':
                                var $6480 = self.pars;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Kind.Constructor.new':
                                        var $6482 = self.inds;
                                        var _type$13 = Kind$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $6485 = _type$13;
                                            var $6486 = $6480;
                                            let _type$15 = $6485;
                                            let _v$14;
                                            while ($6486._ === 'List.cons') {
                                                _v$14 = $6486.head;
                                                var $6485 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {
                                                    var self = _v$14;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6487 = self.name;
                                                            var $6488 = $6487;
                                                            return $6488;
                                                    };
                                                })()));
                                                _type$15 = $6485;
                                                $6486 = $6486.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $6490 = _type$14;
                                            var $6491 = $6482;
                                            let _type$16 = $6490;
                                            let _v$15;
                                            while ($6491._ === 'List.cons') {
                                                _v$15 = $6491.head;
                                                var $6490 = Kind$Term$app$(_type$16, (() => {
                                                    var self = _v$15;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6492 = self.term;
                                                            var $6493 = $6492;
                                                            return $6493;
                                                    };
                                                })());
                                                _type$16 = $6490;
                                                $6491 = $6491.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $6483 = _type$15;
                                        var $6481 = $6483;
                                        break;
                                };
                                var $6479 = $6481;
                                break;
                        };
                        var $6470 = $6479;
                        break;
                };
                var $6461 = $6470;
                break;
        };
        return $6461;
    };
    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6495 = self.name;
                var $6496 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6498 = self.args;
                        var $6499 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $6495, $6496, $6498);
                        var $6497 = $6499;
                        break;
                };
                var $6494 = $6497;
                break;
        };
        return $6494;
    };
    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);

    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6501 = self.idx;
                var $6502 = self.code;
                var $6503 = self.err;
                var $6504 = Parser$Reply$error$($6501, $6502, $6503);
                var $6500 = $6504;
                break;
            case 'Parser.Reply.value':
                var $6505 = self.idx;
                var $6506 = self.code;
                var $6507 = self.val;
                var self = Kind$Parser$datatype$($6505, $6506);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6509 = self.idx;
                        var $6510 = self.code;
                        var $6511 = self.err;
                        var $6512 = Parser$Reply$error$($6509, $6510, $6511);
                        var $6508 = $6512;
                        break;
                    case 'Parser.Reply.value':
                        var $6513 = self.idx;
                        var $6514 = self.code;
                        var $6515 = self.val;
                        var self = Kind$Parser$stop$($6507, $6513, $6514);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6517 = self.idx;
                                var $6518 = self.code;
                                var $6519 = self.err;
                                var $6520 = Parser$Reply$error$($6517, $6518, $6519);
                                var $6516 = $6520;
                                break;
                            case 'Parser.Reply.value':
                                var $6521 = self.idx;
                                var $6522 = self.code;
                                var $6523 = self.val;
                                var self = $6515;
                                switch (self._) {
                                    case 'Kind.Datatype.new':
                                        var $6525 = self.name;
                                        var $6526 = self.pars;
                                        var $6527 = self.inds;
                                        var $6528 = self.ctrs;
                                        var _term$19 = Kind$Datatype$build_term$($6515);
                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {
                                            var $6530 = (_x$20 + '1');
                                            return $6530;
                                        }), _term$19);
                                        var _type$21 = Kind$Datatype$build_type$($6515);
                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {
                                            var $6531 = (_x$22 + '0');
                                            return $6531;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($6526)) + (list_length($6527)));
                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $6523, $6525, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($6528, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $6525;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6533 = self.args;
                                                        var $6534 = $6533;
                                                        return $6534;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6535 = self.name;
                                                        var $6536 = $6535;
                                                        return $6536;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Kind$Constructor$build_term$($6515, _ctr$25);
                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                var $6537 = (_x$31 + '1');
                                                return $6537;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Kind$Constructor$build_type$($6515, _ctr$25);
                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {
                                                var $6538 = (_x$33 + '0');
                                                return $6538;
                                            }), _ctr_type$32);
                                            var $6532 = Kind$Map$def$(_file$1, _code$2, $6523, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $6532;
                                        }));
                                        var $6529 = (_idx$26 => _code$27 => {
                                            var $6539 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $6539;
                                        });
                                        var $6524 = $6529;
                                        break;
                                };
                                var $6524 = $6524($6521)($6522);
                                var $6516 = $6524;
                                break;
                        };
                        var $6508 = $6516;
                        break;
                };
                var $6500 = $6508;
                break;
        };
        return $6500;
    };
    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6541 = self.idx;
                var $6542 = self.code;
                var $6543 = self.err;
                var $6544 = Parser$Reply$error$($6541, $6542, $6543);
                var $6540 = $6544;
                break;
            case 'Parser.Reply.value':
                var $6545 = self.idx;
                var $6546 = self.code;
                var self = Parser$eof$($6545, $6546);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6548 = self.idx;
                        var $6549 = self.code;
                        var $6550 = self.err;
                        var $6551 = Parser$Reply$error$($6548, $6549, $6550);
                        var $6547 = $6551;
                        break;
                    case 'Parser.Reply.value':
                        var $6552 = self.idx;
                        var $6553 = self.code;
                        var $6554 = Parser$Reply$value$($6552, $6553, _defs$3);
                        var $6547 = $6554;
                        break;
                };
                var $6540 = $6547;
                break;
        };
        return $6540;
    };
    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6556 = self.idx;
                var $6557 = self.code;
                var $6558 = self.err;
                var $6559 = Parser$Reply$error$($6556, $6557, $6558);
                var $6555 = $6559;
                break;
            case 'Parser.Reply.value':
                var $6560 = self.idx;
                var $6561 = self.code;
                var $6562 = self.val;
                var self = $6562;
                if (self) {
                    var $6564 = (_idx$9 => _code$10 => {
                        var $6565 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $6565;
                    });
                    var $6563 = $6564;
                } else {
                    var $6566 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6568 = self.idx;
                                var $6569 = self.code;
                                var $6570 = self.err;
                                var $6571 = Parser$Reply$error$($6568, $6569, $6570);
                                var $6567 = $6571;
                                break;
                            case 'Parser.Reply.value':
                                var $6572 = self.idx;
                                var $6573 = self.code;
                                var $6574 = self.val;
                                var $6575 = Kind$Parser$file$(_file$1, _code$2, $6574, $6572, $6573);
                                var $6567 = $6575;
                                break;
                        };
                        return $6567;
                    });
                    var $6563 = $6566;
                };
                var $6563 = $6563($6560)($6561);
                var $6555 = $6563;
                break;
        };
        return $6555;
    };
    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $6577 = self.head;
                var $6578 = self.tail;
                var $6579 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $6580 = "";
                        return $6580;
                    } else {
                        var $6581 = _sep$1;
                        return $6581;
                    };
                })(), List$cons$($6577, List$cons$(String$join$go$(_sep$1, $6578, Bool$false), List$nil))));
                var $6576 = $6579;
                break;
            case 'List.nil':
                var $6582 = "";
                var $6576 = $6582;
                break;
        };
        return $6576;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $6583 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $6583;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {
        var $6584 = String$join$("\u{a}", _res$3);
        return $6584;
    };
    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6586 = self.value;
                var $6587 = _f$5($6586);
                var $6585 = $6587;
                break;
            case 'Maybe.none':
                var $6588 = _a$4;
                var $6585 = $6588;
                break;
        };
        return $6585;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6590 = Bool$true;
            var $6589 = $6590;
        } else {
            var $6591 = (self - 1n);
            var $6592 = Bool$false;
            var $6589 = $6592;
        };
        return $6589;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6594 = Nat$zero;
            var $6593 = $6594;
        } else {
            var $6595 = (self - 1n);
            var $6596 = Nat$succ$(Nat$succ$(Nat$double$($6595)));
            var $6593 = $6596;
        };
        return $6593;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $6598 = _str$3;
            var $6597 = $6598;
        } else {
            var $6599 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $6601 = String$cons$(_chr$2, String$pad_right$($6599, _chr$2, ""));
                var $6600 = $6601;
            } else {
                var $6602 = self.charCodeAt(0);
                var $6603 = self.slice(1);
                var $6604 = String$cons$($6602, String$pad_right$($6599, _chr$2, $6603));
                var $6600 = $6604;
            };
            var $6597 = $6600;
        };
        return $6597;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $6605 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $6605;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Kind$Code$color$(_col$1, _str$2) {
        var $6606 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $6606;
    };
    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $6608 = self.head;
                var $6609 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $6611 = List$nil;
                    var $6610 = $6611;
                } else {
                    var $6612 = (self - 1n);
                    var $6613 = List$cons$($6608, List$take$($6612, $6609));
                    var $6610 = $6613;
                };
                var $6607 = $6610;
                break;
            case 'List.nil':
                var $6614 = List$nil;
                var $6607 = $6614;
                break;
        };
        return $6607;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $6616 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $6615 = $6616;
                } else {
                    var $6617 = self.charCodeAt(0);
                    var $6618 = self.slice(1);
                    var self = ($6617 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $6621 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $6620 = $6621;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6624 = self.value;
                                        var $6625 = Maybe$some$(Nat$pred$($6624));
                                        var $6623 = $6625;
                                        break;
                                    case 'Maybe.none':
                                        var $6626 = Maybe$some$(_spa$9);
                                        var $6623 = $6626;
                                        break;
                                };
                                var _lft$14 = $6623;
                            } else {
                                var $6627 = (self - 1n);
                                var $6628 = _lft$6;
                                var _lft$14 = $6628;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $6622 = Kind$Code$highlight$go$($6618, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $6620 = $6622;
                        };
                        var $6619 = $6620;
                    } else {
                        var _chr$12 = String$cons$($6617, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $6630 = String$reverse$(Kind$Code$color$("31", Kind$Code$color$("4", _chr$12)));
                            var _chr$13 = $6630;
                        } else {
                            var $6631 = _chr$12;
                            var _chr$13 = $6631;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $6632 = List$take$(_spa$9, _res$8);
                            var _res$14 = $6632;
                        } else {
                            var $6633 = _res$8;
                            var _res$14 = $6633;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $6629 = Kind$Code$highlight$go$($6618, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $6619 = $6629;
                    };
                    var $6615 = $6619;
                };
                return $6615;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $6634 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $6634;
    };
    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);

    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6636 = self.idx;
                var $6637 = self.err;
                var _err$7 = $6637;
                var _hig$8 = Kind$Code$highlight$(_code$2, $6636, Nat$succ$($6636));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $6638 = Either$left$(_str$9);
                var $6635 = $6638;
                break;
            case 'Parser.Reply.value':
                var $6639 = self.val;
                var $6640 = Either$right$($6639);
                var $6635 = $6640;
                break;
        };
        return $6635;
    };
    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);

    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.cons':
                var $6642 = self.head;
                var $6643 = self.tail;
                var $6644 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $6645 = _m$bind$6;
                    return $6645;
                }))(IO$get_file$($6642))((_code$6 => {
                    var _read$7 = Kind$Defs$read$($6642, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.right':
                            var $6647 = self.value;
                            var _defs$9 = $6647;
                            var self = Kind$Map$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6649 = Kind$Synth$load$go$(_name$1, $6643, _defs$9);
                                    var $6648 = $6649;
                                    break;
                                case 'Maybe.some':
                                    var $6650 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $6651 = _m$pure$12;
                                        return $6651;
                                    }))(Maybe$some$(_defs$9));
                                    var $6648 = $6650;
                                    break;
                            };
                            var $6646 = $6648;
                            break;
                        case 'Either.left':
                            var $6652 = Kind$Synth$load$go$(_name$1, $6643, _defs$3);
                            var $6646 = $6652;
                            break;
                    };
                    return $6646;
                }));
                var $6641 = $6644;
                break;
            case 'List.nil':
                var $6653 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $6654 = _m$pure$5;
                    return $6654;
                }))(Maybe$none);
                var $6641 = $6653;
                break;
        };
        return $6641;
    };
    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);

    function Kind$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $6656 = self.head;
                var $6657 = self.tail;
                var _head$5 = (_last$2 + ($6656 + ".kind"));
                var _tail$6 = Kind$Synth$files_of$make$($6657, (_last$2 + ($6656 + "/")));
                var $6658 = List$cons$(_head$5, _tail$6);
                var $6655 = $6658;
                break;
            case 'List.nil':
                var $6659 = List$nil;
                var $6655 = $6659;
                break;
        };
        return $6655;
    };
    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $6660 = _n$2;
                    return $6660;
                } else {
                    var $6661 = self.charCodeAt(0);
                    var $6662 = self.slice(1);
                    var $6663 = String$length$go$($6662, Nat$succ$(_n$2));
                    return $6663;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $6664 = String$length$go$(_xs$1, 0n);
        return $6664;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $6666 = List$cons$(_last$3, List$nil);
            var $6665 = $6666;
        } else {
            var $6667 = self.charCodeAt(0);
            var $6668 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $6670 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $6669 = $6670;
            } else {
                var _next$6 = String$cons$($6667, String$nil);
                var $6671 = String$split$go$($6668, _match$2, (_last$3 + _next$6));
                var $6669 = $6671;
            };
            var $6665 = $6669;
        };
        return $6665;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $6672 = String$split$go$(_xs$1, _match$2, "");
        return $6672;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Kind$Synth$files_of$(_name$1) {
        var $6673 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $6673;
    };
    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);

    function Kind$Synth$load$(_name$1, _defs$2) {
        var $6674 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $6675 = _m$bind$3;
            return $6675;
        }))(Kind$Synth$load$cached$(List$cons$(_name$1, List$nil), _defs$2))((_cached_defs$3 => {
            var self = _cached_defs$3;
            switch (self._) {
                case 'Maybe.some':
                    var $6677 = self.value;
                    var $6678 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $6679 = _m$pure$6;
                        return $6679;
                    }))(Maybe$some$($6677));
                    var $6676 = $6678;
                    break;
                case 'Maybe.none':
                    var $6680 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);
                    var $6676 = $6680;
                    break;
            };
            return $6676;
        }));
        return $6674;
    };
    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);
    const Kind$Status$wait = ({
        _: 'Kind.Status.wait'
    });

    function Kind$Check$(_V$1) {
        var $6681 = null;
        return $6681;
    };
    const Kind$Check = x0 => Kind$Check$(x0);

    function Kind$Check$result$(_value$2, _errors$3) {
        var $6682 = ({
            _: 'Kind.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $6682;
    };
    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);

    function Kind$Error$undefined_reference$(_origin$1, _name$2) {
        var $6683 = ({
            _: 'Kind.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $6683;
    };
    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);

    function Kind$Error$waiting$(_name$1) {
        var $6684 = ({
            _: 'Kind.Error.waiting',
            'name': _name$1
        });
        return $6684;
    };
    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);

    function Kind$Error$indirect$(_name$1) {
        var $6685 = ({
            _: 'Kind.Error.indirect',
            'name': _name$1
        });
        return $6685;
    };
    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6687 = self.value;
                var $6688 = Maybe$some$(_f$4($6687));
                var $6686 = $6688;
                break;
            case 'Maybe.none':
                var $6689 = Maybe$none;
                var $6686 = $6689;
                break;
        };
        return $6686;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Kind$MPath$o$(_path$1) {
        var $6690 = Maybe$mapped$(_path$1, Kind$Path$o);
        return $6690;
    };
    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);

    function Kind$MPath$i$(_path$1) {
        var $6691 = Maybe$mapped$(_path$1, Kind$Path$i);
        return $6691;
    };
    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);

    function Kind$Error$patch$(_path$1, _term$2) {
        var $6692 = ({
            _: 'Kind.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $6692;
    };
    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);

    function Kind$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.some':
                var $6694 = self.value;
                var $6695 = $6694(Bits$e);
                var $6693 = $6695;
                break;
            case 'Maybe.none':
                var $6696 = Bits$e;
                var $6693 = $6696;
                break;
        };
        return $6693;
    };
    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);

    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $6697 = ({
            _: 'Kind.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $6697;
    };
    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);

    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $6698 = ({
            _: 'Kind.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $6698;
    };
    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);

    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {
        var self = _vars$1;
        switch (self._) {
            case 'List.cons':
                var $6700 = self.head;
                var $6701 = self.tail;
                var self = $6700;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6703 = self.name;
                        var $6704 = self.term;
                        var $6705 = self.type;
                        var self = $6705;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6707 = self.value;
                                var $6708 = Kind$Check$result$(Maybe$some$(Maybe$some$($6707)), List$nil);
                                var self = $6708;
                                break;
                            case 'Maybe.none':
                                var self = Kind$Term$check$($6704, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6710 = self.value;
                                        var $6711 = self.errors;
                                        var self = $6710;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6713 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($6713)), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6715 = self.value;
                                                        var $6716 = self.errors;
                                                        var $6717 = Kind$Check$result$($6715, List$concat$($6711, $6716));
                                                        var $6714 = $6717;
                                                        break;
                                                };
                                                var $6712 = $6714;
                                                break;
                                            case 'Maybe.none':
                                                var $6718 = Kind$Check$result$(Maybe$none, $6711);
                                                var $6712 = $6718;
                                                break;
                                        };
                                        var $6709 = $6712;
                                        break;
                                };
                                var self = $6709;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6719 = self.value;
                                var $6720 = self.errors;
                                var self = $6719;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6722 = self.value;
                                        var self = Kind$Term$check$infer_with_types$($6701, _defs$2, _ctx$3, _path$4, _orig$5);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6724 = self.value;
                                                var $6725 = self.errors;
                                                var self = $6724;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6727 = self.value;
                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($6703, $6704, $6722), $6727)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6729 = self.value;
                                                                var $6730 = self.errors;
                                                                var $6731 = Kind$Check$result$($6729, List$concat$($6725, $6730));
                                                                var $6728 = $6731;
                                                                break;
                                                        };
                                                        var $6726 = $6728;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6732 = Kind$Check$result$(Maybe$none, $6725);
                                                        var $6726 = $6732;
                                                        break;
                                                };
                                                var self = $6726;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6733 = self.value;
                                                var $6734 = self.errors;
                                                var $6735 = Kind$Check$result$($6733, List$concat$($6720, $6734));
                                                var $6723 = $6735;
                                                break;
                                        };
                                        var $6721 = $6723;
                                        break;
                                    case 'Maybe.none':
                                        var $6736 = Kind$Check$result$(Maybe$none, $6720);
                                        var $6721 = $6736;
                                        break;
                                };
                                var $6706 = $6721;
                                break;
                        };
                        var $6702 = $6706;
                        break;
                };
                var $6699 = $6702;
                break;
            case 'List.nil':
                var $6737 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);
                var $6699 = $6737;
                break;
        };
        return $6699;
    };
    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);

    function Kind$Term$normalize$(_term$1, _defs$2) {
        var self = Kind$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $6739 = self.name;
                var $6740 = self.indx;
                var $6741 = Kind$Term$var$($6739, $6740);
                var $6738 = $6741;
                break;
            case 'Kind.Term.ref':
                var $6742 = self.name;
                var $6743 = Kind$Term$ref$($6742);
                var $6738 = $6743;
                break;
            case 'Kind.Term.all':
                var $6744 = self.eras;
                var $6745 = self.self;
                var $6746 = self.name;
                var $6747 = self.xtyp;
                var $6748 = self.body;
                var $6749 = Kind$Term$all$($6744, $6745, $6746, Kind$Term$normalize$($6747, _defs$2), (_s$8 => _x$9 => {
                    var $6750 = Kind$Term$normalize$($6748(_s$8)(_x$9), _defs$2);
                    return $6750;
                }));
                var $6738 = $6749;
                break;
            case 'Kind.Term.lam':
                var $6751 = self.name;
                var $6752 = self.body;
                var $6753 = Kind$Term$lam$($6751, (_x$5 => {
                    var $6754 = Kind$Term$normalize$($6752(_x$5), _defs$2);
                    return $6754;
                }));
                var $6738 = $6753;
                break;
            case 'Kind.Term.app':
                var $6755 = self.func;
                var $6756 = self.argm;
                var $6757 = Kind$Term$app$(Kind$Term$normalize$($6755, _defs$2), Kind$Term$normalize$($6756, _defs$2));
                var $6738 = $6757;
                break;
            case 'Kind.Term.let':
                var $6758 = self.name;
                var $6759 = self.expr;
                var $6760 = self.body;
                var $6761 = Kind$Term$let$($6758, Kind$Term$normalize$($6759, _defs$2), (_x$6 => {
                    var $6762 = Kind$Term$normalize$($6760(_x$6), _defs$2);
                    return $6762;
                }));
                var $6738 = $6761;
                break;
            case 'Kind.Term.def':
                var $6763 = self.name;
                var $6764 = self.expr;
                var $6765 = self.body;
                var $6766 = Kind$Term$def$($6763, Kind$Term$normalize$($6764, _defs$2), (_x$6 => {
                    var $6767 = Kind$Term$normalize$($6765(_x$6), _defs$2);
                    return $6767;
                }));
                var $6738 = $6766;
                break;
            case 'Kind.Term.ann':
                var $6768 = self.done;
                var $6769 = self.term;
                var $6770 = self.type;
                var $6771 = Kind$Term$ann$($6768, Kind$Term$normalize$($6769, _defs$2), Kind$Term$normalize$($6770, _defs$2));
                var $6738 = $6771;
                break;
            case 'Kind.Term.gol':
                var $6772 = self.name;
                var $6773 = self.dref;
                var $6774 = self.verb;
                var $6775 = Kind$Term$gol$($6772, $6773, $6774);
                var $6738 = $6775;
                break;
            case 'Kind.Term.hol':
                var $6776 = self.path;
                var $6777 = Kind$Term$hol$($6776);
                var $6738 = $6777;
                break;
            case 'Kind.Term.nat':
                var $6778 = self.natx;
                var $6779 = Kind$Term$nat$($6778);
                var $6738 = $6779;
                break;
            case 'Kind.Term.chr':
                var $6780 = self.chrx;
                var $6781 = Kind$Term$chr$($6780);
                var $6738 = $6781;
                break;
            case 'Kind.Term.str':
                var $6782 = self.strx;
                var $6783 = Kind$Term$str$($6782);
                var $6738 = $6783;
                break;
            case 'Kind.Term.ori':
                var $6784 = self.expr;
                var $6785 = Kind$Term$normalize$($6784, _defs$2);
                var $6738 = $6785;
                break;
            case 'Kind.Term.typ':
                var $6786 = Kind$Term$typ;
                var $6738 = $6786;
                break;
            case 'Kind.Term.cse':
                var $6787 = _term$1;
                var $6738 = $6787;
                break;
        };
        return $6738;
    };
    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);

    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.cons':
                var $6789 = self.head;
                var $6790 = self.tail;
                var self = $6789;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6792 = self.name;
                        var $6793 = self.type;
                        var $6794 = Kind$Term$all$(Bool$false, "", $6792, Maybe$default$($6793, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {
                            var $6795 = Kind$Term$desugar_cse$motive$($6790, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));
                            return $6795;
                        }));
                        var $6791 = $6794;
                        break;
                };
                var $6788 = $6791;
                break;
            case 'List.nil':
                var self = _moti$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6797 = self.value;
                        var $6798 = $6797;
                        var $6796 = $6798;
                        break;
                    case 'Maybe.none':
                        var self = _rtyp$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6800 = self.value;
                                var $6801 = Kind$Term$normalize$($6800, Kind$Map$new);
                                var $6799 = $6801;
                                break;
                            case 'Maybe.none':
                                var $6802 = Kind$Term$hol$(Bits$e);
                                var $6799 = $6802;
                                break;
                        };
                        var $6796 = $6799;
                        break;
                };
                var $6788 = $6796;
                break;
        };
        return $6788;
    };
    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6804 = self.tail;
                var $6805 = $6804;
                var $6803 = $6805;
                break;
            case 'List.nil':
                var $6806 = List$nil;
                var $6803 = $6806;
                break;
        };
        return $6803;
    };
    const List$tail = x0 => List$tail$(x0);

    function Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Kind$Term$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Kind$Term$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6807 = self.func;
                        var $6808 = self.argm;
                        var $6809 = Kind$Term$SmartMotive$vals$cont$(_expr$1, $6807, List$cons$($6808, _args$3), _defs$4);
                        return $6809;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6810 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $6810;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Kind$Term$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Kind$Term$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6811 = self.body;
                        var $6812 = Kind$Term$SmartMotive$vals$(_expr$1, $6811(Kind$Term$typ)(Kind$Term$typ), _defs$3);
                        return $6812;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6813 = Kind$Term$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $6813;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals = x0 => x1 => x2 => Kind$Term$SmartMotive$vals$(x0, x1, x2);

    function Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Kind$Term$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Kind$Term$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6814 = self.self;
                        var $6815 = self.name;
                        var $6816 = self.body;
                        var $6817 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6816(Kind$Term$ref$($6814))(Kind$Term$ref$($6815)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6815, List$nil)))), _binds$3), _defs$4);
                        return $6817;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6818 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $6818;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Kind$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Kind.Term.all':
                var $6820 = self.xtyp;
                var $6821 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6820, List$nil, _defs$3);
                var $6819 = $6821;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6822 = List$nil;
                var $6819 = $6822;
                break;
        };
        return $6819;
    };
    const Kind$Term$SmartMotive$nams = x0 => x1 => x2 => Kind$Term$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.cons':
                var $6824 = self.head;
                var $6825 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.cons':
                        var $6827 = self.head;
                        var $6828 = self.tail;
                        var $6829 = List$cons$(Pair$new$($6824, $6827), List$zip$($6825, $6828));
                        var $6826 = $6829;
                        break;
                    case 'List.nil':
                        var $6830 = List$nil;
                        var $6826 = $6830;
                        break;
                };
                var $6823 = $6826;
                break;
            case 'List.nil':
                var $6831 = List$nil;
                var $6823 = $6831;
                break;
        };
        return $6823;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Bits$concat = a0 => a1 => (a1 + a0);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Kind$Term$serialize$go$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6833 = self.indx;
                var self = ($6833 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $6833 <= 0n ? 0n : _depth$2 - $6833)))));
                    var $6835 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $6834 = $6835;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($6833)));
                    var $6836 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $6834 = $6836;
                };
                var $6832 = $6834;
                break;
            case 'Kind.Term.ref':
                var $6837 = self.name;
                var _name$7 = a1 => (a1 + (kind_name_to_bits($6837)));
                var $6838 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $6832 = $6838;
                break;
            case 'Kind.Term.all':
                var $6839 = self.eras;
                var $6840 = self.self;
                var $6841 = self.name;
                var $6842 = self.xtyp;
                var $6843 = self.body;
                var self = $6839;
                if (self) {
                    var $6845 = Bits$i;
                    var _eras$11 = $6845;
                } else {
                    var $6846 = Bits$o;
                    var _eras$11 = $6846;
                };
                var _self$12 = a1 => (a1 + (kind_name_to_bits($6840)));
                var _xtyp$13 = Kind$Term$serialize$go($6842)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Kind$Term$serialize$go($6843(Kind$Term$var$($6840, _depth$2))(Kind$Term$var$($6841, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $6844 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $6832 = $6844;
                break;
            case 'Kind.Term.lam':
                var $6847 = self.name;
                var $6848 = self.body;
                var _body$8 = Kind$Term$serialize$go($6848(Kind$Term$var$($6847, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6849 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $6832 = $6849;
                break;
            case 'Kind.Term.app':
                var $6850 = self.func;
                var $6851 = self.argm;
                var _func$8 = Kind$Term$serialize$go($6850)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Kind$Term$serialize$go($6851)(_depth$2)(_init$3)(_diff$4);
                var $6852 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $6832 = $6852;
                break;
            case 'Kind.Term.let':
                var $6853 = self.name;
                var $6854 = self.expr;
                var $6855 = self.body;
                var _expr$9 = Kind$Term$serialize$go($6854)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Kind$Term$serialize$go($6855(Kind$Term$var$($6853, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6856 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $6832 = $6856;
                break;
            case 'Kind.Term.def':
                var $6857 = self.expr;
                var $6858 = self.body;
                var $6859 = Kind$Term$serialize$go$($6858($6857), _depth$2, _init$3, _diff$4, _x$5);
                var $6832 = $6859;
                break;
            case 'Kind.Term.ann':
                var $6860 = self.term;
                var $6861 = Kind$Term$serialize$go$($6860, _depth$2, _init$3, _diff$4, _x$5);
                var $6832 = $6861;
                break;
            case 'Kind.Term.gol':
                var $6862 = self.name;
                var _name$9 = a1 => (a1 + (kind_name_to_bits($6862)));
                var $6863 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $6832 = $6863;
                break;
            case 'Kind.Term.nat':
                var $6864 = self.natx;
                var $6865 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($6864), _depth$2, _init$3, _diff$4, _x$5);
                var $6832 = $6865;
                break;
            case 'Kind.Term.chr':
                var $6866 = self.chrx;
                var $6867 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($6866), _depth$2, _init$3, _diff$4, _x$5);
                var $6832 = $6867;
                break;
            case 'Kind.Term.str':
                var $6868 = self.strx;
                var $6869 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($6868), _depth$2, _init$3, _diff$4, _x$5);
                var $6832 = $6869;
                break;
            case 'Kind.Term.ori':
                var $6870 = self.expr;
                var $6871 = Kind$Term$serialize$go$($6870, _depth$2, _init$3, _diff$4, _x$5);
                var $6832 = $6871;
                break;
            case 'Kind.Term.typ':
                var $6872 = (((_x$5 + '1') + '1') + '0');
                var $6832 = $6872;
                break;
            case 'Kind.Term.hol':
                var $6873 = _x$5;
                var $6832 = $6873;
                break;
            case 'Kind.Term.cse':
                var $6874 = _diff$4(_x$5);
                var $6832 = $6874;
                break;
        };
        return $6832;
    };
    const Kind$Term$serialize$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$go$(x0, x1, x2, x3, x4);

    function Kind$Term$serialize$(_term$1, _depth$2, _side$3) {
        var self = _side$3;
        if (self) {
            var $6876 = Bits$o;
            var _diff$4 = $6876;
        } else {
            var $6877 = Bits$i;
            var _diff$4 = $6877;
        };
        var $6875 = Kind$Term$serialize$go$(_term$1, _depth$2, _depth$2, _diff$4, Bits$e);
        return $6875;
    };
    const Kind$Term$serialize = x0 => x1 => x2 => Kind$Term$serialize$(x0, x1, x2);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, Bool$false);
        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, Bool$true);
        var $6878 = (_bh$5 === _ah$4);
        return $6878;
    };
    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);

    function Kind$Term$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $6880 = _to$3;
            var $6879 = $6880;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Kind.Term.var':
                    var $6882 = self.name;
                    var $6883 = self.indx;
                    var $6884 = Kind$Term$var$($6882, $6883);
                    var $6881 = $6884;
                    break;
                case 'Kind.Term.ref':
                    var $6885 = self.name;
                    var $6886 = Kind$Term$ref$($6885);
                    var $6881 = $6886;
                    break;
                case 'Kind.Term.all':
                    var $6887 = self.eras;
                    var $6888 = self.self;
                    var $6889 = self.name;
                    var $6890 = self.xtyp;
                    var $6891 = self.body;
                    var _xtyp$10 = Kind$Term$SmartMotive$replace$($6890, _from$2, _to$3, _lv$4);
                    var _body$11 = $6891(Kind$Term$ref$($6888))(Kind$Term$ref$($6889));
                    var _body$12 = Kind$Term$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $6892 = Kind$Term$all$($6887, $6888, $6889, _xtyp$10, (_s$13 => _x$14 => {
                        var $6893 = _body$12;
                        return $6893;
                    }));
                    var $6881 = $6892;
                    break;
                case 'Kind.Term.lam':
                    var $6894 = self.name;
                    var $6895 = self.body;
                    var _body$7 = $6895(Kind$Term$ref$($6894));
                    var _body$8 = Kind$Term$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6896 = Kind$Term$lam$($6894, (_x$9 => {
                        var $6897 = _body$8;
                        return $6897;
                    }));
                    var $6881 = $6896;
                    break;
                case 'Kind.Term.app':
                    var $6898 = self.func;
                    var $6899 = self.argm;
                    var _func$7 = Kind$Term$SmartMotive$replace$($6898, _from$2, _to$3, _lv$4);
                    var _argm$8 = Kind$Term$SmartMotive$replace$($6899, _from$2, _to$3, _lv$4);
                    var $6900 = Kind$Term$app$(_func$7, _argm$8);
                    var $6881 = $6900;
                    break;
                case 'Kind.Term.let':
                    var $6901 = self.name;
                    var $6902 = self.expr;
                    var $6903 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6902, _from$2, _to$3, _lv$4);
                    var _body$9 = $6903(Kind$Term$ref$($6901));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6904 = Kind$Term$let$($6901, _expr$8, (_x$11 => {
                        var $6905 = _body$10;
                        return $6905;
                    }));
                    var $6881 = $6904;
                    break;
                case 'Kind.Term.def':
                    var $6906 = self.name;
                    var $6907 = self.expr;
                    var $6908 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6907, _from$2, _to$3, _lv$4);
                    var _body$9 = $6908(Kind$Term$ref$($6906));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6909 = Kind$Term$def$($6906, _expr$8, (_x$11 => {
                        var $6910 = _body$10;
                        return $6910;
                    }));
                    var $6881 = $6909;
                    break;
                case 'Kind.Term.ann':
                    var $6911 = self.done;
                    var $6912 = self.term;
                    var $6913 = self.type;
                    var _term$8 = Kind$Term$SmartMotive$replace$($6912, _from$2, _to$3, _lv$4);
                    var _type$9 = Kind$Term$SmartMotive$replace$($6913, _from$2, _to$3, _lv$4);
                    var $6914 = Kind$Term$ann$($6911, _term$8, _type$9);
                    var $6881 = $6914;
                    break;
                case 'Kind.Term.ori':
                    var $6915 = self.expr;
                    var $6916 = Kind$Term$SmartMotive$replace$($6915, _from$2, _to$3, _lv$4);
                    var $6881 = $6916;
                    break;
                case 'Kind.Term.typ':
                    var $6917 = Kind$Term$typ;
                    var $6881 = $6917;
                    break;
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                    var $6918 = _term$1;
                    var $6881 = $6918;
                    break;
            };
            var $6879 = $6881;
        };
        return $6879;
    };
    const Kind$Term$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$replace$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {
        var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var $6919 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $6921 = self.fst;
                    var $6922 = self.snd;
                    var $6923 = Kind$Term$SmartMotive$replace$(_moti$11, $6922, Kind$Term$ref$($6921), _size$5);
                    var $6920 = $6923;
                    break;
            };
            return $6920;
        }));
        return $6919;
    };
    const Kind$Term$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);
        var self = _moti$2;
        switch (self._) {
            case 'Maybe.none':
                var $6925 = Kind$Term$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);
                var $6924 = $6925;
                break;
            case 'Maybe.some':
                var $6926 = _done$9;
                var $6924 = $6926;
                break;
        };
        return $6924;
    };
    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Kind$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Kind.Term.all':
                var $6928 = self.self;
                var $6929 = self.name;
                var $6930 = self.body;
                var $6931 = Kind$Term$lam$((() => {
                    var self = String$is_empty$($6929);
                    if (self) {
                        var $6932 = _name$1;
                        return $6932;
                    } else {
                        var $6933 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6929, List$nil))));
                        return $6933;
                    };
                })(), (_x$11 => {
                    var $6934 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $6930(Kind$Term$var$($6928, 0n))(Kind$Term$var$($6929, 0n)), _body$4, _defs$5);
                    return $6934;
                }));
                var $6927 = $6931;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.ori':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6936 = self.head;
                        var $6937 = self.tail;
                        var self = $6936;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6939 = self.name;
                                var $6940 = Kind$Term$lam$($6939, (_x$13 => {
                                    var $6941 = Kind$Term$desugar_cse$argument$(_name$1, $6937, _type$3, _body$4, _defs$5);
                                    return $6941;
                                }));
                                var $6938 = $6940;
                                break;
                        };
                        var $6935 = $6938;
                        break;
                    case 'List.nil':
                        var $6942 = _body$4;
                        var $6935 = $6942;
                        break;
                };
                var $6927 = $6935;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6944 = self.head;
                        var $6945 = self.tail;
                        var self = $6944;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6947 = self.name;
                                var $6948 = Kind$Term$lam$($6947, (_x$12 => {
                                    var $6949 = Kind$Term$desugar_cse$argument$(_name$1, $6945, _type$3, _body$4, _defs$5);
                                    return $6949;
                                }));
                                var $6946 = $6948;
                                break;
                        };
                        var $6943 = $6946;
                        break;
                    case 'List.nil':
                        var $6950 = _body$4;
                        var $6943 = $6950;
                        break;
                };
                var $6927 = $6943;
                break;
            case 'Kind.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6952 = self.head;
                        var $6953 = self.tail;
                        var self = $6952;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6955 = self.name;
                                var $6956 = Kind$Term$lam$($6955, (_x$11 => {
                                    var $6957 = Kind$Term$desugar_cse$argument$(_name$1, $6953, _type$3, _body$4, _defs$5);
                                    return $6957;
                                }));
                                var $6954 = $6956;
                                break;
                        };
                        var $6951 = $6954;
                        break;
                    case 'List.nil':
                        var $6958 = _body$4;
                        var $6951 = $6958;
                        break;
                };
                var $6927 = $6951;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6960 = self.head;
                        var $6961 = self.tail;
                        var self = $6960;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6963 = self.name;
                                var $6964 = Kind$Term$lam$($6963, (_x$14 => {
                                    var $6965 = Kind$Term$desugar_cse$argument$(_name$1, $6961, _type$3, _body$4, _defs$5);
                                    return $6965;
                                }));
                                var $6962 = $6964;
                                break;
                        };
                        var $6959 = $6962;
                        break;
                    case 'List.nil':
                        var $6966 = _body$4;
                        var $6959 = $6966;
                        break;
                };
                var $6927 = $6959;
                break;
            case 'Kind.Term.cse':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6968 = self.head;
                        var $6969 = self.tail;
                        var self = $6968;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6971 = self.name;
                                var $6972 = Kind$Term$lam$($6971, (_x$17 => {
                                    var $6973 = Kind$Term$desugar_cse$argument$(_name$1, $6969, _type$3, _body$4, _defs$5);
                                    return $6973;
                                }));
                                var $6970 = $6972;
                                break;
                        };
                        var $6967 = $6970;
                        break;
                    case 'List.nil':
                        var $6974 = _body$4;
                        var $6967 = $6974;
                        break;
                };
                var $6927 = $6967;
                break;
        };
        return $6927;
    };
    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.some':
                var $6976 = self.value;
                var $6977 = Maybe$some$($6976);
                var $6975 = $6977;
                break;
            case 'Maybe.none':
                var $6978 = _b$3;
                var $6975 = $6978;
                break;
        };
        return $6975;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6979 = self.self;
                        var $6980 = self.name;
                        var $6981 = self.xtyp;
                        var $6982 = self.body;
                        var _argm$13 = Maybe$or$(Kind$Map$get$($6980, _cses$4), Kind$Map$get$("_", _cses$4));
                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + ("_" + ($6980 + "_case")))));
                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $6981, _argm$14, _defs$6);
                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);
                        var _type$17 = $6982(Kind$Term$var$($6979, 0n))(Kind$Term$var$($6980, 0n));
                        var $6983 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                        return $6983;
                    case 'Kind.Term.var':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.ori':
                        var _expr$10 = (() => {
                            var $6986 = _expr$1;
                            var $6987 = _wyth$3;
                            let _expr$11 = $6986;
                            let _defn$10;
                            while ($6987._ === 'List.cons') {
                                _defn$10 = $6987.head;
                                var $6986 = Kind$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6988 = self.term;
                                            var $6989 = $6988;
                                            return $6989;
                                    };
                                })());
                                _expr$11 = $6986;
                                $6987 = $6987.tail;
                            }
                            return _expr$11;
                        })();
                        var $6984 = _expr$10;
                        return $6984;
                    case 'Kind.Term.ref':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                        var _expr$9 = (() => {
                            var $6992 = _expr$1;
                            var $6993 = _wyth$3;
                            let _expr$10 = $6992;
                            let _defn$9;
                            while ($6993._ === 'List.cons') {
                                _defn$9 = $6993.head;
                                var $6992 = Kind$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6994 = self.term;
                                            var $6995 = $6994;
                                            return $6995;
                                    };
                                })());
                                _expr$10 = $6992;
                                $6993 = $6993.tail;
                            }
                            return _expr$10;
                        })();
                        var $6990 = _expr$9;
                        return $6990;
                    case 'Kind.Term.typ':
                        var _expr$8 = (() => {
                            var $6998 = _expr$1;
                            var $6999 = _wyth$3;
                            let _expr$9 = $6998;
                            let _defn$8;
                            while ($6999._ === 'List.cons') {
                                _defn$8 = $6999.head;
                                var $6998 = Kind$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $7000 = self.term;
                                            var $7001 = $7000;
                                            return $7001;
                                    };
                                })());
                                _expr$9 = $6998;
                                $6999 = $6999.tail;
                            }
                            return _expr$9;
                        })();
                        var $6996 = _expr$8;
                        return $6996;
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                        var _expr$11 = (() => {
                            var $7004 = _expr$1;
                            var $7005 = _wyth$3;
                            let _expr$12 = $7004;
                            let _defn$11;
                            while ($7005._ === 'List.cons') {
                                _defn$11 = $7005.head;
                                var $7004 = Kind$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $7006 = self.term;
                                            var $7007 = $7006;
                                            return $7007;
                                    };
                                })());
                                _expr$12 = $7004;
                                $7005 = $7005.tail;
                            }
                            return _expr$12;
                        })();
                        var $7002 = _expr$11;
                        return $7002;
                    case 'Kind.Term.cse':
                        var _expr$14 = (() => {
                            var $7010 = _expr$1;
                            var $7011 = _wyth$3;
                            let _expr$15 = $7010;
                            let _defn$14;
                            while ($7011._ === 'List.cons') {
                                _defn$14 = $7011.head;
                                var $7010 = Kind$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $7012 = self.term;
                                            var $7013 = $7012;
                                            return $7013;
                                    };
                                })());
                                _expr$15 = $7010;
                                $7011 = $7011.tail;
                            }
                            return _expr$15;
                        })();
                        var $7008 = _expr$14;
                        return $7008;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {
        var self = Kind$Term$reduce$(_etyp$6, _defs$8);
        switch (self._) {
            case 'Kind.Term.all':
                var $7015 = self.self;
                var $7016 = self.name;
                var $7017 = self.xtyp;
                var $7018 = self.body;
                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));
                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $7017, _moti$15, _defs$8);
                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);
                var _type$18 = $7018(Kind$Term$var$($7015, 0n))(Kind$Term$var$($7016, 0n));
                var $7019 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));
                var $7014 = $7019;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7020 = Maybe$none;
                var $7014 = $7020;
                break;
        };
        return $7014;
    };
    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $7021 = ({
            _: 'Kind.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $7021;
    };
    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);

    function BitsSet$has$(_bits$1, _set$2) {
        var self = (bitsmap_get(_bits$1, _set$2));
        switch (self._) {
            case 'Maybe.none':
                var $7023 = Bool$false;
                var $7022 = $7023;
                break;
            case 'Maybe.some':
                var $7024 = Bool$true;
                var $7022 = $7024;
                break;
        };
        return $7022;
    };
    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);

    function BitsSet$mut$has$(_bits$1, _set$2) {
        var $7025 = BitsSet$has$(_bits$1, _set$2);
        return $7025;
    };
    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);

    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {
        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({
            ctr: 'TCO',
            arg: [_term$1, _arity$2]
        });
        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);
        var arg = [_term$1, _arity$2];
        while (true) {
            let [_term$1, _arity$2] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $7026 = self.name;
                        var $7027 = Maybe$some$(Pair$new$($7026, _arity$2));
                        return $7027;
                    case 'Kind.Term.ref':
                        var $7028 = self.name;
                        var $7029 = Maybe$some$(Pair$new$($7028, _arity$2));
                        return $7029;
                    case 'Kind.Term.app':
                        var $7030 = self.func;
                        var $7031 = Kind$Term$equal$extra_holes$funari$($7030, Nat$succ$(_arity$2));
                        return $7031;
                    case 'Kind.Term.ori':
                        var $7032 = self.expr;
                        var $7033 = Kind$Term$equal$extra_holes$funari$($7032, _arity$2);
                        return $7033;
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7034 = Maybe$none;
                        return $7034;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);

    function Kind$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.all':
                var $7036 = self.xtyp;
                var $7037 = self.body;
                var $7038 = (Kind$Term$has_holes$($7036) || Kind$Term$has_holes$($7037(Kind$Term$typ)(Kind$Term$typ)));
                var $7035 = $7038;
                break;
            case 'Kind.Term.lam':
                var $7039 = self.body;
                var $7040 = Kind$Term$has_holes$($7039(Kind$Term$typ));
                var $7035 = $7040;
                break;
            case 'Kind.Term.app':
                var $7041 = self.func;
                var $7042 = self.argm;
                var $7043 = (Kind$Term$has_holes$($7041) || Kind$Term$has_holes$($7042));
                var $7035 = $7043;
                break;
            case 'Kind.Term.let':
                var $7044 = self.expr;
                var $7045 = self.body;
                var $7046 = (Kind$Term$has_holes$($7044) || Kind$Term$has_holes$($7045(Kind$Term$typ)));
                var $7035 = $7046;
                break;
            case 'Kind.Term.def':
                var $7047 = self.expr;
                var $7048 = self.body;
                var $7049 = (Kind$Term$has_holes$($7047) || Kind$Term$has_holes$($7048(Kind$Term$typ)));
                var $7035 = $7049;
                break;
            case 'Kind.Term.ann':
                var $7050 = self.term;
                var $7051 = self.type;
                var $7052 = (Kind$Term$has_holes$($7050) || Kind$Term$has_holes$($7051));
                var $7035 = $7052;
                break;
            case 'Kind.Term.ori':
                var $7053 = self.expr;
                var $7054 = Kind$Term$has_holes$($7053);
                var $7035 = $7054;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $7055 = Bool$false;
                var $7035 = $7055;
                break;
            case 'Kind.Term.hol':
                var $7056 = Bool$true;
                var $7035 = $7056;
                break;
        };
        return $7035;
    };
    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);

    function Kind$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var self = Kind$Term$has_holes$(_term$2);
                if (self) {
                    var $7059 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                    var $7058 = $7059;
                } else {
                    var $7060 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));
                    var $7058 = $7060;
                };
                var $7057 = $7058;
                break;
            case 'Kind.Term.hol':
                var $7061 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $7057 = $7061;
                break;
        };
        return $7057;
    };
    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);

    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Kind.Term.app':
                var $7063 = self.func;
                var $7064 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $7066 = self.func;
                        var $7067 = self.argm;
                        var self = Kind$Term$equal$extra_holes$filler$($7063, $7066);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7069 = self.value;
                                var $7070 = self.errors;
                                var self = $7069;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7072 = Kind$Check$result$(Maybe$none, $7070);
                                        var $7071 = $7072;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Term$equal$extra_holes$filler$($7064, $7067);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7074 = self.value;
                                                var $7075 = self.errors;
                                                var $7076 = Kind$Check$result$($7074, List$concat$($7070, $7075));
                                                var $7073 = $7076;
                                                break;
                                        };
                                        var $7071 = $7073;
                                        break;
                                };
                                var $7068 = $7071;
                                break;
                        };
                        var $7065 = $7068;
                        break;
                    case 'Kind.Term.hol':
                        var $7077 = self.path;
                        var self = Kind$Term$equal$hole$($7077, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7079 = self.value;
                                var $7080 = self.errors;
                                var self = $7079;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7082 = Kind$Check$result$(Maybe$none, $7080);
                                        var $7081 = $7082;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7084 = self.value;
                                                var $7085 = self.errors;
                                                var $7086 = Kind$Check$result$($7084, List$concat$($7080, $7085));
                                                var $7083 = $7086;
                                                break;
                                        };
                                        var $7081 = $7083;
                                        break;
                                };
                                var $7078 = $7081;
                                break;
                        };
                        var $7065 = $7078;
                        break;
                    case 'Kind.Term.ori':
                        var $7087 = self.expr;
                        var $7088 = Kind$Term$equal$extra_holes$filler$(_a$1, $7087);
                        var $7065 = $7088;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7089 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7065 = $7089;
                        break;
                };
                var $7062 = $7065;
                break;
            case 'Kind.Term.hol':
                var $7090 = self.path;
                var self = Kind$Term$equal$hole$($7090, _b$2);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7092 = self.value;
                        var $7093 = self.errors;
                        var self = $7092;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7095 = Kind$Check$result$(Maybe$none, $7093);
                                var $7094 = $7095;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7097 = self.value;
                                        var $7098 = self.errors;
                                        var $7099 = Kind$Check$result$($7097, List$concat$($7093, $7098));
                                        var $7096 = $7099;
                                        break;
                                };
                                var $7094 = $7096;
                                break;
                        };
                        var $7091 = $7094;
                        break;
                };
                var $7062 = $7091;
                break;
            case 'Kind.Term.ori':
                var $7100 = self.expr;
                var $7101 = Kind$Term$equal$extra_holes$filler$($7100, _b$2);
                var $7062 = $7101;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7103 = self.path;
                        var self = Kind$Term$equal$hole$($7103, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7105 = self.value;
                                var $7106 = self.errors;
                                var self = $7105;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7108 = Kind$Check$result$(Maybe$none, $7106);
                                        var $7107 = $7108;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7110 = self.value;
                                                var $7111 = self.errors;
                                                var $7112 = Kind$Check$result$($7110, List$concat$($7106, $7111));
                                                var $7109 = $7112;
                                                break;
                                        };
                                        var $7107 = $7109;
                                        break;
                                };
                                var $7104 = $7107;
                                break;
                        };
                        var $7102 = $7104;
                        break;
                    case 'Kind.Term.ori':
                        var $7113 = self.expr;
                        var $7114 = Kind$Term$equal$extra_holes$filler$(_a$1, $7113);
                        var $7102 = $7114;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7115 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7102 = $7115;
                        break;
                };
                var $7062 = $7102;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7117 = self.path;
                        var self = Kind$Term$equal$hole$($7117, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7119 = self.value;
                                var $7120 = self.errors;
                                var self = $7119;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7122 = Kind$Check$result$(Maybe$none, $7120);
                                        var $7121 = $7122;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7124 = self.value;
                                                var $7125 = self.errors;
                                                var $7126 = Kind$Check$result$($7124, List$concat$($7120, $7125));
                                                var $7123 = $7126;
                                                break;
                                        };
                                        var $7121 = $7123;
                                        break;
                                };
                                var $7118 = $7121;
                                break;
                        };
                        var $7116 = $7118;
                        break;
                    case 'Kind.Term.ori':
                        var $7127 = self.expr;
                        var $7128 = Kind$Term$equal$extra_holes$filler$(_a$1, $7127);
                        var $7116 = $7128;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7129 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7116 = $7129;
                        break;
                };
                var $7062 = $7116;
                break;
            case 'Kind.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7131 = self.path;
                        var self = Kind$Term$equal$hole$($7131, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7133 = self.value;
                                var $7134 = self.errors;
                                var self = $7133;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7136 = Kind$Check$result$(Maybe$none, $7134);
                                        var $7135 = $7136;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7138 = self.value;
                                                var $7139 = self.errors;
                                                var $7140 = Kind$Check$result$($7138, List$concat$($7134, $7139));
                                                var $7137 = $7140;
                                                break;
                                        };
                                        var $7135 = $7137;
                                        break;
                                };
                                var $7132 = $7135;
                                break;
                        };
                        var $7130 = $7132;
                        break;
                    case 'Kind.Term.ori':
                        var $7141 = self.expr;
                        var $7142 = Kind$Term$equal$extra_holes$filler$(_a$1, $7141);
                        var $7130 = $7142;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7143 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7130 = $7143;
                        break;
                };
                var $7062 = $7130;
                break;
            case 'Kind.Term.all':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7145 = self.path;
                        var self = Kind$Term$equal$hole$($7145, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7147 = self.value;
                                var $7148 = self.errors;
                                var self = $7147;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7150 = Kind$Check$result$(Maybe$none, $7148);
                                        var $7149 = $7150;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7152 = self.value;
                                                var $7153 = self.errors;
                                                var $7154 = Kind$Check$result$($7152, List$concat$($7148, $7153));
                                                var $7151 = $7154;
                                                break;
                                        };
                                        var $7149 = $7151;
                                        break;
                                };
                                var $7146 = $7149;
                                break;
                        };
                        var $7144 = $7146;
                        break;
                    case 'Kind.Term.ori':
                        var $7155 = self.expr;
                        var $7156 = Kind$Term$equal$extra_holes$filler$(_a$1, $7155);
                        var $7144 = $7156;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7157 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7144 = $7157;
                        break;
                };
                var $7062 = $7144;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7159 = self.path;
                        var self = Kind$Term$equal$hole$($7159, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7161 = self.value;
                                var $7162 = self.errors;
                                var self = $7161;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7164 = Kind$Check$result$(Maybe$none, $7162);
                                        var $7163 = $7164;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7166 = self.value;
                                                var $7167 = self.errors;
                                                var $7168 = Kind$Check$result$($7166, List$concat$($7162, $7167));
                                                var $7165 = $7168;
                                                break;
                                        };
                                        var $7163 = $7165;
                                        break;
                                };
                                var $7160 = $7163;
                                break;
                        };
                        var $7158 = $7160;
                        break;
                    case 'Kind.Term.ori':
                        var $7169 = self.expr;
                        var $7170 = Kind$Term$equal$extra_holes$filler$(_a$1, $7169);
                        var $7158 = $7170;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7171 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7158 = $7171;
                        break;
                };
                var $7062 = $7158;
                break;
            case 'Kind.Term.cse':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $7173 = self.path;
                        var self = Kind$Term$equal$hole$($7173, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7175 = self.value;
                                var $7176 = self.errors;
                                var self = $7175;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7178 = Kind$Check$result$(Maybe$none, $7176);
                                        var $7177 = $7178;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7180 = self.value;
                                                var $7181 = self.errors;
                                                var $7182 = Kind$Check$result$($7180, List$concat$($7176, $7181));
                                                var $7179 = $7182;
                                                break;
                                        };
                                        var $7177 = $7179;
                                        break;
                                };
                                var $7174 = $7177;
                                break;
                        };
                        var $7172 = $7174;
                        break;
                    case 'Kind.Term.ori':
                        var $7183 = self.expr;
                        var $7184 = Kind$Term$equal$extra_holes$filler$(_a$1, $7183);
                        var $7172 = $7184;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7185 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7172 = $7185;
                        break;
                };
                var $7062 = $7172;
                break;
        };
        return $7062;
    };
    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);

    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);
        switch (self._) {
            case 'Maybe.some':
                var $7187 = self.value;
                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);
                switch (self._) {
                    case 'Maybe.some':
                        var $7189 = self.value;
                        var self = $7187;
                        switch (self._) {
                            case 'Pair.new':
                                var $7191 = self.fst;
                                var $7192 = self.snd;
                                var self = $7189;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $7194 = self.fst;
                                        var $7195 = self.snd;
                                        var _same_fun$9 = ($7191 === $7194);
                                        var _same_ari$10 = ($7192 === $7195);
                                        var self = (_same_fun$9 && _same_ari$10);
                                        if (self) {
                                            var $7197 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);
                                            var $7196 = $7197;
                                        } else {
                                            var $7198 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                            var $7196 = $7198;
                                        };
                                        var $7193 = $7196;
                                        break;
                                };
                                var $7190 = $7193;
                                break;
                        };
                        var $7188 = $7190;
                        break;
                    case 'Maybe.none':
                        var $7199 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $7188 = $7199;
                        break;
                };
                var $7186 = $7188;
                break;
            case 'Maybe.none':
                var $7200 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                var $7186 = $7200;
                break;
        };
        return $7186;
    };
    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);

    function BitsSet$set$(_bits$1, _set$2) {
        var $7201 = (bitsmap_set(_bits$1, Unit$new, _set$2, 'set'));
        return $7201;
    };
    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);

    function BitsSet$mut$set$(_bits$1, _set$2) {
        var $7202 = BitsSet$set$(_bits$1, _set$2);
        return $7202;
    };
    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $7204 = _b$2;
            var $7203 = $7204;
        } else {
            var $7205 = (!_b$2);
            var $7203 = $7205;
        };
        return $7203;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Kind$Term$equal$go$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, Bool$false);
        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, Bool$true);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $7207 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $7206 = $7207;
        } else {
            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, Bool$false);
            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, Bool$true);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $7209 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $7208 = $7209;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = BitsSet$mut$has$(_id$12, _seen$5);
                if (self) {
                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $7212 = self.value;
                            var $7213 = self.errors;
                            var self = $7212;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7215 = Kind$Check$result$(Maybe$none, $7213);
                                    var $7214 = $7215;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7217 = self.value;
                                            var $7218 = self.errors;
                                            var $7219 = Kind$Check$result$($7217, List$concat$($7213, $7218));
                                            var $7216 = $7219;
                                            break;
                                    };
                                    var $7214 = $7216;
                                    break;
                            };
                            var $7211 = $7214;
                            break;
                    };
                    var $7210 = $7211;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Kind.Term.all':
                            var $7221 = self.eras;
                            var $7222 = self.self;
                            var $7223 = self.name;
                            var $7224 = self.xtyp;
                            var $7225 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.all':
                                    var $7227 = self.eras;
                                    var $7228 = self.self;
                                    var $7229 = self.name;
                                    var $7230 = self.xtyp;
                                    var $7231 = self.body;
                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $7225(Kind$Term$var$($7222, _lv$4))(Kind$Term$var$($7223, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $7231(Kind$Term$var$($7228, _lv$4))(Kind$Term$var$($7229, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($7222 === $7228);
                                    var _eq_eras$27 = Bool$eql$($7221, $7227);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Kind$Term$equal$go$($7224, $7230, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7234 = self.value;
                                                var $7235 = self.errors;
                                                var self = $7234;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7237 = self.value;
                                                        var self = Kind$Term$equal$go$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $7239 = self.value;
                                                                var $7240 = self.errors;
                                                                var self = $7239;
                                                                switch (self._) {
                                                                    case 'Maybe.some':
                                                                        var $7242 = self.value;
                                                                        var self = Kind$Check$result$(Maybe$some$(($7237 && $7242)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Kind.Check.result':
                                                                                var $7244 = self.value;
                                                                                var $7245 = self.errors;
                                                                                var $7246 = Kind$Check$result$($7244, List$concat$($7240, $7245));
                                                                                var $7243 = $7246;
                                                                                break;
                                                                        };
                                                                        var $7241 = $7243;
                                                                        break;
                                                                    case 'Maybe.none':
                                                                        var $7247 = Kind$Check$result$(Maybe$none, $7240);
                                                                        var $7241 = $7247;
                                                                        break;
                                                                };
                                                                var self = $7241;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $7248 = self.value;
                                                                var $7249 = self.errors;
                                                                var $7250 = Kind$Check$result$($7248, List$concat$($7235, $7249));
                                                                var $7238 = $7250;
                                                                break;
                                                        };
                                                        var $7236 = $7238;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $7251 = Kind$Check$result$(Maybe$none, $7235);
                                                        var $7236 = $7251;
                                                        break;
                                                };
                                                var $7233 = $7236;
                                                break;
                                        };
                                        var $7232 = $7233;
                                    } else {
                                        var $7252 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7232 = $7252;
                                    };
                                    var $7226 = $7232;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7253 = self.path;
                                    var $7254 = Kind$Term$equal$hole$($7253, _a$1);
                                    var $7226 = $7254;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7255 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7226 = $7255;
                                    break;
                            };
                            var $7220 = $7226;
                            break;
                        case 'Kind.Term.lam':
                            var $7256 = self.name;
                            var $7257 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.lam':
                                    var $7259 = self.name;
                                    var $7260 = self.body;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $7257(Kind$Term$var$($7256, _lv$4));
                                    var _b1_body$19 = $7260(Kind$Term$var$($7259, _lv$4));
                                    var self = Kind$Term$equal$go$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7262 = self.value;
                                            var $7263 = self.errors;
                                            var self = $7262;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7265 = self.value;
                                                    var self = Kind$Check$result$(Maybe$some$($7265), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7267 = self.value;
                                                            var $7268 = self.errors;
                                                            var $7269 = Kind$Check$result$($7267, List$concat$($7263, $7268));
                                                            var $7266 = $7269;
                                                            break;
                                                    };
                                                    var $7264 = $7266;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7270 = Kind$Check$result$(Maybe$none, $7263);
                                                    var $7264 = $7270;
                                                    break;
                                            };
                                            var $7261 = $7264;
                                            break;
                                    };
                                    var $7258 = $7261;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7271 = self.path;
                                    var $7272 = Kind$Term$equal$hole$($7271, _a$1);
                                    var $7258 = $7272;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7273 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7273;
                                    break;
                            };
                            var $7220 = $7258;
                            break;
                        case 'Kind.Term.app':
                            var $7274 = self.func;
                            var $7275 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.app':
                                    var $7277 = self.func;
                                    var $7278 = self.argm;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var self = Kind$Term$equal$go$($7274, $7277, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7280 = self.value;
                                            var $7281 = self.errors;
                                            var self = $7280;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7283 = self.value;
                                                    var self = Kind$Term$equal$go$($7275, $7278, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7285 = self.value;
                                                            var $7286 = self.errors;
                                                            var self = $7285;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $7288 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($7283 && $7288)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $7290 = self.value;
                                                                            var $7291 = self.errors;
                                                                            var $7292 = Kind$Check$result$($7290, List$concat$($7286, $7291));
                                                                            var $7289 = $7292;
                                                                            break;
                                                                    };
                                                                    var $7287 = $7289;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $7293 = Kind$Check$result$(Maybe$none, $7286);
                                                                    var $7287 = $7293;
                                                                    break;
                                                            };
                                                            var self = $7287;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7294 = self.value;
                                                            var $7295 = self.errors;
                                                            var $7296 = Kind$Check$result$($7294, List$concat$($7281, $7295));
                                                            var $7284 = $7296;
                                                            break;
                                                    };
                                                    var $7282 = $7284;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7297 = Kind$Check$result$(Maybe$none, $7281);
                                                    var $7282 = $7297;
                                                    break;
                                            };
                                            var $7279 = $7282;
                                            break;
                                    };
                                    var $7276 = $7279;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7298 = self.path;
                                    var $7299 = Kind$Term$equal$hole$($7298, _a$1);
                                    var $7276 = $7299;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7300 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7276 = $7300;
                                    break;
                            };
                            var $7220 = $7276;
                            break;
                        case 'Kind.Term.let':
                            var $7301 = self.name;
                            var $7302 = self.expr;
                            var $7303 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.let':
                                    var $7305 = self.name;
                                    var $7306 = self.expr;
                                    var $7307 = self.body;
                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $7303(Kind$Term$var$($7301, _lv$4));
                                    var _b1_body$21 = $7307(Kind$Term$var$($7305, _lv$4));
                                    var self = Kind$Term$equal$go$($7302, $7306, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7309 = self.value;
                                            var $7310 = self.errors;
                                            var self = $7309;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7312 = self.value;
                                                    var self = Kind$Term$equal$go$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7314 = self.value;
                                                            var $7315 = self.errors;
                                                            var self = $7314;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $7317 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($7312 && $7317)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $7319 = self.value;
                                                                            var $7320 = self.errors;
                                                                            var $7321 = Kind$Check$result$($7319, List$concat$($7315, $7320));
                                                                            var $7318 = $7321;
                                                                            break;
                                                                    };
                                                                    var $7316 = $7318;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $7322 = Kind$Check$result$(Maybe$none, $7315);
                                                                    var $7316 = $7322;
                                                                    break;
                                                            };
                                                            var self = $7316;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7323 = self.value;
                                                            var $7324 = self.errors;
                                                            var $7325 = Kind$Check$result$($7323, List$concat$($7310, $7324));
                                                            var $7313 = $7325;
                                                            break;
                                                    };
                                                    var $7311 = $7313;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7326 = Kind$Check$result$(Maybe$none, $7310);
                                                    var $7311 = $7326;
                                                    break;
                                            };
                                            var $7308 = $7311;
                                            break;
                                    };
                                    var $7304 = $7308;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7327 = self.path;
                                    var $7328 = Kind$Term$equal$hole$($7327, _a$1);
                                    var $7304 = $7328;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7329 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7304 = $7329;
                                    break;
                            };
                            var $7220 = $7304;
                            break;
                        case 'Kind.Term.hol':
                            var $7330 = self.path;
                            var $7331 = Kind$Term$equal$hole$($7330, _b$2);
                            var $7220 = $7331;
                            break;
                        case 'Kind.Term.var':
                        case 'Kind.Term.ori':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7333 = self.path;
                                    var $7334 = Kind$Term$equal$hole$($7333, _a$1);
                                    var $7332 = $7334;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7335 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7332 = $7335;
                                    break;
                            };
                            var $7220 = $7332;
                            break;
                        case 'Kind.Term.ref':
                        case 'Kind.Term.nat':
                        case 'Kind.Term.chr':
                        case 'Kind.Term.str':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7337 = self.path;
                                    var $7338 = Kind$Term$equal$hole$($7337, _a$1);
                                    var $7336 = $7338;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7339 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7336 = $7339;
                                    break;
                            };
                            var $7220 = $7336;
                            break;
                        case 'Kind.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7341 = self.path;
                                    var $7342 = Kind$Term$equal$hole$($7341, _a$1);
                                    var $7340 = $7342;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7343 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7340 = $7343;
                                    break;
                            };
                            var $7220 = $7340;
                            break;
                        case 'Kind.Term.def':
                        case 'Kind.Term.ann':
                        case 'Kind.Term.gol':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7345 = self.path;
                                    var $7346 = Kind$Term$equal$hole$($7345, _a$1);
                                    var $7344 = $7346;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7347 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7344 = $7347;
                                    break;
                            };
                            var $7220 = $7344;
                            break;
                        case 'Kind.Term.cse':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7349 = self.path;
                                    var $7350 = Kind$Term$equal$hole$($7349, _a$1);
                                    var $7348 = $7350;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7351 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7348 = $7351;
                                    break;
                            };
                            var $7220 = $7348;
                            break;
                    };
                    var $7210 = $7220;
                };
                var $7208 = $7210;
            };
            var $7206 = $7208;
        };
        return $7206;
    };
    const Kind$Term$equal$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$go$(x0, x1, x2, x3, x4);
    const BitsSet$new = BitsMap$new;

    function BitsSet$mut$new$(_a$1) {
        var $7352 = BitsSet$new;
        return $7352;
    };
    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);

    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7354 = self.name;
                var $7355 = self.indx;
                var self = List$at_last$($7355, _ctx$4);
                switch (self._) {
                    case 'Maybe.some':
                        var $7357 = self.value;
                        var $7358 = Kind$Check$result$(Maybe$some$((() => {
                            var self = $7357;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7359 = self.snd;
                                    var $7360 = $7359;
                                    return $7360;
                            };
                        })()), List$nil);
                        var $7356 = $7358;
                        break;
                    case 'Maybe.none':
                        var $7361 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7354), List$nil));
                        var $7356 = $7361;
                        break;
                };
                var self = $7356;
                break;
            case 'Kind.Term.ref':
                var $7362 = self.name;
                var self = Kind$Map$get$($7362, _defs$3);
                switch (self._) {
                    case 'Maybe.some':
                        var $7364 = self.value;
                        var self = $7364;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7366 = self.name;
                                var $7367 = self.term;
                                var $7368 = self.type;
                                var $7369 = self.stat;
                                var _ref_name$18 = $7366;
                                var _ref_type$19 = $7368;
                                var _ref_term$20 = $7367;
                                var _ref_stat$21 = $7369;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                        var $7371 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));
                                        var $7370 = $7371;
                                        break;
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $7372 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $7370 = $7372;
                                        break;
                                    case 'Kind.Status.fail':
                                        var $7373 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));
                                        var $7370 = $7373;
                                        break;
                                };
                                var $7365 = $7370;
                                break;
                        };
                        var $7363 = $7365;
                        break;
                    case 'Maybe.none':
                        var $7374 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7362), List$nil));
                        var $7363 = $7374;
                        break;
                };
                var self = $7363;
                break;
            case 'Kind.Term.all':
                var $7375 = self.self;
                var $7376 = self.name;
                var $7377 = self.xtyp;
                var $7378 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Kind$Term$var$($7375, _ctx_size$12);
                var _body_var$14 = Kind$Term$var$($7376, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7376, $7377), List$cons$(Pair$new$($7375, _term$1), _ctx$4));
                var self = Kind$Term$check$($7377, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7380 = self.value;
                        var $7381 = self.errors;
                        var self = $7380;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7383 = Kind$Check$result$(Maybe$none, $7381);
                                var $7382 = $7383;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Term$check$($7378(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7385 = self.value;
                                        var $7386 = self.errors;
                                        var self = $7385;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7388 = Kind$Check$result$(Maybe$none, $7386);
                                                var $7387 = $7388;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7390 = self.value;
                                                        var $7391 = self.errors;
                                                        var $7392 = Kind$Check$result$($7390, List$concat$($7386, $7391));
                                                        var $7389 = $7392;
                                                        break;
                                                };
                                                var $7387 = $7389;
                                                break;
                                        };
                                        var self = $7387;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7393 = self.value;
                                        var $7394 = self.errors;
                                        var $7395 = Kind$Check$result$($7393, List$concat$($7381, $7394));
                                        var $7384 = $7395;
                                        break;
                                };
                                var $7382 = $7384;
                                break;
                        };
                        var $7379 = $7382;
                        break;
                };
                var self = $7379;
                break;
            case 'Kind.Term.lam':
                var $7396 = self.name;
                var $7397 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7399 = self.value;
                        var _typv$10 = Kind$Term$reduce$($7399, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Kind.Term.all':
                                var $7401 = self.xtyp;
                                var $7402 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Kind$Term$var$($7396, _ctx_size$16);
                                var _body_typ$19 = $7402(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7396, $7401), _ctx$4);
                                var self = Kind$Term$check$($7397(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7404 = self.value;
                                        var $7405 = self.errors;
                                        var self = $7404;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7407 = Kind$Check$result$(Maybe$none, $7405);
                                                var $7406 = $7407;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$($7399), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7409 = self.value;
                                                        var $7410 = self.errors;
                                                        var $7411 = Kind$Check$result$($7409, List$concat$($7405, $7410));
                                                        var $7408 = $7411;
                                                        break;
                                                };
                                                var $7406 = $7408;
                                                break;
                                        };
                                        var $7403 = $7406;
                                        break;
                                };
                                var $7400 = $7403;
                                break;
                            case 'Kind.Term.var':
                            case 'Kind.Term.lam':
                            case 'Kind.Term.app':
                            case 'Kind.Term.ori':
                                var _expected$13 = Either$left$("function");
                                var _detected$14 = Either$right$($7399);
                                var $7412 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7400 = $7412;
                                break;
                            case 'Kind.Term.ref':
                            case 'Kind.Term.hol':
                            case 'Kind.Term.nat':
                            case 'Kind.Term.chr':
                            case 'Kind.Term.str':
                                var _expected$12 = Either$left$("function");
                                var _detected$13 = Either$right$($7399);
                                var $7413 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7400 = $7413;
                                break;
                            case 'Kind.Term.typ':
                                var _expected$11 = Either$left$("function");
                                var _detected$12 = Either$right$($7399);
                                var $7414 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7400 = $7414;
                                break;
                            case 'Kind.Term.let':
                            case 'Kind.Term.def':
                            case 'Kind.Term.ann':
                            case 'Kind.Term.gol':
                                var _expected$14 = Either$left$("function");
                                var _detected$15 = Either$right$($7399);
                                var $7415 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7400 = $7415;
                                break;
                            case 'Kind.Term.cse':
                                var _expected$17 = Either$left$("function");
                                var _detected$18 = Either$right$($7399);
                                var $7416 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7400 = $7416;
                                break;
                        };
                        var $7398 = $7400;
                        break;
                    case 'Maybe.none':
                        var _lam_type$9 = Kind$Term$hol$(Bits$e);
                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7417 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7398 = $7417;
                        break;
                };
                var self = $7398;
                break;
            case 'Kind.Term.app':
                var $7418 = self.func;
                var $7419 = self.argm;
                var self = Kind$Term$check$($7418, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7421 = self.value;
                        var $7422 = self.errors;
                        var self = $7421;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7424 = self.value;
                                var _func_typ$12 = Kind$Term$reduce$($7424, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Kind.Term.all':
                                        var $7426 = self.xtyp;
                                        var $7427 = self.body;
                                        var self = Kind$Term$check$($7419, Maybe$some$($7426), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7429 = self.value;
                                                var $7430 = self.errors;
                                                var self = $7429;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7432 = Kind$Check$result$(Maybe$none, $7430);
                                                        var $7431 = $7432;
                                                        break;
                                                    case 'Maybe.some':
                                                        var self = Kind$Check$result$(Maybe$some$($7427($7418)($7419)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $7434 = self.value;
                                                                var $7435 = self.errors;
                                                                var $7436 = Kind$Check$result$($7434, List$concat$($7430, $7435));
                                                                var $7433 = $7436;
                                                                break;
                                                        };
                                                        var $7431 = $7433;
                                                        break;
                                                };
                                                var $7428 = $7431;
                                                break;
                                        };
                                        var self = $7428;
                                        break;
                                    case 'Kind.Term.var':
                                    case 'Kind.Term.lam':
                                    case 'Kind.Term.app':
                                    case 'Kind.Term.ori':
                                        var _expected$15 = Either$left$("function");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var self = $7418;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7438 = self.orig;
                                                var $7439 = Maybe$some$($7438);
                                                var _orig$17 = $7439;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7440 = _orig$6;
                                                var _orig$17 = $7440;
                                                break;
                                        };
                                        var $7437 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$17, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7437;
                                        break;
                                    case 'Kind.Term.ref':
                                    case 'Kind.Term.hol':
                                    case 'Kind.Term.nat':
                                    case 'Kind.Term.chr':
                                    case 'Kind.Term.str':
                                        var _expected$14 = Either$left$("function");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var self = $7418;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7442 = self.orig;
                                                var $7443 = Maybe$some$($7442);
                                                var _orig$16 = $7443;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7444 = _orig$6;
                                                var _orig$16 = $7444;
                                                break;
                                        };
                                        var $7441 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$16, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7441;
                                        break;
                                    case 'Kind.Term.typ':
                                        var _expected$13 = Either$left$("function");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var self = $7418;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7446 = self.orig;
                                                var $7447 = Maybe$some$($7446);
                                                var _orig$15 = $7447;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7448 = _orig$6;
                                                var _orig$15 = $7448;
                                                break;
                                        };
                                        var $7445 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$15, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7445;
                                        break;
                                    case 'Kind.Term.let':
                                    case 'Kind.Term.def':
                                    case 'Kind.Term.ann':
                                    case 'Kind.Term.gol':
                                        var _expected$16 = Either$left$("function");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var self = $7418;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7450 = self.orig;
                                                var $7451 = Maybe$some$($7450);
                                                var _orig$18 = $7451;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7452 = _orig$6;
                                                var _orig$18 = $7452;
                                                break;
                                        };
                                        var $7449 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$18, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7449;
                                        break;
                                    case 'Kind.Term.cse':
                                        var _expected$19 = Either$left$("function");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var self = $7418;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7454 = self.orig;
                                                var $7455 = Maybe$some$($7454);
                                                var _orig$21 = $7455;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7456 = _orig$6;
                                                var _orig$21 = $7456;
                                                break;
                                        };
                                        var $7453 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$21, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7453;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7457 = self.value;
                                        var $7458 = self.errors;
                                        var $7459 = Kind$Check$result$($7457, List$concat$($7422, $7458));
                                        var $7425 = $7459;
                                        break;
                                };
                                var $7423 = $7425;
                                break;
                            case 'Maybe.none':
                                var $7460 = Kind$Check$result$(Maybe$none, $7422);
                                var $7423 = $7460;
                                break;
                        };
                        var $7420 = $7423;
                        break;
                };
                var self = $7420;
                break;
            case 'Kind.Term.let':
                var $7461 = self.name;
                var $7462 = self.expr;
                var $7463 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7462, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7465 = self.value;
                        var $7466 = self.errors;
                        var self = $7465;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7468 = self.value;
                                var _body_val$14 = $7463(Kind$Term$var$($7461, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7461, $7468), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7470 = self.value;
                                        var $7471 = self.errors;
                                        var self = $7470;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7473 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7473), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7475 = self.value;
                                                        var $7476 = self.errors;
                                                        var $7477 = Kind$Check$result$($7475, List$concat$($7471, $7476));
                                                        var $7474 = $7477;
                                                        break;
                                                };
                                                var $7472 = $7474;
                                                break;
                                            case 'Maybe.none':
                                                var $7478 = Kind$Check$result$(Maybe$none, $7471);
                                                var $7472 = $7478;
                                                break;
                                        };
                                        var self = $7472;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7479 = self.value;
                                        var $7480 = self.errors;
                                        var $7481 = Kind$Check$result$($7479, List$concat$($7466, $7480));
                                        var $7469 = $7481;
                                        break;
                                };
                                var $7467 = $7469;
                                break;
                            case 'Maybe.none':
                                var $7482 = Kind$Check$result$(Maybe$none, $7466);
                                var $7467 = $7482;
                                break;
                        };
                        var $7464 = $7467;
                        break;
                };
                var self = $7464;
                break;
            case 'Kind.Term.def':
                var $7483 = self.name;
                var $7484 = self.expr;
                var $7485 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7484, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7487 = self.value;
                        var $7488 = self.errors;
                        var self = $7487;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7490 = self.value;
                                var _body_val$14 = $7485(Kind$Term$ann$(Bool$true, $7484, $7490));
                                var _body_ctx$15 = List$cons$(Pair$new$($7483, $7490), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7492 = self.value;
                                        var $7493 = self.errors;
                                        var self = $7492;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7495 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7495), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7497 = self.value;
                                                        var $7498 = self.errors;
                                                        var $7499 = Kind$Check$result$($7497, List$concat$($7493, $7498));
                                                        var $7496 = $7499;
                                                        break;
                                                };
                                                var $7494 = $7496;
                                                break;
                                            case 'Maybe.none':
                                                var $7500 = Kind$Check$result$(Maybe$none, $7493);
                                                var $7494 = $7500;
                                                break;
                                        };
                                        var self = $7494;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7501 = self.value;
                                        var $7502 = self.errors;
                                        var $7503 = Kind$Check$result$($7501, List$concat$($7488, $7502));
                                        var $7491 = $7503;
                                        break;
                                };
                                var $7489 = $7491;
                                break;
                            case 'Maybe.none':
                                var $7504 = Kind$Check$result$(Maybe$none, $7488);
                                var $7489 = $7504;
                                break;
                        };
                        var $7486 = $7489;
                        break;
                };
                var self = $7486;
                break;
            case 'Kind.Term.ann':
                var $7505 = self.done;
                var $7506 = self.term;
                var $7507 = self.type;
                var self = $7505;
                if (self) {
                    var $7509 = Kind$Check$result$(Maybe$some$($7507), List$nil);
                    var $7508 = $7509;
                } else {
                    var self = Kind$Term$check$($7506, Maybe$some$($7507), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $7511 = self.value;
                            var $7512 = self.errors;
                            var self = $7511;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7514 = Kind$Check$result$(Maybe$none, $7512);
                                    var $7513 = $7514;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Term$check$($7507, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7516 = self.value;
                                            var $7517 = self.errors;
                                            var self = $7516;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7519 = Kind$Check$result$(Maybe$none, $7517);
                                                    var $7518 = $7519;
                                                    break;
                                                case 'Maybe.some':
                                                    var self = Kind$Check$result$(Maybe$some$($7507), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7521 = self.value;
                                                            var $7522 = self.errors;
                                                            var $7523 = Kind$Check$result$($7521, List$concat$($7517, $7522));
                                                            var $7520 = $7523;
                                                            break;
                                                    };
                                                    var $7518 = $7520;
                                                    break;
                                            };
                                            var self = $7518;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7524 = self.value;
                                            var $7525 = self.errors;
                                            var $7526 = Kind$Check$result$($7524, List$concat$($7512, $7525));
                                            var $7515 = $7526;
                                            break;
                                    };
                                    var $7513 = $7515;
                                    break;
                            };
                            var $7510 = $7513;
                            break;
                    };
                    var $7508 = $7510;
                };
                var self = $7508;
                break;
            case 'Kind.Term.gol':
                var $7527 = self.name;
                var $7528 = self.dref;
                var $7529 = self.verb;
                var $7530 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($7527, $7528, $7529, _type$2, _ctx$4), List$nil));
                var self = $7530;
                break;
            case 'Kind.Term.cse':
                var $7531 = self.expr;
                var $7532 = self.name;
                var $7533 = self.with;
                var $7534 = self.cses;
                var $7535 = self.moti;
                var _expr$13 = $7531;
                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7537 = self.value;
                        var $7538 = self.errors;
                        var self = $7537;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7540 = self.value;
                                var self = Kind$Term$check$infer_with_types$($7533, _defs$3, _ctx$4, _path$5, _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7542 = self.value;
                                        var $7543 = self.errors;
                                        var self = $7542;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7545 = self.value;
                                                var _dsug$20 = Kind$Term$desugar_cse$($7531, $7532, $7545, $7534, $7535, $7540, _type$2, _defs$3, _ctx$4);
                                                var self = _dsug$20;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7547 = self.value;
                                                        var $7548 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $7547), List$nil));
                                                        var self = $7548;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $7549 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                                        var self = $7549;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7550 = self.value;
                                                        var $7551 = self.errors;
                                                        var $7552 = Kind$Check$result$($7550, List$concat$($7543, $7551));
                                                        var $7546 = $7552;
                                                        break;
                                                };
                                                var $7544 = $7546;
                                                break;
                                            case 'Maybe.none':
                                                var $7553 = Kind$Check$result$(Maybe$none, $7543);
                                                var $7544 = $7553;
                                                break;
                                        };
                                        var self = $7544;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7554 = self.value;
                                        var $7555 = self.errors;
                                        var $7556 = Kind$Check$result$($7554, List$concat$($7538, $7555));
                                        var $7541 = $7556;
                                        break;
                                };
                                var $7539 = $7541;
                                break;
                            case 'Maybe.none':
                                var $7557 = Kind$Check$result$(Maybe$none, $7538);
                                var $7539 = $7557;
                                break;
                        };
                        var $7536 = $7539;
                        break;
                };
                var self = $7536;
                break;
            case 'Kind.Term.ori':
                var $7558 = self.orig;
                var $7559 = self.expr;
                var $7560 = Kind$Term$check$($7559, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($7558));
                var self = $7560;
                break;
            case 'Kind.Term.typ':
                var $7561 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                var self = $7561;
                break;
            case 'Kind.Term.hol':
                var $7562 = Kind$Check$result$(_type$2, List$nil);
                var self = $7562;
                break;
            case 'Kind.Term.nat':
                var $7563 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")), List$nil);
                var self = $7563;
                break;
            case 'Kind.Term.chr':
                var $7564 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")), List$nil);
                var self = $7564;
                break;
            case 'Kind.Term.str':
                var $7565 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")), List$nil);
                var self = $7565;
                break;
        };
        switch (self._) {
            case 'Kind.Check.result':
                var $7566 = self.value;
                var $7567 = self.errors;
                var self = $7566;
                switch (self._) {
                    case 'Maybe.some':
                        var $7569 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7571 = self.value;
                                var self = Kind$Term$equal$go$($7571, $7569, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7573 = self.value;
                                        var $7574 = self.errors;
                                        var self = $7573;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7576 = self.value;
                                                var self = $7576;
                                                if (self) {
                                                    var $7578 = Kind$Check$result$(Maybe$some$($7571), List$nil);
                                                    var self = $7578;
                                                } else {
                                                    var $7579 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($7571), Either$right$($7569), _ctx$4), List$nil));
                                                    var self = $7579;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7580 = self.value;
                                                        var $7581 = self.errors;
                                                        var $7582 = Kind$Check$result$($7580, List$concat$($7574, $7581));
                                                        var $7577 = $7582;
                                                        break;
                                                };
                                                var $7575 = $7577;
                                                break;
                                            case 'Maybe.none':
                                                var $7583 = Kind$Check$result$(Maybe$none, $7574);
                                                var $7575 = $7583;
                                                break;
                                        };
                                        var $7572 = $7575;
                                        break;
                                };
                                var self = $7572;
                                break;
                            case 'Maybe.none':
                                var $7584 = Kind$Check$result$(Maybe$some$($7569), List$nil);
                                var self = $7584;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7585 = self.value;
                                var $7586 = self.errors;
                                var $7587 = Kind$Check$result$($7585, List$concat$($7567, $7586));
                                var $7570 = $7587;
                                break;
                        };
                        var $7568 = $7570;
                        break;
                    case 'Maybe.none':
                        var $7588 = Kind$Check$result$(Maybe$none, $7567);
                        var $7568 = $7588;
                        break;
                };
                var $7353 = $7568;
                break;
        };
        return $7353;
    };
    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);

    function Kind$Path$nil$(_x$1) {
        var $7589 = _x$1;
        return $7589;
    };
    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);
    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $7591 = Bool$true;
                var $7590 = $7591;
                break;
            case 'List.cons':
                var $7592 = Bool$false;
                var $7590 = $7592;
                break;
        };
        return $7590;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.all':
                var $7594 = self.eras;
                var $7595 = self.self;
                var $7596 = self.name;
                var $7597 = self.xtyp;
                var $7598 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7600 = self.slice(0, -1);
                        var $7601 = Kind$Term$all$($7594, $7595, $7596, Kind$Term$patch_at$($7600, $7597, _fn$3), $7598);
                        var $7599 = $7601;
                        break;
                    case 'i':
                        var $7602 = self.slice(0, -1);
                        var $7603 = Kind$Term$all$($7594, $7595, $7596, $7597, (_s$10 => _x$11 => {
                            var $7604 = Kind$Term$patch_at$($7602, $7598(_s$10)(_x$11), _fn$3);
                            return $7604;
                        }));
                        var $7599 = $7603;
                        break;
                    case 'e':
                        var $7605 = _fn$3(_term$2);
                        var $7599 = $7605;
                        break;
                };
                var $7593 = $7599;
                break;
            case 'Kind.Term.lam':
                var $7606 = self.name;
                var $7607 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7609 = _fn$3(_term$2);
                        var $7608 = $7609;
                        break;
                    case 'o':
                    case 'i':
                        var $7610 = Kind$Term$lam$($7606, (_x$7 => {
                            var $7611 = Kind$Term$patch_at$(Bits$tail$(_path$1), $7607(_x$7), _fn$3);
                            return $7611;
                        }));
                        var $7608 = $7610;
                        break;
                };
                var $7593 = $7608;
                break;
            case 'Kind.Term.app':
                var $7612 = self.func;
                var $7613 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7615 = self.slice(0, -1);
                        var $7616 = Kind$Term$app$(Kind$Term$patch_at$($7615, $7612, _fn$3), $7613);
                        var $7614 = $7616;
                        break;
                    case 'i':
                        var $7617 = self.slice(0, -1);
                        var $7618 = Kind$Term$app$($7612, Kind$Term$patch_at$($7617, $7613, _fn$3));
                        var $7614 = $7618;
                        break;
                    case 'e':
                        var $7619 = _fn$3(_term$2);
                        var $7614 = $7619;
                        break;
                };
                var $7593 = $7614;
                break;
            case 'Kind.Term.let':
                var $7620 = self.name;
                var $7621 = self.expr;
                var $7622 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7624 = self.slice(0, -1);
                        var $7625 = Kind$Term$let$($7620, Kind$Term$patch_at$($7624, $7621, _fn$3), $7622);
                        var $7623 = $7625;
                        break;
                    case 'i':
                        var $7626 = self.slice(0, -1);
                        var $7627 = Kind$Term$let$($7620, $7621, (_x$8 => {
                            var $7628 = Kind$Term$patch_at$($7626, $7622(_x$8), _fn$3);
                            return $7628;
                        }));
                        var $7623 = $7627;
                        break;
                    case 'e':
                        var $7629 = _fn$3(_term$2);
                        var $7623 = $7629;
                        break;
                };
                var $7593 = $7623;
                break;
            case 'Kind.Term.def':
                var $7630 = self.name;
                var $7631 = self.expr;
                var $7632 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7634 = self.slice(0, -1);
                        var $7635 = Kind$Term$def$($7630, Kind$Term$patch_at$($7634, $7631, _fn$3), $7632);
                        var $7633 = $7635;
                        break;
                    case 'i':
                        var $7636 = self.slice(0, -1);
                        var $7637 = Kind$Term$def$($7630, $7631, (_x$8 => {
                            var $7638 = Kind$Term$patch_at$($7636, $7632(_x$8), _fn$3);
                            return $7638;
                        }));
                        var $7633 = $7637;
                        break;
                    case 'e':
                        var $7639 = _fn$3(_term$2);
                        var $7633 = $7639;
                        break;
                };
                var $7593 = $7633;
                break;
            case 'Kind.Term.ann':
                var $7640 = self.done;
                var $7641 = self.term;
                var $7642 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7644 = self.slice(0, -1);
                        var $7645 = Kind$Term$ann$($7640, Kind$Term$patch_at$($7644, $7641, _fn$3), $7642);
                        var $7643 = $7645;
                        break;
                    case 'i':
                        var $7646 = self.slice(0, -1);
                        var $7647 = Kind$Term$ann$($7640, $7641, Kind$Term$patch_at$($7646, $7642, _fn$3));
                        var $7643 = $7647;
                        break;
                    case 'e':
                        var $7648 = _fn$3(_term$2);
                        var $7643 = $7648;
                        break;
                };
                var $7593 = $7643;
                break;
            case 'Kind.Term.ori':
                var $7649 = self.orig;
                var $7650 = self.expr;
                var $7651 = Kind$Term$ori$($7649, Kind$Term$patch_at$(_path$1, $7650, _fn$3));
                var $7593 = $7651;
                break;
            case 'Kind.Term.var':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7653 = _fn$3(_term$2);
                        var $7652 = $7653;
                        break;
                    case 'o':
                    case 'i':
                        var $7654 = _term$2;
                        var $7652 = $7654;
                        break;
                };
                var $7593 = $7652;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7656 = _fn$3(_term$2);
                        var $7655 = $7656;
                        break;
                    case 'o':
                    case 'i':
                        var $7657 = _term$2;
                        var $7655 = $7657;
                        break;
                };
                var $7593 = $7655;
                break;
            case 'Kind.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7659 = _fn$3(_term$2);
                        var $7658 = $7659;
                        break;
                    case 'o':
                    case 'i':
                        var $7660 = _term$2;
                        var $7658 = $7660;
                        break;
                };
                var $7593 = $7658;
                break;
            case 'Kind.Term.gol':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7662 = _fn$3(_term$2);
                        var $7661 = $7662;
                        break;
                    case 'o':
                    case 'i':
                        var $7663 = _term$2;
                        var $7661 = $7663;
                        break;
                };
                var $7593 = $7661;
                break;
            case 'Kind.Term.cse':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7665 = _fn$3(_term$2);
                        var $7664 = $7665;
                        break;
                    case 'o':
                    case 'i':
                        var $7666 = _term$2;
                        var $7664 = $7666;
                        break;
                };
                var $7593 = $7664;
                break;
        };
        return $7593;
    };
    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);

    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.cons':
                var $7668 = self.head;
                var $7669 = self.tail;
                var self = $7668;
                switch (self._) {
                    case 'Kind.Error.waiting':
                        var $7671 = self.name;
                        var $7672 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $7673 = _m$bind$15;
                            return $7673;
                        }))(Kind$Synth$one$($7671, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7675 = self.value;
                                    var $7676 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7675, $7669, Bool$true);
                                    var $7674 = $7676;
                                    break;
                                case 'Maybe.none':
                                    var $7677 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7669, _fixd$11);
                                    var $7674 = $7677;
                                    break;
                            };
                            return $7674;
                        }));
                        var $7670 = $7672;
                        break;
                    case 'Kind.Error.patch':
                        var $7678 = self.path;
                        var $7679 = self.term;
                        var self = $7678;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $7681 = self.slice(0, -1);
                                var _term$17 = Kind$Term$patch_at$($7681, _term$5, (_x$17 => {
                                    var $7683 = $7679;
                                    return $7683;
                                }));
                                var $7682 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $7669, Bool$true);
                                var $7680 = $7682;
                                break;
                            case 'i':
                                var $7684 = self.slice(0, -1);
                                var _type$17 = Kind$Term$patch_at$($7684, _type$6, (_x$17 => {
                                    var $7686 = $7679;
                                    return $7686;
                                }));
                                var $7685 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $7669, Bool$true);
                                var $7680 = $7685;
                                break;
                            case 'e':
                                var $7687 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $7688 = _m$pure$17;
                                    return $7688;
                                }))(Maybe$none);
                                var $7680 = $7687;
                                break;
                        };
                        var $7670 = $7680;
                        break;
                    case 'Kind.Error.undefined_reference':
                        var $7689 = self.name;
                        var $7690 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $7691 = _m$bind$16;
                            return $7691;
                        }))(Kind$Synth$one$($7689, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7693 = self.value;
                                    var $7694 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7693, $7669, Bool$true);
                                    var $7692 = $7694;
                                    break;
                                case 'Maybe.none':
                                    var $7695 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7669, _fixd$11);
                                    var $7692 = $7695;
                                    break;
                            };
                            return $7692;
                        }));
                        var $7670 = $7690;
                        break;
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.cant_infer':
                        var $7696 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7669, _fixd$11);
                        var $7670 = $7696;
                        break;
                };
                var $7667 = $7670;
                break;
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {
                        var $7699 = (_x$12 + '1');
                        return $7699;
                    }), _type$6);
                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {
                        var $7700 = (_x$13 + '0');
                        return $7700;
                    }), _term$5);
                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);
                    var $7698 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $7701 = _m$pure$16;
                        return $7701;
                    }))(Maybe$some$(_defs$14));
                    var $7697 = $7698;
                } else {
                    var $7702 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $7703 = _m$pure$13;
                        return $7703;
                    }))(Maybe$none);
                    var $7697 = $7702;
                };
                var $7667 = $7697;
                break;
        };
        return $7667;
    };
    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Kind$Status$fail$(_errors$1) {
        var $7704 = ({
            _: 'Kind.Status.fail',
            'errors': _errors$1
        });
        return $7704;
    };
    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);

    function Kind$Synth$one$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $7706 = self.value;
                var self = $7706;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7708 = self.file;
                        var $7709 = self.code;
                        var $7710 = self.orig;
                        var $7711 = self.name;
                        var $7712 = self.term;
                        var $7713 = self.type;
                        var $7714 = self.isct;
                        var $7715 = self.arit;
                        var $7716 = self.stat;
                        var _file$13 = $7708;
                        var _code$14 = $7709;
                        var _orig$15 = $7710;
                        var _name$16 = $7711;
                        var _term$17 = $7712;
                        var _type$18 = $7713;
                        var _isct$19 = $7714;
                        var _arit$20 = $7715;
                        var _stat$21 = $7716;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Kind.Status.init':
                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);
                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7719 = self.value;
                                        var $7720 = self.errors;
                                        var self = $7719;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7722 = Kind$Check$result$(Maybe$none, $7720);
                                                var $7721 = $7722;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7724 = self.value;
                                                        var $7725 = self.errors;
                                                        var self = $7724;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $7727 = Kind$Check$result$(Maybe$none, $7725);
                                                                var $7726 = $7727;
                                                                break;
                                                            case 'Maybe.some':
                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Kind.Check.result':
                                                                        var $7729 = self.value;
                                                                        var $7730 = self.errors;
                                                                        var $7731 = Kind$Check$result$($7729, List$concat$($7725, $7730));
                                                                        var $7728 = $7731;
                                                                        break;
                                                                };
                                                                var $7726 = $7728;
                                                                break;
                                                        };
                                                        var self = $7726;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7732 = self.value;
                                                        var $7733 = self.errors;
                                                        var $7734 = Kind$Check$result$($7732, List$concat$($7720, $7733));
                                                        var $7723 = $7734;
                                                        break;
                                                };
                                                var $7721 = $7723;
                                                break;
                                        };
                                        var _checked$23 = $7721;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7735 = self.errors;
                                        var self = List$is_empty$($7735);
                                        if (self) {
                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $7737 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $7738 = _m$pure$28;
                                                return $7738;
                                            }))(Maybe$some$(_defs$26));
                                            var $7736 = $7737;
                                        } else {
                                            var $7739 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $7740 = _m$bind$26;
                                                return $7740;
                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $7735, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7742 = self.value;
                                                        var $7743 = Kind$Synth$one$(_name$16, $7742);
                                                        var $7741 = $7743;
                                                        break;
                                                    case 'Maybe.none':
                                                        var _stat$27 = Kind$Status$fail$($7735);
                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $7744 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $7745 = _m$pure$30;
                                                            return $7745;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $7741 = $7744;
                                                        break;
                                                };
                                                return $7741;
                                            }));
                                            var $7736 = $7739;
                                        };
                                        var $7718 = $7736;
                                        break;
                                };
                                var $7717 = $7718;
                                break;
                            case 'Kind.Status.wait':
                                var $7746 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $7747 = _m$pure$23;
                                    return $7747;
                                }))(Maybe$some$(_defs$2));
                                var $7717 = $7746;
                                break;
                            case 'Kind.Status.done':
                            case 'Kind.Status.fail':
                                var $7748 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $7749 = _m$pure$24;
                                    return $7749;
                                }))(Maybe$some$(_defs$2));
                                var $7717 = $7748;
                                break;
                        };
                        var $7707 = $7717;
                        break;
                };
                var $7705 = $7707;
                break;
            case 'Maybe.none':
                var $7750 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7751 = _m$bind$3;
                    return $7751;
                }))(IO$get_time)((_time_a$3 => {
                    var $7752 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $7753 = _m$bind$4;
                        return $7753;
                    }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$4 => {
                        var self = _loaded$4;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7755 = self.value;
                                var $7756 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7757 = _m$bind$6;
                                    return $7757;
                                }))(IO$get_time)((_time_b$6 => {
                                    var $7758 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $7759 = _m$bind$7;
                                        return $7759;
                                    }))(Kind$Synth$one$(_name$1, $7755))((_result$7 => {
                                        var $7760 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $7761 = _m$bind$8;
                                            return $7761;
                                        }))(IO$get_time)((_time_c$8 => {
                                            var $7762 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $7763 = _m$pure$10;
                                                return $7763;
                                            }))(_result$7);
                                            return $7762;
                                        }));
                                        return $7760;
                                    }));
                                    return $7758;
                                }));
                                var $7754 = $7756;
                                break;
                            case 'Maybe.none':
                                var $7764 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                    var $7765 = _m$pure$6;
                                    return $7765;
                                }))(Maybe$none);
                                var $7754 = $7764;
                                break;
                        };
                        return $7754;
                    }));
                    return $7752;
                }));
                var $7705 = $7750;
                break;
        };
        return $7705;
    };
    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);

    function BitsMap$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7767 = self.head;
                var $7768 = self.tail;
                var self = $7767;
                switch (self._) {
                    case 'Pair.new':
                        var $7770 = self.fst;
                        var $7771 = self.snd;
                        var $7772 = (bitsmap_set($7770, $7771, BitsMap$from_list$($7768), 'set'));
                        var $7769 = $7772;
                        break;
                };
                var $7766 = $7769;
                break;
            case 'List.nil':
                var $7773 = BitsMap$new;
                var $7766 = $7773;
                break;
        };
        return $7766;
    };
    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);
    const Kind$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Kind.Check.pure", List$cons$("Kind.Check.bind", List$cons$("Kind.Check.monad", List$cons$("Kind.Check.value", List$cons$("Kind.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $7775 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);
            return $7775;
        }));
        var $7774 = BitsMap$from_list$(_kvs$2);
        return $7774;
    })();

    function Kind$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7777 = self.name;
                var _inli$4 = BitsSet$has$((kind_name_to_bits($7777)), Kind$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Kind$Map$get$($7777, _defs$2);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7780 = self.value;
                            var self = $7780;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7782 = self.term;
                                    var $7783 = Kind$Term$inline$reduce$($7782, _defs$2);
                                    var $7781 = $7783;
                                    break;
                            };
                            var $7779 = $7781;
                            break;
                        case 'Maybe.none':
                            var $7784 = Kind$Term$ref$($7777);
                            var $7779 = $7784;
                            break;
                    };
                    var $7778 = $7779;
                } else {
                    var $7785 = _term$1;
                    var $7778 = $7785;
                };
                var $7776 = $7778;
                break;
            case 'Kind.Term.app':
                var $7786 = self.func;
                var $7787 = self.argm;
                var _func$5 = Kind$Term$inline$reduce$($7786, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $7789 = self.body;
                        var $7790 = Kind$Term$inline$reduce$($7789($7787), _defs$2);
                        var $7788 = $7790;
                        break;
                    case 'Kind.Term.let':
                        var $7791 = self.name;
                        var $7792 = self.expr;
                        var $7793 = self.body;
                        var $7794 = Kind$Term$let$($7791, $7792, (_x$9 => {
                            var $7795 = Kind$Term$inline$reduce$(Kind$Term$app$($7793(_x$9), $7787), _defs$2);
                            return $7795;
                        }));
                        var $7788 = $7794;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7796 = _term$1;
                        var $7788 = $7796;
                        break;
                };
                var $7776 = $7788;
                break;
            case 'Kind.Term.ori':
                var $7797 = self.expr;
                var $7798 = Kind$Term$inline$reduce$($7797, _defs$2);
                var $7776 = $7798;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $7799 = _term$1;
                var $7776 = $7799;
                break;
        };
        return $7776;
    };
    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);

    function Kind$Term$inline$(_term$1, _defs$2) {
        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $7801 = self.name;
                var $7802 = self.indx;
                var $7803 = Kind$Term$var$($7801, $7802);
                var $7800 = $7803;
                break;
            case 'Kind.Term.ref':
                var $7804 = self.name;
                var $7805 = Kind$Term$ref$($7804);
                var $7800 = $7805;
                break;
            case 'Kind.Term.all':
                var $7806 = self.eras;
                var $7807 = self.self;
                var $7808 = self.name;
                var $7809 = self.xtyp;
                var $7810 = self.body;
                var $7811 = Kind$Term$all$($7806, $7807, $7808, Kind$Term$inline$($7809, _defs$2), (_s$8 => _x$9 => {
                    var $7812 = Kind$Term$inline$($7810(_s$8)(_x$9), _defs$2);
                    return $7812;
                }));
                var $7800 = $7811;
                break;
            case 'Kind.Term.lam':
                var $7813 = self.name;
                var $7814 = self.body;
                var $7815 = Kind$Term$lam$($7813, (_x$5 => {
                    var $7816 = Kind$Term$inline$($7814(_x$5), _defs$2);
                    return $7816;
                }));
                var $7800 = $7815;
                break;
            case 'Kind.Term.app':
                var $7817 = self.func;
                var $7818 = self.argm;
                var $7819 = Kind$Term$app$(Kind$Term$inline$($7817, _defs$2), Kind$Term$inline$($7818, _defs$2));
                var $7800 = $7819;
                break;
            case 'Kind.Term.let':
                var $7820 = self.name;
                var $7821 = self.expr;
                var $7822 = self.body;
                var $7823 = Kind$Term$let$($7820, Kind$Term$inline$($7821, _defs$2), (_x$6 => {
                    var $7824 = Kind$Term$inline$($7822(_x$6), _defs$2);
                    return $7824;
                }));
                var $7800 = $7823;
                break;
            case 'Kind.Term.def':
                var $7825 = self.name;
                var $7826 = self.expr;
                var $7827 = self.body;
                var $7828 = Kind$Term$def$($7825, Kind$Term$inline$($7826, _defs$2), (_x$6 => {
                    var $7829 = Kind$Term$inline$($7827(_x$6), _defs$2);
                    return $7829;
                }));
                var $7800 = $7828;
                break;
            case 'Kind.Term.ann':
                var $7830 = self.done;
                var $7831 = self.term;
                var $7832 = self.type;
                var $7833 = Kind$Term$ann$($7830, Kind$Term$inline$($7831, _defs$2), Kind$Term$inline$($7832, _defs$2));
                var $7800 = $7833;
                break;
            case 'Kind.Term.gol':
                var $7834 = self.name;
                var $7835 = self.dref;
                var $7836 = self.verb;
                var $7837 = Kind$Term$gol$($7834, $7835, $7836);
                var $7800 = $7837;
                break;
            case 'Kind.Term.hol':
                var $7838 = self.path;
                var $7839 = Kind$Term$hol$($7838);
                var $7800 = $7839;
                break;
            case 'Kind.Term.nat':
                var $7840 = self.natx;
                var $7841 = Kind$Term$nat$($7840);
                var $7800 = $7841;
                break;
            case 'Kind.Term.chr':
                var $7842 = self.chrx;
                var $7843 = Kind$Term$chr$($7842);
                var $7800 = $7843;
                break;
            case 'Kind.Term.str':
                var $7844 = self.strx;
                var $7845 = Kind$Term$str$($7844);
                var $7800 = $7845;
                break;
            case 'Kind.Term.ori':
                var $7846 = self.expr;
                var $7847 = Kind$Term$inline$($7846, _defs$2);
                var $7800 = $7847;
                break;
            case 'Kind.Term.typ':
                var $7848 = Kind$Term$typ;
                var $7800 = $7848;
                break;
            case 'Kind.Term.cse':
                var $7849 = _term$1;
                var $7800 = $7849;
                break;
        };
        return $7800;
    };
    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);

    function BitsMap$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7851 = self.val;
                var $7852 = self.lft;
                var $7853 = self.rgt;
                var self = $7851;
                switch (self._) {
                    case 'Maybe.some':
                        var $7855 = self.value;
                        var $7856 = List$cons$($7855, _list$3);
                        var _list0$7 = $7856;
                        break;
                    case 'Maybe.none':
                        var $7857 = _list$3;
                        var _list0$7 = $7857;
                        break;
                };
                var _list1$8 = BitsMap$values$go$($7852, _list0$7);
                var _list2$9 = BitsMap$values$go$($7853, _list1$8);
                var $7854 = _list2$9;
                var $7850 = $7854;
                break;
            case 'BitsMap.new':
                var $7858 = _list$3;
                var $7850 = $7858;
                break;
        };
        return $7850;
    };
    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);

    function BitsMap$values$(_xs$2) {
        var $7859 = BitsMap$values$go$(_xs$2, List$nil);
        return $7859;
    };
    const BitsMap$values = x0 => BitsMap$values$(x0);

    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $7861 = _name$2;
                        var $7860 = $7861;
                    } else {
                        var $7862 = (self - 1n);
                        var $7863 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $7860 = $7863;
                    };
                    return $7860;
                } else {
                    var $7864 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.cons':
                            var $7866 = self.head;
                            var $7867 = self.tail;
                            var self = (_name$2 === $7866);
                            if (self) {
                                var $7869 = Nat$succ$(_brui$3);
                                var _brui$8 = $7869;
                            } else {
                                var $7870 = _brui$3;
                                var _brui$8 = $7870;
                            };
                            var $7868 = Kind$Core$var_name$($7864, _name$2, _brui$8, $7867);
                            var $7865 = $7868;
                            break;
                        case 'List.nil':
                            var $7871 = "unbound";
                            var $7865 = $7871;
                            break;
                    };
                    return $7865;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);

    function Kind$Name$show$(_name$1) {
        var $7872 = _name$1;
        return $7872;
    };
    const Kind$Name$show = x0 => Kind$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $7874 = self.slice(0, -1);
                var $7875 = (2n * Bits$to_nat$($7874));
                var $7873 = $7875;
                break;
            case 'i':
                var $7876 = self.slice(0, -1);
                var $7877 = Nat$succ$((2n * Bits$to_nat$($7876)));
                var $7873 = $7877;
                break;
            case 'e':
                var $7878 = 0n;
                var $7873 = $7878;
                break;
        };
        return $7873;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $7880 = u16_to_word(self);
                var $7881 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($7880)));
                var $7879 = $7881;
                break;
        };
        return $7879;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Kind$Code$escape$char$(_chr$1) {
        var self = (_chr$1 === Kind$Code$backslash);
        if (self) {
            var $7883 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
            var $7882 = $7883;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $7885 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                var $7884 = $7885;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $7887 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                    var $7886 = $7887;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $7889 = String$cons$(_chr$1, String$nil);
                        var $7888 = $7889;
                    } else {
                        var $7890 = (String$cons$(Kind$Code$backslash, String$nil) + ("u{" + (U16$show_hex$(_chr$1) + "}")));
                        var $7888 = $7890;
                    };
                    var $7886 = $7888;
                };
                var $7884 = $7886;
            };
            var $7882 = $7884;
        };
        return $7882;
    };
    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);

    function Kind$Code$escape$go$(_str$1, _result$2) {
        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({
            ctr: 'TCO',
            arg: [_str$1, _result$2]
        });
        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);
        var arg = [_str$1, _result$2];
        while (true) {
            let [_str$1, _result$2] = arg;
            var R = (() => {
                var self = _str$1;
                if (self.length === 0) {
                    var $7891 = String$reverse$(_result$2);
                    return $7891;
                } else {
                    var $7892 = self.charCodeAt(0);
                    var $7893 = self.slice(1);
                    var $7894 = Kind$Code$escape$go$($7893, (String$reverse$(Kind$Code$escape$char$($7892)) + _result$2));
                    return $7894;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);

    function Kind$Code$escape$(_str$1) {
        var $7895 = Kind$Code$escape$go$(_str$1, "");
        return $7895;
    };
    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);

    function Kind$Core$show$go$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7897 = self.name;
                var $7898 = self.indx;
                var $7899 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $7898 <= 0n ? 0n : _indx$2 - $7898)), $7897, 0n, _vars$3);
                var $7896 = $7899;
                break;
            case 'Kind.Term.ref':
                var $7900 = self.name;
                var $7901 = Kind$Name$show$($7900);
                var $7896 = $7901;
                break;
            case 'Kind.Term.all':
                var $7902 = self.eras;
                var $7903 = self.self;
                var $7904 = self.name;
                var $7905 = self.xtyp;
                var $7906 = self.body;
                var _eras$9 = $7902;
                var self = _eras$9;
                if (self) {
                    var $7908 = "%";
                    var _init$10 = $7908;
                } else {
                    var $7909 = "@";
                    var _init$10 = $7909;
                };
                var _self$11 = Kind$Name$show$($7903);
                var _name$12 = Kind$Name$show$($7904);
                var _xtyp$13 = Kind$Core$show$go$($7905, _indx$2, _vars$3);
                var _body$14 = Kind$Core$show$go$($7906(Kind$Term$var$($7903, _indx$2))(Kind$Term$var$($7904, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($7904, List$cons$($7903, _vars$3)));
                var $7907 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $7896 = $7907;
                break;
            case 'Kind.Term.lam':
                var $7910 = self.name;
                var $7911 = self.body;
                var _name$6 = Kind$Name$show$($7910);
                var _body$7 = Kind$Core$show$go$($7911(Kind$Term$var$($7910, _indx$2)), Nat$succ$(_indx$2), List$cons$($7910, _vars$3));
                var $7912 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $7896 = $7912;
                break;
            case 'Kind.Term.app':
                var $7913 = self.func;
                var $7914 = self.argm;
                var _func$6 = Kind$Core$show$go$($7913, _indx$2, _vars$3);
                var _argm$7 = Kind$Core$show$go$($7914, _indx$2, _vars$3);
                var $7915 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $7896 = $7915;
                break;
            case 'Kind.Term.let':
                var $7916 = self.name;
                var $7917 = self.expr;
                var $7918 = self.body;
                var _name$7 = Kind$Name$show$($7916);
                var _expr$8 = Kind$Core$show$go$($7917, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7918(Kind$Term$var$($7916, _indx$2)), Nat$succ$(_indx$2), List$cons$($7916, _vars$3));
                var $7919 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7896 = $7919;
                break;
            case 'Kind.Term.def':
                var $7920 = self.name;
                var $7921 = self.expr;
                var $7922 = self.body;
                var _name$7 = Kind$Name$show$($7920);
                var _expr$8 = Kind$Core$show$go$($7921, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7922(Kind$Term$var$($7920, _indx$2)), Nat$succ$(_indx$2), List$cons$($7920, _vars$3));
                var $7923 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7896 = $7923;
                break;
            case 'Kind.Term.ann':
                var $7924 = self.term;
                var $7925 = self.type;
                var _term$7 = Kind$Core$show$go$($7924, _indx$2, _vars$3);
                var _type$8 = Kind$Core$show$go$($7925, _indx$2, _vars$3);
                var $7926 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $7896 = $7926;
                break;
            case 'Kind.Term.nat':
                var $7927 = self.natx;
                var $7928 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($7927), List$nil)));
                var $7896 = $7928;
                break;
            case 'Kind.Term.chr':
                var $7929 = self.chrx;
                var $7930 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7929), List$cons$("\'", List$nil))));
                var $7896 = $7930;
                break;
            case 'Kind.Term.str':
                var $7931 = self.strx;
                var $7932 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7931), List$cons$("\"", List$nil))));
                var $7896 = $7932;
                break;
            case 'Kind.Term.ori':
                var $7933 = self.expr;
                var $7934 = Kind$Core$show$go$($7933, _indx$2, _vars$3);
                var $7896 = $7934;
                break;
            case 'Kind.Term.typ':
                var $7935 = "*";
                var $7896 = $7935;
                break;
            case 'Kind.Term.gol':
                var $7936 = "<GOL>";
                var $7896 = $7936;
                break;
            case 'Kind.Term.hol':
                var $7937 = "<HOL>";
                var $7896 = $7937;
                break;
            case 'Kind.Term.cse':
                var $7938 = "<CSE>";
                var $7896 = $7938;
                break;
        };
        return $7896;
    };
    const Kind$Core$show$go = x0 => x1 => x2 => Kind$Core$show$go$(x0, x1, x2);

    function Kind$Core$show$(_term$1) {
        var $7939 = Kind$Core$show$go$(_term$1, 0n, List$nil);
        return $7939;
    };
    const Kind$Core$show = x0 => Kind$Core$show$(x0);

    function Kind$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $7942 = _result$2;
            var $7943 = BitsMap$values$(_defs$1);
            let _result$4 = $7942;
            let _defn$3;
            while ($7943._ === 'List.cons') {
                _defn$3 = $7943.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7944 = self.name;
                        var $7945 = self.term;
                        var $7946 = self.type;
                        var $7947 = self.stat;
                        var self = $7947;
                        switch (self._) {
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $7949 = _result$4;
                                var $7948 = $7949;
                                break;
                            case 'Kind.Status.done':
                                var _name$15 = $7944;
                                var _term$16 = Kind$Core$show$($7945);
                                var _type$17 = Kind$Core$show$($7946);
                                var $7950 = String$flatten$(List$cons$(_result$4, List$cons$(_name$15, List$cons$(" : ", List$cons$(_type$17, List$cons$(" = ", List$cons$(_term$16, List$cons$(";\u{a}", List$nil))))))));
                                var $7948 = $7950;
                                break;
                        };
                        var $7942 = $7948;
                        break;
                };
                _result$4 = $7942;
                $7943 = $7943.tail;
            }
            return _result$4;
        })();
        var $7940 = _result$3;
        return $7940;
    };
    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);

    function Kind$api$io$term_to_core$(_name$1) {
        var $7951 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7952 = _m$bind$2;
            return $7952;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7954 = self.value;
                    var $7955 = $7954;
                    var _defs$3 = $7955;
                    break;
                case 'Maybe.none':
                    var $7956 = Kind$Map$new;
                    var _defs$3 = $7956;
                    break;
            };
            var _defs$4 = BitsMap$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7958 = self.file;
                        var $7959 = self.code;
                        var $7960 = self.orig;
                        var $7961 = self.name;
                        var $7962 = self.term;
                        var $7963 = self.type;
                        var $7964 = self.isct;
                        var $7965 = self.arit;
                        var $7966 = self.stat;
                        var _term$14 = Kind$Term$inline$($7962, _defs$3);
                        var _type$15 = Kind$Term$inline$($7963, _defs$3);
                        var $7967 = Kind$Def$new$($7958, $7959, $7960, $7961, _term$14, _type$15, $7964, $7965, $7966);
                        var $7957 = $7967;
                        break;
                };
                return $7957;
            }), _defs$3);
            var $7953 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $7968 = _m$pure$6;
                return $7968;
            }))(Kind$Defs$core$(_defs$4));
            return $7953;
        }));
        return $7951;
    };
    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);

    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7970 = self.val;
                var $7971 = self.lft;
                var $7972 = self.rgt;
                var self = $7970;
                switch (self._) {
                    case 'Maybe.none':
                        var $7974 = _list$4;
                        var _list0$8 = $7974;
                        break;
                    case 'Maybe.some':
                        var $7975 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $7975;
                        break;
                };
                var _list1$9 = BitsMap$keys$go$($7971, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$keys$go$($7972, (_key$3 + '1'), _list1$9);
                var $7973 = _list2$10;
                var $7969 = $7973;
                break;
            case 'BitsMap.new':
                var $7976 = _list$4;
                var $7969 = $7976;
                break;
        };
        return $7969;
    };
    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);

    function BitsMap$keys$(_xs$2) {
        var $7977 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));
        return $7977;
    };
    const BitsMap$keys = x0 => BitsMap$keys$(x0);

    function Kind$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $7979 = self.head;
                var $7980 = self.tail;
                var $7981 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7982 = _m$bind$5;
                    return $7982;
                }))(Kind$Synth$one$($7979, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.some':
                            var $7984 = self.value;
                            var $7985 = Kind$Synth$many$($7980, $7984);
                            var $7983 = $7985;
                            break;
                        case 'Maybe.none':
                            var $7986 = Kind$Synth$many$($7980, _defs$2);
                            var $7983 = $7986;
                            break;
                    };
                    return $7983;
                }));
                var $7978 = $7981;
                break;
            case 'List.nil':
                var $7987 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7988 = _m$pure$4;
                    return $7988;
                }))(_defs$2);
                var $7978 = $7987;
                break;
        };
        return $7978;
    };
    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);

    function Kind$Synth$file$(_file$1, _defs$2) {
        var $7989 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7990 = _m$bind$3;
            return $7990;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $7992 = self.value;
                    var $7993 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $7994 = _m$pure$7;
                        return $7994;
                    }))(Either$left$($7992));
                    var $7991 = $7993;
                    break;
                case 'Either.right':
                    var $7995 = self.value;
                    var _file_defs$6 = $7995;
                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);
                    var $7996 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $7997 = _m$bind$9;
                        return $7997;
                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $7998 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $7999 = _m$pure$11;
                            return $7999;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $7998;
                    }));
                    var $7991 = $7996;
                    break;
            };
            return $7991;
        }));
        return $7989;
    };
    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);

    function IO$put_string$(_text$1) {
        var $8000 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $8001 = IO$end$(Unit$new);
            return $8001;
        }));
        return $8000;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $8002 = IO$put_string$((_text$1 + "\u{a}"));
        return $8002;
    };
    const IO$print = x0 => IO$print$(x0);

    function Kind$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $8004 = self.name;
                var self = ($8004 === "Nat.zero");
                if (self) {
                    var $8006 = Maybe$some$(0n);
                    var $8005 = $8006;
                } else {
                    var $8007 = Maybe$none;
                    var $8005 = $8007;
                };
                var $8003 = $8005;
                break;
            case 'Kind.Term.app':
                var $8008 = self.func;
                var $8009 = self.argm;
                var self = $8008;
                switch (self._) {
                    case 'Kind.Term.ref':
                        var $8011 = self.name;
                        var self = ($8011 === "Nat.succ");
                        if (self) {
                            var $8013 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $8014 = _m$bind$5;
                                return $8014;
                            }))(Kind$Term$show$as_nat$go$($8009))((_pred$5 => {
                                var $8015 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $8016 = _m$pure$7;
                                    return $8016;
                                }))(Nat$succ$(_pred$5));
                                return $8015;
                            }));
                            var $8012 = $8013;
                        } else {
                            var $8017 = Maybe$none;
                            var $8012 = $8017;
                        };
                        var $8010 = $8012;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $8018 = Maybe$none;
                        var $8010 = $8018;
                        break;
                };
                var $8003 = $8010;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $8019 = Maybe$none;
                var $8003 = $8019;
                break;
        };
        return $8003;
    };
    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);

    function Kind$Term$show$as_nat$(_term$1) {
        var $8020 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);
        return $8020;
    };
    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);

    function Kind$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $8022 = self.name;
                var $8023 = (_name$2 === $8022);
                var $8021 = $8023;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $8024 = Bool$false;
                var $8021 = $8024;
                break;
        };
        return $8021;
    };
    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);

    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Kind$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), "?");
            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), "?");
            var $8026 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $8025 = $8026;
        } else {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $8028 = Bool$false;
                var _wrap$6 = $8028;
            } else {
                var $8029 = self.charCodeAt(0);
                var $8030 = self.slice(1);
                var $8031 = ($8029 === 40);
                var _wrap$6 = $8031;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $8032 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $8032;
            } else {
                var $8033 = _func$5;
                var _func$8 = $8033;
            };
            var $8027 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $8025 = $8027;
        };
        return $8025;
    };
    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);

    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {
        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $8034 = self.func;
                        var $8035 = self.argm;
                        var $8036 = Kind$Term$show$app$($8034, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($8035, Kind$MPath$i$(_path$2)), _args$3));
                        return $8036;
                    case 'Kind.Term.ori':
                        var $8037 = self.expr;
                        var $8038 = Kind$Term$show$app$($8037, _path$2, _args$3);
                        return $8038;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $8039 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8039;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);

    function BitsMap$to_list$(_xs$2) {
        var $8040 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        return $8040;
    };
    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);

    function Kind$Term$show$go$(_term$1, _path$2) {
        var self = Kind$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.some':
                var $8042 = self.value;
                var $8043 = $8042;
                var $8041 = $8043;
                break;
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $8045 = self.name;
                        var $8046 = Kind$Name$show$($8045);
                        var $8044 = $8046;
                        break;
                    case 'Kind.Term.ref':
                        var $8047 = self.name;
                        var _name$4 = Kind$Name$show$($8047);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8049 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($8049));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $8050 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $8048 = $8050;
                                break;
                            case 'Maybe.none':
                                var $8051 = _name$4;
                                var $8048 = $8051;
                                break;
                        };
                        var $8044 = $8048;
                        break;
                    case 'Kind.Term.all':
                        var $8052 = self.eras;
                        var $8053 = self.self;
                        var $8054 = self.name;
                        var $8055 = self.xtyp;
                        var $8056 = self.body;
                        var _eras$8 = $8052;
                        var _self$9 = Kind$Name$show$($8053);
                        var _name$10 = Kind$Name$show$($8054);
                        var _type$11 = Kind$Term$show$go$($8055, Kind$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $8058 = "<";
                            var _open$12 = $8058;
                        } else {
                            var $8059 = "(";
                            var _open$12 = $8059;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $8060 = ">";
                            var _clos$13 = $8060;
                        } else {
                            var $8061 = ")";
                            var _clos$13 = $8061;
                        };
                        var _body$14 = Kind$Term$show$go$($8056(Kind$Term$var$($8053, 0n))(Kind$Term$var$($8054, 0n)), Kind$MPath$i$(_path$2));
                        var $8057 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $8044 = $8057;
                        break;
                    case 'Kind.Term.lam':
                        var $8062 = self.name;
                        var $8063 = self.body;
                        var _name$5 = Kind$Name$show$($8062);
                        var _body$6 = Kind$Term$show$go$($8063(Kind$Term$var$($8062, 0n)), Kind$MPath$o$(_path$2));
                        var $8064 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $8044 = $8064;
                        break;
                    case 'Kind.Term.let':
                        var $8065 = self.name;
                        var $8066 = self.expr;
                        var $8067 = self.body;
                        var _name$6 = Kind$Name$show$($8065);
                        var _expr$7 = Kind$Term$show$go$($8066, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($8067(Kind$Term$var$($8065, 0n)), Kind$MPath$i$(_path$2));
                        var $8068 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8044 = $8068;
                        break;
                    case 'Kind.Term.def':
                        var $8069 = self.name;
                        var $8070 = self.expr;
                        var $8071 = self.body;
                        var _name$6 = Kind$Name$show$($8069);
                        var _expr$7 = Kind$Term$show$go$($8070, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($8071(Kind$Term$var$($8069, 0n)), Kind$MPath$i$(_path$2));
                        var $8072 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8044 = $8072;
                        break;
                    case 'Kind.Term.ann':
                        var $8073 = self.term;
                        var $8074 = self.type;
                        var _term$6 = Kind$Term$show$go$($8073, Kind$MPath$o$(_path$2));
                        var _type$7 = Kind$Term$show$go$($8074, Kind$MPath$i$(_path$2));
                        var $8075 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $8044 = $8075;
                        break;
                    case 'Kind.Term.gol':
                        var $8076 = self.name;
                        var _name$6 = Kind$Name$show$($8076);
                        var $8077 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $8044 = $8077;
                        break;
                    case 'Kind.Term.nat':
                        var $8078 = self.natx;
                        var $8079 = String$flatten$(List$cons$(Nat$show$($8078), List$nil));
                        var $8044 = $8079;
                        break;
                    case 'Kind.Term.chr':
                        var $8080 = self.chrx;
                        var $8081 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($8080), List$cons$("\'", List$nil))));
                        var $8044 = $8081;
                        break;
                    case 'Kind.Term.str':
                        var $8082 = self.strx;
                        var $8083 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($8082), List$cons$("\"", List$nil))));
                        var $8044 = $8083;
                        break;
                    case 'Kind.Term.cse':
                        var $8084 = self.expr;
                        var $8085 = self.name;
                        var $8086 = self.with;
                        var $8087 = self.cses;
                        var $8088 = self.moti;
                        var _expr$9 = Kind$Term$show$go$($8084, Kind$MPath$o$(_path$2));
                        var _name$10 = Kind$Name$show$($8085);
                        var _wyth$11 = String$join$("; ", List$mapped$($8086, (_with_var$11 => {
                            var self = _with_var$11;
                            switch (self._) {
                                case 'Kind.Ann.new':
                                    var $8091 = self.name;
                                    var $8092 = self.type;
                                    var self = $8092;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $8094 = self.value;
                                            var $8095 = ($8091 + (": " + Kind$Term$show$go$($8094, Maybe$none)));
                                            var $8093 = $8095;
                                            break;
                                        case 'Maybe.none':
                                            var $8096 = $8091;
                                            var $8093 = $8096;
                                            break;
                                    };
                                    var $8090 = $8093;
                                    break;
                            };
                            return $8090;
                        })));
                        var _cses$12 = BitsMap$to_list$($8087);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $8097 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $8097;
                        })));
                        var self = $8088;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8098 = self.value;
                                var $8099 = String$flatten$(List$cons$(": ", List$cons$(Kind$Term$show$go$($8098, Maybe$none), List$nil)));
                                var _moti$14 = $8099;
                                break;
                            case 'Maybe.none':
                                var $8100 = "";
                                var _moti$14 = $8100;
                                break;
                        };
                        var $8089 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $8044 = $8089;
                        break;
                    case 'Kind.Term.ori':
                        var $8101 = self.expr;
                        var $8102 = Kind$Term$show$go$($8101, _path$2);
                        var $8044 = $8102;
                        break;
                    case 'Kind.Term.typ':
                        var $8103 = "Type";
                        var $8044 = $8103;
                        break;
                    case 'Kind.Term.app':
                        var $8104 = Kind$Term$show$app$(_term$1, _path$2, List$nil);
                        var $8044 = $8104;
                        break;
                    case 'Kind.Term.hol':
                        var $8105 = "_";
                        var $8044 = $8105;
                        break;
                };
                var $8041 = $8044;
                break;
        };
        return $8041;
    };
    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);

    function Kind$Term$show$(_term$1) {
        var $8106 = Kind$Term$show$go$(_term$1, Maybe$none);
        return $8106;
    };
    const Kind$Term$show = x0 => Kind$Term$show$(x0);

    function Kind$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $8109 = _types$3;
            var $8110 = _names$2;
            let _types$5 = $8109;
            let _name$4;
            while ($8110._ === 'List.cons') {
                _name$4 = $8110.head;
                var self = Kind$Map$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $8111 = self.value;
                        var self = $8111;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8113 = self.type;
                                var $8114 = (_types$5 + (_name$4 + (": " + (Kind$Term$show$($8113) + "\u{a}"))));
                                var $8112 = $8114;
                                break;
                        };
                        var $8109 = $8112;
                        break;
                    case 'Maybe.none':
                        var $8115 = _types$5;
                        var $8109 = $8115;
                        break;
                };
                _types$5 = $8109;
                $8110 = $8110.tail;
            }
            return _types$5;
        })();
        var $8107 = _types$4;
        return $8107;
    };
    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);

    function List$filter$(_f$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $8117 = self.head;
                var $8118 = self.tail;
                var self = _f$2($8117);
                if (self) {
                    var $8120 = List$cons$($8117, List$filter$(_f$2, $8118));
                    var $8119 = $8120;
                } else {
                    var $8121 = List$filter$(_f$2, $8118);
                    var $8119 = $8121;
                };
                var $8116 = $8119;
                break;
            case 'List.nil':
                var $8122 = List$nil;
                var $8116 = $8122;
                break;
        };
        return $8116;
    };
    const List$filter = x0 => x1 => List$filter$(x0, x1);

    function Kind$Error$is_undef$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.cant_infer':
                var $8124 = Bool$false;
                var $8123 = $8124;
                break;
            case 'Kind.Error.undefined_reference':
                var $8125 = Bool$true;
                var $8123 = $8125;
                break;
        };
        return $8123;
    };
    const Kind$Error$is_undef = x0 => Kind$Error$is_undef$(x0);

    function Kind$Error$is_mistake$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.cant_infer':
                var $8127 = Bool$true;
                var $8126 = $8127;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
                var $8128 = Bool$false;
                var $8126 = $8128;
                break;
        };
        return $8126;
    };
    const Kind$Error$is_mistake = x0 => Kind$Error$is_mistake$(x0);

    function Kind$Error$is_goal$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
            case 'Kind.Error.cant_infer':
                var $8130 = Bool$false;
                var $8129 = $8130;
                break;
            case 'Kind.Error.show_goal':
                var $8131 = Bool$true;
                var $8129 = $8131;
                break;
        };
        return $8129;
    };
    const Kind$Error$is_goal = x0 => Kind$Error$is_goal$(x0);

    function Kind$Error$relevant$(_errors$1) {
        var _undefs$2 = List$filter$(Kind$Error$is_undef, _errors$1);
        var _mistakes$3 = List$filter$(Kind$Error$is_mistake, _errors$1);
        var _goals$4 = List$filter$(Kind$Error$is_goal, _errors$1);
        var self = _undefs$2;
        switch (self._) {
            case 'List.nil':
                var self = _mistakes$3;
                switch (self._) {
                    case 'List.cons':
                        var $8134 = self.head;
                        var $8135 = List$concat$(List$cons$($8134, List$nil), _goals$4);
                        var $8133 = $8135;
                        break;
                    case 'List.nil':
                        var $8136 = _goals$4;
                        var $8133 = $8136;
                        break;
                };
                var $8132 = $8133;
                break;
            case 'List.cons':
                var $8137 = List$concat$(_undefs$2, _goals$4);
                var $8132 = $8137;
                break;
        };
        return $8132;
    };
    const Kind$Error$relevant = x0 => Kind$Error$relevant$(x0);

    function Map$(_V$1) {
        var $8138 = null;
        return $8138;
    };
    const Map = x0 => Map$(x0);

    function String$to_bits$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $8140 = Bits$e;
            var $8139 = $8140;
        } else {
            var $8141 = self.charCodeAt(0);
            var $8142 = self.slice(1);
            var $8143 = (String$to_bits$($8142) + (u16_to_bits($8141)));
            var $8139 = $8143;
        };
        return $8139;
    };
    const String$to_bits = x0 => String$to_bits$(x0);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $8145 = self.head;
                var $8146 = self.tail;
                var self = $8145;
                switch (self._) {
                    case 'Pair.new':
                        var $8148 = self.fst;
                        var $8149 = self.snd;
                        var $8150 = (bitsmap_set(String$to_bits$($8148), $8149, Map$from_list$($8146), 'set'));
                        var $8147 = $8150;
                        break;
                };
                var $8144 = $8147;
                break;
            case 'List.nil':
                var $8151 = BitsMap$new;
                var $8144 = $8151;
                break;
        };
        return $8144;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Kind$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.cons':
                var $8153 = self.head;
                var $8154 = self.tail;
                var self = $8153;
                switch (self._) {
                    case 'Pair.new':
                        var $8156 = self.fst;
                        var $8157 = self.snd;
                        var _name$6 = Kind$Name$show$($8156);
                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($8157, Kind$Map$new));
                        var _rest$8 = Kind$Context$show$($8154);
                        var $8158 = (_rest$8 + ("- " + (_name$6 + (": " + (_type$7 + "\u{a}")))));
                        var $8155 = $8158;
                        break;
                };
                var $8152 = $8155;
                break;
            case 'List.nil':
                var $8159 = "";
                var $8152 = $8159;
                break;
        };
        return $8152;
    };
    const Kind$Context$show = x0 => Kind$Context$show$(x0);

    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $8160 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Kind.Term.ref':
                    var $8162 = self.name;
                    var self = Kind$Map$get$($8162, _defs$3);
                    switch (self._) {
                        case 'Maybe.some':
                            var $8164 = self.value;
                            var self = $8164;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $8166 = self.term;
                                    var $8167 = $8166;
                                    var $8165 = $8167;
                                    break;
                            };
                            var $8163 = $8165;
                            break;
                        case 'Maybe.none':
                            var $8168 = Kind$Term$ref$($8162);
                            var $8163 = $8168;
                            break;
                    };
                    var $8161 = $8163;
                    break;
                case 'Kind.Term.var':
                case 'Kind.Term.typ':
                case 'Kind.Term.all':
                case 'Kind.Term.lam':
                case 'Kind.Term.app':
                case 'Kind.Term.let':
                case 'Kind.Term.def':
                case 'Kind.Term.ann':
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                case 'Kind.Term.ori':
                    var $8169 = _term$4;
                    var $8161 = $8169;
                    break;
            };
            return $8161;
        }));
        return $8160;
    };
    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);

    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $8171 = self.name;
                var $8172 = self.indx;
                var $8173 = Kind$Term$var$($8171, $8172);
                var $8170 = $8173;
                break;
            case 'Kind.Term.ref':
                var $8174 = self.name;
                var self = Kind$Map$get$($8174, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $8176 = self.value;
                        var self = $8176;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8178 = self.term;
                                var $8179 = self.isct;
                                var $8180 = self.arit;
                                var self = ($8179 && (_arity$3 > $8180));
                                if (self) {
                                    var $8182 = $8178;
                                    var $8181 = $8182;
                                } else {
                                    var $8183 = Kind$Term$ref$($8174);
                                    var $8181 = $8183;
                                };
                                var $8177 = $8181;
                                break;
                        };
                        var $8175 = $8177;
                        break;
                    case 'Maybe.none':
                        var $8184 = Kind$Term$ref$($8174);
                        var $8175 = $8184;
                        break;
                };
                var $8170 = $8175;
                break;
            case 'Kind.Term.all':
                var $8185 = self.eras;
                var $8186 = self.self;
                var $8187 = self.name;
                var $8188 = self.xtyp;
                var $8189 = self.body;
                var $8190 = Kind$Term$all$($8185, $8186, $8187, Kind$Term$expand_ct$($8188, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $8191 = Kind$Term$expand_ct$($8189(_s$9)(_x$10), _defs$2, 0n);
                    return $8191;
                }));
                var $8170 = $8190;
                break;
            case 'Kind.Term.lam':
                var $8192 = self.name;
                var $8193 = self.body;
                var $8194 = Kind$Term$lam$($8192, (_x$6 => {
                    var $8195 = Kind$Term$expand_ct$($8193(_x$6), _defs$2, 0n);
                    return $8195;
                }));
                var $8170 = $8194;
                break;
            case 'Kind.Term.app':
                var $8196 = self.func;
                var $8197 = self.argm;
                var $8198 = Kind$Term$app$(Kind$Term$expand_ct$($8196, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($8197, _defs$2, 0n));
                var $8170 = $8198;
                break;
            case 'Kind.Term.let':
                var $8199 = self.name;
                var $8200 = self.expr;
                var $8201 = self.body;
                var $8202 = Kind$Term$let$($8199, Kind$Term$expand_ct$($8200, _defs$2, 0n), (_x$7 => {
                    var $8203 = Kind$Term$expand_ct$($8201(_x$7), _defs$2, 0n);
                    return $8203;
                }));
                var $8170 = $8202;
                break;
            case 'Kind.Term.def':
                var $8204 = self.name;
                var $8205 = self.expr;
                var $8206 = self.body;
                var $8207 = Kind$Term$def$($8204, Kind$Term$expand_ct$($8205, _defs$2, 0n), (_x$7 => {
                    var $8208 = Kind$Term$expand_ct$($8206(_x$7), _defs$2, 0n);
                    return $8208;
                }));
                var $8170 = $8207;
                break;
            case 'Kind.Term.ann':
                var $8209 = self.done;
                var $8210 = self.term;
                var $8211 = self.type;
                var $8212 = Kind$Term$ann$($8209, Kind$Term$expand_ct$($8210, _defs$2, 0n), Kind$Term$expand_ct$($8211, _defs$2, 0n));
                var $8170 = $8212;
                break;
            case 'Kind.Term.gol':
                var $8213 = self.name;
                var $8214 = self.dref;
                var $8215 = self.verb;
                var $8216 = Kind$Term$gol$($8213, $8214, $8215);
                var $8170 = $8216;
                break;
            case 'Kind.Term.hol':
                var $8217 = self.path;
                var $8218 = Kind$Term$hol$($8217);
                var $8170 = $8218;
                break;
            case 'Kind.Term.nat':
                var $8219 = self.natx;
                var $8220 = Kind$Term$nat$($8219);
                var $8170 = $8220;
                break;
            case 'Kind.Term.chr':
                var $8221 = self.chrx;
                var $8222 = Kind$Term$chr$($8221);
                var $8170 = $8222;
                break;
            case 'Kind.Term.str':
                var $8223 = self.strx;
                var $8224 = Kind$Term$str$($8223);
                var $8170 = $8224;
                break;
            case 'Kind.Term.ori':
                var $8225 = self.orig;
                var $8226 = self.expr;
                var $8227 = Kind$Term$ori$($8225, $8226);
                var $8170 = $8227;
                break;
            case 'Kind.Term.typ':
                var $8228 = Kind$Term$typ;
                var $8170 = $8228;
                break;
            case 'Kind.Term.cse':
                var $8229 = _term$1;
                var $8170 = $8229;
                break;
        };
        return $8170;
    };
    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);

    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);
        var _term$5 = (() => {
            var $8232 = _term$4;
            var $8233 = _dref$1;
            let _term$6 = $8232;
            let _path$5;
            while ($8233._ === 'List.cons') {
                _path$5 = $8233.head;
                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);
                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);
                var $8232 = _term$10;
                _term$6 = $8232;
                $8233 = $8233.tail;
            }
            return _term$6;
        })();
        var $8230 = _term$5;
        return $8230;
    };
    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);

    function Kind$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $8235 = self.expected;
                var $8236 = self.detected;
                var $8237 = self.context;
                var self = $8235;
                switch (self._) {
                    case 'Either.left':
                        var $8239 = self.value;
                        var $8240 = $8239;
                        var _expected$7 = $8240;
                        break;
                    case 'Either.right':
                        var $8241 = self.value;
                        var $8242 = Kind$Term$show$(Kind$Term$normalize$($8241, Map$from_list$(List$nil)));
                        var _expected$7 = $8242;
                        break;
                };
                var self = $8236;
                switch (self._) {
                    case 'Either.left':
                        var $8243 = self.value;
                        var $8244 = $8243;
                        var _detected$8 = $8244;
                        break;
                    case 'Either.right':
                        var $8245 = self.value;
                        var $8246 = Kind$Term$show$(Kind$Term$normalize$($8245, Map$from_list$(List$nil)));
                        var _detected$8 = $8246;
                        break;
                };
                var $8238 = ("Type mismatch.\u{a}" + ("- Expected: " + (_expected$7 + ("\u{a}" + ("- Detected: " + (_detected$8 + ("\u{a}" + (() => {
                    var self = $8237;
                    switch (self._) {
                        case 'List.nil':
                            var $8247 = "";
                            return $8247;
                        case 'List.cons':
                            var $8248 = ("With context:\u{a}" + Kind$Context$show$($8237));
                            return $8248;
                    };
                })())))))));
                var $8234 = $8238;
                break;
            case 'Kind.Error.show_goal':
                var $8249 = self.name;
                var $8250 = self.dref;
                var $8251 = self.verb;
                var $8252 = self.goal;
                var $8253 = self.context;
                var _goal_name$8 = ("Goal ?" + (Kind$Name$show$($8249) + ":\u{a}"));
                var self = $8252;
                switch (self._) {
                    case 'Maybe.some':
                        var $8255 = self.value;
                        var _goal$10 = Kind$Term$expand$($8250, $8255, _defs$2);
                        var $8256 = ("With type: " + ((() => {
                            var self = $8251;
                            if (self) {
                                var $8257 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $8258 = _x$11;
                                    return $8258;
                                })));
                                return $8257;
                            } else {
                                var $8259 = Kind$Term$show$(_goal$10);
                                return $8259;
                            };
                        })() + "\u{a}"));
                        var _with_type$9 = $8256;
                        break;
                    case 'Maybe.none':
                        var $8260 = "";
                        var _with_type$9 = $8260;
                        break;
                };
                var self = $8253;
                switch (self._) {
                    case 'List.nil':
                        var $8261 = "";
                        var _with_ctxt$10 = $8261;
                        break;
                    case 'List.cons':
                        var $8262 = ("With context:\u{a}" + Kind$Context$show$($8253));
                        var _with_ctxt$10 = $8262;
                        break;
                };
                var $8254 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $8234 = $8254;
                break;
            case 'Kind.Error.waiting':
                var $8263 = self.name;
                var $8264 = ("Waiting for \'" + ($8263 + "\'."));
                var $8234 = $8264;
                break;
            case 'Kind.Error.indirect':
                var $8265 = self.name;
                var $8266 = ("Error on dependency \'" + ($8265 + "\'."));
                var $8234 = $8266;
                break;
            case 'Kind.Error.patch':
                var $8267 = self.term;
                var $8268 = ("Patching: " + Kind$Term$show$($8267));
                var $8234 = $8268;
                break;
            case 'Kind.Error.undefined_reference':
                var $8269 = self.name;
                var $8270 = ("Undefined reference: " + (Kind$Name$show$($8269) + "\u{a}"));
                var $8234 = $8270;
                break;
            case 'Kind.Error.cant_infer':
                var $8271 = self.term;
                var $8272 = self.context;
                var _term$6 = Kind$Term$show$($8271);
                var _context$7 = Kind$Context$show$($8272);
                var $8273 = ("Can\'t infer type of: " + (_term$6 + ("\u{a}" + ("With context:\u{a}" + _context$7))));
                var $8234 = $8273;
                break;
        };
        return $8234;
    };
    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);

    function Kind$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $8275 = self.origin;
                var $8276 = $8275;
                var $8274 = $8276;
                break;
            case 'Kind.Error.undefined_reference':
                var $8277 = self.origin;
                var $8278 = $8277;
                var $8274 = $8278;
                break;
            case 'Kind.Error.cant_infer':
                var $8279 = self.origin;
                var $8280 = $8279;
                var $8274 = $8280;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
                var $8281 = Maybe$none;
                var $8274 = $8281;
                break;
        };
        return $8274;
    };
    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);

    function Kind$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $8284 = _errors$2;
            var $8285 = BitsMap$keys$(_defs$1);
            let _errors$4 = $8284;
            let _key$3;
            while ($8285._ === 'List.cons') {
                _key$3 = $8285.head;
                var _name$5 = Kind$Name$from_bits$(_key$3);
                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);
                var self = _defn$6;
                switch (self._) {
                    case 'Maybe.some':
                        var $8286 = self.value;
                        var self = $8286;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8288 = self.file;
                                var $8289 = self.code;
                                var $8290 = self.name;
                                var $8291 = self.stat;
                                var self = $8291;
                                switch (self._) {
                                    case 'Kind.Status.fail':
                                        var $8293 = self.errors;
                                        var self = $8293;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $8295 = _errors$4;
                                                var $8294 = $8295;
                                                break;
                                            case 'List.cons':
                                                var _name_str$20 = $8290;
                                                var _rel_errs$21 = Kind$Error$relevant$($8293);
                                                var _errors$22 = (() => {
                                                    var $8298 = _errors$4;
                                                    var $8299 = _rel_errs$21;
                                                    let _errors$23 = $8298;
                                                    let _err$22;
                                                    while ($8299._ === 'List.cons') {
                                                        _err$22 = $8299.head;
                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);
                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);
                                                        var self = _ori_val$25;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $8300 = self.value;
                                                                var self = $8300;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $8302 = self.fst;
                                                                        var $8303 = self.snd;
                                                                        var _inside$29 = ("Inside \'" + ($8288 + "\':\u{a}"));
                                                                        var _source$30 = Kind$Code$highlight$($8289, $8302, $8303);
                                                                        var $8304 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + ("\u{a}" + "\u{a}")))));
                                                                        var $8301 = $8304;
                                                                        break;
                                                                };
                                                                var $8298 = $8301;
                                                                break;
                                                            case 'Maybe.none':
                                                                var $8305 = (_errors$23 + (_err_msg$24 + "\u{a}"));
                                                                var $8298 = $8305;
                                                                break;
                                                        };
                                                        _errors$23 = $8298;
                                                        $8299 = $8299.tail;
                                                    }
                                                    return _errors$23;
                                                })();
                                                var $8296 = _errors$22;
                                                var $8294 = $8296;
                                                break;
                                        };
                                        var $8292 = $8294;
                                        break;
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $8306 = _errors$4;
                                        var $8292 = $8306;
                                        break;
                                };
                                var $8287 = $8292;
                                break;
                        };
                        var $8284 = $8287;
                        break;
                    case 'Maybe.none':
                        var $8307 = _errors$4;
                        var $8284 = $8307;
                        break;
                };
                _errors$4 = $8284;
                $8285 = $8285.tail;
            }
            return _errors$4;
        })();
        var $8282 = _errors$3;
        return $8282;
    };
    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);

    function Kind$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Kind$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $8309 = "All terms check.";
            var _errors$5 = $8309;
        } else {
            var $8310 = self.charCodeAt(0);
            var $8311 = self.slice(1);
            var $8312 = _errors$4;
            var _errors$5 = $8312;
        };
        var $8308 = (_types$3 + ("\u{a}" + _errors$5));
        return $8308;
    };
    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);

    function IO$set_file$(_name$1, _content$2) {
        var $8313 = IO$ask$("set_file", (_name$1 + ("=" + _content$2)), (_ok$3 => {
            var $8314 = IO$end$(Unit$new);
            return $8314;
        }));
        return $8313;
    };
    const IO$set_file = x0 => x1 => IO$set_file$(x0, x1);

    function Bool$show$(_b$1) {
        var self = _b$1;
        if (self) {
            var $8316 = "Bool.true";
            var $8315 = $8316;
        } else {
            var $8317 = "Bool.false";
            var $8315 = $8317;
        };
        return $8315;
    };
    const Bool$show = x0 => Bool$show$(x0);

    function Kind$Defs$cache$go$(_kvs$1) {
        var self = _kvs$1;
        switch (self._) {
            case 'List.cons':
                var $8319 = self.head;
                var $8320 = self.tail;
                var self = $8319;
                switch (self._) {
                    case 'Pair.new':
                        var $8322 = self.fst;
                        var $8323 = self.snd;
                        var self = $8323;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8325 = self.file;
                                var $8326 = self.term;
                                var $8327 = self.type;
                                var $8328 = self.isct;
                                var $8329 = self.arit;
                                var $8330 = self.stat;
                                var self = $8330;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.fail':
                                        var $8332 = Kind$Defs$cache$go$($8320);
                                        var $8331 = $8332;
                                        break;
                                    case 'Kind.Status.done':
                                        var $8333 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                            var $8334 = _m$bind$16;
                                            return $8334;
                                        }))(IO$get_file_mtime$($8325))((_time$16 => {
                                            var $8335 = IO$monad$((_m$bind$17 => _m$pure$18 => {
                                                var $8336 = _m$bind$17;
                                                return $8336;
                                            }))(IO$set_file$((".cache/" + ($8322 + ".term")), Kind$Core$show$($8326)))((_$17 => {
                                                var $8337 = IO$monad$((_m$bind$18 => _m$pure$19 => {
                                                    var $8338 = _m$bind$18;
                                                    return $8338;
                                                }))(IO$set_file$((".cache/" + ($8322 + ".type")), Kind$Core$show$($8327)))((_$18 => {
                                                    var $8339 = IO$monad$((_m$bind$19 => _m$pure$20 => {
                                                        var $8340 = _m$bind$19;
                                                        return $8340;
                                                    }))(IO$set_file$((".cache/" + ($8322 + ".isct")), Bool$show$($8328)))((_$19 => {
                                                        var $8341 = IO$monad$((_m$bind$20 => _m$pure$21 => {
                                                            var $8342 = _m$bind$20;
                                                            return $8342;
                                                        }))(IO$set_file$((".cache/" + ($8322 + ".arit")), Nat$show$($8329)))((_$20 => {
                                                            var $8343 = IO$monad$((_m$bind$21 => _m$pure$22 => {
                                                                var $8344 = _m$bind$21;
                                                                return $8344;
                                                            }))(IO$set_file$((".cache/" + ($8322 + ".file")), $8325))((_$21 => {
                                                                var $8345 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                                                    var $8346 = _m$bind$22;
                                                                    return $8346;
                                                                }))(IO$set_file$((".cache/" + ($8322 + ".time")), _time$16))((_$22 => {
                                                                    var $8347 = Kind$Defs$cache$go$($8320);
                                                                    return $8347;
                                                                }));
                                                                return $8345;
                                                            }));
                                                            return $8343;
                                                        }));
                                                        return $8341;
                                                    }));
                                                    return $8339;
                                                }));
                                                return $8337;
                                            }));
                                            return $8335;
                                        }));
                                        var $8331 = $8333;
                                        break;
                                };
                                var $8324 = $8331;
                                break;
                        };
                        var $8321 = $8324;
                        break;
                };
                var $8318 = $8321;
                break;
            case 'List.nil':
                var $8348 = IO$monad$((_m$bind$2 => _m$pure$3 => {
                    var $8349 = _m$pure$3;
                    return $8349;
                }))(Unit$new);
                var $8318 = $8348;
                break;
        };
        return $8318;
    };
    const Kind$Defs$cache$go = x0 => Kind$Defs$cache$go$(x0);

    function Kind$Defs$cache$(_defs$1) {
        var $8350 = Kind$Defs$cache$go$(Kind$Map$to_list$(_defs$1));
        return $8350;
    };
    const Kind$Defs$cache = x0 => Kind$Defs$cache$(x0);

    function Kind$api$io$check_file$(_file$1) {
        var $8351 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8352 = _m$bind$2;
            return $8352;
        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $8354 = self.value;
                    var $8355 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $8356 = _m$bind$4;
                        return $8356;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $8357 = IO$print$($8354);
                        return $8357;
                    }));
                    var $8353 = $8355;
                    break;
                case 'Either.right':
                    var $8358 = self.value;
                    var self = $8358;
                    switch (self._) {
                        case 'Pair.new':
                            var $8360 = self.fst;
                            var $8361 = self.snd;
                            var _nams$6 = $8360;
                            var _defs$7 = $8361;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $8363 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $8362 = $8363;
                                    break;
                                case 'List.cons':
                                    var $8364 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                                        var $8365 = _m$bind$10;
                                        return $8365;
                                    }))(IO$print$(Kind$Defs$report$(_defs$7, _nams$6)))((_$10 => {
                                        var $8366 = Kind$Defs$cache$(_defs$7);
                                        return $8366;
                                    }));
                                    var $8362 = $8364;
                                    break;
                            };
                            var $8359 = $8362;
                            break;
                    };
                    var $8353 = $8359;
                    break;
            };
            return $8353;
        }));
        return $8351;
    };
    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);

    function Kind$Synth$files$go$(_files$1, _defs$2) {
        var self = _files$1;
        switch (self._) {
            case 'List.cons':
                var $8368 = self.head;
                var $8369 = self.tail;
                var $8370 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $8371 = _m$bind$5;
                    return $8371;
                }))(Kind$Synth$file$($8368, _defs$2))((_file_synth$5 => {
                    var self = _file_synth$5;
                    switch (self._) {
                        case 'Either.right':
                            var $8373 = self.value;
                            var _nams$7 = Pair$fst$($8373);
                            var _defs$8 = Pair$snd$($8373);
                            var $8374 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $8375 = _m$bind$9;
                                return $8375;
                            }))(Kind$Synth$files$go$($8369, _defs$8))((_rest$9 => {
                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));
                                var _defs$11 = Pair$snd$(_rest$9);
                                var $8376 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                                    var $8377 = _m$pure$13;
                                    return $8377;
                                }))(Pair$new$(_nams$10, _defs$11));
                                return $8376;
                            }));
                            var $8372 = $8374;
                            break;
                        case 'Either.left':
                            var $8378 = Kind$Synth$files$go$($8369, _defs$2);
                            var $8372 = $8378;
                            break;
                    };
                    return $8372;
                }));
                var $8367 = $8370;
                break;
            case 'List.nil':
                var $8379 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8380 = _m$pure$4;
                    return $8380;
                }))(Pair$new$(List$nil, _defs$2));
                var $8367 = $8379;
                break;
        };
        return $8367;
    };
    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);

    function Kind$Synth$remove_duplicate_names$(_names$1) {
        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {
            var $8382 = Kind$Map$set(_name$2)(Unit$new);
            return $8382;
        }));
        var $8381 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);
        return $8381;
    };
    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);

    function Kind$Synth$files$(_files$1, _defs$2) {
        var $8383 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $8384 = _m$bind$3;
            return $8384;
        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {
            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));
            var _defs$5 = Pair$snd$(_got$3);
            var $8385 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                var $8386 = _m$pure$7;
                return $8386;
            }))(Pair$new$(_nams$4, _defs$5));
            return $8385;
        }));
        return $8383;
    };
    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);

    function Kind$api$io$check_files$(_files$1) {
        var $8387 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8388 = _m$bind$2;
            return $8388;
        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {
            var _nams$3 = Pair$fst$(_loaded$2);
            var _defs$4 = Pair$snd$(_loaded$2);
            var self = _nams$3;
            switch (self._) {
                case 'List.nil':
                    var $8390 = IO$print$("No valid Kind file found.");
                    var $8389 = $8390;
                    break;
                case 'List.cons':
                    var $8391 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                        var $8392 = _m$bind$7;
                        return $8392;
                    }))(IO$print$(Kind$Defs$report$(_defs$4, _nams$3)))((_$7 => {
                        var $8393 = Kind$Defs$cache$(_defs$4);
                        return $8393;
                    }));
                    var $8389 = $8391;
                    break;
            };
            return $8389;
        }));
        return $8387;
    };
    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);

    function Kind$api$io$check_term$(_name$1) {
        var $8394 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8395 = _m$bind$2;
            return $8395;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_defs$2 => {
            var self = _defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $8397 = self.value;
                    var $8398 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $8399 = _m$bind$4;
                        return $8399;
                    }))(IO$print$(Kind$Defs$report$($8397, List$cons$(_name$1, List$nil))))((_$4 => {
                        var $8400 = Kind$Defs$cache$($8397);
                        return $8400;
                    }));
                    var $8396 = $8398;
                    break;
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                        var $8402 = ("\'" + (_x$4 + "\'"));
                        return $8402;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $8401 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $8396 = $8401;
                    break;
            };
            return $8396;
        }));
        return $8394;
    };
    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);

    function Kind$api$io$show_term$(_name$1) {
        var $8403 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8404 = _m$bind$2;
            return $8404;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8405 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8406 = self.value;
                        var _defs$4 = $8406;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8408 = self.value;
                                var self = $8408;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8410 = self.term;
                                        var _term$16 = $8410;
                                        var $8411 = Kind$Term$show$(_term$16);
                                        var $8409 = $8411;
                                        break;
                                };
                                var $8407 = $8409;
                                break;
                            case 'Maybe.none':
                                var $8412 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8407 = $8412;
                                break;
                        };
                        return $8407;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8414 = ("\'" + (_x$4 + "\'"));
                            return $8414;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8413 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8413;
                };
            })());
            return $8405;
        }));
        return $8403;
    };
    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);

    function Kind$api$io$show_term_normal$(_name$1) {
        var $8415 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8416 = _m$bind$2;
            return $8416;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8417 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8418 = self.value;
                        var _defs$4 = $8418;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8420 = self.value;
                                var self = $8420;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8422 = self.term;
                                        var _term$16 = $8422;
                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);
                                        var $8423 = Kind$Term$show$(_norm$17);
                                        var $8421 = $8423;
                                        break;
                                };
                                var $8419 = $8421;
                                break;
                            case 'Maybe.none':
                                var $8424 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8419 = $8424;
                                break;
                        };
                        return $8419;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8426 = ("\'" + (_x$4 + "\'"));
                            return $8426;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8425 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8425;
                };
            })());
            return $8417;
        }));
        return $8415;
    };
    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $8427 = self.value;
                        var $8428 = $8427;
                        return $8428;
                    case 'IO.ask':
                        var $8429 = self.then;
                        var $8430 = IO$purify$($8429(""));
                        return $8430;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Kind$api$check_code$(_code$1) {
        var self = Kind$Defs$read$("Main.kind", _code$1, Kind$Map$new);
        switch (self._) {
            case 'Either.left':
                var $8432 = self.value;
                var $8433 = $8432;
                var $8431 = $8433;
                break;
            case 'Either.right':
                var $8434 = self.value;
                var $8435 = IO$purify$((() => {
                    var _defs$3 = $8434;
                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);
                    var $8436 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $8437 = _m$bind$5;
                        return $8437;
                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $8438 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $8439 = _m$pure$7;
                            return $8439;
                        }))(Kind$Defs$report$(_defs$5, _nams$4));
                        return $8438;
                    }));
                    return $8436;
                })());
                var $8431 = $8435;
                break;
        };
        return $8431;
    };
    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);

    function Kind$Term$read$(_code$1) {
        var self = Kind$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.value':
                var $8441 = self.val;
                var $8442 = Maybe$some$($8441);
                var $8440 = $8442;
                break;
            case 'Parser.Reply.error':
                var $8443 = Maybe$none;
                var $8440 = $8443;
                break;
        };
        return $8440;
    };
    const Kind$Term$read = x0 => Kind$Term$read$(x0);
    const Kind$api$export = (() => {
        var _e$1 = Kind$api$io$term_to_core;
        var _e$2 = Kind$api$io$check_file;
        var _e$3 = Kind$api$io$check_files;
        var _e$4 = Kind$api$io$check_term;
        var _e$5 = Kind$api$io$show_term;
        var _e$6 = Kind$api$io$show_term_normal;
        var _e$7 = Kind$api$check_code;
        var _e$8 = Kind$Term$read;
        var $8444 = IO$monad$((_m$bind$9 => _m$pure$10 => {
            var $8445 = _m$pure$10;
            return $8445;
        }))(Unit$new);
        return $8444;
    })();
    return {
        '$main$': () => run(Kind$api$export),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'BitsMap': BitsMap,
        'Maybe.none': Maybe$none,
        'BitsMap.get': BitsMap$get,
        'Bits.e': Bits$e,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Bool.true': Bool$true,
        'Bool.false': Bool$false,
        'Cmp.as_ltn': Cmp$as_ltn,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.ltn': Word$ltn,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.ltn': U16$ltn,
        'U16.new': U16$new,
        'Nat.apply': Nat$apply,
        'Word': Word,
        'Word.e': Word$e,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.inc': Word$inc,
        'Word.zero': Word$zero,
        'Nat.to_word': Nat$to_word,
        'Nat.to_u16': Nat$to_u16,
        'Kind.Name.to_bits': Kind$Name$to_bits,
        'Kind.Map.get': Kind$Map$get,
        'Parser.Reply': Parser$Reply,
        'List': List,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser.Reply.value': Parser$Reply$value,
        'List.nil': List$nil,
        'List.cons': List$cons,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Parser.many1': Parser$many1,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Nat.read': Nat$read,
        'IO.get_time': IO$get_time,
        'Maybe.some': Maybe$some,
        'Kind.Synth.load.cached.is_loop': Kind$Synth$load$cached$is_loop,
        'IO.get_file': IO$get_file,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'Bool.not': Bool$not,
        'String.is_empty': String$is_empty,
        'IO.get_file_mtime': IO$get_file_mtime,
        'Bool.and': Bool$and,
        'String.eql': String$eql,
        'Pair.new': Pair$new,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Pair': Pair,
        'Unit.new': Unit$new,
        'Bool.or': Bool$or,
        'Kind.Core.read.spaces': Kind$Core$read$spaces,
        'Kind.Term.ref': Kind$Term$ref,
        'Char.eql': Char$eql,
        'Kind.Term.typ': Kind$Term$typ,
        'Cmp.as_gte': Cmp$as_gte,
        'Word.gte': Word$gte,
        'U16.gte': U16$gte,
        'Cmp.as_lte': Cmp$as_lte,
        'Word.lte': Word$lte,
        'U16.lte': U16$lte,
        'Kind.Core.read.is_name': Kind$Core$read$is_name,
        'Kind.Core.read.name': Kind$Core$read$name,
        'Kind.Core.read.char': Kind$Core$read$char,
        'Kind.Term.all': Kind$Term$all,
        'Kind.Term.lam': Kind$Term$lam,
        'Kind.Term.app': Kind$Term$app,
        'Kind.Term.let': Kind$Term$let,
        'Kind.Term.def': Kind$Term$def,
        'Kind.Term.ann': Kind$Term$ann,
        'String.starts_with': String$starts_with,
        'String.nil': String$nil,
        'String.drop': String$drop,
        'Char.is_hex': Char$is_hex,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Word.shift_left.one.go': Word$shift_left$one$go,
        'Word.shift_left.one': Word$shift_left$one,
        'Word.shift_left': Word$shift_left,
        'Word.mul.go': Word$mul$go,
        'Word.to_zero': Word$to_zero,
        'Word.mul': Word$mul,
        'U16.mul': U16$mul,
        'U16.inc': U16$inc,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'U16.zero': U16$zero,
        'Char.hex_value16': Char$hex_value16,
        'Kind.Core.read.u16': Kind$Core$read$u16,
        'Kind.Core.read.chrx': Kind$Core$read$chrx,
        'Kind.Term.chr': Kind$Term$chr,
        'Kind.Core.read.strx': Kind$Core$read$strx,
        'Kind.Term.str': Kind$Term$str,
        'Char.dec_value': Char$dec_value,
        'Kind.Core.read.natx': Kind$Core$read$natx,
        'Kind.Term.nat': Kind$Term$nat,
        'Pair.fst': Pair$fst,
        'Nat.eql': Nat$eql,
        'Nat.pred': Nat$pred,
        'Kind.Core.read.find': Kind$Core$read$find,
        'Pair.snd': Pair$snd,
        'Kind.Core.read.term': Kind$Core$read$term,
        'Kind.Core.read': Kind$Core$read,
        'Bool.read': Bool$read,
        'Kind.Status.done': Kind$Status$done,
        'Kind.Def.new': Kind$Def$new,
        'Kind.Synth.load.cached.def': Kind$Synth$load$cached$def,
        'BitsMap.tie': BitsMap$tie,
        'BitsMap.new': BitsMap$new,
        'BitsMap.set': BitsMap$set,
        'Kind.Map.set': Kind$Map$set,
        'Kind.Map.new': Kind$Map$new,
        'Kind.Map': Kind$Map,
        'Kind.Core.dependencies.go': Kind$Core$dependencies$go,
        'List.mapped': List$mapped,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'BitsMap.to_list.go': BitsMap$to_list$go,
        'Kind.Name.from_bits': Kind$Name$from_bits,
        'Kind.Map.to_list': Kind$Map$to_list,
        'Kind.Map.keys': Kind$Map$keys,
        'Kind.Synth.load.cached': Kind$Synth$load$cached,
        'Parser.is_eof': Parser$is_eof,
        'Parser': Parser,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.eof': Parser$eof,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Kind.Parser.spaces': Kind$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Kind.Parser.init': Kind$Parser$init,
        'U16.btw': U16$btw,
        'Kind.Name.is_letter': Kind$Name$is_letter,
        'Kind.Parser.letter': Kind$Parser$letter,
        'List.fold': List$fold,
        'Kind.Parser.name1': Kind$Parser$name1,
        'Kind.Parser.text': Kind$Parser$text,
        'Parser.until1': Parser$until1,
        'Parser.maybe': Parser$maybe,
        'Kind.Parser.item': Kind$Parser$item,
        'Kind.Parser.name': Kind$Parser$name,
        'Kind.Parser.stop': Kind$Parser$stop,
        'Kind.Term.ori': Kind$Term$ori,
        'Kind.Parser.forall': Kind$Parser$forall,
        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
        'Kind.Parser.lambda': Kind$Parser$lambda,
        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
        'Kind.Term.hol': Kind$Term$hol,
        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
        'Kind.Parser.letforin': Kind$Parser$letforin,
        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
        'Kind.Parser.letwhile': Kind$Parser$letwhile,
        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
        'Kind.Parser.let': Kind$Parser$let,
        'Kind.Parser.let.omit': Kind$Parser$let$omit,
        'Kind.Parser.getwhile': Kind$Parser$getwhile,
        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
        'Kind.Parser.get': Kind$Parser$get,
        'Kind.Parser.get.omit': Kind$Parser$get$omit,
        'Kind.Parser.def': Kind$Parser$def,
        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
        'Kind.Parser.if': Kind$Parser$if,
        'Kind.Code.backslash': Kind$Code$backslash,
        'Kind.Code.escapes': Kind$Code$escapes,
        'Kind.Parser.char.single': Kind$Parser$char$single,
        'Kind.Parser.char': Kind$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Kind.Parser.string.go': Kind$Parser$string$go,
        'Kind.Parser.string': Kind$Parser$string,
        'Kind.Parser.pair': Kind$Parser$pair,
        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
        'Kind.Parser.some': Kind$Parser$some,
        'Kind.Parser.not': Kind$Parser$not,
        'Kind.Parser.left': Kind$Parser$left,
        'Kind.Parser.right': Kind$Parser$right,
        'Kind.Parser.apply': Kind$Parser$apply,
        'Kind.Parser.chain': Kind$Parser$chain,
        'Kind.Parser.mirror': Kind$Parser$mirror,
        'Kind.Name.read': Kind$Name$read,
        'Kind.Parser.list': Kind$Parser$list,
        'Kind.Parser.map': Kind$Parser$map,
        'Kind.Parser.log': Kind$Parser$log,
        'Kind.Parser.do.statements': Kind$Parser$do$statements,
        'Kind.Parser.do': Kind$Parser$do,
        'Parser.try': Parser$try,
        'Parser.fail': Parser$fail,
        'Parser.avoiding': Parser$avoiding,
        'Maybe.default': Maybe$default,
        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
        'Word.to_bits': Word$to_bits,
        'U16.to_bits': U16$to_bits,
        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
        'Kind.Term.unroll_str': Kind$Term$unroll_str,
        'Kind.Term.reduce': Kind$Term$reduce,
        'Kind.Term.extract_name': Kind$Term$extract_name,
        'Kind.Ann.new': Kind$Ann$new,
        'Kind.Parser.case.with': Kind$Parser$case$with,
        'Kind.Parser.case.case': Kind$Parser$case$case,
        'Debug.log': Debug$log,
        'Kind.Parser.case.group': Kind$Parser$case$group,
        'BitsMap.map': BitsMap$map,
        'Kind.Map.map': Kind$Map$map,
        'Kind.Term.cse': Kind$Term$cse,
        'Kind.Parser.case.build': Kind$Parser$case$build,
        'Kind.Parser.case': Kind$Parser$case,
        'Kind.Parser.open': Kind$Parser$open,
        'Kind.Parser.without': Kind$Parser$without,
        'Kind.Parser.switch.case': Kind$Parser$switch$case,
        'Kind.Parser.switch': Kind$Parser$switch,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.is_some': Maybe$is_some,
        'Kind.Term.gol': Kind$Term$gol,
        'Kind.Parser.goal': Kind$Parser$goal,
        'Kind.Parser.hole': Kind$Parser$hole,
        'Kind.Parser.float.sign': Kind$Parser$float$sign,
        'List.any': List$any,
        'Kind.Parser.float.str_digit': Kind$Parser$float$str_digit,
        'String.from_list': String$from_list,
        'Kind.Parser.float.64': Kind$Parser$float$64,
        'Kind.Parser.float.32': Kind$Parser$float$32,
        'Either': Either,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'List.at': List$at,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Kind.Parser.int_pos': Kind$Parser$int_pos,
        'Kind.Parser.int_neg': Kind$Parser$int_neg,
        'Kind.Parser.int': Kind$Parser$int,
        'Kind.Parser.machine_integer.signed': Kind$Parser$machine_integer$signed,
        'Parser.hex_digit': Parser$hex_digit,
        'Parser.hex_nat': Parser$hex_nat,
        'Kind.Parser.nat': Kind$Parser$nat,
        'Kind.Parser.machine_integer.unsigned': Kind$Parser$machine_integer$unsigned,
        'Kind.Parser.u64': Kind$Parser$u64,
        'Kind.Parser.u32': Kind$Parser$u32,
        'Kind.Parser.u16': Kind$Parser$u16,
        'Kind.Parser.u8': Kind$Parser$u8,
        'Kind.Parser.reference': Kind$Parser$reference,
        'List.for': List$for,
        'Kind.Parser.application': Kind$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Kind.Parser.application.erased': Kind$Parser$application$erased,
        'Kind.Parser.list_set': Kind$Parser$list_set,
        'Kind.Parser.list_get': Kind$Parser$list_get,
        'Kind.Parser.map_set': Kind$Parser$map_set,
        'Kind.Parser.map_get': Kind$Parser$map_get,
        'Kind.Parser.arrow': Kind$Parser$arrow,
        'Kind.Parser.op': Kind$Parser$op,
        'Kind.Parser.add': Kind$Parser$add,
        'Kind.Parser.sub': Kind$Parser$sub,
        'Kind.Parser.mul': Kind$Parser$mul,
        'Kind.Parser.div': Kind$Parser$div,
        'Kind.Parser.mod': Kind$Parser$mod,
        'Kind.Parser.ltn': Kind$Parser$ltn,
        'Kind.Parser.lte': Kind$Parser$lte,
        'Kind.Parser.eql': Kind$Parser$eql,
        'Kind.Parser.gte': Kind$Parser$gte,
        'Kind.Parser.gtn': Kind$Parser$gtn,
        'Kind.Parser.and': Kind$Parser$and,
        'Kind.Parser.or': Kind$Parser$or,
        'Kind.Parser.default': Kind$Parser$default,
        'Kind.Parser.cons': Kind$Parser$cons,
        'Kind.Parser.concat': Kind$Parser$concat,
        'Kind.Parser.string_concat': Kind$Parser$string_concat,
        'Kind.Parser.sigma': Kind$Parser$sigma,
        'Kind.Parser.equality': Kind$Parser$equality,
        'Kind.Parser.inequality': Kind$Parser$inequality,
        'Kind.Parser.rewrite': Kind$Parser$rewrite,
        'Kind.Parser.annotation': Kind$Parser$annotation,
        'Kind.Parser.application.hole': Kind$Parser$application$hole,
        'Kind.Parser.suffix': Kind$Parser$suffix,
        'Kind.Parser.term': Kind$Parser$term,
        'Kind.Parser.name_term': Kind$Parser$name_term,
        'Kind.Binder.new': Kind$Binder$new,
        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Kind.Parser.binder': Kind$Parser$binder,
        'List.length': List$length,
        'Kind.Parser.make_forall': Kind$Parser$make_forall,
        'List.at_last': List$at_last,
        'Kind.Term.var': Kind$Term$var,
        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
        'Kind.Name.eql': Kind$Name$eql,
        'Kind.Context.find.go': Kind$Context$find$go,
        'Kind.Context.find': Kind$Context$find,
        'Kind.Path.o': Kind$Path$o,
        'Kind.Path.i': Kind$Path$i,
        'Kind.Path.to_bits': Kind$Path$to_bits,
        'Kind.Term.bind': Kind$Term$bind,
        'Trampoline.call': Trampoline$call,
        'Trampoline': Trampoline,
        'Trampoline.wrap': Trampoline$wrap,
        'BitsMap.set_if_empty.cps.go': BitsMap$set_if_empty$cps$go,
        'Trampoline.done': Trampoline$done,
        'BitsMap.set_if_empty.cps': BitsMap$set_if_empty$cps,
        'BitsMap.set_if_empty': BitsMap$set_if_empty,
        'Kind.Map.set_if_empty': Kind$Map$set_if_empty,
        'Kind.Status.init': Kind$Status$init,
        'Kind.Map.def': Kind$Map$def,
        'Kind.Parser.file.def': Kind$Parser$file$def,
        'Kind.Constructor.new': Kind$Constructor$new,
        'Kind.Parser.constructor': Kind$Parser$constructor,
        'Kind.Datatype.new': Kind$Datatype$new,
        'Kind.Parser.datatype': Kind$Parser$datatype,
        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
        'Kind.Datatype.build_term': Kind$Datatype$build_term,
        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
        'Kind.Datatype.build_type': Kind$Datatype$build_type,
        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
        'Kind.Constructor.build_term': Kind$Constructor$build_term,
        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
        'Kind.Constructor.build_type': Kind$Constructor$build_type,
        'Kind.Parser.file.adt': Kind$Parser$file$adt,
        'Kind.Parser.file.end': Kind$Parser$file$end,
        'Kind.Parser.file': Kind$Parser$file,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Kind.Code.highlight.end': Kind$Code$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Kind.Code.color': Kind$Code$color,
        'List.take': List$take,
        'Kind.Code.highlight.go': Kind$Code$highlight$go,
        'Kind.Code.highlight': Kind$Code$highlight,
        'Kind.Defs.read': Kind$Defs$read,
        'Kind.Synth.load.go': Kind$Synth$load$go,
        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Kind.Synth.files_of': Kind$Synth$files_of,
        'Kind.Synth.load': Kind$Synth$load,
        'Kind.Status.wait': Kind$Status$wait,
        'Kind.Check': Kind$Check,
        'Kind.Check.result': Kind$Check$result,
        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
        'Kind.Error.waiting': Kind$Error$waiting,
        'Kind.Error.indirect': Kind$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Kind.MPath.o': Kind$MPath$o,
        'Kind.MPath.i': Kind$MPath$i,
        'Kind.Error.patch': Kind$Error$patch,
        'Kind.MPath.to_bits': Kind$MPath$to_bits,
        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
        'Kind.Error.show_goal': Kind$Error$show_goal,
        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,
        'Kind.Term.normalize': Kind$Term$normalize,
        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,
        'List.tail': List$tail,
        'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,
        'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,
        'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,
        'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Bits.concat': Bits$concat,
        'Nat.sub': Nat$sub,
        'Kind.Term.serialize.go': Kind$Term$serialize$go,
        'Kind.Term.serialize': Kind$Term$serialize,
        'Bits.eql': Bits$eql,
        'Kind.Term.identical': Kind$Term$identical,
        'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,
        'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,
        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
        'Kind.Error.cant_infer': Kind$Error$cant_infer,
        'BitsSet.has': BitsSet$has,
        'BitsSet.mut.has': BitsSet$mut$has,
        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
        'Kind.Term.has_holes': Kind$Term$has_holes,
        'Kind.Term.equal.hole': Kind$Term$equal$hole,
        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
        'BitsSet.set': BitsSet$set,
        'BitsSet.mut.set': BitsSet$mut$set,
        'Bool.eql': Bool$eql,
        'Kind.Term.equal.go': Kind$Term$equal$go,
        'BitsSet.new': BitsSet$new,
        'BitsSet.mut.new': BitsSet$mut$new,
        'Kind.Term.check': Kind$Term$check,
        'Kind.Path.nil': Kind$Path$nil,
        'Kind.MPath.nil': Kind$MPath$nil,
        'List.is_empty': List$is_empty,
        'Kind.Term.patch_at': Kind$Term$patch_at,
        'Kind.Synth.fix': Kind$Synth$fix,
        'Kind.Status.fail': Kind$Status$fail,
        'Kind.Synth.one': Kind$Synth$one,
        'BitsMap.from_list': BitsMap$from_list,
        'Kind.Term.inline.names': Kind$Term$inline$names,
        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
        'Kind.Term.inline': Kind$Term$inline,
        'BitsMap.values.go': BitsMap$values$go,
        'BitsMap.values': BitsMap$values,
        'Kind.Core.var_name': Kind$Core$var_name,
        'Kind.Name.show': Kind$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Kind.Code.escape.char': Kind$Code$escape$char,
        'Kind.Code.escape.go': Kind$Code$escape$go,
        'Kind.Code.escape': Kind$Code$escape,
        'Kind.Core.show.go': Kind$Core$show$go,
        'Kind.Core.show': Kind$Core$show,
        'Kind.Defs.core': Kind$Defs$core,
        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,
        'BitsMap.keys.go': BitsMap$keys$go,
        'BitsMap.keys': BitsMap$keys,
        'Kind.Synth.many': Kind$Synth$many,
        'Kind.Synth.file': Kind$Synth$file,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
        'Kind.Term.show.app.done': Kind$Term$show$app$done,
        'Kind.Term.show.app': Kind$Term$show$app,
        'BitsMap.to_list': BitsMap$to_list,
        'Kind.Term.show.go': Kind$Term$show$go,
        'Kind.Term.show': Kind$Term$show,
        'Kind.Defs.report.types': Kind$Defs$report$types,
        'List.filter': List$filter,
        'Kind.Error.is_undef': Kind$Error$is_undef,
        'Kind.Error.is_mistake': Kind$Error$is_mistake,
        'Kind.Error.is_goal': Kind$Error$is_goal,
        'Kind.Error.relevant': Kind$Error$relevant,
        'Map': Map,
        'String.to_bits': String$to_bits,
        'Map.from_list': Map$from_list,
        'Kind.Context.show': Kind$Context$show,
        'Kind.Term.expand_at': Kind$Term$expand_at,
        'Kind.Term.expand_ct': Kind$Term$expand_ct,
        'Kind.Term.expand': Kind$Term$expand,
        'Kind.Error.show': Kind$Error$show,
        'Kind.Error.origin': Kind$Error$origin,
        'Kind.Defs.report.errors': Kind$Defs$report$errors,
        'Kind.Defs.report': Kind$Defs$report,
        'IO.set_file': IO$set_file,
        'Bool.show': Bool$show,
        'Kind.Defs.cache.go': Kind$Defs$cache$go,
        'Kind.Defs.cache': Kind$Defs$cache,
        'Kind.api.io.check_file': Kind$api$io$check_file,
        'Kind.Synth.files.go': Kind$Synth$files$go,
        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,
        'Kind.Synth.files': Kind$Synth$files,
        'Kind.api.io.check_files': Kind$api$io$check_files,
        'Kind.api.io.check_term': Kind$api$io$check_term,
        'Kind.api.io.show_term': Kind$api$io$show_term,
        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,
        'IO.purify': IO$purify,
        'Kind.api.check_code': Kind$api$check_code,
        'Kind.Term.read': Kind$Term$read,
        'Kind.api.export': Kind$api$export,
    };
})();