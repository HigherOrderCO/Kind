module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var kind_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(null);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c2;
                return $2;
            } else {
                var $3 = c2;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c2;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c2($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $9 = self.slice(0, -1);
                    var $10 = c1($9);
                    return $10;
                case 'i':
                    var $11 = self.slice(0, -1);
                    var $12 = c2($11);
                    return $12;
                case 'e':
                    var $13 = c0;
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c2;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c2($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
        };
        return run_io({
            rl,
            fs,
            pc
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var run_io = (lib, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, err) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'put_string':
                            process.stdout.write(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'exit':
                            lib.pc.exit();
                            break;
                        case 'get_time':
                            run_io(lib, p.then(String(Date.now()))).then(res).catch(err);
                            break;
                        case 'get_line':
                            lib.rl.question(p.param, (line) => run_io(lib, p.then(line)).then(res).catch(err));
                            break;
                        case 'get_file':
                            try {
                                run_io(lib, p.then(get_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'set_file':
                            try {
                                run_io(lib, p.then(set_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'del_file':
                            try {
                                run_io(lib, p.then(del_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_dir':
                            try {
                                run_io(lib, p.then(get_dir(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_args':
                            run_io(lib, p.then(lib.pc.argv[2] || '')).then(res).catch(err);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function BitsMap$(_A$1) {
        var $36 = null;
        return $36;
    };
    const BitsMap = x0 => BitsMap$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function BitsMap$get$(_bits$2, _map$3) {
        var BitsMap$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var BitsMap$get = _bits$2 => _map$3 => BitsMap$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $37 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $39 = self.lft;
                                var $40 = BitsMap$get$($37, $39);
                                var $38 = $40;
                                break;
                            case 'BitsMap.new':
                                var $41 = Maybe$none;
                                var $38 = $41;
                                break;
                        };
                        return $38;
                    case 'i':
                        var $42 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $44 = self.rgt;
                                var $45 = BitsMap$get$($42, $44);
                                var $43 = $45;
                                break;
                            case 'BitsMap.new':
                                var $46 = Maybe$none;
                                var $43 = $46;
                                break;
                        };
                        return $43;
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $48 = self.val;
                                var $49 = $48;
                                var $47 = $49;
                                break;
                            case 'BitsMap.new':
                                var $50 = Maybe$none;
                                var $47 = $50;
                                break;
                        };
                        return $47;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$get = x0 => x1 => BitsMap$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.eql':
                var $52 = Bool$true;
                var $51 = $52;
                break;
            case 'Cmp.gtn':
                var $53 = Bool$false;
                var $51 = $53;
                break;
        };
        return $51;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $55 = self.pred;
                var $56 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $58 = self.pred;
                            var $59 = (_a$pred$10 => {
                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);
                                return $60;
                            });
                            var $57 = $59;
                            break;
                        case 'Word.i':
                            var $61 = self.pred;
                            var $62 = (_a$pred$10 => {
                                var $63 = Word$cmp$go$(_a$pred$10, $61, Cmp$ltn);
                                return $63;
                            });
                            var $57 = $62;
                            break;
                        case 'Word.e':
                            var $64 = (_a$pred$8 => {
                                var $65 = _c$4;
                                return $65;
                            });
                            var $57 = $64;
                            break;
                    };
                    var $57 = $57($55);
                    return $57;
                });
                var $54 = $56;
                break;
            case 'Word.i':
                var $66 = self.pred;
                var $67 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, Cmp$gtn);
                                return $71;
                            });
                            var $68 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, _c$4);
                                return $74;
                            });
                            var $68 = $73;
                            break;
                        case 'Word.e':
                            var $75 = (_a$pred$8 => {
                                var $76 = _c$4;
                                return $76;
                            });
                            var $68 = $75;
                            break;
                    };
                    var $68 = $68($66);
                    return $68;
                });
                var $54 = $67;
                break;
            case 'Word.e':
                var $77 = (_b$5 => {
                    var $78 = _c$4;
                    return $78;
                });
                var $54 = $77;
                break;
        };
        var $54 = $54(_b$3);
        return $54;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $79 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $79;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $80 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $80;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $81 = 1n + _pred$1;
        return $81;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $82 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $82;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $83 = word_to_u16(_value$1);
        return $83;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $84 = null;
        return $84;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $85 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $85;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $86 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $86;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $88 = self.pred;
                var $89 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $91 = self.pred;
                            var $92 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $94 = Word$i$(Word$subber$(_a$pred$10, $91, Bool$true));
                                    var $93 = $94;
                                } else {
                                    var $95 = Word$o$(Word$subber$(_a$pred$10, $91, Bool$false));
                                    var $93 = $95;
                                };
                                return $93;
                            });
                            var $90 = $92;
                            break;
                        case 'Word.i':
                            var $96 = self.pred;
                            var $97 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $99 = Word$o$(Word$subber$(_a$pred$10, $96, Bool$true));
                                    var $98 = $99;
                                } else {
                                    var $100 = Word$i$(Word$subber$(_a$pred$10, $96, Bool$true));
                                    var $98 = $100;
                                };
                                return $98;
                            });
                            var $90 = $97;
                            break;
                        case 'Word.e':
                            var $101 = (_a$pred$8 => {
                                var $102 = Word$e;
                                return $102;
                            });
                            var $90 = $101;
                            break;
                    };
                    var $90 = $90($88);
                    return $90;
                });
                var $87 = $89;
                break;
            case 'Word.i':
                var $103 = self.pred;
                var $104 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $106 = self.pred;
                            var $107 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $109 = Word$o$(Word$subber$(_a$pred$10, $106, Bool$false));
                                    var $108 = $109;
                                } else {
                                    var $110 = Word$i$(Word$subber$(_a$pred$10, $106, Bool$false));
                                    var $108 = $110;
                                };
                                return $108;
                            });
                            var $105 = $107;
                            break;
                        case 'Word.i':
                            var $111 = self.pred;
                            var $112 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $114 = Word$i$(Word$subber$(_a$pred$10, $111, Bool$true));
                                    var $113 = $114;
                                } else {
                                    var $115 = Word$o$(Word$subber$(_a$pred$10, $111, Bool$false));
                                    var $113 = $115;
                                };
                                return $113;
                            });
                            var $105 = $112;
                            break;
                        case 'Word.e':
                            var $116 = (_a$pred$8 => {
                                var $117 = Word$e;
                                return $117;
                            });
                            var $105 = $116;
                            break;
                    };
                    var $105 = $105($103);
                    return $105;
                });
                var $87 = $104;
                break;
            case 'Word.e':
                var $118 = (_b$5 => {
                    var $119 = Word$e;
                    return $119;
                });
                var $87 = $118;
                break;
        };
        var $87 = $87(_b$3);
        return $87;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $120 = Word$subber$(_a$2, _b$3, Bool$false);
        return $120;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => ((a0 - a1) & 0xFFFF);

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $121 = _x$4;
                    return $121;
                } else {
                    var $122 = (self - 1n);
                    var $123 = Nat$apply$($122, _f$3, _f$3(_x$4));
                    return $123;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $125 = self.pred;
                var $126 = Word$i$($125);
                var $124 = $126;
                break;
            case 'Word.i':
                var $127 = self.pred;
                var $128 = Word$o$(Word$inc$($127));
                var $124 = $128;
                break;
            case 'Word.e':
                var $129 = Word$e;
                var $124 = $129;
                break;
        };
        return $124;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $131 = Word$e;
            var $130 = $131;
        } else {
            var $132 = (self - 1n);
            var $133 = Word$o$(Word$zero$($132));
            var $130 = $133;
        };
        return $130;
    };
    const Word$zero = x0 => Word$zero$(x0);

    function Nat$to_word$(_size$1, _n$2) {
        var $134 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));
        return $134;
    };
    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);
    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $136 = self.pred;
                var $137 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $139 = self.pred;
                            var $140 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $142 = Word$i$(Word$adder$(_a$pred$10, $139, Bool$false));
                                    var $141 = $142;
                                } else {
                                    var $143 = Word$o$(Word$adder$(_a$pred$10, $139, Bool$false));
                                    var $141 = $143;
                                };
                                return $141;
                            });
                            var $138 = $140;
                            break;
                        case 'Word.i':
                            var $144 = self.pred;
                            var $145 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $147 = Word$o$(Word$adder$(_a$pred$10, $144, Bool$true));
                                    var $146 = $147;
                                } else {
                                    var $148 = Word$i$(Word$adder$(_a$pred$10, $144, Bool$false));
                                    var $146 = $148;
                                };
                                return $146;
                            });
                            var $138 = $145;
                            break;
                        case 'Word.e':
                            var $149 = (_a$pred$8 => {
                                var $150 = Word$e;
                                return $150;
                            });
                            var $138 = $149;
                            break;
                    };
                    var $138 = $138($136);
                    return $138;
                });
                var $135 = $137;
                break;
            case 'Word.i':
                var $151 = self.pred;
                var $152 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $154 = self.pred;
                            var $155 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $157 = Word$o$(Word$adder$(_a$pred$10, $154, Bool$true));
                                    var $156 = $157;
                                } else {
                                    var $158 = Word$i$(Word$adder$(_a$pred$10, $154, Bool$false));
                                    var $156 = $158;
                                };
                                return $156;
                            });
                            var $153 = $155;
                            break;
                        case 'Word.i':
                            var $159 = self.pred;
                            var $160 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $162 = Word$i$(Word$adder$(_a$pred$10, $159, Bool$true));
                                    var $161 = $162;
                                } else {
                                    var $163 = Word$o$(Word$adder$(_a$pred$10, $159, Bool$true));
                                    var $161 = $163;
                                };
                                return $161;
                            });
                            var $153 = $160;
                            break;
                        case 'Word.e':
                            var $164 = (_a$pred$8 => {
                                var $165 = Word$e;
                                return $165;
                            });
                            var $153 = $164;
                            break;
                    };
                    var $153 = $153($151);
                    return $153;
                });
                var $135 = $152;
                break;
            case 'Word.e':
                var $166 = (_b$5 => {
                    var $167 = Word$e;
                    return $167;
                });
                var $135 = $166;
                break;
        };
        var $135 = $135(_b$3);
        return $135;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $168 = Word$adder$(_a$2, _b$3, Bool$false);
        return $168;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.gtn':
                var $170 = Bool$false;
                var $169 = $170;
                break;
            case 'Cmp.eql':
                var $171 = Bool$true;
                var $169 = $171;
                break;
        };
        return $169;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $172 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $172;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $174 = self.pred;
                var $175 = (Word$to_bits$($174) + '0');
                var $173 = $175;
                break;
            case 'Word.i':
                var $176 = self.pred;
                var $177 = (Word$to_bits$($176) + '1');
                var $173 = $177;
                break;
            case 'Word.e':
                var $178 = Bits$e;
                var $173 = $178;
                break;
        };
        return $173;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $180 = Word$e;
            var $179 = $180;
        } else {
            var $181 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.o':
                    var $183 = self.pred;
                    var $184 = Word$o$(Word$trim$($181, $183));
                    var $182 = $184;
                    break;
                case 'Word.i':
                    var $185 = self.pred;
                    var $186 = Word$i$(Word$trim$($181, $185));
                    var $182 = $186;
                    break;
                case 'Word.e':
                    var $187 = Word$o$(Word$trim$($181, Word$e));
                    var $182 = $187;
                    break;
            };
            var $179 = $182;
        };
        return $179;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $188 = self.slice(0, -1);
                        var $189 = Bits$reverse$tco$($188, (_r$2 + '0'));
                        return $189;
                    case 'i':
                        var $190 = self.slice(0, -1);
                        var $191 = Bits$reverse$tco$($190, (_r$2 + '1'));
                        return $191;
                    case 'e':
                        var $192 = _r$2;
                        return $192;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $193 = Bits$reverse$tco$(_a$1, Bits$e);
        return $193;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));

    function Kind$Map$get$(_name$2, _map$3) {
        var $194 = BitsMap$get$((kind_name_to_bits(_name$2)), _map$3);
        return $194;
    };
    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);

    function IO$get_file$(_name$1) {
        var $195 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $196 = IO$end$(_file$2);
            return $196;
        }));
        return $195;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function Parser$Reply$(_V$1) {
        var $197 = null;
        return $197;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $198 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $198;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $200 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $199 = $200;
        } else {
            var $201 = self.charCodeAt(0);
            var $202 = self.slice(1);
            var $203 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $199 = $203;
        };
        return $199;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $204 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $204;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$(_V$1) {
        var $205 = null;
        return $205;
    };
    const Parser = x0 => Parser$(x0);

    function Maybe$some$(_value$2) {
        var $206 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $206;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $207 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $207;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.some':
                var $209 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $211 = self.value;
                        var self = $209;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $213 = self.idx;
                                var self = $211;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $215 = self.idx;
                                        var self = ($213 > $215);
                                        if (self) {
                                            var $217 = _a$1;
                                            var $216 = $217;
                                        } else {
                                            var $218 = _b$2;
                                            var $216 = $218;
                                        };
                                        var $214 = $216;
                                        break;
                                };
                                var $212 = $214;
                                break;
                        };
                        var $210 = $212;
                        break;
                    case 'Maybe.none':
                        var $219 = _a$1;
                        var $210 = $219;
                        break;
                };
                var $208 = $210;
                break;
            case 'Maybe.none':
                var $220 = _b$2;
                var $208 = $220;
                break;
        };
        return $208;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.cons':
                        var $221 = self.head;
                        var $222 = self.tail;
                        var _parsed$8 = $221(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $224 = self.idx;
                                var $225 = self.code;
                                var $226 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($224, $225, $226));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $227 = Parser$first_of$go$($222, _err$13, _idx$4, _code$5);
                                var $223 = $227;
                                break;
                            case 'Parser.Reply.value':
                                var $228 = self.idx;
                                var $229 = self.code;
                                var $230 = self.val;
                                var $231 = Parser$Reply$value$($228, $229, $230);
                                var $223 = $231;
                                break;
                        };
                        return $223;
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.some':
                                var $233 = self.value;
                                var self = $233;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $235 = self.idx;
                                        var $236 = self.code;
                                        var $237 = self.err;
                                        var $238 = Parser$Reply$error$($235, $236, $237);
                                        var $234 = $238;
                                        break;
                                };
                                var $232 = $234;
                                break;
                            case 'Maybe.none':
                                var $239 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $232 = $239;
                                break;
                        };
                        return $232;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $240 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $240;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function List$cons$(_head$2, _tail$3) {
        var $241 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $241;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function List$(_A$1) {
        var $242 = null;
        return $242;
    };
    const List = x0 => List$(x0);
    const List$nil = ({
        _: 'List.nil'
    });

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $243 = self.idx;
                        var $244 = self.code;
                        var $245 = self.val;
                        var $246 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $247 = _values$3(List$cons$($245, _xs$9));
                            return $247;
                        }), $243, $244);
                        return $246;
                    case 'Parser.Reply.error':
                        var $248 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $248;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $249 = Parser$many$go(_parser$2)((_x$3 => {
            var $250 = _x$3;
            return $250;
        }));
        return $249;
    };
    const Parser$many = x0 => Parser$many$(x0);
    const Unit$new = null;

    function String$cons$(_head$1, _tail$2) {
        var $251 = (String.fromCharCode(_head$1) + _tail$2);
        return $251;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.cons':
                        var $252 = self.head;
                        var $253 = self.tail;
                        var $254 = String$flatten$go$($253, (_res$2 + $252));
                        return $254;
                    case 'List.nil':
                        var $255 = _res$2;
                        return $255;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $256 = String$flatten$go$(_xs$1, "");
        return $256;
    };
    const String$flatten = x0 => String$flatten$(x0);
    const String$nil = '';

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $258 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $257 = $258;
        } else {
            var $259 = self.charCodeAt(0);
            var $260 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $262 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $261 = $262;
            } else {
                var $263 = self.charCodeAt(0);
                var $264 = self.slice(1);
                var self = ($259 === $263);
                if (self) {
                    var $266 = Parser$text$($260, Nat$succ$(_idx$2), $264);
                    var $265 = $266;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($263, String$nil), List$cons$("\'.", List$nil))))));
                    var $267 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $265 = $267;
                };
                var $261 = $265;
            };
            var $257 = $261;
        };
        return $257;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $269 = self.err;
                var $270 = Parser$Reply$error$(_idx$2, _code$3, $269);
                var $268 = $270;
                break;
            case 'Parser.Reply.value':
                var $271 = self.idx;
                var $272 = self.code;
                var $273 = self.val;
                var $274 = Parser$Reply$value$($271, $272, $273);
                var $268 = $274;
                break;
        };
        return $268;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $276 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $275 = $276;
        } else {
            var $277 = self.charCodeAt(0);
            var $278 = self.slice(1);
            var $279 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $275 = $279;
        };
        return $275;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.cons':
                        var $280 = self.head;
                        var $281 = self.tail;
                        var $282 = List$reverse$go$($281, List$cons$($280, _res$3));
                        return $282;
                    case 'List.nil':
                        var $283 = _res$3;
                        return $283;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $284 = List$reverse$go$(_xs$2, List$nil);
        return $284;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $286 = self.idx;
                        var $287 = self.code;
                        var $288 = Parser$Reply$value$($286, $287, List$reverse$(_values$4));
                        var $285 = $288;
                        break;
                    case 'Parser.Reply.error':
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $290 = self.idx;
                                var $291 = self.code;
                                var $292 = self.err;
                                var $293 = Parser$Reply$error$($290, $291, $292);
                                var $289 = $293;
                                break;
                            case 'Parser.Reply.value':
                                var $294 = self.idx;
                                var $295 = self.code;
                                var $296 = self.val;
                                var $297 = Parser$until$go$(_until$2, _parse$3, List$cons$($296, _values$4), $294, $295);
                                var $289 = $297;
                                break;
                        };
                        var $285 = $289;
                        break;
                };
                return $285;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $298 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $298;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $300 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $299 = $300;
        } else {
            var $301 = self.charCodeAt(0);
            var $302 = self.slice(1);
            var $303 = Parser$Reply$value$(Nat$succ$(_idx$1), $302, $301);
            var $299 = $303;
        };
        return $299;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $305 = self.idx;
                var $306 = self.code;
                var $307 = self.err;
                var $308 = Parser$Reply$error$($305, $306, $307);
                var $304 = $308;
                break;
            case 'Parser.Reply.value':
                var $309 = self.idx;
                var $310 = self.code;
                var _endl_or_eof$6 = Parser$first_of$(List$cons$(Parser$text("\u{a}"), List$cons$(Parser$eof, List$nil)));
                var self = Parser$until$(_endl_or_eof$6, Parser$one)($309)($310);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $312 = self.idx;
                        var $313 = self.code;
                        var $314 = self.err;
                        var $315 = Parser$Reply$error$($312, $313, $314);
                        var $311 = $315;
                        break;
                    case 'Parser.Reply.value':
                        var $316 = self.idx;
                        var $317 = self.code;
                        var $318 = Parser$Reply$value$($316, $317, Unit$new);
                        var $311 = $318;
                        break;
                };
                var $304 = $311;
                break;
        };
        return $304;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $319 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $319;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Kind$Parser$init$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $321 = self.idx;
                var $322 = self.code;
                var $323 = self.err;
                var $324 = Parser$Reply$error$($321, $322, $323);
                var $320 = $324;
                break;
            case 'Parser.Reply.value':
                var $325 = self.idx;
                var $326 = self.code;
                var self = Parser$get_index$($325, $326);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $328 = self.idx;
                        var $329 = self.code;
                        var $330 = self.err;
                        var $331 = Parser$Reply$error$($328, $329, $330);
                        var $327 = $331;
                        break;
                    case 'Parser.Reply.value':
                        var $332 = self.idx;
                        var $333 = self.code;
                        var $334 = self.val;
                        var $335 = Parser$Reply$value$($332, $333, $334);
                        var $327 = $335;
                        break;
                };
                var $320 = $327;
                break;
        };
        return $320;
    };
    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $337 = self.idx;
                var $338 = self.code;
                var $339 = self.err;
                var $340 = Parser$Reply$error$($337, $338, $339);
                var $336 = $340;
                break;
            case 'Parser.Reply.value':
                var $341 = self.idx;
                var $342 = self.code;
                var $343 = self.val;
                var self = Parser$many$(_parser$2)($341)($342);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $345 = self.idx;
                        var $346 = self.code;
                        var $347 = self.err;
                        var $348 = Parser$Reply$error$($345, $346, $347);
                        var $344 = $348;
                        break;
                    case 'Parser.Reply.value':
                        var $349 = self.idx;
                        var $350 = self.code;
                        var $351 = self.val;
                        var $352 = Parser$Reply$value$($349, $350, List$cons$($343, $351));
                        var $344 = $352;
                        break;
                };
                var $336 = $344;
                break;
        };
        return $336;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Kind$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $354 = Bool$true;
            var $353 = $354;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $356 = Bool$true;
                var $355 = $356;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $358 = Bool$true;
                    var $357 = $358;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $360 = Bool$true;
                        var $359 = $360;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $362 = Bool$true;
                            var $361 = $362;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $364 = Bool$true;
                                var $363 = $364;
                            } else {
                                var $365 = Bool$false;
                                var $363 = $365;
                            };
                            var $361 = $363;
                        };
                        var $359 = $361;
                    };
                    var $357 = $359;
                };
                var $355 = $357;
            };
            var $353 = $355;
        };
        return $353;
    };
    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);

    function Kind$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $367 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $366 = $367;
        } else {
            var $368 = self.charCodeAt(0);
            var $369 = self.slice(1);
            var self = Kind$Name$is_letter$($368);
            if (self) {
                var $371 = Parser$Reply$value$(Nat$succ$(_idx$1), $369, $368);
                var $370 = $371;
            } else {
                var $372 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $370 = $372;
            };
            var $366 = $370;
        };
        return $366;
    };
    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $374 = self.head;
                var $375 = self.tail;
                var $376 = _cons$5($374)(List$fold$($375, _nil$4, _cons$5));
                var $373 = $376;
                break;
            case 'List.nil':
                var $377 = _nil$4;
                var $373 = $377;
                break;
        };
        return $373;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Kind$Parser$name1$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $379 = self.idx;
                var $380 = self.code;
                var $381 = self.err;
                var $382 = Parser$Reply$error$($379, $380, $381);
                var $378 = $382;
                break;
            case 'Parser.Reply.value':
                var $383 = self.idx;
                var $384 = self.code;
                var self = Parser$many1$(Kind$Parser$letter, $383, $384);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $386 = self.idx;
                        var $387 = self.code;
                        var $388 = self.err;
                        var $389 = Parser$Reply$error$($386, $387, $388);
                        var $385 = $389;
                        break;
                    case 'Parser.Reply.value':
                        var $390 = self.idx;
                        var $391 = self.code;
                        var $392 = self.val;
                        var $393 = Parser$Reply$value$($390, $391, List$fold$($392, String$nil, String$cons));
                        var $385 = $393;
                        break;
                };
                var $378 = $385;
                break;
        };
        return $378;
    };
    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);

    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Kind$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $395 = self.idx;
                var $396 = self.code;
                var $397 = self.err;
                var $398 = Parser$Reply$error$($395, $396, $397);
                var $394 = $398;
                break;
            case 'Parser.Reply.value':
                var $399 = self.idx;
                var $400 = self.code;
                var $401 = Parser$text$(_text$1, $399, $400);
                var $394 = $401;
                break;
        };
        return $394;
    };
    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $403 = self.idx;
                var $404 = self.code;
                var $405 = self.err;
                var $406 = Parser$Reply$error$($403, $404, $405);
                var $402 = $406;
                break;
            case 'Parser.Reply.value':
                var $407 = self.idx;
                var $408 = self.code;
                var $409 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($407)($408);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $411 = self.idx;
                        var $412 = self.code;
                        var $413 = self.err;
                        var $414 = Parser$Reply$error$($411, $412, $413);
                        var $410 = $414;
                        break;
                    case 'Parser.Reply.value':
                        var $415 = self.idx;
                        var $416 = self.code;
                        var $417 = self.val;
                        var $418 = Parser$Reply$value$($415, $416, List$cons$($409, $417));
                        var $410 = $418;
                        break;
                };
                var $402 = $410;
                break;
        };
        return $402;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Pair$(_A$1, _B$2) {
        var $419 = null;
        return $419;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.value':
                var $421 = self.idx;
                var $422 = self.code;
                var $423 = self.val;
                var $424 = Parser$Reply$value$($421, $422, Maybe$some$($423));
                var $420 = $424;
                break;
            case 'Parser.Reply.error':
                var $425 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $420 = $425;
                break;
        };
        return $420;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Kind$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $427 = self.idx;
                var $428 = self.code;
                var $429 = self.err;
                var $430 = Parser$Reply$error$($427, $428, $429);
                var $426 = $430;
                break;
            case 'Parser.Reply.value':
                var $431 = self.idx;
                var $432 = self.code;
                var self = _parser$2($431)($432);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $434 = self.idx;
                        var $435 = self.code;
                        var $436 = self.err;
                        var $437 = Parser$Reply$error$($434, $435, $436);
                        var $433 = $437;
                        break;
                    case 'Parser.Reply.value':
                        var $438 = self.idx;
                        var $439 = self.code;
                        var $440 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $438, $439);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $442 = self.idx;
                                var $443 = self.code;
                                var $444 = self.err;
                                var $445 = Parser$Reply$error$($442, $443, $444);
                                var $441 = $445;
                                break;
                            case 'Parser.Reply.value':
                                var $446 = self.idx;
                                var $447 = self.code;
                                var $448 = Parser$Reply$value$($446, $447, $440);
                                var $441 = $448;
                                break;
                        };
                        var $433 = $441;
                        break;
                };
                var $426 = $433;
                break;
        };
        return $426;
    };
    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);

    function Kind$Parser$name$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $450 = self.idx;
                var $451 = self.code;
                var $452 = self.err;
                var $453 = Parser$Reply$error$($450, $451, $452);
                var $449 = $453;
                break;
            case 'Parser.Reply.value':
                var $454 = self.idx;
                var $455 = self.code;
                var self = Parser$many$(Kind$Parser$letter)($454)($455);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $457 = self.idx;
                        var $458 = self.code;
                        var $459 = self.err;
                        var $460 = Parser$Reply$error$($457, $458, $459);
                        var $456 = $460;
                        break;
                    case 'Parser.Reply.value':
                        var $461 = self.idx;
                        var $462 = self.code;
                        var $463 = self.val;
                        var $464 = Parser$Reply$value$($461, $462, List$fold$($463, String$nil, String$cons));
                        var $456 = $464;
                        break;
                };
                var $449 = $456;
                break;
        };
        return $449;
    };
    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);

    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $465 = ({
            _: 'Kind.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $465;
    };
    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);

    function Pair$new$(_fst$3, _snd$4) {
        var $466 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $466;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $468 = self.idx;
                var $469 = self.code;
                var $470 = self.err;
                var $471 = Parser$Reply$error$($468, $469, $470);
                var $467 = $471;
                break;
            case 'Parser.Reply.value':
                var $472 = self.idx;
                var $473 = self.code;
                var $474 = self.val;
                var _orig$7 = Pair$new$(_from$1, $474);
                var $475 = Parser$Reply$value$($472, $473, _orig$7);
                var $467 = $475;
                break;
        };
        return $467;
    };
    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);

    function Kind$Term$ori$(_orig$1, _expr$2) {
        var $476 = ({
            _: 'Kind.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $476;
    };
    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);

    function Kind$Parser$forall$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $478 = self.idx;
                var $479 = self.code;
                var $480 = self.err;
                var $481 = Parser$Reply$error$($478, $479, $480);
                var $477 = $481;
                break;
            case 'Parser.Reply.value':
                var $482 = self.idx;
                var $483 = self.code;
                var $484 = self.val;
                var self = Kind$Parser$name$($482, $483);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $486 = self.idx;
                        var $487 = self.code;
                        var $488 = self.err;
                        var $489 = Parser$Reply$error$($486, $487, $488);
                        var $485 = $489;
                        break;
                    case 'Parser.Reply.value':
                        var $490 = self.idx;
                        var $491 = self.code;
                        var $492 = self.val;
                        var self = Kind$Parser$binder$(":", $490, $491);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $494 = self.idx;
                                var $495 = self.code;
                                var $496 = self.err;
                                var $497 = Parser$Reply$error$($494, $495, $496);
                                var $493 = $497;
                                break;
                            case 'Parser.Reply.value':
                                var $498 = self.idx;
                                var $499 = self.code;
                                var $500 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text("->"), $498, $499);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $502 = self.idx;
                                        var $503 = self.code;
                                        var $504 = self.err;
                                        var $505 = Parser$Reply$error$($502, $503, $504);
                                        var $501 = $505;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $506 = self.idx;
                                        var $507 = self.code;
                                        var self = Kind$Parser$term$($506, $507);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $509 = self.idx;
                                                var $510 = self.code;
                                                var $511 = self.err;
                                                var $512 = Parser$Reply$error$($509, $510, $511);
                                                var $508 = $512;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $513 = self.idx;
                                                var $514 = self.code;
                                                var $515 = self.val;
                                                var _term$18 = List$fold$($500, $515, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $518 = self.eras;
                                                            var $519 = self.name;
                                                            var $520 = self.term;
                                                            var $521 = Kind$Term$all$($518, "", $519, $520, (_s$23 => _x$24 => {
                                                                var $522 = _t$19;
                                                                return $522;
                                                            }));
                                                            var $517 = $521;
                                                            break;
                                                    };
                                                    return $517;
                                                }));
                                                var self = Kind$Parser$stop$($484, $513, $514);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $523 = self.idx;
                                                        var $524 = self.code;
                                                        var $525 = self.err;
                                                        var $526 = Parser$Reply$error$($523, $524, $525);
                                                        var $516 = $526;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $527 = self.idx;
                                                        var $528 = self.code;
                                                        var $529 = self.val;
                                                        var $530 = Parser$Reply$value$($527, $528, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Kind.Term.all':
                                                                    var $531 = self.eras;
                                                                    var $532 = self.name;
                                                                    var $533 = self.xtyp;
                                                                    var $534 = self.body;
                                                                    var $535 = Kind$Term$ori$($529, Kind$Term$all$($531, $492, $532, $533, $534));
                                                                    return $535;
                                                                case 'Kind.Term.var':
                                                                case 'Kind.Term.ref':
                                                                case 'Kind.Term.typ':
                                                                case 'Kind.Term.lam':
                                                                case 'Kind.Term.app':
                                                                case 'Kind.Term.let':
                                                                case 'Kind.Term.def':
                                                                case 'Kind.Term.ann':
                                                                case 'Kind.Term.gol':
                                                                case 'Kind.Term.hol':
                                                                case 'Kind.Term.nat':
                                                                case 'Kind.Term.chr':
                                                                case 'Kind.Term.str':
                                                                case 'Kind.Term.cse':
                                                                case 'Kind.Term.ori':
                                                                    var $536 = _term$18;
                                                                    return $536;
                                                            };
                                                        })());
                                                        var $516 = $530;
                                                        break;
                                                };
                                                var $508 = $516;
                                                break;
                                        };
                                        var $501 = $508;
                                        break;
                                };
                                var $493 = $501;
                                break;
                        };
                        var $485 = $493;
                        break;
                };
                var $477 = $485;
                break;
        };
        return $477;
    };
    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);

    function Kind$Term$lam$(_name$1, _body$2) {
        var $537 = ({
            _: 'Kind.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $537;
    };
    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);

    function Kind$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $539 = self.head;
                var $540 = self.tail;
                var $541 = Kind$Term$lam$($539, (_x$5 => {
                    var $542 = Kind$Parser$make_lambda$($540, _body$2);
                    return $542;
                }));
                var $538 = $541;
                break;
            case 'List.nil':
                var $543 = _body$2;
                var $538 = $543;
                break;
        };
        return $538;
    };
    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);

    function Kind$Parser$lambda$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $545 = self.idx;
                var $546 = self.code;
                var $547 = self.err;
                var $548 = Parser$Reply$error$($545, $546, $547);
                var $544 = $548;
                break;
            case 'Parser.Reply.value':
                var $549 = self.idx;
                var $550 = self.code;
                var $551 = self.val;
                var self = Kind$Parser$text$("(", $549, $550);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $553 = self.idx;
                        var $554 = self.code;
                        var $555 = self.err;
                        var $556 = Parser$Reply$error$($553, $554, $555);
                        var $552 = $556;
                        break;
                    case 'Parser.Reply.value':
                        var $557 = self.idx;
                        var $558 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$name1), $557, $558);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $560 = self.idx;
                                var $561 = self.code;
                                var $562 = self.err;
                                var $563 = Parser$Reply$error$($560, $561, $562);
                                var $559 = $563;
                                break;
                            case 'Parser.Reply.value':
                                var $564 = self.idx;
                                var $565 = self.code;
                                var $566 = self.val;
                                var self = Kind$Parser$term$($564, $565);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $568 = self.idx;
                                        var $569 = self.code;
                                        var $570 = self.err;
                                        var $571 = Parser$Reply$error$($568, $569, $570);
                                        var $567 = $571;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $572 = self.idx;
                                        var $573 = self.code;
                                        var $574 = self.val;
                                        var self = Kind$Parser$stop$($551, $572, $573);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $576 = self.idx;
                                                var $577 = self.code;
                                                var $578 = self.err;
                                                var $579 = Parser$Reply$error$($576, $577, $578);
                                                var $575 = $579;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $580 = self.idx;
                                                var $581 = self.code;
                                                var $582 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($566, $574);
                                                var $583 = Parser$Reply$value$($580, $581, Kind$Term$ori$($582, _expr$18));
                                                var $575 = $583;
                                                break;
                                        };
                                        var $567 = $575;
                                        break;
                                };
                                var $559 = $567;
                                break;
                        };
                        var $552 = $559;
                        break;
                };
                var $544 = $552;
                break;
        };
        return $544;
    };
    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);

    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $585 = self.idx;
                var $586 = self.code;
                var $587 = self.err;
                var $588 = Parser$Reply$error$($585, $586, $587);
                var $584 = $588;
                break;
            case 'Parser.Reply.value':
                var $589 = self.idx;
                var $590 = self.code;
                var $591 = self.val;
                var self = Kind$Parser$text$("<", $589, $590);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $593 = self.idx;
                        var $594 = self.code;
                        var $595 = self.err;
                        var $596 = Parser$Reply$error$($593, $594, $595);
                        var $592 = $596;
                        break;
                    case 'Parser.Reply.value':
                        var $597 = self.idx;
                        var $598 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(">"), Kind$Parser$item(Kind$Parser$name1), $597, $598);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $600 = self.idx;
                                var $601 = self.code;
                                var $602 = self.err;
                                var $603 = Parser$Reply$error$($600, $601, $602);
                                var $599 = $603;
                                break;
                            case 'Parser.Reply.value':
                                var $604 = self.idx;
                                var $605 = self.code;
                                var $606 = self.val;
                                var self = Kind$Parser$term$($604, $605);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $608 = self.idx;
                                        var $609 = self.code;
                                        var $610 = self.err;
                                        var $611 = Parser$Reply$error$($608, $609, $610);
                                        var $607 = $611;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $612 = self.idx;
                                        var $613 = self.code;
                                        var $614 = self.val;
                                        var self = Kind$Parser$stop$($591, $612, $613);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $616 = self.idx;
                                                var $617 = self.code;
                                                var $618 = self.err;
                                                var $619 = Parser$Reply$error$($616, $617, $618);
                                                var $615 = $619;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $620 = self.idx;
                                                var $621 = self.code;
                                                var $622 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($606, $614);
                                                var $623 = Parser$Reply$value$($620, $621, Kind$Term$ori$($622, _expr$18));
                                                var $615 = $623;
                                                break;
                                        };
                                        var $607 = $615;
                                        break;
                                };
                                var $599 = $607;
                                break;
                        };
                        var $592 = $599;
                        break;
                };
                var $584 = $592;
                break;
        };
        return $584;
    };
    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);

    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $625 = self.idx;
                var $626 = self.code;
                var $627 = self.err;
                var $628 = Parser$Reply$error$($625, $626, $627);
                var $624 = $628;
                break;
            case 'Parser.Reply.value':
                var $629 = self.idx;
                var $630 = self.code;
                var $631 = self.val;
                var self = Kind$Parser$text$("()", $629, $630);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $633 = self.idx;
                        var $634 = self.code;
                        var $635 = self.err;
                        var $636 = Parser$Reply$error$($633, $634, $635);
                        var $632 = $636;
                        break;
                    case 'Parser.Reply.value':
                        var $637 = self.idx;
                        var $638 = self.code;
                        var self = Kind$Parser$term$($637, $638);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $640 = self.idx;
                                var $641 = self.code;
                                var $642 = self.err;
                                var $643 = Parser$Reply$error$($640, $641, $642);
                                var $639 = $643;
                                break;
                            case 'Parser.Reply.value':
                                var $644 = self.idx;
                                var $645 = self.code;
                                var $646 = self.val;
                                var self = Kind$Parser$stop$($631, $644, $645);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $648 = self.idx;
                                        var $649 = self.code;
                                        var $650 = self.err;
                                        var $651 = Parser$Reply$error$($648, $649, $650);
                                        var $647 = $651;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $652 = self.idx;
                                        var $653 = self.code;
                                        var $654 = self.val;
                                        var _expr$15 = Kind$Term$lam$("", (_x$15 => {
                                            var $656 = $646;
                                            return $656;
                                        }));
                                        var $655 = Parser$Reply$value$($652, $653, Kind$Term$ori$($654, _expr$15));
                                        var $647 = $655;
                                        break;
                                };
                                var $639 = $647;
                                break;
                        };
                        var $632 = $639;
                        break;
                };
                var $624 = $632;
                break;
        };
        return $624;
    };
    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);

    function Kind$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $658 = self.idx;
                var $659 = self.code;
                var $660 = self.err;
                var $661 = Parser$Reply$error$($658, $659, $660);
                var $657 = $661;
                break;
            case 'Parser.Reply.value':
                var $662 = self.idx;
                var $663 = self.code;
                var $664 = self.val;
                var self = Kind$Parser$text$("(", $662, $663);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $666 = self.idx;
                        var $667 = self.code;
                        var $668 = self.err;
                        var $669 = Parser$Reply$error$($666, $667, $668);
                        var $665 = $669;
                        break;
                    case 'Parser.Reply.value':
                        var $670 = self.idx;
                        var $671 = self.code;
                        var self = Kind$Parser$term$($670, $671);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $673 = self.idx;
                                var $674 = self.code;
                                var $675 = self.err;
                                var $676 = Parser$Reply$error$($673, $674, $675);
                                var $672 = $676;
                                break;
                            case 'Parser.Reply.value':
                                var $677 = self.idx;
                                var $678 = self.code;
                                var $679 = self.val;
                                var self = Kind$Parser$text$(")", $677, $678);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $681 = self.idx;
                                        var $682 = self.code;
                                        var $683 = self.err;
                                        var $684 = Parser$Reply$error$($681, $682, $683);
                                        var $680 = $684;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $685 = self.idx;
                                        var $686 = self.code;
                                        var self = Kind$Parser$stop$($664, $685, $686);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $688 = self.idx;
                                                var $689 = self.code;
                                                var $690 = self.err;
                                                var $691 = Parser$Reply$error$($688, $689, $690);
                                                var $687 = $691;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $692 = self.idx;
                                                var $693 = self.code;
                                                var $694 = self.val;
                                                var $695 = Parser$Reply$value$($692, $693, Kind$Term$ori$($694, $679));
                                                var $687 = $695;
                                                break;
                                        };
                                        var $680 = $687;
                                        break;
                                };
                                var $672 = $680;
                                break;
                        };
                        var $665 = $672;
                        break;
                };
                var $657 = $665;
                break;
        };
        return $657;
    };
    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);

    function Kind$Term$ref$(_name$1) {
        var $696 = ({
            _: 'Kind.Term.ref',
            'name': _name$1
        });
        return $696;
    };
    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);

    function Kind$Term$app$(_func$1, _argm$2) {
        var $697 = ({
            _: 'Kind.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $697;
    };
    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);

    function Kind$Term$hol$(_path$1) {
        var $698 = ({
            _: 'Kind.Term.hol',
            'path': _path$1
        });
        return $698;
    };
    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);

    function Kind$Term$let$(_name$1, _expr$2, _body$3) {
        var $699 = ({
            _: 'Kind.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $699;
    };
    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);

    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $701 = self.idx;
                var $702 = self.code;
                var $703 = self.err;
                var $704 = Parser$Reply$error$($701, $702, $703);
                var $700 = $704;
                break;
            case 'Parser.Reply.value':
                var $705 = self.idx;
                var $706 = self.code;
                var $707 = self.val;
                var self = Kind$Parser$text$("let ", $705, $706);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $709 = self.idx;
                        var $710 = self.code;
                        var $711 = self.err;
                        var $712 = Parser$Reply$error$($709, $710, $711);
                        var $708 = $712;
                        break;
                    case 'Parser.Reply.value':
                        var $713 = self.idx;
                        var $714 = self.code;
                        var self = Kind$Parser$name1$($713, $714);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $716 = self.idx;
                                var $717 = self.code;
                                var $718 = self.err;
                                var $719 = Parser$Reply$error$($716, $717, $718);
                                var $715 = $719;
                                break;
                            case 'Parser.Reply.value':
                                var $720 = self.idx;
                                var $721 = self.code;
                                var $722 = self.val;
                                var self = Kind$Parser$text$("=", $720, $721);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $724 = self.idx;
                                        var $725 = self.code;
                                        var $726 = self.err;
                                        var $727 = Parser$Reply$error$($724, $725, $726);
                                        var $723 = $727;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $728 = self.idx;
                                        var $729 = self.code;
                                        var self = Kind$Parser$text$("for ", $728, $729);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $731 = self.idx;
                                                var $732 = self.code;
                                                var $733 = self.err;
                                                var $734 = Parser$Reply$error$($731, $732, $733);
                                                var $730 = $734;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $735 = self.idx;
                                                var $736 = self.code;
                                                var self = Kind$Parser$name1$($735, $736);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $738 = self.idx;
                                                        var $739 = self.code;
                                                        var $740 = self.err;
                                                        var $741 = Parser$Reply$error$($738, $739, $740);
                                                        var $737 = $741;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $742 = self.idx;
                                                        var $743 = self.code;
                                                        var $744 = self.val;
                                                        var self = Kind$Parser$text$(":", $742, $743);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $746 = self.idx;
                                                                var $747 = self.code;
                                                                var $748 = self.err;
                                                                var $749 = Parser$Reply$error$($746, $747, $748);
                                                                var $745 = $749;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $750 = self.idx;
                                                                var $751 = self.code;
                                                                var self = Kind$Parser$text$("U32", $750, $751);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $753 = self.idx;
                                                                        var $754 = self.code;
                                                                        var $755 = self.err;
                                                                        var $756 = Parser$Reply$error$($753, $754, $755);
                                                                        var $752 = $756;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $757 = self.idx;
                                                                        var $758 = self.code;
                                                                        var self = Kind$Parser$text$("from", $757, $758);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $760 = self.idx;
                                                                                var $761 = self.code;
                                                                                var $762 = self.err;
                                                                                var $763 = Parser$Reply$error$($760, $761, $762);
                                                                                var $759 = $763;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $764 = self.idx;
                                                                                var $765 = self.code;
                                                                                var self = Kind$Parser$term$($764, $765);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $767 = self.idx;
                                                                                        var $768 = self.code;
                                                                                        var $769 = self.err;
                                                                                        var $770 = Parser$Reply$error$($767, $768, $769);
                                                                                        var $766 = $770;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $771 = self.idx;
                                                                                        var $772 = self.code;
                                                                                        var $773 = self.val;
                                                                                        var self = Kind$Parser$text$("to", $771, $772);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $775 = self.idx;
                                                                                                var $776 = self.code;
                                                                                                var $777 = self.err;
                                                                                                var $778 = Parser$Reply$error$($775, $776, $777);
                                                                                                var $774 = $778;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $779 = self.idx;
                                                                                                var $780 = self.code;
                                                                                                var self = Kind$Parser$term$($779, $780);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $782 = self.idx;
                                                                                                        var $783 = self.code;
                                                                                                        var $784 = self.err;
                                                                                                        var $785 = Parser$Reply$error$($782, $783, $784);
                                                                                                        var $781 = $785;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $786 = self.idx;
                                                                                                        var $787 = self.code;
                                                                                                        var $788 = self.val;
                                                                                                        var self = Kind$Parser$text$(":", $786, $787);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $790 = self.idx;
                                                                                                                var $791 = self.code;
                                                                                                                var $792 = self.err;
                                                                                                                var $793 = Parser$Reply$error$($790, $791, $792);
                                                                                                                var $789 = $793;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $794 = self.idx;
                                                                                                                var $795 = self.code;
                                                                                                                var self = Kind$Parser$term$($794, $795);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $797 = self.idx;
                                                                                                                        var $798 = self.code;
                                                                                                                        var $799 = self.err;
                                                                                                                        var $800 = Parser$Reply$error$($797, $798, $799);
                                                                                                                        var $796 = $800;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $801 = self.idx;
                                                                                                                        var $802 = self.code;
                                                                                                                        var $803 = self.val;
                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $801, $802);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $805 = self.idx;
                                                                                                                                var $806 = self.code;
                                                                                                                                var $807 = self.err;
                                                                                                                                var $808 = Parser$Reply$error$($805, $806, $807);
                                                                                                                                var $804 = $808;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $809 = self.idx;
                                                                                                                                var $810 = self.code;
                                                                                                                                var self = Kind$Parser$term$($809, $810);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $812 = self.idx;
                                                                                                                                        var $813 = self.code;
                                                                                                                                        var $814 = self.err;
                                                                                                                                        var $815 = Parser$Reply$error$($812, $813, $814);
                                                                                                                                        var $811 = $815;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $816 = self.idx;
                                                                                                                                        var $817 = self.code;
                                                                                                                                        var $818 = self.val;
                                                                                                                                        var self = Kind$Parser$stop$($707, $816, $817);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $820 = self.idx;
                                                                                                                                                var $821 = self.code;
                                                                                                                                                var $822 = self.err;
                                                                                                                                                var $823 = Parser$Reply$error$($820, $821, $822);
                                                                                                                                                var $819 = $823;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $824 = self.idx;
                                                                                                                                                var $825 = self.code;
                                                                                                                                                var $826 = self.val;
                                                                                                                                                var _term$54 = Kind$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($722));
                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $773);
                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $788);
                                                                                                                                                var _lamb$59 = Kind$Term$lam$($744, (_e$59 => {
                                                                                                                                                    var $828 = Kind$Term$lam$($722, (_s$60 => {
                                                                                                                                                        var $829 = $803;
                                                                                                                                                        return $829;
                                                                                                                                                    }));
                                                                                                                                                    return $828;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Kind$Term$let$($722, _term$60, (_x$61 => {
                                                                                                                                                    var $830 = $818;
                                                                                                                                                    return $830;
                                                                                                                                                }));
                                                                                                                                                var $827 = Parser$Reply$value$($824, $825, Kind$Term$ori$($826, _term$61));
                                                                                                                                                var $819 = $827;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $811 = $819;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $804 = $811;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $796 = $804;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $789 = $796;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $781 = $789;
                                                                                                        break;
                                                                                                };
                                                                                                var $774 = $781;
                                                                                                break;
                                                                                        };
                                                                                        var $766 = $774;
                                                                                        break;
                                                                                };
                                                                                var $759 = $766;
                                                                                break;
                                                                        };
                                                                        var $752 = $759;
                                                                        break;
                                                                };
                                                                var $745 = $752;
                                                                break;
                                                        };
                                                        var $737 = $745;
                                                        break;
                                                };
                                                var $730 = $737;
                                                break;
                                        };
                                        var $723 = $730;
                                        break;
                                };
                                var $715 = $723;
                                break;
                        };
                        var $708 = $715;
                        break;
                };
                var $700 = $708;
                break;
        };
        return $700;
    };
    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);

    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $832 = self.idx;
                var $833 = self.code;
                var $834 = self.err;
                var $835 = Parser$Reply$error$($832, $833, $834);
                var $831 = $835;
                break;
            case 'Parser.Reply.value':
                var $836 = self.idx;
                var $837 = self.code;
                var $838 = self.val;
                var self = Kind$Parser$text$("for ", $836, $837);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $840 = self.idx;
                        var $841 = self.code;
                        var $842 = self.err;
                        var $843 = Parser$Reply$error$($840, $841, $842);
                        var $839 = $843;
                        break;
                    case 'Parser.Reply.value':
                        var $844 = self.idx;
                        var $845 = self.code;
                        var self = Kind$Parser$name1$($844, $845);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $847 = self.idx;
                                var $848 = self.code;
                                var $849 = self.err;
                                var $850 = Parser$Reply$error$($847, $848, $849);
                                var $846 = $850;
                                break;
                            case 'Parser.Reply.value':
                                var $851 = self.idx;
                                var $852 = self.code;
                                var $853 = self.val;
                                var self = Kind$Parser$text$(":", $851, $852);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $855 = self.idx;
                                        var $856 = self.code;
                                        var $857 = self.err;
                                        var $858 = Parser$Reply$error$($855, $856, $857);
                                        var $854 = $858;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $859 = self.idx;
                                        var $860 = self.code;
                                        var self = Kind$Parser$text$("U32", $859, $860);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $862 = self.idx;
                                                var $863 = self.code;
                                                var $864 = self.err;
                                                var $865 = Parser$Reply$error$($862, $863, $864);
                                                var $861 = $865;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $866 = self.idx;
                                                var $867 = self.code;
                                                var self = Kind$Parser$text$("from", $866, $867);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $869 = self.idx;
                                                        var $870 = self.code;
                                                        var $871 = self.err;
                                                        var $872 = Parser$Reply$error$($869, $870, $871);
                                                        var $868 = $872;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $873 = self.idx;
                                                        var $874 = self.code;
                                                        var self = Kind$Parser$term$($873, $874);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $876 = self.idx;
                                                                var $877 = self.code;
                                                                var $878 = self.err;
                                                                var $879 = Parser$Reply$error$($876, $877, $878);
                                                                var $875 = $879;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $880 = self.idx;
                                                                var $881 = self.code;
                                                                var $882 = self.val;
                                                                var self = Kind$Parser$text$("to", $880, $881);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $884 = self.idx;
                                                                        var $885 = self.code;
                                                                        var $886 = self.err;
                                                                        var $887 = Parser$Reply$error$($884, $885, $886);
                                                                        var $883 = $887;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $888 = self.idx;
                                                                        var $889 = self.code;
                                                                        var self = Kind$Parser$term$($888, $889);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $891 = self.idx;
                                                                                var $892 = self.code;
                                                                                var $893 = self.err;
                                                                                var $894 = Parser$Reply$error$($891, $892, $893);
                                                                                var $890 = $894;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $895 = self.idx;
                                                                                var $896 = self.code;
                                                                                var $897 = self.val;
                                                                                var self = Kind$Parser$text$("with ", $895, $896);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $899 = self.idx;
                                                                                        var $900 = self.code;
                                                                                        var $901 = self.err;
                                                                                        var $902 = Parser$Reply$error$($899, $900, $901);
                                                                                        var $898 = $902;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $903 = self.idx;
                                                                                        var $904 = self.code;
                                                                                        var self = Kind$Parser$name1$($903, $904);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $906 = self.idx;
                                                                                                var $907 = self.code;
                                                                                                var $908 = self.err;
                                                                                                var $909 = Parser$Reply$error$($906, $907, $908);
                                                                                                var $905 = $909;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $910 = self.idx;
                                                                                                var $911 = self.code;
                                                                                                var $912 = self.val;
                                                                                                var self = Kind$Parser$text$(":", $910, $911);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $914 = self.idx;
                                                                                                        var $915 = self.code;
                                                                                                        var $916 = self.err;
                                                                                                        var $917 = Parser$Reply$error$($914, $915, $916);
                                                                                                        var $913 = $917;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $918 = self.idx;
                                                                                                        var $919 = self.code;
                                                                                                        var self = Kind$Parser$term$($918, $919);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $921 = self.idx;
                                                                                                                var $922 = self.code;
                                                                                                                var $923 = self.err;
                                                                                                                var $924 = Parser$Reply$error$($921, $922, $923);
                                                                                                                var $920 = $924;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $925 = self.idx;
                                                                                                                var $926 = self.code;
                                                                                                                var $927 = self.val;
                                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $925, $926);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $929 = self.idx;
                                                                                                                        var $930 = self.code;
                                                                                                                        var $931 = self.err;
                                                                                                                        var $932 = Parser$Reply$error$($929, $930, $931);
                                                                                                                        var $928 = $932;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $933 = self.idx;
                                                                                                                        var $934 = self.code;
                                                                                                                        var self = Kind$Parser$term$($933, $934);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $936 = self.idx;
                                                                                                                                var $937 = self.code;
                                                                                                                                var $938 = self.err;
                                                                                                                                var $939 = Parser$Reply$error$($936, $937, $938);
                                                                                                                                var $935 = $939;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $940 = self.idx;
                                                                                                                                var $941 = self.code;
                                                                                                                                var $942 = self.val;
                                                                                                                                var self = Kind$Parser$stop$($838, $940, $941);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $944 = self.idx;
                                                                                                                                        var $945 = self.code;
                                                                                                                                        var $946 = self.err;
                                                                                                                                        var $947 = Parser$Reply$error$($944, $945, $946);
                                                                                                                                        var $943 = $947;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $948 = self.idx;
                                                                                                                                        var $949 = self.code;
                                                                                                                                        var $950 = self.val;
                                                                                                                                        var _term$51 = Kind$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($912));
                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $882);
                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $897);
                                                                                                                                        var _lamb$56 = Kind$Term$lam$($853, (_e$56 => {
                                                                                                                                            var $952 = Kind$Term$lam$($912, (_s$57 => {
                                                                                                                                                var $953 = $927;
                                                                                                                                                return $953;
                                                                                                                                            }));
                                                                                                                                            return $952;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Kind$Term$let$($912, _term$57, (_x$58 => {
                                                                                                                                            var $954 = $942;
                                                                                                                                            return $954;
                                                                                                                                        }));
                                                                                                                                        var $951 = Parser$Reply$value$($948, $949, Kind$Term$ori$($950, _term$58));
                                                                                                                                        var $943 = $951;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $935 = $943;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $928 = $935;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $920 = $928;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $913 = $920;
                                                                                                        break;
                                                                                                };
                                                                                                var $905 = $913;
                                                                                                break;
                                                                                        };
                                                                                        var $898 = $905;
                                                                                        break;
                                                                                };
                                                                                var $890 = $898;
                                                                                break;
                                                                        };
                                                                        var $883 = $890;
                                                                        break;
                                                                };
                                                                var $875 = $883;
                                                                break;
                                                        };
                                                        var $868 = $875;
                                                        break;
                                                };
                                                var $861 = $868;
                                                break;
                                        };
                                        var $854 = $861;
                                        break;
                                };
                                var $846 = $854;
                                break;
                        };
                        var $839 = $846;
                        break;
                };
                var $831 = $839;
                break;
        };
        return $831;
    };
    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);

    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $956 = self.idx;
                var $957 = self.code;
                var $958 = self.err;
                var $959 = Parser$Reply$error$($956, $957, $958);
                var $955 = $959;
                break;
            case 'Parser.Reply.value':
                var $960 = self.idx;
                var $961 = self.code;
                var $962 = self.val;
                var self = Kind$Parser$text$("let ", $960, $961);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $964 = self.idx;
                        var $965 = self.code;
                        var $966 = self.err;
                        var $967 = Parser$Reply$error$($964, $965, $966);
                        var $963 = $967;
                        break;
                    case 'Parser.Reply.value':
                        var $968 = self.idx;
                        var $969 = self.code;
                        var self = Kind$Parser$name1$($968, $969);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $971 = self.idx;
                                var $972 = self.code;
                                var $973 = self.err;
                                var $974 = Parser$Reply$error$($971, $972, $973);
                                var $970 = $974;
                                break;
                            case 'Parser.Reply.value':
                                var $975 = self.idx;
                                var $976 = self.code;
                                var $977 = self.val;
                                var self = Kind$Parser$text$("=", $975, $976);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $979 = self.idx;
                                        var $980 = self.code;
                                        var $981 = self.err;
                                        var $982 = Parser$Reply$error$($979, $980, $981);
                                        var $978 = $982;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $983 = self.idx;
                                        var $984 = self.code;
                                        var self = Kind$Parser$text$("for ", $983, $984);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $986 = self.idx;
                                                var $987 = self.code;
                                                var $988 = self.err;
                                                var $989 = Parser$Reply$error$($986, $987, $988);
                                                var $985 = $989;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $990 = self.idx;
                                                var $991 = self.code;
                                                var self = Kind$Parser$name1$($990, $991);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $993 = self.idx;
                                                        var $994 = self.code;
                                                        var $995 = self.err;
                                                        var $996 = Parser$Reply$error$($993, $994, $995);
                                                        var $992 = $996;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $997 = self.idx;
                                                        var $998 = self.code;
                                                        var $999 = self.val;
                                                        var self = Kind$Parser$text$("from", $997, $998);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1001 = self.idx;
                                                                var $1002 = self.code;
                                                                var $1003 = self.err;
                                                                var $1004 = Parser$Reply$error$($1001, $1002, $1003);
                                                                var $1000 = $1004;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1005 = self.idx;
                                                                var $1006 = self.code;
                                                                var self = Kind$Parser$term$($1005, $1006);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1008 = self.idx;
                                                                        var $1009 = self.code;
                                                                        var $1010 = self.err;
                                                                        var $1011 = Parser$Reply$error$($1008, $1009, $1010);
                                                                        var $1007 = $1011;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1012 = self.idx;
                                                                        var $1013 = self.code;
                                                                        var $1014 = self.val;
                                                                        var self = Kind$Parser$text$("to", $1012, $1013);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1016 = self.idx;
                                                                                var $1017 = self.code;
                                                                                var $1018 = self.err;
                                                                                var $1019 = Parser$Reply$error$($1016, $1017, $1018);
                                                                                var $1015 = $1019;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1020 = self.idx;
                                                                                var $1021 = self.code;
                                                                                var self = Kind$Parser$term$($1020, $1021);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1023 = self.idx;
                                                                                        var $1024 = self.code;
                                                                                        var $1025 = self.err;
                                                                                        var $1026 = Parser$Reply$error$($1023, $1024, $1025);
                                                                                        var $1022 = $1026;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1027 = self.idx;
                                                                                        var $1028 = self.code;
                                                                                        var $1029 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1027, $1028);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1031 = self.idx;
                                                                                                var $1032 = self.code;
                                                                                                var $1033 = self.err;
                                                                                                var $1034 = Parser$Reply$error$($1031, $1032, $1033);
                                                                                                var $1030 = $1034;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1035 = self.idx;
                                                                                                var $1036 = self.code;
                                                                                                var self = Kind$Parser$term$($1035, $1036);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1038 = self.idx;
                                                                                                        var $1039 = self.code;
                                                                                                        var $1040 = self.err;
                                                                                                        var $1041 = Parser$Reply$error$($1038, $1039, $1040);
                                                                                                        var $1037 = $1041;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1042 = self.idx;
                                                                                                        var $1043 = self.code;
                                                                                                        var $1044 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1042, $1043);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1046 = self.idx;
                                                                                                                var $1047 = self.code;
                                                                                                                var $1048 = self.err;
                                                                                                                var $1049 = Parser$Reply$error$($1046, $1047, $1048);
                                                                                                                var $1045 = $1049;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1050 = self.idx;
                                                                                                                var $1051 = self.code;
                                                                                                                var self = Kind$Parser$term$($1050, $1051);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1053 = self.idx;
                                                                                                                        var $1054 = self.code;
                                                                                                                        var $1055 = self.err;
                                                                                                                        var $1056 = Parser$Reply$error$($1053, $1054, $1055);
                                                                                                                        var $1052 = $1056;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1057 = self.idx;
                                                                                                                        var $1058 = self.code;
                                                                                                                        var $1059 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($962, $1057, $1058);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1061 = self.idx;
                                                                                                                                var $1062 = self.code;
                                                                                                                                var $1063 = self.err;
                                                                                                                                var $1064 = Parser$Reply$error$($1061, $1062, $1063);
                                                                                                                                var $1060 = $1064;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1065 = self.idx;
                                                                                                                                var $1066 = self.code;
                                                                                                                                var $1067 = self.val;
                                                                                                                                var _term$48 = Kind$Term$ref$("Nat.for");
                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($977));
                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $1014);
                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1029);
                                                                                                                                var _lamb$53 = Kind$Term$lam$($999, (_e$53 => {
                                                                                                                                    var $1069 = Kind$Term$lam$($977, (_s$54 => {
                                                                                                                                        var $1070 = $1044;
                                                                                                                                        return $1070;
                                                                                                                                    }));
                                                                                                                                    return $1069;
                                                                                                                                }));
                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);
                                                                                                                                var _term$55 = Kind$Term$let$($977, _term$54, (_x$55 => {
                                                                                                                                    var $1071 = $1059;
                                                                                                                                    return $1071;
                                                                                                                                }));
                                                                                                                                var $1068 = Parser$Reply$value$($1065, $1066, Kind$Term$ori$($1067, _term$55));
                                                                                                                                var $1060 = $1068;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1052 = $1060;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1045 = $1052;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1037 = $1045;
                                                                                                        break;
                                                                                                };
                                                                                                var $1030 = $1037;
                                                                                                break;
                                                                                        };
                                                                                        var $1022 = $1030;
                                                                                        break;
                                                                                };
                                                                                var $1015 = $1022;
                                                                                break;
                                                                        };
                                                                        var $1007 = $1015;
                                                                        break;
                                                                };
                                                                var $1000 = $1007;
                                                                break;
                                                        };
                                                        var $992 = $1000;
                                                        break;
                                                };
                                                var $985 = $992;
                                                break;
                                        };
                                        var $978 = $985;
                                        break;
                                };
                                var $970 = $978;
                                break;
                        };
                        var $963 = $970;
                        break;
                };
                var $955 = $963;
                break;
        };
        return $955;
    };
    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);

    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1073 = self.idx;
                var $1074 = self.code;
                var $1075 = self.err;
                var $1076 = Parser$Reply$error$($1073, $1074, $1075);
                var $1072 = $1076;
                break;
            case 'Parser.Reply.value':
                var $1077 = self.idx;
                var $1078 = self.code;
                var $1079 = self.val;
                var self = Kind$Parser$text$("for ", $1077, $1078);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1081 = self.idx;
                        var $1082 = self.code;
                        var $1083 = self.err;
                        var $1084 = Parser$Reply$error$($1081, $1082, $1083);
                        var $1080 = $1084;
                        break;
                    case 'Parser.Reply.value':
                        var $1085 = self.idx;
                        var $1086 = self.code;
                        var self = Kind$Parser$name1$($1085, $1086);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1088 = self.idx;
                                var $1089 = self.code;
                                var $1090 = self.err;
                                var $1091 = Parser$Reply$error$($1088, $1089, $1090);
                                var $1087 = $1091;
                                break;
                            case 'Parser.Reply.value':
                                var $1092 = self.idx;
                                var $1093 = self.code;
                                var $1094 = self.val;
                                var self = Kind$Parser$text$("from", $1092, $1093);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1096 = self.idx;
                                        var $1097 = self.code;
                                        var $1098 = self.err;
                                        var $1099 = Parser$Reply$error$($1096, $1097, $1098);
                                        var $1095 = $1099;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1100 = self.idx;
                                        var $1101 = self.code;
                                        var self = Kind$Parser$term$($1100, $1101);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1103 = self.idx;
                                                var $1104 = self.code;
                                                var $1105 = self.err;
                                                var $1106 = Parser$Reply$error$($1103, $1104, $1105);
                                                var $1102 = $1106;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1107 = self.idx;
                                                var $1108 = self.code;
                                                var $1109 = self.val;
                                                var self = Kind$Parser$text$("to", $1107, $1108);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1111 = self.idx;
                                                        var $1112 = self.code;
                                                        var $1113 = self.err;
                                                        var $1114 = Parser$Reply$error$($1111, $1112, $1113);
                                                        var $1110 = $1114;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1115 = self.idx;
                                                        var $1116 = self.code;
                                                        var self = Kind$Parser$term$($1115, $1116);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1118 = self.idx;
                                                                var $1119 = self.code;
                                                                var $1120 = self.err;
                                                                var $1121 = Parser$Reply$error$($1118, $1119, $1120);
                                                                var $1117 = $1121;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1122 = self.idx;
                                                                var $1123 = self.code;
                                                                var $1124 = self.val;
                                                                var self = Kind$Parser$text$("with ", $1122, $1123);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1126 = self.idx;
                                                                        var $1127 = self.code;
                                                                        var $1128 = self.err;
                                                                        var $1129 = Parser$Reply$error$($1126, $1127, $1128);
                                                                        var $1125 = $1129;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1130 = self.idx;
                                                                        var $1131 = self.code;
                                                                        var self = Kind$Parser$name1$($1130, $1131);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1133 = self.idx;
                                                                                var $1134 = self.code;
                                                                                var $1135 = self.err;
                                                                                var $1136 = Parser$Reply$error$($1133, $1134, $1135);
                                                                                var $1132 = $1136;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1137 = self.idx;
                                                                                var $1138 = self.code;
                                                                                var $1139 = self.val;
                                                                                var self = Kind$Parser$text$(":", $1137, $1138);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1141 = self.idx;
                                                                                        var $1142 = self.code;
                                                                                        var $1143 = self.err;
                                                                                        var $1144 = Parser$Reply$error$($1141, $1142, $1143);
                                                                                        var $1140 = $1144;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1145 = self.idx;
                                                                                        var $1146 = self.code;
                                                                                        var self = Kind$Parser$term$($1145, $1146);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1148 = self.idx;
                                                                                                var $1149 = self.code;
                                                                                                var $1150 = self.err;
                                                                                                var $1151 = Parser$Reply$error$($1148, $1149, $1150);
                                                                                                var $1147 = $1151;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1152 = self.idx;
                                                                                                var $1153 = self.code;
                                                                                                var $1154 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1152, $1153);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1156 = self.idx;
                                                                                                        var $1157 = self.code;
                                                                                                        var $1158 = self.err;
                                                                                                        var $1159 = Parser$Reply$error$($1156, $1157, $1158);
                                                                                                        var $1155 = $1159;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1160 = self.idx;
                                                                                                        var $1161 = self.code;
                                                                                                        var self = Kind$Parser$term$($1160, $1161);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1163 = self.idx;
                                                                                                                var $1164 = self.code;
                                                                                                                var $1165 = self.err;
                                                                                                                var $1166 = Parser$Reply$error$($1163, $1164, $1165);
                                                                                                                var $1162 = $1166;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1167 = self.idx;
                                                                                                                var $1168 = self.code;
                                                                                                                var $1169 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1079, $1167, $1168);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1171 = self.idx;
                                                                                                                        var $1172 = self.code;
                                                                                                                        var $1173 = self.err;
                                                                                                                        var $1174 = Parser$Reply$error$($1171, $1172, $1173);
                                                                                                                        var $1170 = $1174;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1175 = self.idx;
                                                                                                                        var $1176 = self.code;
                                                                                                                        var $1177 = self.val;
                                                                                                                        var _term$45 = Kind$Term$ref$("Nat.for");
                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1139));
                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1109);
                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1124);
                                                                                                                        var _lamb$50 = Kind$Term$lam$($1094, (_e$50 => {
                                                                                                                            var $1179 = Kind$Term$lam$($1139, (_s$51 => {
                                                                                                                                var $1180 = $1154;
                                                                                                                                return $1180;
                                                                                                                            }));
                                                                                                                            return $1179;
                                                                                                                        }));
                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Kind$Term$let$($1139, _term$51, (_x$52 => {
                                                                                                                            var $1181 = $1169;
                                                                                                                            return $1181;
                                                                                                                        }));
                                                                                                                        var $1178 = Parser$Reply$value$($1175, $1176, Kind$Term$ori$($1177, _term$52));
                                                                                                                        var $1170 = $1178;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1162 = $1170;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1155 = $1162;
                                                                                                        break;
                                                                                                };
                                                                                                var $1147 = $1155;
                                                                                                break;
                                                                                        };
                                                                                        var $1140 = $1147;
                                                                                        break;
                                                                                };
                                                                                var $1132 = $1140;
                                                                                break;
                                                                        };
                                                                        var $1125 = $1132;
                                                                        break;
                                                                };
                                                                var $1117 = $1125;
                                                                break;
                                                        };
                                                        var $1110 = $1117;
                                                        break;
                                                };
                                                var $1102 = $1110;
                                                break;
                                        };
                                        var $1095 = $1102;
                                        break;
                                };
                                var $1087 = $1095;
                                break;
                        };
                        var $1080 = $1087;
                        break;
                };
                var $1072 = $1080;
                break;
        };
        return $1072;
    };
    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);

    function Kind$Parser$letforin$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1183 = self.idx;
                var $1184 = self.code;
                var $1185 = self.err;
                var $1186 = Parser$Reply$error$($1183, $1184, $1185);
                var $1182 = $1186;
                break;
            case 'Parser.Reply.value':
                var $1187 = self.idx;
                var $1188 = self.code;
                var $1189 = self.val;
                var self = Kind$Parser$text$("let ", $1187, $1188);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1191 = self.idx;
                        var $1192 = self.code;
                        var $1193 = self.err;
                        var $1194 = Parser$Reply$error$($1191, $1192, $1193);
                        var $1190 = $1194;
                        break;
                    case 'Parser.Reply.value':
                        var $1195 = self.idx;
                        var $1196 = self.code;
                        var self = Kind$Parser$name1$($1195, $1196);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1198 = self.idx;
                                var $1199 = self.code;
                                var $1200 = self.err;
                                var $1201 = Parser$Reply$error$($1198, $1199, $1200);
                                var $1197 = $1201;
                                break;
                            case 'Parser.Reply.value':
                                var $1202 = self.idx;
                                var $1203 = self.code;
                                var $1204 = self.val;
                                var self = Kind$Parser$text$("=", $1202, $1203);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1206 = self.idx;
                                        var $1207 = self.code;
                                        var $1208 = self.err;
                                        var $1209 = Parser$Reply$error$($1206, $1207, $1208);
                                        var $1205 = $1209;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1210 = self.idx;
                                        var $1211 = self.code;
                                        var self = Kind$Parser$text$("for ", $1210, $1211);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1213 = self.idx;
                                                var $1214 = self.code;
                                                var $1215 = self.err;
                                                var $1216 = Parser$Reply$error$($1213, $1214, $1215);
                                                var $1212 = $1216;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1217 = self.idx;
                                                var $1218 = self.code;
                                                var self = Kind$Parser$name1$($1217, $1218);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1220 = self.idx;
                                                        var $1221 = self.code;
                                                        var $1222 = self.err;
                                                        var $1223 = Parser$Reply$error$($1220, $1221, $1222);
                                                        var $1219 = $1223;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1224 = self.idx;
                                                        var $1225 = self.code;
                                                        var $1226 = self.val;
                                                        var self = Kind$Parser$text$("in", $1224, $1225);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1228 = self.idx;
                                                                var $1229 = self.code;
                                                                var $1230 = self.err;
                                                                var $1231 = Parser$Reply$error$($1228, $1229, $1230);
                                                                var $1227 = $1231;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1232 = self.idx;
                                                                var $1233 = self.code;
                                                                var self = Kind$Parser$term$($1232, $1233);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1235 = self.idx;
                                                                        var $1236 = self.code;
                                                                        var $1237 = self.err;
                                                                        var $1238 = Parser$Reply$error$($1235, $1236, $1237);
                                                                        var $1234 = $1238;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1239 = self.idx;
                                                                        var $1240 = self.code;
                                                                        var $1241 = self.val;
                                                                        var self = Kind$Parser$text$(":", $1239, $1240);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1243 = self.idx;
                                                                                var $1244 = self.code;
                                                                                var $1245 = self.err;
                                                                                var $1246 = Parser$Reply$error$($1243, $1244, $1245);
                                                                                var $1242 = $1246;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1247 = self.idx;
                                                                                var $1248 = self.code;
                                                                                var self = Kind$Parser$term$($1247, $1248);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1250 = self.idx;
                                                                                        var $1251 = self.code;
                                                                                        var $1252 = self.err;
                                                                                        var $1253 = Parser$Reply$error$($1250, $1251, $1252);
                                                                                        var $1249 = $1253;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1254 = self.idx;
                                                                                        var $1255 = self.code;
                                                                                        var $1256 = self.val;
                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1254, $1255);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1258 = self.idx;
                                                                                                var $1259 = self.code;
                                                                                                var $1260 = self.err;
                                                                                                var $1261 = Parser$Reply$error$($1258, $1259, $1260);
                                                                                                var $1257 = $1261;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1262 = self.idx;
                                                                                                var $1263 = self.code;
                                                                                                var self = Kind$Parser$term$($1262, $1263);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1265 = self.idx;
                                                                                                        var $1266 = self.code;
                                                                                                        var $1267 = self.err;
                                                                                                        var $1268 = Parser$Reply$error$($1265, $1266, $1267);
                                                                                                        var $1264 = $1268;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1269 = self.idx;
                                                                                                        var $1270 = self.code;
                                                                                                        var $1271 = self.val;
                                                                                                        var self = Kind$Parser$stop$($1189, $1269, $1270);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1273 = self.idx;
                                                                                                                var $1274 = self.code;
                                                                                                                var $1275 = self.err;
                                                                                                                var $1276 = Parser$Reply$error$($1273, $1274, $1275);
                                                                                                                var $1272 = $1276;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1277 = self.idx;
                                                                                                                var $1278 = self.code;
                                                                                                                var $1279 = self.val;
                                                                                                                var _term$42 = Kind$Term$ref$("List.for");
                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $1241);
                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($1204));
                                                                                                                var _lamb$47 = Kind$Term$lam$($1226, (_i$47 => {
                                                                                                                    var $1281 = Kind$Term$lam$($1204, (_x$48 => {
                                                                                                                        var $1282 = $1256;
                                                                                                                        return $1282;
                                                                                                                    }));
                                                                                                                    return $1281;
                                                                                                                }));
                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Kind$Term$let$($1204, _term$48, (_x$49 => {
                                                                                                                    var $1283 = $1271;
                                                                                                                    return $1283;
                                                                                                                }));
                                                                                                                var $1280 = Parser$Reply$value$($1277, $1278, Kind$Term$ori$($1279, _term$49));
                                                                                                                var $1272 = $1280;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1264 = $1272;
                                                                                                        break;
                                                                                                };
                                                                                                var $1257 = $1264;
                                                                                                break;
                                                                                        };
                                                                                        var $1249 = $1257;
                                                                                        break;
                                                                                };
                                                                                var $1242 = $1249;
                                                                                break;
                                                                        };
                                                                        var $1234 = $1242;
                                                                        break;
                                                                };
                                                                var $1227 = $1234;
                                                                break;
                                                        };
                                                        var $1219 = $1227;
                                                        break;
                                                };
                                                var $1212 = $1219;
                                                break;
                                        };
                                        var $1205 = $1212;
                                        break;
                                };
                                var $1197 = $1205;
                                break;
                        };
                        var $1190 = $1197;
                        break;
                };
                var $1182 = $1190;
                break;
        };
        return $1182;
    };
    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);

    function Kind$Parser$letforin$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1285 = self.idx;
                var $1286 = self.code;
                var $1287 = self.err;
                var $1288 = Parser$Reply$error$($1285, $1286, $1287);
                var $1284 = $1288;
                break;
            case 'Parser.Reply.value':
                var $1289 = self.idx;
                var $1290 = self.code;
                var $1291 = self.val;
                var self = Kind$Parser$text$("for ", $1289, $1290);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1293 = self.idx;
                        var $1294 = self.code;
                        var $1295 = self.err;
                        var $1296 = Parser$Reply$error$($1293, $1294, $1295);
                        var $1292 = $1296;
                        break;
                    case 'Parser.Reply.value':
                        var $1297 = self.idx;
                        var $1298 = self.code;
                        var self = Kind$Parser$name1$($1297, $1298);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1300 = self.idx;
                                var $1301 = self.code;
                                var $1302 = self.err;
                                var $1303 = Parser$Reply$error$($1300, $1301, $1302);
                                var $1299 = $1303;
                                break;
                            case 'Parser.Reply.value':
                                var $1304 = self.idx;
                                var $1305 = self.code;
                                var $1306 = self.val;
                                var self = Kind$Parser$text$("in", $1304, $1305);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1308 = self.idx;
                                        var $1309 = self.code;
                                        var $1310 = self.err;
                                        var $1311 = Parser$Reply$error$($1308, $1309, $1310);
                                        var $1307 = $1311;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1312 = self.idx;
                                        var $1313 = self.code;
                                        var self = Kind$Parser$term$($1312, $1313);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1315 = self.idx;
                                                var $1316 = self.code;
                                                var $1317 = self.err;
                                                var $1318 = Parser$Reply$error$($1315, $1316, $1317);
                                                var $1314 = $1318;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1319 = self.idx;
                                                var $1320 = self.code;
                                                var $1321 = self.val;
                                                var self = Kind$Parser$text$("with ", $1319, $1320);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1323 = self.idx;
                                                        var $1324 = self.code;
                                                        var $1325 = self.err;
                                                        var $1326 = Parser$Reply$error$($1323, $1324, $1325);
                                                        var $1322 = $1326;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1327 = self.idx;
                                                        var $1328 = self.code;
                                                        var self = Kind$Parser$name1$($1327, $1328);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1330 = self.idx;
                                                                var $1331 = self.code;
                                                                var $1332 = self.err;
                                                                var $1333 = Parser$Reply$error$($1330, $1331, $1332);
                                                                var $1329 = $1333;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1334 = self.idx;
                                                                var $1335 = self.code;
                                                                var $1336 = self.val;
                                                                var self = Kind$Parser$text$(":", $1334, $1335);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1338 = self.idx;
                                                                        var $1339 = self.code;
                                                                        var $1340 = self.err;
                                                                        var $1341 = Parser$Reply$error$($1338, $1339, $1340);
                                                                        var $1337 = $1341;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1342 = self.idx;
                                                                        var $1343 = self.code;
                                                                        var self = Kind$Parser$term$($1342, $1343);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1345 = self.idx;
                                                                                var $1346 = self.code;
                                                                                var $1347 = self.err;
                                                                                var $1348 = Parser$Reply$error$($1345, $1346, $1347);
                                                                                var $1344 = $1348;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1349 = self.idx;
                                                                                var $1350 = self.code;
                                                                                var $1351 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1349, $1350);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1353 = self.idx;
                                                                                        var $1354 = self.code;
                                                                                        var $1355 = self.err;
                                                                                        var $1356 = Parser$Reply$error$($1353, $1354, $1355);
                                                                                        var $1352 = $1356;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1357 = self.idx;
                                                                                        var $1358 = self.code;
                                                                                        var self = Kind$Parser$term$($1357, $1358);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1360 = self.idx;
                                                                                                var $1361 = self.code;
                                                                                                var $1362 = self.err;
                                                                                                var $1363 = Parser$Reply$error$($1360, $1361, $1362);
                                                                                                var $1359 = $1363;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1364 = self.idx;
                                                                                                var $1365 = self.code;
                                                                                                var $1366 = self.val;
                                                                                                var self = Kind$Parser$stop$($1291, $1364, $1365);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1368 = self.idx;
                                                                                                        var $1369 = self.code;
                                                                                                        var $1370 = self.err;
                                                                                                        var $1371 = Parser$Reply$error$($1368, $1369, $1370);
                                                                                                        var $1367 = $1371;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1372 = self.idx;
                                                                                                        var $1373 = self.code;
                                                                                                        var $1374 = self.val;
                                                                                                        var _term$39 = Kind$Term$ref$("List.for");
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $1321);
                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($1336));
                                                                                                        var _lamb$44 = Kind$Term$lam$($1306, (_i$44 => {
                                                                                                            var $1376 = Kind$Term$lam$($1336, (_x$45 => {
                                                                                                                var $1377 = $1351;
                                                                                                                return $1377;
                                                                                                            }));
                                                                                                            return $1376;
                                                                                                        }));
                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Kind$Term$let$($1336, _term$45, (_x$46 => {
                                                                                                            var $1378 = $1366;
                                                                                                            return $1378;
                                                                                                        }));
                                                                                                        var $1375 = Parser$Reply$value$($1372, $1373, Kind$Term$ori$($1374, _term$46));
                                                                                                        var $1367 = $1375;
                                                                                                        break;
                                                                                                };
                                                                                                var $1359 = $1367;
                                                                                                break;
                                                                                        };
                                                                                        var $1352 = $1359;
                                                                                        break;
                                                                                };
                                                                                var $1344 = $1352;
                                                                                break;
                                                                        };
                                                                        var $1337 = $1344;
                                                                        break;
                                                                };
                                                                var $1329 = $1337;
                                                                break;
                                                        };
                                                        var $1322 = $1329;
                                                        break;
                                                };
                                                var $1314 = $1322;
                                                break;
                                        };
                                        var $1307 = $1314;
                                        break;
                                };
                                var $1299 = $1307;
                                break;
                        };
                        var $1292 = $1299;
                        break;
                };
                var $1284 = $1292;
                break;
        };
        return $1284;
    };
    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);

    function Kind$Parser$letwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1380 = self.idx;
                var $1381 = self.code;
                var $1382 = self.err;
                var $1383 = Parser$Reply$error$($1380, $1381, $1382);
                var $1379 = $1383;
                break;
            case 'Parser.Reply.value':
                var $1384 = self.idx;
                var $1385 = self.code;
                var $1386 = self.val;
                var self = Kind$Parser$text$("let ", $1384, $1385);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1388 = self.idx;
                        var $1389 = self.code;
                        var $1390 = self.err;
                        var $1391 = Parser$Reply$error$($1388, $1389, $1390);
                        var $1387 = $1391;
                        break;
                    case 'Parser.Reply.value':
                        var $1392 = self.idx;
                        var $1393 = self.code;
                        var self = Kind$Parser$name1$($1392, $1393);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1395 = self.idx;
                                var $1396 = self.code;
                                var $1397 = self.err;
                                var $1398 = Parser$Reply$error$($1395, $1396, $1397);
                                var $1394 = $1398;
                                break;
                            case 'Parser.Reply.value':
                                var $1399 = self.idx;
                                var $1400 = self.code;
                                var $1401 = self.val;
                                var self = Kind$Parser$text$("=", $1399, $1400);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1403 = self.idx;
                                        var $1404 = self.code;
                                        var $1405 = self.err;
                                        var $1406 = Parser$Reply$error$($1403, $1404, $1405);
                                        var $1402 = $1406;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1407 = self.idx;
                                        var $1408 = self.code;
                                        var self = Kind$Parser$text$("while ", $1407, $1408);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1410 = self.idx;
                                                var $1411 = self.code;
                                                var $1412 = self.err;
                                                var $1413 = Parser$Reply$error$($1410, $1411, $1412);
                                                var $1409 = $1413;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1414 = self.idx;
                                                var $1415 = self.code;
                                                var self = Kind$Parser$term$($1414, $1415);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1417 = self.idx;
                                                        var $1418 = self.code;
                                                        var $1419 = self.err;
                                                        var $1420 = Parser$Reply$error$($1417, $1418, $1419);
                                                        var $1416 = $1420;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1421 = self.idx;
                                                        var $1422 = self.code;
                                                        var $1423 = self.val;
                                                        var self = Kind$Parser$text$(":", $1421, $1422);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1425 = self.idx;
                                                                var $1426 = self.code;
                                                                var $1427 = self.err;
                                                                var $1428 = Parser$Reply$error$($1425, $1426, $1427);
                                                                var $1424 = $1428;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1429 = self.idx;
                                                                var $1430 = self.code;
                                                                var self = Kind$Parser$term$($1429, $1430);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1432 = self.idx;
                                                                        var $1433 = self.code;
                                                                        var $1434 = self.err;
                                                                        var $1435 = Parser$Reply$error$($1432, $1433, $1434);
                                                                        var $1431 = $1435;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1436 = self.idx;
                                                                        var $1437 = self.code;
                                                                        var $1438 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1436, $1437);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1440 = self.idx;
                                                                                var $1441 = self.code;
                                                                                var $1442 = self.err;
                                                                                var $1443 = Parser$Reply$error$($1440, $1441, $1442);
                                                                                var $1439 = $1443;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1444 = self.idx;
                                                                                var $1445 = self.code;
                                                                                var self = Kind$Parser$term$($1444, $1445);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1447 = self.idx;
                                                                                        var $1448 = self.code;
                                                                                        var $1449 = self.err;
                                                                                        var $1450 = Parser$Reply$error$($1447, $1448, $1449);
                                                                                        var $1446 = $1450;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1451 = self.idx;
                                                                                        var $1452 = self.code;
                                                                                        var $1453 = self.val;
                                                                                        var self = Kind$Parser$stop$($1386, $1451, $1452);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1455 = self.idx;
                                                                                                var $1456 = self.code;
                                                                                                var $1457 = self.err;
                                                                                                var $1458 = Parser$Reply$error$($1455, $1456, $1457);
                                                                                                var $1454 = $1458;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1459 = self.idx;
                                                                                                var $1460 = self.code;
                                                                                                var $1461 = self.val;
                                                                                                var _term$36 = Kind$Term$ref$("Function.while");
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($1401));
                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($1401, (_s$39 => {
                                                                                                    var $1463 = $1423;
                                                                                                    return $1463;
                                                                                                })));
                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($1401, (_s$40 => {
                                                                                                    var $1464 = $1438;
                                                                                                    return $1464;
                                                                                                })));
                                                                                                var _term$41 = Kind$Term$let$($1401, _term$40, (_x$41 => {
                                                                                                    var $1465 = $1453;
                                                                                                    return $1465;
                                                                                                }));
                                                                                                var $1462 = Parser$Reply$value$($1459, $1460, Kind$Term$ori$($1461, _term$41));
                                                                                                var $1454 = $1462;
                                                                                                break;
                                                                                        };
                                                                                        var $1446 = $1454;
                                                                                        break;
                                                                                };
                                                                                var $1439 = $1446;
                                                                                break;
                                                                        };
                                                                        var $1431 = $1439;
                                                                        break;
                                                                };
                                                                var $1424 = $1431;
                                                                break;
                                                        };
                                                        var $1416 = $1424;
                                                        break;
                                                };
                                                var $1409 = $1416;
                                                break;
                                        };
                                        var $1402 = $1409;
                                        break;
                                };
                                var $1394 = $1402;
                                break;
                        };
                        var $1387 = $1394;
                        break;
                };
                var $1379 = $1387;
                break;
        };
        return $1379;
    };
    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);

    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1467 = self.idx;
                var $1468 = self.code;
                var $1469 = self.err;
                var $1470 = Parser$Reply$error$($1467, $1468, $1469);
                var $1466 = $1470;
                break;
            case 'Parser.Reply.value':
                var $1471 = self.idx;
                var $1472 = self.code;
                var $1473 = self.val;
                var self = Kind$Parser$text$("while ", $1471, $1472);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1475 = self.idx;
                        var $1476 = self.code;
                        var $1477 = self.err;
                        var $1478 = Parser$Reply$error$($1475, $1476, $1477);
                        var $1474 = $1478;
                        break;
                    case 'Parser.Reply.value':
                        var $1479 = self.idx;
                        var $1480 = self.code;
                        var self = Kind$Parser$term$($1479, $1480);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1482 = self.idx;
                                var $1483 = self.code;
                                var $1484 = self.err;
                                var $1485 = Parser$Reply$error$($1482, $1483, $1484);
                                var $1481 = $1485;
                                break;
                            case 'Parser.Reply.value':
                                var $1486 = self.idx;
                                var $1487 = self.code;
                                var $1488 = self.val;
                                var self = Kind$Parser$text$("with ", $1486, $1487);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1490 = self.idx;
                                        var $1491 = self.code;
                                        var $1492 = self.err;
                                        var $1493 = Parser$Reply$error$($1490, $1491, $1492);
                                        var $1489 = $1493;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1494 = self.idx;
                                        var $1495 = self.code;
                                        var self = Kind$Parser$name1$($1494, $1495);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1497 = self.idx;
                                                var $1498 = self.code;
                                                var $1499 = self.err;
                                                var $1500 = Parser$Reply$error$($1497, $1498, $1499);
                                                var $1496 = $1500;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1501 = self.idx;
                                                var $1502 = self.code;
                                                var $1503 = self.val;
                                                var self = Kind$Parser$text$(":", $1501, $1502);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1505 = self.idx;
                                                        var $1506 = self.code;
                                                        var $1507 = self.err;
                                                        var $1508 = Parser$Reply$error$($1505, $1506, $1507);
                                                        var $1504 = $1508;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1509 = self.idx;
                                                        var $1510 = self.code;
                                                        var self = Kind$Parser$term$($1509, $1510);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1512 = self.idx;
                                                                var $1513 = self.code;
                                                                var $1514 = self.err;
                                                                var $1515 = Parser$Reply$error$($1512, $1513, $1514);
                                                                var $1511 = $1515;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1516 = self.idx;
                                                                var $1517 = self.code;
                                                                var $1518 = self.val;
                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1516, $1517);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1520 = self.idx;
                                                                        var $1521 = self.code;
                                                                        var $1522 = self.err;
                                                                        var $1523 = Parser$Reply$error$($1520, $1521, $1522);
                                                                        var $1519 = $1523;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1524 = self.idx;
                                                                        var $1525 = self.code;
                                                                        var self = Kind$Parser$term$($1524, $1525);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1527 = self.idx;
                                                                                var $1528 = self.code;
                                                                                var $1529 = self.err;
                                                                                var $1530 = Parser$Reply$error$($1527, $1528, $1529);
                                                                                var $1526 = $1530;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1531 = self.idx;
                                                                                var $1532 = self.code;
                                                                                var $1533 = self.val;
                                                                                var self = Kind$Parser$stop$($1473, $1531, $1532);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1535 = self.idx;
                                                                                        var $1536 = self.code;
                                                                                        var $1537 = self.err;
                                                                                        var $1538 = Parser$Reply$error$($1535, $1536, $1537);
                                                                                        var $1534 = $1538;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1539 = self.idx;
                                                                                        var $1540 = self.code;
                                                                                        var $1541 = self.val;
                                                                                        var _term$33 = Kind$Term$ref$("Function.while");
                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($1503));
                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($1503, (_s$36 => {
                                                                                            var $1543 = $1488;
                                                                                            return $1543;
                                                                                        })));
                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($1503, (_s$37 => {
                                                                                            var $1544 = $1518;
                                                                                            return $1544;
                                                                                        })));
                                                                                        var _term$38 = Kind$Term$let$($1503, _term$37, (_x$38 => {
                                                                                            var $1545 = $1533;
                                                                                            return $1545;
                                                                                        }));
                                                                                        var $1542 = Parser$Reply$value$($1539, $1540, Kind$Term$ori$($1541, _term$38));
                                                                                        var $1534 = $1542;
                                                                                        break;
                                                                                };
                                                                                var $1526 = $1534;
                                                                                break;
                                                                        };
                                                                        var $1519 = $1526;
                                                                        break;
                                                                };
                                                                var $1511 = $1519;
                                                                break;
                                                        };
                                                        var $1504 = $1511;
                                                        break;
                                                };
                                                var $1496 = $1504;
                                                break;
                                        };
                                        var $1489 = $1496;
                                        break;
                                };
                                var $1481 = $1489;
                                break;
                        };
                        var $1474 = $1481;
                        break;
                };
                var $1466 = $1474;
                break;
        };
        return $1466;
    };
    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);

    function Kind$Parser$let$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1547 = self.idx;
                var $1548 = self.code;
                var $1549 = self.err;
                var $1550 = Parser$Reply$error$($1547, $1548, $1549);
                var $1546 = $1550;
                break;
            case 'Parser.Reply.value':
                var $1551 = self.idx;
                var $1552 = self.code;
                var $1553 = self.val;
                var self = Kind$Parser$text$("let ", $1551, $1552);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1555 = self.idx;
                        var $1556 = self.code;
                        var $1557 = self.err;
                        var $1558 = Parser$Reply$error$($1555, $1556, $1557);
                        var $1554 = $1558;
                        break;
                    case 'Parser.Reply.value':
                        var $1559 = self.idx;
                        var $1560 = self.code;
                        var self = Kind$Parser$name$($1559, $1560);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1562 = self.idx;
                                var $1563 = self.code;
                                var $1564 = self.err;
                                var $1565 = Parser$Reply$error$($1562, $1563, $1564);
                                var $1561 = $1565;
                                break;
                            case 'Parser.Reply.value':
                                var $1566 = self.idx;
                                var $1567 = self.code;
                                var $1568 = self.val;
                                var self = Kind$Parser$text$("=", $1566, $1567);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1570 = self.idx;
                                        var $1571 = self.code;
                                        var $1572 = self.err;
                                        var $1573 = Parser$Reply$error$($1570, $1571, $1572);
                                        var $1569 = $1573;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1574 = self.idx;
                                        var $1575 = self.code;
                                        var self = Kind$Parser$term$($1574, $1575);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1577 = self.idx;
                                                var $1578 = self.code;
                                                var $1579 = self.err;
                                                var $1580 = Parser$Reply$error$($1577, $1578, $1579);
                                                var $1576 = $1580;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1581 = self.idx;
                                                var $1582 = self.code;
                                                var $1583 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1581, $1582);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1585 = self.idx;
                                                        var $1586 = self.code;
                                                        var $1587 = self.err;
                                                        var $1588 = Parser$Reply$error$($1585, $1586, $1587);
                                                        var $1584 = $1588;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1589 = self.idx;
                                                        var $1590 = self.code;
                                                        var self = Kind$Parser$term$($1589, $1590);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1592 = self.idx;
                                                                var $1593 = self.code;
                                                                var $1594 = self.err;
                                                                var $1595 = Parser$Reply$error$($1592, $1593, $1594);
                                                                var $1591 = $1595;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1596 = self.idx;
                                                                var $1597 = self.code;
                                                                var $1598 = self.val;
                                                                var self = Kind$Parser$stop$($1553, $1596, $1597);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1600 = self.idx;
                                                                        var $1601 = self.code;
                                                                        var $1602 = self.err;
                                                                        var $1603 = Parser$Reply$error$($1600, $1601, $1602);
                                                                        var $1599 = $1603;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1604 = self.idx;
                                                                        var $1605 = self.code;
                                                                        var $1606 = self.val;
                                                                        var $1607 = Parser$Reply$value$($1604, $1605, Kind$Term$ori$($1606, Kind$Term$let$($1568, $1583, (_x$27 => {
                                                                            var $1608 = $1598;
                                                                            return $1608;
                                                                        }))));
                                                                        var $1599 = $1607;
                                                                        break;
                                                                };
                                                                var $1591 = $1599;
                                                                break;
                                                        };
                                                        var $1584 = $1591;
                                                        break;
                                                };
                                                var $1576 = $1584;
                                                break;
                                        };
                                        var $1569 = $1576;
                                        break;
                                };
                                var $1561 = $1569;
                                break;
                        };
                        var $1554 = $1561;
                        break;
                };
                var $1546 = $1554;
                break;
        };
        return $1546;
    };
    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);

    function Kind$Parser$let$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1610 = self.idx;
                var $1611 = self.code;
                var $1612 = self.err;
                var $1613 = Parser$Reply$error$($1610, $1611, $1612);
                var $1609 = $1613;
                break;
            case 'Parser.Reply.value':
                var $1614 = self.idx;
                var $1615 = self.code;
                var $1616 = self.val;
                var self = Kind$Parser$name$($1614, $1615);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1618 = self.idx;
                        var $1619 = self.code;
                        var $1620 = self.err;
                        var $1621 = Parser$Reply$error$($1618, $1619, $1620);
                        var $1617 = $1621;
                        break;
                    case 'Parser.Reply.value':
                        var $1622 = self.idx;
                        var $1623 = self.code;
                        var $1624 = self.val;
                        var self = Kind$Parser$text$("= ", $1622, $1623);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1626 = self.idx;
                                var $1627 = self.code;
                                var $1628 = self.err;
                                var $1629 = Parser$Reply$error$($1626, $1627, $1628);
                                var $1625 = $1629;
                                break;
                            case 'Parser.Reply.value':
                                var $1630 = self.idx;
                                var $1631 = self.code;
                                var self = Kind$Parser$term$($1630, $1631);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1633 = self.idx;
                                        var $1634 = self.code;
                                        var $1635 = self.err;
                                        var $1636 = Parser$Reply$error$($1633, $1634, $1635);
                                        var $1632 = $1636;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1637 = self.idx;
                                        var $1638 = self.code;
                                        var $1639 = self.val;
                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1637, $1638);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1641 = self.idx;
                                                var $1642 = self.code;
                                                var $1643 = self.err;
                                                var $1644 = Parser$Reply$error$($1641, $1642, $1643);
                                                var $1640 = $1644;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1645 = self.idx;
                                                var $1646 = self.code;
                                                var self = Kind$Parser$term$($1645, $1646);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1648 = self.idx;
                                                        var $1649 = self.code;
                                                        var $1650 = self.err;
                                                        var $1651 = Parser$Reply$error$($1648, $1649, $1650);
                                                        var $1647 = $1651;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1652 = self.idx;
                                                        var $1653 = self.code;
                                                        var $1654 = self.val;
                                                        var self = Kind$Parser$stop$($1616, $1652, $1653);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1656 = self.idx;
                                                                var $1657 = self.code;
                                                                var $1658 = self.err;
                                                                var $1659 = Parser$Reply$error$($1656, $1657, $1658);
                                                                var $1655 = $1659;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1660 = self.idx;
                                                                var $1661 = self.code;
                                                                var $1662 = self.val;
                                                                var $1663 = Parser$Reply$value$($1660, $1661, Kind$Term$ori$($1662, Kind$Term$let$($1624, $1639, (_x$24 => {
                                                                    var $1664 = $1654;
                                                                    return $1664;
                                                                }))));
                                                                var $1655 = $1663;
                                                                break;
                                                        };
                                                        var $1647 = $1655;
                                                        break;
                                                };
                                                var $1640 = $1647;
                                                break;
                                        };
                                        var $1632 = $1640;
                                        break;
                                };
                                var $1625 = $1632;
                                break;
                        };
                        var $1617 = $1625;
                        break;
                };
                var $1609 = $1617;
                break;
        };
        return $1609;
    };
    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);

    function Kind$Parser$getwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1666 = self.idx;
                var $1667 = self.code;
                var $1668 = self.err;
                var $1669 = Parser$Reply$error$($1666, $1667, $1668);
                var $1665 = $1669;
                break;
            case 'Parser.Reply.value':
                var $1670 = self.idx;
                var $1671 = self.code;
                var $1672 = self.val;
                var self = Parser$maybe$(Kind$Parser$text("let "), $1670, $1671);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1674 = self.idx;
                        var $1675 = self.code;
                        var $1676 = self.err;
                        var $1677 = Parser$Reply$error$($1674, $1675, $1676);
                        var $1673 = $1677;
                        break;
                    case 'Parser.Reply.value':
                        var $1678 = self.idx;
                        var $1679 = self.code;
                        var self = Kind$Parser$text$("{", $1678, $1679);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1681 = self.idx;
                                var $1682 = self.code;
                                var $1683 = self.err;
                                var $1684 = Parser$Reply$error$($1681, $1682, $1683);
                                var $1680 = $1684;
                                break;
                            case 'Parser.Reply.value':
                                var $1685 = self.idx;
                                var $1686 = self.code;
                                var self = Kind$Parser$name$($1685, $1686);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1688 = self.idx;
                                        var $1689 = self.code;
                                        var $1690 = self.err;
                                        var $1691 = Parser$Reply$error$($1688, $1689, $1690);
                                        var $1687 = $1691;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1692 = self.idx;
                                        var $1693 = self.code;
                                        var $1694 = self.val;
                                        var self = Kind$Parser$text$(",", $1692, $1693);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1696 = self.idx;
                                                var $1697 = self.code;
                                                var $1698 = self.err;
                                                var $1699 = Parser$Reply$error$($1696, $1697, $1698);
                                                var $1695 = $1699;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1700 = self.idx;
                                                var $1701 = self.code;
                                                var self = Kind$Parser$name$($1700, $1701);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1703 = self.idx;
                                                        var $1704 = self.code;
                                                        var $1705 = self.err;
                                                        var $1706 = Parser$Reply$error$($1703, $1704, $1705);
                                                        var $1702 = $1706;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1707 = self.idx;
                                                        var $1708 = self.code;
                                                        var $1709 = self.val;
                                                        var self = Kind$Parser$text$("}", $1707, $1708);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1711 = self.idx;
                                                                var $1712 = self.code;
                                                                var $1713 = self.err;
                                                                var $1714 = Parser$Reply$error$($1711, $1712, $1713);
                                                                var $1710 = $1714;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1715 = self.idx;
                                                                var $1716 = self.code;
                                                                var self = Kind$Parser$text$("=", $1715, $1716);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1718 = self.idx;
                                                                        var $1719 = self.code;
                                                                        var $1720 = self.err;
                                                                        var $1721 = Parser$Reply$error$($1718, $1719, $1720);
                                                                        var $1717 = $1721;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1722 = self.idx;
                                                                        var $1723 = self.code;
                                                                        var self = Kind$Parser$text$("while ", $1722, $1723);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1725 = self.idx;
                                                                                var $1726 = self.code;
                                                                                var $1727 = self.err;
                                                                                var $1728 = Parser$Reply$error$($1725, $1726, $1727);
                                                                                var $1724 = $1728;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1729 = self.idx;
                                                                                var $1730 = self.code;
                                                                                var self = Kind$Parser$term$($1729, $1730);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1732 = self.idx;
                                                                                        var $1733 = self.code;
                                                                                        var $1734 = self.err;
                                                                                        var $1735 = Parser$Reply$error$($1732, $1733, $1734);
                                                                                        var $1731 = $1735;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1736 = self.idx;
                                                                                        var $1737 = self.code;
                                                                                        var $1738 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1736, $1737);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1740 = self.idx;
                                                                                                var $1741 = self.code;
                                                                                                var $1742 = self.err;
                                                                                                var $1743 = Parser$Reply$error$($1740, $1741, $1742);
                                                                                                var $1739 = $1743;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1744 = self.idx;
                                                                                                var $1745 = self.code;
                                                                                                var self = Kind$Parser$term$($1744, $1745);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1747 = self.idx;
                                                                                                        var $1748 = self.code;
                                                                                                        var $1749 = self.err;
                                                                                                        var $1750 = Parser$Reply$error$($1747, $1748, $1749);
                                                                                                        var $1746 = $1750;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1751 = self.idx;
                                                                                                        var $1752 = self.code;
                                                                                                        var $1753 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1751, $1752);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1755 = self.idx;
                                                                                                                var $1756 = self.code;
                                                                                                                var $1757 = self.err;
                                                                                                                var $1758 = Parser$Reply$error$($1755, $1756, $1757);
                                                                                                                var $1754 = $1758;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1759 = self.idx;
                                                                                                                var $1760 = self.code;
                                                                                                                var self = Kind$Parser$term$($1759, $1760);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1762 = self.idx;
                                                                                                                        var $1763 = self.code;
                                                                                                                        var $1764 = self.err;
                                                                                                                        var $1765 = Parser$Reply$error$($1762, $1763, $1764);
                                                                                                                        var $1761 = $1765;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1766 = self.idx;
                                                                                                                        var $1767 = self.code;
                                                                                                                        var $1768 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($1672, $1766, $1767);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1770 = self.idx;
                                                                                                                                var $1771 = self.code;
                                                                                                                                var $1772 = self.err;
                                                                                                                                var $1773 = Parser$Reply$error$($1770, $1771, $1772);
                                                                                                                                var $1769 = $1773;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1774 = self.idx;
                                                                                                                                var $1775 = self.code;
                                                                                                                                var $1776 = self.val;
                                                                                                                                var _moti$48 = Kind$Term$lam$("x", (_x$48 => {
                                                                                                                                    var $1778 = Kind$Term$hol$(Bits$e);
                                                                                                                                    return $1778;
                                                                                                                                }));
                                                                                                                                var _term$49 = Kind$Term$ref$("Function.while");
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$51 = Kind$Term$ref$("Pair.new");
                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($1694));
                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($1709));
                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);
                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$("s", (_s$57 => {
                                                                                                                                    var $1779 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($1694, (_x$58 => {
                                                                                                                                        var $1780 = Kind$Term$lam$($1709, (_y$59 => {
                                                                                                                                            var $1781 = $1738;
                                                                                                                                            return $1781;
                                                                                                                                        }));
                                                                                                                                        return $1780;
                                                                                                                                    })));
                                                                                                                                    return $1779;
                                                                                                                                })));
                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$("s", (_s$58 => {
                                                                                                                                    var $1782 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($1694, (_x$59 => {
                                                                                                                                        var $1783 = Kind$Term$lam$($1709, (_y$60 => {
                                                                                                                                            var $1784 = $1753;
                                                                                                                                            return $1784;
                                                                                                                                        }));
                                                                                                                                        return $1783;
                                                                                                                                    })));
                                                                                                                                    return $1782;
                                                                                                                                })));
                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($1694, (_x$59 => {
                                                                                                                                    var $1785 = Kind$Term$lam$($1709, (_y$60 => {
                                                                                                                                        var $1786 = $1768;
                                                                                                                                        return $1786;
                                                                                                                                    }));
                                                                                                                                    return $1785;
                                                                                                                                })));
                                                                                                                                var $1777 = Parser$Reply$value$($1774, $1775, Kind$Term$ori$($1776, _term$59));
                                                                                                                                var $1769 = $1777;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1761 = $1769;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1754 = $1761;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1746 = $1754;
                                                                                                        break;
                                                                                                };
                                                                                                var $1739 = $1746;
                                                                                                break;
                                                                                        };
                                                                                        var $1731 = $1739;
                                                                                        break;
                                                                                };
                                                                                var $1724 = $1731;
                                                                                break;
                                                                        };
                                                                        var $1717 = $1724;
                                                                        break;
                                                                };
                                                                var $1710 = $1717;
                                                                break;
                                                        };
                                                        var $1702 = $1710;
                                                        break;
                                                };
                                                var $1695 = $1702;
                                                break;
                                        };
                                        var $1687 = $1695;
                                        break;
                                };
                                var $1680 = $1687;
                                break;
                        };
                        var $1673 = $1680;
                        break;
                };
                var $1665 = $1673;
                break;
        };
        return $1665;
    };
    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);

    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1788 = self.idx;
                var $1789 = self.code;
                var $1790 = self.err;
                var $1791 = Parser$Reply$error$($1788, $1789, $1790);
                var $1787 = $1791;
                break;
            case 'Parser.Reply.value':
                var $1792 = self.idx;
                var $1793 = self.code;
                var $1794 = self.val;
                var self = Kind$Parser$text$("while ", $1792, $1793);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1796 = self.idx;
                        var $1797 = self.code;
                        var $1798 = self.err;
                        var $1799 = Parser$Reply$error$($1796, $1797, $1798);
                        var $1795 = $1799;
                        break;
                    case 'Parser.Reply.value':
                        var $1800 = self.idx;
                        var $1801 = self.code;
                        var self = Kind$Parser$term$($1800, $1801);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1803 = self.idx;
                                var $1804 = self.code;
                                var $1805 = self.err;
                                var $1806 = Parser$Reply$error$($1803, $1804, $1805);
                                var $1802 = $1806;
                                break;
                            case 'Parser.Reply.value':
                                var $1807 = self.idx;
                                var $1808 = self.code;
                                var $1809 = self.val;
                                var self = Kind$Parser$text$("with ", $1807, $1808);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1811 = self.idx;
                                        var $1812 = self.code;
                                        var $1813 = self.err;
                                        var $1814 = Parser$Reply$error$($1811, $1812, $1813);
                                        var $1810 = $1814;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1815 = self.idx;
                                        var $1816 = self.code;
                                        var self = Kind$Parser$text$("{", $1815, $1816);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1818 = self.idx;
                                                var $1819 = self.code;
                                                var $1820 = self.err;
                                                var $1821 = Parser$Reply$error$($1818, $1819, $1820);
                                                var $1817 = $1821;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1822 = self.idx;
                                                var $1823 = self.code;
                                                var self = Kind$Parser$name$($1822, $1823);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1825 = self.idx;
                                                        var $1826 = self.code;
                                                        var $1827 = self.err;
                                                        var $1828 = Parser$Reply$error$($1825, $1826, $1827);
                                                        var $1824 = $1828;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1829 = self.idx;
                                                        var $1830 = self.code;
                                                        var $1831 = self.val;
                                                        var self = Kind$Parser$text$(",", $1829, $1830);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1833 = self.idx;
                                                                var $1834 = self.code;
                                                                var $1835 = self.err;
                                                                var $1836 = Parser$Reply$error$($1833, $1834, $1835);
                                                                var $1832 = $1836;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1837 = self.idx;
                                                                var $1838 = self.code;
                                                                var self = Kind$Parser$name$($1837, $1838);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1840 = self.idx;
                                                                        var $1841 = self.code;
                                                                        var $1842 = self.err;
                                                                        var $1843 = Parser$Reply$error$($1840, $1841, $1842);
                                                                        var $1839 = $1843;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1844 = self.idx;
                                                                        var $1845 = self.code;
                                                                        var $1846 = self.val;
                                                                        var self = Kind$Parser$text$("}", $1844, $1845);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1848 = self.idx;
                                                                                var $1849 = self.code;
                                                                                var $1850 = self.err;
                                                                                var $1851 = Parser$Reply$error$($1848, $1849, $1850);
                                                                                var $1847 = $1851;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1852 = self.idx;
                                                                                var $1853 = self.code;
                                                                                var self = Kind$Parser$text$(":", $1852, $1853);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1855 = self.idx;
                                                                                        var $1856 = self.code;
                                                                                        var $1857 = self.err;
                                                                                        var $1858 = Parser$Reply$error$($1855, $1856, $1857);
                                                                                        var $1854 = $1858;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1859 = self.idx;
                                                                                        var $1860 = self.code;
                                                                                        var self = Kind$Parser$term$($1859, $1860);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1862 = self.idx;
                                                                                                var $1863 = self.code;
                                                                                                var $1864 = self.err;
                                                                                                var $1865 = Parser$Reply$error$($1862, $1863, $1864);
                                                                                                var $1861 = $1865;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1866 = self.idx;
                                                                                                var $1867 = self.code;
                                                                                                var $1868 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1866, $1867);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1870 = self.idx;
                                                                                                        var $1871 = self.code;
                                                                                                        var $1872 = self.err;
                                                                                                        var $1873 = Parser$Reply$error$($1870, $1871, $1872);
                                                                                                        var $1869 = $1873;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1874 = self.idx;
                                                                                                        var $1875 = self.code;
                                                                                                        var self = Kind$Parser$term$($1874, $1875);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1877 = self.idx;
                                                                                                                var $1878 = self.code;
                                                                                                                var $1879 = self.err;
                                                                                                                var $1880 = Parser$Reply$error$($1877, $1878, $1879);
                                                                                                                var $1876 = $1880;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1881 = self.idx;
                                                                                                                var $1882 = self.code;
                                                                                                                var $1883 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1794, $1881, $1882);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1885 = self.idx;
                                                                                                                        var $1886 = self.code;
                                                                                                                        var $1887 = self.err;
                                                                                                                        var $1888 = Parser$Reply$error$($1885, $1886, $1887);
                                                                                                                        var $1884 = $1888;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1889 = self.idx;
                                                                                                                        var $1890 = self.code;
                                                                                                                        var $1891 = self.val;
                                                                                                                        var _moti$45 = Kind$Term$lam$("x", (_x$45 => {
                                                                                                                            var $1893 = Kind$Term$hol$(Bits$e);
                                                                                                                            return $1893;
                                                                                                                        }));
                                                                                                                        var _term$46 = Kind$Term$ref$("Function.while");
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$48 = Kind$Term$ref$("Pair.new");
                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($1831));
                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($1846));
                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);
                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$("s", (_s$54 => {
                                                                                                                            var $1894 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($1831, (_x$55 => {
                                                                                                                                var $1895 = Kind$Term$lam$($1846, (_y$56 => {
                                                                                                                                    var $1896 = $1809;
                                                                                                                                    return $1896;
                                                                                                                                }));
                                                                                                                                return $1895;
                                                                                                                            })));
                                                                                                                            return $1894;
                                                                                                                        })));
                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$("s", (_s$55 => {
                                                                                                                            var $1897 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($1831, (_x$56 => {
                                                                                                                                var $1898 = Kind$Term$lam$($1846, (_y$57 => {
                                                                                                                                    var $1899 = $1868;
                                                                                                                                    return $1899;
                                                                                                                                }));
                                                                                                                                return $1898;
                                                                                                                            })));
                                                                                                                            return $1897;
                                                                                                                        })));
                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($1831, (_x$56 => {
                                                                                                                            var $1900 = Kind$Term$lam$($1846, (_y$57 => {
                                                                                                                                var $1901 = $1883;
                                                                                                                                return $1901;
                                                                                                                            }));
                                                                                                                            return $1900;
                                                                                                                        })));
                                                                                                                        var $1892 = Parser$Reply$value$($1889, $1890, Kind$Term$ori$($1891, _term$56));
                                                                                                                        var $1884 = $1892;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1876 = $1884;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1869 = $1876;
                                                                                                        break;
                                                                                                };
                                                                                                var $1861 = $1869;
                                                                                                break;
                                                                                        };
                                                                                        var $1854 = $1861;
                                                                                        break;
                                                                                };
                                                                                var $1847 = $1854;
                                                                                break;
                                                                        };
                                                                        var $1839 = $1847;
                                                                        break;
                                                                };
                                                                var $1832 = $1839;
                                                                break;
                                                        };
                                                        var $1824 = $1832;
                                                        break;
                                                };
                                                var $1817 = $1824;
                                                break;
                                        };
                                        var $1810 = $1817;
                                        break;
                                };
                                var $1802 = $1810;
                                break;
                        };
                        var $1795 = $1802;
                        break;
                };
                var $1787 = $1795;
                break;
        };
        return $1787;
    };
    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);

    function Kind$Parser$get$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1903 = self.idx;
                var $1904 = self.code;
                var $1905 = self.err;
                var $1906 = Parser$Reply$error$($1903, $1904, $1905);
                var $1902 = $1906;
                break;
            case 'Parser.Reply.value':
                var $1907 = self.idx;
                var $1908 = self.code;
                var $1909 = self.val;
                var self = Kind$Parser$text$("let ", $1907, $1908);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1911 = self.idx;
                        var $1912 = self.code;
                        var $1913 = self.err;
                        var $1914 = Parser$Reply$error$($1911, $1912, $1913);
                        var $1910 = $1914;
                        break;
                    case 'Parser.Reply.value':
                        var $1915 = self.idx;
                        var $1916 = self.code;
                        var self = Kind$Parser$text$("{", $1915, $1916);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1918 = self.idx;
                                var $1919 = self.code;
                                var $1920 = self.err;
                                var $1921 = Parser$Reply$error$($1918, $1919, $1920);
                                var $1917 = $1921;
                                break;
                            case 'Parser.Reply.value':
                                var $1922 = self.idx;
                                var $1923 = self.code;
                                var self = Kind$Parser$name$($1922, $1923);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1925 = self.idx;
                                        var $1926 = self.code;
                                        var $1927 = self.err;
                                        var $1928 = Parser$Reply$error$($1925, $1926, $1927);
                                        var $1924 = $1928;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1929 = self.idx;
                                        var $1930 = self.code;
                                        var $1931 = self.val;
                                        var self = Kind$Parser$text$(",", $1929, $1930);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1933 = self.idx;
                                                var $1934 = self.code;
                                                var $1935 = self.err;
                                                var $1936 = Parser$Reply$error$($1933, $1934, $1935);
                                                var $1932 = $1936;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1937 = self.idx;
                                                var $1938 = self.code;
                                                var self = Kind$Parser$name$($1937, $1938);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1940 = self.idx;
                                                        var $1941 = self.code;
                                                        var $1942 = self.err;
                                                        var $1943 = Parser$Reply$error$($1940, $1941, $1942);
                                                        var $1939 = $1943;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1944 = self.idx;
                                                        var $1945 = self.code;
                                                        var $1946 = self.val;
                                                        var self = Kind$Parser$text$("}", $1944, $1945);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1948 = self.idx;
                                                                var $1949 = self.code;
                                                                var $1950 = self.err;
                                                                var $1951 = Parser$Reply$error$($1948, $1949, $1950);
                                                                var $1947 = $1951;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1952 = self.idx;
                                                                var $1953 = self.code;
                                                                var self = Kind$Parser$text$("=", $1952, $1953);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1955 = self.idx;
                                                                        var $1956 = self.code;
                                                                        var $1957 = self.err;
                                                                        var $1958 = Parser$Reply$error$($1955, $1956, $1957);
                                                                        var $1954 = $1958;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1959 = self.idx;
                                                                        var $1960 = self.code;
                                                                        var self = Kind$Parser$term$($1959, $1960);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1962 = self.idx;
                                                                                var $1963 = self.code;
                                                                                var $1964 = self.err;
                                                                                var $1965 = Parser$Reply$error$($1962, $1963, $1964);
                                                                                var $1961 = $1965;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1966 = self.idx;
                                                                                var $1967 = self.code;
                                                                                var $1968 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1966, $1967);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1970 = self.idx;
                                                                                        var $1971 = self.code;
                                                                                        var $1972 = self.err;
                                                                                        var $1973 = Parser$Reply$error$($1970, $1971, $1972);
                                                                                        var $1969 = $1973;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1974 = self.idx;
                                                                                        var $1975 = self.code;
                                                                                        var self = Kind$Parser$term$($1974, $1975);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1977 = self.idx;
                                                                                                var $1978 = self.code;
                                                                                                var $1979 = self.err;
                                                                                                var $1980 = Parser$Reply$error$($1977, $1978, $1979);
                                                                                                var $1976 = $1980;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1981 = self.idx;
                                                                                                var $1982 = self.code;
                                                                                                var $1983 = self.val;
                                                                                                var self = Kind$Parser$stop$($1909, $1981, $1982);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1985 = self.idx;
                                                                                                        var $1986 = self.code;
                                                                                                        var $1987 = self.err;
                                                                                                        var $1988 = Parser$Reply$error$($1985, $1986, $1987);
                                                                                                        var $1984 = $1988;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1989 = self.idx;
                                                                                                        var $1990 = self.code;
                                                                                                        var $1991 = self.val;
                                                                                                        var _term$39 = $1968;
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$("x", (_x$40 => {
                                                                                                            var $1993 = Kind$Term$hol$(Bits$e);
                                                                                                            return $1993;
                                                                                                        })));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($1931, (_x$41 => {
                                                                                                            var $1994 = Kind$Term$lam$($1946, (_y$42 => {
                                                                                                                var $1995 = $1983;
                                                                                                                return $1995;
                                                                                                            }));
                                                                                                            return $1994;
                                                                                                        })));
                                                                                                        var $1992 = Parser$Reply$value$($1989, $1990, Kind$Term$ori$($1991, _term$41));
                                                                                                        var $1984 = $1992;
                                                                                                        break;
                                                                                                };
                                                                                                var $1976 = $1984;
                                                                                                break;
                                                                                        };
                                                                                        var $1969 = $1976;
                                                                                        break;
                                                                                };
                                                                                var $1961 = $1969;
                                                                                break;
                                                                        };
                                                                        var $1954 = $1961;
                                                                        break;
                                                                };
                                                                var $1947 = $1954;
                                                                break;
                                                        };
                                                        var $1939 = $1947;
                                                        break;
                                                };
                                                var $1932 = $1939;
                                                break;
                                        };
                                        var $1924 = $1932;
                                        break;
                                };
                                var $1917 = $1924;
                                break;
                        };
                        var $1910 = $1917;
                        break;
                };
                var $1902 = $1910;
                break;
        };
        return $1902;
    };
    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);

    function Kind$Parser$get$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1997 = self.idx;
                var $1998 = self.code;
                var $1999 = self.err;
                var $2000 = Parser$Reply$error$($1997, $1998, $1999);
                var $1996 = $2000;
                break;
            case 'Parser.Reply.value':
                var $2001 = self.idx;
                var $2002 = self.code;
                var $2003 = self.val;
                var self = Kind$Parser$text$("{", $2001, $2002);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2005 = self.idx;
                        var $2006 = self.code;
                        var $2007 = self.err;
                        var $2008 = Parser$Reply$error$($2005, $2006, $2007);
                        var $2004 = $2008;
                        break;
                    case 'Parser.Reply.value':
                        var $2009 = self.idx;
                        var $2010 = self.code;
                        var self = Kind$Parser$name$($2009, $2010);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2012 = self.idx;
                                var $2013 = self.code;
                                var $2014 = self.err;
                                var $2015 = Parser$Reply$error$($2012, $2013, $2014);
                                var $2011 = $2015;
                                break;
                            case 'Parser.Reply.value':
                                var $2016 = self.idx;
                                var $2017 = self.code;
                                var $2018 = self.val;
                                var self = Kind$Parser$text$(",", $2016, $2017);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2020 = self.idx;
                                        var $2021 = self.code;
                                        var $2022 = self.err;
                                        var $2023 = Parser$Reply$error$($2020, $2021, $2022);
                                        var $2019 = $2023;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2024 = self.idx;
                                        var $2025 = self.code;
                                        var self = Kind$Parser$name$($2024, $2025);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2027 = self.idx;
                                                var $2028 = self.code;
                                                var $2029 = self.err;
                                                var $2030 = Parser$Reply$error$($2027, $2028, $2029);
                                                var $2026 = $2030;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2031 = self.idx;
                                                var $2032 = self.code;
                                                var $2033 = self.val;
                                                var self = Kind$Parser$text$("}", $2031, $2032);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2035 = self.idx;
                                                        var $2036 = self.code;
                                                        var $2037 = self.err;
                                                        var $2038 = Parser$Reply$error$($2035, $2036, $2037);
                                                        var $2034 = $2038;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2039 = self.idx;
                                                        var $2040 = self.code;
                                                        var self = Kind$Parser$text$("= ", $2039, $2040);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2042 = self.idx;
                                                                var $2043 = self.code;
                                                                var $2044 = self.err;
                                                                var $2045 = Parser$Reply$error$($2042, $2043, $2044);
                                                                var $2041 = $2045;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2046 = self.idx;
                                                                var $2047 = self.code;
                                                                var self = Kind$Parser$term$($2046, $2047);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2049 = self.idx;
                                                                        var $2050 = self.code;
                                                                        var $2051 = self.err;
                                                                        var $2052 = Parser$Reply$error$($2049, $2050, $2051);
                                                                        var $2048 = $2052;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2053 = self.idx;
                                                                        var $2054 = self.code;
                                                                        var $2055 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2053, $2054);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2057 = self.idx;
                                                                                var $2058 = self.code;
                                                                                var $2059 = self.err;
                                                                                var $2060 = Parser$Reply$error$($2057, $2058, $2059);
                                                                                var $2056 = $2060;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2061 = self.idx;
                                                                                var $2062 = self.code;
                                                                                var self = Kind$Parser$term$($2061, $2062);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2064 = self.idx;
                                                                                        var $2065 = self.code;
                                                                                        var $2066 = self.err;
                                                                                        var $2067 = Parser$Reply$error$($2064, $2065, $2066);
                                                                                        var $2063 = $2067;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2068 = self.idx;
                                                                                        var $2069 = self.code;
                                                                                        var $2070 = self.val;
                                                                                        var self = Kind$Parser$stop$($2003, $2068, $2069);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2072 = self.idx;
                                                                                                var $2073 = self.code;
                                                                                                var $2074 = self.err;
                                                                                                var $2075 = Parser$Reply$error$($2072, $2073, $2074);
                                                                                                var $2071 = $2075;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2076 = self.idx;
                                                                                                var $2077 = self.code;
                                                                                                var $2078 = self.val;
                                                                                                var _term$36 = $2055;
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$("x", (_x$37 => {
                                                                                                    var $2080 = Kind$Term$hol$(Bits$e);
                                                                                                    return $2080;
                                                                                                })));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($2018, (_x$38 => {
                                                                                                    var $2081 = Kind$Term$lam$($2033, (_y$39 => {
                                                                                                        var $2082 = $2070;
                                                                                                        return $2082;
                                                                                                    }));
                                                                                                    return $2081;
                                                                                                })));
                                                                                                var $2079 = Parser$Reply$value$($2076, $2077, Kind$Term$ori$($2078, _term$38));
                                                                                                var $2071 = $2079;
                                                                                                break;
                                                                                        };
                                                                                        var $2063 = $2071;
                                                                                        break;
                                                                                };
                                                                                var $2056 = $2063;
                                                                                break;
                                                                        };
                                                                        var $2048 = $2056;
                                                                        break;
                                                                };
                                                                var $2041 = $2048;
                                                                break;
                                                        };
                                                        var $2034 = $2041;
                                                        break;
                                                };
                                                var $2026 = $2034;
                                                break;
                                        };
                                        var $2019 = $2026;
                                        break;
                                };
                                var $2011 = $2019;
                                break;
                        };
                        var $2004 = $2011;
                        break;
                };
                var $1996 = $2004;
                break;
        };
        return $1996;
    };
    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);

    function Kind$Term$def$(_name$1, _expr$2, _body$3) {
        var $2083 = ({
            _: 'Kind.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $2083;
    };
    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);

    function Kind$Parser$def$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2085 = self.idx;
                var $2086 = self.code;
                var $2087 = self.err;
                var $2088 = Parser$Reply$error$($2085, $2086, $2087);
                var $2084 = $2088;
                break;
            case 'Parser.Reply.value':
                var $2089 = self.idx;
                var $2090 = self.code;
                var $2091 = self.val;
                var self = Kind$Parser$text$("def ", $2089, $2090);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2093 = self.idx;
                        var $2094 = self.code;
                        var $2095 = self.err;
                        var $2096 = Parser$Reply$error$($2093, $2094, $2095);
                        var $2092 = $2096;
                        break;
                    case 'Parser.Reply.value':
                        var $2097 = self.idx;
                        var $2098 = self.code;
                        var self = Kind$Parser$name$($2097, $2098);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2100 = self.idx;
                                var $2101 = self.code;
                                var $2102 = self.err;
                                var $2103 = Parser$Reply$error$($2100, $2101, $2102);
                                var $2099 = $2103;
                                break;
                            case 'Parser.Reply.value':
                                var $2104 = self.idx;
                                var $2105 = self.code;
                                var $2106 = self.val;
                                var self = Kind$Parser$text$("=", $2104, $2105);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2108 = self.idx;
                                        var $2109 = self.code;
                                        var $2110 = self.err;
                                        var $2111 = Parser$Reply$error$($2108, $2109, $2110);
                                        var $2107 = $2111;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2112 = self.idx;
                                        var $2113 = self.code;
                                        var self = Kind$Parser$term$($2112, $2113);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2115 = self.idx;
                                                var $2116 = self.code;
                                                var $2117 = self.err;
                                                var $2118 = Parser$Reply$error$($2115, $2116, $2117);
                                                var $2114 = $2118;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2119 = self.idx;
                                                var $2120 = self.code;
                                                var $2121 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2119, $2120);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2123 = self.idx;
                                                        var $2124 = self.code;
                                                        var $2125 = self.err;
                                                        var $2126 = Parser$Reply$error$($2123, $2124, $2125);
                                                        var $2122 = $2126;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2127 = self.idx;
                                                        var $2128 = self.code;
                                                        var self = Kind$Parser$term$($2127, $2128);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2130 = self.idx;
                                                                var $2131 = self.code;
                                                                var $2132 = self.err;
                                                                var $2133 = Parser$Reply$error$($2130, $2131, $2132);
                                                                var $2129 = $2133;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2134 = self.idx;
                                                                var $2135 = self.code;
                                                                var $2136 = self.val;
                                                                var self = Kind$Parser$stop$($2091, $2134, $2135);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2138 = self.idx;
                                                                        var $2139 = self.code;
                                                                        var $2140 = self.err;
                                                                        var $2141 = Parser$Reply$error$($2138, $2139, $2140);
                                                                        var $2137 = $2141;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2142 = self.idx;
                                                                        var $2143 = self.code;
                                                                        var $2144 = self.val;
                                                                        var $2145 = Parser$Reply$value$($2142, $2143, Kind$Term$ori$($2144, Kind$Term$def$($2106, $2121, (_x$27 => {
                                                                            var $2146 = $2136;
                                                                            return $2146;
                                                                        }))));
                                                                        var $2137 = $2145;
                                                                        break;
                                                                };
                                                                var $2129 = $2137;
                                                                break;
                                                        };
                                                        var $2122 = $2129;
                                                        break;
                                                };
                                                var $2114 = $2122;
                                                break;
                                        };
                                        var $2107 = $2114;
                                        break;
                                };
                                var $2099 = $2107;
                                break;
                        };
                        var $2092 = $2099;
                        break;
                };
                var $2084 = $2092;
                break;
        };
        return $2084;
    };
    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);

    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2148 = self.idx;
                var $2149 = self.code;
                var $2150 = self.err;
                var $2151 = Parser$Reply$error$($2148, $2149, $2150);
                var $2147 = $2151;
                break;
            case 'Parser.Reply.value':
                var $2152 = self.idx;
                var $2153 = self.code;
                var $2154 = self.val;
                var self = Kind$Parser$text$("rewrite ", $2152, $2153);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2156 = self.idx;
                        var $2157 = self.code;
                        var $2158 = self.err;
                        var $2159 = Parser$Reply$error$($2156, $2157, $2158);
                        var $2155 = $2159;
                        break;
                    case 'Parser.Reply.value':
                        var $2160 = self.idx;
                        var $2161 = self.code;
                        var self = Kind$Parser$name1$($2160, $2161);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2163 = self.idx;
                                var $2164 = self.code;
                                var $2165 = self.err;
                                var $2166 = Parser$Reply$error$($2163, $2164, $2165);
                                var $2162 = $2166;
                                break;
                            case 'Parser.Reply.value':
                                var $2167 = self.idx;
                                var $2168 = self.code;
                                var $2169 = self.val;
                                var self = Kind$Parser$text$("in", $2167, $2168);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2171 = self.idx;
                                        var $2172 = self.code;
                                        var $2173 = self.err;
                                        var $2174 = Parser$Reply$error$($2171, $2172, $2173);
                                        var $2170 = $2174;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2175 = self.idx;
                                        var $2176 = self.code;
                                        var self = Kind$Parser$term$($2175, $2176);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2178 = self.idx;
                                                var $2179 = self.code;
                                                var $2180 = self.err;
                                                var $2181 = Parser$Reply$error$($2178, $2179, $2180);
                                                var $2177 = $2181;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2182 = self.idx;
                                                var $2183 = self.code;
                                                var $2184 = self.val;
                                                var self = Kind$Parser$text$("with", $2182, $2183);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2186 = self.idx;
                                                        var $2187 = self.code;
                                                        var $2188 = self.err;
                                                        var $2189 = Parser$Reply$error$($2186, $2187, $2188);
                                                        var $2185 = $2189;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2190 = self.idx;
                                                        var $2191 = self.code;
                                                        var self = Kind$Parser$term$($2190, $2191);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2193 = self.idx;
                                                                var $2194 = self.code;
                                                                var $2195 = self.err;
                                                                var $2196 = Parser$Reply$error$($2193, $2194, $2195);
                                                                var $2192 = $2196;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2197 = self.idx;
                                                                var $2198 = self.code;
                                                                var $2199 = self.val;
                                                                var self = Kind$Parser$term$($2197, $2198);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2201 = self.idx;
                                                                        var $2202 = self.code;
                                                                        var $2203 = self.err;
                                                                        var $2204 = Parser$Reply$error$($2201, $2202, $2203);
                                                                        var $2200 = $2204;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2205 = self.idx;
                                                                        var $2206 = self.code;
                                                                        var $2207 = self.val;
                                                                        var self = Kind$Parser$stop$($2154, $2205, $2206);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2209 = self.idx;
                                                                                var $2210 = self.code;
                                                                                var $2211 = self.err;
                                                                                var $2212 = Parser$Reply$error$($2209, $2210, $2211);
                                                                                var $2208 = $2212;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2213 = self.idx;
                                                                                var $2214 = self.code;
                                                                                var $2215 = self.val;
                                                                                var _moti$30 = Kind$Term$lam$($2169, (_s$30 => {
                                                                                    var $2217 = Kind$Term$lam$("", (_x$31 => {
                                                                                        var $2218 = $2184;
                                                                                        return $2218;
                                                                                    }));
                                                                                    return $2217;
                                                                                }));
                                                                                var _term$31 = Kind$Term$ref$("Equal.mirror");
                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));
                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                var _term$35 = Kind$Term$app$(_term$34, $2199);
                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);
                                                                                var _term$37 = Kind$Term$app$(_term$36, $2207);
                                                                                var $2216 = Parser$Reply$value$($2213, $2214, Kind$Term$ori$($2215, _term$37));
                                                                                var $2208 = $2216;
                                                                                break;
                                                                        };
                                                                        var $2200 = $2208;
                                                                        break;
                                                                };
                                                                var $2192 = $2200;
                                                                break;
                                                        };
                                                        var $2185 = $2192;
                                                        break;
                                                };
                                                var $2177 = $2185;
                                                break;
                                        };
                                        var $2170 = $2177;
                                        break;
                                };
                                var $2162 = $2170;
                                break;
                        };
                        var $2155 = $2162;
                        break;
                };
                var $2147 = $2155;
                break;
        };
        return $2147;
    };
    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);

    function Kind$Parser$if$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2220 = self.idx;
                var $2221 = self.code;
                var $2222 = self.err;
                var $2223 = Parser$Reply$error$($2220, $2221, $2222);
                var $2219 = $2223;
                break;
            case 'Parser.Reply.value':
                var $2224 = self.idx;
                var $2225 = self.code;
                var $2226 = self.val;
                var self = Kind$Parser$text$("if ", $2224, $2225);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2228 = self.idx;
                        var $2229 = self.code;
                        var $2230 = self.err;
                        var $2231 = Parser$Reply$error$($2228, $2229, $2230);
                        var $2227 = $2231;
                        break;
                    case 'Parser.Reply.value':
                        var $2232 = self.idx;
                        var $2233 = self.code;
                        var self = Kind$Parser$term$($2232, $2233);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2235 = self.idx;
                                var $2236 = self.code;
                                var $2237 = self.err;
                                var $2238 = Parser$Reply$error$($2235, $2236, $2237);
                                var $2234 = $2238;
                                break;
                            case 'Parser.Reply.value':
                                var $2239 = self.idx;
                                var $2240 = self.code;
                                var $2241 = self.val;
                                var self = Kind$Parser$text$("then", $2239, $2240);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2243 = self.idx;
                                        var $2244 = self.code;
                                        var $2245 = self.err;
                                        var $2246 = Parser$Reply$error$($2243, $2244, $2245);
                                        var $2242 = $2246;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2247 = self.idx;
                                        var $2248 = self.code;
                                        var self = Kind$Parser$term$($2247, $2248);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2250 = self.idx;
                                                var $2251 = self.code;
                                                var $2252 = self.err;
                                                var $2253 = Parser$Reply$error$($2250, $2251, $2252);
                                                var $2249 = $2253;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2254 = self.idx;
                                                var $2255 = self.code;
                                                var $2256 = self.val;
                                                var self = Kind$Parser$text$("else", $2254, $2255);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2258 = self.idx;
                                                        var $2259 = self.code;
                                                        var $2260 = self.err;
                                                        var $2261 = Parser$Reply$error$($2258, $2259, $2260);
                                                        var $2257 = $2261;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2262 = self.idx;
                                                        var $2263 = self.code;
                                                        var self = Kind$Parser$term$($2262, $2263);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2265 = self.idx;
                                                                var $2266 = self.code;
                                                                var $2267 = self.err;
                                                                var $2268 = Parser$Reply$error$($2265, $2266, $2267);
                                                                var $2264 = $2268;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2269 = self.idx;
                                                                var $2270 = self.code;
                                                                var $2271 = self.val;
                                                                var self = Kind$Parser$stop$($2226, $2269, $2270);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2273 = self.idx;
                                                                        var $2274 = self.code;
                                                                        var $2275 = self.err;
                                                                        var $2276 = Parser$Reply$error$($2273, $2274, $2275);
                                                                        var $2272 = $2276;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2277 = self.idx;
                                                                        var $2278 = self.code;
                                                                        var $2279 = self.val;
                                                                        var _term$27 = $2241;
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$("", (_x$28 => {
                                                                            var $2281 = Kind$Term$hol$(Bits$e);
                                                                            return $2281;
                                                                        })));
                                                                        var _term$29 = Kind$Term$app$(_term$28, $2256);
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2271);
                                                                        var $2280 = Parser$Reply$value$($2277, $2278, Kind$Term$ori$($2279, _term$30));
                                                                        var $2272 = $2280;
                                                                        break;
                                                                };
                                                                var $2264 = $2272;
                                                                break;
                                                        };
                                                        var $2257 = $2264;
                                                        break;
                                                };
                                                var $2249 = $2257;
                                                break;
                                        };
                                        var $2242 = $2249;
                                        break;
                                };
                                var $2234 = $2242;
                                break;
                        };
                        var $2227 = $2234;
                        break;
                };
                var $2219 = $2227;
                break;
        };
        return $2219;
    };
    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $2283 = self.head;
                var $2284 = self.tail;
                var $2285 = List$cons$(_f$4($2283), List$mapped$($2284, _f$4));
                var $2282 = $2285;
                break;
            case 'List.nil':
                var $2286 = List$nil;
                var $2282 = $2286;
                break;
        };
        return $2282;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);
    const Kind$Code$backslash = 92;
    const Kind$Code$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $2288 = self.fst;
                var $2289 = self.snd;
                var $2290 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($2288, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2292 = self.idx;
                            var $2293 = self.code;
                            var $2294 = self.err;
                            var $2295 = Parser$Reply$error$($2292, $2293, $2294);
                            var $2291 = $2295;
                            break;
                        case 'Parser.Reply.value':
                            var $2296 = self.idx;
                            var $2297 = self.code;
                            var $2298 = Parser$Reply$value$($2296, $2297, $2289);
                            var $2291 = $2298;
                            break;
                    };
                    return $2291;
                });
                var $2287 = $2290;
                break;
        };
        return $2287;
    }))), List$cons$(Parser$one, List$nil)));

    function Kind$Term$chr$(_chrx$1) {
        var $2299 = ({
            _: 'Kind.Term.chr',
            'chrx': _chrx$1
        });
        return $2299;
    };
    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);

    function Kind$Parser$char$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2301 = self.idx;
                var $2302 = self.code;
                var $2303 = self.err;
                var $2304 = Parser$Reply$error$($2301, $2302, $2303);
                var $2300 = $2304;
                break;
            case 'Parser.Reply.value':
                var $2305 = self.idx;
                var $2306 = self.code;
                var $2307 = self.val;
                var self = Kind$Parser$text$("\'", $2305, $2306);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2309 = self.idx;
                        var $2310 = self.code;
                        var $2311 = self.err;
                        var $2312 = Parser$Reply$error$($2309, $2310, $2311);
                        var $2308 = $2312;
                        break;
                    case 'Parser.Reply.value':
                        var $2313 = self.idx;
                        var $2314 = self.code;
                        var self = Kind$Parser$char$single($2313)($2314);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2316 = self.idx;
                                var $2317 = self.code;
                                var $2318 = self.err;
                                var $2319 = Parser$Reply$error$($2316, $2317, $2318);
                                var $2315 = $2319;
                                break;
                            case 'Parser.Reply.value':
                                var $2320 = self.idx;
                                var $2321 = self.code;
                                var $2322 = self.val;
                                var self = Parser$text$("\'", $2320, $2321);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2324 = self.idx;
                                        var $2325 = self.code;
                                        var $2326 = self.err;
                                        var $2327 = Parser$Reply$error$($2324, $2325, $2326);
                                        var $2323 = $2327;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2328 = self.idx;
                                        var $2329 = self.code;
                                        var self = Kind$Parser$stop$($2307, $2328, $2329);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2331 = self.idx;
                                                var $2332 = self.code;
                                                var $2333 = self.err;
                                                var $2334 = Parser$Reply$error$($2331, $2332, $2333);
                                                var $2330 = $2334;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2335 = self.idx;
                                                var $2336 = self.code;
                                                var $2337 = self.val;
                                                var $2338 = Parser$Reply$value$($2335, $2336, Kind$Term$ori$($2337, Kind$Term$chr$($2322)));
                                                var $2330 = $2338;
                                                break;
                                        };
                                        var $2323 = $2330;
                                        break;
                                };
                                var $2315 = $2323;
                                break;
                        };
                        var $2308 = $2315;
                        break;
                };
                var $2300 = $2308;
                break;
        };
        return $2300;
    };
    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $2339 = _res$2;
                    return $2339;
                } else {
                    var $2340 = self.charCodeAt(0);
                    var $2341 = self.slice(1);
                    var $2342 = String$reverse$go$($2341, String$cons$($2340, _res$2));
                    return $2342;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $2343 = String$reverse$go$(_xs$1, String$nil);
        return $2343;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Kind$Parser$string$go$(_str$1, _idx$2, _code$3) {
        var Kind$Parser$string$go$ = (_str$1, _idx$2, _code$3) => ({
            ctr: 'TCO',
            arg: [_str$1, _idx$2, _code$3]
        });
        var Kind$Parser$string$go = _str$1 => _idx$2 => _code$3 => Kind$Parser$string$go$(_str$1, _idx$2, _code$3);
        var arg = [_str$1, _idx$2, _code$3];
        while (true) {
            let [_str$1, _idx$2, _code$3] = arg;
            var R = (() => {
                var self = _code$3;
                if (self.length === 0) {
                    var $2344 = Parser$Reply$error$(_idx$2, _code$3, "Non-terminating string.");
                    return $2344;
                } else {
                    var $2345 = self.charCodeAt(0);
                    var $2346 = self.slice(1);
                    var self = ($2345 === 34);
                    if (self) {
                        var $2348 = Parser$Reply$value$(Nat$succ$(_idx$2), $2346, String$reverse$(_str$1));
                        var $2347 = $2348;
                    } else {
                        var self = Kind$Parser$char$single(_idx$2)(_code$3);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2350 = self.idx;
                                var $2351 = self.code;
                                var $2352 = self.err;
                                var $2353 = Parser$Reply$error$($2350, $2351, $2352);
                                var $2349 = $2353;
                                break;
                            case 'Parser.Reply.value':
                                var $2354 = self.idx;
                                var $2355 = self.code;
                                var $2356 = self.val;
                                var $2357 = Kind$Parser$string$go$(String$cons$($2356, _str$1), $2354, $2355);
                                var $2349 = $2357;
                                break;
                        };
                        var $2347 = $2349;
                    };
                    return $2347;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$string$go = x0 => x1 => x2 => Kind$Parser$string$go$(x0, x1, x2);

    function Kind$Term$str$(_strx$1) {
        var $2358 = ({
            _: 'Kind.Term.str',
            'strx': _strx$1
        });
        return $2358;
    };
    const Kind$Term$str = x0 => Kind$Term$str$(x0);

    function Kind$Parser$string$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2360 = self.idx;
                var $2361 = self.code;
                var $2362 = self.err;
                var $2363 = Parser$Reply$error$($2360, $2361, $2362);
                var $2359 = $2363;
                break;
            case 'Parser.Reply.value':
                var $2364 = self.idx;
                var $2365 = self.code;
                var $2366 = self.val;
                var self = Kind$Parser$text$(String$cons$(34, String$nil), $2364, $2365);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2368 = self.idx;
                        var $2369 = self.code;
                        var $2370 = self.err;
                        var $2371 = Parser$Reply$error$($2368, $2369, $2370);
                        var $2367 = $2371;
                        break;
                    case 'Parser.Reply.value':
                        var $2372 = self.idx;
                        var $2373 = self.code;
                        var self = Kind$Parser$string$go$("", $2372, $2373);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2375 = self.idx;
                                var $2376 = self.code;
                                var $2377 = self.err;
                                var $2378 = Parser$Reply$error$($2375, $2376, $2377);
                                var $2374 = $2378;
                                break;
                            case 'Parser.Reply.value':
                                var $2379 = self.idx;
                                var $2380 = self.code;
                                var $2381 = self.val;
                                var self = Kind$Parser$stop$($2366, $2379, $2380);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2383 = self.idx;
                                        var $2384 = self.code;
                                        var $2385 = self.err;
                                        var $2386 = Parser$Reply$error$($2383, $2384, $2385);
                                        var $2382 = $2386;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2387 = self.idx;
                                        var $2388 = self.code;
                                        var $2389 = self.val;
                                        var $2390 = Parser$Reply$value$($2387, $2388, Kind$Term$ori$($2389, Kind$Term$str$($2381)));
                                        var $2382 = $2390;
                                        break;
                                };
                                var $2374 = $2382;
                                break;
                        };
                        var $2367 = $2374;
                        break;
                };
                var $2359 = $2367;
                break;
        };
        return $2359;
    };
    const Kind$Parser$string = x0 => x1 => Kind$Parser$string$(x0, x1);

    function Kind$Parser$pair$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2392 = self.idx;
                var $2393 = self.code;
                var $2394 = self.err;
                var $2395 = Parser$Reply$error$($2392, $2393, $2394);
                var $2391 = $2395;
                break;
            case 'Parser.Reply.value':
                var $2396 = self.idx;
                var $2397 = self.code;
                var $2398 = self.val;
                var self = Kind$Parser$text$("{", $2396, $2397);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2400 = self.idx;
                        var $2401 = self.code;
                        var $2402 = self.err;
                        var $2403 = Parser$Reply$error$($2400, $2401, $2402);
                        var $2399 = $2403;
                        break;
                    case 'Parser.Reply.value':
                        var $2404 = self.idx;
                        var $2405 = self.code;
                        var self = Kind$Parser$term$($2404, $2405);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2407 = self.idx;
                                var $2408 = self.code;
                                var $2409 = self.err;
                                var $2410 = Parser$Reply$error$($2407, $2408, $2409);
                                var $2406 = $2410;
                                break;
                            case 'Parser.Reply.value':
                                var $2411 = self.idx;
                                var $2412 = self.code;
                                var $2413 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text(","), $2411, $2412);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2415 = self.idx;
                                        var $2416 = self.code;
                                        var $2417 = self.err;
                                        var $2418 = Parser$Reply$error$($2415, $2416, $2417);
                                        var $2414 = $2418;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2419 = self.idx;
                                        var $2420 = self.code;
                                        var self = Kind$Parser$term$($2419, $2420);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2422 = self.idx;
                                                var $2423 = self.code;
                                                var $2424 = self.err;
                                                var $2425 = Parser$Reply$error$($2422, $2423, $2424);
                                                var $2421 = $2425;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2426 = self.idx;
                                                var $2427 = self.code;
                                                var $2428 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(","), $2426, $2427);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2430 = self.idx;
                                                        var $2431 = self.code;
                                                        var $2432 = self.err;
                                                        var $2433 = Parser$Reply$error$($2430, $2431, $2432);
                                                        var $2429 = $2433;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2434 = self.idx;
                                                        var $2435 = self.code;
                                                        var self = Kind$Parser$text$("}", $2434, $2435);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2437 = self.idx;
                                                                var $2438 = self.code;
                                                                var $2439 = self.err;
                                                                var $2440 = Parser$Reply$error$($2437, $2438, $2439);
                                                                var $2436 = $2440;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2441 = self.idx;
                                                                var $2442 = self.code;
                                                                var self = Kind$Parser$stop$($2398, $2441, $2442);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2444 = self.idx;
                                                                        var $2445 = self.code;
                                                                        var $2446 = self.err;
                                                                        var $2447 = Parser$Reply$error$($2444, $2445, $2446);
                                                                        var $2443 = $2447;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2448 = self.idx;
                                                                        var $2449 = self.code;
                                                                        var $2450 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Pair.new");
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2413);
                                                                        var _term$31 = Kind$Term$app$(_term$30, $2428);
                                                                        var $2451 = Parser$Reply$value$($2448, $2449, Kind$Term$ori$($2450, _term$31));
                                                                        var $2443 = $2451;
                                                                        break;
                                                                };
                                                                var $2436 = $2443;
                                                                break;
                                                        };
                                                        var $2429 = $2436;
                                                        break;
                                                };
                                                var $2421 = $2429;
                                                break;
                                        };
                                        var $2414 = $2421;
                                        break;
                                };
                                var $2406 = $2414;
                                break;
                        };
                        var $2399 = $2406;
                        break;
                };
                var $2391 = $2399;
                break;
        };
        return $2391;
    };
    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);

    function Kind$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2453 = self.idx;
                var $2454 = self.code;
                var $2455 = self.err;
                var $2456 = Parser$Reply$error$($2453, $2454, $2455);
                var $2452 = $2456;
                break;
            case 'Parser.Reply.value':
                var $2457 = self.idx;
                var $2458 = self.code;
                var $2459 = self.val;
                var self = Kind$Parser$text$("[", $2457, $2458);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2461 = self.idx;
                        var $2462 = self.code;
                        var $2463 = self.err;
                        var $2464 = Parser$Reply$error$($2461, $2462, $2463);
                        var $2460 = $2464;
                        break;
                    case 'Parser.Reply.value':
                        var $2465 = self.idx;
                        var $2466 = self.code;
                        var self = Kind$Parser$name1$($2465, $2466);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2468 = self.idx;
                                var $2469 = self.code;
                                var $2470 = self.err;
                                var $2471 = Parser$Reply$error$($2468, $2469, $2470);
                                var $2467 = $2471;
                                break;
                            case 'Parser.Reply.value':
                                var $2472 = self.idx;
                                var $2473 = self.code;
                                var $2474 = self.val;
                                var self = Kind$Parser$text$(":", $2472, $2473);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2476 = self.idx;
                                        var $2477 = self.code;
                                        var $2478 = self.err;
                                        var $2479 = Parser$Reply$error$($2476, $2477, $2478);
                                        var $2475 = $2479;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2480 = self.idx;
                                        var $2481 = self.code;
                                        var self = Kind$Parser$term$($2480, $2481);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2483 = self.idx;
                                                var $2484 = self.code;
                                                var $2485 = self.err;
                                                var $2486 = Parser$Reply$error$($2483, $2484, $2485);
                                                var $2482 = $2486;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2487 = self.idx;
                                                var $2488 = self.code;
                                                var $2489 = self.val;
                                                var self = Kind$Parser$text$("]", $2487, $2488);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2491 = self.idx;
                                                        var $2492 = self.code;
                                                        var $2493 = self.err;
                                                        var $2494 = Parser$Reply$error$($2491, $2492, $2493);
                                                        var $2490 = $2494;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2495 = self.idx;
                                                        var $2496 = self.code;
                                                        var self = Kind$Parser$term$($2495, $2496);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2498 = self.idx;
                                                                var $2499 = self.code;
                                                                var $2500 = self.err;
                                                                var $2501 = Parser$Reply$error$($2498, $2499, $2500);
                                                                var $2497 = $2501;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2502 = self.idx;
                                                                var $2503 = self.code;
                                                                var $2504 = self.val;
                                                                var self = Kind$Parser$stop$($2459, $2502, $2503);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2506 = self.idx;
                                                                        var $2507 = self.code;
                                                                        var $2508 = self.err;
                                                                        var $2509 = Parser$Reply$error$($2506, $2507, $2508);
                                                                        var $2505 = $2509;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2510 = self.idx;
                                                                        var $2511 = self.code;
                                                                        var $2512 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Sigma");
                                                                        var _term$28 = Kind$Term$app$(_term$27, $2489);
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($2474, (_x$29 => {
                                                                            var $2514 = $2504;
                                                                            return $2514;
                                                                        })));
                                                                        var $2513 = Parser$Reply$value$($2510, $2511, Kind$Term$ori$($2512, _term$29));
                                                                        var $2505 = $2513;
                                                                        break;
                                                                };
                                                                var $2497 = $2505;
                                                                break;
                                                        };
                                                        var $2490 = $2497;
                                                        break;
                                                };
                                                var $2482 = $2490;
                                                break;
                                        };
                                        var $2475 = $2482;
                                        break;
                                };
                                var $2467 = $2475;
                                break;
                        };
                        var $2460 = $2467;
                        break;
                };
                var $2452 = $2460;
                break;
        };
        return $2452;
    };
    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);

    function Kind$Parser$some$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2516 = self.idx;
                var $2517 = self.code;
                var $2518 = self.err;
                var $2519 = Parser$Reply$error$($2516, $2517, $2518);
                var $2515 = $2519;
                break;
            case 'Parser.Reply.value':
                var $2520 = self.idx;
                var $2521 = self.code;
                var $2522 = self.val;
                var self = Kind$Parser$text$("some(", $2520, $2521);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2524 = self.idx;
                        var $2525 = self.code;
                        var $2526 = self.err;
                        var $2527 = Parser$Reply$error$($2524, $2525, $2526);
                        var $2523 = $2527;
                        break;
                    case 'Parser.Reply.value':
                        var $2528 = self.idx;
                        var $2529 = self.code;
                        var self = Kind$Parser$term$($2528, $2529);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2531 = self.idx;
                                var $2532 = self.code;
                                var $2533 = self.err;
                                var $2534 = Parser$Reply$error$($2531, $2532, $2533);
                                var $2530 = $2534;
                                break;
                            case 'Parser.Reply.value':
                                var $2535 = self.idx;
                                var $2536 = self.code;
                                var $2537 = self.val;
                                var self = Kind$Parser$text$(")", $2535, $2536);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2539 = self.idx;
                                        var $2540 = self.code;
                                        var $2541 = self.err;
                                        var $2542 = Parser$Reply$error$($2539, $2540, $2541);
                                        var $2538 = $2542;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2543 = self.idx;
                                        var $2544 = self.code;
                                        var self = Kind$Parser$stop$($2522, $2543, $2544);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2546 = self.idx;
                                                var $2547 = self.code;
                                                var $2548 = self.err;
                                                var $2549 = Parser$Reply$error$($2546, $2547, $2548);
                                                var $2545 = $2549;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2550 = self.idx;
                                                var $2551 = self.code;
                                                var $2552 = self.val;
                                                var _term$18 = Kind$Term$ref$("Maybe.some");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, $2537);
                                                var $2553 = Parser$Reply$value$($2550, $2551, Kind$Term$ori$($2552, _term$20));
                                                var $2545 = $2553;
                                                break;
                                        };
                                        var $2538 = $2545;
                                        break;
                                };
                                var $2530 = $2538;
                                break;
                        };
                        var $2523 = $2530;
                        break;
                };
                var $2515 = $2523;
                break;
        };
        return $2515;
    };
    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);

    function Kind$Parser$not$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2555 = self.idx;
                var $2556 = self.code;
                var $2557 = self.err;
                var $2558 = Parser$Reply$error$($2555, $2556, $2557);
                var $2554 = $2558;
                break;
            case 'Parser.Reply.value':
                var $2559 = self.idx;
                var $2560 = self.code;
                var $2561 = self.val;
                var self = Kind$Parser$text$("not(", $2559, $2560);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2563 = self.idx;
                        var $2564 = self.code;
                        var $2565 = self.err;
                        var $2566 = Parser$Reply$error$($2563, $2564, $2565);
                        var $2562 = $2566;
                        break;
                    case 'Parser.Reply.value':
                        var $2567 = self.idx;
                        var $2568 = self.code;
                        var self = Kind$Parser$term$($2567, $2568);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2570 = self.idx;
                                var $2571 = self.code;
                                var $2572 = self.err;
                                var $2573 = Parser$Reply$error$($2570, $2571, $2572);
                                var $2569 = $2573;
                                break;
                            case 'Parser.Reply.value':
                                var $2574 = self.idx;
                                var $2575 = self.code;
                                var $2576 = self.val;
                                var self = Kind$Parser$text$(")", $2574, $2575);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2578 = self.idx;
                                        var $2579 = self.code;
                                        var $2580 = self.err;
                                        var $2581 = Parser$Reply$error$($2578, $2579, $2580);
                                        var $2577 = $2581;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2582 = self.idx;
                                        var $2583 = self.code;
                                        var self = Kind$Parser$stop$($2561, $2582, $2583);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2585 = self.idx;
                                                var $2586 = self.code;
                                                var $2587 = self.err;
                                                var $2588 = Parser$Reply$error$($2585, $2586, $2587);
                                                var $2584 = $2588;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2589 = self.idx;
                                                var $2590 = self.code;
                                                var $2591 = self.val;
                                                var _term$18 = Kind$Term$ref$("Bool.not");
                                                var _term$19 = Kind$Term$app$(_term$18, $2576);
                                                var $2592 = Parser$Reply$value$($2589, $2590, Kind$Term$ori$($2591, _term$19));
                                                var $2584 = $2592;
                                                break;
                                        };
                                        var $2577 = $2584;
                                        break;
                                };
                                var $2569 = $2577;
                                break;
                        };
                        var $2562 = $2569;
                        break;
                };
                var $2554 = $2562;
                break;
        };
        return $2554;
    };
    const Kind$Parser$not = x0 => x1 => Kind$Parser$not$(x0, x1);

    function Kind$Parser$left$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2594 = self.idx;
                var $2595 = self.code;
                var $2596 = self.err;
                var $2597 = Parser$Reply$error$($2594, $2595, $2596);
                var $2593 = $2597;
                break;
            case 'Parser.Reply.value':
                var $2598 = self.idx;
                var $2599 = self.code;
                var $2600 = self.val;
                var self = Kind$Parser$text$("left(", $2598, $2599);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2602 = self.idx;
                        var $2603 = self.code;
                        var $2604 = self.err;
                        var $2605 = Parser$Reply$error$($2602, $2603, $2604);
                        var $2601 = $2605;
                        break;
                    case 'Parser.Reply.value':
                        var $2606 = self.idx;
                        var $2607 = self.code;
                        var self = Kind$Parser$term$($2606, $2607);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2609 = self.idx;
                                var $2610 = self.code;
                                var $2611 = self.err;
                                var $2612 = Parser$Reply$error$($2609, $2610, $2611);
                                var $2608 = $2612;
                                break;
                            case 'Parser.Reply.value':
                                var $2613 = self.idx;
                                var $2614 = self.code;
                                var $2615 = self.val;
                                var self = Kind$Parser$text$(")", $2613, $2614);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2617 = self.idx;
                                        var $2618 = self.code;
                                        var $2619 = self.err;
                                        var $2620 = Parser$Reply$error$($2617, $2618, $2619);
                                        var $2616 = $2620;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2621 = self.idx;
                                        var $2622 = self.code;
                                        var self = Kind$Parser$stop$($2600, $2621, $2622);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2624 = self.idx;
                                                var $2625 = self.code;
                                                var $2626 = self.err;
                                                var $2627 = Parser$Reply$error$($2624, $2625, $2626);
                                                var $2623 = $2627;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2628 = self.idx;
                                                var $2629 = self.code;
                                                var $2630 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.left");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $2615);
                                                var $2631 = Parser$Reply$value$($2628, $2629, Kind$Term$ori$($2630, _term$21));
                                                var $2623 = $2631;
                                                break;
                                        };
                                        var $2616 = $2623;
                                        break;
                                };
                                var $2608 = $2616;
                                break;
                        };
                        var $2601 = $2608;
                        break;
                };
                var $2593 = $2601;
                break;
        };
        return $2593;
    };
    const Kind$Parser$left = x0 => x1 => Kind$Parser$left$(x0, x1);

    function Kind$Parser$right$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2633 = self.idx;
                var $2634 = self.code;
                var $2635 = self.err;
                var $2636 = Parser$Reply$error$($2633, $2634, $2635);
                var $2632 = $2636;
                break;
            case 'Parser.Reply.value':
                var $2637 = self.idx;
                var $2638 = self.code;
                var $2639 = self.val;
                var self = Kind$Parser$text$("right(", $2637, $2638);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2641 = self.idx;
                        var $2642 = self.code;
                        var $2643 = self.err;
                        var $2644 = Parser$Reply$error$($2641, $2642, $2643);
                        var $2640 = $2644;
                        break;
                    case 'Parser.Reply.value':
                        var $2645 = self.idx;
                        var $2646 = self.code;
                        var self = Kind$Parser$term$($2645, $2646);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2648 = self.idx;
                                var $2649 = self.code;
                                var $2650 = self.err;
                                var $2651 = Parser$Reply$error$($2648, $2649, $2650);
                                var $2647 = $2651;
                                break;
                            case 'Parser.Reply.value':
                                var $2652 = self.idx;
                                var $2653 = self.code;
                                var $2654 = self.val;
                                var self = Kind$Parser$text$(")", $2652, $2653);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2656 = self.idx;
                                        var $2657 = self.code;
                                        var $2658 = self.err;
                                        var $2659 = Parser$Reply$error$($2656, $2657, $2658);
                                        var $2655 = $2659;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2660 = self.idx;
                                        var $2661 = self.code;
                                        var self = Kind$Parser$stop$($2639, $2660, $2661);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2663 = self.idx;
                                                var $2664 = self.code;
                                                var $2665 = self.err;
                                                var $2666 = Parser$Reply$error$($2663, $2664, $2665);
                                                var $2662 = $2666;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2667 = self.idx;
                                                var $2668 = self.code;
                                                var $2669 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.right");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $2654);
                                                var $2670 = Parser$Reply$value$($2667, $2668, Kind$Term$ori$($2669, _term$21));
                                                var $2662 = $2670;
                                                break;
                                        };
                                        var $2655 = $2662;
                                        break;
                                };
                                var $2647 = $2655;
                                break;
                        };
                        var $2640 = $2647;
                        break;
                };
                var $2632 = $2640;
                break;
        };
        return $2632;
    };
    const Kind$Parser$right = x0 => x1 => Kind$Parser$right$(x0, x1);

    function Kind$Parser$apply$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2672 = self.idx;
                var $2673 = self.code;
                var $2674 = self.err;
                var $2675 = Parser$Reply$error$($2672, $2673, $2674);
                var $2671 = $2675;
                break;
            case 'Parser.Reply.value':
                var $2676 = self.idx;
                var $2677 = self.code;
                var $2678 = self.val;
                var self = Kind$Parser$text$("apply(", $2676, $2677);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2680 = self.idx;
                        var $2681 = self.code;
                        var $2682 = self.err;
                        var $2683 = Parser$Reply$error$($2680, $2681, $2682);
                        var $2679 = $2683;
                        break;
                    case 'Parser.Reply.value':
                        var $2684 = self.idx;
                        var $2685 = self.code;
                        var self = Kind$Parser$term$($2684, $2685);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2687 = self.idx;
                                var $2688 = self.code;
                                var $2689 = self.err;
                                var $2690 = Parser$Reply$error$($2687, $2688, $2689);
                                var $2686 = $2690;
                                break;
                            case 'Parser.Reply.value':
                                var $2691 = self.idx;
                                var $2692 = self.code;
                                var $2693 = self.val;
                                var self = Kind$Parser$text$(",", $2691, $2692);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2695 = self.idx;
                                        var $2696 = self.code;
                                        var $2697 = self.err;
                                        var $2698 = Parser$Reply$error$($2695, $2696, $2697);
                                        var $2694 = $2698;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2699 = self.idx;
                                        var $2700 = self.code;
                                        var self = Kind$Parser$term$($2699, $2700);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2702 = self.idx;
                                                var $2703 = self.code;
                                                var $2704 = self.err;
                                                var $2705 = Parser$Reply$error$($2702, $2703, $2704);
                                                var $2701 = $2705;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2706 = self.idx;
                                                var $2707 = self.code;
                                                var $2708 = self.val;
                                                var self = Kind$Parser$text$(")", $2706, $2707);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2710 = self.idx;
                                                        var $2711 = self.code;
                                                        var $2712 = self.err;
                                                        var $2713 = Parser$Reply$error$($2710, $2711, $2712);
                                                        var $2709 = $2713;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2714 = self.idx;
                                                        var $2715 = self.code;
                                                        var self = Kind$Parser$stop$($2678, $2714, $2715);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2717 = self.idx;
                                                                var $2718 = self.code;
                                                                var $2719 = self.err;
                                                                var $2720 = Parser$Reply$error$($2717, $2718, $2719);
                                                                var $2716 = $2720;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2721 = self.idx;
                                                                var $2722 = self.code;
                                                                var $2723 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.apply");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $2693);
                                                                var _term$30 = Kind$Term$app$(_term$29, $2708);
                                                                var $2724 = Parser$Reply$value$($2721, $2722, Kind$Term$ori$($2723, _term$30));
                                                                var $2716 = $2724;
                                                                break;
                                                        };
                                                        var $2709 = $2716;
                                                        break;
                                                };
                                                var $2701 = $2709;
                                                break;
                                        };
                                        var $2694 = $2701;
                                        break;
                                };
                                var $2686 = $2694;
                                break;
                        };
                        var $2679 = $2686;
                        break;
                };
                var $2671 = $2679;
                break;
        };
        return $2671;
    };
    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);

    function Kind$Parser$chain$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2726 = self.idx;
                var $2727 = self.code;
                var $2728 = self.err;
                var $2729 = Parser$Reply$error$($2726, $2727, $2728);
                var $2725 = $2729;
                break;
            case 'Parser.Reply.value':
                var $2730 = self.idx;
                var $2731 = self.code;
                var $2732 = self.val;
                var self = Kind$Parser$text$("chain(", $2730, $2731);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2734 = self.idx;
                        var $2735 = self.code;
                        var $2736 = self.err;
                        var $2737 = Parser$Reply$error$($2734, $2735, $2736);
                        var $2733 = $2737;
                        break;
                    case 'Parser.Reply.value':
                        var $2738 = self.idx;
                        var $2739 = self.code;
                        var self = Kind$Parser$term$($2738, $2739);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2741 = self.idx;
                                var $2742 = self.code;
                                var $2743 = self.err;
                                var $2744 = Parser$Reply$error$($2741, $2742, $2743);
                                var $2740 = $2744;
                                break;
                            case 'Parser.Reply.value':
                                var $2745 = self.idx;
                                var $2746 = self.code;
                                var $2747 = self.val;
                                var self = Kind$Parser$text$(",", $2745, $2746);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2749 = self.idx;
                                        var $2750 = self.code;
                                        var $2751 = self.err;
                                        var $2752 = Parser$Reply$error$($2749, $2750, $2751);
                                        var $2748 = $2752;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2753 = self.idx;
                                        var $2754 = self.code;
                                        var self = Kind$Parser$term$($2753, $2754);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2756 = self.idx;
                                                var $2757 = self.code;
                                                var $2758 = self.err;
                                                var $2759 = Parser$Reply$error$($2756, $2757, $2758);
                                                var $2755 = $2759;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2760 = self.idx;
                                                var $2761 = self.code;
                                                var $2762 = self.val;
                                                var self = Kind$Parser$text$(")", $2760, $2761);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2764 = self.idx;
                                                        var $2765 = self.code;
                                                        var $2766 = self.err;
                                                        var $2767 = Parser$Reply$error$($2764, $2765, $2766);
                                                        var $2763 = $2767;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2768 = self.idx;
                                                        var $2769 = self.code;
                                                        var self = Kind$Parser$stop$($2732, $2768, $2769);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2771 = self.idx;
                                                                var $2772 = self.code;
                                                                var $2773 = self.err;
                                                                var $2774 = Parser$Reply$error$($2771, $2772, $2773);
                                                                var $2770 = $2774;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2775 = self.idx;
                                                                var $2776 = self.code;
                                                                var $2777 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.chain");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $2747);
                                                                var _term$30 = Kind$Term$app$(_term$29, $2762);
                                                                var $2778 = Parser$Reply$value$($2775, $2776, Kind$Term$ori$($2777, _term$30));
                                                                var $2770 = $2778;
                                                                break;
                                                        };
                                                        var $2763 = $2770;
                                                        break;
                                                };
                                                var $2755 = $2763;
                                                break;
                                        };
                                        var $2748 = $2755;
                                        break;
                                };
                                var $2740 = $2748;
                                break;
                        };
                        var $2733 = $2740;
                        break;
                };
                var $2725 = $2733;
                break;
        };
        return $2725;
    };
    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);

    function Kind$Parser$mirror$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2780 = self.idx;
                var $2781 = self.code;
                var $2782 = self.err;
                var $2783 = Parser$Reply$error$($2780, $2781, $2782);
                var $2779 = $2783;
                break;
            case 'Parser.Reply.value':
                var $2784 = self.idx;
                var $2785 = self.code;
                var $2786 = self.val;
                var self = Kind$Parser$text$("mirror(", $2784, $2785);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2788 = self.idx;
                        var $2789 = self.code;
                        var $2790 = self.err;
                        var $2791 = Parser$Reply$error$($2788, $2789, $2790);
                        var $2787 = $2791;
                        break;
                    case 'Parser.Reply.value':
                        var $2792 = self.idx;
                        var $2793 = self.code;
                        var self = Kind$Parser$term$($2792, $2793);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2795 = self.idx;
                                var $2796 = self.code;
                                var $2797 = self.err;
                                var $2798 = Parser$Reply$error$($2795, $2796, $2797);
                                var $2794 = $2798;
                                break;
                            case 'Parser.Reply.value':
                                var $2799 = self.idx;
                                var $2800 = self.code;
                                var $2801 = self.val;
                                var self = Kind$Parser$text$(")", $2799, $2800);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2803 = self.idx;
                                        var $2804 = self.code;
                                        var $2805 = self.err;
                                        var $2806 = Parser$Reply$error$($2803, $2804, $2805);
                                        var $2802 = $2806;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2807 = self.idx;
                                        var $2808 = self.code;
                                        var self = Kind$Parser$stop$($2786, $2807, $2808);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2810 = self.idx;
                                                var $2811 = self.code;
                                                var $2812 = self.err;
                                                var $2813 = Parser$Reply$error$($2810, $2811, $2812);
                                                var $2809 = $2813;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2814 = self.idx;
                                                var $2815 = self.code;
                                                var $2816 = self.val;
                                                var _term$18 = Kind$Term$ref$("Equal.mirror");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                var _term$22 = Kind$Term$app$(_term$21, $2801);
                                                var $2817 = Parser$Reply$value$($2814, $2815, Kind$Term$ori$($2816, _term$22));
                                                var $2809 = $2817;
                                                break;
                                        };
                                        var $2802 = $2809;
                                        break;
                                };
                                var $2794 = $2802;
                                break;
                        };
                        var $2787 = $2794;
                        break;
                };
                var $2779 = $2787;
                break;
        };
        return $2779;
    };
    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);

    function Kind$Name$read$(_str$1) {
        var $2818 = _str$1;
        return $2818;
    };
    const Kind$Name$read = x0 => Kind$Name$read$(x0);

    function Kind$Parser$list$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2820 = self.idx;
                var $2821 = self.code;
                var $2822 = self.err;
                var $2823 = Parser$Reply$error$($2820, $2821, $2822);
                var $2819 = $2823;
                break;
            case 'Parser.Reply.value':
                var $2824 = self.idx;
                var $2825 = self.code;
                var $2826 = self.val;
                var self = Kind$Parser$text$("[", $2824, $2825);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2828 = self.idx;
                        var $2829 = self.code;
                        var $2830 = self.err;
                        var $2831 = Parser$Reply$error$($2828, $2829, $2830);
                        var $2827 = $2831;
                        break;
                    case 'Parser.Reply.value':
                        var $2832 = self.idx;
                        var $2833 = self.code;
                        var self = Parser$until$(Kind$Parser$text("]"), Kind$Parser$item(Kind$Parser$term))($2832)($2833);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2835 = self.idx;
                                var $2836 = self.code;
                                var $2837 = self.err;
                                var $2838 = Parser$Reply$error$($2835, $2836, $2837);
                                var $2834 = $2838;
                                break;
                            case 'Parser.Reply.value':
                                var $2839 = self.idx;
                                var $2840 = self.code;
                                var $2841 = self.val;
                                var self = Kind$Parser$stop$($2826, $2839, $2840);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2843 = self.idx;
                                        var $2844 = self.code;
                                        var $2845 = self.err;
                                        var $2846 = Parser$Reply$error$($2843, $2844, $2845);
                                        var $2842 = $2846;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2847 = self.idx;
                                        var $2848 = self.code;
                                        var $2849 = self.val;
                                        var $2850 = Parser$Reply$value$($2847, $2848, List$fold$($2841, Kind$Term$ori$($2849, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")), Kind$Term$hol$(Bits$e))), (_x$15 => _xs$16 => {
                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));
                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);
                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);
                                            var $2851 = Kind$Term$ori$($2849, _term$20);
                                            return $2851;
                                        })));
                                        var $2842 = $2850;
                                        break;
                                };
                                var $2834 = $2842;
                                break;
                        };
                        var $2827 = $2834;
                        break;
                };
                var $2819 = $2827;
                break;
        };
        return $2819;
    };
    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);

    function Kind$Parser$map$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2853 = self.idx;
                var $2854 = self.code;
                var $2855 = self.err;
                var $2856 = Parser$Reply$error$($2853, $2854, $2855);
                var $2852 = $2856;
                break;
            case 'Parser.Reply.value':
                var $2857 = self.idx;
                var $2858 = self.code;
                var $2859 = self.val;
                var self = Kind$Parser$text$("{", $2857, $2858);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2861 = self.idx;
                        var $2862 = self.code;
                        var $2863 = self.err;
                        var $2864 = Parser$Reply$error$($2861, $2862, $2863);
                        var $2860 = $2864;
                        break;
                    case 'Parser.Reply.value':
                        var $2865 = self.idx;
                        var $2866 = self.code;
                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item((_idx$9 => _code$10 => {
                            var self = Kind$Parser$term$(_idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2869 = self.idx;
                                    var $2870 = self.code;
                                    var $2871 = self.err;
                                    var $2872 = Parser$Reply$error$($2869, $2870, $2871);
                                    var $2868 = $2872;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2873 = self.idx;
                                    var $2874 = self.code;
                                    var $2875 = self.val;
                                    var self = Kind$Parser$text$(":", $2873, $2874);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2877 = self.idx;
                                            var $2878 = self.code;
                                            var $2879 = self.err;
                                            var $2880 = Parser$Reply$error$($2877, $2878, $2879);
                                            var $2876 = $2880;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2881 = self.idx;
                                            var $2882 = self.code;
                                            var self = Kind$Parser$term$($2881, $2882);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2884 = self.idx;
                                                    var $2885 = self.code;
                                                    var $2886 = self.err;
                                                    var $2887 = Parser$Reply$error$($2884, $2885, $2886);
                                                    var $2883 = $2887;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2888 = self.idx;
                                                    var $2889 = self.code;
                                                    var $2890 = self.val;
                                                    var $2891 = Parser$Reply$value$($2888, $2889, Pair$new$($2875, $2890));
                                                    var $2883 = $2891;
                                                    break;
                                            };
                                            var $2876 = $2883;
                                            break;
                                    };
                                    var $2868 = $2876;
                                    break;
                            };
                            return $2868;
                        })))($2865)($2866);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2892 = self.idx;
                                var $2893 = self.code;
                                var $2894 = self.err;
                                var $2895 = Parser$Reply$error$($2892, $2893, $2894);
                                var $2867 = $2895;
                                break;
                            case 'Parser.Reply.value':
                                var $2896 = self.idx;
                                var $2897 = self.code;
                                var $2898 = self.val;
                                var self = Kind$Parser$stop$($2859, $2896, $2897);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2900 = self.idx;
                                        var $2901 = self.code;
                                        var $2902 = self.err;
                                        var $2903 = Parser$Reply$error$($2900, $2901, $2902);
                                        var $2899 = $2903;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2904 = self.idx;
                                        var $2905 = self.code;
                                        var $2906 = self.val;
                                        var _list$15 = List$fold$($2898, Kind$Term$ori$($2906, Kind$Term$app$(Kind$Term$ref$("List.nil"), Kind$Term$hol$(Bits$e))), (_kv$15 => _xs$16 => {
                                            var self = _kv$15;
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $2909 = self.fst;
                                                    var $2910 = self.snd;
                                                    var _pair$19 = Kind$Term$ref$("Pair.new");
                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));
                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));
                                                    var _pair$22 = Kind$Term$app$(_pair$21, $2909);
                                                    var _pair$23 = Kind$Term$app$(_pair$22, $2910);
                                                    var _term$24 = Kind$Term$ref$("List.cons");
                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);
                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);
                                                    var $2911 = Kind$Term$ori$($2906, _term$27);
                                                    var $2908 = $2911;
                                                    break;
                                            };
                                            return $2908;
                                        }));
                                        var _term$16 = Kind$Term$ref$("Map.from_list");
                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));
                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);
                                        var $2907 = Parser$Reply$value$($2904, $2905, Kind$Term$ori$($2906, _term$18));
                                        var $2899 = $2907;
                                        break;
                                };
                                var $2867 = $2899;
                                break;
                        };
                        var $2860 = $2867;
                        break;
                };
                var $2852 = $2860;
                break;
        };
        return $2852;
    };
    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);

    function Kind$Parser$log$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2913 = self.idx;
                var $2914 = self.code;
                var $2915 = self.err;
                var $2916 = Parser$Reply$error$($2913, $2914, $2915);
                var $2912 = $2916;
                break;
            case 'Parser.Reply.value':
                var $2917 = self.idx;
                var $2918 = self.code;
                var $2919 = self.val;
                var self = Kind$Parser$text$("log(", $2917, $2918);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2921 = self.idx;
                        var $2922 = self.code;
                        var $2923 = self.err;
                        var $2924 = Parser$Reply$error$($2921, $2922, $2923);
                        var $2920 = $2924;
                        break;
                    case 'Parser.Reply.value':
                        var $2925 = self.idx;
                        var $2926 = self.code;
                        var self = Parser$until$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term))($2925)($2926);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2928 = self.idx;
                                var $2929 = self.code;
                                var $2930 = self.err;
                                var $2931 = Parser$Reply$error$($2928, $2929, $2930);
                                var $2927 = $2931;
                                break;
                            case 'Parser.Reply.value':
                                var $2932 = self.idx;
                                var $2933 = self.code;
                                var $2934 = self.val;
                                var self = Kind$Parser$term$($2932, $2933);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2936 = self.idx;
                                        var $2937 = self.code;
                                        var $2938 = self.err;
                                        var $2939 = Parser$Reply$error$($2936, $2937, $2938);
                                        var $2935 = $2939;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2940 = self.idx;
                                        var $2941 = self.code;
                                        var $2942 = self.val;
                                        var _term$15 = Kind$Term$ref$("Debug.log");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($2934, Kind$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Kind$Term$ref$("String.concat");
                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);
                                            var $2944 = _arg$21;
                                            return $2944;
                                        }));
                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);
                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$("x", (_x$19 => {
                                            var $2945 = $2942;
                                            return $2945;
                                        })));
                                        var self = Kind$Parser$stop$($2919, $2940, $2941);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2946 = self.idx;
                                                var $2947 = self.code;
                                                var $2948 = self.err;
                                                var $2949 = Parser$Reply$error$($2946, $2947, $2948);
                                                var $2943 = $2949;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2950 = self.idx;
                                                var $2951 = self.code;
                                                var $2952 = self.val;
                                                var $2953 = Parser$Reply$value$($2950, $2951, Kind$Term$ori$($2952, _term$19));
                                                var $2943 = $2953;
                                                break;
                                        };
                                        var $2935 = $2943;
                                        break;
                                };
                                var $2927 = $2935;
                                break;
                        };
                        var $2920 = $2927;
                        break;
                };
                var $2912 = $2920;
                break;
        };
        return $2912;
    };
    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);

    function Kind$Parser$do$statements$(_monad_name$1) {
        var $2954 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2956 = self.idx;
                    var $2957 = self.code;
                    var $2958 = self.err;
                    var $2959 = Parser$Reply$error$($2956, $2957, $2958);
                    var $2955 = $2959;
                    break;
                case 'Parser.Reply.value':
                    var $2960 = self.idx;
                    var $2961 = self.code;
                    var $2962 = self.val;
                    var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "), List$cons$(Kind$Parser$text("get "), List$nil)))($2960)($2961);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2964 = self.idx;
                            var $2965 = self.code;
                            var $2966 = self.err;
                            var $2967 = Parser$Reply$error$($2964, $2965, $2966);
                            var $2963 = $2967;
                            break;
                        case 'Parser.Reply.value':
                            var $2968 = self.idx;
                            var $2969 = self.code;
                            var self = Kind$Parser$name1$($2968, $2969);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2971 = self.idx;
                                    var $2972 = self.code;
                                    var $2973 = self.err;
                                    var $2974 = Parser$Reply$error$($2971, $2972, $2973);
                                    var $2970 = $2974;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2975 = self.idx;
                                    var $2976 = self.code;
                                    var $2977 = self.val;
                                    var self = Kind$Parser$text$("=", $2975, $2976);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2979 = self.idx;
                                            var $2980 = self.code;
                                            var $2981 = self.err;
                                            var $2982 = Parser$Reply$error$($2979, $2980, $2981);
                                            var $2978 = $2982;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2983 = self.idx;
                                            var $2984 = self.code;
                                            var self = Kind$Parser$term$($2983, $2984);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2986 = self.idx;
                                                    var $2987 = self.code;
                                                    var $2988 = self.err;
                                                    var $2989 = Parser$Reply$error$($2986, $2987, $2988);
                                                    var $2985 = $2989;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2990 = self.idx;
                                                    var $2991 = self.code;
                                                    var $2992 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $2990, $2991);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2994 = self.idx;
                                                            var $2995 = self.code;
                                                            var $2996 = self.err;
                                                            var $2997 = Parser$Reply$error$($2994, $2995, $2996);
                                                            var $2993 = $2997;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2998 = self.idx;
                                                            var $2999 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($2998)($2999);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3001 = self.idx;
                                                                    var $3002 = self.code;
                                                                    var $3003 = self.err;
                                                                    var $3004 = Parser$Reply$error$($3001, $3002, $3003);
                                                                    var $3000 = $3004;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3005 = self.idx;
                                                                    var $3006 = self.code;
                                                                    var $3007 = self.val;
                                                                    var self = Kind$Parser$stop$($2962, $3005, $3006);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3009 = self.idx;
                                                                            var $3010 = self.code;
                                                                            var $3011 = self.err;
                                                                            var $3012 = Parser$Reply$error$($3009, $3010, $3011);
                                                                            var $3008 = $3012;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3013 = self.idx;
                                                                            var $3014 = self.code;
                                                                            var $3015 = self.val;
                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                            var _term$32 = Kind$Term$app$(_term$31, $2992);
                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($2977, (_x$33 => {
                                                                                var $3017 = $3007;
                                                                                return $3017;
                                                                            })));
                                                                            var $3016 = Parser$Reply$value$($3013, $3014, Kind$Term$ori$($3015, _term$33));
                                                                            var $3008 = $3016;
                                                                            break;
                                                                    };
                                                                    var $3000 = $3008;
                                                                    break;
                                                            };
                                                            var $2993 = $3000;
                                                            break;
                                                    };
                                                    var $2985 = $2993;
                                                    break;
                                            };
                                            var $2978 = $2985;
                                            break;
                                    };
                                    var $2970 = $2978;
                                    break;
                            };
                            var $2963 = $2970;
                            break;
                    };
                    var $2955 = $2963;
                    break;
            };
            return $2955;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3019 = self.idx;
                    var $3020 = self.code;
                    var $3021 = self.err;
                    var $3022 = Parser$Reply$error$($3019, $3020, $3021);
                    var $3018 = $3022;
                    break;
                case 'Parser.Reply.value':
                    var $3023 = self.idx;
                    var $3024 = self.code;
                    var $3025 = self.val;
                    var self = Kind$Parser$text$("let ", $3023, $3024);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3027 = self.idx;
                            var $3028 = self.code;
                            var $3029 = self.err;
                            var $3030 = Parser$Reply$error$($3027, $3028, $3029);
                            var $3026 = $3030;
                            break;
                        case 'Parser.Reply.value':
                            var $3031 = self.idx;
                            var $3032 = self.code;
                            var self = Kind$Parser$name1$($3031, $3032);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3034 = self.idx;
                                    var $3035 = self.code;
                                    var $3036 = self.err;
                                    var $3037 = Parser$Reply$error$($3034, $3035, $3036);
                                    var $3033 = $3037;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3038 = self.idx;
                                    var $3039 = self.code;
                                    var $3040 = self.val;
                                    var self = Kind$Parser$text$("=", $3038, $3039);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3042 = self.idx;
                                            var $3043 = self.code;
                                            var $3044 = self.err;
                                            var $3045 = Parser$Reply$error$($3042, $3043, $3044);
                                            var $3041 = $3045;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3046 = self.idx;
                                            var $3047 = self.code;
                                            var self = Kind$Parser$term$($3046, $3047);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3049 = self.idx;
                                                    var $3050 = self.code;
                                                    var $3051 = self.err;
                                                    var $3052 = Parser$Reply$error$($3049, $3050, $3051);
                                                    var $3048 = $3052;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3053 = self.idx;
                                                    var $3054 = self.code;
                                                    var $3055 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3053, $3054);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3057 = self.idx;
                                                            var $3058 = self.code;
                                                            var $3059 = self.err;
                                                            var $3060 = Parser$Reply$error$($3057, $3058, $3059);
                                                            var $3056 = $3060;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3061 = self.idx;
                                                            var $3062 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3061)($3062);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3064 = self.idx;
                                                                    var $3065 = self.code;
                                                                    var $3066 = self.err;
                                                                    var $3067 = Parser$Reply$error$($3064, $3065, $3066);
                                                                    var $3063 = $3067;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3068 = self.idx;
                                                                    var $3069 = self.code;
                                                                    var $3070 = self.val;
                                                                    var self = Kind$Parser$stop$($3025, $3068, $3069);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3072 = self.idx;
                                                                            var $3073 = self.code;
                                                                            var $3074 = self.err;
                                                                            var $3075 = Parser$Reply$error$($3072, $3073, $3074);
                                                                            var $3071 = $3075;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3076 = self.idx;
                                                                            var $3077 = self.code;
                                                                            var $3078 = self.val;
                                                                            var $3079 = Parser$Reply$value$($3076, $3077, Kind$Term$ori$($3078, Kind$Term$let$($3040, $3055, (_x$28 => {
                                                                                var $3080 = $3070;
                                                                                return $3080;
                                                                            }))));
                                                                            var $3071 = $3079;
                                                                            break;
                                                                    };
                                                                    var $3063 = $3071;
                                                                    break;
                                                            };
                                                            var $3056 = $3063;
                                                            break;
                                                    };
                                                    var $3048 = $3056;
                                                    break;
                                            };
                                            var $3041 = $3048;
                                            break;
                                    };
                                    var $3033 = $3041;
                                    break;
                            };
                            var $3026 = $3033;
                            break;
                    };
                    var $3018 = $3026;
                    break;
            };
            return $3018;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3082 = self.idx;
                    var $3083 = self.code;
                    var $3084 = self.err;
                    var $3085 = Parser$Reply$error$($3082, $3083, $3084);
                    var $3081 = $3085;
                    break;
                case 'Parser.Reply.value':
                    var $3086 = self.idx;
                    var $3087 = self.code;
                    var $3088 = self.val;
                    var self = Kind$Parser$text$("return ", $3086, $3087);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3090 = self.idx;
                            var $3091 = self.code;
                            var $3092 = self.err;
                            var $3093 = Parser$Reply$error$($3090, $3091, $3092);
                            var $3089 = $3093;
                            break;
                        case 'Parser.Reply.value':
                            var $3094 = self.idx;
                            var $3095 = self.code;
                            var self = Kind$Parser$term$($3094, $3095);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3097 = self.idx;
                                    var $3098 = self.code;
                                    var $3099 = self.err;
                                    var $3100 = Parser$Reply$error$($3097, $3098, $3099);
                                    var $3096 = $3100;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3101 = self.idx;
                                    var $3102 = self.code;
                                    var $3103 = self.val;
                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3101, $3102);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3105 = self.idx;
                                            var $3106 = self.code;
                                            var $3107 = self.err;
                                            var $3108 = Parser$Reply$error$($3105, $3106, $3107);
                                            var $3104 = $3108;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3109 = self.idx;
                                            var $3110 = self.code;
                                            var self = Kind$Parser$stop$($3088, $3109, $3110);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3112 = self.idx;
                                                    var $3113 = self.code;
                                                    var $3114 = self.err;
                                                    var $3115 = Parser$Reply$error$($3112, $3113, $3114);
                                                    var $3111 = $3115;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3116 = self.idx;
                                                    var $3117 = self.code;
                                                    var $3118 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, $3103);
                                                    var $3119 = Parser$Reply$value$($3116, $3117, Kind$Term$ori$($3118, _term$22));
                                                    var $3111 = $3119;
                                                    break;
                                            };
                                            var $3104 = $3111;
                                            break;
                                    };
                                    var $3096 = $3104;
                                    break;
                            };
                            var $3089 = $3096;
                            break;
                    };
                    var $3081 = $3089;
                    break;
            };
            return $3081;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3121 = self.idx;
                    var $3122 = self.code;
                    var $3123 = self.err;
                    var $3124 = Parser$Reply$error$($3121, $3122, $3123);
                    var $3120 = $3124;
                    break;
                case 'Parser.Reply.value':
                    var $3125 = self.idx;
                    var $3126 = self.code;
                    var $3127 = self.val;
                    var self = Kind$Parser$term$($3125, $3126);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3129 = self.idx;
                            var $3130 = self.code;
                            var $3131 = self.err;
                            var $3132 = Parser$Reply$error$($3129, $3130, $3131);
                            var $3128 = $3132;
                            break;
                        case 'Parser.Reply.value':
                            var $3133 = self.idx;
                            var $3134 = self.code;
                            var $3135 = self.val;
                            var self = Parser$maybe$(Kind$Parser$text(";"), $3133, $3134);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3137 = self.idx;
                                    var $3138 = self.code;
                                    var $3139 = self.err;
                                    var $3140 = Parser$Reply$error$($3137, $3138, $3139);
                                    var $3136 = $3140;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3141 = self.idx;
                                    var $3142 = self.code;
                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3141)($3142);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3144 = self.idx;
                                            var $3145 = self.code;
                                            var $3146 = self.err;
                                            var $3147 = Parser$Reply$error$($3144, $3145, $3146);
                                            var $3143 = $3147;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3148 = self.idx;
                                            var $3149 = self.code;
                                            var $3150 = self.val;
                                            var self = Kind$Parser$stop$($3127, $3148, $3149);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3152 = self.idx;
                                                    var $3153 = self.code;
                                                    var $3154 = self.err;
                                                    var $3155 = Parser$Reply$error$($3152, $3153, $3154);
                                                    var $3151 = $3155;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3156 = self.idx;
                                                    var $3157 = self.code;
                                                    var $3158 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));
                                                    var _term$23 = Kind$Term$app$(_term$22, $3135);
                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$("", (_x$24 => {
                                                        var $3160 = $3150;
                                                        return $3160;
                                                    })));
                                                    var $3159 = Parser$Reply$value$($3156, $3157, Kind$Term$ori$($3158, _term$24));
                                                    var $3151 = $3159;
                                                    break;
                                            };
                                            var $3143 = $3151;
                                            break;
                                    };
                                    var $3136 = $3143;
                                    break;
                            };
                            var $3128 = $3136;
                            break;
                    };
                    var $3120 = $3128;
                    break;
            };
            return $3120;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3162 = self.idx;
                    var $3163 = self.code;
                    var $3164 = self.err;
                    var $3165 = Parser$Reply$error$($3162, $3163, $3164);
                    var $3161 = $3165;
                    break;
                case 'Parser.Reply.value':
                    var $3166 = self.idx;
                    var $3167 = self.code;
                    var $3168 = self.val;
                    var self = Parser$maybe$(Kind$Parser$text(";"), $3166, $3167);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3170 = self.idx;
                            var $3171 = self.code;
                            var $3172 = self.err;
                            var $3173 = Parser$Reply$error$($3170, $3171, $3172);
                            var $3169 = $3173;
                            break;
                        case 'Parser.Reply.value':
                            var $3174 = self.idx;
                            var $3175 = self.code;
                            var $3176 = Parser$Reply$value$($3174, $3175, $3168);
                            var $3169 = $3176;
                            break;
                    };
                    var $3161 = $3169;
                    break;
            };
            return $3161;
        }), List$nil))))));
        return $2954;
    };
    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);

    function Kind$Parser$do$(_idx$1, _code$2) {
        var self = Parser$maybe$(Kind$Parser$text("do "), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3178 = self.idx;
                var $3179 = self.code;
                var $3180 = self.err;
                var $3181 = Parser$Reply$error$($3178, $3179, $3180);
                var $3177 = $3181;
                break;
            case 'Parser.Reply.value':
                var $3182 = self.idx;
                var $3183 = self.code;
                var self = Kind$Parser$name1$($3182, $3183);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3185 = self.idx;
                        var $3186 = self.code;
                        var $3187 = self.err;
                        var $3188 = Parser$Reply$error$($3185, $3186, $3187);
                        var $3184 = $3188;
                        break;
                    case 'Parser.Reply.value':
                        var $3189 = self.idx;
                        var $3190 = self.code;
                        var $3191 = self.val;
                        var self = Parser$text$(" {", $3189, $3190);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3193 = self.idx;
                                var $3194 = self.code;
                                var $3195 = self.err;
                                var $3196 = Parser$Reply$error$($3193, $3194, $3195);
                                var $3192 = $3196;
                                break;
                            case 'Parser.Reply.value':
                                var $3197 = self.idx;
                                var $3198 = self.code;
                                var self = Kind$Parser$do$statements$($3191)($3197)($3198);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3200 = self.idx;
                                        var $3201 = self.code;
                                        var $3202 = self.err;
                                        var $3203 = Parser$Reply$error$($3200, $3201, $3202);
                                        var $3199 = $3203;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3204 = self.idx;
                                        var $3205 = self.code;
                                        var $3206 = self.val;
                                        var self = Kind$Parser$text$("}", $3204, $3205);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3208 = self.idx;
                                                var $3209 = self.code;
                                                var $3210 = self.err;
                                                var $3211 = Parser$Reply$error$($3208, $3209, $3210);
                                                var $3207 = $3211;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3212 = self.idx;
                                                var $3213 = self.code;
                                                var $3214 = Parser$Reply$value$($3212, $3213, $3206);
                                                var $3207 = $3214;
                                                break;
                                        };
                                        var $3199 = $3207;
                                        break;
                                };
                                var $3192 = $3199;
                                break;
                        };
                        var $3184 = $3192;
                        break;
                };
                var $3177 = $3184;
                break;
        };
        return $3177;
    };
    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);

    function Parser$try$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3216 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);
                var $3215 = $3216;
                break;
            case 'Parser.Reply.value':
                var $3217 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);
                var $3215 = $3217;
                break;
        };
        return $3215;
    };
    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3218 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3218;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {
        var self = Parser$try$(_test$2, _idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3220 = self.idx;
                var $3221 = self.code;
                var $3222 = self.err;
                var $3223 = Parser$Reply$error$($3220, $3221, $3222);
                var $3219 = $3223;
                break;
            case 'Parser.Reply.value':
                var $3224 = self.idx;
                var $3225 = self.code;
                var $3226 = self.val;
                var self = $3226;
                if (self) {
                    var $3228 = Parser$fail("Avoided.");
                    var $3227 = $3228;
                } else {
                    var $3229 = _parse$3;
                    var $3227 = $3229;
                };
                var $3227 = $3227($3224)($3225);
                var $3219 = $3227;
                break;
        };
        return $3219;
    };
    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);

    function Maybe$default$(_m$2, _a$3) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $3231 = self.value;
                var $3232 = $3231;
                var $3230 = $3232;
                break;
            case 'Maybe.none':
                var $3233 = _a$3;
                var $3230 = $3233;
                break;
        };
        return $3230;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Kind$Term$nat$(_natx$1) {
        var $3234 = ({
            _: 'Kind.Term.nat',
            'natx': _natx$1
        });
        return $3234;
    };
    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);

    function Kind$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $3236 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));
            var $3235 = $3236;
        } else {
            var $3237 = (self - 1n);
            var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));
            var _argm$4 = Kind$Term$nat$($3237);
            var $3238 = Kind$Term$app$(_func$3, _argm$4);
            var $3235 = $3238;
        };
        return $3235;
    };
    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Kind$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3240 = self.slice(0, -1);
                var $3241 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")), Kind$Term$unroll_chr$bits$($3240));
                var $3239 = $3241;
                break;
            case 'i':
                var $3242 = self.slice(0, -1);
                var $3243 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")), Kind$Term$unroll_chr$bits$($3242));
                var $3239 = $3243;
                break;
            case 'e':
                var $3244 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));
                var $3239 = $3244;
                break;
        };
        return $3239;
    };
    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);

    function Kind$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));
        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));
        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")), _term$5);
        var $3245 = _term$6;
        return $3245;
    };
    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);

    function Kind$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $3247 = Kind$Term$ref$(Kind$Name$read$("String.nil"));
            var $3246 = $3247;
        } else {
            var $3248 = self.charCodeAt(0);
            var $3249 = self.slice(1);
            var _char$4 = Kind$Term$chr$($3248);
            var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));
            var _term$6 = Kind$Term$app$(_term$5, _char$4);
            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($3249));
            var $3250 = _term$7;
            var $3246 = $3250;
        };
        return $3246;
    };
    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);

    function Kind$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $3252 = self.name;
                var self = Kind$Map$get$($3252, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $3254 = self.value;
                        var self = $3254;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $3256 = self.term;
                                var $3257 = Kind$Term$reduce$($3256, _defs$2);
                                var $3255 = $3257;
                                break;
                        };
                        var $3253 = $3255;
                        break;
                    case 'Maybe.none':
                        var $3258 = Kind$Term$ref$($3252);
                        var $3253 = $3258;
                        break;
                };
                var $3251 = $3253;
                break;
            case 'Kind.Term.app':
                var $3259 = self.func;
                var $3260 = self.argm;
                var _func$5 = Kind$Term$reduce$($3259, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $3262 = self.body;
                        var $3263 = Kind$Term$reduce$($3262($3260), _defs$2);
                        var $3261 = $3263;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $3264 = _term$1;
                        var $3261 = $3264;
                        break;
                };
                var $3251 = $3261;
                break;
            case 'Kind.Term.let':
                var $3265 = self.expr;
                var $3266 = self.body;
                var $3267 = Kind$Term$reduce$($3266($3265), _defs$2);
                var $3251 = $3267;
                break;
            case 'Kind.Term.def':
                var $3268 = self.expr;
                var $3269 = self.body;
                var $3270 = Kind$Term$reduce$($3269($3268), _defs$2);
                var $3251 = $3270;
                break;
            case 'Kind.Term.ann':
                var $3271 = self.term;
                var $3272 = Kind$Term$reduce$($3271, _defs$2);
                var $3251 = $3272;
                break;
            case 'Kind.Term.nat':
                var $3273 = self.natx;
                var $3274 = Kind$Term$reduce$(Kind$Term$unroll_nat$($3273), _defs$2);
                var $3251 = $3274;
                break;
            case 'Kind.Term.chr':
                var $3275 = self.chrx;
                var $3276 = Kind$Term$reduce$(Kind$Term$unroll_chr$($3275), _defs$2);
                var $3251 = $3276;
                break;
            case 'Kind.Term.str':
                var $3277 = self.strx;
                var $3278 = Kind$Term$reduce$(Kind$Term$unroll_str$($3277), _defs$2);
                var $3251 = $3278;
                break;
            case 'Kind.Term.ori':
                var $3279 = self.expr;
                var $3280 = Kind$Term$reduce$($3279, _defs$2);
                var $3251 = $3280;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.cse':
                var $3281 = _term$1;
                var $3251 = $3281;
                break;
        };
        return $3251;
    };
    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);
    const BitsMap$new = ({
        _: 'BitsMap.new'
    });
    const Kind$Map$new = BitsMap$new;

    function Kind$Term$extract_name$(_term$1) {
        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
                var $3283 = self.name;
                var $3284 = $3283;
                var $3282 = $3284;
                break;
            case 'Kind.Term.ref':
                var $3285 = self.name;
                var $3286 = $3285;
                var $3282 = $3286;
                break;
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $3287 = "self";
                var $3282 = $3287;
                break;
        };
        return $3282;
    };
    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);

    function Kind$Ann$new$(_name$1, _term$2, _type$3) {
        var $3288 = ({
            _: 'Kind.Ann.new',
            'name': _name$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3288;
    };
    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);
    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {
        var self = Kind$Parser$text$("with ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3290 = self.idx;
                var $3291 = self.code;
                var $3292 = self.err;
                var $3293 = Parser$Reply$error$($3290, $3291, $3292);
                var $3289 = $3293;
                break;
            case 'Parser.Reply.value':
                var $3294 = self.idx;
                var $3295 = self.code;
                var $3296 = Parser$many$((_idx$6 => _code$7 => {
                    var self = Kind$Parser$name1$(_idx$6, _code$7);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3298 = self.idx;
                            var $3299 = self.code;
                            var $3300 = self.err;
                            var $3301 = Parser$Reply$error$($3298, $3299, $3300);
                            var $3297 = $3301;
                            break;
                        case 'Parser.Reply.value':
                            var $3302 = self.idx;
                            var $3303 = self.code;
                            var $3304 = self.val;
                            var self = Parser$maybe$((_idx$11 => _code$12 => {
                                var self = Kind$Parser$text$(":", _idx$11, _code$12);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3307 = self.idx;
                                        var $3308 = self.code;
                                        var $3309 = self.err;
                                        var $3310 = Parser$Reply$error$($3307, $3308, $3309);
                                        var $3306 = $3310;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3311 = self.idx;
                                        var $3312 = self.code;
                                        var self = Kind$Parser$term$($3311, $3312);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3314 = self.idx;
                                                var $3315 = self.code;
                                                var $3316 = self.err;
                                                var $3317 = Parser$Reply$error$($3314, $3315, $3316);
                                                var $3313 = $3317;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3318 = self.idx;
                                                var $3319 = self.code;
                                                var $3320 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3318, $3319);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3322 = self.idx;
                                                        var $3323 = self.code;
                                                        var $3324 = self.err;
                                                        var $3325 = Parser$Reply$error$($3322, $3323, $3324);
                                                        var $3321 = $3325;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3326 = self.idx;
                                                        var $3327 = self.code;
                                                        var $3328 = Parser$Reply$value$($3326, $3327, $3320);
                                                        var $3321 = $3328;
                                                        break;
                                                };
                                                var $3313 = $3321;
                                                break;
                                        };
                                        var $3306 = $3313;
                                        break;
                                };
                                return $3306;
                            }), $3302, $3303);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3329 = self.idx;
                                    var $3330 = self.code;
                                    var $3331 = self.err;
                                    var $3332 = Parser$Reply$error$($3329, $3330, $3331);
                                    var $3305 = $3332;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3333 = self.idx;
                                    var $3334 = self.code;
                                    var $3335 = self.val;
                                    var $3336 = Parser$Reply$value$($3333, $3334, Kind$Ann$new$($3304, Kind$Term$ref$($3304), $3335));
                                    var $3305 = $3336;
                                    break;
                            };
                            var $3297 = $3305;
                            break;
                    };
                    return $3297;
                }))($3294)($3295);
                var $3289 = $3296;
                break;
        };
        return $3289;
    }), List$cons$((_idx$1 => _code$2 => {
        var $3337 = Parser$Reply$value$(_idx$1, _code$2, List$nil);
        return $3337;
    }), List$nil)));

    function Kind$Parser$case$case$(_idx$1, _code$2) {
        var self = Parser$until$(Kind$Parser$text(":"), Kind$Parser$name1)(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3339 = self.idx;
                var $3340 = self.code;
                var $3341 = self.err;
                var $3342 = Parser$Reply$error$($3339, $3340, $3341);
                var $3338 = $3342;
                break;
            case 'Parser.Reply.value':
                var $3343 = self.idx;
                var $3344 = self.code;
                var $3345 = self.val;
                var self = Kind$Parser$term$($3343, $3344);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3347 = self.idx;
                        var $3348 = self.code;
                        var $3349 = self.err;
                        var $3350 = Parser$Reply$error$($3347, $3348, $3349);
                        var $3346 = $3350;
                        break;
                    case 'Parser.Reply.value':
                        var $3351 = self.idx;
                        var $3352 = self.code;
                        var $3353 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $3351, $3352);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3355 = self.idx;
                                var $3356 = self.code;
                                var $3357 = self.err;
                                var $3358 = Parser$Reply$error$($3355, $3356, $3357);
                                var $3354 = $3358;
                                break;
                            case 'Parser.Reply.value':
                                var $3359 = self.idx;
                                var $3360 = self.code;
                                var $3361 = Parser$Reply$value$($3359, $3360, Pair$new$($3345, $3353));
                                var $3354 = $3361;
                                break;
                        };
                        var $3346 = $3354;
                        break;
                };
                var $3338 = $3346;
                break;
        };
        return $3338;
    };
    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);
    const Debug$log = a0 => a1 => ((console.log(a0), a1()));

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $3363 = self.snd;
                var $3364 = $3363;
                var $3362 = $3364;
                break;
        };
        return $3362;
    };
    const Pair$snd = x0 => Pair$snd$(x0);
    const Kind$Map = null;

    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {
        var $3365 = ({
            _: 'BitsMap.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $3365;
    };
    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);

    function BitsMap$set$(_bits$2, _val$3, _map$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3367 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3369 = self.val;
                        var $3370 = self.lft;
                        var $3371 = self.rgt;
                        var $3372 = BitsMap$tie$($3369, BitsMap$set$($3367, _val$3, $3370), $3371);
                        var $3368 = $3372;
                        break;
                    case 'BitsMap.new':
                        var $3373 = BitsMap$tie$(Maybe$none, BitsMap$set$($3367, _val$3, BitsMap$new), BitsMap$new);
                        var $3368 = $3373;
                        break;
                };
                var $3366 = $3368;
                break;
            case 'i':
                var $3374 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3376 = self.val;
                        var $3377 = self.lft;
                        var $3378 = self.rgt;
                        var $3379 = BitsMap$tie$($3376, $3377, BitsMap$set$($3374, _val$3, $3378));
                        var $3375 = $3379;
                        break;
                    case 'BitsMap.new':
                        var $3380 = BitsMap$tie$(Maybe$none, BitsMap$new, BitsMap$set$($3374, _val$3, BitsMap$new));
                        var $3375 = $3380;
                        break;
                };
                var $3366 = $3375;
                break;
            case 'e':
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3382 = self.lft;
                        var $3383 = self.rgt;
                        var $3384 = BitsMap$tie$(Maybe$some$(_val$3), $3382, $3383);
                        var $3381 = $3384;
                        break;
                    case 'BitsMap.new':
                        var $3385 = BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new);
                        var $3381 = $3385;
                        break;
                };
                var $3366 = $3381;
                break;
        };
        return $3366;
    };
    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);

    function Kind$Map$set$(_name$2, _val$3, _map$4) {
        var $3386 = BitsMap$set$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $3386;
    };
    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);

    function Kind$Parser$case$group$(_dflt$1, _cses$2) {
        var self = _cses$2;
        switch (self._) {
            case 'List.cons':
                var $3388 = self.head;
                var $3389 = self.tail;
                var _map$5 = Kind$Parser$case$group$(_dflt$1, $3389);
                var self = $3388;
                switch (self._) {
                    case 'Pair.new':
                        var $3391 = self.fst;
                        var $3392 = self.snd;
                        var self = $3391;
                        switch (self._) {
                            case 'List.cons':
                                var $3394 = self.head;
                                var $3395 = self.tail;
                                var _rest$10 = Maybe$default$(Kind$Map$get$($3394, _map$5), List$nil);
                                var $3396 = Kind$Map$set$($3394, List$cons$(Pair$new$($3395, $3392), _rest$10), _map$5);
                                var $3393 = $3396;
                                break;
                            case 'List.nil':
                                var $3397 = _map$5;
                                var $3393 = $3397;
                                break;
                        };
                        var $3390 = $3393;
                        break;
                };
                var $3387 = $3390;
                break;
            case 'List.nil':
                var self = _dflt$1;
                switch (self._) {
                    case 'Maybe.some':
                        var $3399 = self.value;
                        var $3400 = Kind$Map$set$("_", List$cons$(Pair$new$(List$nil, $3399), List$nil), Kind$Map$new);
                        var $3398 = $3400;
                        break;
                    case 'Maybe.none':
                        var $3401 = Kind$Map$new;
                        var $3398 = $3401;
                        break;
                };
                var $3387 = $3398;
                break;
        };
        return $3387;
    };
    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $3403 = self.fst;
                var $3404 = $3403;
                var $3402 = $3404;
                break;
        };
        return $3402;
    };
    const Pair$fst = x0 => Pair$fst$(x0);

    function BitsMap$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'BitsMap.tie':
                var $3406 = self.val;
                var $3407 = self.lft;
                var $3408 = self.rgt;
                var self = $3406;
                switch (self._) {
                    case 'Maybe.some':
                        var $3410 = self.value;
                        var $3411 = Maybe$some$(_fn$3($3410));
                        var _val$8 = $3411;
                        break;
                    case 'Maybe.none':
                        var $3412 = Maybe$none;
                        var _val$8 = $3412;
                        break;
                };
                var _lft$9 = BitsMap$map$(_fn$3, $3407);
                var _rgt$10 = BitsMap$map$(_fn$3, $3408);
                var $3409 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);
                var $3405 = $3409;
                break;
            case 'BitsMap.new':
                var $3413 = BitsMap$new;
                var $3405 = $3413;
                break;
        };
        return $3405;
    };
    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);

    function Kind$Map$map$(_fn$3, _map$4) {
        var $3414 = BitsMap$map$(_fn$3, _map$4);
        return $3414;
    };
    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);

    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $3415 = ({
            _: 'Kind.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $3415;
    };
    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {
        var self = _vals$1;
        switch (self._) {
            case 'List.cons':
                var $3417 = self.head;
                var $3418 = self.tail;
                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);
                var _name$10 = Pair$fst$($3417);
                var _expr$11 = Pair$snd$($3417);
                var _cses$12 = Kind$Map$map$((_cses$12 => {
                    var $3420 = Kind$Parser$case$build$($3418, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);
                    return $3420;
                }), _group$9);
                var $3419 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));
                var $3416 = $3419;
                break;
            case 'List.nil':
                var self = _cses$3;
                switch (self._) {
                    case 'List.cons':
                        var $3422 = self.head;
                        var $3423 = Pair$snd$($3422);
                        var $3421 = $3423;
                        break;
                    case 'List.nil':
                        var $3424 = ((console.log(("MISSING CASE" + String$nil)), (_x$7 => {
                            var $3425 = Kind$Term$ref$("missing_case");
                            return $3425;
                        })()));
                        var $3421 = $3424;
                        break;
                };
                var $3416 = $3421;
                break;
        };
        return $3416;
    };
    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3427 = self.idx;
                var $3428 = self.code;
                var $3429 = self.err;
                var $3430 = Parser$Reply$error$($3427, $3428, $3429);
                var $3426 = $3430;
                break;
            case 'Parser.Reply.value':
                var $3431 = self.idx;
                var $3432 = self.code;
                var $3433 = self.val;
                var self = Kind$Parser$text$("case ", $3431, $3432);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3435 = self.idx;
                        var $3436 = self.code;
                        var $3437 = self.err;
                        var $3438 = Parser$Reply$error$($3435, $3436, $3437);
                        var $3434 = $3438;
                        break;
                    case 'Parser.Reply.value':
                        var $3439 = self.idx;
                        var $3440 = self.code;
                        var self = Parser$many1$((_idx$9 => _code$10 => {
                            var self = Parser$avoiding$(Kind$Parser$text("{"), Kind$Parser$term, _idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3443 = self.idx;
                                    var $3444 = self.code;
                                    var $3445 = self.err;
                                    var $3446 = Parser$Reply$error$($3443, $3444, $3445);
                                    var $3442 = $3446;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3447 = self.idx;
                                    var $3448 = self.code;
                                    var $3449 = self.val;
                                    var self = Parser$maybe$((_idx$14 => _code$15 => {
                                        var self = Kind$Parser$text$("as", _idx$14, _code$15);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3452 = self.idx;
                                                var $3453 = self.code;
                                                var $3454 = self.err;
                                                var $3455 = Parser$Reply$error$($3452, $3453, $3454);
                                                var $3451 = $3455;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3456 = self.idx;
                                                var $3457 = self.code;
                                                var self = Kind$Parser$name1$($3456, $3457);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3459 = self.idx;
                                                        var $3460 = self.code;
                                                        var $3461 = self.err;
                                                        var $3462 = Parser$Reply$error$($3459, $3460, $3461);
                                                        var $3458 = $3462;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3463 = self.idx;
                                                        var $3464 = self.code;
                                                        var $3465 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $3463, $3464);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3467 = self.idx;
                                                                var $3468 = self.code;
                                                                var $3469 = self.err;
                                                                var $3470 = Parser$Reply$error$($3467, $3468, $3469);
                                                                var $3466 = $3470;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3471 = self.idx;
                                                                var $3472 = self.code;
                                                                var $3473 = Parser$Reply$value$($3471, $3472, $3465);
                                                                var $3466 = $3473;
                                                                break;
                                                        };
                                                        var $3458 = $3466;
                                                        break;
                                                };
                                                var $3451 = $3458;
                                                break;
                                        };
                                        return $3451;
                                    }), $3447, $3448);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3474 = self.idx;
                                            var $3475 = self.code;
                                            var $3476 = self.err;
                                            var $3477 = Parser$Reply$error$($3474, $3475, $3476);
                                            var $3450 = $3477;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3478 = self.idx;
                                            var $3479 = self.code;
                                            var $3480 = self.val;
                                            var _name$17 = Maybe$default$($3480, Kind$Term$extract_name$($3449));
                                            var $3481 = Parser$Reply$value$($3478, $3479, Pair$new$(_name$17, $3449));
                                            var $3450 = $3481;
                                            break;
                                    };
                                    var $3442 = $3450;
                                    break;
                            };
                            return $3442;
                        }), $3439, $3440);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3482 = self.idx;
                                var $3483 = self.code;
                                var $3484 = self.err;
                                var $3485 = Parser$Reply$error$($3482, $3483, $3484);
                                var $3441 = $3485;
                                break;
                            case 'Parser.Reply.value':
                                var $3486 = self.idx;
                                var $3487 = self.code;
                                var $3488 = self.val;
                                var self = Kind$Parser$case$with($3486)($3487);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3490 = self.idx;
                                        var $3491 = self.code;
                                        var $3492 = self.err;
                                        var $3493 = Parser$Reply$error$($3490, $3491, $3492);
                                        var $3489 = $3493;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3494 = self.idx;
                                        var $3495 = self.code;
                                        var $3496 = self.val;
                                        var self = Kind$Parser$text$("{", $3494, $3495);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3498 = self.idx;
                                                var $3499 = self.code;
                                                var $3500 = self.err;
                                                var $3501 = Parser$Reply$error$($3498, $3499, $3500);
                                                var $3497 = $3501;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3502 = self.idx;
                                                var $3503 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$case$case)($3502)($3503);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3505 = self.idx;
                                                        var $3506 = self.code;
                                                        var $3507 = self.err;
                                                        var $3508 = Parser$Reply$error$($3505, $3506, $3507);
                                                        var $3504 = $3508;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3509 = self.idx;
                                                        var $3510 = self.code;
                                                        var $3511 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text("!"), $3509, $3510);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3513 = self.idx;
                                                                var $3514 = self.code;
                                                                var $3515 = self.err;
                                                                var $3516 = Parser$Reply$error$($3513, $3514, $3515);
                                                                var $3512 = $3516;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3517 = self.idx;
                                                                var $3518 = self.code;
                                                                var $3519 = self.val;
                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {
                                                                    var self = Kind$Parser$text$("default ", _idx$24, _code$25);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3522 = self.idx;
                                                                            var $3523 = self.code;
                                                                            var $3524 = self.err;
                                                                            var $3525 = Parser$Reply$error$($3522, $3523, $3524);
                                                                            var $3521 = $3525;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3526 = self.idx;
                                                                            var $3527 = self.code;
                                                                            var self = Kind$Parser$term$($3526, $3527);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $3529 = self.idx;
                                                                                    var $3530 = self.code;
                                                                                    var $3531 = self.err;
                                                                                    var $3532 = Parser$Reply$error$($3529, $3530, $3531);
                                                                                    var $3528 = $3532;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $3533 = self.idx;
                                                                                    var $3534 = self.code;
                                                                                    var $3535 = self.val;
                                                                                    var $3536 = Parser$Reply$value$($3533, $3534, $3535);
                                                                                    var $3528 = $3536;
                                                                                    break;
                                                                            };
                                                                            var $3521 = $3528;
                                                                            break;
                                                                    };
                                                                    return $3521;
                                                                }), $3517, $3518);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3537 = self.idx;
                                                                        var $3538 = self.code;
                                                                        var $3539 = self.err;
                                                                        var $3540 = Parser$Reply$error$($3537, $3538, $3539);
                                                                        var $3520 = $3540;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3541 = self.idx;
                                                                        var $3542 = self.code;
                                                                        var $3543 = self.val;
                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {
                                                                            var self = Kind$Parser$text$(":", _idx$27, _code$28);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $3546 = self.idx;
                                                                                    var $3547 = self.code;
                                                                                    var $3548 = self.err;
                                                                                    var $3549 = Parser$Reply$error$($3546, $3547, $3548);
                                                                                    var $3545 = $3549;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $3550 = self.idx;
                                                                                    var $3551 = self.code;
                                                                                    var $3552 = Kind$Parser$term$($3550, $3551);
                                                                                    var $3545 = $3552;
                                                                                    break;
                                                                            };
                                                                            return $3545;
                                                                        }), $3541, $3542);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $3553 = self.idx;
                                                                                var $3554 = self.code;
                                                                                var $3555 = self.err;
                                                                                var $3556 = Parser$Reply$error$($3553, $3554, $3555);
                                                                                var $3544 = $3556;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $3557 = self.idx;
                                                                                var $3558 = self.code;
                                                                                var $3559 = self.val;
                                                                                var self = $3559;
                                                                                switch (self._) {
                                                                                    case 'Maybe.some':
                                                                                        var $3561 = self.value;
                                                                                        var $3562 = Maybe$some$($3561);
                                                                                        var _moti$30 = $3562;
                                                                                        break;
                                                                                    case 'Maybe.none':
                                                                                        var self = $3519;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.none':
                                                                                                var $3564 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                                                var $3563 = $3564;
                                                                                                break;
                                                                                            case 'Maybe.some':
                                                                                                var $3565 = Maybe$none;
                                                                                                var $3563 = $3565;
                                                                                                break;
                                                                                        };
                                                                                        var _moti$30 = $3563;
                                                                                        break;
                                                                                };
                                                                                var self = Kind$Parser$stop$($3433, $3557, $3558);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $3566 = self.idx;
                                                                                        var $3567 = self.code;
                                                                                        var $3568 = self.err;
                                                                                        var $3569 = Parser$Reply$error$($3566, $3567, $3568);
                                                                                        var $3560 = $3569;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $3570 = self.idx;
                                                                                        var $3571 = self.code;
                                                                                        var $3572 = self.val;
                                                                                        var $3573 = Parser$Reply$value$($3570, $3571, Kind$Parser$case$build$($3488, $3496, $3511, $3543, _moti$30, $3572));
                                                                                        var $3560 = $3573;
                                                                                        break;
                                                                                };
                                                                                var $3544 = $3560;
                                                                                break;
                                                                        };
                                                                        var $3520 = $3544;
                                                                        break;
                                                                };
                                                                var $3512 = $3520;
                                                                break;
                                                        };
                                                        var $3504 = $3512;
                                                        break;
                                                };
                                                var $3497 = $3504;
                                                break;
                                        };
                                        var $3489 = $3497;
                                        break;
                                };
                                var $3441 = $3489;
                                break;
                        };
                        var $3434 = $3441;
                        break;
                };
                var $3426 = $3434;
                break;
        };
        return $3426;
    };
    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);

    function Kind$Parser$open$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3575 = self.idx;
                var $3576 = self.code;
                var $3577 = self.err;
                var $3578 = Parser$Reply$error$($3575, $3576, $3577);
                var $3574 = $3578;
                break;
            case 'Parser.Reply.value':
                var $3579 = self.idx;
                var $3580 = self.code;
                var $3581 = self.val;
                var self = Kind$Parser$text$("open ", $3579, $3580);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3583 = self.idx;
                        var $3584 = self.code;
                        var $3585 = self.err;
                        var $3586 = Parser$Reply$error$($3583, $3584, $3585);
                        var $3582 = $3586;
                        break;
                    case 'Parser.Reply.value':
                        var $3587 = self.idx;
                        var $3588 = self.code;
                        var self = Kind$Parser$spaces($3587)($3588);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3590 = self.idx;
                                var $3591 = self.code;
                                var $3592 = self.err;
                                var $3593 = Parser$Reply$error$($3590, $3591, $3592);
                                var $3589 = $3593;
                                break;
                            case 'Parser.Reply.value':
                                var $3594 = self.idx;
                                var $3595 = self.code;
                                var self = Kind$Parser$term$($3594, $3595);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3597 = self.idx;
                                        var $3598 = self.code;
                                        var $3599 = self.err;
                                        var $3600 = Parser$Reply$error$($3597, $3598, $3599);
                                        var $3596 = $3600;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3601 = self.idx;
                                        var $3602 = self.code;
                                        var $3603 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Kind$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3606 = self.idx;
                                                    var $3607 = self.code;
                                                    var $3608 = self.err;
                                                    var $3609 = Parser$Reply$error$($3606, $3607, $3608);
                                                    var $3605 = $3609;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3610 = self.idx;
                                                    var $3611 = self.code;
                                                    var $3612 = Kind$Parser$name1$($3610, $3611);
                                                    var $3605 = $3612;
                                                    break;
                                            };
                                            return $3605;
                                        }), $3601, $3602);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3613 = self.idx;
                                                var $3614 = self.code;
                                                var $3615 = self.err;
                                                var $3616 = Parser$Reply$error$($3613, $3614, $3615);
                                                var $3604 = $3616;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3617 = self.idx;
                                                var $3618 = self.code;
                                                var $3619 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3617, $3618);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3621 = self.idx;
                                                        var $3622 = self.code;
                                                        var $3623 = self.err;
                                                        var $3624 = Parser$Reply$error$($3621, $3622, $3623);
                                                        var $3620 = $3624;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3625 = self.idx;
                                                        var $3626 = self.code;
                                                        var self = $3619;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $3628 = self.value;
                                                                var $3629 = $3628;
                                                                var _name$21 = $3629;
                                                                break;
                                                            case 'Maybe.none':
                                                                var self = Kind$Term$reduce$($3603, Kind$Map$new);
                                                                switch (self._) {
                                                                    case 'Kind.Term.var':
                                                                        var $3631 = self.name;
                                                                        var $3632 = $3631;
                                                                        var $3630 = $3632;
                                                                        break;
                                                                    case 'Kind.Term.ref':
                                                                        var $3633 = self.name;
                                                                        var $3634 = $3633;
                                                                        var $3630 = $3634;
                                                                        break;
                                                                    case 'Kind.Term.typ':
                                                                    case 'Kind.Term.all':
                                                                    case 'Kind.Term.lam':
                                                                    case 'Kind.Term.app':
                                                                    case 'Kind.Term.let':
                                                                    case 'Kind.Term.def':
                                                                    case 'Kind.Term.ann':
                                                                    case 'Kind.Term.gol':
                                                                    case 'Kind.Term.hol':
                                                                    case 'Kind.Term.nat':
                                                                    case 'Kind.Term.chr':
                                                                    case 'Kind.Term.str':
                                                                    case 'Kind.Term.cse':
                                                                    case 'Kind.Term.ori':
                                                                        var $3635 = Kind$Name$read$("self");
                                                                        var $3630 = $3635;
                                                                        break;
                                                                };
                                                                var _name$21 = $3630;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Kind$Parser$term$($3625, $3626);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3636 = self.idx;
                                                                var $3637 = self.code;
                                                                var $3638 = self.err;
                                                                var $3639 = Parser$Reply$error$($3636, $3637, $3638);
                                                                var $3627 = $3639;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3640 = self.idx;
                                                                var $3641 = self.code;
                                                                var $3642 = self.val;
                                                                var _cses$26 = Kind$Map$set$("_", $3642, Kind$Map$new);
                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                var self = Kind$Parser$stop$($3581, $3640, $3641);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3644 = self.idx;
                                                                        var $3645 = self.code;
                                                                        var $3646 = self.err;
                                                                        var $3647 = Parser$Reply$error$($3644, $3645, $3646);
                                                                        var $3643 = $3647;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3648 = self.idx;
                                                                        var $3649 = self.code;
                                                                        var $3650 = self.val;
                                                                        var $3651 = Parser$Reply$value$($3648, $3649, Kind$Term$ori$($3650, Kind$Term$cse$(Bits$e, $3603, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $3643 = $3651;
                                                                        break;
                                                                };
                                                                var $3627 = $3643;
                                                                break;
                                                        };
                                                        var $3620 = $3627;
                                                        break;
                                                };
                                                var $3604 = $3620;
                                                break;
                                        };
                                        var $3596 = $3604;
                                        break;
                                };
                                var $3589 = $3596;
                                break;
                        };
                        var $3582 = $3589;
                        break;
                };
                var $3574 = $3582;
                break;
        };
        return $3574;
    };
    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);

    function Kind$Parser$without$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3653 = self.idx;
                var $3654 = self.code;
                var $3655 = self.err;
                var $3656 = Parser$Reply$error$($3653, $3654, $3655);
                var $3652 = $3656;
                break;
            case 'Parser.Reply.value':
                var $3657 = self.idx;
                var $3658 = self.code;
                var $3659 = self.val;
                var self = Kind$Parser$text$("without ", $3657, $3658);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3661 = self.idx;
                        var $3662 = self.code;
                        var $3663 = self.err;
                        var $3664 = Parser$Reply$error$($3661, $3662, $3663);
                        var $3660 = $3664;
                        break;
                    case 'Parser.Reply.value':
                        var $3665 = self.idx;
                        var $3666 = self.code;
                        var self = Kind$Parser$name1$($3665, $3666);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3668 = self.idx;
                                var $3669 = self.code;
                                var $3670 = self.err;
                                var $3671 = Parser$Reply$error$($3668, $3669, $3670);
                                var $3667 = $3671;
                                break;
                            case 'Parser.Reply.value':
                                var $3672 = self.idx;
                                var $3673 = self.code;
                                var $3674 = self.val;
                                var self = Kind$Parser$text$(":", $3672, $3673);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3676 = self.idx;
                                        var $3677 = self.code;
                                        var $3678 = self.err;
                                        var $3679 = Parser$Reply$error$($3676, $3677, $3678);
                                        var $3675 = $3679;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3680 = self.idx;
                                        var $3681 = self.code;
                                        var self = Kind$Parser$term$($3680, $3681);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3683 = self.idx;
                                                var $3684 = self.code;
                                                var $3685 = self.err;
                                                var $3686 = Parser$Reply$error$($3683, $3684, $3685);
                                                var $3682 = $3686;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3687 = self.idx;
                                                var $3688 = self.code;
                                                var $3689 = self.val;
                                                var self = Kind$Parser$term$($3687, $3688);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3691 = self.idx;
                                                        var $3692 = self.code;
                                                        var $3693 = self.err;
                                                        var $3694 = Parser$Reply$error$($3691, $3692, $3693);
                                                        var $3690 = $3694;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3695 = self.idx;
                                                        var $3696 = self.code;
                                                        var $3697 = self.val;
                                                        var self = Kind$Parser$stop$($3659, $3695, $3696);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3699 = self.idx;
                                                                var $3700 = self.code;
                                                                var $3701 = self.err;
                                                                var $3702 = Parser$Reply$error$($3699, $3700, $3701);
                                                                var $3698 = $3702;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3703 = self.idx;
                                                                var $3704 = self.code;
                                                                var $3705 = self.val;
                                                                var _term$24 = Kind$Term$ref$($3674);
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$("x", (_x$25 => {
                                                                    var $3707 = Kind$Term$hol$(Bits$e);
                                                                    return $3707;
                                                                })));
                                                                var _term$26 = Kind$Term$app$(_term$25, $3689);
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($3674, (_x$27 => {
                                                                    var $3708 = $3697;
                                                                    return $3708;
                                                                })));
                                                                var $3706 = Parser$Reply$value$($3703, $3704, Kind$Term$ori$($3705, _term$27));
                                                                var $3698 = $3706;
                                                                break;
                                                        };
                                                        var $3690 = $3698;
                                                        break;
                                                };
                                                var $3682 = $3690;
                                                break;
                                        };
                                        var $3675 = $3682;
                                        break;
                                };
                                var $3667 = $3675;
                                break;
                        };
                        var $3660 = $3667;
                        break;
                };
                var $3652 = $3660;
                break;
        };
        return $3652;
    };
    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);

    function Kind$Parser$switch$case$(_idx$1, _code$2) {
        var self = Kind$Parser$term$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3710 = self.idx;
                var $3711 = self.code;
                var $3712 = self.err;
                var $3713 = Parser$Reply$error$($3710, $3711, $3712);
                var $3709 = $3713;
                break;
            case 'Parser.Reply.value':
                var $3714 = self.idx;
                var $3715 = self.code;
                var $3716 = self.val;
                var self = Kind$Parser$text$(":", $3714, $3715);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3718 = self.idx;
                        var $3719 = self.code;
                        var $3720 = self.err;
                        var $3721 = Parser$Reply$error$($3718, $3719, $3720);
                        var $3717 = $3721;
                        break;
                    case 'Parser.Reply.value':
                        var $3722 = self.idx;
                        var $3723 = self.code;
                        var self = Kind$Parser$term$($3722, $3723);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3725 = self.idx;
                                var $3726 = self.code;
                                var $3727 = self.err;
                                var $3728 = Parser$Reply$error$($3725, $3726, $3727);
                                var $3724 = $3728;
                                break;
                            case 'Parser.Reply.value':
                                var $3729 = self.idx;
                                var $3730 = self.code;
                                var $3731 = self.val;
                                var $3732 = Parser$Reply$value$($3729, $3730, Pair$new$($3716, $3731));
                                var $3724 = $3732;
                                break;
                        };
                        var $3717 = $3724;
                        break;
                };
                var $3709 = $3717;
                break;
        };
        return $3709;
    };
    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);

    function Kind$Parser$switch$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3734 = self.idx;
                var $3735 = self.code;
                var $3736 = self.err;
                var $3737 = Parser$Reply$error$($3734, $3735, $3736);
                var $3733 = $3737;
                break;
            case 'Parser.Reply.value':
                var $3738 = self.idx;
                var $3739 = self.code;
                var $3740 = self.val;
                var self = Kind$Parser$text$("switch ", $3738, $3739);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3742 = self.idx;
                        var $3743 = self.code;
                        var $3744 = self.err;
                        var $3745 = Parser$Reply$error$($3742, $3743, $3744);
                        var $3741 = $3745;
                        break;
                    case 'Parser.Reply.value':
                        var $3746 = self.idx;
                        var $3747 = self.code;
                        var self = Kind$Parser$term$($3746, $3747);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3749 = self.idx;
                                var $3750 = self.code;
                                var $3751 = self.err;
                                var $3752 = Parser$Reply$error$($3749, $3750, $3751);
                                var $3748 = $3752;
                                break;
                            case 'Parser.Reply.value':
                                var $3753 = self.idx;
                                var $3754 = self.code;
                                var $3755 = self.val;
                                var self = Kind$Parser$text$("{", $3753, $3754);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3757 = self.idx;
                                        var $3758 = self.code;
                                        var $3759 = self.err;
                                        var $3760 = Parser$Reply$error$($3757, $3758, $3759);
                                        var $3756 = $3760;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3761 = self.idx;
                                        var $3762 = self.code;
                                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$switch$case)($3761)($3762);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3764 = self.idx;
                                                var $3765 = self.code;
                                                var $3766 = self.err;
                                                var $3767 = Parser$Reply$error$($3764, $3765, $3766);
                                                var $3763 = $3767;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3768 = self.idx;
                                                var $3769 = self.code;
                                                var $3770 = self.val;
                                                var self = Kind$Parser$text$("default ", $3768, $3769);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3772 = self.idx;
                                                        var $3773 = self.code;
                                                        var $3774 = self.err;
                                                        var $3775 = Parser$Reply$error$($3772, $3773, $3774);
                                                        var $3771 = $3775;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3776 = self.idx;
                                                        var $3777 = self.code;
                                                        var self = Kind$Parser$term$($3776, $3777);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3779 = self.idx;
                                                                var $3780 = self.code;
                                                                var $3781 = self.err;
                                                                var $3782 = Parser$Reply$error$($3779, $3780, $3781);
                                                                var $3778 = $3782;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3783 = self.idx;
                                                                var $3784 = self.code;
                                                                var $3785 = self.val;
                                                                var self = Kind$Parser$stop$($3740, $3783, $3784);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3787 = self.idx;
                                                                        var $3788 = self.code;
                                                                        var $3789 = self.err;
                                                                        var $3790 = Parser$Reply$error$($3787, $3788, $3789);
                                                                        var $3786 = $3790;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3791 = self.idx;
                                                                        var $3792 = self.code;
                                                                        var $3793 = self.val;
                                                                        var _term$27 = List$fold$($3770, $3785, (_cse$27 => _rest$28 => {
                                                                            var self = _cse$27;
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $3796 = self.fst;
                                                                                    var $3797 = self.snd;
                                                                                    var _term$31 = Kind$Term$app$($3755, $3796);
                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$("", (_x$32 => {
                                                                                        var $3799 = Kind$Term$hol$(Bits$e);
                                                                                        return $3799;
                                                                                    })));
                                                                                    var _term$33 = Kind$Term$app$(_term$32, $3797);
                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);
                                                                                    var $3798 = _term$34;
                                                                                    var $3795 = $3798;
                                                                                    break;
                                                                            };
                                                                            return $3795;
                                                                        }));
                                                                        var $3794 = Parser$Reply$value$($3791, $3792, Kind$Term$ori$($3793, _term$27));
                                                                        var $3786 = $3794;
                                                                        break;
                                                                };
                                                                var $3778 = $3786;
                                                                break;
                                                        };
                                                        var $3771 = $3778;
                                                        break;
                                                };
                                                var $3763 = $3771;
                                                break;
                                        };
                                        var $3756 = $3763;
                                        break;
                                };
                                var $3748 = $3756;
                                break;
                        };
                        var $3741 = $3748;
                        break;
                };
                var $3733 = $3741;
                break;
        };
        return $3733;
    };
    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3801 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $3800 = $3801;
        } else {
            var $3802 = self.charCodeAt(0);
            var $3803 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($3802 === 48);
            if (self) {
                var $3805 = Parser$Reply$value$(_sidx$5, $3803, 0n);
                var $3804 = $3805;
            } else {
                var self = ($3802 === 49);
                if (self) {
                    var $3807 = Parser$Reply$value$(_sidx$5, $3803, 1n);
                    var $3806 = $3807;
                } else {
                    var self = ($3802 === 50);
                    if (self) {
                        var $3809 = Parser$Reply$value$(_sidx$5, $3803, 2n);
                        var $3808 = $3809;
                    } else {
                        var self = ($3802 === 51);
                        if (self) {
                            var $3811 = Parser$Reply$value$(_sidx$5, $3803, 3n);
                            var $3810 = $3811;
                        } else {
                            var self = ($3802 === 52);
                            if (self) {
                                var $3813 = Parser$Reply$value$(_sidx$5, $3803, 4n);
                                var $3812 = $3813;
                            } else {
                                var self = ($3802 === 53);
                                if (self) {
                                    var $3815 = Parser$Reply$value$(_sidx$5, $3803, 5n);
                                    var $3814 = $3815;
                                } else {
                                    var self = ($3802 === 54);
                                    if (self) {
                                        var $3817 = Parser$Reply$value$(_sidx$5, $3803, 6n);
                                        var $3816 = $3817;
                                    } else {
                                        var self = ($3802 === 55);
                                        if (self) {
                                            var $3819 = Parser$Reply$value$(_sidx$5, $3803, 7n);
                                            var $3818 = $3819;
                                        } else {
                                            var self = ($3802 === 56);
                                            if (self) {
                                                var $3821 = Parser$Reply$value$(_sidx$5, $3803, 8n);
                                                var $3820 = $3821;
                                            } else {
                                                var self = ($3802 === 57);
                                                if (self) {
                                                    var $3823 = Parser$Reply$value$(_sidx$5, $3803, 9n);
                                                    var $3822 = $3823;
                                                } else {
                                                    var $3824 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $3822 = $3824;
                                                };
                                                var $3820 = $3822;
                                            };
                                            var $3818 = $3820;
                                        };
                                        var $3816 = $3818;
                                    };
                                    var $3814 = $3816;
                                };
                                var $3812 = $3814;
                            };
                            var $3810 = $3812;
                        };
                        var $3808 = $3810;
                    };
                    var $3806 = $3808;
                };
                var $3804 = $3806;
            };
            var $3800 = $3804;
        };
        return $3800;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.cons':
                        var $3825 = self.head;
                        var $3826 = self.tail;
                        var $3827 = Nat$from_base$go$(_b$1, $3826, (_b$1 * _p$3), (($3825 * _p$3) + _res$4));
                        return $3827;
                    case 'List.nil':
                        var $3828 = _res$4;
                        return $3828;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function Nat$from_base$(_base$1, _ds$2) {
        var $3829 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $3829;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3831 = self.idx;
                var $3832 = self.code;
                var $3833 = self.err;
                var $3834 = Parser$Reply$error$($3831, $3832, $3833);
                var $3830 = $3834;
                break;
            case 'Parser.Reply.value':
                var $3835 = self.idx;
                var $3836 = self.code;
                var $3837 = self.val;
                var $3838 = Parser$Reply$value$($3835, $3836, Nat$from_base$(10n, $3837));
                var $3830 = $3838;
                break;
        };
        return $3830;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3840 = self.slice(0, -1);
                var $3841 = $3840;
                var $3839 = $3841;
                break;
            case 'i':
                var $3842 = self.slice(0, -1);
                var $3843 = $3842;
                var $3839 = $3843;
                break;
            case 'e':
                var $3844 = Bits$e;
                var $3839 = $3844;
                break;
        };
        return $3839;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3846 = self.slice(0, -1);
                var $3847 = ($3846 + '1');
                var $3845 = $3847;
                break;
            case 'i':
                var $3848 = self.slice(0, -1);
                var $3849 = (Bits$inc$($3848) + '0');
                var $3845 = $3849;
                break;
            case 'e':
                var $3850 = (Bits$e + '1');
                var $3845 = $3850;
                break;
        };
        return $3845;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$is_some$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $3852 = Bool$false;
                var $3851 = $3852;
                break;
            case 'Maybe.some':
                var $3853 = Bool$true;
                var $3851 = $3853;
                break;
        };
        return $3851;
    };
    const Maybe$is_some = x0 => Maybe$is_some$(x0);

    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $3854 = ({
            _: 'Kind.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $3854;
    };
    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);

    function Kind$Parser$goal$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3856 = self.idx;
                var $3857 = self.code;
                var $3858 = self.err;
                var $3859 = Parser$Reply$error$($3856, $3857, $3858);
                var $3855 = $3859;
                break;
            case 'Parser.Reply.value':
                var $3860 = self.idx;
                var $3861 = self.code;
                var $3862 = self.val;
                var self = Kind$Parser$text$("?", $3860, $3861);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3864 = self.idx;
                        var $3865 = self.code;
                        var $3866 = self.err;
                        var $3867 = Parser$Reply$error$($3864, $3865, $3866);
                        var $3863 = $3867;
                        break;
                    case 'Parser.Reply.value':
                        var $3868 = self.idx;
                        var $3869 = self.code;
                        var self = Kind$Parser$name$($3868, $3869);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3871 = self.idx;
                                var $3872 = self.code;
                                var $3873 = self.err;
                                var $3874 = Parser$Reply$error$($3871, $3872, $3873);
                                var $3870 = $3874;
                                break;
                            case 'Parser.Reply.value':
                                var $3875 = self.idx;
                                var $3876 = self.code;
                                var $3877 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3880 = self.idx;
                                            var $3881 = self.code;
                                            var $3882 = self.err;
                                            var $3883 = Parser$Reply$error$($3880, $3881, $3882);
                                            var $3879 = $3883;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3884 = self.idx;
                                            var $3885 = self.code;
                                            var self = Parser$nat$($3884, $3885);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3887 = self.idx;
                                                    var $3888 = self.code;
                                                    var $3889 = self.err;
                                                    var $3890 = Parser$Reply$error$($3887, $3888, $3889);
                                                    var $3886 = $3890;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3891 = self.idx;
                                                    var $3892 = self.code;
                                                    var $3893 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($3893)))));
                                                    var $3894 = Parser$Reply$value$($3891, $3892, _bits$20);
                                                    var $3886 = $3894;
                                                    break;
                                            };
                                            var $3879 = $3886;
                                            break;
                                    };
                                    return $3879;
                                }))($3875)($3876);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3895 = self.idx;
                                        var $3896 = self.code;
                                        var $3897 = self.err;
                                        var $3898 = Parser$Reply$error$($3895, $3896, $3897);
                                        var $3878 = $3898;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3899 = self.idx;
                                        var $3900 = self.code;
                                        var $3901 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $3899, $3900);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3903 = self.idx;
                                                var $3904 = self.code;
                                                var $3905 = self.err;
                                                var $3906 = Parser$Reply$error$($3903, $3904, $3905);
                                                var self = $3906;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3907 = self.idx;
                                                var $3908 = self.code;
                                                var $3909 = self.val;
                                                var $3910 = Parser$Reply$value$($3907, $3908, Maybe$is_some$($3909));
                                                var self = $3910;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3911 = self.idx;
                                                var $3912 = self.code;
                                                var $3913 = self.err;
                                                var $3914 = Parser$Reply$error$($3911, $3912, $3913);
                                                var $3902 = $3914;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3915 = self.idx;
                                                var $3916 = self.code;
                                                var $3917 = self.val;
                                                var self = Kind$Parser$stop$($3862, $3915, $3916);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3919 = self.idx;
                                                        var $3920 = self.code;
                                                        var $3921 = self.err;
                                                        var $3922 = Parser$Reply$error$($3919, $3920, $3921);
                                                        var $3918 = $3922;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3923 = self.idx;
                                                        var $3924 = self.code;
                                                        var $3925 = self.val;
                                                        var $3926 = Parser$Reply$value$($3923, $3924, Kind$Term$ori$($3925, Kind$Term$gol$($3877, $3901, $3917)));
                                                        var $3918 = $3926;
                                                        break;
                                                };
                                                var $3902 = $3918;
                                                break;
                                        };
                                        var $3878 = $3902;
                                        break;
                                };
                                var $3870 = $3878;
                                break;
                        };
                        var $3863 = $3870;
                        break;
                };
                var $3855 = $3863;
                break;
        };
        return $3855;
    };
    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);

    function Kind$Parser$hole$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3928 = self.idx;
                var $3929 = self.code;
                var $3930 = self.err;
                var $3931 = Parser$Reply$error$($3928, $3929, $3930);
                var $3927 = $3931;
                break;
            case 'Parser.Reply.value':
                var $3932 = self.idx;
                var $3933 = self.code;
                var $3934 = self.val;
                var self = Kind$Parser$text$("_", $3932, $3933);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3936 = self.idx;
                        var $3937 = self.code;
                        var $3938 = self.err;
                        var $3939 = Parser$Reply$error$($3936, $3937, $3938);
                        var $3935 = $3939;
                        break;
                    case 'Parser.Reply.value':
                        var $3940 = self.idx;
                        var $3941 = self.code;
                        var self = Kind$Parser$stop$($3934, $3940, $3941);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3943 = self.idx;
                                var $3944 = self.code;
                                var $3945 = self.err;
                                var $3946 = Parser$Reply$error$($3943, $3944, $3945);
                                var $3942 = $3946;
                                break;
                            case 'Parser.Reply.value':
                                var $3947 = self.idx;
                                var $3948 = self.code;
                                var $3949 = self.val;
                                var $3950 = Parser$Reply$value$($3947, $3948, Kind$Term$ori$($3949, Kind$Term$hol$(Bits$e)));
                                var $3942 = $3950;
                                break;
                        };
                        var $3935 = $3942;
                        break;
                };
                var $3927 = $3935;
                break;
        };
        return $3927;
    };
    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);

    function List$any$(_cond$2, _list$3) {
        var List$any$ = (_cond$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_cond$2, _list$3]
        });
        var List$any = _cond$2 => _list$3 => List$any$(_cond$2, _list$3);
        var arg = [_cond$2, _list$3];
        while (true) {
            let [_cond$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $3951 = self.head;
                        var $3952 = self.tail;
                        var self = _cond$2($3951);
                        if (self) {
                            var $3954 = Bool$true;
                            var $3953 = $3954;
                        } else {
                            var $3955 = List$any$(_cond$2, $3952);
                            var $3953 = $3955;
                        };
                        return $3953;
                    case 'List.nil':
                        var $3956 = Bool$false;
                        return $3956;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$any = x0 => x1 => List$any$(x0, x1);

    function Kind$Parser$float$str_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3958 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $3957 = $3958;
        } else {
            var $3959 = self.charCodeAt(0);
            var $3960 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var _digits$6 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$nil)))))))))));
            var self = List$any$(a1 => ($3959 === a1), _digits$6);
            if (self) {
                var $3962 = Parser$Reply$value$(_sidx$5, $3960, $3959);
                var $3961 = $3962;
            } else {
                var $3963 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                var $3961 = $3963;
            };
            var $3957 = $3961;
        };
        return $3957;
    };
    const Kind$Parser$float$str_digit = x0 => x1 => Kind$Parser$float$str_digit$(x0, x1);

    function String$from_list$(_xs$1) {
        var self = _xs$1;
        switch (self._) {
            case 'List.cons':
                var $3965 = self.head;
                var $3966 = self.tail;
                var $3967 = String$cons$($3965, String$from_list$($3966));
                var $3964 = $3967;
                break;
            case 'List.nil':
                var $3968 = String$nil;
                var $3964 = $3968;
                break;
        };
        return $3964;
    };
    const String$from_list = x0 => String$from_list$(x0);

    function Kind$Parser$float$64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3970 = self.idx;
                var $3971 = self.code;
                var $3972 = self.err;
                var $3973 = Parser$Reply$error$($3970, $3971, $3972);
                var $3969 = $3973;
                break;
            case 'Parser.Reply.value':
                var $3974 = self.idx;
                var $3975 = self.code;
                var $3976 = self.val;
                var self = Parser$many1$(Kind$Parser$float$str_digit, $3974, $3975);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3978 = self.idx;
                        var $3979 = self.code;
                        var $3980 = self.err;
                        var $3981 = Parser$Reply$error$($3978, $3979, $3980);
                        var $3977 = $3981;
                        break;
                    case 'Parser.Reply.value':
                        var $3982 = self.idx;
                        var $3983 = self.code;
                        var $3984 = self.val;
                        var self = Parser$text$(".", $3982, $3983);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3986 = self.idx;
                                var $3987 = self.code;
                                var $3988 = self.err;
                                var $3989 = Parser$Reply$error$($3986, $3987, $3988);
                                var $3985 = $3989;
                                break;
                            case 'Parser.Reply.value':
                                var $3990 = self.idx;
                                var $3991 = self.code;
                                var self = Parser$many1$(Kind$Parser$float$str_digit, $3990, $3991);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3993 = self.idx;
                                        var $3994 = self.code;
                                        var $3995 = self.err;
                                        var $3996 = Parser$Reply$error$($3993, $3994, $3995);
                                        var $3992 = $3996;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3997 = self.idx;
                                        var $3998 = self.code;
                                        var $3999 = self.val;
                                        var self = Parser$text$("#64", $3997, $3998);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4001 = self.idx;
                                                var $4002 = self.code;
                                                var $4003 = self.err;
                                                var $4004 = Parser$Reply$error$($4001, $4002, $4003);
                                                var $4000 = $4004;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4005 = self.idx;
                                                var $4006 = self.code;
                                                var _float_str$18 = Kind$Term$str$((String$from_list$($3984) + ("." + String$from_list$($3999))));
                                                var _conv$19 = Kind$Term$ref$("F64.parse");
                                                var _term$20 = Kind$Term$app$(_conv$19, _float_str$18);
                                                var self = Kind$Parser$stop$($3976, $4005, $4006);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4008 = self.idx;
                                                        var $4009 = self.code;
                                                        var $4010 = self.err;
                                                        var $4011 = Parser$Reply$error$($4008, $4009, $4010);
                                                        var $4007 = $4011;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4012 = self.idx;
                                                        var $4013 = self.code;
                                                        var $4014 = self.val;
                                                        var $4015 = Parser$Reply$value$($4012, $4013, Kind$Term$ori$($4014, _term$20));
                                                        var $4007 = $4015;
                                                        break;
                                                };
                                                var $4000 = $4007;
                                                break;
                                        };
                                        var $3992 = $4000;
                                        break;
                                };
                                var $3985 = $3992;
                                break;
                        };
                        var $3977 = $3985;
                        break;
                };
                var $3969 = $3977;
                break;
        };
        return $3969;
    };
    const Kind$Parser$float$64 = x0 => x1 => Kind$Parser$float$64$(x0, x1);

    function Kind$Parser$float$32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4017 = self.idx;
                var $4018 = self.code;
                var $4019 = self.err;
                var $4020 = Parser$Reply$error$($4017, $4018, $4019);
                var $4016 = $4020;
                break;
            case 'Parser.Reply.value':
                var $4021 = self.idx;
                var $4022 = self.code;
                var $4023 = self.val;
                var self = Parser$many1$(Kind$Parser$float$str_digit, $4021, $4022);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4025 = self.idx;
                        var $4026 = self.code;
                        var $4027 = self.err;
                        var $4028 = Parser$Reply$error$($4025, $4026, $4027);
                        var $4024 = $4028;
                        break;
                    case 'Parser.Reply.value':
                        var $4029 = self.idx;
                        var $4030 = self.code;
                        var $4031 = self.val;
                        var self = Parser$text$(".", $4029, $4030);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4033 = self.idx;
                                var $4034 = self.code;
                                var $4035 = self.err;
                                var $4036 = Parser$Reply$error$($4033, $4034, $4035);
                                var $4032 = $4036;
                                break;
                            case 'Parser.Reply.value':
                                var $4037 = self.idx;
                                var $4038 = self.code;
                                var self = Parser$many1$(Kind$Parser$float$str_digit, $4037, $4038);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4040 = self.idx;
                                        var $4041 = self.code;
                                        var $4042 = self.err;
                                        var $4043 = Parser$Reply$error$($4040, $4041, $4042);
                                        var $4039 = $4043;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4044 = self.idx;
                                        var $4045 = self.code;
                                        var $4046 = self.val;
                                        var self = Parser$text$("#32", $4044, $4045);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4048 = self.idx;
                                                var $4049 = self.code;
                                                var $4050 = self.err;
                                                var $4051 = Parser$Reply$error$($4048, $4049, $4050);
                                                var $4047 = $4051;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4052 = self.idx;
                                                var $4053 = self.code;
                                                var _float_str$18 = Kind$Term$str$((String$from_list$($4031) + ("." + String$from_list$($4046))));
                                                var _conv$19 = Kind$Term$ref$("F32.parse");
                                                var _term$20 = Kind$Term$app$(_conv$19, _float_str$18);
                                                var self = Kind$Parser$stop$($4023, $4052, $4053);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4055 = self.idx;
                                                        var $4056 = self.code;
                                                        var $4057 = self.err;
                                                        var $4058 = Parser$Reply$error$($4055, $4056, $4057);
                                                        var $4054 = $4058;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4059 = self.idx;
                                                        var $4060 = self.code;
                                                        var $4061 = self.val;
                                                        var $4062 = Parser$Reply$value$($4059, $4060, Kind$Term$ori$($4061, _term$20));
                                                        var $4054 = $4062;
                                                        break;
                                                };
                                                var $4047 = $4054;
                                                break;
                                        };
                                        var $4039 = $4047;
                                        break;
                                };
                                var $4032 = $4039;
                                break;
                        };
                        var $4024 = $4032;
                        break;
                };
                var $4016 = $4024;
                break;
        };
        return $4016;
    };
    const Kind$Parser$float$32 = x0 => x1 => Kind$Parser$float$32$(x0, x1);

    function Either$(_A$1, _B$2) {
        var $4063 = null;
        return $4063;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function Either$left$(_value$3) {
        var $4064 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4064;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4065 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4065;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4066 = Either$left$(_n$1);
                    return $4066;
                } else {
                    var $4067 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4069 = Either$right$(Nat$succ$($4067));
                        var $4068 = $4069;
                    } else {
                        var $4070 = (self - 1n);
                        var $4071 = Nat$sub_rem$($4070, $4067);
                        var $4068 = $4071;
                    };
                    return $4068;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4072 = self.value;
                        var $4073 = Nat$div_mod$go$($4072, _m$2, Nat$succ$(_d$3));
                        return $4073;
                    case 'Either.right':
                        var $4074 = Pair$new$(_d$3, _n$1);
                        return $4074;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4075 = self.fst;
                        var $4076 = self.snd;
                        var self = $4075;
                        if (self === 0n) {
                            var $4078 = List$cons$($4076, _res$3);
                            var $4077 = $4078;
                        } else {
                            var $4079 = (self - 1n);
                            var $4080 = Nat$to_base$go$(_base$1, $4075, List$cons$($4076, _res$3));
                            var $4077 = $4080;
                        };
                        return $4077;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4081 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4081;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4082 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4082;
                } else {
                    var $4083 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4085 = _r$3;
                        var $4084 = $4085;
                    } else {
                        var $4086 = (self - 1n);
                        var $4087 = Nat$mod$go$($4086, $4083, Nat$succ$(_r$3));
                        var $4084 = $4087;
                    };
                    return $4084;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);
    const Nat$mod = a0 => a1 => (a0 % a1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4088 = self.head;
                        var $4089 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $4091 = Maybe$some$($4088);
                            var $4090 = $4091;
                        } else {
                            var $4092 = (self - 1n);
                            var $4093 = List$at$($4092, $4089);
                            var $4090 = $4093;
                        };
                        return $4090;
                    case 'List.nil':
                        var $4094 = Maybe$none;
                        return $4094;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = (_n$2 % _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.some':
                    var $4097 = self.value;
                    var $4098 = $4097;
                    var $4096 = $4098;
                    break;
                case 'Maybe.none':
                    var $4099 = 35;
                    var $4096 = $4099;
                    break;
            };
            var $4095 = $4096;
        } else {
            var $4100 = 35;
            var $4095 = $4100;
        };
        return $4095;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4101 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4102 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4102;
        }));
        return $4101;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4103 = Nat$to_string_base$(10n, _n$1);
        return $4103;
    };
    const Nat$show = x0 => Nat$show$(x0);

    function Kind$Parser$int_pos$(_idx$1, _code$2) {
        var self = Parser$text$("+", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4105 = self.idx;
                var $4106 = self.code;
                var $4107 = self.err;
                var $4108 = Parser$Reply$error$($4105, $4106, $4107);
                var $4104 = $4108;
                break;
            case 'Parser.Reply.value':
                var $4109 = self.idx;
                var $4110 = self.code;
                var self = Parser$many1$(Parser$digit, $4109, $4110);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4112 = self.idx;
                        var $4113 = self.code;
                        var $4114 = self.err;
                        var $4115 = Parser$Reply$error$($4112, $4113, $4114);
                        var $4111 = $4115;
                        break;
                    case 'Parser.Reply.value':
                        var $4116 = self.idx;
                        var $4117 = self.code;
                        var $4118 = self.val;
                        var $4119 = Parser$Reply$value$($4116, $4117, Pair$new$(Bool$true, Nat$from_base$(10n, $4118)));
                        var $4111 = $4119;
                        break;
                };
                var $4104 = $4111;
                break;
        };
        return $4104;
    };
    const Kind$Parser$int_pos = x0 => x1 => Kind$Parser$int_pos$(x0, x1);

    function Kind$Parser$int_neg$(_idx$1, _code$2) {
        var self = Parser$text$("-", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4121 = self.idx;
                var $4122 = self.code;
                var $4123 = self.err;
                var $4124 = Parser$Reply$error$($4121, $4122, $4123);
                var $4120 = $4124;
                break;
            case 'Parser.Reply.value':
                var $4125 = self.idx;
                var $4126 = self.code;
                var self = Parser$many1$(Parser$digit, $4125, $4126);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4128 = self.idx;
                        var $4129 = self.code;
                        var $4130 = self.err;
                        var $4131 = Parser$Reply$error$($4128, $4129, $4130);
                        var $4127 = $4131;
                        break;
                    case 'Parser.Reply.value':
                        var $4132 = self.idx;
                        var $4133 = self.code;
                        var $4134 = self.val;
                        var $4135 = Parser$Reply$value$($4132, $4133, Pair$new$(Bool$false, Nat$from_base$(10n, $4134)));
                        var $4127 = $4135;
                        break;
                };
                var $4120 = $4127;
                break;
        };
        return $4120;
    };
    const Kind$Parser$int_neg = x0 => x1 => Kind$Parser$int_neg$(x0, x1);

    function Kind$Parser$int$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4137 = self.idx;
                var $4138 = self.code;
                var $4139 = self.err;
                var $4140 = Parser$Reply$error$($4137, $4138, $4139);
                var $4136 = $4140;
                break;
            case 'Parser.Reply.value':
                var $4141 = self.idx;
                var $4142 = self.code;
                var $4143 = self.val;
                var self = Kind$Parser$spaces($4141)($4142);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4145 = self.idx;
                        var $4146 = self.code;
                        var $4147 = self.err;
                        var $4148 = Parser$Reply$error$($4145, $4146, $4147);
                        var $4144 = $4148;
                        break;
                    case 'Parser.Reply.value':
                        var $4149 = self.idx;
                        var $4150 = self.code;
                        var self = Parser$first_of$(List$cons$(Kind$Parser$int_pos, List$cons$(Kind$Parser$int_neg, List$nil)))($4149)($4150);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4152 = self.idx;
                                var $4153 = self.code;
                                var $4154 = self.err;
                                var $4155 = Parser$Reply$error$($4152, $4153, $4154);
                                var $4151 = $4155;
                                break;
                            case 'Parser.Reply.value':
                                var $4156 = self.idx;
                                var $4157 = self.code;
                                var $4158 = self.val;
                                var self = $4158;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $4160 = self.fst;
                                        var $4161 = self.snd;
                                        var _ret$14 = Kind$Term$ref$("Int.from_nat");
                                        var _ret$15 = Kind$Term$app$(_ret$14, Kind$Term$nat$($4161));
                                        var self = $4160;
                                        if (self) {
                                            var $4163 = _ret$15;
                                            var $4162 = $4163;
                                        } else {
                                            var _inv$16 = Kind$Term$ref$("Int.neg");
                                            var $4164 = Kind$Term$app$(_inv$16, _ret$15);
                                            var $4162 = $4164;
                                        };
                                        var _term$12 = $4162;
                                        break;
                                };
                                var self = Kind$Parser$stop$($4143, $4156, $4157);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4165 = self.idx;
                                        var $4166 = self.code;
                                        var $4167 = self.err;
                                        var $4168 = Parser$Reply$error$($4165, $4166, $4167);
                                        var $4159 = $4168;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4169 = self.idx;
                                        var $4170 = self.code;
                                        var $4171 = self.val;
                                        var $4172 = Parser$Reply$value$($4169, $4170, Kind$Term$ori$($4171, _term$12));
                                        var $4159 = $4172;
                                        break;
                                };
                                var $4151 = $4159;
                                break;
                        };
                        var $4144 = $4151;
                        break;
                };
                var $4136 = $4144;
                break;
        };
        return $4136;
    };
    const Kind$Parser$int = x0 => x1 => Kind$Parser$int$(x0, x1);

    function Kind$Parser$machine_integer$signed$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4173 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4175 = self.idx;
                    var $4176 = self.code;
                    var $4177 = self.err;
                    var $4178 = Parser$Reply$error$($4175, $4176, $4177);
                    var $4174 = $4178;
                    break;
                case 'Parser.Reply.value':
                    var $4179 = self.idx;
                    var $4180 = self.code;
                    var $4181 = self.val;
                    var self = Kind$Parser$spaces($4179)($4180);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4183 = self.idx;
                            var $4184 = self.code;
                            var $4185 = self.err;
                            var $4186 = Parser$Reply$error$($4183, $4184, $4185);
                            var $4182 = $4186;
                            break;
                        case 'Parser.Reply.value':
                            var $4187 = self.idx;
                            var $4188 = self.code;
                            var self = Kind$Parser$int$($4187, $4188);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4190 = self.idx;
                                    var $4191 = self.code;
                                    var $4192 = self.err;
                                    var $4193 = Parser$Reply$error$($4190, $4191, $4192);
                                    var $4189 = $4193;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4194 = self.idx;
                                    var $4195 = self.code;
                                    var $4196 = self.val;
                                    var self = Parser$text$(("#" + _size_str$2), $4194, $4195);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4198 = self.idx;
                                            var $4199 = self.code;
                                            var $4200 = self.err;
                                            var $4201 = Parser$Reply$error$($4198, $4199, $4200);
                                            var $4197 = $4201;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4202 = self.idx;
                                            var $4203 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Int.to_i" + _size_str$2));
                                            var _term$18 = Kind$Term$app$(_term$17, $4196);
                                            var self = Kind$Parser$stop$($4181, $4202, $4203);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4205 = self.idx;
                                                    var $4206 = self.code;
                                                    var $4207 = self.err;
                                                    var $4208 = Parser$Reply$error$($4205, $4206, $4207);
                                                    var $4204 = $4208;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4209 = self.idx;
                                                    var $4210 = self.code;
                                                    var $4211 = self.val;
                                                    var $4212 = Parser$Reply$value$($4209, $4210, Kind$Term$ori$($4211, _term$18));
                                                    var $4204 = $4212;
                                                    break;
                                            };
                                            var $4197 = $4204;
                                            break;
                                    };
                                    var $4189 = $4197;
                                    break;
                            };
                            var $4182 = $4189;
                            break;
                    };
                    var $4174 = $4182;
                    break;
            };
            return $4174;
        });
        return $4173;
    };
    const Kind$Parser$machine_integer$signed = x0 => Kind$Parser$machine_integer$signed$(x0);

    function Parser$hex_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4214 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4213 = $4214;
        } else {
            var $4215 = self.charCodeAt(0);
            var $4216 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($4215 === 48);
            if (self) {
                var $4218 = Parser$Reply$value$(_sidx$5, $4216, 0n);
                var $4217 = $4218;
            } else {
                var self = ($4215 === 49);
                if (self) {
                    var $4220 = Parser$Reply$value$(_sidx$5, $4216, 1n);
                    var $4219 = $4220;
                } else {
                    var self = ($4215 === 50);
                    if (self) {
                        var $4222 = Parser$Reply$value$(_sidx$5, $4216, 2n);
                        var $4221 = $4222;
                    } else {
                        var self = ($4215 === 51);
                        if (self) {
                            var $4224 = Parser$Reply$value$(_sidx$5, $4216, 3n);
                            var $4223 = $4224;
                        } else {
                            var self = ($4215 === 52);
                            if (self) {
                                var $4226 = Parser$Reply$value$(_sidx$5, $4216, 4n);
                                var $4225 = $4226;
                            } else {
                                var self = ($4215 === 53);
                                if (self) {
                                    var $4228 = Parser$Reply$value$(_sidx$5, $4216, 5n);
                                    var $4227 = $4228;
                                } else {
                                    var self = ($4215 === 54);
                                    if (self) {
                                        var $4230 = Parser$Reply$value$(_sidx$5, $4216, 6n);
                                        var $4229 = $4230;
                                    } else {
                                        var self = ($4215 === 55);
                                        if (self) {
                                            var $4232 = Parser$Reply$value$(_sidx$5, $4216, 7n);
                                            var $4231 = $4232;
                                        } else {
                                            var self = ($4215 === 56);
                                            if (self) {
                                                var $4234 = Parser$Reply$value$(_sidx$5, $4216, 8n);
                                                var $4233 = $4234;
                                            } else {
                                                var self = ($4215 === 57);
                                                if (self) {
                                                    var $4236 = Parser$Reply$value$(_sidx$5, $4216, 9n);
                                                    var $4235 = $4236;
                                                } else {
                                                    var self = ($4215 === 97);
                                                    if (self) {
                                                        var $4238 = Parser$Reply$value$(_sidx$5, $4216, 10n);
                                                        var $4237 = $4238;
                                                    } else {
                                                        var self = ($4215 === 98);
                                                        if (self) {
                                                            var $4240 = Parser$Reply$value$(_sidx$5, $4216, 11n);
                                                            var $4239 = $4240;
                                                        } else {
                                                            var self = ($4215 === 99);
                                                            if (self) {
                                                                var $4242 = Parser$Reply$value$(_sidx$5, $4216, 12n);
                                                                var $4241 = $4242;
                                                            } else {
                                                                var self = ($4215 === 100);
                                                                if (self) {
                                                                    var $4244 = Parser$Reply$value$(_sidx$5, $4216, 13n);
                                                                    var $4243 = $4244;
                                                                } else {
                                                                    var self = ($4215 === 101);
                                                                    if (self) {
                                                                        var $4246 = Parser$Reply$value$(_sidx$5, $4216, 14n);
                                                                        var $4245 = $4246;
                                                                    } else {
                                                                        var self = ($4215 === 102);
                                                                        if (self) {
                                                                            var $4248 = Parser$Reply$value$(_sidx$5, $4216, 15n);
                                                                            var $4247 = $4248;
                                                                        } else {
                                                                            var self = ($4215 === 65);
                                                                            if (self) {
                                                                                var $4250 = Parser$Reply$value$(_sidx$5, $4216, 10n);
                                                                                var $4249 = $4250;
                                                                            } else {
                                                                                var self = ($4215 === 66);
                                                                                if (self) {
                                                                                    var $4252 = Parser$Reply$value$(_sidx$5, $4216, 11n);
                                                                                    var $4251 = $4252;
                                                                                } else {
                                                                                    var self = ($4215 === 67);
                                                                                    if (self) {
                                                                                        var $4254 = Parser$Reply$value$(_sidx$5, $4216, 12n);
                                                                                        var $4253 = $4254;
                                                                                    } else {
                                                                                        var self = ($4215 === 68);
                                                                                        if (self) {
                                                                                            var $4256 = Parser$Reply$value$(_sidx$5, $4216, 13n);
                                                                                            var $4255 = $4256;
                                                                                        } else {
                                                                                            var self = ($4215 === 69);
                                                                                            if (self) {
                                                                                                var $4258 = Parser$Reply$value$(_sidx$5, $4216, 14n);
                                                                                                var $4257 = $4258;
                                                                                            } else {
                                                                                                var self = ($4215 === 70);
                                                                                                if (self) {
                                                                                                    var $4260 = Parser$Reply$value$(_sidx$5, $4216, 15n);
                                                                                                    var $4259 = $4260;
                                                                                                } else {
                                                                                                    var $4261 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                                                                    var $4259 = $4261;
                                                                                                };
                                                                                                var $4257 = $4259;
                                                                                            };
                                                                                            var $4255 = $4257;
                                                                                        };
                                                                                        var $4253 = $4255;
                                                                                    };
                                                                                    var $4251 = $4253;
                                                                                };
                                                                                var $4249 = $4251;
                                                                            };
                                                                            var $4247 = $4249;
                                                                        };
                                                                        var $4245 = $4247;
                                                                    };
                                                                    var $4243 = $4245;
                                                                };
                                                                var $4241 = $4243;
                                                            };
                                                            var $4239 = $4241;
                                                        };
                                                        var $4237 = $4239;
                                                    };
                                                    var $4235 = $4237;
                                                };
                                                var $4233 = $4235;
                                            };
                                            var $4231 = $4233;
                                        };
                                        var $4229 = $4231;
                                    };
                                    var $4227 = $4229;
                                };
                                var $4225 = $4227;
                            };
                            var $4223 = $4225;
                        };
                        var $4221 = $4223;
                    };
                    var $4219 = $4221;
                };
                var $4217 = $4219;
            };
            var $4213 = $4217;
        };
        return $4213;
    };
    const Parser$hex_digit = x0 => x1 => Parser$hex_digit$(x0, x1);

    function Parser$hex_nat$(_idx$1, _code$2) {
        var self = Parser$text$("0x", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4263 = self.idx;
                var $4264 = self.code;
                var $4265 = self.err;
                var $4266 = Parser$Reply$error$($4263, $4264, $4265);
                var $4262 = $4266;
                break;
            case 'Parser.Reply.value':
                var $4267 = self.idx;
                var $4268 = self.code;
                var self = Parser$many1$(Parser$hex_digit, $4267, $4268);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4270 = self.idx;
                        var $4271 = self.code;
                        var $4272 = self.err;
                        var $4273 = Parser$Reply$error$($4270, $4271, $4272);
                        var $4269 = $4273;
                        break;
                    case 'Parser.Reply.value':
                        var $4274 = self.idx;
                        var $4275 = self.code;
                        var $4276 = self.val;
                        var $4277 = Parser$Reply$value$($4274, $4275, Nat$from_base$(16n, $4276));
                        var $4269 = $4277;
                        break;
                };
                var $4262 = $4269;
                break;
        };
        return $4262;
    };
    const Parser$hex_nat = x0 => x1 => Parser$hex_nat$(x0, x1);

    function Kind$Parser$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4279 = self.idx;
                var $4280 = self.code;
                var $4281 = self.err;
                var $4282 = Parser$Reply$error$($4279, $4280, $4281);
                var $4278 = $4282;
                break;
            case 'Parser.Reply.value':
                var $4283 = self.idx;
                var $4284 = self.code;
                var $4285 = self.val;
                var self = Kind$Parser$spaces($4283)($4284);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4287 = self.idx;
                        var $4288 = self.code;
                        var $4289 = self.err;
                        var $4290 = Parser$Reply$error$($4287, $4288, $4289);
                        var $4286 = $4290;
                        break;
                    case 'Parser.Reply.value':
                        var $4291 = self.idx;
                        var $4292 = self.code;
                        var self = Parser$first_of$(List$cons$(Parser$hex_nat, List$cons$(Parser$nat, List$nil)))($4291)($4292);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4294 = self.idx;
                                var $4295 = self.code;
                                var $4296 = self.err;
                                var $4297 = Parser$Reply$error$($4294, $4295, $4296);
                                var $4293 = $4297;
                                break;
                            case 'Parser.Reply.value':
                                var $4298 = self.idx;
                                var $4299 = self.code;
                                var $4300 = self.val;
                                var self = Kind$Parser$stop$($4285, $4298, $4299);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4302 = self.idx;
                                        var $4303 = self.code;
                                        var $4304 = self.err;
                                        var $4305 = Parser$Reply$error$($4302, $4303, $4304);
                                        var $4301 = $4305;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4306 = self.idx;
                                        var $4307 = self.code;
                                        var $4308 = self.val;
                                        var $4309 = Parser$Reply$value$($4306, $4307, Kind$Term$ori$($4308, Kind$Term$nat$($4300)));
                                        var $4301 = $4309;
                                        break;
                                };
                                var $4293 = $4301;
                                break;
                        };
                        var $4286 = $4293;
                        break;
                };
                var $4278 = $4286;
                break;
        };
        return $4278;
    };
    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);

    function Kind$Parser$machine_integer$unsigned$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4310 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4312 = self.idx;
                    var $4313 = self.code;
                    var $4314 = self.err;
                    var $4315 = Parser$Reply$error$($4312, $4313, $4314);
                    var $4311 = $4315;
                    break;
                case 'Parser.Reply.value':
                    var $4316 = self.idx;
                    var $4317 = self.code;
                    var $4318 = self.val;
                    var self = Kind$Parser$spaces($4316)($4317);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4320 = self.idx;
                            var $4321 = self.code;
                            var $4322 = self.err;
                            var $4323 = Parser$Reply$error$($4320, $4321, $4322);
                            var $4319 = $4323;
                            break;
                        case 'Parser.Reply.value':
                            var $4324 = self.idx;
                            var $4325 = self.code;
                            var self = Kind$Parser$nat$($4324, $4325);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4327 = self.idx;
                                    var $4328 = self.code;
                                    var $4329 = self.err;
                                    var $4330 = Parser$Reply$error$($4327, $4328, $4329);
                                    var $4326 = $4330;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4331 = self.idx;
                                    var $4332 = self.code;
                                    var $4333 = self.val;
                                    var self = Parser$text$(("#" + Nat$show$(_size$1)), $4331, $4332);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4335 = self.idx;
                                            var $4336 = self.code;
                                            var $4337 = self.err;
                                            var $4338 = Parser$Reply$error$($4335, $4336, $4337);
                                            var $4334 = $4338;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4339 = self.idx;
                                            var $4340 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Nat.to_u" + Nat$show$(_size$1)));
                                            var _term$18 = Kind$Term$app$(_term$17, $4333);
                                            var self = Kind$Parser$stop$($4318, $4339, $4340);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4342 = self.idx;
                                                    var $4343 = self.code;
                                                    var $4344 = self.err;
                                                    var $4345 = Parser$Reply$error$($4342, $4343, $4344);
                                                    var $4341 = $4345;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4346 = self.idx;
                                                    var $4347 = self.code;
                                                    var $4348 = self.val;
                                                    var $4349 = Parser$Reply$value$($4346, $4347, Kind$Term$ori$($4348, _term$18));
                                                    var $4341 = $4349;
                                                    break;
                                            };
                                            var $4334 = $4341;
                                            break;
                                    };
                                    var $4326 = $4334;
                                    break;
                            };
                            var $4319 = $4326;
                            break;
                    };
                    var $4311 = $4319;
                    break;
            };
            return $4311;
        });
        return $4310;
    };
    const Kind$Parser$machine_integer$unsigned = x0 => Kind$Parser$machine_integer$unsigned$(x0);

    function Kind$Parser$u64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4351 = self.idx;
                var $4352 = self.code;
                var $4353 = self.err;
                var $4354 = Parser$Reply$error$($4351, $4352, $4353);
                var $4350 = $4354;
                break;
            case 'Parser.Reply.value':
                var $4355 = self.idx;
                var $4356 = self.code;
                var $4357 = self.val;
                var self = Kind$Parser$spaces($4355)($4356);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4359 = self.idx;
                        var $4360 = self.code;
                        var $4361 = self.err;
                        var $4362 = Parser$Reply$error$($4359, $4360, $4361);
                        var $4358 = $4362;
                        break;
                    case 'Parser.Reply.value':
                        var $4363 = self.idx;
                        var $4364 = self.code;
                        var self = Parser$nat$($4363, $4364);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4366 = self.idx;
                                var $4367 = self.code;
                                var $4368 = self.err;
                                var $4369 = Parser$Reply$error$($4366, $4367, $4368);
                                var $4365 = $4369;
                                break;
                            case 'Parser.Reply.value':
                                var $4370 = self.idx;
                                var $4371 = self.code;
                                var $4372 = self.val;
                                var self = Parser$text$("l", $4370, $4371);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4374 = self.idx;
                                        var $4375 = self.code;
                                        var $4376 = self.err;
                                        var $4377 = Parser$Reply$error$($4374, $4375, $4376);
                                        var $4373 = $4377;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4378 = self.idx;
                                        var $4379 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u64");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4372));
                                        var self = Kind$Parser$stop$($4357, $4378, $4379);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4381 = self.idx;
                                                var $4382 = self.code;
                                                var $4383 = self.err;
                                                var $4384 = Parser$Reply$error$($4381, $4382, $4383);
                                                var $4380 = $4384;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4385 = self.idx;
                                                var $4386 = self.code;
                                                var $4387 = self.val;
                                                var $4388 = Parser$Reply$value$($4385, $4386, Kind$Term$ori$($4387, _term$16));
                                                var $4380 = $4388;
                                                break;
                                        };
                                        var $4373 = $4380;
                                        break;
                                };
                                var $4365 = $4373;
                                break;
                        };
                        var $4358 = $4365;
                        break;
                };
                var $4350 = $4358;
                break;
        };
        return $4350;
    };
    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);

    function Kind$Parser$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4390 = self.idx;
                var $4391 = self.code;
                var $4392 = self.err;
                var $4393 = Parser$Reply$error$($4390, $4391, $4392);
                var $4389 = $4393;
                break;
            case 'Parser.Reply.value':
                var $4394 = self.idx;
                var $4395 = self.code;
                var $4396 = self.val;
                var self = Kind$Parser$spaces($4394)($4395);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4398 = self.idx;
                        var $4399 = self.code;
                        var $4400 = self.err;
                        var $4401 = Parser$Reply$error$($4398, $4399, $4400);
                        var $4397 = $4401;
                        break;
                    case 'Parser.Reply.value':
                        var $4402 = self.idx;
                        var $4403 = self.code;
                        var self = Parser$nat$($4402, $4403);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4405 = self.idx;
                                var $4406 = self.code;
                                var $4407 = self.err;
                                var $4408 = Parser$Reply$error$($4405, $4406, $4407);
                                var $4404 = $4408;
                                break;
                            case 'Parser.Reply.value':
                                var $4409 = self.idx;
                                var $4410 = self.code;
                                var $4411 = self.val;
                                var self = Parser$text$("u", $4409, $4410);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4413 = self.idx;
                                        var $4414 = self.code;
                                        var $4415 = self.err;
                                        var $4416 = Parser$Reply$error$($4413, $4414, $4415);
                                        var $4412 = $4416;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4417 = self.idx;
                                        var $4418 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u32");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4411));
                                        var self = Kind$Parser$stop$($4396, $4417, $4418);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4420 = self.idx;
                                                var $4421 = self.code;
                                                var $4422 = self.err;
                                                var $4423 = Parser$Reply$error$($4420, $4421, $4422);
                                                var $4419 = $4423;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4424 = self.idx;
                                                var $4425 = self.code;
                                                var $4426 = self.val;
                                                var $4427 = Parser$Reply$value$($4424, $4425, Kind$Term$ori$($4426, _term$16));
                                                var $4419 = $4427;
                                                break;
                                        };
                                        var $4412 = $4419;
                                        break;
                                };
                                var $4404 = $4412;
                                break;
                        };
                        var $4397 = $4404;
                        break;
                };
                var $4389 = $4397;
                break;
        };
        return $4389;
    };
    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);

    function Kind$Parser$u16$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4429 = self.idx;
                var $4430 = self.code;
                var $4431 = self.err;
                var $4432 = Parser$Reply$error$($4429, $4430, $4431);
                var $4428 = $4432;
                break;
            case 'Parser.Reply.value':
                var $4433 = self.idx;
                var $4434 = self.code;
                var $4435 = self.val;
                var self = Kind$Parser$spaces($4433)($4434);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4437 = self.idx;
                        var $4438 = self.code;
                        var $4439 = self.err;
                        var $4440 = Parser$Reply$error$($4437, $4438, $4439);
                        var $4436 = $4440;
                        break;
                    case 'Parser.Reply.value':
                        var $4441 = self.idx;
                        var $4442 = self.code;
                        var self = Parser$nat$($4441, $4442);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4444 = self.idx;
                                var $4445 = self.code;
                                var $4446 = self.err;
                                var $4447 = Parser$Reply$error$($4444, $4445, $4446);
                                var $4443 = $4447;
                                break;
                            case 'Parser.Reply.value':
                                var $4448 = self.idx;
                                var $4449 = self.code;
                                var $4450 = self.val;
                                var self = Parser$text$("s", $4448, $4449);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4452 = self.idx;
                                        var $4453 = self.code;
                                        var $4454 = self.err;
                                        var $4455 = Parser$Reply$error$($4452, $4453, $4454);
                                        var $4451 = $4455;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4456 = self.idx;
                                        var $4457 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u16");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4450));
                                        var self = Kind$Parser$stop$($4435, $4456, $4457);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4459 = self.idx;
                                                var $4460 = self.code;
                                                var $4461 = self.err;
                                                var $4462 = Parser$Reply$error$($4459, $4460, $4461);
                                                var $4458 = $4462;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4463 = self.idx;
                                                var $4464 = self.code;
                                                var $4465 = self.val;
                                                var $4466 = Parser$Reply$value$($4463, $4464, Kind$Term$ori$($4465, _term$16));
                                                var $4458 = $4466;
                                                break;
                                        };
                                        var $4451 = $4458;
                                        break;
                                };
                                var $4443 = $4451;
                                break;
                        };
                        var $4436 = $4443;
                        break;
                };
                var $4428 = $4436;
                break;
        };
        return $4428;
    };
    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);

    function Kind$Parser$u8$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4468 = self.idx;
                var $4469 = self.code;
                var $4470 = self.err;
                var $4471 = Parser$Reply$error$($4468, $4469, $4470);
                var $4467 = $4471;
                break;
            case 'Parser.Reply.value':
                var $4472 = self.idx;
                var $4473 = self.code;
                var $4474 = self.val;
                var self = Kind$Parser$spaces($4472)($4473);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4476 = self.idx;
                        var $4477 = self.code;
                        var $4478 = self.err;
                        var $4479 = Parser$Reply$error$($4476, $4477, $4478);
                        var $4475 = $4479;
                        break;
                    case 'Parser.Reply.value':
                        var $4480 = self.idx;
                        var $4481 = self.code;
                        var self = Parser$nat$($4480, $4481);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4483 = self.idx;
                                var $4484 = self.code;
                                var $4485 = self.err;
                                var $4486 = Parser$Reply$error$($4483, $4484, $4485);
                                var $4482 = $4486;
                                break;
                            case 'Parser.Reply.value':
                                var $4487 = self.idx;
                                var $4488 = self.code;
                                var $4489 = self.val;
                                var self = Parser$text$("b", $4487, $4488);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4491 = self.idx;
                                        var $4492 = self.code;
                                        var $4493 = self.err;
                                        var $4494 = Parser$Reply$error$($4491, $4492, $4493);
                                        var $4490 = $4494;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4495 = self.idx;
                                        var $4496 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u8");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4489));
                                        var self = Kind$Parser$stop$($4474, $4495, $4496);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4498 = self.idx;
                                                var $4499 = self.code;
                                                var $4500 = self.err;
                                                var $4501 = Parser$Reply$error$($4498, $4499, $4500);
                                                var $4497 = $4501;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4502 = self.idx;
                                                var $4503 = self.code;
                                                var $4504 = self.val;
                                                var $4505 = Parser$Reply$value$($4502, $4503, Kind$Term$ori$($4504, _term$16));
                                                var $4497 = $4505;
                                                break;
                                        };
                                        var $4490 = $4497;
                                        break;
                                };
                                var $4482 = $4490;
                                break;
                        };
                        var $4475 = $4482;
                        break;
                };
                var $4467 = $4475;
                break;
        };
        return $4467;
    };
    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);
    const String$eql = a0 => a1 => (a0 === a1);
    const Kind$Term$typ = ({
        _: 'Kind.Term.typ'
    });

    function Kind$Parser$reference$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4507 = self.idx;
                var $4508 = self.code;
                var $4509 = self.err;
                var $4510 = Parser$Reply$error$($4507, $4508, $4509);
                var $4506 = $4510;
                break;
            case 'Parser.Reply.value':
                var $4511 = self.idx;
                var $4512 = self.code;
                var $4513 = self.val;
                var self = Kind$Parser$name1$($4511, $4512);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4515 = self.idx;
                        var $4516 = self.code;
                        var $4517 = self.err;
                        var $4518 = Parser$Reply$error$($4515, $4516, $4517);
                        var $4514 = $4518;
                        break;
                    case 'Parser.Reply.value':
                        var $4519 = self.idx;
                        var $4520 = self.code;
                        var $4521 = self.val;
                        var self = Kind$Parser$stop$($4513, $4519, $4520);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4523 = self.idx;
                                var $4524 = self.code;
                                var $4525 = self.err;
                                var $4526 = Parser$Reply$error$($4523, $4524, $4525);
                                var $4522 = $4526;
                                break;
                            case 'Parser.Reply.value':
                                var $4527 = self.idx;
                                var $4528 = self.code;
                                var $4529 = self.val;
                                var self = ($4521 === "case");
                                if (self) {
                                    var $4531 = Parser$fail("Reserved keyword.");
                                    var $4530 = $4531;
                                } else {
                                    var self = ($4521 === "do");
                                    if (self) {
                                        var $4533 = Parser$fail("Reserved keyword.");
                                        var $4532 = $4533;
                                    } else {
                                        var self = ($4521 === "if");
                                        if (self) {
                                            var $4535 = Parser$fail("Reserved keyword.");
                                            var $4534 = $4535;
                                        } else {
                                            var self = ($4521 === "with");
                                            if (self) {
                                                var $4537 = Parser$fail("Reserved keyword.");
                                                var $4536 = $4537;
                                            } else {
                                                var self = ($4521 === "let");
                                                if (self) {
                                                    var $4539 = Parser$fail("Reserved keyword.");
                                                    var $4538 = $4539;
                                                } else {
                                                    var self = ($4521 === "def");
                                                    if (self) {
                                                        var $4541 = Parser$fail("Reserved keyword.");
                                                        var $4540 = $4541;
                                                    } else {
                                                        var self = ($4521 === "Type");
                                                        if (self) {
                                                            var $4543 = (_idx$12 => _code$13 => {
                                                                var $4544 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4529, Kind$Term$typ));
                                                                return $4544;
                                                            });
                                                            var $4542 = $4543;
                                                        } else {
                                                            var self = ($4521 === "true");
                                                            if (self) {
                                                                var $4546 = (_idx$12 => _code$13 => {
                                                                    var $4547 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4529, Kind$Term$ref$("Bool.true")));
                                                                    return $4547;
                                                                });
                                                                var $4545 = $4546;
                                                            } else {
                                                                var self = ($4521 === "false");
                                                                if (self) {
                                                                    var $4549 = (_idx$12 => _code$13 => {
                                                                        var $4550 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4529, Kind$Term$ref$("Bool.false")));
                                                                        return $4550;
                                                                    });
                                                                    var $4548 = $4549;
                                                                } else {
                                                                    var self = ($4521 === "unit");
                                                                    if (self) {
                                                                        var $4552 = (_idx$12 => _code$13 => {
                                                                            var $4553 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4529, Kind$Term$ref$("Unit.new")));
                                                                            return $4553;
                                                                        });
                                                                        var $4551 = $4552;
                                                                    } else {
                                                                        var self = ($4521 === "none");
                                                                        if (self) {
                                                                            var _term$12 = Kind$Term$ref$("Maybe.none");
                                                                            var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                            var $4555 = (_idx$14 => _code$15 => {
                                                                                var $4556 = Parser$Reply$value$(_idx$14, _code$15, Kind$Term$ori$($4529, _term$13));
                                                                                return $4556;
                                                                            });
                                                                            var $4554 = $4555;
                                                                        } else {
                                                                            var self = ($4521 === "refl");
                                                                            if (self) {
                                                                                var _term$12 = Kind$Term$ref$("Equal.refl");
                                                                                var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                                var _term$14 = Kind$Term$app$(_term$13, Kind$Term$hol$(Bits$e));
                                                                                var $4558 = (_idx$15 => _code$16 => {
                                                                                    var $4559 = Parser$Reply$value$(_idx$15, _code$16, Kind$Term$ori$($4529, _term$14));
                                                                                    return $4559;
                                                                                });
                                                                                var $4557 = $4558;
                                                                            } else {
                                                                                var $4560 = (_idx$12 => _code$13 => {
                                                                                    var $4561 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4529, Kind$Term$ref$($4521)));
                                                                                    return $4561;
                                                                                });
                                                                                var $4557 = $4560;
                                                                            };
                                                                            var $4554 = $4557;
                                                                        };
                                                                        var $4551 = $4554;
                                                                    };
                                                                    var $4548 = $4551;
                                                                };
                                                                var $4545 = $4548;
                                                            };
                                                            var $4542 = $4545;
                                                        };
                                                        var $4540 = $4542;
                                                    };
                                                    var $4538 = $4540;
                                                };
                                                var $4536 = $4538;
                                            };
                                            var $4534 = $4536;
                                        };
                                        var $4532 = $4534;
                                    };
                                    var $4530 = $4532;
                                };
                                var $4530 = $4530($4527)($4528);
                                var $4522 = $4530;
                                break;
                        };
                        var $4514 = $4522;
                        break;
                };
                var $4506 = $4514;
                break;
        };
        return $4506;
    };
    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4563 = self.idx;
                var $4564 = self.code;
                var $4565 = self.err;
                var $4566 = Parser$Reply$error$($4563, $4564, $4565);
                var $4562 = $4566;
                break;
            case 'Parser.Reply.value':
                var $4567 = self.idx;
                var $4568 = self.code;
                var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term), $4567, $4568);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4570 = self.idx;
                        var $4571 = self.code;
                        var $4572 = self.err;
                        var $4573 = Parser$Reply$error$($4570, $4571, $4572);
                        var $4569 = $4573;
                        break;
                    case 'Parser.Reply.value':
                        var $4574 = self.idx;
                        var $4575 = self.code;
                        var $4576 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4574, $4575);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4578 = self.idx;
                                var $4579 = self.code;
                                var $4580 = self.err;
                                var $4581 = Parser$Reply$error$($4578, $4579, $4580);
                                var $4577 = $4581;
                                break;
                            case 'Parser.Reply.value':
                                var $4582 = self.idx;
                                var $4583 = self.code;
                                var $4584 = self.val;
                                var _expr$14 = (() => {
                                    var $4587 = _func$2;
                                    var $4588 = $4576;
                                    let _f$15 = $4587;
                                    let _x$14;
                                    while ($4588._ === 'List.cons') {
                                        _x$14 = $4588.head;
                                        var $4587 = Kind$Term$app$(_f$15, _x$14);
                                        _f$15 = $4587;
                                        $4588 = $4588.tail;
                                    }
                                    return _f$15;
                                })();
                                var $4585 = Parser$Reply$value$($4582, $4583, Kind$Term$ori$($4584, _expr$14));
                                var $4577 = $4585;
                                break;
                        };
                        var $4569 = $4577;
                        break;
                };
                var $4562 = $4569;
                break;
        };
        return $4562;
    };
    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4590 = self.idx;
                var $4591 = self.code;
                var $4592 = self.err;
                var $4593 = Parser$Reply$error$($4590, $4591, $4592);
                var $4589 = $4593;
                break;
            case 'Parser.Reply.value':
                var $4594 = self.idx;
                var $4595 = self.code;
                var $4596 = Parser$text$(_text$1, $4594, $4595);
                var $4589 = $4596;
                break;
        };
        return $4589;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4598 = self.idx;
                var $4599 = self.code;
                var $4600 = self.err;
                var $4601 = Parser$Reply$error$($4598, $4599, $4600);
                var $4597 = $4601;
                break;
            case 'Parser.Reply.value':
                var $4602 = self.idx;
                var $4603 = self.code;
                var $4604 = self.val;
                var self = Parser$text$("<", $4602, $4603);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4606 = self.idx;
                        var $4607 = self.code;
                        var $4608 = self.err;
                        var $4609 = Parser$Reply$error$($4606, $4607, $4608);
                        var $4605 = $4609;
                        break;
                    case 'Parser.Reply.value':
                        var $4610 = self.idx;
                        var $4611 = self.code;
                        var self = Parser$until1$(Parser$spaces_text(">"), Kind$Parser$item(Kind$Parser$term), $4610, $4611);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4613 = self.idx;
                                var $4614 = self.code;
                                var $4615 = self.err;
                                var $4616 = Parser$Reply$error$($4613, $4614, $4615);
                                var $4612 = $4616;
                                break;
                            case 'Parser.Reply.value':
                                var $4617 = self.idx;
                                var $4618 = self.code;
                                var $4619 = self.val;
                                var self = Kind$Parser$stop$($4604, $4617, $4618);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4621 = self.idx;
                                        var $4622 = self.code;
                                        var $4623 = self.err;
                                        var $4624 = Parser$Reply$error$($4621, $4622, $4623);
                                        var $4620 = $4624;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4625 = self.idx;
                                        var $4626 = self.code;
                                        var $4627 = self.val;
                                        var _expr$17 = (() => {
                                            var $4630 = _func$2;
                                            var $4631 = $4619;
                                            let _f$18 = $4630;
                                            let _x$17;
                                            while ($4631._ === 'List.cons') {
                                                _x$17 = $4631.head;
                                                var $4630 = Kind$Term$app$(_f$18, _x$17);
                                                _f$18 = $4630;
                                                $4631 = $4631.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $4628 = Parser$Reply$value$($4625, $4626, Kind$Term$ori$($4627, _expr$17));
                                        var $4620 = $4628;
                                        break;
                                };
                                var $4612 = $4620;
                                break;
                        };
                        var $4605 = $4612;
                        break;
                };
                var $4597 = $4605;
                break;
        };
        return $4597;
    };
    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);

    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4633 = self.idx;
                var $4634 = self.code;
                var $4635 = self.err;
                var $4636 = Parser$Reply$error$($4633, $4634, $4635);
                var $4632 = $4636;
                break;
            case 'Parser.Reply.value':
                var $4637 = self.idx;
                var $4638 = self.code;
                var self = Kind$Parser$term$($4637, $4638);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4640 = self.idx;
                        var $4641 = self.code;
                        var $4642 = self.err;
                        var $4643 = Parser$Reply$error$($4640, $4641, $4642);
                        var $4639 = $4643;
                        break;
                    case 'Parser.Reply.value':
                        var $4644 = self.idx;
                        var $4645 = self.code;
                        var $4646 = self.val;
                        var self = Kind$Parser$text$("]", $4644, $4645);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4648 = self.idx;
                                var $4649 = self.code;
                                var $4650 = self.err;
                                var $4651 = Parser$Reply$error$($4648, $4649, $4650);
                                var $4647 = $4651;
                                break;
                            case 'Parser.Reply.value':
                                var $4652 = self.idx;
                                var $4653 = self.code;
                                var self = Kind$Parser$text$("<-", $4652, $4653);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4655 = self.idx;
                                        var $4656 = self.code;
                                        var $4657 = self.err;
                                        var $4658 = Parser$Reply$error$($4655, $4656, $4657);
                                        var $4654 = $4658;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4659 = self.idx;
                                        var $4660 = self.code;
                                        var self = Kind$Parser$term$($4659, $4660);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4662 = self.idx;
                                                var $4663 = self.code;
                                                var $4664 = self.err;
                                                var $4665 = Parser$Reply$error$($4662, $4663, $4664);
                                                var $4661 = $4665;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4666 = self.idx;
                                                var $4667 = self.code;
                                                var $4668 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $4666, $4667);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4670 = self.idx;
                                                        var $4671 = self.code;
                                                        var $4672 = self.err;
                                                        var $4673 = Parser$Reply$error$($4670, $4671, $4672);
                                                        var $4669 = $4673;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4674 = self.idx;
                                                        var $4675 = self.code;
                                                        var $4676 = self.val;
                                                        var _term$23 = Kind$Term$ref$("List.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $4646);
                                                        var _term$26 = Kind$Term$app$(_term$25, $4668);
                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);
                                                        var $4677 = Parser$Reply$value$($4674, $4675, Kind$Term$ori$($4676, _term$27));
                                                        var $4669 = $4677;
                                                        break;
                                                };
                                                var $4661 = $4669;
                                                break;
                                        };
                                        var $4654 = $4661;
                                        break;
                                };
                                var $4647 = $4654;
                                break;
                        };
                        var $4639 = $4647;
                        break;
                };
                var $4632 = $4639;
                break;
        };
        return $4632;
    };
    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);

    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4679 = self.idx;
                var $4680 = self.code;
                var $4681 = self.err;
                var $4682 = Parser$Reply$error$($4679, $4680, $4681);
                var $4678 = $4682;
                break;
            case 'Parser.Reply.value':
                var $4683 = self.idx;
                var $4684 = self.code;
                var self = Kind$Parser$term$($4683, $4684);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4686 = self.idx;
                        var $4687 = self.code;
                        var $4688 = self.err;
                        var $4689 = Parser$Reply$error$($4686, $4687, $4688);
                        var $4685 = $4689;
                        break;
                    case 'Parser.Reply.value':
                        var $4690 = self.idx;
                        var $4691 = self.code;
                        var $4692 = self.val;
                        var self = Kind$Parser$text$("]", $4690, $4691);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4694 = self.idx;
                                var $4695 = self.code;
                                var $4696 = self.err;
                                var $4697 = Parser$Reply$error$($4694, $4695, $4696);
                                var $4693 = $4697;
                                break;
                            case 'Parser.Reply.value':
                                var $4698 = self.idx;
                                var $4699 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $4698, $4699);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4701 = self.idx;
                                        var $4702 = self.code;
                                        var $4703 = self.err;
                                        var $4704 = Parser$Reply$error$($4701, $4702, $4703);
                                        var $4700 = $4704;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4705 = self.idx;
                                        var $4706 = self.code;
                                        var $4707 = self.val;
                                        var _term$17 = Kind$Term$ref$("List.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $4692);
                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);
                                        var $4708 = Parser$Reply$value$($4705, $4706, Kind$Term$ori$($4707, _term$20));
                                        var $4700 = $4708;
                                        break;
                                };
                                var $4693 = $4700;
                                break;
                        };
                        var $4685 = $4693;
                        break;
                };
                var $4678 = $4685;
                break;
        };
        return $4678;
    };
    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);

    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4710 = self.idx;
                var $4711 = self.code;
                var $4712 = self.err;
                var $4713 = Parser$Reply$error$($4710, $4711, $4712);
                var $4709 = $4713;
                break;
            case 'Parser.Reply.value':
                var $4714 = self.idx;
                var $4715 = self.code;
                var self = Kind$Parser$term$($4714, $4715);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4717 = self.idx;
                        var $4718 = self.code;
                        var $4719 = self.err;
                        var $4720 = Parser$Reply$error$($4717, $4718, $4719);
                        var $4716 = $4720;
                        break;
                    case 'Parser.Reply.value':
                        var $4721 = self.idx;
                        var $4722 = self.code;
                        var $4723 = self.val;
                        var self = Kind$Parser$text$("}", $4721, $4722);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4725 = self.idx;
                                var $4726 = self.code;
                                var $4727 = self.err;
                                var $4728 = Parser$Reply$error$($4725, $4726, $4727);
                                var $4724 = $4728;
                                break;
                            case 'Parser.Reply.value':
                                var $4729 = self.idx;
                                var $4730 = self.code;
                                var self = Kind$Parser$text$("<-", $4729, $4730);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4732 = self.idx;
                                        var $4733 = self.code;
                                        var $4734 = self.err;
                                        var $4735 = Parser$Reply$error$($4732, $4733, $4734);
                                        var $4731 = $4735;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4736 = self.idx;
                                        var $4737 = self.code;
                                        var self = Kind$Parser$term$($4736, $4737);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4739 = self.idx;
                                                var $4740 = self.code;
                                                var $4741 = self.err;
                                                var $4742 = Parser$Reply$error$($4739, $4740, $4741);
                                                var $4738 = $4742;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4743 = self.idx;
                                                var $4744 = self.code;
                                                var $4745 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $4743, $4744);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4747 = self.idx;
                                                        var $4748 = self.code;
                                                        var $4749 = self.err;
                                                        var $4750 = Parser$Reply$error$($4747, $4748, $4749);
                                                        var $4746 = $4750;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4751 = self.idx;
                                                        var $4752 = self.code;
                                                        var $4753 = self.val;
                                                        var _term$23 = Kind$Term$ref$("Map.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $4723);
                                                        var _term$26 = Kind$Term$app$(_term$25, $4745);
                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);
                                                        var $4754 = Parser$Reply$value$($4751, $4752, Kind$Term$ori$($4753, _term$27));
                                                        var $4746 = $4754;
                                                        break;
                                                };
                                                var $4738 = $4746;
                                                break;
                                        };
                                        var $4731 = $4738;
                                        break;
                                };
                                var $4724 = $4731;
                                break;
                        };
                        var $4716 = $4724;
                        break;
                };
                var $4709 = $4716;
                break;
        };
        return $4709;
    };
    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);

    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4756 = self.idx;
                var $4757 = self.code;
                var $4758 = self.err;
                var $4759 = Parser$Reply$error$($4756, $4757, $4758);
                var $4755 = $4759;
                break;
            case 'Parser.Reply.value':
                var $4760 = self.idx;
                var $4761 = self.code;
                var self = Kind$Parser$term$($4760, $4761);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4763 = self.idx;
                        var $4764 = self.code;
                        var $4765 = self.err;
                        var $4766 = Parser$Reply$error$($4763, $4764, $4765);
                        var $4762 = $4766;
                        break;
                    case 'Parser.Reply.value':
                        var $4767 = self.idx;
                        var $4768 = self.code;
                        var $4769 = self.val;
                        var self = Kind$Parser$text$("}", $4767, $4768);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4771 = self.idx;
                                var $4772 = self.code;
                                var $4773 = self.err;
                                var $4774 = Parser$Reply$error$($4771, $4772, $4773);
                                var $4770 = $4774;
                                break;
                            case 'Parser.Reply.value':
                                var $4775 = self.idx;
                                var $4776 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $4775, $4776);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4778 = self.idx;
                                        var $4779 = self.code;
                                        var $4780 = self.err;
                                        var $4781 = Parser$Reply$error$($4778, $4779, $4780);
                                        var $4777 = $4781;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4782 = self.idx;
                                        var $4783 = self.code;
                                        var $4784 = self.val;
                                        var _term$17 = Kind$Term$ref$("Map.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $4769);
                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);
                                        var $4785 = Parser$Reply$value$($4782, $4783, Kind$Term$ori$($4784, _term$20));
                                        var $4777 = $4785;
                                        break;
                                };
                                var $4770 = $4777;
                                break;
                        };
                        var $4762 = $4770;
                        break;
                };
                var $4755 = $4762;
                break;
        };
        return $4755;
    };
    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);

    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4787 = self.idx;
                var $4788 = self.code;
                var $4789 = self.err;
                var $4790 = Parser$Reply$error$($4787, $4788, $4789);
                var $4786 = $4790;
                break;
            case 'Parser.Reply.value':
                var $4791 = self.idx;
                var $4792 = self.code;
                var self = Kind$Parser$term$($4791, $4792);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4794 = self.idx;
                        var $4795 = self.code;
                        var $4796 = self.err;
                        var $4797 = Parser$Reply$error$($4794, $4795, $4796);
                        var $4793 = $4797;
                        break;
                    case 'Parser.Reply.value':
                        var $4798 = self.idx;
                        var $4799 = self.code;
                        var $4800 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4798, $4799);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4802 = self.idx;
                                var $4803 = self.code;
                                var $4804 = self.err;
                                var $4805 = Parser$Reply$error$($4802, $4803, $4804);
                                var $4801 = $4805;
                                break;
                            case 'Parser.Reply.value':
                                var $4806 = self.idx;
                                var $4807 = self.code;
                                var $4808 = self.val;
                                var $4809 = Parser$Reply$value$($4806, $4807, Kind$Term$ori$($4808, Kind$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $4810 = $4800;
                                    return $4810;
                                }))));
                                var $4801 = $4809;
                                break;
                        };
                        var $4793 = $4801;
                        break;
                };
                var $4786 = $4793;
                break;
        };
        return $4786;
    };
    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);

    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4812 = self.idx;
                var $4813 = self.code;
                var $4814 = self.err;
                var $4815 = Parser$Reply$error$($4812, $4813, $4814);
                var $4811 = $4815;
                break;
            case 'Parser.Reply.value':
                var $4816 = self.idx;
                var $4817 = self.code;
                var self = Parser$text$(" ", $4816, $4817);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4819 = self.idx;
                        var $4820 = self.code;
                        var $4821 = self.err;
                        var $4822 = Parser$Reply$error$($4819, $4820, $4821);
                        var $4818 = $4822;
                        break;
                    case 'Parser.Reply.value':
                        var $4823 = self.idx;
                        var $4824 = self.code;
                        var self = Kind$Parser$term$($4823, $4824);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4826 = self.idx;
                                var $4827 = self.code;
                                var $4828 = self.err;
                                var $4829 = Parser$Reply$error$($4826, $4827, $4828);
                                var $4825 = $4829;
                                break;
                            case 'Parser.Reply.value':
                                var $4830 = self.idx;
                                var $4831 = self.code;
                                var $4832 = self.val;
                                var self = Kind$Parser$stop$(_init$3, $4830, $4831);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4834 = self.idx;
                                        var $4835 = self.code;
                                        var $4836 = self.err;
                                        var $4837 = Parser$Reply$error$($4834, $4835, $4836);
                                        var $4833 = $4837;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4838 = self.idx;
                                        var $4839 = self.code;
                                        var $4840 = self.val;
                                        var _term$19 = Kind$Term$ref$(_ref$2);
                                        var _term$20 = Kind$Term$app$(_term$19, _val0$4);
                                        var _term$21 = Kind$Term$app$(_term$20, $4832);
                                        var $4841 = Parser$Reply$value$($4838, $4839, Kind$Term$ori$($4840, _term$21));
                                        var $4833 = $4841;
                                        break;
                                };
                                var $4825 = $4833;
                                break;
                        };
                        var $4818 = $4825;
                        break;
                };
                var $4811 = $4818;
                break;
        };
        return $4811;
    };
    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
    const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
    const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
    const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
    const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
    const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
    const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
    const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
    const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
    const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
    const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
    const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");

    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("<>", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4843 = self.idx;
                var $4844 = self.code;
                var $4845 = self.err;
                var $4846 = Parser$Reply$error$($4843, $4844, $4845);
                var $4842 = $4846;
                break;
            case 'Parser.Reply.value':
                var $4847 = self.idx;
                var $4848 = self.code;
                var self = Kind$Parser$term$($4847, $4848);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4850 = self.idx;
                        var $4851 = self.code;
                        var $4852 = self.err;
                        var $4853 = Parser$Reply$error$($4850, $4851, $4852);
                        var $4849 = $4853;
                        break;
                    case 'Parser.Reply.value':
                        var $4854 = self.idx;
                        var $4855 = self.code;
                        var $4856 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4854, $4855);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4858 = self.idx;
                                var $4859 = self.code;
                                var $4860 = self.err;
                                var $4861 = Parser$Reply$error$($4858, $4859, $4860);
                                var $4857 = $4861;
                                break;
                            case 'Parser.Reply.value':
                                var $4862 = self.idx;
                                var $4863 = self.code;
                                var $4864 = self.val;
                                var _term$14 = Kind$Term$ref$("Maybe.default");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4856);
                                var $4865 = Parser$Reply$value$($4862, $4863, Kind$Term$ori$($4864, _term$17));
                                var $4857 = $4865;
                                break;
                        };
                        var $4849 = $4857;
                        break;
                };
                var $4842 = $4849;
                break;
        };
        return $4842;
    };
    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);

    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4867 = self.idx;
                var $4868 = self.code;
                var $4869 = self.err;
                var $4870 = Parser$Reply$error$($4867, $4868, $4869);
                var $4866 = $4870;
                break;
            case 'Parser.Reply.value':
                var $4871 = self.idx;
                var $4872 = self.code;
                var self = Kind$Parser$term$($4871, $4872);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4874 = self.idx;
                        var $4875 = self.code;
                        var $4876 = self.err;
                        var $4877 = Parser$Reply$error$($4874, $4875, $4876);
                        var $4873 = $4877;
                        break;
                    case 'Parser.Reply.value':
                        var $4878 = self.idx;
                        var $4879 = self.code;
                        var $4880 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4878, $4879);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4882 = self.idx;
                                var $4883 = self.code;
                                var $4884 = self.err;
                                var $4885 = Parser$Reply$error$($4882, $4883, $4884);
                                var $4881 = $4885;
                                break;
                            case 'Parser.Reply.value':
                                var $4886 = self.idx;
                                var $4887 = self.code;
                                var _term$14 = Kind$Term$ref$("List.cons");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _head$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4880);
                                var self = Kind$Parser$stop$(_init$1, $4886, $4887);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4889 = self.idx;
                                        var $4890 = self.code;
                                        var $4891 = self.err;
                                        var $4892 = Parser$Reply$error$($4889, $4890, $4891);
                                        var $4888 = $4892;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4893 = self.idx;
                                        var $4894 = self.code;
                                        var $4895 = self.val;
                                        var $4896 = Parser$Reply$value$($4893, $4894, Kind$Term$ori$($4895, _term$17));
                                        var $4888 = $4896;
                                        break;
                                };
                                var $4881 = $4888;
                                break;
                        };
                        var $4873 = $4881;
                        break;
                };
                var $4866 = $4873;
                break;
        };
        return $4866;
    };
    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);

    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4898 = self.idx;
                var $4899 = self.code;
                var $4900 = self.err;
                var $4901 = Parser$Reply$error$($4898, $4899, $4900);
                var $4897 = $4901;
                break;
            case 'Parser.Reply.value':
                var $4902 = self.idx;
                var $4903 = self.code;
                var self = Kind$Parser$term$($4902, $4903);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4905 = self.idx;
                        var $4906 = self.code;
                        var $4907 = self.err;
                        var $4908 = Parser$Reply$error$($4905, $4906, $4907);
                        var $4904 = $4908;
                        break;
                    case 'Parser.Reply.value':
                        var $4909 = self.idx;
                        var $4910 = self.code;
                        var $4911 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4909, $4910);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4913 = self.idx;
                                var $4914 = self.code;
                                var $4915 = self.err;
                                var $4916 = Parser$Reply$error$($4913, $4914, $4915);
                                var $4912 = $4916;
                                break;
                            case 'Parser.Reply.value':
                                var $4917 = self.idx;
                                var $4918 = self.code;
                                var _term$14 = Kind$Term$ref$("List.concat");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4911);
                                var self = Kind$Parser$stop$(_init$1, $4917, $4918);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4920 = self.idx;
                                        var $4921 = self.code;
                                        var $4922 = self.err;
                                        var $4923 = Parser$Reply$error$($4920, $4921, $4922);
                                        var $4919 = $4923;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4924 = self.idx;
                                        var $4925 = self.code;
                                        var $4926 = self.val;
                                        var $4927 = Parser$Reply$value$($4924, $4925, Kind$Term$ori$($4926, _term$17));
                                        var $4919 = $4927;
                                        break;
                                };
                                var $4912 = $4919;
                                break;
                        };
                        var $4904 = $4912;
                        break;
                };
                var $4897 = $4904;
                break;
        };
        return $4897;
    };
    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);

    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4929 = self.idx;
                var $4930 = self.code;
                var $4931 = self.err;
                var $4932 = Parser$Reply$error$($4929, $4930, $4931);
                var $4928 = $4932;
                break;
            case 'Parser.Reply.value':
                var $4933 = self.idx;
                var $4934 = self.code;
                var self = Kind$Parser$term$($4933, $4934);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4936 = self.idx;
                        var $4937 = self.code;
                        var $4938 = self.err;
                        var $4939 = Parser$Reply$error$($4936, $4937, $4938);
                        var $4935 = $4939;
                        break;
                    case 'Parser.Reply.value':
                        var $4940 = self.idx;
                        var $4941 = self.code;
                        var $4942 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4940, $4941);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4944 = self.idx;
                                var $4945 = self.code;
                                var $4946 = self.err;
                                var $4947 = Parser$Reply$error$($4944, $4945, $4946);
                                var $4943 = $4947;
                                break;
                            case 'Parser.Reply.value':
                                var $4948 = self.idx;
                                var $4949 = self.code;
                                var _term$14 = Kind$Term$ref$("String.concat");
                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);
                                var _term$16 = Kind$Term$app$(_term$15, $4942);
                                var self = Kind$Parser$stop$(_init$1, $4948, $4949);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4951 = self.idx;
                                        var $4952 = self.code;
                                        var $4953 = self.err;
                                        var $4954 = Parser$Reply$error$($4951, $4952, $4953);
                                        var $4950 = $4954;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4955 = self.idx;
                                        var $4956 = self.code;
                                        var $4957 = self.val;
                                        var $4958 = Parser$Reply$value$($4955, $4956, Kind$Term$ori$($4957, _term$16));
                                        var $4950 = $4958;
                                        break;
                                };
                                var $4943 = $4950;
                                break;
                        };
                        var $4935 = $4943;
                        break;
                };
                var $4928 = $4935;
                break;
        };
        return $4928;
    };
    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);

    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4960 = self.idx;
                var $4961 = self.code;
                var $4962 = self.err;
                var $4963 = Parser$Reply$error$($4960, $4961, $4962);
                var $4959 = $4963;
                break;
            case 'Parser.Reply.value':
                var $4964 = self.idx;
                var $4965 = self.code;
                var self = Kind$Parser$term$($4964, $4965);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4967 = self.idx;
                        var $4968 = self.code;
                        var $4969 = self.err;
                        var $4970 = Parser$Reply$error$($4967, $4968, $4969);
                        var $4966 = $4970;
                        break;
                    case 'Parser.Reply.value':
                        var $4971 = self.idx;
                        var $4972 = self.code;
                        var $4973 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4971, $4972);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4975 = self.idx;
                                var $4976 = self.code;
                                var $4977 = self.err;
                                var $4978 = Parser$Reply$error$($4975, $4976, $4977);
                                var $4974 = $4978;
                                break;
                            case 'Parser.Reply.value':
                                var $4979 = self.idx;
                                var $4980 = self.code;
                                var $4981 = self.val;
                                var _term$14 = Kind$Term$ref$("Sigma.new");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);
                                var _term$18 = Kind$Term$app$(_term$17, $4973);
                                var $4982 = Parser$Reply$value$($4979, $4980, Kind$Term$ori$($4981, _term$18));
                                var $4974 = $4982;
                                break;
                        };
                        var $4966 = $4974;
                        break;
                };
                var $4959 = $4966;
                break;
        };
        return $4959;
    };
    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);

    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4984 = self.idx;
                var $4985 = self.code;
                var $4986 = self.err;
                var $4987 = Parser$Reply$error$($4984, $4985, $4986);
                var $4983 = $4987;
                break;
            case 'Parser.Reply.value':
                var $4988 = self.idx;
                var $4989 = self.code;
                var self = Kind$Parser$term$($4988, $4989);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4991 = self.idx;
                        var $4992 = self.code;
                        var $4993 = self.err;
                        var $4994 = Parser$Reply$error$($4991, $4992, $4993);
                        var $4990 = $4994;
                        break;
                    case 'Parser.Reply.value':
                        var $4995 = self.idx;
                        var $4996 = self.code;
                        var $4997 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4995, $4996);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4999 = self.idx;
                                var $5000 = self.code;
                                var $5001 = self.err;
                                var $5002 = Parser$Reply$error$($4999, $5000, $5001);
                                var $4998 = $5002;
                                break;
                            case 'Parser.Reply.value':
                                var $5003 = self.idx;
                                var $5004 = self.code;
                                var $5005 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4997);
                                var $5006 = Parser$Reply$value$($5003, $5004, Kind$Term$ori$($5005, _term$17));
                                var $4998 = $5006;
                                break;
                        };
                        var $4990 = $4998;
                        break;
                };
                var $4983 = $4990;
                break;
        };
        return $4983;
    };
    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);

    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5008 = self.idx;
                var $5009 = self.code;
                var $5010 = self.err;
                var $5011 = Parser$Reply$error$($5008, $5009, $5010);
                var $5007 = $5011;
                break;
            case 'Parser.Reply.value':
                var $5012 = self.idx;
                var $5013 = self.code;
                var self = Kind$Parser$term$($5012, $5013);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5015 = self.idx;
                        var $5016 = self.code;
                        var $5017 = self.err;
                        var $5018 = Parser$Reply$error$($5015, $5016, $5017);
                        var $5014 = $5018;
                        break;
                    case 'Parser.Reply.value':
                        var $5019 = self.idx;
                        var $5020 = self.code;
                        var $5021 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5019, $5020);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5023 = self.idx;
                                var $5024 = self.code;
                                var $5025 = self.err;
                                var $5026 = Parser$Reply$error$($5023, $5024, $5025);
                                var $5022 = $5026;
                                break;
                            case 'Parser.Reply.value':
                                var $5027 = self.idx;
                                var $5028 = self.code;
                                var $5029 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5021);
                                var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"), _term$17);
                                var $5030 = Parser$Reply$value$($5027, $5028, Kind$Term$ori$($5029, _term$18));
                                var $5022 = $5030;
                                break;
                        };
                        var $5014 = $5022;
                        break;
                };
                var $5007 = $5014;
                break;
        };
        return $5007;
    };
    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);

    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5032 = self.idx;
                var $5033 = self.code;
                var $5034 = self.err;
                var $5035 = Parser$Reply$error$($5032, $5033, $5034);
                var $5031 = $5035;
                break;
            case 'Parser.Reply.value':
                var $5036 = self.idx;
                var $5037 = self.code;
                var self = Kind$Parser$text$("rewrite", $5036, $5037);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5039 = self.idx;
                        var $5040 = self.code;
                        var $5041 = self.err;
                        var $5042 = Parser$Reply$error$($5039, $5040, $5041);
                        var $5038 = $5042;
                        break;
                    case 'Parser.Reply.value':
                        var $5043 = self.idx;
                        var $5044 = self.code;
                        var self = Kind$Parser$name1$($5043, $5044);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5046 = self.idx;
                                var $5047 = self.code;
                                var $5048 = self.err;
                                var $5049 = Parser$Reply$error$($5046, $5047, $5048);
                                var $5045 = $5049;
                                break;
                            case 'Parser.Reply.value':
                                var $5050 = self.idx;
                                var $5051 = self.code;
                                var $5052 = self.val;
                                var self = Kind$Parser$text$("in", $5050, $5051);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5054 = self.idx;
                                        var $5055 = self.code;
                                        var $5056 = self.err;
                                        var $5057 = Parser$Reply$error$($5054, $5055, $5056);
                                        var $5053 = $5057;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5058 = self.idx;
                                        var $5059 = self.code;
                                        var self = Kind$Parser$term$($5058, $5059);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5061 = self.idx;
                                                var $5062 = self.code;
                                                var $5063 = self.err;
                                                var $5064 = Parser$Reply$error$($5061, $5062, $5063);
                                                var $5060 = $5064;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5065 = self.idx;
                                                var $5066 = self.code;
                                                var $5067 = self.val;
                                                var self = Kind$Parser$text$("with", $5065, $5066);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5069 = self.idx;
                                                        var $5070 = self.code;
                                                        var $5071 = self.err;
                                                        var $5072 = Parser$Reply$error$($5069, $5070, $5071);
                                                        var $5068 = $5072;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5073 = self.idx;
                                                        var $5074 = self.code;
                                                        var self = Kind$Parser$term$($5073, $5074);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5076 = self.idx;
                                                                var $5077 = self.code;
                                                                var $5078 = self.err;
                                                                var $5079 = Parser$Reply$error$($5076, $5077, $5078);
                                                                var $5075 = $5079;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5080 = self.idx;
                                                                var $5081 = self.code;
                                                                var $5082 = self.val;
                                                                var self = Kind$Parser$stop$(_init$1, $5080, $5081);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $5084 = self.idx;
                                                                        var $5085 = self.code;
                                                                        var $5086 = self.err;
                                                                        var $5087 = Parser$Reply$error$($5084, $5085, $5086);
                                                                        var $5083 = $5087;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $5088 = self.idx;
                                                                        var $5089 = self.code;
                                                                        var $5090 = self.val;
                                                                        var _term$29 = Kind$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                        var _term$33 = Kind$Term$app$(_term$32, $5082);
                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($5052, (_x$34 => {
                                                                            var $5092 = $5067;
                                                                            return $5092;
                                                                        })));
                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);
                                                                        var $5091 = Parser$Reply$value$($5088, $5089, Kind$Term$ori$($5090, _term$35));
                                                                        var $5083 = $5091;
                                                                        break;
                                                                };
                                                                var $5075 = $5083;
                                                                break;
                                                        };
                                                        var $5068 = $5075;
                                                        break;
                                                };
                                                var $5060 = $5068;
                                                break;
                                        };
                                        var $5053 = $5060;
                                        break;
                                };
                                var $5045 = $5053;
                                break;
                        };
                        var $5038 = $5045;
                        break;
                };
                var $5031 = $5038;
                break;
        };
        return $5031;
    };
    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);

    function Kind$Term$ann$(_done$1, _term$2, _type$3) {
        var $5093 = ({
            _: 'Kind.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $5093;
    };
    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);

    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5095 = self.idx;
                var $5096 = self.code;
                var $5097 = self.err;
                var $5098 = Parser$Reply$error$($5095, $5096, $5097);
                var $5094 = $5098;
                break;
            case 'Parser.Reply.value':
                var $5099 = self.idx;
                var $5100 = self.code;
                var self = Kind$Parser$term$($5099, $5100);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5102 = self.idx;
                        var $5103 = self.code;
                        var $5104 = self.err;
                        var $5105 = Parser$Reply$error$($5102, $5103, $5104);
                        var $5101 = $5105;
                        break;
                    case 'Parser.Reply.value':
                        var $5106 = self.idx;
                        var $5107 = self.code;
                        var $5108 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5106, $5107);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5110 = self.idx;
                                var $5111 = self.code;
                                var $5112 = self.err;
                                var $5113 = Parser$Reply$error$($5110, $5111, $5112);
                                var $5109 = $5113;
                                break;
                            case 'Parser.Reply.value':
                                var $5114 = self.idx;
                                var $5115 = self.code;
                                var $5116 = self.val;
                                var $5117 = Parser$Reply$value$($5114, $5115, Kind$Term$ori$($5116, Kind$Term$ann$(Bool$false, _term$2, $5108)));
                                var $5109 = $5117;
                                break;
                        };
                        var $5101 = $5109;
                        break;
                };
                var $5094 = $5101;
                break;
        };
        return $5094;
    };
    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);

    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5119 = self.idx;
                var $5120 = self.code;
                var $5121 = self.err;
                var $5122 = Parser$Reply$error$($5119, $5120, $5121);
                var $5118 = $5122;
                break;
            case 'Parser.Reply.value':
                var $5123 = self.idx;
                var $5124 = self.code;
                var self = Kind$Parser$stop$(_init$1, $5123, $5124);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5126 = self.idx;
                        var $5127 = self.code;
                        var $5128 = self.err;
                        var $5129 = Parser$Reply$error$($5126, $5127, $5128);
                        var $5125 = $5129;
                        break;
                    case 'Parser.Reply.value':
                        var $5130 = self.idx;
                        var $5131 = self.code;
                        var $5132 = self.val;
                        var $5133 = Parser$Reply$value$($5130, $5131, Kind$Term$ori$($5132, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));
                        var $5125 = $5133;
                        break;
                };
                var $5118 = $5125;
                break;
        };
        return $5118;
    };
    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);

    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $5135 = self.idx;
                        var $5136 = self.code;
                        var $5137 = self.val;
                        var $5138 = Kind$Parser$suffix$(_init$1, $5137, $5135, $5136);
                        var $5134 = $5138;
                        break;
                    case 'Parser.Reply.error':
                        var $5139 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $5134 = $5139;
                        break;
                };
                return $5134;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);

    function Kind$Parser$term$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5141 = self.idx;
                var $5142 = self.code;
                var $5143 = self.err;
                var $5144 = Parser$Reply$error$($5141, $5142, $5143);
                var $5140 = $5144;
                break;
            case 'Parser.Reply.value':
                var $5145 = self.idx;
                var $5146 = self.code;
                var $5147 = self.val;
                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string, List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$not, List$cons$(Kind$Parser$left, List$cons$(Kind$Parser$right, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$float$64, List$cons$(Kind$Parser$float$32, List$cons$(Kind$Parser$machine_integer$signed$(256n), List$cons$(Kind$Parser$machine_integer$signed$(128n), List$cons$(Kind$Parser$machine_integer$signed$(64n), List$cons$(Kind$Parser$machine_integer$signed$(32n), List$cons$(Kind$Parser$machine_integer$signed$(16n), List$cons$(Kind$Parser$machine_integer$signed$(8n), List$cons$(Kind$Parser$int, List$cons$(Kind$Parser$machine_integer$unsigned$(256n), List$cons$(Kind$Parser$machine_integer$unsigned$(128n), List$cons$(Kind$Parser$machine_integer$unsigned$(64n), List$cons$(Kind$Parser$machine_integer$unsigned$(32n), List$cons$(Kind$Parser$machine_integer$unsigned$(16n), List$cons$(Kind$Parser$machine_integer$unsigned$(8n), List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))($5145)($5146);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5149 = self.idx;
                        var $5150 = self.code;
                        var $5151 = self.err;
                        var $5152 = Parser$Reply$error$($5149, $5150, $5151);
                        var $5148 = $5152;
                        break;
                    case 'Parser.Reply.value':
                        var $5153 = self.idx;
                        var $5154 = self.code;
                        var $5155 = self.val;
                        var $5156 = Kind$Parser$suffix$($5147, $5155, $5153, $5154);
                        var $5148 = $5156;
                        break;
                };
                var $5140 = $5148;
                break;
        };
        return $5140;
    };
    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);

    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {
        var self = Kind$Parser$name$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5158 = self.idx;
                var $5159 = self.code;
                var $5160 = self.err;
                var $5161 = Parser$Reply$error$($5158, $5159, $5160);
                var $5157 = $5161;
                break;
            case 'Parser.Reply.value':
                var $5162 = self.idx;
                var $5163 = self.code;
                var $5164 = self.val;
                var self = Kind$Parser$text$(_sep$1, $5162, $5163);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5166 = self.idx;
                        var $5167 = self.code;
                        var $5168 = self.err;
                        var $5169 = Parser$Reply$error$($5166, $5167, $5168);
                        var $5165 = $5169;
                        break;
                    case 'Parser.Reply.value':
                        var $5170 = self.idx;
                        var $5171 = self.code;
                        var self = Kind$Parser$term$($5170, $5171);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5173 = self.idx;
                                var $5174 = self.code;
                                var $5175 = self.err;
                                var $5176 = Parser$Reply$error$($5173, $5174, $5175);
                                var $5172 = $5176;
                                break;
                            case 'Parser.Reply.value':
                                var $5177 = self.idx;
                                var $5178 = self.code;
                                var $5179 = self.val;
                                var $5180 = Parser$Reply$value$($5177, $5178, Pair$new$($5164, $5179));
                                var $5172 = $5180;
                                break;
                        };
                        var $5165 = $5172;
                        break;
                };
                var $5157 = $5165;
                break;
        };
        return $5157;
    };
    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);

    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {
        var $5181 = ({
            _: 'Kind.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $5181;
    };
    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);

    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$((() => {
            var self = _eras$2;
            if (self) {
                var $5183 = "<";
                return $5183;
            } else {
                var $5184 = "(";
                return $5184;
            };
        })(), _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5185 = self.idx;
                var $5186 = self.code;
                var $5187 = self.err;
                var $5188 = Parser$Reply$error$($5185, $5186, $5187);
                var $5182 = $5188;
                break;
            case 'Parser.Reply.value':
                var $5189 = self.idx;
                var $5190 = self.code;
                var self = Parser$until1$(Kind$Parser$text((() => {
                    var self = _eras$2;
                    if (self) {
                        var $5192 = ">";
                        return $5192;
                    } else {
                        var $5193 = ")";
                        return $5193;
                    };
                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $5189, $5190);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5194 = self.idx;
                        var $5195 = self.code;
                        var $5196 = self.err;
                        var $5197 = Parser$Reply$error$($5194, $5195, $5196);
                        var $5191 = $5197;
                        break;
                    case 'Parser.Reply.value':
                        var $5198 = self.idx;
                        var $5199 = self.code;
                        var $5200 = self.val;
                        var $5201 = Parser$Reply$value$($5198, $5199, List$mapped$($5200, (_pair$11 => {
                            var self = _pair$11;
                            switch (self._) {
                                case 'Pair.new':
                                    var $5203 = self.fst;
                                    var $5204 = self.snd;
                                    var $5205 = Kind$Binder$new$(_eras$2, $5203, $5204);
                                    var $5202 = $5205;
                                    break;
                            };
                            return $5202;
                        })));
                        var $5191 = $5201;
                        break;
                };
                var $5182 = $5191;
                break;
        };
        return $5182;
    };
    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $5207 = self.head;
                var $5208 = self.tail;
                var $5209 = List$cons$($5207, List$concat$($5208, _bs$3));
                var $5206 = $5209;
                break;
            case 'List.nil':
                var $5210 = _bs$3;
                var $5206 = $5210;
                break;
        };
        return $5206;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $5212 = self.head;
                var $5213 = self.tail;
                var $5214 = List$concat$($5212, List$flatten$($5213));
                var $5211 = $5214;
                break;
            case 'List.nil':
                var $5215 = List$nil;
                var $5211 = $5215;
                break;
        };
        return $5211;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5217 = self.idx;
                var $5218 = self.code;
                var $5219 = self.err;
                var $5220 = Parser$Reply$error$($5217, $5218, $5219);
                var $5216 = $5220;
                break;
            case 'Parser.Reply.value':
                var $5221 = self.idx;
                var $5222 = self.code;
                var $5223 = self.val;
                var $5224 = Parser$Reply$value$($5221, $5222, List$flatten$($5223));
                var $5216 = $5224;
                break;
        };
        return $5216;
    };
    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);
    const List$length = a0 => (list_length(a0));

    function Kind$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.cons':
                var $5226 = self.head;
                var $5227 = self.tail;
                var self = $5226;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5229 = self.eras;
                        var $5230 = self.name;
                        var $5231 = self.term;
                        var $5232 = Kind$Term$all$($5229, "", $5230, $5231, (_s$8 => _x$9 => {
                            var $5233 = Kind$Parser$make_forall$($5227, _body$2);
                            return $5233;
                        }));
                        var $5228 = $5232;
                        break;
                };
                var $5225 = $5228;
                break;
            case 'List.nil':
                var $5234 = _body$2;
                var $5225 = $5234;
                break;
        };
        return $5225;
    };
    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $5235 = List$at$(_index$2, List$reverse$(_list$3));
        return $5235;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Kind$Term$var$(_name$1, _indx$2) {
        var $5236 = ({
            _: 'Kind.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $5236;
    };
    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);

    function Kind$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $5238 = Pair$new$("", 0n);
            var $5237 = $5238;
        } else {
            var $5239 = self.charCodeAt(0);
            var $5240 = self.slice(1);
            var _name_skips$4 = Kind$Context$get_name_skips$($5240);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $5242 = self.fst;
                    var $5243 = self.snd;
                    var self = ($5239 === 94);
                    if (self) {
                        var $5245 = Pair$new$($5242, Nat$succ$($5243));
                        var $5244 = $5245;
                    } else {
                        var $5246 = Pair$new$(String$cons$($5239, $5242), $5243);
                        var $5244 = $5246;
                    };
                    var $5241 = $5244;
                    break;
            };
            var $5237 = $5241;
        };
        return $5237;
    };
    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);

    function Kind$Name$eql$(_a$1, _b$2) {
        var $5247 = (_a$1 === _b$2);
        return $5247;
    };
    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);

    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.cons':
                        var $5248 = self.head;
                        var $5249 = self.tail;
                        var self = $5248;
                        switch (self._) {
                            case 'Pair.new':
                                var $5251 = self.fst;
                                var $5252 = self.snd;
                                var self = Kind$Name$eql$(_name$1, $5251);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $5255 = Maybe$some$($5252);
                                        var $5254 = $5255;
                                    } else {
                                        var $5256 = (self - 1n);
                                        var $5257 = Kind$Context$find$go$(_name$1, $5256, $5249);
                                        var $5254 = $5257;
                                    };
                                    var $5253 = $5254;
                                } else {
                                    var $5258 = Kind$Context$find$go$(_name$1, _skip$2, $5249);
                                    var $5253 = $5258;
                                };
                                var $5250 = $5253;
                                break;
                        };
                        return $5250;
                    case 'List.nil':
                        var $5259 = Maybe$none;
                        return $5259;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);

    function Kind$Context$find$(_name$1, _ctx$2) {
        var self = Kind$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $5261 = self.fst;
                var $5262 = self.snd;
                var $5263 = Kind$Context$find$go$($5261, $5262, _ctx$2);
                var $5260 = $5263;
                break;
        };
        return $5260;
    };
    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);

    function Kind$Path$o$(_path$1, _x$2) {
        var $5264 = _path$1((_x$2 + '0'));
        return $5264;
    };
    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);

    function Kind$Path$i$(_path$1, _x$2) {
        var $5265 = _path$1((_x$2 + '1'));
        return $5265;
    };
    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);

    function Kind$Path$to_bits$(_path$1) {
        var $5266 = _path$1(Bits$e);
        return $5266;
    };
    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);

    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Kind.Term.var':
                var $5268 = self.name;
                var $5269 = self.indx;
                var self = List$at_last$($5269, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5271 = self.value;
                        var $5272 = Pair$snd$($5271);
                        var $5270 = $5272;
                        break;
                    case 'Maybe.none':
                        var $5273 = Kind$Term$var$($5268, $5269);
                        var $5270 = $5273;
                        break;
                };
                var $5267 = $5270;
                break;
            case 'Kind.Term.ref':
                var $5274 = self.name;
                var self = Kind$Context$find$($5274, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5276 = self.value;
                        var $5277 = $5276;
                        var $5275 = $5277;
                        break;
                    case 'Maybe.none':
                        var $5278 = Kind$Term$ref$($5274);
                        var $5275 = $5278;
                        break;
                };
                var $5267 = $5275;
                break;
            case 'Kind.Term.all':
                var $5279 = self.eras;
                var $5280 = self.self;
                var $5281 = self.name;
                var $5282 = self.xtyp;
                var $5283 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $5284 = Kind$Term$all$($5279, $5280, $5281, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5282), (_s$10 => _x$11 => {
                    var $5285 = Kind$Term$bind$(List$cons$(Pair$new$($5281, _x$11), List$cons$(Pair$new$($5280, _s$10), _vars$1)), Kind$Path$i(_path$2), $5283(Kind$Term$var$($5280, _vlen$9))(Kind$Term$var$($5281, Nat$succ$(_vlen$9))));
                    return $5285;
                }));
                var $5267 = $5284;
                break;
            case 'Kind.Term.lam':
                var $5286 = self.name;
                var $5287 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $5288 = Kind$Term$lam$($5286, (_x$7 => {
                    var $5289 = Kind$Term$bind$(List$cons$(Pair$new$($5286, _x$7), _vars$1), Kind$Path$o(_path$2), $5287(Kind$Term$var$($5286, _vlen$6)));
                    return $5289;
                }));
                var $5267 = $5288;
                break;
            case 'Kind.Term.app':
                var $5290 = self.func;
                var $5291 = self.argm;
                var $5292 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5290), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5291));
                var $5267 = $5292;
                break;
            case 'Kind.Term.let':
                var $5293 = self.name;
                var $5294 = self.expr;
                var $5295 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5296 = Kind$Term$let$($5293, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5294), (_x$8 => {
                    var $5297 = Kind$Term$bind$(List$cons$(Pair$new$($5293, _x$8), _vars$1), Kind$Path$i(_path$2), $5295(Kind$Term$var$($5293, _vlen$7)));
                    return $5297;
                }));
                var $5267 = $5296;
                break;
            case 'Kind.Term.def':
                var $5298 = self.name;
                var $5299 = self.expr;
                var $5300 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5301 = Kind$Term$def$($5298, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5299), (_x$8 => {
                    var $5302 = Kind$Term$bind$(List$cons$(Pair$new$($5298, _x$8), _vars$1), Kind$Path$i(_path$2), $5300(Kind$Term$var$($5298, _vlen$7)));
                    return $5302;
                }));
                var $5267 = $5301;
                break;
            case 'Kind.Term.ann':
                var $5303 = self.done;
                var $5304 = self.term;
                var $5305 = self.type;
                var $5306 = Kind$Term$ann$($5303, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5304), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5305));
                var $5267 = $5306;
                break;
            case 'Kind.Term.gol':
                var $5307 = self.name;
                var $5308 = self.dref;
                var $5309 = self.verb;
                var $5310 = Kind$Term$gol$($5307, $5308, $5309);
                var $5267 = $5310;
                break;
            case 'Kind.Term.nat':
                var $5311 = self.natx;
                var $5312 = Kind$Term$nat$($5311);
                var $5267 = $5312;
                break;
            case 'Kind.Term.chr':
                var $5313 = self.chrx;
                var $5314 = Kind$Term$chr$($5313);
                var $5267 = $5314;
                break;
            case 'Kind.Term.str':
                var $5315 = self.strx;
                var $5316 = Kind$Term$str$($5315);
                var $5267 = $5316;
                break;
            case 'Kind.Term.cse':
                var $5317 = self.expr;
                var $5318 = self.name;
                var $5319 = self.with;
                var $5320 = self.cses;
                var $5321 = self.moti;
                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5317);
                var _name$11 = $5318;
                var _wyth$12 = List$mapped$($5319, (_with_var$12 => {
                    var self = _with_var$12;
                    switch (self._) {
                        case 'Kind.Ann.new':
                            var $5324 = self.name;
                            var $5325 = self.term;
                            var $5326 = self.type;
                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $5325);
                            var self = $5326;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $5328 = self.value;
                                    var $5329 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $5328));
                                    var _with_var_type$17 = $5329;
                                    break;
                                case 'Maybe.none':
                                    var $5330 = Maybe$none;
                                    var _with_var_type$17 = $5330;
                                    break;
                            };
                            var $5327 = Kind$Ann$new$($5324, _with_var_term$16, _with_var_type$17);
                            var $5323 = $5327;
                            break;
                    };
                    return $5323;
                }));
                var _cses$13 = $5320;
                var _moti$14 = $5321;
                var $5322 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $5267 = $5322;
                break;
            case 'Kind.Term.ori':
                var $5331 = self.orig;
                var $5332 = self.expr;
                var $5333 = Kind$Term$ori$($5331, Kind$Term$bind$(_vars$1, _path$2, $5332));
                var $5267 = $5333;
                break;
            case 'Kind.Term.typ':
                var $5334 = Kind$Term$typ;
                var $5267 = $5334;
                break;
            case 'Kind.Term.hol':
                var $5335 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));
                var $5267 = $5335;
                break;
        };
        return $5267;
    };
    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);
    const Kind$Status$done = ({
        _: 'Kind.Status.done'
    });
    const Kind$Status$init = ({
        _: 'Kind.Status.init'
    });

    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $5336 = ({
            _: 'Kind.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $5336;
    };
    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var self = _done$9;
        if (self) {
            var $5338 = Kind$Status$done;
            var _stat$11 = $5338;
        } else {
            var $5339 = Kind$Status$init;
            var _stat$11 = $5339;
        };
        var $5337 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$11), _defs$10);
        return $5337;
    };
    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5341 = self.idx;
                var $5342 = self.code;
                var $5343 = self.err;
                var $5344 = Parser$Reply$error$($5341, $5342, $5343);
                var $5340 = $5344;
                break;
            case 'Parser.Reply.value':
                var $5345 = self.idx;
                var $5346 = self.code;
                var $5347 = self.val;
                var self = Kind$Parser$name1$($5345, $5346);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5349 = self.idx;
                        var $5350 = self.code;
                        var $5351 = self.err;
                        var $5352 = Parser$Reply$error$($5349, $5350, $5351);
                        var $5348 = $5352;
                        break;
                    case 'Parser.Reply.value':
                        var $5353 = self.idx;
                        var $5354 = self.code;
                        var $5355 = self.val;
                        var self = Parser$many$(Kind$Parser$binder(":"))($5353)($5354);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5357 = self.idx;
                                var $5358 = self.code;
                                var $5359 = self.err;
                                var $5360 = Parser$Reply$error$($5357, $5358, $5359);
                                var $5356 = $5360;
                                break;
                            case 'Parser.Reply.value':
                                var $5361 = self.idx;
                                var $5362 = self.code;
                                var $5363 = self.val;
                                var _args$15 = List$flatten$($5363);
                                var self = Kind$Parser$text$(":", $5361, $5362);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5365 = self.idx;
                                        var $5366 = self.code;
                                        var $5367 = self.err;
                                        var $5368 = Parser$Reply$error$($5365, $5366, $5367);
                                        var $5364 = $5368;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5369 = self.idx;
                                        var $5370 = self.code;
                                        var self = Kind$Parser$term$($5369, $5370);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5372 = self.idx;
                                                var $5373 = self.code;
                                                var $5374 = self.err;
                                                var $5375 = Parser$Reply$error$($5372, $5373, $5374);
                                                var $5371 = $5375;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5376 = self.idx;
                                                var $5377 = self.code;
                                                var $5378 = self.val;
                                                var self = Kind$Parser$term$($5376, $5377);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5380 = self.idx;
                                                        var $5381 = self.code;
                                                        var $5382 = self.err;
                                                        var $5383 = Parser$Reply$error$($5380, $5381, $5382);
                                                        var $5379 = $5383;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5384 = self.idx;
                                                        var $5385 = self.code;
                                                        var $5386 = self.val;
                                                        var self = Kind$Parser$stop$($5347, $5384, $5385);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5388 = self.idx;
                                                                var $5389 = self.code;
                                                                var $5390 = self.err;
                                                                var $5391 = Parser$Reply$error$($5388, $5389, $5390);
                                                                var $5387 = $5391;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5392 = self.idx;
                                                                var $5393 = self.code;
                                                                var $5394 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $5378);
                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Kind.Binder.new':
                                                                            var $5397 = self.name;
                                                                            var $5398 = $5397;
                                                                            var $5396 = $5398;
                                                                            break;
                                                                    };
                                                                    return $5396;
                                                                })), $5386);
                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                                    var $5399 = (_x$31 + '1');
                                                                    return $5399;
                                                                }), _type$29);
                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {
                                                                    var $5400 = (_x$32 + '0');
                                                                    return $5400;
                                                                }), _term$30);
                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $5394, $5355, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $5395 = Parser$Reply$value$($5392, $5393, _defs$33);
                                                                var $5387 = $5395;
                                                                break;
                                                        };
                                                        var $5379 = $5387;
                                                        break;
                                                };
                                                var $5371 = $5379;
                                                break;
                                        };
                                        var $5364 = $5371;
                                        break;
                                };
                                var $5356 = $5364;
                                break;
                        };
                        var $5348 = $5356;
                        break;
                };
                var $5340 = $5348;
                break;
        };
        return $5340;
    };
    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);

    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $5401 = ({
            _: 'Kind.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $5401;
    };
    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);

    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Kind$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5403 = self.idx;
                var $5404 = self.code;
                var $5405 = self.err;
                var $5406 = Parser$Reply$error$($5403, $5404, $5405);
                var $5402 = $5406;
                break;
            case 'Parser.Reply.value':
                var $5407 = self.idx;
                var $5408 = self.code;
                var $5409 = self.val;
                var self = Parser$maybe$(Kind$Parser$binder(":"), $5407, $5408);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5411 = self.idx;
                        var $5412 = self.code;
                        var $5413 = self.err;
                        var $5414 = Parser$Reply$error$($5411, $5412, $5413);
                        var $5410 = $5414;
                        break;
                    case 'Parser.Reply.value':
                        var $5415 = self.idx;
                        var $5416 = self.code;
                        var $5417 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Kind$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $5420 = self.idx;
                                    var $5421 = self.code;
                                    var $5422 = self.err;
                                    var $5423 = Parser$Reply$error$($5420, $5421, $5422);
                                    var $5419 = $5423;
                                    break;
                                case 'Parser.Reply.value':
                                    var $5424 = self.idx;
                                    var $5425 = self.code;
                                    var $5426 = Kind$Parser$binder$("=", $5424, $5425);
                                    var $5419 = $5426;
                                    break;
                            };
                            return $5419;
                        }), $5415, $5416);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5427 = self.idx;
                                var $5428 = self.code;
                                var $5429 = self.err;
                                var $5430 = Parser$Reply$error$($5427, $5428, $5429);
                                var $5418 = $5430;
                                break;
                            case 'Parser.Reply.value':
                                var $5431 = self.idx;
                                var $5432 = self.code;
                                var $5433 = self.val;
                                var _args$13 = Maybe$default$($5417, List$nil);
                                var _inds$14 = Maybe$default$($5433, List$nil);
                                var $5434 = Parser$Reply$value$($5431, $5432, Kind$Constructor$new$($5409, _args$13, _inds$14));
                                var $5418 = $5434;
                                break;
                        };
                        var $5410 = $5418;
                        break;
                };
                var $5402 = $5410;
                break;
        };
        return $5402;
    };
    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);

    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $5435 = ({
            _: 'Kind.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $5435;
    };
    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);

    function Kind$Parser$datatype$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5437 = self.idx;
                var $5438 = self.code;
                var $5439 = self.err;
                var $5440 = Parser$Reply$error$($5437, $5438, $5439);
                var $5436 = $5440;
                break;
            case 'Parser.Reply.value':
                var $5441 = self.idx;
                var $5442 = self.code;
                var self = Kind$Parser$name1$($5441, $5442);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5444 = self.idx;
                        var $5445 = self.code;
                        var $5446 = self.err;
                        var $5447 = Parser$Reply$error$($5444, $5445, $5446);
                        var $5443 = $5447;
                        break;
                    case 'Parser.Reply.value':
                        var $5448 = self.idx;
                        var $5449 = self.code;
                        var $5450 = self.val;
                        var self = Parser$maybe$(Kind$Parser$binder(":"), $5448, $5449);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5452 = self.idx;
                                var $5453 = self.code;
                                var $5454 = self.err;
                                var $5455 = Parser$Reply$error$($5452, $5453, $5454);
                                var $5451 = $5455;
                                break;
                            case 'Parser.Reply.value':
                                var $5456 = self.idx;
                                var $5457 = self.code;
                                var $5458 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $5461 = self.idx;
                                            var $5462 = self.code;
                                            var $5463 = self.err;
                                            var $5464 = Parser$Reply$error$($5461, $5462, $5463);
                                            var $5460 = $5464;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $5465 = self.idx;
                                            var $5466 = self.code;
                                            var $5467 = Kind$Parser$binder$(":", $5465, $5466);
                                            var $5460 = $5467;
                                            break;
                                    };
                                    return $5460;
                                }), $5456, $5457);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5468 = self.idx;
                                        var $5469 = self.code;
                                        var $5470 = self.err;
                                        var $5471 = Parser$Reply$error$($5468, $5469, $5470);
                                        var $5459 = $5471;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5472 = self.idx;
                                        var $5473 = self.code;
                                        var $5474 = self.val;
                                        var _pars$15 = Maybe$default$($5458, List$nil);
                                        var _inds$16 = Maybe$default$($5474, List$nil);
                                        var self = Kind$Parser$text$("{", $5472, $5473);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5476 = self.idx;
                                                var $5477 = self.code;
                                                var $5478 = self.err;
                                                var $5479 = Parser$Reply$error$($5476, $5477, $5478);
                                                var $5475 = $5479;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5480 = self.idx;
                                                var $5481 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item(Kind$Parser$constructor($5450)))($5480)($5481);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5483 = self.idx;
                                                        var $5484 = self.code;
                                                        var $5485 = self.err;
                                                        var $5486 = Parser$Reply$error$($5483, $5484, $5485);
                                                        var $5482 = $5486;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5487 = self.idx;
                                                        var $5488 = self.code;
                                                        var $5489 = self.val;
                                                        var $5490 = Parser$Reply$value$($5487, $5488, Kind$Datatype$new$($5450, _pars$15, _inds$16, $5489));
                                                        var $5482 = $5490;
                                                        break;
                                                };
                                                var $5475 = $5482;
                                                break;
                                        };
                                        var $5459 = $5475;
                                        break;
                                };
                                var $5451 = $5459;
                                break;
                        };
                        var $5443 = $5451;
                        break;
                };
                var $5436 = $5443;
                break;
        };
        return $5436;
    };
    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);

    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.cons':
                var $5492 = self.head;
                var $5493 = self.tail;
                var self = $5492;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5495 = self.eras;
                        var $5496 = self.name;
                        var $5497 = self.term;
                        var $5498 = Kind$Term$all$($5495, "", $5496, $5497, (_s$9 => _x$10 => {
                            var $5499 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $5493);
                            return $5499;
                        }));
                        var $5494 = $5498;
                        break;
                };
                var $5491 = $5494;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5501 = self.pars;
                        var $5502 = self.inds;
                        var _slf$8 = Kind$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $5505 = _slf$8;
                            var $5506 = $5501;
                            let _slf$10 = $5505;
                            let _v$9;
                            while ($5506._ === 'List.cons') {
                                _v$9 = $5506.head;
                                var $5505 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5507 = self.name;
                                            var $5508 = $5507;
                                            return $5508;
                                    };
                                })()));
                                _slf$10 = $5505;
                                $5506 = $5506.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $5510 = _slf$9;
                            var $5511 = $5502;
                            let _slf$11 = $5510;
                            let _v$10;
                            while ($5511._ === 'List.cons') {
                                _v$10 = $5511.head;
                                var $5510 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {
                                    var self = _v$10;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5512 = self.name;
                                            var $5513 = $5512;
                                            return $5513;
                                    };
                                })()));
                                _slf$11 = $5510;
                                $5511 = $5511.tail;
                            }
                            return _slf$11;
                        })();
                        var $5503 = Kind$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $5514 = Kind$Term$typ;
                            return $5514;
                        }));
                        var $5500 = $5503;
                        break;
                };
                var $5491 = $5500;
                break;
        };
        return $5491;
    };
    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);

    function Kind$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5516 = self.name;
                var $5517 = self.inds;
                var $5518 = Kind$Datatype$build_term$motive$go$(_type$1, $5516, $5517);
                var $5515 = $5518;
                break;
        };
        return $5515;
    };
    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);

    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.cons':
                var $5520 = self.head;
                var $5521 = self.tail;
                var self = $5520;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5523 = self.eras;
                        var $5524 = self.name;
                        var $5525 = self.term;
                        var _eras$9 = $5523;
                        var _name$10 = $5524;
                        var _xtyp$11 = $5525;
                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $5521);
                        var $5526 = Kind$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $5527 = _body$12;
                            return $5527;
                        }));
                        var $5522 = $5526;
                        break;
                };
                var $5519 = $5522;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5529 = self.name;
                        var $5530 = self.pars;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Kind.Constructor.new':
                                var $5532 = self.name;
                                var $5533 = self.args;
                                var $5534 = self.inds;
                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $5537 = _ret$11;
                                    var $5538 = $5534;
                                    let _ret$13 = $5537;
                                    let _v$12;
                                    while ($5538._ === 'List.cons') {
                                        _v$12 = $5538.head;
                                        var $5537 = Kind$Term$app$(_ret$13, (() => {
                                            var self = _v$12;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5539 = self.term;
                                                    var $5540 = $5539;
                                                    return $5540;
                                            };
                                        })());
                                        _ret$13 = $5537;
                                        $5538 = $5538.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($5529, List$cons$(Kind$Name$read$("."), List$cons$($5532, List$nil))));
                                var _slf$14 = Kind$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $5542 = _slf$14;
                                    var $5543 = $5530;
                                    let _slf$16 = $5542;
                                    let _v$15;
                                    while ($5543._ === 'List.cons') {
                                        _v$15 = $5543.head;
                                        var $5542 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {
                                            var self = _v$15;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5544 = self.name;
                                                    var $5545 = $5544;
                                                    return $5545;
                                            };
                                        })()));
                                        _slf$16 = $5542;
                                        $5543 = $5543.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $5547 = _slf$15;
                                    var $5548 = $5533;
                                    let _slf$17 = $5547;
                                    let _v$16;
                                    while ($5548._ === 'List.cons') {
                                        _v$16 = $5548.head;
                                        var $5547 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {
                                            var self = _v$16;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5549 = self.name;
                                                    var $5550 = $5549;
                                                    return $5550;
                                            };
                                        })()));
                                        _slf$17 = $5547;
                                        $5548 = $5548.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $5535 = Kind$Term$app$(_ret$12, _slf$16);
                                var $5531 = $5535;
                                break;
                        };
                        var $5528 = $5531;
                        break;
                };
                var $5519 = $5528;
                break;
        };
        return $5519;
    };
    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Kind.Constructor.new':
                var $5552 = self.args;
                var $5553 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $5552);
                var $5551 = $5553;
                break;
        };
        return $5551;
    };
    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);

    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $5555 = self.head;
                var $5556 = self.tail;
                var self = $5555;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5558 = self.name;
                        var $5559 = Kind$Term$all$(Bool$false, "", $5558, Kind$Datatype$build_term$constructor$(_type$1, $5555), (_s$9 => _x$10 => {
                            var $5560 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $5556);
                            return $5560;
                        }));
                        var $5557 = $5559;
                        break;
                };
                var $5554 = $5557;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5562 = self.inds;
                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $5565 = _ret$8;
                            var $5566 = $5562;
                            let _ret$10 = $5565;
                            let _v$9;
                            while ($5566._ === 'List.cons') {
                                _v$9 = $5566.head;
                                var $5565 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5567 = self.name;
                                            var $5568 = $5567;
                                            return $5568;
                                    };
                                })()));
                                _ret$10 = $5565;
                                $5566 = $5566.tail;
                            }
                            return _ret$10;
                        })();
                        var $5563 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + ".Self")));
                        var $5561 = $5563;
                        break;
                };
                var $5554 = $5561;
                break;
        };
        return $5554;
    };
    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5570 = self.name;
                var $5571 = self.ctrs;
                var $5572 = Kind$Datatype$build_term$constructors$go$(_type$1, $5570, $5571);
                var $5569 = $5572;
                break;
        };
        return $5569;
    };
    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);

    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $5574 = self.head;
                var $5575 = self.tail;
                var self = $5574;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5577 = self.name;
                        var $5578 = Kind$Term$lam$($5577, (_x$10 => {
                            var $5579 = Kind$Datatype$build_term$go$(_type$1, _name$2, $5575, _inds$4);
                            return $5579;
                        }));
                        var $5576 = $5578;
                        break;
                };
                var $5573 = $5576;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $5581 = self.head;
                        var $5582 = self.tail;
                        var self = $5581;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5584 = self.name;
                                var $5585 = Kind$Term$lam$($5584, (_x$10 => {
                                    var $5586 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $5582);
                                    return $5586;
                                }));
                                var $5583 = $5585;
                                break;
                        };
                        var $5580 = $5583;
                        break;
                    case 'List.nil':
                        var $5587 = Kind$Term$all$(Bool$true, (_name$2 + ".Self"), Kind$Name$read$("P"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $5588 = Kind$Datatype$build_term$constructors$(_type$1);
                            return $5588;
                        }));
                        var $5580 = $5587;
                        break;
                };
                var $5573 = $5580;
                break;
        };
        return $5573;
    };
    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5590 = self.name;
                var $5591 = self.pars;
                var $5592 = self.inds;
                var $5593 = Kind$Datatype$build_term$go$(_type$1, $5590, $5591, $5592);
                var $5589 = $5593;
                break;
        };
        return $5589;
    };
    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);

    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $5595 = self.head;
                var $5596 = self.tail;
                var self = $5595;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5598 = self.name;
                        var $5599 = self.term;
                        var $5600 = Kind$Term$all$(Bool$false, "", $5598, $5599, (_s$10 => _x$11 => {
                            var $5601 = Kind$Datatype$build_type$go$(_type$1, _name$2, $5596, _inds$4);
                            return $5601;
                        }));
                        var $5597 = $5600;
                        break;
                };
                var $5594 = $5597;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $5603 = self.head;
                        var $5604 = self.tail;
                        var self = $5603;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5606 = self.name;
                                var $5607 = self.term;
                                var $5608 = Kind$Term$all$(Bool$false, "", $5606, $5607, (_s$10 => _x$11 => {
                                    var $5609 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $5604);
                                    return $5609;
                                }));
                                var $5605 = $5608;
                                break;
                        };
                        var $5602 = $5605;
                        break;
                    case 'List.nil':
                        var $5610 = Kind$Term$typ;
                        var $5602 = $5610;
                        break;
                };
                var $5594 = $5602;
                break;
        };
        return $5594;
    };
    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5612 = self.name;
                var $5613 = self.pars;
                var $5614 = self.inds;
                var $5615 = Kind$Datatype$build_type$go$(_type$1, $5612, $5613, $5614);
                var $5611 = $5615;
                break;
        };
        return $5611;
    };
    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);

    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $5617 = self.head;
                var $5618 = self.tail;
                var self = $5617;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5620 = self.name;
                        var $5621 = Kind$Term$lam$($5620, (_x$9 => {
                            var $5622 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $5618);
                            return $5622;
                        }));
                        var $5619 = $5621;
                        break;
                };
                var $5616 = $5619;
                break;
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5624 = self.name;
                        var $5625 = self.args;
                        var _ret$7 = Kind$Term$ref$($5624);
                        var _ret$8 = (() => {
                            var $5628 = _ret$7;
                            var $5629 = $5625;
                            let _ret$9 = $5628;
                            let _arg$8;
                            while ($5629._ === 'List.cons') {
                                _arg$8 = $5629.head;
                                var $5628 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5630 = self.name;
                                            var $5631 = $5630;
                                            return $5631;
                                    };
                                })()));
                                _ret$9 = $5628;
                                $5629 = $5629.tail;
                            }
                            return _ret$9;
                        })();
                        var $5626 = _ret$8;
                        var $5623 = $5626;
                        break;
                };
                var $5616 = $5623;
                break;
        };
        return $5616;
    };
    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);

    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5633 = self.ctrs;
                var $5634 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $5633);
                var $5632 = $5634;
                break;
        };
        return $5632;
    };
    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);

    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $5636 = self.head;
                var $5637 = self.tail;
                var self = $5636;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5639 = self.name;
                        var $5640 = Kind$Term$lam$($5639, (_x$11 => {
                            var $5641 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $5637, _args$5);
                            return $5641;
                        }));
                        var $5638 = $5640;
                        break;
                };
                var $5635 = $5638;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $5643 = self.head;
                        var $5644 = self.tail;
                        var self = $5643;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5646 = self.name;
                                var $5647 = Kind$Term$lam$($5646, (_x$11 => {
                                    var $5648 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $5644);
                                    return $5648;
                                }));
                                var $5645 = $5647;
                                break;
                        };
                        var $5642 = $5645;
                        break;
                    case 'List.nil':
                        var $5649 = Kind$Term$lam$(Kind$Name$read$("P"), (_x$6 => {
                            var $5650 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $5650;
                        }));
                        var $5642 = $5649;
                        break;
                };
                var $5635 = $5642;
                break;
        };
        return $5635;
    };
    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5652 = self.name;
                var $5653 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5655 = self.args;
                        var $5656 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $5652, $5653, $5655);
                        var $5654 = $5656;
                        break;
                };
                var $5651 = $5654;
                break;
        };
        return $5651;
    };
    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);

    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $5658 = self.head;
                var $5659 = self.tail;
                var self = $5658;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5661 = self.eras;
                        var $5662 = self.name;
                        var $5663 = self.term;
                        var $5664 = Kind$Term$all$($5661, "", $5662, $5663, (_s$11 => _x$12 => {
                            var $5665 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $5659, _args$5);
                            return $5665;
                        }));
                        var $5660 = $5664;
                        break;
                };
                var $5657 = $5660;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $5667 = self.head;
                        var $5668 = self.tail;
                        var self = $5667;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5670 = self.eras;
                                var $5671 = self.name;
                                var $5672 = self.term;
                                var $5673 = Kind$Term$all$($5670, "", $5671, $5672, (_s$11 => _x$12 => {
                                    var $5674 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $5668);
                                    return $5674;
                                }));
                                var $5669 = $5673;
                                break;
                        };
                        var $5666 = $5669;
                        break;
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Kind.Datatype.new':
                                var $5676 = self.pars;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Kind.Constructor.new':
                                        var $5678 = self.inds;
                                        var _type$13 = Kind$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $5681 = _type$13;
                                            var $5682 = $5676;
                                            let _type$15 = $5681;
                                            let _v$14;
                                            while ($5682._ === 'List.cons') {
                                                _v$14 = $5682.head;
                                                var $5681 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {
                                                    var self = _v$14;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $5683 = self.name;
                                                            var $5684 = $5683;
                                                            return $5684;
                                                    };
                                                })()));
                                                _type$15 = $5681;
                                                $5682 = $5682.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $5686 = _type$14;
                                            var $5687 = $5678;
                                            let _type$16 = $5686;
                                            let _v$15;
                                            while ($5687._ === 'List.cons') {
                                                _v$15 = $5687.head;
                                                var $5686 = Kind$Term$app$(_type$16, (() => {
                                                    var self = _v$15;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $5688 = self.term;
                                                            var $5689 = $5688;
                                                            return $5689;
                                                    };
                                                })());
                                                _type$16 = $5686;
                                                $5687 = $5687.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $5679 = _type$15;
                                        var $5677 = $5679;
                                        break;
                                };
                                var $5675 = $5677;
                                break;
                        };
                        var $5666 = $5675;
                        break;
                };
                var $5657 = $5666;
                break;
        };
        return $5657;
    };
    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5691 = self.name;
                var $5692 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5694 = self.args;
                        var $5695 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $5691, $5692, $5694);
                        var $5693 = $5695;
                        break;
                };
                var $5690 = $5693;
                break;
        };
        return $5690;
    };
    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);

    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5697 = self.idx;
                var $5698 = self.code;
                var $5699 = self.err;
                var $5700 = Parser$Reply$error$($5697, $5698, $5699);
                var $5696 = $5700;
                break;
            case 'Parser.Reply.value':
                var $5701 = self.idx;
                var $5702 = self.code;
                var $5703 = self.val;
                var self = Kind$Parser$datatype$($5701, $5702);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5705 = self.idx;
                        var $5706 = self.code;
                        var $5707 = self.err;
                        var $5708 = Parser$Reply$error$($5705, $5706, $5707);
                        var $5704 = $5708;
                        break;
                    case 'Parser.Reply.value':
                        var $5709 = self.idx;
                        var $5710 = self.code;
                        var $5711 = self.val;
                        var self = Kind$Parser$stop$($5703, $5709, $5710);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5713 = self.idx;
                                var $5714 = self.code;
                                var $5715 = self.err;
                                var $5716 = Parser$Reply$error$($5713, $5714, $5715);
                                var $5712 = $5716;
                                break;
                            case 'Parser.Reply.value':
                                var $5717 = self.idx;
                                var $5718 = self.code;
                                var $5719 = self.val;
                                var self = $5711;
                                switch (self._) {
                                    case 'Kind.Datatype.new':
                                        var $5721 = self.name;
                                        var $5722 = self.pars;
                                        var $5723 = self.inds;
                                        var $5724 = self.ctrs;
                                        var _term$19 = Kind$Datatype$build_term$($5711);
                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {
                                            var $5726 = (_x$20 + '1');
                                            return $5726;
                                        }), _term$19);
                                        var _type$21 = Kind$Datatype$build_type$($5711);
                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {
                                            var $5727 = (_x$22 + '0');
                                            return $5727;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($5722)) + (list_length($5723)));
                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $5719, $5721, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($5724, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $5721;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $5729 = self.args;
                                                        var $5730 = $5729;
                                                        return $5730;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $5731 = self.name;
                                                        var $5732 = $5731;
                                                        return $5732;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Kind$Constructor$build_term$($5711, _ctr$25);
                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                var $5733 = (_x$31 + '1');
                                                return $5733;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Kind$Constructor$build_type$($5711, _ctr$25);
                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {
                                                var $5734 = (_x$33 + '0');
                                                return $5734;
                                            }), _ctr_type$32);
                                            var $5728 = Kind$Map$def$(_file$1, _code$2, $5719, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $5728;
                                        }));
                                        var $5725 = (_idx$26 => _code$27 => {
                                            var $5735 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $5735;
                                        });
                                        var $5720 = $5725;
                                        break;
                                };
                                var $5720 = $5720($5717)($5718);
                                var $5712 = $5720;
                                break;
                        };
                        var $5704 = $5712;
                        break;
                };
                var $5696 = $5704;
                break;
        };
        return $5696;
    };
    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5737 = self.idx;
                var $5738 = self.code;
                var $5739 = self.err;
                var $5740 = Parser$Reply$error$($5737, $5738, $5739);
                var $5736 = $5740;
                break;
            case 'Parser.Reply.value':
                var $5741 = self.idx;
                var $5742 = self.code;
                var self = Parser$eof$($5741, $5742);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5744 = self.idx;
                        var $5745 = self.code;
                        var $5746 = self.err;
                        var $5747 = Parser$Reply$error$($5744, $5745, $5746);
                        var $5743 = $5747;
                        break;
                    case 'Parser.Reply.value':
                        var $5748 = self.idx;
                        var $5749 = self.code;
                        var $5750 = Parser$Reply$value$($5748, $5749, _defs$3);
                        var $5743 = $5750;
                        break;
                };
                var $5736 = $5743;
                break;
        };
        return $5736;
    };
    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5752 = self.idx;
                var $5753 = self.code;
                var $5754 = self.err;
                var $5755 = Parser$Reply$error$($5752, $5753, $5754);
                var $5751 = $5755;
                break;
            case 'Parser.Reply.value':
                var $5756 = self.idx;
                var $5757 = self.code;
                var $5758 = self.val;
                var self = $5758;
                if (self) {
                    var $5760 = (_idx$9 => _code$10 => {
                        var $5761 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $5761;
                    });
                    var $5759 = $5760;
                } else {
                    var $5762 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5764 = self.idx;
                                var $5765 = self.code;
                                var $5766 = self.err;
                                var $5767 = Parser$Reply$error$($5764, $5765, $5766);
                                var $5763 = $5767;
                                break;
                            case 'Parser.Reply.value':
                                var $5768 = self.idx;
                                var $5769 = self.code;
                                var $5770 = self.val;
                                var $5771 = Kind$Parser$file$(_file$1, _code$2, $5770, $5768, $5769);
                                var $5763 = $5771;
                                break;
                        };
                        return $5763;
                    });
                    var $5759 = $5762;
                };
                var $5759 = $5759($5756)($5757);
                var $5751 = $5759;
                break;
        };
        return $5751;
    };
    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $5773 = self.head;
                var $5774 = self.tail;
                var $5775 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $5776 = "";
                        return $5776;
                    } else {
                        var $5777 = _sep$1;
                        return $5777;
                    };
                })(), List$cons$($5773, List$cons$(String$join$go$(_sep$1, $5774, Bool$false), List$nil))));
                var $5772 = $5775;
                break;
            case 'List.nil':
                var $5778 = "";
                var $5772 = $5778;
                break;
        };
        return $5772;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $5779 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $5779;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {
        var $5780 = String$join$("\u{a}", _res$3);
        return $5780;
    };
    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $5782 = self.value;
                var $5783 = _f$5($5782);
                var $5781 = $5783;
                break;
            case 'Maybe.none':
                var $5784 = _a$4;
                var $5781 = $5784;
                break;
        };
        return $5781;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5786 = Bool$true;
            var $5785 = $5786;
        } else {
            var $5787 = (self - 1n);
            var $5788 = Bool$false;
            var $5785 = $5788;
        };
        return $5785;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5790 = Nat$zero;
            var $5789 = $5790;
        } else {
            var $5791 = (self - 1n);
            var $5792 = Nat$succ$(Nat$succ$(Nat$double$($5791)));
            var $5789 = $5792;
        };
        return $5789;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5794 = Nat$zero;
            var $5793 = $5794;
        } else {
            var $5795 = (self - 1n);
            var $5796 = $5795;
            var $5793 = $5796;
        };
        return $5793;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $5798 = _str$3;
            var $5797 = $5798;
        } else {
            var $5799 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $5801 = String$cons$(_chr$2, String$pad_right$($5799, _chr$2, ""));
                var $5800 = $5801;
            } else {
                var $5802 = self.charCodeAt(0);
                var $5803 = self.slice(1);
                var $5804 = String$cons$($5802, String$pad_right$($5799, _chr$2, $5803));
                var $5800 = $5804;
            };
            var $5797 = $5800;
        };
        return $5797;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $5805 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $5805;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);
    const Bool$not = a0 => (!a0);

    function Kind$Code$color$(_col$1, _str$2) {
        var $5806 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $5806;
    };
    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $5808 = self.head;
                var $5809 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $5811 = List$nil;
                    var $5810 = $5811;
                } else {
                    var $5812 = (self - 1n);
                    var $5813 = List$cons$($5808, List$take$($5812, $5809));
                    var $5810 = $5813;
                };
                var $5807 = $5810;
                break;
            case 'List.nil':
                var $5814 = List$nil;
                var $5807 = $5814;
                break;
        };
        return $5807;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $5816 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $5815 = $5816;
                } else {
                    var $5817 = self.charCodeAt(0);
                    var $5818 = self.slice(1);
                    var self = ($5817 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $5821 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $5820 = $5821;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $5824 = self.value;
                                        var $5825 = Maybe$some$(Nat$pred$($5824));
                                        var $5823 = $5825;
                                        break;
                                    case 'Maybe.none':
                                        var $5826 = Maybe$some$(_spa$9);
                                        var $5823 = $5826;
                                        break;
                                };
                                var _lft$14 = $5823;
                            } else {
                                var $5827 = (self - 1n);
                                var $5828 = _lft$6;
                                var _lft$14 = $5828;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $5822 = Kind$Code$highlight$go$($5818, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $5820 = $5822;
                        };
                        var $5819 = $5820;
                    } else {
                        var _chr$12 = String$cons$($5817, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $5830 = String$reverse$(Kind$Code$color$("31", Kind$Code$color$("4", _chr$12)));
                            var _chr$13 = $5830;
                        } else {
                            var $5831 = _chr$12;
                            var _chr$13 = $5831;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $5832 = List$take$(_spa$9, _res$8);
                            var _res$14 = $5832;
                        } else {
                            var $5833 = _res$8;
                            var _res$14 = $5833;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $5829 = Kind$Code$highlight$go$($5818, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $5819 = $5829;
                    };
                    var $5815 = $5819;
                };
                return $5815;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $5834 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $5834;
    };
    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);

    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5836 = self.idx;
                var $5837 = self.err;
                var _err$7 = $5837;
                var _hig$8 = Kind$Code$highlight$(_code$2, $5836, Nat$succ$($5836));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $5838 = Either$left$(_str$9);
                var $5835 = $5838;
                break;
            case 'Parser.Reply.value':
                var $5839 = self.val;
                var $5840 = Either$right$($5839);
                var $5835 = $5840;
                break;
        };
        return $5835;
    };
    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);

    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.cons':
                var $5842 = self.head;
                var $5843 = self.tail;
                var $5844 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $5845 = _m$bind$6;
                    return $5845;
                }))(IO$get_file$($5842))((_code$6 => {
                    var _read$7 = Kind$Defs$read$($5842, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.right':
                            var $5847 = self.value;
                            var _defs$9 = $5847;
                            var self = Kind$Map$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $5849 = Kind$Synth$load$go$(_name$1, $5843, _defs$9);
                                    var $5848 = $5849;
                                    break;
                                case 'Maybe.some':
                                    var $5850 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $5851 = _m$pure$12;
                                        return $5851;
                                    }))(Maybe$some$(_defs$9));
                                    var $5848 = $5850;
                                    break;
                            };
                            var $5846 = $5848;
                            break;
                        case 'Either.left':
                            var $5852 = Kind$Synth$load$go$(_name$1, $5843, _defs$3);
                            var $5846 = $5852;
                            break;
                    };
                    return $5846;
                }));
                var $5841 = $5844;
                break;
            case 'List.nil':
                var $5853 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $5854 = _m$pure$5;
                    return $5854;
                }))(Maybe$none);
                var $5841 = $5853;
                break;
        };
        return $5841;
    };
    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);

    function Kind$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $5856 = self.head;
                var $5857 = self.tail;
                var _head$5 = (_last$2 + ($5856 + ".kind"));
                var _tail$6 = Kind$Synth$files_of$make$($5857, (_last$2 + ($5856 + "/")));
                var $5858 = List$cons$(_head$5, _tail$6);
                var $5855 = $5858;
                break;
            case 'List.nil':
                var $5859 = List$nil;
                var $5855 = $5859;
                break;
        };
        return $5855;
    };
    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);

    function Char$eql$(_a$1, _b$2) {
        var $5860 = (_a$1 === _b$2);
        return $5860;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $5861 = Bool$true;
                    return $5861;
                } else {
                    var $5862 = self.charCodeAt(0);
                    var $5863 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $5865 = Bool$false;
                        var $5864 = $5865;
                    } else {
                        var $5866 = self.charCodeAt(0);
                        var $5867 = self.slice(1);
                        var self = Char$eql$($5862, $5866);
                        if (self) {
                            var $5869 = String$starts_with$($5867, $5863);
                            var $5868 = $5869;
                        } else {
                            var $5870 = Bool$false;
                            var $5868 = $5870;
                        };
                        var $5864 = $5868;
                    };
                    return $5864;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $5871 = _xs$2;
                    return $5871;
                } else {
                    var $5872 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $5874 = String$nil;
                        var $5873 = $5874;
                    } else {
                        var $5875 = self.charCodeAt(0);
                        var $5876 = self.slice(1);
                        var $5877 = String$drop$($5872, $5876);
                        var $5873 = $5877;
                    };
                    return $5873;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $5878 = _n$2;
                    return $5878;
                } else {
                    var $5879 = self.charCodeAt(0);
                    var $5880 = self.slice(1);
                    var $5881 = String$length$go$($5880, Nat$succ$(_n$2));
                    return $5881;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $5882 = String$length$go$(_xs$1, 0n);
        return $5882;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $5884 = List$cons$(_last$3, List$nil);
            var $5883 = $5884;
        } else {
            var $5885 = self.charCodeAt(0);
            var $5886 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $5888 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $5887 = $5888;
            } else {
                var _next$6 = String$cons$($5885, String$nil);
                var $5889 = String$split$go$($5886, _match$2, (_last$3 + _next$6));
                var $5887 = $5889;
            };
            var $5883 = $5887;
        };
        return $5883;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $5890 = String$split$go$(_xs$1, _match$2, "");
        return $5890;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Kind$Synth$files_of$(_name$1) {
        var $5891 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $5891;
    };
    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);

    function Kind$Synth$load$(_name$1, _defs$2) {
        var $5892 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);
        return $5892;
    };
    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);
    const Kind$Status$wait = ({
        _: 'Kind.Status.wait'
    });

    function Kind$Check$(_V$1) {
        var $5893 = null;
        return $5893;
    };
    const Kind$Check = x0 => Kind$Check$(x0);

    function Kind$Check$result$(_value$2, _errors$3) {
        var $5894 = ({
            _: 'Kind.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $5894;
    };
    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);

    function Kind$Error$undefined_reference$(_origin$1, _name$2) {
        var $5895 = ({
            _: 'Kind.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $5895;
    };
    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);

    function Kind$Error$waiting$(_name$1) {
        var $5896 = ({
            _: 'Kind.Error.waiting',
            'name': _name$1
        });
        return $5896;
    };
    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);

    function Kind$Error$indirect$(_name$1) {
        var $5897 = ({
            _: 'Kind.Error.indirect',
            'name': _name$1
        });
        return $5897;
    };
    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $5899 = self.value;
                var $5900 = Maybe$some$(_f$4($5899));
                var $5898 = $5900;
                break;
            case 'Maybe.none':
                var $5901 = Maybe$none;
                var $5898 = $5901;
                break;
        };
        return $5898;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Kind$MPath$o$(_path$1) {
        var $5902 = Maybe$mapped$(_path$1, Kind$Path$o);
        return $5902;
    };
    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);

    function Kind$MPath$i$(_path$1) {
        var $5903 = Maybe$mapped$(_path$1, Kind$Path$i);
        return $5903;
    };
    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);

    function Kind$Error$patch$(_path$1, _term$2) {
        var $5904 = ({
            _: 'Kind.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $5904;
    };
    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);

    function Kind$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.some':
                var $5906 = self.value;
                var $5907 = $5906(Bits$e);
                var $5905 = $5907;
                break;
            case 'Maybe.none':
                var $5908 = Bits$e;
                var $5905 = $5908;
                break;
        };
        return $5905;
    };
    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);

    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $5909 = ({
            _: 'Kind.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $5909;
    };
    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);

    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $5910 = ({
            _: 'Kind.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $5910;
    };
    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);

    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {
        var self = _vars$1;
        switch (self._) {
            case 'List.cons':
                var $5912 = self.head;
                var $5913 = self.tail;
                var self = $5912;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $5915 = self.name;
                        var $5916 = self.term;
                        var $5917 = self.type;
                        var self = $5917;
                        switch (self._) {
                            case 'Maybe.some':
                                var $5919 = self.value;
                                var $5920 = Kind$Check$result$(Maybe$some$(Maybe$some$($5919)), List$nil);
                                var self = $5920;
                                break;
                            case 'Maybe.none':
                                var self = Kind$Term$check$($5916, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $5922 = self.value;
                                        var $5923 = self.errors;
                                        var self = $5922;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $5925 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($5925)), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $5927 = self.value;
                                                        var $5928 = self.errors;
                                                        var $5929 = Kind$Check$result$($5927, List$concat$($5923, $5928));
                                                        var $5926 = $5929;
                                                        break;
                                                };
                                                var $5924 = $5926;
                                                break;
                                            case 'Maybe.none':
                                                var $5930 = Kind$Check$result$(Maybe$none, $5923);
                                                var $5924 = $5930;
                                                break;
                                        };
                                        var $5921 = $5924;
                                        break;
                                };
                                var self = $5921;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5931 = self.value;
                                var $5932 = self.errors;
                                var self = $5931;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $5934 = self.value;
                                        var self = Kind$Term$check$infer_with_types$($5913, _defs$2, _ctx$3, _path$4, _orig$5);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5936 = self.value;
                                                var $5937 = self.errors;
                                                var self = $5936;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $5939 = self.value;
                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($5915, $5916, $5934), $5939)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $5941 = self.value;
                                                                var $5942 = self.errors;
                                                                var $5943 = Kind$Check$result$($5941, List$concat$($5937, $5942));
                                                                var $5940 = $5943;
                                                                break;
                                                        };
                                                        var $5938 = $5940;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $5944 = Kind$Check$result$(Maybe$none, $5937);
                                                        var $5938 = $5944;
                                                        break;
                                                };
                                                var self = $5938;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5945 = self.value;
                                                var $5946 = self.errors;
                                                var $5947 = Kind$Check$result$($5945, List$concat$($5932, $5946));
                                                var $5935 = $5947;
                                                break;
                                        };
                                        var $5933 = $5935;
                                        break;
                                    case 'Maybe.none':
                                        var $5948 = Kind$Check$result$(Maybe$none, $5932);
                                        var $5933 = $5948;
                                        break;
                                };
                                var $5918 = $5933;
                                break;
                        };
                        var $5914 = $5918;
                        break;
                };
                var $5911 = $5914;
                break;
            case 'List.nil':
                var $5949 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);
                var $5911 = $5949;
                break;
        };
        return $5911;
    };
    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);

    function Kind$Term$normalize$(_term$1, _defs$2) {
        var self = Kind$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $5951 = self.name;
                var $5952 = self.indx;
                var $5953 = Kind$Term$var$($5951, $5952);
                var $5950 = $5953;
                break;
            case 'Kind.Term.ref':
                var $5954 = self.name;
                var $5955 = Kind$Term$ref$($5954);
                var $5950 = $5955;
                break;
            case 'Kind.Term.all':
                var $5956 = self.eras;
                var $5957 = self.self;
                var $5958 = self.name;
                var $5959 = self.xtyp;
                var $5960 = self.body;
                var $5961 = Kind$Term$all$($5956, $5957, $5958, Kind$Term$normalize$($5959, _defs$2), (_s$8 => _x$9 => {
                    var $5962 = Kind$Term$normalize$($5960(_s$8)(_x$9), _defs$2);
                    return $5962;
                }));
                var $5950 = $5961;
                break;
            case 'Kind.Term.lam':
                var $5963 = self.name;
                var $5964 = self.body;
                var $5965 = Kind$Term$lam$($5963, (_x$5 => {
                    var $5966 = Kind$Term$normalize$($5964(_x$5), _defs$2);
                    return $5966;
                }));
                var $5950 = $5965;
                break;
            case 'Kind.Term.app':
                var $5967 = self.func;
                var $5968 = self.argm;
                var $5969 = Kind$Term$app$(Kind$Term$normalize$($5967, _defs$2), Kind$Term$normalize$($5968, _defs$2));
                var $5950 = $5969;
                break;
            case 'Kind.Term.let':
                var $5970 = self.name;
                var $5971 = self.expr;
                var $5972 = self.body;
                var $5973 = Kind$Term$let$($5970, Kind$Term$normalize$($5971, _defs$2), (_x$6 => {
                    var $5974 = Kind$Term$normalize$($5972(_x$6), _defs$2);
                    return $5974;
                }));
                var $5950 = $5973;
                break;
            case 'Kind.Term.def':
                var $5975 = self.name;
                var $5976 = self.expr;
                var $5977 = self.body;
                var $5978 = Kind$Term$def$($5975, Kind$Term$normalize$($5976, _defs$2), (_x$6 => {
                    var $5979 = Kind$Term$normalize$($5977(_x$6), _defs$2);
                    return $5979;
                }));
                var $5950 = $5978;
                break;
            case 'Kind.Term.ann':
                var $5980 = self.done;
                var $5981 = self.term;
                var $5982 = self.type;
                var $5983 = Kind$Term$ann$($5980, Kind$Term$normalize$($5981, _defs$2), Kind$Term$normalize$($5982, _defs$2));
                var $5950 = $5983;
                break;
            case 'Kind.Term.gol':
                var $5984 = self.name;
                var $5985 = self.dref;
                var $5986 = self.verb;
                var $5987 = Kind$Term$gol$($5984, $5985, $5986);
                var $5950 = $5987;
                break;
            case 'Kind.Term.hol':
                var $5988 = self.path;
                var $5989 = Kind$Term$hol$($5988);
                var $5950 = $5989;
                break;
            case 'Kind.Term.nat':
                var $5990 = self.natx;
                var $5991 = Kind$Term$nat$($5990);
                var $5950 = $5991;
                break;
            case 'Kind.Term.chr':
                var $5992 = self.chrx;
                var $5993 = Kind$Term$chr$($5992);
                var $5950 = $5993;
                break;
            case 'Kind.Term.str':
                var $5994 = self.strx;
                var $5995 = Kind$Term$str$($5994);
                var $5950 = $5995;
                break;
            case 'Kind.Term.ori':
                var $5996 = self.expr;
                var $5997 = Kind$Term$normalize$($5996, _defs$2);
                var $5950 = $5997;
                break;
            case 'Kind.Term.typ':
                var $5998 = Kind$Term$typ;
                var $5950 = $5998;
                break;
            case 'Kind.Term.cse':
                var $5999 = _term$1;
                var $5950 = $5999;
                break;
        };
        return $5950;
    };
    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);

    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.cons':
                var $6001 = self.head;
                var $6002 = self.tail;
                var self = $6001;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6004 = self.name;
                        var $6005 = self.type;
                        var $6006 = Kind$Term$all$(Bool$false, "", $6004, Maybe$default$($6005, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {
                            var $6007 = Kind$Term$desugar_cse$motive$($6002, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));
                            return $6007;
                        }));
                        var $6003 = $6006;
                        break;
                };
                var $6000 = $6003;
                break;
            case 'List.nil':
                var self = _moti$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6009 = self.value;
                        var $6010 = $6009;
                        var $6008 = $6010;
                        break;
                    case 'Maybe.none':
                        var self = _rtyp$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6012 = self.value;
                                var $6013 = Kind$Term$normalize$($6012, Kind$Map$new);
                                var $6011 = $6013;
                                break;
                            case 'Maybe.none':
                                var $6014 = Kind$Term$hol$(Bits$e);
                                var $6011 = $6014;
                                break;
                        };
                        var $6008 = $6011;
                        break;
                };
                var $6000 = $6008;
                break;
        };
        return $6000;
    };
    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6016 = self.tail;
                var $6017 = $6016;
                var $6015 = $6017;
                break;
            case 'List.nil':
                var $6018 = List$nil;
                var $6015 = $6018;
                break;
        };
        return $6015;
    };
    const List$tail = x0 => List$tail$(x0);

    function Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Kind$Term$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Kind$Term$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6019 = self.func;
                        var $6020 = self.argm;
                        var $6021 = Kind$Term$SmartMotive$vals$cont$(_expr$1, $6019, List$cons$($6020, _args$3), _defs$4);
                        return $6021;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6022 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $6022;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Kind$Term$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Kind$Term$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6023 = self.body;
                        var $6024 = Kind$Term$SmartMotive$vals$(_expr$1, $6023(Kind$Term$typ)(Kind$Term$typ), _defs$3);
                        return $6024;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6025 = Kind$Term$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $6025;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals = x0 => x1 => x2 => Kind$Term$SmartMotive$vals$(x0, x1, x2);

    function Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Kind$Term$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Kind$Term$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6026 = self.self;
                        var $6027 = self.name;
                        var $6028 = self.body;
                        var $6029 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6028(Kind$Term$ref$($6026))(Kind$Term$ref$($6027)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6027, List$nil)))), _binds$3), _defs$4);
                        return $6029;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6030 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $6030;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Kind$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Kind.Term.all':
                var $6032 = self.xtyp;
                var $6033 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6032, List$nil, _defs$3);
                var $6031 = $6033;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6034 = List$nil;
                var $6031 = $6034;
                break;
        };
        return $6031;
    };
    const Kind$Term$SmartMotive$nams = x0 => x1 => x2 => Kind$Term$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.cons':
                var $6036 = self.head;
                var $6037 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.cons':
                        var $6039 = self.head;
                        var $6040 = self.tail;
                        var $6041 = List$cons$(Pair$new$($6036, $6039), List$zip$($6037, $6040));
                        var $6038 = $6041;
                        break;
                    case 'List.nil':
                        var $6042 = List$nil;
                        var $6038 = $6042;
                        break;
                };
                var $6035 = $6038;
                break;
            case 'List.nil':
                var $6043 = List$nil;
                var $6035 = $6043;
                break;
        };
        return $6035;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Kind$Term$serialize$go$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6045 = self.indx;
                var self = ($6045 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $6045 <= 0n ? 0n : _depth$2 - $6045)))));
                    var $6047 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $6046 = $6047;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($6045)));
                    var $6048 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $6046 = $6048;
                };
                var $6044 = $6046;
                break;
            case 'Kind.Term.ref':
                var $6049 = self.name;
                var _name$7 = a1 => (a1 + (kind_name_to_bits($6049)));
                var $6050 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $6044 = $6050;
                break;
            case 'Kind.Term.all':
                var $6051 = self.eras;
                var $6052 = self.self;
                var $6053 = self.name;
                var $6054 = self.xtyp;
                var $6055 = self.body;
                var self = $6051;
                if (self) {
                    var $6057 = Bits$i;
                    var _eras$11 = $6057;
                } else {
                    var $6058 = Bits$o;
                    var _eras$11 = $6058;
                };
                var _self$12 = a1 => (a1 + (kind_name_to_bits($6052)));
                var _xtyp$13 = Kind$Term$serialize$go($6054)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Kind$Term$serialize$go($6055(Kind$Term$var$($6052, _depth$2))(Kind$Term$var$($6053, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $6056 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $6044 = $6056;
                break;
            case 'Kind.Term.lam':
                var $6059 = self.name;
                var $6060 = self.body;
                var _body$8 = Kind$Term$serialize$go($6060(Kind$Term$var$($6059, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6061 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $6044 = $6061;
                break;
            case 'Kind.Term.app':
                var $6062 = self.func;
                var $6063 = self.argm;
                var _func$8 = Kind$Term$serialize$go($6062)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Kind$Term$serialize$go($6063)(_depth$2)(_init$3)(_diff$4);
                var $6064 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $6044 = $6064;
                break;
            case 'Kind.Term.let':
                var $6065 = self.name;
                var $6066 = self.expr;
                var $6067 = self.body;
                var _expr$9 = Kind$Term$serialize$go($6066)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Kind$Term$serialize$go($6067(Kind$Term$var$($6065, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6068 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $6044 = $6068;
                break;
            case 'Kind.Term.def':
                var $6069 = self.expr;
                var $6070 = self.body;
                var $6071 = Kind$Term$serialize$go$($6070($6069), _depth$2, _init$3, _diff$4, _x$5);
                var $6044 = $6071;
                break;
            case 'Kind.Term.ann':
                var $6072 = self.term;
                var $6073 = Kind$Term$serialize$go$($6072, _depth$2, _init$3, _diff$4, _x$5);
                var $6044 = $6073;
                break;
            case 'Kind.Term.gol':
                var $6074 = self.name;
                var _name$9 = a1 => (a1 + (kind_name_to_bits($6074)));
                var $6075 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $6044 = $6075;
                break;
            case 'Kind.Term.nat':
                var $6076 = self.natx;
                var $6077 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($6076), _depth$2, _init$3, _diff$4, _x$5);
                var $6044 = $6077;
                break;
            case 'Kind.Term.chr':
                var $6078 = self.chrx;
                var $6079 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($6078), _depth$2, _init$3, _diff$4, _x$5);
                var $6044 = $6079;
                break;
            case 'Kind.Term.str':
                var $6080 = self.strx;
                var $6081 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($6080), _depth$2, _init$3, _diff$4, _x$5);
                var $6044 = $6081;
                break;
            case 'Kind.Term.ori':
                var $6082 = self.expr;
                var $6083 = Kind$Term$serialize$go$($6082, _depth$2, _init$3, _diff$4, _x$5);
                var $6044 = $6083;
                break;
            case 'Kind.Term.typ':
                var $6084 = (((_x$5 + '1') + '1') + '0');
                var $6044 = $6084;
                break;
            case 'Kind.Term.hol':
                var $6085 = _x$5;
                var $6044 = $6085;
                break;
            case 'Kind.Term.cse':
                var $6086 = _diff$4(_x$5);
                var $6044 = $6086;
                break;
        };
        return $6044;
    };
    const Kind$Term$serialize$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$go$(x0, x1, x2, x3, x4);

    function Kind$Term$serialize$(_term$1, _depth$2, _side$3) {
        var self = _side$3;
        if (self) {
            var $6088 = Bits$o;
            var _diff$4 = $6088;
        } else {
            var $6089 = Bits$i;
            var _diff$4 = $6089;
        };
        var $6087 = Kind$Term$serialize$go$(_term$1, _depth$2, _depth$2, _diff$4, Bits$e);
        return $6087;
    };
    const Kind$Term$serialize = x0 => x1 => x2 => Kind$Term$serialize$(x0, x1, x2);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, Bool$false);
        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, Bool$true);
        var $6090 = (_bh$5 === _ah$4);
        return $6090;
    };
    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);

    function Kind$Term$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $6092 = _to$3;
            var $6091 = $6092;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Kind.Term.var':
                    var $6094 = self.name;
                    var $6095 = self.indx;
                    var $6096 = Kind$Term$var$($6094, $6095);
                    var $6093 = $6096;
                    break;
                case 'Kind.Term.ref':
                    var $6097 = self.name;
                    var $6098 = Kind$Term$ref$($6097);
                    var $6093 = $6098;
                    break;
                case 'Kind.Term.all':
                    var $6099 = self.eras;
                    var $6100 = self.self;
                    var $6101 = self.name;
                    var $6102 = self.xtyp;
                    var $6103 = self.body;
                    var _xtyp$10 = Kind$Term$SmartMotive$replace$($6102, _from$2, _to$3, _lv$4);
                    var _body$11 = $6103(Kind$Term$ref$($6100))(Kind$Term$ref$($6101));
                    var _body$12 = Kind$Term$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $6104 = Kind$Term$all$($6099, $6100, $6101, _xtyp$10, (_s$13 => _x$14 => {
                        var $6105 = _body$12;
                        return $6105;
                    }));
                    var $6093 = $6104;
                    break;
                case 'Kind.Term.lam':
                    var $6106 = self.name;
                    var $6107 = self.body;
                    var _body$7 = $6107(Kind$Term$ref$($6106));
                    var _body$8 = Kind$Term$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6108 = Kind$Term$lam$($6106, (_x$9 => {
                        var $6109 = _body$8;
                        return $6109;
                    }));
                    var $6093 = $6108;
                    break;
                case 'Kind.Term.app':
                    var $6110 = self.func;
                    var $6111 = self.argm;
                    var _func$7 = Kind$Term$SmartMotive$replace$($6110, _from$2, _to$3, _lv$4);
                    var _argm$8 = Kind$Term$SmartMotive$replace$($6111, _from$2, _to$3, _lv$4);
                    var $6112 = Kind$Term$app$(_func$7, _argm$8);
                    var $6093 = $6112;
                    break;
                case 'Kind.Term.let':
                    var $6113 = self.name;
                    var $6114 = self.expr;
                    var $6115 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6114, _from$2, _to$3, _lv$4);
                    var _body$9 = $6115(Kind$Term$ref$($6113));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6116 = Kind$Term$let$($6113, _expr$8, (_x$11 => {
                        var $6117 = _body$10;
                        return $6117;
                    }));
                    var $6093 = $6116;
                    break;
                case 'Kind.Term.def':
                    var $6118 = self.name;
                    var $6119 = self.expr;
                    var $6120 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6119, _from$2, _to$3, _lv$4);
                    var _body$9 = $6120(Kind$Term$ref$($6118));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6121 = Kind$Term$def$($6118, _expr$8, (_x$11 => {
                        var $6122 = _body$10;
                        return $6122;
                    }));
                    var $6093 = $6121;
                    break;
                case 'Kind.Term.ann':
                    var $6123 = self.done;
                    var $6124 = self.term;
                    var $6125 = self.type;
                    var _term$8 = Kind$Term$SmartMotive$replace$($6124, _from$2, _to$3, _lv$4);
                    var _type$9 = Kind$Term$SmartMotive$replace$($6125, _from$2, _to$3, _lv$4);
                    var $6126 = Kind$Term$ann$($6123, _term$8, _type$9);
                    var $6093 = $6126;
                    break;
                case 'Kind.Term.ori':
                    var $6127 = self.expr;
                    var $6128 = Kind$Term$SmartMotive$replace$($6127, _from$2, _to$3, _lv$4);
                    var $6093 = $6128;
                    break;
                case 'Kind.Term.typ':
                    var $6129 = Kind$Term$typ;
                    var $6093 = $6129;
                    break;
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                    var $6130 = _term$1;
                    var $6093 = $6130;
                    break;
            };
            var $6091 = $6093;
        };
        return $6091;
    };
    const Kind$Term$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$replace$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {
        var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var $6131 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $6133 = self.fst;
                    var $6134 = self.snd;
                    var $6135 = Kind$Term$SmartMotive$replace$(_moti$11, $6134, Kind$Term$ref$($6133), _size$5);
                    var $6132 = $6135;
                    break;
            };
            return $6132;
        }));
        return $6131;
    };
    const Kind$Term$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);
        var self = _moti$2;
        switch (self._) {
            case 'Maybe.none':
                var $6137 = Kind$Term$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);
                var $6136 = $6137;
                break;
            case 'Maybe.some':
                var $6138 = _done$9;
                var $6136 = $6138;
                break;
        };
        return $6136;
    };
    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $6140 = Bool$true;
            var $6139 = $6140;
        } else {
            var $6141 = self.charCodeAt(0);
            var $6142 = self.slice(1);
            var $6143 = Bool$false;
            var $6139 = $6143;
        };
        return $6139;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Kind$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Kind.Term.all':
                var $6145 = self.self;
                var $6146 = self.name;
                var $6147 = self.body;
                var $6148 = Kind$Term$lam$((() => {
                    var self = String$is_empty$($6146);
                    if (self) {
                        var $6149 = _name$1;
                        return $6149;
                    } else {
                        var $6150 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6146, List$nil))));
                        return $6150;
                    };
                })(), (_x$11 => {
                    var $6151 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $6147(Kind$Term$var$($6145, 0n))(Kind$Term$var$($6146, 0n)), _body$4, _defs$5);
                    return $6151;
                }));
                var $6144 = $6148;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.ori':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6153 = self.head;
                        var $6154 = self.tail;
                        var self = $6153;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6156 = self.name;
                                var $6157 = Kind$Term$lam$($6156, (_x$13 => {
                                    var $6158 = Kind$Term$desugar_cse$argument$(_name$1, $6154, _type$3, _body$4, _defs$5);
                                    return $6158;
                                }));
                                var $6155 = $6157;
                                break;
                        };
                        var $6152 = $6155;
                        break;
                    case 'List.nil':
                        var $6159 = _body$4;
                        var $6152 = $6159;
                        break;
                };
                var $6144 = $6152;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6161 = self.head;
                        var $6162 = self.tail;
                        var self = $6161;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6164 = self.name;
                                var $6165 = Kind$Term$lam$($6164, (_x$12 => {
                                    var $6166 = Kind$Term$desugar_cse$argument$(_name$1, $6162, _type$3, _body$4, _defs$5);
                                    return $6166;
                                }));
                                var $6163 = $6165;
                                break;
                        };
                        var $6160 = $6163;
                        break;
                    case 'List.nil':
                        var $6167 = _body$4;
                        var $6160 = $6167;
                        break;
                };
                var $6144 = $6160;
                break;
            case 'Kind.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6169 = self.head;
                        var $6170 = self.tail;
                        var self = $6169;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6172 = self.name;
                                var $6173 = Kind$Term$lam$($6172, (_x$11 => {
                                    var $6174 = Kind$Term$desugar_cse$argument$(_name$1, $6170, _type$3, _body$4, _defs$5);
                                    return $6174;
                                }));
                                var $6171 = $6173;
                                break;
                        };
                        var $6168 = $6171;
                        break;
                    case 'List.nil':
                        var $6175 = _body$4;
                        var $6168 = $6175;
                        break;
                };
                var $6144 = $6168;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6177 = self.head;
                        var $6178 = self.tail;
                        var self = $6177;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6180 = self.name;
                                var $6181 = Kind$Term$lam$($6180, (_x$14 => {
                                    var $6182 = Kind$Term$desugar_cse$argument$(_name$1, $6178, _type$3, _body$4, _defs$5);
                                    return $6182;
                                }));
                                var $6179 = $6181;
                                break;
                        };
                        var $6176 = $6179;
                        break;
                    case 'List.nil':
                        var $6183 = _body$4;
                        var $6176 = $6183;
                        break;
                };
                var $6144 = $6176;
                break;
            case 'Kind.Term.cse':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6185 = self.head;
                        var $6186 = self.tail;
                        var self = $6185;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6188 = self.name;
                                var $6189 = Kind$Term$lam$($6188, (_x$17 => {
                                    var $6190 = Kind$Term$desugar_cse$argument$(_name$1, $6186, _type$3, _body$4, _defs$5);
                                    return $6190;
                                }));
                                var $6187 = $6189;
                                break;
                        };
                        var $6184 = $6187;
                        break;
                    case 'List.nil':
                        var $6191 = _body$4;
                        var $6184 = $6191;
                        break;
                };
                var $6144 = $6184;
                break;
        };
        return $6144;
    };
    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.some':
                var $6193 = self.value;
                var $6194 = Maybe$some$($6193);
                var $6192 = $6194;
                break;
            case 'Maybe.none':
                var $6195 = _b$3;
                var $6192 = $6195;
                break;
        };
        return $6192;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6196 = self.self;
                        var $6197 = self.name;
                        var $6198 = self.xtyp;
                        var $6199 = self.body;
                        var _argm$13 = Maybe$or$(Kind$Map$get$($6197, _cses$4), Kind$Map$get$("_", _cses$4));
                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + ("_" + ($6197 + "_case")))));
                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $6198, _argm$14, _defs$6);
                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);
                        var _type$17 = $6199(Kind$Term$var$($6196, 0n))(Kind$Term$var$($6197, 0n));
                        var $6200 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                        return $6200;
                    case 'Kind.Term.var':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.ori':
                        var _expr$10 = (() => {
                            var $6203 = _expr$1;
                            var $6204 = _wyth$3;
                            let _expr$11 = $6203;
                            let _defn$10;
                            while ($6204._ === 'List.cons') {
                                _defn$10 = $6204.head;
                                var $6203 = Kind$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6205 = self.term;
                                            var $6206 = $6205;
                                            return $6206;
                                    };
                                })());
                                _expr$11 = $6203;
                                $6204 = $6204.tail;
                            }
                            return _expr$11;
                        })();
                        var $6201 = _expr$10;
                        return $6201;
                    case 'Kind.Term.ref':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                        var _expr$9 = (() => {
                            var $6209 = _expr$1;
                            var $6210 = _wyth$3;
                            let _expr$10 = $6209;
                            let _defn$9;
                            while ($6210._ === 'List.cons') {
                                _defn$9 = $6210.head;
                                var $6209 = Kind$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6211 = self.term;
                                            var $6212 = $6211;
                                            return $6212;
                                    };
                                })());
                                _expr$10 = $6209;
                                $6210 = $6210.tail;
                            }
                            return _expr$10;
                        })();
                        var $6207 = _expr$9;
                        return $6207;
                    case 'Kind.Term.typ':
                        var _expr$8 = (() => {
                            var $6215 = _expr$1;
                            var $6216 = _wyth$3;
                            let _expr$9 = $6215;
                            let _defn$8;
                            while ($6216._ === 'List.cons') {
                                _defn$8 = $6216.head;
                                var $6215 = Kind$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6217 = self.term;
                                            var $6218 = $6217;
                                            return $6218;
                                    };
                                })());
                                _expr$9 = $6215;
                                $6216 = $6216.tail;
                            }
                            return _expr$9;
                        })();
                        var $6213 = _expr$8;
                        return $6213;
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                        var _expr$11 = (() => {
                            var $6221 = _expr$1;
                            var $6222 = _wyth$3;
                            let _expr$12 = $6221;
                            let _defn$11;
                            while ($6222._ === 'List.cons') {
                                _defn$11 = $6222.head;
                                var $6221 = Kind$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6223 = self.term;
                                            var $6224 = $6223;
                                            return $6224;
                                    };
                                })());
                                _expr$12 = $6221;
                                $6222 = $6222.tail;
                            }
                            return _expr$12;
                        })();
                        var $6219 = _expr$11;
                        return $6219;
                    case 'Kind.Term.cse':
                        var _expr$14 = (() => {
                            var $6227 = _expr$1;
                            var $6228 = _wyth$3;
                            let _expr$15 = $6227;
                            let _defn$14;
                            while ($6228._ === 'List.cons') {
                                _defn$14 = $6228.head;
                                var $6227 = Kind$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6229 = self.term;
                                            var $6230 = $6229;
                                            return $6230;
                                    };
                                })());
                                _expr$15 = $6227;
                                $6228 = $6228.tail;
                            }
                            return _expr$15;
                        })();
                        var $6225 = _expr$14;
                        return $6225;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {
        var self = Kind$Term$reduce$(_etyp$6, _defs$8);
        switch (self._) {
            case 'Kind.Term.all':
                var $6232 = self.self;
                var $6233 = self.name;
                var $6234 = self.xtyp;
                var $6235 = self.body;
                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));
                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $6234, _moti$15, _defs$8);
                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);
                var _type$18 = $6235(Kind$Term$var$($6232, 0n))(Kind$Term$var$($6233, 0n));
                var $6236 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));
                var $6231 = $6236;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6237 = Maybe$none;
                var $6231 = $6237;
                break;
        };
        return $6231;
    };
    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $6238 = ({
            _: 'Kind.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $6238;
    };
    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);

    function BitsSet$has$(_bits$1, _set$2) {
        var self = BitsMap$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $6240 = Bool$false;
                var $6239 = $6240;
                break;
            case 'Maybe.some':
                var $6241 = Bool$true;
                var $6239 = $6241;
                break;
        };
        return $6239;
    };
    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);

    function BitsSet$mut$has$(_bits$1, _set$2) {
        var $6242 = BitsSet$has$(_bits$1, _set$2);
        return $6242;
    };
    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);

    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {
        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({
            ctr: 'TCO',
            arg: [_term$1, _arity$2]
        });
        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);
        var arg = [_term$1, _arity$2];
        while (true) {
            let [_term$1, _arity$2] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $6243 = self.name;
                        var $6244 = Maybe$some$(Pair$new$($6243, _arity$2));
                        return $6244;
                    case 'Kind.Term.ref':
                        var $6245 = self.name;
                        var $6246 = Maybe$some$(Pair$new$($6245, _arity$2));
                        return $6246;
                    case 'Kind.Term.app':
                        var $6247 = self.func;
                        var $6248 = Kind$Term$equal$extra_holes$funari$($6247, Nat$succ$(_arity$2));
                        return $6248;
                    case 'Kind.Term.ori':
                        var $6249 = self.expr;
                        var $6250 = Kind$Term$equal$extra_holes$funari$($6249, _arity$2);
                        return $6250;
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6251 = Maybe$none;
                        return $6251;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);
    const Bool$or = a0 => a1 => (a0 || a1);

    function Kind$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.all':
                var $6253 = self.xtyp;
                var $6254 = self.body;
                var $6255 = (Kind$Term$has_holes$($6253) || Kind$Term$has_holes$($6254(Kind$Term$typ)(Kind$Term$typ)));
                var $6252 = $6255;
                break;
            case 'Kind.Term.lam':
                var $6256 = self.body;
                var $6257 = Kind$Term$has_holes$($6256(Kind$Term$typ));
                var $6252 = $6257;
                break;
            case 'Kind.Term.app':
                var $6258 = self.func;
                var $6259 = self.argm;
                var $6260 = (Kind$Term$has_holes$($6258) || Kind$Term$has_holes$($6259));
                var $6252 = $6260;
                break;
            case 'Kind.Term.let':
                var $6261 = self.expr;
                var $6262 = self.body;
                var $6263 = (Kind$Term$has_holes$($6261) || Kind$Term$has_holes$($6262(Kind$Term$typ)));
                var $6252 = $6263;
                break;
            case 'Kind.Term.def':
                var $6264 = self.expr;
                var $6265 = self.body;
                var $6266 = (Kind$Term$has_holes$($6264) || Kind$Term$has_holes$($6265(Kind$Term$typ)));
                var $6252 = $6266;
                break;
            case 'Kind.Term.ann':
                var $6267 = self.term;
                var $6268 = self.type;
                var $6269 = (Kind$Term$has_holes$($6267) || Kind$Term$has_holes$($6268));
                var $6252 = $6269;
                break;
            case 'Kind.Term.ori':
                var $6270 = self.expr;
                var $6271 = Kind$Term$has_holes$($6270);
                var $6252 = $6271;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $6272 = Bool$false;
                var $6252 = $6272;
                break;
            case 'Kind.Term.hol':
                var $6273 = Bool$true;
                var $6252 = $6273;
                break;
        };
        return $6252;
    };
    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);

    function Kind$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var self = Kind$Term$has_holes$(_term$2);
                if (self) {
                    var $6276 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                    var $6275 = $6276;
                } else {
                    var $6277 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));
                    var $6275 = $6277;
                };
                var $6274 = $6275;
                break;
            case 'Kind.Term.hol':
                var $6278 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6274 = $6278;
                break;
        };
        return $6274;
    };
    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);

    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Kind.Term.app':
                var $6280 = self.func;
                var $6281 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6283 = self.func;
                        var $6284 = self.argm;
                        var self = Kind$Term$equal$extra_holes$filler$($6280, $6283);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6286 = self.value;
                                var $6287 = self.errors;
                                var self = $6286;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6289 = Kind$Check$result$(Maybe$none, $6287);
                                        var $6288 = $6289;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Term$equal$extra_holes$filler$($6281, $6284);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6291 = self.value;
                                                var $6292 = self.errors;
                                                var $6293 = Kind$Check$result$($6291, List$concat$($6287, $6292));
                                                var $6290 = $6293;
                                                break;
                                        };
                                        var $6288 = $6290;
                                        break;
                                };
                                var $6285 = $6288;
                                break;
                        };
                        var $6282 = $6285;
                        break;
                    case 'Kind.Term.hol':
                        var $6294 = self.path;
                        var self = Kind$Term$equal$hole$($6294, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6296 = self.value;
                                var $6297 = self.errors;
                                var self = $6296;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6299 = Kind$Check$result$(Maybe$none, $6297);
                                        var $6298 = $6299;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6301 = self.value;
                                                var $6302 = self.errors;
                                                var $6303 = Kind$Check$result$($6301, List$concat$($6297, $6302));
                                                var $6300 = $6303;
                                                break;
                                        };
                                        var $6298 = $6300;
                                        break;
                                };
                                var $6295 = $6298;
                                break;
                        };
                        var $6282 = $6295;
                        break;
                    case 'Kind.Term.ori':
                        var $6304 = self.expr;
                        var $6305 = Kind$Term$equal$extra_holes$filler$(_a$1, $6304);
                        var $6282 = $6305;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6306 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6282 = $6306;
                        break;
                };
                var $6279 = $6282;
                break;
            case 'Kind.Term.hol':
                var $6307 = self.path;
                var self = Kind$Term$equal$hole$($6307, _b$2);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6309 = self.value;
                        var $6310 = self.errors;
                        var self = $6309;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6312 = Kind$Check$result$(Maybe$none, $6310);
                                var $6311 = $6312;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6314 = self.value;
                                        var $6315 = self.errors;
                                        var $6316 = Kind$Check$result$($6314, List$concat$($6310, $6315));
                                        var $6313 = $6316;
                                        break;
                                };
                                var $6311 = $6313;
                                break;
                        };
                        var $6308 = $6311;
                        break;
                };
                var $6279 = $6308;
                break;
            case 'Kind.Term.ori':
                var $6317 = self.expr;
                var $6318 = Kind$Term$equal$extra_holes$filler$($6317, _b$2);
                var $6279 = $6318;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6320 = self.path;
                        var self = Kind$Term$equal$hole$($6320, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6322 = self.value;
                                var $6323 = self.errors;
                                var self = $6322;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6325 = Kind$Check$result$(Maybe$none, $6323);
                                        var $6324 = $6325;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6327 = self.value;
                                                var $6328 = self.errors;
                                                var $6329 = Kind$Check$result$($6327, List$concat$($6323, $6328));
                                                var $6326 = $6329;
                                                break;
                                        };
                                        var $6324 = $6326;
                                        break;
                                };
                                var $6321 = $6324;
                                break;
                        };
                        var $6319 = $6321;
                        break;
                    case 'Kind.Term.ori':
                        var $6330 = self.expr;
                        var $6331 = Kind$Term$equal$extra_holes$filler$(_a$1, $6330);
                        var $6319 = $6331;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6332 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6319 = $6332;
                        break;
                };
                var $6279 = $6319;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6334 = self.path;
                        var self = Kind$Term$equal$hole$($6334, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6336 = self.value;
                                var $6337 = self.errors;
                                var self = $6336;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6339 = Kind$Check$result$(Maybe$none, $6337);
                                        var $6338 = $6339;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6341 = self.value;
                                                var $6342 = self.errors;
                                                var $6343 = Kind$Check$result$($6341, List$concat$($6337, $6342));
                                                var $6340 = $6343;
                                                break;
                                        };
                                        var $6338 = $6340;
                                        break;
                                };
                                var $6335 = $6338;
                                break;
                        };
                        var $6333 = $6335;
                        break;
                    case 'Kind.Term.ori':
                        var $6344 = self.expr;
                        var $6345 = Kind$Term$equal$extra_holes$filler$(_a$1, $6344);
                        var $6333 = $6345;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6346 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6333 = $6346;
                        break;
                };
                var $6279 = $6333;
                break;
            case 'Kind.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6348 = self.path;
                        var self = Kind$Term$equal$hole$($6348, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6350 = self.value;
                                var $6351 = self.errors;
                                var self = $6350;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6353 = Kind$Check$result$(Maybe$none, $6351);
                                        var $6352 = $6353;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6355 = self.value;
                                                var $6356 = self.errors;
                                                var $6357 = Kind$Check$result$($6355, List$concat$($6351, $6356));
                                                var $6354 = $6357;
                                                break;
                                        };
                                        var $6352 = $6354;
                                        break;
                                };
                                var $6349 = $6352;
                                break;
                        };
                        var $6347 = $6349;
                        break;
                    case 'Kind.Term.ori':
                        var $6358 = self.expr;
                        var $6359 = Kind$Term$equal$extra_holes$filler$(_a$1, $6358);
                        var $6347 = $6359;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6360 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6347 = $6360;
                        break;
                };
                var $6279 = $6347;
                break;
            case 'Kind.Term.all':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6362 = self.path;
                        var self = Kind$Term$equal$hole$($6362, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6364 = self.value;
                                var $6365 = self.errors;
                                var self = $6364;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6367 = Kind$Check$result$(Maybe$none, $6365);
                                        var $6366 = $6367;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6369 = self.value;
                                                var $6370 = self.errors;
                                                var $6371 = Kind$Check$result$($6369, List$concat$($6365, $6370));
                                                var $6368 = $6371;
                                                break;
                                        };
                                        var $6366 = $6368;
                                        break;
                                };
                                var $6363 = $6366;
                                break;
                        };
                        var $6361 = $6363;
                        break;
                    case 'Kind.Term.ori':
                        var $6372 = self.expr;
                        var $6373 = Kind$Term$equal$extra_holes$filler$(_a$1, $6372);
                        var $6361 = $6373;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6374 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6361 = $6374;
                        break;
                };
                var $6279 = $6361;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6376 = self.path;
                        var self = Kind$Term$equal$hole$($6376, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6378 = self.value;
                                var $6379 = self.errors;
                                var self = $6378;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6381 = Kind$Check$result$(Maybe$none, $6379);
                                        var $6380 = $6381;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6383 = self.value;
                                                var $6384 = self.errors;
                                                var $6385 = Kind$Check$result$($6383, List$concat$($6379, $6384));
                                                var $6382 = $6385;
                                                break;
                                        };
                                        var $6380 = $6382;
                                        break;
                                };
                                var $6377 = $6380;
                                break;
                        };
                        var $6375 = $6377;
                        break;
                    case 'Kind.Term.ori':
                        var $6386 = self.expr;
                        var $6387 = Kind$Term$equal$extra_holes$filler$(_a$1, $6386);
                        var $6375 = $6387;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6388 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6375 = $6388;
                        break;
                };
                var $6279 = $6375;
                break;
            case 'Kind.Term.cse':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6390 = self.path;
                        var self = Kind$Term$equal$hole$($6390, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6392 = self.value;
                                var $6393 = self.errors;
                                var self = $6392;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6395 = Kind$Check$result$(Maybe$none, $6393);
                                        var $6394 = $6395;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6397 = self.value;
                                                var $6398 = self.errors;
                                                var $6399 = Kind$Check$result$($6397, List$concat$($6393, $6398));
                                                var $6396 = $6399;
                                                break;
                                        };
                                        var $6394 = $6396;
                                        break;
                                };
                                var $6391 = $6394;
                                break;
                        };
                        var $6389 = $6391;
                        break;
                    case 'Kind.Term.ori':
                        var $6400 = self.expr;
                        var $6401 = Kind$Term$equal$extra_holes$filler$(_a$1, $6400);
                        var $6389 = $6401;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6402 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6389 = $6402;
                        break;
                };
                var $6279 = $6389;
                break;
        };
        return $6279;
    };
    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);

    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);
        switch (self._) {
            case 'Maybe.some':
                var $6404 = self.value;
                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);
                switch (self._) {
                    case 'Maybe.some':
                        var $6406 = self.value;
                        var self = $6404;
                        switch (self._) {
                            case 'Pair.new':
                                var $6408 = self.fst;
                                var $6409 = self.snd;
                                var self = $6406;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $6411 = self.fst;
                                        var $6412 = self.snd;
                                        var _same_fun$9 = ($6408 === $6411);
                                        var _same_ari$10 = ($6409 === $6412);
                                        var self = (_same_fun$9 && _same_ari$10);
                                        if (self) {
                                            var $6414 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);
                                            var $6413 = $6414;
                                        } else {
                                            var $6415 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                            var $6413 = $6415;
                                        };
                                        var $6410 = $6413;
                                        break;
                                };
                                var $6407 = $6410;
                                break;
                        };
                        var $6405 = $6407;
                        break;
                    case 'Maybe.none':
                        var $6416 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6405 = $6416;
                        break;
                };
                var $6403 = $6405;
                break;
            case 'Maybe.none':
                var $6417 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                var $6403 = $6417;
                break;
        };
        return $6403;
    };
    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);

    function BitsSet$set$(_bits$1, _set$2) {
        var $6418 = BitsMap$set$(_bits$1, Unit$new, _set$2);
        return $6418;
    };
    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);

    function BitsSet$mut$set$(_bits$1, _set$2) {
        var $6419 = BitsSet$set$(_bits$1, _set$2);
        return $6419;
    };
    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6421 = _b$2;
            var $6420 = $6421;
        } else {
            var $6422 = (!_b$2);
            var $6420 = $6422;
        };
        return $6420;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Kind$Term$equal$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, Bool$false);
        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, Bool$true);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6424 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6423 = $6424;
        } else {
            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, Bool$false);
            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, Bool$true);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6426 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6425 = $6426;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = BitsSet$mut$has$(_id$12, _seen$5);
                if (self) {
                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6429 = self.value;
                            var $6430 = self.errors;
                            var self = $6429;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6432 = Kind$Check$result$(Maybe$none, $6430);
                                    var $6431 = $6432;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6434 = self.value;
                                            var $6435 = self.errors;
                                            var $6436 = Kind$Check$result$($6434, List$concat$($6430, $6435));
                                            var $6433 = $6436;
                                            break;
                                    };
                                    var $6431 = $6433;
                                    break;
                            };
                            var $6428 = $6431;
                            break;
                    };
                    var $6427 = $6428;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Kind.Term.all':
                            var $6438 = self.eras;
                            var $6439 = self.self;
                            var $6440 = self.name;
                            var $6441 = self.xtyp;
                            var $6442 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.all':
                                    var $6444 = self.eras;
                                    var $6445 = self.self;
                                    var $6446 = self.name;
                                    var $6447 = self.xtyp;
                                    var $6448 = self.body;
                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $6442(Kind$Term$var$($6439, _lv$4))(Kind$Term$var$($6440, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $6448(Kind$Term$var$($6445, _lv$4))(Kind$Term$var$($6446, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($6439 === $6445);
                                    var _eq_eras$27 = Bool$eql$($6438, $6444);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Kind$Term$equal$($6441, $6447, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6451 = self.value;
                                                var $6452 = self.errors;
                                                var self = $6451;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6454 = self.value;
                                                        var self = Kind$Term$equal$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6456 = self.value;
                                                                var $6457 = self.errors;
                                                                var self = $6456;
                                                                switch (self._) {
                                                                    case 'Maybe.some':
                                                                        var $6459 = self.value;
                                                                        var self = Kind$Check$result$(Maybe$some$(($6454 && $6459)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Kind.Check.result':
                                                                                var $6461 = self.value;
                                                                                var $6462 = self.errors;
                                                                                var $6463 = Kind$Check$result$($6461, List$concat$($6457, $6462));
                                                                                var $6460 = $6463;
                                                                                break;
                                                                        };
                                                                        var $6458 = $6460;
                                                                        break;
                                                                    case 'Maybe.none':
                                                                        var $6464 = Kind$Check$result$(Maybe$none, $6457);
                                                                        var $6458 = $6464;
                                                                        break;
                                                                };
                                                                var self = $6458;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6465 = self.value;
                                                                var $6466 = self.errors;
                                                                var $6467 = Kind$Check$result$($6465, List$concat$($6452, $6466));
                                                                var $6455 = $6467;
                                                                break;
                                                        };
                                                        var $6453 = $6455;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6468 = Kind$Check$result$(Maybe$none, $6452);
                                                        var $6453 = $6468;
                                                        break;
                                                };
                                                var $6450 = $6453;
                                                break;
                                        };
                                        var $6449 = $6450;
                                    } else {
                                        var $6469 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6449 = $6469;
                                    };
                                    var $6443 = $6449;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6470 = self.path;
                                    var $6471 = Kind$Term$equal$hole$($6470, _a$1);
                                    var $6443 = $6471;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6472 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6443 = $6472;
                                    break;
                            };
                            var $6437 = $6443;
                            break;
                        case 'Kind.Term.lam':
                            var $6473 = self.name;
                            var $6474 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.lam':
                                    var $6476 = self.name;
                                    var $6477 = self.body;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $6474(Kind$Term$var$($6473, _lv$4));
                                    var _b1_body$19 = $6477(Kind$Term$var$($6476, _lv$4));
                                    var self = Kind$Term$equal$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6479 = self.value;
                                            var $6480 = self.errors;
                                            var self = $6479;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6482 = self.value;
                                                    var self = Kind$Check$result$(Maybe$some$($6482), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6484 = self.value;
                                                            var $6485 = self.errors;
                                                            var $6486 = Kind$Check$result$($6484, List$concat$($6480, $6485));
                                                            var $6483 = $6486;
                                                            break;
                                                    };
                                                    var $6481 = $6483;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6487 = Kind$Check$result$(Maybe$none, $6480);
                                                    var $6481 = $6487;
                                                    break;
                                            };
                                            var $6478 = $6481;
                                            break;
                                    };
                                    var $6475 = $6478;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6488 = self.path;
                                    var $6489 = Kind$Term$equal$hole$($6488, _a$1);
                                    var $6475 = $6489;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6490 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6475 = $6490;
                                    break;
                            };
                            var $6437 = $6475;
                            break;
                        case 'Kind.Term.app':
                            var $6491 = self.func;
                            var $6492 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.app':
                                    var $6494 = self.func;
                                    var $6495 = self.argm;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var self = Kind$Term$equal$($6491, $6494, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6497 = self.value;
                                            var $6498 = self.errors;
                                            var self = $6497;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6500 = self.value;
                                                    var self = Kind$Term$equal$($6492, $6495, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6502 = self.value;
                                                            var $6503 = self.errors;
                                                            var self = $6502;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $6505 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6500 && $6505)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $6507 = self.value;
                                                                            var $6508 = self.errors;
                                                                            var $6509 = Kind$Check$result$($6507, List$concat$($6503, $6508));
                                                                            var $6506 = $6509;
                                                                            break;
                                                                    };
                                                                    var $6504 = $6506;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $6510 = Kind$Check$result$(Maybe$none, $6503);
                                                                    var $6504 = $6510;
                                                                    break;
                                                            };
                                                            var self = $6504;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6511 = self.value;
                                                            var $6512 = self.errors;
                                                            var $6513 = Kind$Check$result$($6511, List$concat$($6498, $6512));
                                                            var $6501 = $6513;
                                                            break;
                                                    };
                                                    var $6499 = $6501;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6514 = Kind$Check$result$(Maybe$none, $6498);
                                                    var $6499 = $6514;
                                                    break;
                                            };
                                            var $6496 = $6499;
                                            break;
                                    };
                                    var $6493 = $6496;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6515 = self.path;
                                    var $6516 = Kind$Term$equal$hole$($6515, _a$1);
                                    var $6493 = $6516;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6517 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6493 = $6517;
                                    break;
                            };
                            var $6437 = $6493;
                            break;
                        case 'Kind.Term.let':
                            var $6518 = self.name;
                            var $6519 = self.expr;
                            var $6520 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.let':
                                    var $6522 = self.name;
                                    var $6523 = self.expr;
                                    var $6524 = self.body;
                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $6520(Kind$Term$var$($6518, _lv$4));
                                    var _b1_body$21 = $6524(Kind$Term$var$($6522, _lv$4));
                                    var self = Kind$Term$equal$($6519, $6523, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6526 = self.value;
                                            var $6527 = self.errors;
                                            var self = $6526;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6529 = self.value;
                                                    var self = Kind$Term$equal$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6531 = self.value;
                                                            var $6532 = self.errors;
                                                            var self = $6531;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $6534 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6529 && $6534)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $6536 = self.value;
                                                                            var $6537 = self.errors;
                                                                            var $6538 = Kind$Check$result$($6536, List$concat$($6532, $6537));
                                                                            var $6535 = $6538;
                                                                            break;
                                                                    };
                                                                    var $6533 = $6535;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $6539 = Kind$Check$result$(Maybe$none, $6532);
                                                                    var $6533 = $6539;
                                                                    break;
                                                            };
                                                            var self = $6533;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6540 = self.value;
                                                            var $6541 = self.errors;
                                                            var $6542 = Kind$Check$result$($6540, List$concat$($6527, $6541));
                                                            var $6530 = $6542;
                                                            break;
                                                    };
                                                    var $6528 = $6530;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6543 = Kind$Check$result$(Maybe$none, $6527);
                                                    var $6528 = $6543;
                                                    break;
                                            };
                                            var $6525 = $6528;
                                            break;
                                    };
                                    var $6521 = $6525;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6544 = self.path;
                                    var $6545 = Kind$Term$equal$hole$($6544, _a$1);
                                    var $6521 = $6545;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6546 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6521 = $6546;
                                    break;
                            };
                            var $6437 = $6521;
                            break;
                        case 'Kind.Term.hol':
                            var $6547 = self.path;
                            var $6548 = Kind$Term$equal$hole$($6547, _b$2);
                            var $6437 = $6548;
                            break;
                        case 'Kind.Term.var':
                        case 'Kind.Term.ori':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6550 = self.path;
                                    var $6551 = Kind$Term$equal$hole$($6550, _a$1);
                                    var $6549 = $6551;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6552 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6549 = $6552;
                                    break;
                            };
                            var $6437 = $6549;
                            break;
                        case 'Kind.Term.ref':
                        case 'Kind.Term.nat':
                        case 'Kind.Term.chr':
                        case 'Kind.Term.str':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6554 = self.path;
                                    var $6555 = Kind$Term$equal$hole$($6554, _a$1);
                                    var $6553 = $6555;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6556 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6553 = $6556;
                                    break;
                            };
                            var $6437 = $6553;
                            break;
                        case 'Kind.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6558 = self.path;
                                    var $6559 = Kind$Term$equal$hole$($6558, _a$1);
                                    var $6557 = $6559;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6560 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6557 = $6560;
                                    break;
                            };
                            var $6437 = $6557;
                            break;
                        case 'Kind.Term.def':
                        case 'Kind.Term.ann':
                        case 'Kind.Term.gol':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6562 = self.path;
                                    var $6563 = Kind$Term$equal$hole$($6562, _a$1);
                                    var $6561 = $6563;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6564 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6561 = $6564;
                                    break;
                            };
                            var $6437 = $6561;
                            break;
                        case 'Kind.Term.cse':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6566 = self.path;
                                    var $6567 = Kind$Term$equal$hole$($6566, _a$1);
                                    var $6565 = $6567;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6568 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6565 = $6568;
                                    break;
                            };
                            var $6437 = $6565;
                            break;
                    };
                    var $6427 = $6437;
                };
                var $6425 = $6427;
            };
            var $6423 = $6425;
        };
        return $6423;
    };
    const Kind$Term$equal = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$(x0, x1, x2, x3, x4);
    const BitsSet$new = BitsMap$new;

    function BitsSet$mut$new$(_a$1) {
        var $6569 = BitsSet$new;
        return $6569;
    };
    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);

    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6571 = self.name;
                var $6572 = self.indx;
                var self = List$at_last$($6572, _ctx$4);
                switch (self._) {
                    case 'Maybe.some':
                        var $6574 = self.value;
                        var $6575 = Kind$Check$result$(Maybe$some$((() => {
                            var self = $6574;
                            switch (self._) {
                                case 'Pair.new':
                                    var $6576 = self.snd;
                                    var $6577 = $6576;
                                    return $6577;
                            };
                        })()), List$nil);
                        var $6573 = $6575;
                        break;
                    case 'Maybe.none':
                        var $6578 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $6571), List$nil));
                        var $6573 = $6578;
                        break;
                };
                var self = $6573;
                break;
            case 'Kind.Term.ref':
                var $6579 = self.name;
                var self = Kind$Map$get$($6579, _defs$3);
                switch (self._) {
                    case 'Maybe.some':
                        var $6581 = self.value;
                        var self = $6581;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $6583 = self.name;
                                var $6584 = self.term;
                                var $6585 = self.type;
                                var $6586 = self.stat;
                                var _ref_name$18 = $6583;
                                var _ref_type$19 = $6585;
                                var _ref_term$20 = $6584;
                                var _ref_stat$21 = $6586;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                        var $6588 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));
                                        var $6587 = $6588;
                                        break;
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $6589 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $6587 = $6589;
                                        break;
                                    case 'Kind.Status.fail':
                                        var $6590 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));
                                        var $6587 = $6590;
                                        break;
                                };
                                var $6582 = $6587;
                                break;
                        };
                        var $6580 = $6582;
                        break;
                    case 'Maybe.none':
                        var $6591 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $6579), List$nil));
                        var $6580 = $6591;
                        break;
                };
                var self = $6580;
                break;
            case 'Kind.Term.all':
                var $6592 = self.self;
                var $6593 = self.name;
                var $6594 = self.xtyp;
                var $6595 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Kind$Term$var$($6592, _ctx_size$12);
                var _body_var$14 = Kind$Term$var$($6593, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($6593, $6594), List$cons$(Pair$new$($6592, _term$1), _ctx$4));
                var self = Kind$Term$check$($6594, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6597 = self.value;
                        var $6598 = self.errors;
                        var self = $6597;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6600 = Kind$Check$result$(Maybe$none, $6598);
                                var $6599 = $6600;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Term$check$($6595(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6602 = self.value;
                                        var $6603 = self.errors;
                                        var self = $6602;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6605 = Kind$Check$result$(Maybe$none, $6603);
                                                var $6604 = $6605;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6607 = self.value;
                                                        var $6608 = self.errors;
                                                        var $6609 = Kind$Check$result$($6607, List$concat$($6603, $6608));
                                                        var $6606 = $6609;
                                                        break;
                                                };
                                                var $6604 = $6606;
                                                break;
                                        };
                                        var self = $6604;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6610 = self.value;
                                        var $6611 = self.errors;
                                        var $6612 = Kind$Check$result$($6610, List$concat$($6598, $6611));
                                        var $6601 = $6612;
                                        break;
                                };
                                var $6599 = $6601;
                                break;
                        };
                        var $6596 = $6599;
                        break;
                };
                var self = $6596;
                break;
            case 'Kind.Term.lam':
                var $6613 = self.name;
                var $6614 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6616 = self.value;
                        var _typv$10 = Kind$Term$reduce$($6616, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Kind.Term.all':
                                var $6618 = self.xtyp;
                                var $6619 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Kind$Term$var$($6613, _ctx_size$16);
                                var _body_typ$19 = $6619(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($6613, $6618), _ctx$4);
                                var self = Kind$Term$check$($6614(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6621 = self.value;
                                        var $6622 = self.errors;
                                        var self = $6621;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6624 = Kind$Check$result$(Maybe$none, $6622);
                                                var $6623 = $6624;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$($6616), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6626 = self.value;
                                                        var $6627 = self.errors;
                                                        var $6628 = Kind$Check$result$($6626, List$concat$($6622, $6627));
                                                        var $6625 = $6628;
                                                        break;
                                                };
                                                var $6623 = $6625;
                                                break;
                                        };
                                        var $6620 = $6623;
                                        break;
                                };
                                var $6617 = $6620;
                                break;
                            case 'Kind.Term.var':
                            case 'Kind.Term.lam':
                            case 'Kind.Term.app':
                            case 'Kind.Term.ori':
                                var _expected$13 = Either$left$("function");
                                var _detected$14 = Either$right$($6616);
                                var $6629 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $6617 = $6629;
                                break;
                            case 'Kind.Term.ref':
                            case 'Kind.Term.hol':
                            case 'Kind.Term.nat':
                            case 'Kind.Term.chr':
                            case 'Kind.Term.str':
                                var _expected$12 = Either$left$("function");
                                var _detected$13 = Either$right$($6616);
                                var $6630 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $6617 = $6630;
                                break;
                            case 'Kind.Term.typ':
                                var _expected$11 = Either$left$("function");
                                var _detected$12 = Either$right$($6616);
                                var $6631 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $6617 = $6631;
                                break;
                            case 'Kind.Term.let':
                            case 'Kind.Term.def':
                            case 'Kind.Term.ann':
                            case 'Kind.Term.gol':
                                var _expected$14 = Either$left$("function");
                                var _detected$15 = Either$right$($6616);
                                var $6632 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $6617 = $6632;
                                break;
                            case 'Kind.Term.cse':
                                var _expected$17 = Either$left$("function");
                                var _detected$18 = Either$right$($6616);
                                var $6633 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $6617 = $6633;
                                break;
                        };
                        var $6615 = $6617;
                        break;
                    case 'Maybe.none':
                        var _lam_type$9 = Kind$Term$hol$(Bits$e);
                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $6634 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $6615 = $6634;
                        break;
                };
                var self = $6615;
                break;
            case 'Kind.Term.app':
                var $6635 = self.func;
                var $6636 = self.argm;
                var self = Kind$Term$check$($6635, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6638 = self.value;
                        var $6639 = self.errors;
                        var self = $6638;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6641 = self.value;
                                var _func_typ$12 = Kind$Term$reduce$($6641, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Kind.Term.all':
                                        var $6643 = self.xtyp;
                                        var $6644 = self.body;
                                        var self = Kind$Term$check$($6636, Maybe$some$($6643), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6646 = self.value;
                                                var $6647 = self.errors;
                                                var self = $6646;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $6649 = Kind$Check$result$(Maybe$none, $6647);
                                                        var $6648 = $6649;
                                                        break;
                                                    case 'Maybe.some':
                                                        var self = Kind$Check$result$(Maybe$some$($6644($6635)($6636)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6651 = self.value;
                                                                var $6652 = self.errors;
                                                                var $6653 = Kind$Check$result$($6651, List$concat$($6647, $6652));
                                                                var $6650 = $6653;
                                                                break;
                                                        };
                                                        var $6648 = $6650;
                                                        break;
                                                };
                                                var $6645 = $6648;
                                                break;
                                        };
                                        var self = $6645;
                                        break;
                                    case 'Kind.Term.var':
                                    case 'Kind.Term.lam':
                                    case 'Kind.Term.app':
                                    case 'Kind.Term.ori':
                                        var _expected$15 = Either$left$("function");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var self = $6635;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6655 = self.orig;
                                                var $6656 = Maybe$some$($6655);
                                                var _orig$17 = $6656;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6657 = _orig$6;
                                                var _orig$17 = $6657;
                                                break;
                                        };
                                        var $6654 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$17, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $6654;
                                        break;
                                    case 'Kind.Term.ref':
                                    case 'Kind.Term.hol':
                                    case 'Kind.Term.nat':
                                    case 'Kind.Term.chr':
                                    case 'Kind.Term.str':
                                        var _expected$14 = Either$left$("function");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var self = $6635;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6659 = self.orig;
                                                var $6660 = Maybe$some$($6659);
                                                var _orig$16 = $6660;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6661 = _orig$6;
                                                var _orig$16 = $6661;
                                                break;
                                        };
                                        var $6658 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$16, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $6658;
                                        break;
                                    case 'Kind.Term.typ':
                                        var _expected$13 = Either$left$("function");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var self = $6635;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6663 = self.orig;
                                                var $6664 = Maybe$some$($6663);
                                                var _orig$15 = $6664;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6665 = _orig$6;
                                                var _orig$15 = $6665;
                                                break;
                                        };
                                        var $6662 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$15, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $6662;
                                        break;
                                    case 'Kind.Term.let':
                                    case 'Kind.Term.def':
                                    case 'Kind.Term.ann':
                                    case 'Kind.Term.gol':
                                        var _expected$16 = Either$left$("function");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var self = $6635;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6667 = self.orig;
                                                var $6668 = Maybe$some$($6667);
                                                var _orig$18 = $6668;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6669 = _orig$6;
                                                var _orig$18 = $6669;
                                                break;
                                        };
                                        var $6666 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$18, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $6666;
                                        break;
                                    case 'Kind.Term.cse':
                                        var _expected$19 = Either$left$("function");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var self = $6635;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6671 = self.orig;
                                                var $6672 = Maybe$some$($6671);
                                                var _orig$21 = $6672;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6673 = _orig$6;
                                                var _orig$21 = $6673;
                                                break;
                                        };
                                        var $6670 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$21, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $6670;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6674 = self.value;
                                        var $6675 = self.errors;
                                        var $6676 = Kind$Check$result$($6674, List$concat$($6639, $6675));
                                        var $6642 = $6676;
                                        break;
                                };
                                var $6640 = $6642;
                                break;
                            case 'Maybe.none':
                                var $6677 = Kind$Check$result$(Maybe$none, $6639);
                                var $6640 = $6677;
                                break;
                        };
                        var $6637 = $6640;
                        break;
                };
                var self = $6637;
                break;
            case 'Kind.Term.let':
                var $6678 = self.name;
                var $6679 = self.expr;
                var $6680 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($6679, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6682 = self.value;
                        var $6683 = self.errors;
                        var self = $6682;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6685 = self.value;
                                var _body_val$14 = $6680(Kind$Term$var$($6678, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($6678, $6685), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6687 = self.value;
                                        var $6688 = self.errors;
                                        var self = $6687;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6690 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($6690), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6692 = self.value;
                                                        var $6693 = self.errors;
                                                        var $6694 = Kind$Check$result$($6692, List$concat$($6688, $6693));
                                                        var $6691 = $6694;
                                                        break;
                                                };
                                                var $6689 = $6691;
                                                break;
                                            case 'Maybe.none':
                                                var $6695 = Kind$Check$result$(Maybe$none, $6688);
                                                var $6689 = $6695;
                                                break;
                                        };
                                        var self = $6689;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6696 = self.value;
                                        var $6697 = self.errors;
                                        var $6698 = Kind$Check$result$($6696, List$concat$($6683, $6697));
                                        var $6686 = $6698;
                                        break;
                                };
                                var $6684 = $6686;
                                break;
                            case 'Maybe.none':
                                var $6699 = Kind$Check$result$(Maybe$none, $6683);
                                var $6684 = $6699;
                                break;
                        };
                        var $6681 = $6684;
                        break;
                };
                var self = $6681;
                break;
            case 'Kind.Term.def':
                var $6700 = self.name;
                var $6701 = self.expr;
                var $6702 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($6701, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6704 = self.value;
                        var $6705 = self.errors;
                        var self = $6704;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6707 = self.value;
                                var _body_val$14 = $6702(Kind$Term$ann$(Bool$true, $6701, $6707));
                                var _body_ctx$15 = List$cons$(Pair$new$($6700, $6707), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6709 = self.value;
                                        var $6710 = self.errors;
                                        var self = $6709;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6712 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($6712), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6714 = self.value;
                                                        var $6715 = self.errors;
                                                        var $6716 = Kind$Check$result$($6714, List$concat$($6710, $6715));
                                                        var $6713 = $6716;
                                                        break;
                                                };
                                                var $6711 = $6713;
                                                break;
                                            case 'Maybe.none':
                                                var $6717 = Kind$Check$result$(Maybe$none, $6710);
                                                var $6711 = $6717;
                                                break;
                                        };
                                        var self = $6711;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6718 = self.value;
                                        var $6719 = self.errors;
                                        var $6720 = Kind$Check$result$($6718, List$concat$($6705, $6719));
                                        var $6708 = $6720;
                                        break;
                                };
                                var $6706 = $6708;
                                break;
                            case 'Maybe.none':
                                var $6721 = Kind$Check$result$(Maybe$none, $6705);
                                var $6706 = $6721;
                                break;
                        };
                        var $6703 = $6706;
                        break;
                };
                var self = $6703;
                break;
            case 'Kind.Term.ann':
                var $6722 = self.done;
                var $6723 = self.term;
                var $6724 = self.type;
                var self = $6722;
                if (self) {
                    var $6726 = Kind$Check$result$(Maybe$some$($6724), List$nil);
                    var $6725 = $6726;
                } else {
                    var self = Kind$Term$check$($6723, Maybe$some$($6724), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6728 = self.value;
                            var $6729 = self.errors;
                            var self = $6728;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6731 = Kind$Check$result$(Maybe$none, $6729);
                                    var $6730 = $6731;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Term$check$($6724, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6733 = self.value;
                                            var $6734 = self.errors;
                                            var self = $6733;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $6736 = Kind$Check$result$(Maybe$none, $6734);
                                                    var $6735 = $6736;
                                                    break;
                                                case 'Maybe.some':
                                                    var self = Kind$Check$result$(Maybe$some$($6724), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6738 = self.value;
                                                            var $6739 = self.errors;
                                                            var $6740 = Kind$Check$result$($6738, List$concat$($6734, $6739));
                                                            var $6737 = $6740;
                                                            break;
                                                    };
                                                    var $6735 = $6737;
                                                    break;
                                            };
                                            var self = $6735;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6741 = self.value;
                                            var $6742 = self.errors;
                                            var $6743 = Kind$Check$result$($6741, List$concat$($6729, $6742));
                                            var $6732 = $6743;
                                            break;
                                    };
                                    var $6730 = $6732;
                                    break;
                            };
                            var $6727 = $6730;
                            break;
                    };
                    var $6725 = $6727;
                };
                var self = $6725;
                break;
            case 'Kind.Term.gol':
                var $6744 = self.name;
                var $6745 = self.dref;
                var $6746 = self.verb;
                var $6747 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($6744, $6745, $6746, _type$2, _ctx$4), List$nil));
                var self = $6747;
                break;
            case 'Kind.Term.cse':
                var $6748 = self.expr;
                var $6749 = self.name;
                var $6750 = self.with;
                var $6751 = self.cses;
                var $6752 = self.moti;
                var _expr$13 = $6748;
                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6754 = self.value;
                        var $6755 = self.errors;
                        var self = $6754;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6757 = self.value;
                                var self = Kind$Term$check$infer_with_types$($6750, _defs$3, _ctx$4, _path$5, _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6759 = self.value;
                                        var $6760 = self.errors;
                                        var self = $6759;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6762 = self.value;
                                                var _dsug$20 = Kind$Term$desugar_cse$($6748, $6749, $6762, $6751, $6752, $6757, _type$2, _defs$3, _ctx$4);
                                                var self = _dsug$20;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6764 = self.value;
                                                        var $6765 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $6764), List$nil));
                                                        var self = $6765;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6766 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                                        var self = $6766;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6767 = self.value;
                                                        var $6768 = self.errors;
                                                        var $6769 = Kind$Check$result$($6767, List$concat$($6760, $6768));
                                                        var $6763 = $6769;
                                                        break;
                                                };
                                                var $6761 = $6763;
                                                break;
                                            case 'Maybe.none':
                                                var $6770 = Kind$Check$result$(Maybe$none, $6760);
                                                var $6761 = $6770;
                                                break;
                                        };
                                        var self = $6761;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6771 = self.value;
                                        var $6772 = self.errors;
                                        var $6773 = Kind$Check$result$($6771, List$concat$($6755, $6772));
                                        var $6758 = $6773;
                                        break;
                                };
                                var $6756 = $6758;
                                break;
                            case 'Maybe.none':
                                var $6774 = Kind$Check$result$(Maybe$none, $6755);
                                var $6756 = $6774;
                                break;
                        };
                        var $6753 = $6756;
                        break;
                };
                var self = $6753;
                break;
            case 'Kind.Term.ori':
                var $6775 = self.orig;
                var $6776 = self.expr;
                var $6777 = Kind$Term$check$($6776, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($6775));
                var self = $6777;
                break;
            case 'Kind.Term.typ':
                var $6778 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                var self = $6778;
                break;
            case 'Kind.Term.hol':
                var $6779 = Kind$Check$result$(_type$2, List$nil);
                var self = $6779;
                break;
            case 'Kind.Term.nat':
                var $6780 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")), List$nil);
                var self = $6780;
                break;
            case 'Kind.Term.chr':
                var $6781 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")), List$nil);
                var self = $6781;
                break;
            case 'Kind.Term.str':
                var $6782 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")), List$nil);
                var self = $6782;
                break;
        };
        switch (self._) {
            case 'Kind.Check.result':
                var $6783 = self.value;
                var $6784 = self.errors;
                var self = $6783;
                switch (self._) {
                    case 'Maybe.some':
                        var $6786 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6788 = self.value;
                                var self = Kind$Term$equal$($6788, $6786, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6790 = self.value;
                                        var $6791 = self.errors;
                                        var self = $6790;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6793 = self.value;
                                                var self = $6793;
                                                if (self) {
                                                    var $6795 = Kind$Check$result$(Maybe$some$($6788), List$nil);
                                                    var self = $6795;
                                                } else {
                                                    var $6796 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($6788), Either$right$($6786), _ctx$4), List$nil));
                                                    var self = $6796;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6797 = self.value;
                                                        var $6798 = self.errors;
                                                        var $6799 = Kind$Check$result$($6797, List$concat$($6791, $6798));
                                                        var $6794 = $6799;
                                                        break;
                                                };
                                                var $6792 = $6794;
                                                break;
                                            case 'Maybe.none':
                                                var $6800 = Kind$Check$result$(Maybe$none, $6791);
                                                var $6792 = $6800;
                                                break;
                                        };
                                        var $6789 = $6792;
                                        break;
                                };
                                var self = $6789;
                                break;
                            case 'Maybe.none':
                                var $6801 = Kind$Check$result$(Maybe$some$($6786), List$nil);
                                var self = $6801;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6802 = self.value;
                                var $6803 = self.errors;
                                var $6804 = Kind$Check$result$($6802, List$concat$($6784, $6803));
                                var $6787 = $6804;
                                break;
                        };
                        var $6785 = $6787;
                        break;
                    case 'Maybe.none':
                        var $6805 = Kind$Check$result$(Maybe$none, $6784);
                        var $6785 = $6805;
                        break;
                };
                var $6570 = $6785;
                break;
        };
        return $6570;
    };
    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);

    function Kind$Path$nil$(_x$1) {
        var $6806 = _x$1;
        return $6806;
    };
    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);
    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $6808 = Bool$true;
                var $6807 = $6808;
                break;
            case 'List.cons':
                var $6809 = Bool$false;
                var $6807 = $6809;
                break;
        };
        return $6807;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.all':
                var $6811 = self.eras;
                var $6812 = self.self;
                var $6813 = self.name;
                var $6814 = self.xtyp;
                var $6815 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6817 = self.slice(0, -1);
                        var $6818 = Kind$Term$all$($6811, $6812, $6813, Kind$Term$patch_at$($6817, $6814, _fn$3), $6815);
                        var $6816 = $6818;
                        break;
                    case 'i':
                        var $6819 = self.slice(0, -1);
                        var $6820 = Kind$Term$all$($6811, $6812, $6813, $6814, (_s$10 => _x$11 => {
                            var $6821 = Kind$Term$patch_at$($6819, $6815(_s$10)(_x$11), _fn$3);
                            return $6821;
                        }));
                        var $6816 = $6820;
                        break;
                    case 'e':
                        var $6822 = _fn$3(_term$2);
                        var $6816 = $6822;
                        break;
                };
                var $6810 = $6816;
                break;
            case 'Kind.Term.lam':
                var $6823 = self.name;
                var $6824 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6826 = _fn$3(_term$2);
                        var $6825 = $6826;
                        break;
                    case 'o':
                    case 'i':
                        var $6827 = Kind$Term$lam$($6823, (_x$7 => {
                            var $6828 = Kind$Term$patch_at$(Bits$tail$(_path$1), $6824(_x$7), _fn$3);
                            return $6828;
                        }));
                        var $6825 = $6827;
                        break;
                };
                var $6810 = $6825;
                break;
            case 'Kind.Term.app':
                var $6829 = self.func;
                var $6830 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6832 = self.slice(0, -1);
                        var $6833 = Kind$Term$app$(Kind$Term$patch_at$($6832, $6829, _fn$3), $6830);
                        var $6831 = $6833;
                        break;
                    case 'i':
                        var $6834 = self.slice(0, -1);
                        var $6835 = Kind$Term$app$($6829, Kind$Term$patch_at$($6834, $6830, _fn$3));
                        var $6831 = $6835;
                        break;
                    case 'e':
                        var $6836 = _fn$3(_term$2);
                        var $6831 = $6836;
                        break;
                };
                var $6810 = $6831;
                break;
            case 'Kind.Term.let':
                var $6837 = self.name;
                var $6838 = self.expr;
                var $6839 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6841 = self.slice(0, -1);
                        var $6842 = Kind$Term$let$($6837, Kind$Term$patch_at$($6841, $6838, _fn$3), $6839);
                        var $6840 = $6842;
                        break;
                    case 'i':
                        var $6843 = self.slice(0, -1);
                        var $6844 = Kind$Term$let$($6837, $6838, (_x$8 => {
                            var $6845 = Kind$Term$patch_at$($6843, $6839(_x$8), _fn$3);
                            return $6845;
                        }));
                        var $6840 = $6844;
                        break;
                    case 'e':
                        var $6846 = _fn$3(_term$2);
                        var $6840 = $6846;
                        break;
                };
                var $6810 = $6840;
                break;
            case 'Kind.Term.def':
                var $6847 = self.name;
                var $6848 = self.expr;
                var $6849 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6851 = self.slice(0, -1);
                        var $6852 = Kind$Term$def$($6847, Kind$Term$patch_at$($6851, $6848, _fn$3), $6849);
                        var $6850 = $6852;
                        break;
                    case 'i':
                        var $6853 = self.slice(0, -1);
                        var $6854 = Kind$Term$def$($6847, $6848, (_x$8 => {
                            var $6855 = Kind$Term$patch_at$($6853, $6849(_x$8), _fn$3);
                            return $6855;
                        }));
                        var $6850 = $6854;
                        break;
                    case 'e':
                        var $6856 = _fn$3(_term$2);
                        var $6850 = $6856;
                        break;
                };
                var $6810 = $6850;
                break;
            case 'Kind.Term.ann':
                var $6857 = self.done;
                var $6858 = self.term;
                var $6859 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6861 = self.slice(0, -1);
                        var $6862 = Kind$Term$ann$($6857, Kind$Term$patch_at$($6861, $6858, _fn$3), $6859);
                        var $6860 = $6862;
                        break;
                    case 'i':
                        var $6863 = self.slice(0, -1);
                        var $6864 = Kind$Term$ann$($6857, $6858, Kind$Term$patch_at$($6863, $6859, _fn$3));
                        var $6860 = $6864;
                        break;
                    case 'e':
                        var $6865 = _fn$3(_term$2);
                        var $6860 = $6865;
                        break;
                };
                var $6810 = $6860;
                break;
            case 'Kind.Term.ori':
                var $6866 = self.orig;
                var $6867 = self.expr;
                var $6868 = Kind$Term$ori$($6866, Kind$Term$patch_at$(_path$1, $6867, _fn$3));
                var $6810 = $6868;
                break;
            case 'Kind.Term.var':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6870 = _fn$3(_term$2);
                        var $6869 = $6870;
                        break;
                    case 'o':
                    case 'i':
                        var $6871 = _term$2;
                        var $6869 = $6871;
                        break;
                };
                var $6810 = $6869;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6873 = _fn$3(_term$2);
                        var $6872 = $6873;
                        break;
                    case 'o':
                    case 'i':
                        var $6874 = _term$2;
                        var $6872 = $6874;
                        break;
                };
                var $6810 = $6872;
                break;
            case 'Kind.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6876 = _fn$3(_term$2);
                        var $6875 = $6876;
                        break;
                    case 'o':
                    case 'i':
                        var $6877 = _term$2;
                        var $6875 = $6877;
                        break;
                };
                var $6810 = $6875;
                break;
            case 'Kind.Term.gol':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6879 = _fn$3(_term$2);
                        var $6878 = $6879;
                        break;
                    case 'o':
                    case 'i':
                        var $6880 = _term$2;
                        var $6878 = $6880;
                        break;
                };
                var $6810 = $6878;
                break;
            case 'Kind.Term.cse':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6882 = _fn$3(_term$2);
                        var $6881 = $6882;
                        break;
                    case 'o':
                    case 'i':
                        var $6883 = _term$2;
                        var $6881 = $6883;
                        break;
                };
                var $6810 = $6881;
                break;
        };
        return $6810;
    };
    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);

    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.cons':
                var $6885 = self.head;
                var $6886 = self.tail;
                var self = $6885;
                switch (self._) {
                    case 'Kind.Error.waiting':
                        var $6888 = self.name;
                        var $6889 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $6890 = _m$bind$15;
                            return $6890;
                        }))(Kind$Synth$one$($6888, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6892 = self.value;
                                    var $6893 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $6892, $6886, Bool$true);
                                    var $6891 = $6893;
                                    break;
                                case 'Maybe.none':
                                    var $6894 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6886, _fixd$11);
                                    var $6891 = $6894;
                                    break;
                            };
                            return $6891;
                        }));
                        var $6887 = $6889;
                        break;
                    case 'Kind.Error.patch':
                        var $6895 = self.path;
                        var $6896 = self.term;
                        var self = $6895;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $6898 = self.slice(0, -1);
                                var _term$17 = Kind$Term$patch_at$($6898, _term$5, (_x$17 => {
                                    var $6900 = $6896;
                                    return $6900;
                                }));
                                var $6899 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $6886, Bool$true);
                                var $6897 = $6899;
                                break;
                            case 'i':
                                var $6901 = self.slice(0, -1);
                                var _type$17 = Kind$Term$patch_at$($6901, _type$6, (_x$17 => {
                                    var $6903 = $6896;
                                    return $6903;
                                }));
                                var $6902 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $6886, Bool$true);
                                var $6897 = $6902;
                                break;
                            case 'e':
                                var $6904 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $6905 = _m$pure$17;
                                    return $6905;
                                }))(Maybe$none);
                                var $6897 = $6904;
                                break;
                        };
                        var $6887 = $6897;
                        break;
                    case 'Kind.Error.undefined_reference':
                        var $6906 = self.name;
                        var $6907 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $6908 = _m$bind$16;
                            return $6908;
                        }))(Kind$Synth$one$($6906, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6910 = self.value;
                                    var $6911 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $6910, $6886, Bool$true);
                                    var $6909 = $6911;
                                    break;
                                case 'Maybe.none':
                                    var $6912 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6886, _fixd$11);
                                    var $6909 = $6912;
                                    break;
                            };
                            return $6909;
                        }));
                        var $6887 = $6907;
                        break;
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.cant_infer':
                        var $6913 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6886, _fixd$11);
                        var $6887 = $6913;
                        break;
                };
                var $6884 = $6887;
                break;
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {
                        var $6916 = (_x$12 + '1');
                        return $6916;
                    }), _type$6);
                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {
                        var $6917 = (_x$13 + '0');
                        return $6917;
                    }), _term$5);
                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);
                    var $6915 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $6918 = _m$pure$16;
                        return $6918;
                    }))(Maybe$some$(_defs$14));
                    var $6914 = $6915;
                } else {
                    var $6919 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $6920 = _m$pure$13;
                        return $6920;
                    }))(Maybe$none);
                    var $6914 = $6919;
                };
                var $6884 = $6914;
                break;
        };
        return $6884;
    };
    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Kind$Status$fail$(_errors$1) {
        var $6921 = ({
            _: 'Kind.Status.fail',
            'errors': _errors$1
        });
        return $6921;
    };
    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);

    function Kind$Synth$one$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $6923 = self.value;
                var self = $6923;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $6925 = self.file;
                        var $6926 = self.code;
                        var $6927 = self.orig;
                        var $6928 = self.name;
                        var $6929 = self.term;
                        var $6930 = self.type;
                        var $6931 = self.isct;
                        var $6932 = self.arit;
                        var $6933 = self.stat;
                        var _file$13 = $6925;
                        var _code$14 = $6926;
                        var _orig$15 = $6927;
                        var _name$16 = $6928;
                        var _term$17 = $6929;
                        var _type$18 = $6930;
                        var _isct$19 = $6931;
                        var _arit$20 = $6932;
                        var _stat$21 = $6933;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Kind.Status.init':
                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);
                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6936 = self.value;
                                        var $6937 = self.errors;
                                        var self = $6936;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6939 = Kind$Check$result$(Maybe$none, $6937);
                                                var $6938 = $6939;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6941 = self.value;
                                                        var $6942 = self.errors;
                                                        var self = $6941;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $6944 = Kind$Check$result$(Maybe$none, $6942);
                                                                var $6943 = $6944;
                                                                break;
                                                            case 'Maybe.some':
                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Kind.Check.result':
                                                                        var $6946 = self.value;
                                                                        var $6947 = self.errors;
                                                                        var $6948 = Kind$Check$result$($6946, List$concat$($6942, $6947));
                                                                        var $6945 = $6948;
                                                                        break;
                                                                };
                                                                var $6943 = $6945;
                                                                break;
                                                        };
                                                        var self = $6943;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6949 = self.value;
                                                        var $6950 = self.errors;
                                                        var $6951 = Kind$Check$result$($6949, List$concat$($6937, $6950));
                                                        var $6940 = $6951;
                                                        break;
                                                };
                                                var $6938 = $6940;
                                                break;
                                        };
                                        var _checked$23 = $6938;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6952 = self.errors;
                                        var self = List$is_empty$($6952);
                                        if (self) {
                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $6954 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $6955 = _m$pure$28;
                                                return $6955;
                                            }))(Maybe$some$(_defs$26));
                                            var $6953 = $6954;
                                        } else {
                                            var $6956 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $6957 = _m$bind$26;
                                                return $6957;
                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $6952, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6959 = self.value;
                                                        var $6960 = Kind$Synth$one$(_name$16, $6959);
                                                        var $6958 = $6960;
                                                        break;
                                                    case 'Maybe.none':
                                                        var _stat$27 = Kind$Status$fail$($6952);
                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $6961 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $6962 = _m$pure$30;
                                                            return $6962;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $6958 = $6961;
                                                        break;
                                                };
                                                return $6958;
                                            }));
                                            var $6953 = $6956;
                                        };
                                        var $6935 = $6953;
                                        break;
                                };
                                var $6934 = $6935;
                                break;
                            case 'Kind.Status.wait':
                            case 'Kind.Status.done':
                                var $6963 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $6964 = _m$pure$23;
                                    return $6964;
                                }))(Maybe$some$(_defs$2));
                                var $6934 = $6963;
                                break;
                            case 'Kind.Status.fail':
                                var $6965 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $6966 = _m$pure$24;
                                    return $6966;
                                }))(Maybe$some$(_defs$2));
                                var $6934 = $6965;
                                break;
                        };
                        var $6924 = $6934;
                        break;
                };
                var $6922 = $6924;
                break;
            case 'Maybe.none':
                var $6967 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $6968 = _m$bind$3;
                    return $6968;
                }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$3 => {
                    var self = _loaded$3;
                    switch (self._) {
                        case 'Maybe.some':
                            var $6970 = self.value;
                            var $6971 = Kind$Synth$one$(_name$1, $6970);
                            var $6969 = $6971;
                            break;
                        case 'Maybe.none':
                            var $6972 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                                var $6973 = _m$pure$5;
                                return $6973;
                            }))(Maybe$none);
                            var $6969 = $6972;
                            break;
                    };
                    return $6969;
                }));
                var $6922 = $6967;
                break;
        };
        return $6922;
    };
    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);

    function BitsMap$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6975 = self.head;
                var $6976 = self.tail;
                var self = $6975;
                switch (self._) {
                    case 'Pair.new':
                        var $6978 = self.fst;
                        var $6979 = self.snd;
                        var $6980 = BitsMap$set$($6978, $6979, BitsMap$from_list$($6976));
                        var $6977 = $6980;
                        break;
                };
                var $6974 = $6977;
                break;
            case 'List.nil':
                var $6981 = BitsMap$new;
                var $6974 = $6981;
                break;
        };
        return $6974;
    };
    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);
    const Kind$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Kind.Check.pure", List$cons$("Kind.Check.bind", List$cons$("Kind.Check.monad", List$cons$("Kind.Check.value", List$cons$("Kind.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $6983 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);
            return $6983;
        }));
        var $6982 = BitsMap$from_list$(_kvs$2);
        return $6982;
    })();

    function Kind$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $6985 = self.name;
                var _inli$4 = BitsSet$has$((kind_name_to_bits($6985)), Kind$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Kind$Map$get$($6985, _defs$2);
                    switch (self._) {
                        case 'Maybe.some':
                            var $6988 = self.value;
                            var self = $6988;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $6990 = self.term;
                                    var $6991 = Kind$Term$inline$reduce$($6990, _defs$2);
                                    var $6989 = $6991;
                                    break;
                            };
                            var $6987 = $6989;
                            break;
                        case 'Maybe.none':
                            var $6992 = Kind$Term$ref$($6985);
                            var $6987 = $6992;
                            break;
                    };
                    var $6986 = $6987;
                } else {
                    var $6993 = _term$1;
                    var $6986 = $6993;
                };
                var $6984 = $6986;
                break;
            case 'Kind.Term.app':
                var $6994 = self.func;
                var $6995 = self.argm;
                var _func$5 = Kind$Term$inline$reduce$($6994, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $6997 = self.body;
                        var $6998 = Kind$Term$inline$reduce$($6997($6995), _defs$2);
                        var $6996 = $6998;
                        break;
                    case 'Kind.Term.let':
                        var $6999 = self.name;
                        var $7000 = self.expr;
                        var $7001 = self.body;
                        var $7002 = Kind$Term$let$($6999, $7000, (_x$9 => {
                            var $7003 = Kind$Term$inline$reduce$(Kind$Term$app$($7001(_x$9), $6995), _defs$2);
                            return $7003;
                        }));
                        var $6996 = $7002;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7004 = _term$1;
                        var $6996 = $7004;
                        break;
                };
                var $6984 = $6996;
                break;
            case 'Kind.Term.ori':
                var $7005 = self.expr;
                var $7006 = Kind$Term$inline$reduce$($7005, _defs$2);
                var $6984 = $7006;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $7007 = _term$1;
                var $6984 = $7007;
                break;
        };
        return $6984;
    };
    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);

    function Kind$Term$inline$(_term$1, _defs$2) {
        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $7009 = self.name;
                var $7010 = self.indx;
                var $7011 = Kind$Term$var$($7009, $7010);
                var $7008 = $7011;
                break;
            case 'Kind.Term.ref':
                var $7012 = self.name;
                var $7013 = Kind$Term$ref$($7012);
                var $7008 = $7013;
                break;
            case 'Kind.Term.all':
                var $7014 = self.eras;
                var $7015 = self.self;
                var $7016 = self.name;
                var $7017 = self.xtyp;
                var $7018 = self.body;
                var $7019 = Kind$Term$all$($7014, $7015, $7016, Kind$Term$inline$($7017, _defs$2), (_s$8 => _x$9 => {
                    var $7020 = Kind$Term$inline$($7018(_s$8)(_x$9), _defs$2);
                    return $7020;
                }));
                var $7008 = $7019;
                break;
            case 'Kind.Term.lam':
                var $7021 = self.name;
                var $7022 = self.body;
                var $7023 = Kind$Term$lam$($7021, (_x$5 => {
                    var $7024 = Kind$Term$inline$($7022(_x$5), _defs$2);
                    return $7024;
                }));
                var $7008 = $7023;
                break;
            case 'Kind.Term.app':
                var $7025 = self.func;
                var $7026 = self.argm;
                var $7027 = Kind$Term$app$(Kind$Term$inline$($7025, _defs$2), Kind$Term$inline$($7026, _defs$2));
                var $7008 = $7027;
                break;
            case 'Kind.Term.let':
                var $7028 = self.name;
                var $7029 = self.expr;
                var $7030 = self.body;
                var $7031 = Kind$Term$let$($7028, Kind$Term$inline$($7029, _defs$2), (_x$6 => {
                    var $7032 = Kind$Term$inline$($7030(_x$6), _defs$2);
                    return $7032;
                }));
                var $7008 = $7031;
                break;
            case 'Kind.Term.def':
                var $7033 = self.name;
                var $7034 = self.expr;
                var $7035 = self.body;
                var $7036 = Kind$Term$def$($7033, Kind$Term$inline$($7034, _defs$2), (_x$6 => {
                    var $7037 = Kind$Term$inline$($7035(_x$6), _defs$2);
                    return $7037;
                }));
                var $7008 = $7036;
                break;
            case 'Kind.Term.ann':
                var $7038 = self.done;
                var $7039 = self.term;
                var $7040 = self.type;
                var $7041 = Kind$Term$ann$($7038, Kind$Term$inline$($7039, _defs$2), Kind$Term$inline$($7040, _defs$2));
                var $7008 = $7041;
                break;
            case 'Kind.Term.gol':
                var $7042 = self.name;
                var $7043 = self.dref;
                var $7044 = self.verb;
                var $7045 = Kind$Term$gol$($7042, $7043, $7044);
                var $7008 = $7045;
                break;
            case 'Kind.Term.hol':
                var $7046 = self.path;
                var $7047 = Kind$Term$hol$($7046);
                var $7008 = $7047;
                break;
            case 'Kind.Term.nat':
                var $7048 = self.natx;
                var $7049 = Kind$Term$nat$($7048);
                var $7008 = $7049;
                break;
            case 'Kind.Term.chr':
                var $7050 = self.chrx;
                var $7051 = Kind$Term$chr$($7050);
                var $7008 = $7051;
                break;
            case 'Kind.Term.str':
                var $7052 = self.strx;
                var $7053 = Kind$Term$str$($7052);
                var $7008 = $7053;
                break;
            case 'Kind.Term.ori':
                var $7054 = self.expr;
                var $7055 = Kind$Term$inline$($7054, _defs$2);
                var $7008 = $7055;
                break;
            case 'Kind.Term.typ':
                var $7056 = Kind$Term$typ;
                var $7008 = $7056;
                break;
            case 'Kind.Term.cse':
                var $7057 = _term$1;
                var $7008 = $7057;
                break;
        };
        return $7008;
    };
    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);

    function BitsMap$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7059 = self.val;
                var $7060 = self.lft;
                var $7061 = self.rgt;
                var self = $7059;
                switch (self._) {
                    case 'Maybe.some':
                        var $7063 = self.value;
                        var $7064 = List$cons$($7063, _list$3);
                        var _list0$7 = $7064;
                        break;
                    case 'Maybe.none':
                        var $7065 = _list$3;
                        var _list0$7 = $7065;
                        break;
                };
                var _list1$8 = BitsMap$values$go$($7060, _list0$7);
                var _list2$9 = BitsMap$values$go$($7061, _list1$8);
                var $7062 = _list2$9;
                var $7058 = $7062;
                break;
            case 'BitsMap.new':
                var $7066 = _list$3;
                var $7058 = $7066;
                break;
        };
        return $7058;
    };
    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);

    function BitsMap$values$(_xs$2) {
        var $7067 = BitsMap$values$go$(_xs$2, List$nil);
        return $7067;
    };
    const BitsMap$values = x0 => BitsMap$values$(x0);

    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $7069 = _name$2;
                        var $7068 = $7069;
                    } else {
                        var $7070 = (self - 1n);
                        var $7071 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $7068 = $7071;
                    };
                    return $7068;
                } else {
                    var $7072 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.cons':
                            var $7074 = self.head;
                            var $7075 = self.tail;
                            var self = (_name$2 === $7074);
                            if (self) {
                                var $7077 = Nat$succ$(_brui$3);
                                var _brui$8 = $7077;
                            } else {
                                var $7078 = _brui$3;
                                var _brui$8 = $7078;
                            };
                            var $7076 = Kind$Core$var_name$($7072, _name$2, _brui$8, $7075);
                            var $7073 = $7076;
                            break;
                        case 'List.nil':
                            var $7079 = "unbound";
                            var $7073 = $7079;
                            break;
                    };
                    return $7073;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);

    function Kind$Name$show$(_name$1) {
        var $7080 = _name$1;
        return $7080;
    };
    const Kind$Name$show = x0 => Kind$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $7082 = self.slice(0, -1);
                var $7083 = (2n * Bits$to_nat$($7082));
                var $7081 = $7083;
                break;
            case 'i':
                var $7084 = self.slice(0, -1);
                var $7085 = Nat$succ$((2n * Bits$to_nat$($7084)));
                var $7081 = $7085;
                break;
            case 'e':
                var $7086 = 0n;
                var $7081 = $7086;
                break;
        };
        return $7081;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $7088 = u16_to_word(self);
                var $7089 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($7088)));
                var $7087 = $7089;
                break;
        };
        return $7087;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Kind$Code$escape$char$(_chr$1) {
        var self = (_chr$1 === Kind$Code$backslash);
        if (self) {
            var $7091 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
            var $7090 = $7091;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $7093 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                var $7092 = $7093;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $7095 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                    var $7094 = $7095;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $7097 = String$cons$(_chr$1, String$nil);
                        var $7096 = $7097;
                    } else {
                        var $7098 = (String$cons$(Kind$Code$backslash, String$nil) + ("u{" + (U16$show_hex$(_chr$1) + "}")));
                        var $7096 = $7098;
                    };
                    var $7094 = $7096;
                };
                var $7092 = $7094;
            };
            var $7090 = $7092;
        };
        return $7090;
    };
    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);

    function Kind$Code$escape$go$(_str$1, _result$2) {
        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({
            ctr: 'TCO',
            arg: [_str$1, _result$2]
        });
        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);
        var arg = [_str$1, _result$2];
        while (true) {
            let [_str$1, _result$2] = arg;
            var R = (() => {
                var self = _str$1;
                if (self.length === 0) {
                    var $7099 = String$reverse$(_result$2);
                    return $7099;
                } else {
                    var $7100 = self.charCodeAt(0);
                    var $7101 = self.slice(1);
                    var $7102 = Kind$Code$escape$go$($7101, (String$reverse$(Kind$Code$escape$char$($7100)) + _result$2));
                    return $7102;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);

    function Kind$Code$escape$(_str$1) {
        var $7103 = Kind$Code$escape$go$(_str$1, "");
        return $7103;
    };
    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);

    function Kind$Core$show$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7105 = self.name;
                var $7106 = self.indx;
                var $7107 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $7106 <= 0n ? 0n : _indx$2 - $7106)), $7105, 0n, _vars$3);
                var $7104 = $7107;
                break;
            case 'Kind.Term.ref':
                var $7108 = self.name;
                var $7109 = Kind$Name$show$($7108);
                var $7104 = $7109;
                break;
            case 'Kind.Term.all':
                var $7110 = self.eras;
                var $7111 = self.self;
                var $7112 = self.name;
                var $7113 = self.xtyp;
                var $7114 = self.body;
                var _eras$9 = $7110;
                var self = _eras$9;
                if (self) {
                    var $7116 = "%";
                    var _init$10 = $7116;
                } else {
                    var $7117 = "@";
                    var _init$10 = $7117;
                };
                var _self$11 = Kind$Name$show$($7111);
                var _name$12 = Kind$Name$show$($7112);
                var _xtyp$13 = Kind$Core$show$($7113, _indx$2, _vars$3);
                var _body$14 = Kind$Core$show$($7114(Kind$Term$var$($7111, _indx$2))(Kind$Term$var$($7112, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($7112, List$cons$($7111, _vars$3)));
                var $7115 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $7104 = $7115;
                break;
            case 'Kind.Term.lam':
                var $7118 = self.name;
                var $7119 = self.body;
                var _name$6 = Kind$Name$show$($7118);
                var _body$7 = Kind$Core$show$($7119(Kind$Term$var$($7118, _indx$2)), Nat$succ$(_indx$2), List$cons$($7118, _vars$3));
                var $7120 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $7104 = $7120;
                break;
            case 'Kind.Term.app':
                var $7121 = self.func;
                var $7122 = self.argm;
                var _func$6 = Kind$Core$show$($7121, _indx$2, _vars$3);
                var _argm$7 = Kind$Core$show$($7122, _indx$2, _vars$3);
                var $7123 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $7104 = $7123;
                break;
            case 'Kind.Term.let':
                var $7124 = self.name;
                var $7125 = self.expr;
                var $7126 = self.body;
                var _name$7 = Kind$Name$show$($7124);
                var _expr$8 = Kind$Core$show$($7125, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$($7126(Kind$Term$var$($7124, _indx$2)), Nat$succ$(_indx$2), List$cons$($7124, _vars$3));
                var $7127 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7104 = $7127;
                break;
            case 'Kind.Term.def':
                var $7128 = self.name;
                var $7129 = self.expr;
                var $7130 = self.body;
                var _name$7 = Kind$Name$show$($7128);
                var _expr$8 = Kind$Core$show$($7129, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$($7130(Kind$Term$var$($7128, _indx$2)), Nat$succ$(_indx$2), List$cons$($7128, _vars$3));
                var $7131 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7104 = $7131;
                break;
            case 'Kind.Term.ann':
                var $7132 = self.term;
                var $7133 = self.type;
                var _term$7 = Kind$Core$show$($7132, _indx$2, _vars$3);
                var _type$8 = Kind$Core$show$($7133, _indx$2, _vars$3);
                var $7134 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $7104 = $7134;
                break;
            case 'Kind.Term.nat':
                var $7135 = self.natx;
                var $7136 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($7135), List$nil)));
                var $7104 = $7136;
                break;
            case 'Kind.Term.chr':
                var $7137 = self.chrx;
                var $7138 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7137), List$cons$("\'", List$nil))));
                var $7104 = $7138;
                break;
            case 'Kind.Term.str':
                var $7139 = self.strx;
                var $7140 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7139), List$cons$("\"", List$nil))));
                var $7104 = $7140;
                break;
            case 'Kind.Term.ori':
                var $7141 = self.expr;
                var $7142 = Kind$Core$show$($7141, _indx$2, _vars$3);
                var $7104 = $7142;
                break;
            case 'Kind.Term.typ':
                var $7143 = "*";
                var $7104 = $7143;
                break;
            case 'Kind.Term.gol':
                var $7144 = "<GOL>";
                var $7104 = $7144;
                break;
            case 'Kind.Term.hol':
                var $7145 = "<HOL>";
                var $7104 = $7145;
                break;
            case 'Kind.Term.cse':
                var $7146 = "<CSE>";
                var $7104 = $7146;
                break;
        };
        return $7104;
    };
    const Kind$Core$show = x0 => x1 => x2 => Kind$Core$show$(x0, x1, x2);

    function Kind$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $7149 = _result$2;
            var $7150 = BitsMap$values$(_defs$1);
            let _result$4 = $7149;
            let _defn$3;
            while ($7150._ === 'List.cons') {
                _defn$3 = $7150.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7151 = self.name;
                        var $7152 = self.term;
                        var $7153 = self.type;
                        var $7154 = self.stat;
                        var self = $7154;
                        switch (self._) {
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $7156 = _result$4;
                                var $7155 = $7156;
                                break;
                            case 'Kind.Status.done':
                                var _name$14 = $7151;
                                var _term$15 = Kind$Core$show$($7152, 0n, List$nil);
                                var _type$16 = Kind$Core$show$($7153, 0n, List$nil);
                                var $7157 = String$flatten$(List$cons$(_result$4, List$cons$(_name$14, List$cons$(" : ", List$cons$(_type$16, List$cons$(" = ", List$cons$(_term$15, List$cons$(";\u{a}", List$nil))))))));
                                var $7155 = $7157;
                                break;
                        };
                        var $7149 = $7155;
                        break;
                };
                _result$4 = $7149;
                $7150 = $7150.tail;
            }
            return _result$4;
        })();
        var $7147 = _result$3;
        return $7147;
    };
    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);

    function Kind$api$io$term_to_core$(_name$1) {
        var $7158 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7159 = _m$bind$2;
            return $7159;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7161 = self.value;
                    var $7162 = $7161;
                    var _defs$3 = $7162;
                    break;
                case 'Maybe.none':
                    var $7163 = Kind$Map$new;
                    var _defs$3 = $7163;
                    break;
            };
            var _defs$4 = BitsMap$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7165 = self.file;
                        var $7166 = self.code;
                        var $7167 = self.orig;
                        var $7168 = self.name;
                        var $7169 = self.term;
                        var $7170 = self.type;
                        var $7171 = self.isct;
                        var $7172 = self.arit;
                        var $7173 = self.stat;
                        var _term$14 = Kind$Term$inline$($7169, _defs$3);
                        var _type$15 = Kind$Term$inline$($7170, _defs$3);
                        var $7174 = Kind$Def$new$($7165, $7166, $7167, $7168, _term$14, _type$15, $7171, $7172, $7173);
                        var $7164 = $7174;
                        break;
                };
                return $7164;
            }), _defs$3);
            var $7160 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $7175 = _m$pure$6;
                return $7175;
            }))(Kind$Defs$core$(_defs$4));
            return $7160;
        }));
        return $7158;
    };
    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);

    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7177 = self.val;
                var $7178 = self.lft;
                var $7179 = self.rgt;
                var self = $7177;
                switch (self._) {
                    case 'Maybe.none':
                        var $7181 = _list$4;
                        var _list0$8 = $7181;
                        break;
                    case 'Maybe.some':
                        var $7182 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $7182;
                        break;
                };
                var _list1$9 = BitsMap$keys$go$($7178, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$keys$go$($7179, (_key$3 + '1'), _list1$9);
                var $7180 = _list2$10;
                var $7176 = $7180;
                break;
            case 'BitsMap.new':
                var $7183 = _list$4;
                var $7176 = $7183;
                break;
        };
        return $7176;
    };
    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);

    function BitsMap$keys$(_xs$2) {
        var $7184 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));
        return $7184;
    };
    const BitsMap$keys = x0 => BitsMap$keys$(x0);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $7186 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $7188 = List$cons$(_head$6, _tail$7);
                    var $7187 = $7188;
                } else {
                    var $7189 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $7190 = Bits$chunks_of$go$(_len$1, $7186, $7189, _chunk$7);
                    var $7187 = $7190;
                };
                var $7185 = $7187;
                break;
            case 'i':
                var $7191 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $7193 = List$cons$(_head$6, _tail$7);
                    var $7192 = $7193;
                } else {
                    var $7194 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $7195 = Bits$chunks_of$go$(_len$1, $7191, $7194, _chunk$7);
                    var $7192 = $7195;
                };
                var $7185 = $7192;
                break;
            case 'e':
                var $7196 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $7185 = $7196;
                break;
        };
        return $7185;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $7197 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $7197;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $7199 = Word$e;
            var $7198 = $7199;
        } else {
            var $7200 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $7202 = self.slice(0, -1);
                    var $7203 = Word$o$(Word$from_bits$($7200, $7202));
                    var $7201 = $7203;
                    break;
                case 'i':
                    var $7204 = self.slice(0, -1);
                    var $7205 = Word$i$(Word$from_bits$($7200, $7204));
                    var $7201 = $7205;
                    break;
                case 'e':
                    var $7206 = Word$o$(Word$from_bits$($7200, Bits$e));
                    var $7201 = $7206;
                    break;
            };
            var $7198 = $7201;
        };
        return $7198;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Kind$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $7209 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $7209;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $7211 = ((_u16$5 + 71) & 0xFFFF);
                    var $7210 = $7211;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $7213 = ((_u16$5 - 4) & 0xFFFF);
                        var $7212 = $7213;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $7215 = 46;
                            var $7214 = $7215;
                        } else {
                            var $7216 = 95;
                            var $7214 = $7216;
                        };
                        var $7212 = $7214;
                    };
                    var $7210 = $7212;
                };
                var _chr$6 = $7210;
            };
            var $7208 = String$cons$(_chr$6, _name$4);
            return $7208;
        }));
        var $7207 = _name$3;
        return $7207;
    };
    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);

    function Kind$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $7218 = self.head;
                var $7219 = self.tail;
                var $7220 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7221 = _m$bind$5;
                    return $7221;
                }))(Kind$Synth$one$($7218, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.some':
                            var $7223 = self.value;
                            var $7224 = Kind$Synth$many$($7219, $7223);
                            var $7222 = $7224;
                            break;
                        case 'Maybe.none':
                            var $7225 = Kind$Synth$many$($7219, _defs$2);
                            var $7222 = $7225;
                            break;
                    };
                    return $7222;
                }));
                var $7217 = $7220;
                break;
            case 'List.nil':
                var $7226 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7227 = _m$pure$4;
                    return $7227;
                }))(_defs$2);
                var $7217 = $7226;
                break;
        };
        return $7217;
    };
    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);

    function Kind$Synth$file$(_file$1, _defs$2) {
        var $7228 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7229 = _m$bind$3;
            return $7229;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $7231 = self.value;
                    var $7232 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $7233 = _m$pure$7;
                        return $7233;
                    }))(Either$left$($7231));
                    var $7230 = $7232;
                    break;
                case 'Either.right':
                    var $7234 = self.value;
                    var _file_defs$6 = $7234;
                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);
                    var $7235 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $7236 = _m$bind$9;
                        return $7236;
                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $7237 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $7238 = _m$pure$11;
                            return $7238;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $7237;
                    }));
                    var $7230 = $7235;
                    break;
            };
            return $7230;
        }));
        return $7228;
    };
    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);

    function IO$put_string$(_text$1) {
        var $7239 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $7240 = IO$end$(Unit$new);
            return $7240;
        }));
        return $7239;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $7241 = IO$put_string$((_text$1 + "\u{a}"));
        return $7241;
    };
    const IO$print = x0 => IO$print$(x0);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.some':
                var $7243 = self.value;
                var $7244 = _f$4($7243);
                var $7242 = $7244;
                break;
            case 'Maybe.none':
                var $7245 = Maybe$none;
                var $7242 = $7245;
                break;
        };
        return $7242;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $7246 = _new$2(Maybe$bind)(Maybe$some);
        return $7246;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Kind$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7248 = self.name;
                var self = ($7248 === "Nat.zero");
                if (self) {
                    var $7250 = Maybe$some$(0n);
                    var $7249 = $7250;
                } else {
                    var $7251 = Maybe$none;
                    var $7249 = $7251;
                };
                var $7247 = $7249;
                break;
            case 'Kind.Term.app':
                var $7252 = self.func;
                var $7253 = self.argm;
                var self = $7252;
                switch (self._) {
                    case 'Kind.Term.ref':
                        var $7255 = self.name;
                        var self = ($7255 === "Nat.succ");
                        if (self) {
                            var $7257 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $7258 = _m$bind$5;
                                return $7258;
                            }))(Kind$Term$show$as_nat$go$($7253))((_pred$5 => {
                                var $7259 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7260 = _m$pure$7;
                                    return $7260;
                                }))(Nat$succ$(_pred$5));
                                return $7259;
                            }));
                            var $7256 = $7257;
                        } else {
                            var $7261 = Maybe$none;
                            var $7256 = $7261;
                        };
                        var $7254 = $7256;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7262 = Maybe$none;
                        var $7254 = $7262;
                        break;
                };
                var $7247 = $7254;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7263 = Maybe$none;
                var $7247 = $7263;
                break;
        };
        return $7247;
    };
    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);

    function Kind$Term$show$as_nat$(_term$1) {
        var $7264 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);
        return $7264;
    };
    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);

    function Kind$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7266 = self.name;
                var $7267 = (_name$2 === $7266);
                var $7265 = $7267;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7268 = Bool$false;
                var $7265 = $7268;
                break;
        };
        return $7265;
    };
    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);

    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Kind$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), "?");
            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), "?");
            var $7270 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $7269 = $7270;
        } else {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $7272 = Bool$false;
                var _wrap$6 = $7272;
            } else {
                var $7273 = self.charCodeAt(0);
                var $7274 = self.slice(1);
                var $7275 = ($7273 === 40);
                var _wrap$6 = $7275;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $7276 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $7276;
            } else {
                var $7277 = _func$5;
                var _func$8 = $7277;
            };
            var $7271 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $7269 = $7271;
        };
        return $7269;
    };
    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);

    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {
        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $7278 = self.func;
                        var $7279 = self.argm;
                        var $7280 = Kind$Term$show$app$($7278, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($7279, Kind$MPath$i$(_path$2)), _args$3));
                        return $7280;
                    case 'Kind.Term.ori':
                        var $7281 = self.expr;
                        var $7282 = Kind$Term$show$app$($7281, _path$2, _args$3);
                        return $7282;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7283 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $7283;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);

    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7285 = self.val;
                var $7286 = self.lft;
                var $7287 = self.rgt;
                var self = $7285;
                switch (self._) {
                    case 'Maybe.some':
                        var $7289 = self.value;
                        var $7290 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $7289), _list$4);
                        var _list0$8 = $7290;
                        break;
                    case 'Maybe.none':
                        var $7291 = _list$4;
                        var _list0$8 = $7291;
                        break;
                };
                var _list1$9 = BitsMap$to_list$go$($7286, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$to_list$go$($7287, (_key$3 + '1'), _list1$9);
                var $7288 = _list2$10;
                var $7284 = $7288;
                break;
            case 'BitsMap.new':
                var $7292 = _list$4;
                var $7284 = $7292;
                break;
        };
        return $7284;
    };
    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);

    function BitsMap$to_list$(_xs$2) {
        var $7293 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        return $7293;
    };
    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);

    function Kind$Term$show$go$(_term$1, _path$2) {
        var self = Kind$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.some':
                var $7295 = self.value;
                var $7296 = $7295;
                var $7294 = $7296;
                break;
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $7298 = self.name;
                        var $7299 = Kind$Name$show$($7298);
                        var $7297 = $7299;
                        break;
                    case 'Kind.Term.ref':
                        var $7300 = self.name;
                        var _name$4 = Kind$Name$show$($7300);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7302 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($7302));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $7303 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $7301 = $7303;
                                break;
                            case 'Maybe.none':
                                var $7304 = _name$4;
                                var $7301 = $7304;
                                break;
                        };
                        var $7297 = $7301;
                        break;
                    case 'Kind.Term.all':
                        var $7305 = self.eras;
                        var $7306 = self.self;
                        var $7307 = self.name;
                        var $7308 = self.xtyp;
                        var $7309 = self.body;
                        var _eras$8 = $7305;
                        var _self$9 = Kind$Name$show$($7306);
                        var _name$10 = Kind$Name$show$($7307);
                        var _type$11 = Kind$Term$show$go$($7308, Kind$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $7311 = "<";
                            var _open$12 = $7311;
                        } else {
                            var $7312 = "(";
                            var _open$12 = $7312;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $7313 = ">";
                            var _clos$13 = $7313;
                        } else {
                            var $7314 = ")";
                            var _clos$13 = $7314;
                        };
                        var _body$14 = Kind$Term$show$go$($7309(Kind$Term$var$($7306, 0n))(Kind$Term$var$($7307, 0n)), Kind$MPath$i$(_path$2));
                        var $7310 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $7297 = $7310;
                        break;
                    case 'Kind.Term.lam':
                        var $7315 = self.name;
                        var $7316 = self.body;
                        var _name$5 = Kind$Name$show$($7315);
                        var _body$6 = Kind$Term$show$go$($7316(Kind$Term$var$($7315, 0n)), Kind$MPath$o$(_path$2));
                        var $7317 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $7297 = $7317;
                        break;
                    case 'Kind.Term.let':
                        var $7318 = self.name;
                        var $7319 = self.expr;
                        var $7320 = self.body;
                        var _name$6 = Kind$Name$show$($7318);
                        var _expr$7 = Kind$Term$show$go$($7319, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7320(Kind$Term$var$($7318, 0n)), Kind$MPath$i$(_path$2));
                        var $7321 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7297 = $7321;
                        break;
                    case 'Kind.Term.def':
                        var $7322 = self.name;
                        var $7323 = self.expr;
                        var $7324 = self.body;
                        var _name$6 = Kind$Name$show$($7322);
                        var _expr$7 = Kind$Term$show$go$($7323, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7324(Kind$Term$var$($7322, 0n)), Kind$MPath$i$(_path$2));
                        var $7325 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7297 = $7325;
                        break;
                    case 'Kind.Term.ann':
                        var $7326 = self.term;
                        var $7327 = self.type;
                        var _term$6 = Kind$Term$show$go$($7326, Kind$MPath$o$(_path$2));
                        var _type$7 = Kind$Term$show$go$($7327, Kind$MPath$i$(_path$2));
                        var $7328 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $7297 = $7328;
                        break;
                    case 'Kind.Term.gol':
                        var $7329 = self.name;
                        var _name$6 = Kind$Name$show$($7329);
                        var $7330 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $7297 = $7330;
                        break;
                    case 'Kind.Term.nat':
                        var $7331 = self.natx;
                        var $7332 = String$flatten$(List$cons$(Nat$show$($7331), List$nil));
                        var $7297 = $7332;
                        break;
                    case 'Kind.Term.chr':
                        var $7333 = self.chrx;
                        var $7334 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7333), List$cons$("\'", List$nil))));
                        var $7297 = $7334;
                        break;
                    case 'Kind.Term.str':
                        var $7335 = self.strx;
                        var $7336 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7335), List$cons$("\"", List$nil))));
                        var $7297 = $7336;
                        break;
                    case 'Kind.Term.cse':
                        var $7337 = self.expr;
                        var $7338 = self.name;
                        var $7339 = self.with;
                        var $7340 = self.cses;
                        var $7341 = self.moti;
                        var _expr$9 = Kind$Term$show$go$($7337, Kind$MPath$o$(_path$2));
                        var _name$10 = Kind$Name$show$($7338);
                        var _wyth$11 = String$join$("; ", List$mapped$($7339, (_with_var$11 => {
                            var self = _with_var$11;
                            switch (self._) {
                                case 'Kind.Ann.new':
                                    var $7344 = self.name;
                                    var $7345 = self.type;
                                    var self = $7345;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $7347 = self.value;
                                            var $7348 = ($7344 + (": " + Kind$Term$show$go$($7347, Maybe$none)));
                                            var $7346 = $7348;
                                            break;
                                        case 'Maybe.none':
                                            var $7349 = $7344;
                                            var $7346 = $7349;
                                            break;
                                    };
                                    var $7343 = $7346;
                                    break;
                            };
                            return $7343;
                        })));
                        var _cses$12 = BitsMap$to_list$($7340);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $7350 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $7350;
                        })));
                        var self = $7341;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7351 = self.value;
                                var $7352 = String$flatten$(List$cons$(": ", List$cons$(Kind$Term$show$go$($7351, Maybe$none), List$nil)));
                                var _moti$14 = $7352;
                                break;
                            case 'Maybe.none':
                                var $7353 = "";
                                var _moti$14 = $7353;
                                break;
                        };
                        var $7342 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $7297 = $7342;
                        break;
                    case 'Kind.Term.ori':
                        var $7354 = self.expr;
                        var $7355 = Kind$Term$show$go$($7354, _path$2);
                        var $7297 = $7355;
                        break;
                    case 'Kind.Term.typ':
                        var $7356 = "Type";
                        var $7297 = $7356;
                        break;
                    case 'Kind.Term.app':
                        var $7357 = Kind$Term$show$app$(_term$1, _path$2, List$nil);
                        var $7297 = $7357;
                        break;
                    case 'Kind.Term.hol':
                        var $7358 = "_";
                        var $7297 = $7358;
                        break;
                };
                var $7294 = $7297;
                break;
        };
        return $7294;
    };
    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);

    function Kind$Term$show$(_term$1) {
        var $7359 = Kind$Term$show$go$(_term$1, Maybe$none);
        return $7359;
    };
    const Kind$Term$show = x0 => Kind$Term$show$(x0);

    function Kind$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $7362 = _types$3;
            var $7363 = _names$2;
            let _types$5 = $7362;
            let _name$4;
            while ($7363._ === 'List.cons') {
                _name$4 = $7363.head;
                var self = Kind$Map$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $7364 = self.value;
                        var self = $7364;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7366 = self.type;
                                var $7367 = (_types$5 + (_name$4 + (": " + (Kind$Term$show$($7366) + "\u{a}"))));
                                var $7365 = $7367;
                                break;
                        };
                        var $7362 = $7365;
                        break;
                    case 'Maybe.none':
                        var $7368 = _types$5;
                        var $7362 = $7368;
                        break;
                };
                _types$5 = $7362;
                $7363 = $7363.tail;
            }
            return _types$5;
        })();
        var $7360 = _types$4;
        return $7360;
    };
    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);

    function List$filter$(_f$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $7370 = self.head;
                var $7371 = self.tail;
                var self = _f$2($7370);
                if (self) {
                    var $7373 = List$cons$($7370, List$filter$(_f$2, $7371));
                    var $7372 = $7373;
                } else {
                    var $7374 = List$filter$(_f$2, $7371);
                    var $7372 = $7374;
                };
                var $7369 = $7372;
                break;
            case 'List.nil':
                var $7375 = List$nil;
                var $7369 = $7375;
                break;
        };
        return $7369;
    };
    const List$filter = x0 => x1 => List$filter$(x0, x1);

    function Kind$Error$is_undef$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.cant_infer':
                var $7377 = Bool$false;
                var $7376 = $7377;
                break;
            case 'Kind.Error.undefined_reference':
                var $7378 = Bool$true;
                var $7376 = $7378;
                break;
        };
        return $7376;
    };
    const Kind$Error$is_undef = x0 => Kind$Error$is_undef$(x0);

    function Kind$Error$is_mistake$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.cant_infer':
                var $7380 = Bool$true;
                var $7379 = $7380;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
                var $7381 = Bool$false;
                var $7379 = $7381;
                break;
        };
        return $7379;
    };
    const Kind$Error$is_mistake = x0 => Kind$Error$is_mistake$(x0);

    function Kind$Error$is_goal$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
            case 'Kind.Error.cant_infer':
                var $7383 = Bool$false;
                var $7382 = $7383;
                break;
            case 'Kind.Error.show_goal':
                var $7384 = Bool$true;
                var $7382 = $7384;
                break;
        };
        return $7382;
    };
    const Kind$Error$is_goal = x0 => Kind$Error$is_goal$(x0);

    function Kind$Error$relevant$(_errors$1) {
        var _undefs$2 = List$filter$(Kind$Error$is_undef, _errors$1);
        var _mistakes$3 = List$filter$(Kind$Error$is_mistake, _errors$1);
        var _goals$4 = List$filter$(Kind$Error$is_goal, _errors$1);
        var self = _undefs$2;
        switch (self._) {
            case 'List.nil':
                var self = _mistakes$3;
                switch (self._) {
                    case 'List.cons':
                        var $7387 = self.head;
                        var $7388 = List$concat$(List$cons$($7387, List$nil), _goals$4);
                        var $7386 = $7388;
                        break;
                    case 'List.nil':
                        var $7389 = _goals$4;
                        var $7386 = $7389;
                        break;
                };
                var $7385 = $7386;
                break;
            case 'List.cons':
                var $7390 = List$concat$(_undefs$2, _goals$4);
                var $7385 = $7390;
                break;
        };
        return $7385;
    };
    const Kind$Error$relevant = x0 => Kind$Error$relevant$(x0);

    function Map$(_V$1) {
        var $7391 = null;
        return $7391;
    };
    const Map = x0 => Map$(x0);

    function String$to_bits$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $7393 = Bits$e;
            var $7392 = $7393;
        } else {
            var $7394 = self.charCodeAt(0);
            var $7395 = self.slice(1);
            var $7396 = (String$to_bits$($7395) + (u16_to_bits($7394)));
            var $7392 = $7396;
        };
        return $7392;
    };
    const String$to_bits = x0 => String$to_bits$(x0);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7398 = self.head;
                var $7399 = self.tail;
                var self = $7398;
                switch (self._) {
                    case 'Pair.new':
                        var $7401 = self.fst;
                        var $7402 = self.snd;
                        var $7403 = BitsMap$set$(String$to_bits$($7401), $7402, Map$from_list$($7399));
                        var $7400 = $7403;
                        break;
                };
                var $7397 = $7400;
                break;
            case 'List.nil':
                var $7404 = BitsMap$new;
                var $7397 = $7404;
                break;
        };
        return $7397;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Kind$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.cons':
                var $7406 = self.head;
                var $7407 = self.tail;
                var self = $7406;
                switch (self._) {
                    case 'Pair.new':
                        var $7409 = self.fst;
                        var $7410 = self.snd;
                        var _name$6 = Kind$Name$show$($7409);
                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($7410, Kind$Map$new));
                        var _rest$8 = Kind$Context$show$($7407);
                        var $7411 = (_rest$8 + ("- " + (_name$6 + (": " + (_type$7 + "\u{a}")))));
                        var $7408 = $7411;
                        break;
                };
                var $7405 = $7408;
                break;
            case 'List.nil':
                var $7412 = "";
                var $7405 = $7412;
                break;
        };
        return $7405;
    };
    const Kind$Context$show = x0 => Kind$Context$show$(x0);

    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $7413 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Kind.Term.ref':
                    var $7415 = self.name;
                    var self = Kind$Map$get$($7415, _defs$3);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7417 = self.value;
                            var self = $7417;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7419 = self.term;
                                    var $7420 = $7419;
                                    var $7418 = $7420;
                                    break;
                            };
                            var $7416 = $7418;
                            break;
                        case 'Maybe.none':
                            var $7421 = Kind$Term$ref$($7415);
                            var $7416 = $7421;
                            break;
                    };
                    var $7414 = $7416;
                    break;
                case 'Kind.Term.var':
                case 'Kind.Term.typ':
                case 'Kind.Term.all':
                case 'Kind.Term.lam':
                case 'Kind.Term.app':
                case 'Kind.Term.let':
                case 'Kind.Term.def':
                case 'Kind.Term.ann':
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                case 'Kind.Term.ori':
                    var $7422 = _term$4;
                    var $7414 = $7422;
                    break;
            };
            return $7414;
        }));
        return $7413;
    };
    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);

    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7424 = self.name;
                var $7425 = self.indx;
                var $7426 = Kind$Term$var$($7424, $7425);
                var $7423 = $7426;
                break;
            case 'Kind.Term.ref':
                var $7427 = self.name;
                var self = Kind$Map$get$($7427, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $7429 = self.value;
                        var self = $7429;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7431 = self.term;
                                var $7432 = self.isct;
                                var $7433 = self.arit;
                                var self = ($7432 && (_arity$3 > $7433));
                                if (self) {
                                    var $7435 = $7431;
                                    var $7434 = $7435;
                                } else {
                                    var $7436 = Kind$Term$ref$($7427);
                                    var $7434 = $7436;
                                };
                                var $7430 = $7434;
                                break;
                        };
                        var $7428 = $7430;
                        break;
                    case 'Maybe.none':
                        var $7437 = Kind$Term$ref$($7427);
                        var $7428 = $7437;
                        break;
                };
                var $7423 = $7428;
                break;
            case 'Kind.Term.all':
                var $7438 = self.eras;
                var $7439 = self.self;
                var $7440 = self.name;
                var $7441 = self.xtyp;
                var $7442 = self.body;
                var $7443 = Kind$Term$all$($7438, $7439, $7440, Kind$Term$expand_ct$($7441, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $7444 = Kind$Term$expand_ct$($7442(_s$9)(_x$10), _defs$2, 0n);
                    return $7444;
                }));
                var $7423 = $7443;
                break;
            case 'Kind.Term.lam':
                var $7445 = self.name;
                var $7446 = self.body;
                var $7447 = Kind$Term$lam$($7445, (_x$6 => {
                    var $7448 = Kind$Term$expand_ct$($7446(_x$6), _defs$2, 0n);
                    return $7448;
                }));
                var $7423 = $7447;
                break;
            case 'Kind.Term.app':
                var $7449 = self.func;
                var $7450 = self.argm;
                var $7451 = Kind$Term$app$(Kind$Term$expand_ct$($7449, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($7450, _defs$2, 0n));
                var $7423 = $7451;
                break;
            case 'Kind.Term.let':
                var $7452 = self.name;
                var $7453 = self.expr;
                var $7454 = self.body;
                var $7455 = Kind$Term$let$($7452, Kind$Term$expand_ct$($7453, _defs$2, 0n), (_x$7 => {
                    var $7456 = Kind$Term$expand_ct$($7454(_x$7), _defs$2, 0n);
                    return $7456;
                }));
                var $7423 = $7455;
                break;
            case 'Kind.Term.def':
                var $7457 = self.name;
                var $7458 = self.expr;
                var $7459 = self.body;
                var $7460 = Kind$Term$def$($7457, Kind$Term$expand_ct$($7458, _defs$2, 0n), (_x$7 => {
                    var $7461 = Kind$Term$expand_ct$($7459(_x$7), _defs$2, 0n);
                    return $7461;
                }));
                var $7423 = $7460;
                break;
            case 'Kind.Term.ann':
                var $7462 = self.done;
                var $7463 = self.term;
                var $7464 = self.type;
                var $7465 = Kind$Term$ann$($7462, Kind$Term$expand_ct$($7463, _defs$2, 0n), Kind$Term$expand_ct$($7464, _defs$2, 0n));
                var $7423 = $7465;
                break;
            case 'Kind.Term.gol':
                var $7466 = self.name;
                var $7467 = self.dref;
                var $7468 = self.verb;
                var $7469 = Kind$Term$gol$($7466, $7467, $7468);
                var $7423 = $7469;
                break;
            case 'Kind.Term.hol':
                var $7470 = self.path;
                var $7471 = Kind$Term$hol$($7470);
                var $7423 = $7471;
                break;
            case 'Kind.Term.nat':
                var $7472 = self.natx;
                var $7473 = Kind$Term$nat$($7472);
                var $7423 = $7473;
                break;
            case 'Kind.Term.chr':
                var $7474 = self.chrx;
                var $7475 = Kind$Term$chr$($7474);
                var $7423 = $7475;
                break;
            case 'Kind.Term.str':
                var $7476 = self.strx;
                var $7477 = Kind$Term$str$($7476);
                var $7423 = $7477;
                break;
            case 'Kind.Term.ori':
                var $7478 = self.orig;
                var $7479 = self.expr;
                var $7480 = Kind$Term$ori$($7478, $7479);
                var $7423 = $7480;
                break;
            case 'Kind.Term.typ':
                var $7481 = Kind$Term$typ;
                var $7423 = $7481;
                break;
            case 'Kind.Term.cse':
                var $7482 = _term$1;
                var $7423 = $7482;
                break;
        };
        return $7423;
    };
    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);

    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);
        var _term$5 = (() => {
            var $7485 = _term$4;
            var $7486 = _dref$1;
            let _term$6 = $7485;
            let _path$5;
            while ($7486._ === 'List.cons') {
                _path$5 = $7486.head;
                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);
                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);
                var $7485 = _term$10;
                _term$6 = $7485;
                $7486 = $7486.tail;
            }
            return _term$6;
        })();
        var $7483 = _term$5;
        return $7483;
    };
    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);

    function Kind$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7488 = self.expected;
                var $7489 = self.detected;
                var $7490 = self.context;
                var self = $7488;
                switch (self._) {
                    case 'Either.left':
                        var $7492 = self.value;
                        var $7493 = $7492;
                        var _expected$7 = $7493;
                        break;
                    case 'Either.right':
                        var $7494 = self.value;
                        var $7495 = Kind$Term$show$(Kind$Term$normalize$($7494, Map$from_list$(List$nil)));
                        var _expected$7 = $7495;
                        break;
                };
                var self = $7489;
                switch (self._) {
                    case 'Either.left':
                        var $7496 = self.value;
                        var $7497 = $7496;
                        var _detected$8 = $7497;
                        break;
                    case 'Either.right':
                        var $7498 = self.value;
                        var $7499 = Kind$Term$show$(Kind$Term$normalize$($7498, Map$from_list$(List$nil)));
                        var _detected$8 = $7499;
                        break;
                };
                var $7491 = ("Type mismatch.\u{a}" + ("- Expected: " + (_expected$7 + ("\u{a}" + ("- Detected: " + (_detected$8 + ("\u{a}" + (() => {
                    var self = $7490;
                    switch (self._) {
                        case 'List.nil':
                            var $7500 = "";
                            return $7500;
                        case 'List.cons':
                            var $7501 = ("With context:\u{a}" + Kind$Context$show$($7490));
                            return $7501;
                    };
                })())))))));
                var $7487 = $7491;
                break;
            case 'Kind.Error.show_goal':
                var $7502 = self.name;
                var $7503 = self.dref;
                var $7504 = self.verb;
                var $7505 = self.goal;
                var $7506 = self.context;
                var _goal_name$8 = ("Goal ?" + (Kind$Name$show$($7502) + ":\u{a}"));
                var self = $7505;
                switch (self._) {
                    case 'Maybe.some':
                        var $7508 = self.value;
                        var _goal$10 = Kind$Term$expand$($7503, $7508, _defs$2);
                        var $7509 = ("With type: " + ((() => {
                            var self = $7504;
                            if (self) {
                                var $7510 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $7511 = _x$11;
                                    return $7511;
                                })));
                                return $7510;
                            } else {
                                var $7512 = Kind$Term$show$(_goal$10);
                                return $7512;
                            };
                        })() + "\u{a}"));
                        var _with_type$9 = $7509;
                        break;
                    case 'Maybe.none':
                        var $7513 = "";
                        var _with_type$9 = $7513;
                        break;
                };
                var self = $7506;
                switch (self._) {
                    case 'List.nil':
                        var $7514 = "";
                        var _with_ctxt$10 = $7514;
                        break;
                    case 'List.cons':
                        var $7515 = ("With context:\u{a}" + Kind$Context$show$($7506));
                        var _with_ctxt$10 = $7515;
                        break;
                };
                var $7507 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $7487 = $7507;
                break;
            case 'Kind.Error.waiting':
                var $7516 = self.name;
                var $7517 = ("Waiting for \'" + ($7516 + "\'."));
                var $7487 = $7517;
                break;
            case 'Kind.Error.indirect':
                var $7518 = self.name;
                var $7519 = ("Error on dependency \'" + ($7518 + "\'."));
                var $7487 = $7519;
                break;
            case 'Kind.Error.patch':
                var $7520 = self.term;
                var $7521 = ("Patching: " + Kind$Term$show$($7520));
                var $7487 = $7521;
                break;
            case 'Kind.Error.undefined_reference':
                var $7522 = self.name;
                var $7523 = ("Undefined reference: " + (Kind$Name$show$($7522) + "\u{a}"));
                var $7487 = $7523;
                break;
            case 'Kind.Error.cant_infer':
                var $7524 = self.term;
                var $7525 = self.context;
                var _term$6 = Kind$Term$show$($7524);
                var _context$7 = Kind$Context$show$($7525);
                var $7526 = ("Can\'t infer type of: " + (_term$6 + ("\u{a}" + ("With context:\u{a}" + _context$7))));
                var $7487 = $7526;
                break;
        };
        return $7487;
    };
    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);

    function Kind$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7528 = self.origin;
                var $7529 = $7528;
                var $7527 = $7529;
                break;
            case 'Kind.Error.undefined_reference':
                var $7530 = self.origin;
                var $7531 = $7530;
                var $7527 = $7531;
                break;
            case 'Kind.Error.cant_infer':
                var $7532 = self.origin;
                var $7533 = $7532;
                var $7527 = $7533;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
                var $7534 = Maybe$none;
                var $7527 = $7534;
                break;
        };
        return $7527;
    };
    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);

    function Kind$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $7537 = _errors$2;
            var $7538 = BitsMap$keys$(_defs$1);
            let _errors$4 = $7537;
            let _key$3;
            while ($7538._ === 'List.cons') {
                _key$3 = $7538.head;
                var _name$5 = Kind$Name$from_bits$(_key$3);
                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);
                var self = _defn$6;
                switch (self._) {
                    case 'Maybe.some':
                        var $7539 = self.value;
                        var self = $7539;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7541 = self.file;
                                var $7542 = self.code;
                                var $7543 = self.name;
                                var $7544 = self.stat;
                                var self = $7544;
                                switch (self._) {
                                    case 'Kind.Status.fail':
                                        var $7546 = self.errors;
                                        var self = $7546;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $7548 = _errors$4;
                                                var $7547 = $7548;
                                                break;
                                            case 'List.cons':
                                                var _name_str$20 = $7543;
                                                var _rel_errs$21 = Kind$Error$relevant$($7546);
                                                var _errors$22 = (() => {
                                                    var $7551 = _errors$4;
                                                    var $7552 = _rel_errs$21;
                                                    let _errors$23 = $7551;
                                                    let _err$22;
                                                    while ($7552._ === 'List.cons') {
                                                        _err$22 = $7552.head;
                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);
                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);
                                                        var self = _ori_val$25;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $7553 = self.value;
                                                                var self = $7553;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $7555 = self.fst;
                                                                        var $7556 = self.snd;
                                                                        var _inside$29 = ("Inside \'" + ($7541 + "\':\u{a}"));
                                                                        var _source$30 = Kind$Code$highlight$($7542, $7555, $7556);
                                                                        var $7557 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + ("\u{a}" + "\u{a}")))));
                                                                        var $7554 = $7557;
                                                                        break;
                                                                };
                                                                var $7551 = $7554;
                                                                break;
                                                            case 'Maybe.none':
                                                                var $7558 = (_errors$23 + (_err_msg$24 + "\u{a}"));
                                                                var $7551 = $7558;
                                                                break;
                                                        };
                                                        _errors$23 = $7551;
                                                        $7552 = $7552.tail;
                                                    }
                                                    return _errors$23;
                                                })();
                                                var $7549 = _errors$22;
                                                var $7547 = $7549;
                                                break;
                                        };
                                        var $7545 = $7547;
                                        break;
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $7559 = _errors$4;
                                        var $7545 = $7559;
                                        break;
                                };
                                var $7540 = $7545;
                                break;
                        };
                        var $7537 = $7540;
                        break;
                    case 'Maybe.none':
                        var $7560 = _errors$4;
                        var $7537 = $7560;
                        break;
                };
                _errors$4 = $7537;
                $7538 = $7538.tail;
            }
            return _errors$4;
        })();
        var $7535 = _errors$3;
        return $7535;
    };
    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);

    function Kind$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Kind$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $7562 = "All terms check.";
            var _errors$5 = $7562;
        } else {
            var $7563 = self.charCodeAt(0);
            var $7564 = self.slice(1);
            var $7565 = _errors$4;
            var _errors$5 = $7565;
        };
        var $7561 = (_types$3 + ("\u{a}" + _errors$5));
        return $7561;
    };
    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);

    function Kind$api$io$check_file$(_file$1) {
        var $7566 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7567 = _m$bind$2;
            return $7567;
        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $7569 = self.value;
                    var $7570 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $7571 = _m$bind$4;
                        return $7571;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $7572 = IO$print$($7569);
                        return $7572;
                    }));
                    var $7568 = $7570;
                    break;
                case 'Either.right':
                    var $7573 = self.value;
                    var self = $7573;
                    switch (self._) {
                        case 'Pair.new':
                            var $7575 = self.fst;
                            var $7576 = self.snd;
                            var _nams$6 = $7575;
                            var _defs$7 = $7576;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $7578 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $7577 = $7578;
                                    break;
                                case 'List.cons':
                                    var $7579 = IO$print$(Kind$Defs$report$(_defs$7, _nams$6));
                                    var $7577 = $7579;
                                    break;
                            };
                            var $7574 = $7577;
                            break;
                    };
                    var $7568 = $7574;
                    break;
            };
            return $7568;
        }));
        return $7566;
    };
    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);

    function Kind$Synth$files$go$(_files$1, _defs$2) {
        var self = _files$1;
        switch (self._) {
            case 'List.cons':
                var $7581 = self.head;
                var $7582 = self.tail;
                var $7583 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7584 = _m$bind$5;
                    return $7584;
                }))(Kind$Synth$file$($7581, _defs$2))((_file_synth$5 => {
                    var self = _file_synth$5;
                    switch (self._) {
                        case 'Either.right':
                            var $7586 = self.value;
                            var _nams$7 = Pair$fst$($7586);
                            var _defs$8 = Pair$snd$($7586);
                            var $7587 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $7588 = _m$bind$9;
                                return $7588;
                            }))(Kind$Synth$files$go$($7582, _defs$8))((_rest$9 => {
                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));
                                var _defs$11 = Pair$snd$(_rest$9);
                                var $7589 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                                    var $7590 = _m$pure$13;
                                    return $7590;
                                }))(Pair$new$(_nams$10, _defs$11));
                                return $7589;
                            }));
                            var $7585 = $7587;
                            break;
                        case 'Either.left':
                            var $7591 = Kind$Synth$files$go$($7582, _defs$2);
                            var $7585 = $7591;
                            break;
                    };
                    return $7585;
                }));
                var $7580 = $7583;
                break;
            case 'List.nil':
                var $7592 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7593 = _m$pure$4;
                    return $7593;
                }))(Pair$new$(List$nil, _defs$2));
                var $7580 = $7592;
                break;
        };
        return $7580;
    };
    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);

    function Kind$Synth$remove_duplicate_names$(_names$1) {
        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {
            var $7595 = Kind$Map$set(_name$2)(Unit$new);
            return $7595;
        }));
        var $7594 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);
        return $7594;
    };
    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);

    function Kind$Synth$files$(_files$1, _defs$2) {
        var $7596 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7597 = _m$bind$3;
            return $7597;
        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {
            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));
            var _defs$5 = Pair$snd$(_got$3);
            var $7598 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                var $7599 = _m$pure$7;
                return $7599;
            }))(Pair$new$(_nams$4, _defs$5));
            return $7598;
        }));
        return $7596;
    };
    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);

    function Kind$api$io$check_files$(_files$1) {
        var $7600 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7601 = _m$bind$2;
            return $7601;
        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {
            var _nams$3 = Pair$fst$(_loaded$2);
            var _defs$4 = Pair$snd$(_loaded$2);
            var self = _nams$3;
            switch (self._) {
                case 'List.nil':
                    var $7603 = IO$print$("No valid Kind file found.");
                    var $7602 = $7603;
                    break;
                case 'List.cons':
                    var $7604 = IO$print$(Kind$Defs$report$(_defs$4, _nams$3));
                    var $7602 = $7604;
                    break;
            };
            return $7602;
        }));
        return $7600;
    };
    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);

    function Kind$api$io$check_term$(_name$1) {
        var $7605 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7606 = _m$bind$2;
            return $7606;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7608 = self.value;
                    var $7609 = IO$print$(Kind$Defs$report$($7608, List$cons$(_name$1, List$nil)));
                    var $7607 = $7609;
                    break;
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                        var $7611 = ("\'" + (_x$4 + "\'"));
                        return $7611;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $7610 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $7607 = $7610;
                    break;
            };
            return $7607;
        }));
        return $7605;
    };
    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);

    function Kind$api$io$show_term$(_name$1) {
        var $7612 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7613 = _m$bind$2;
            return $7613;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $7614 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7615 = self.value;
                        var _defs$4 = $7615;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7617 = self.value;
                                var self = $7617;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $7619 = self.term;
                                        var _term$16 = $7619;
                                        var $7620 = Kind$Term$show$(_term$16);
                                        var $7618 = $7620;
                                        break;
                                };
                                var $7616 = $7618;
                                break;
                            case 'Maybe.none':
                                var $7621 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $7616 = $7621;
                                break;
                        };
                        return $7616;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $7623 = ("\'" + (_x$4 + "\'"));
                            return $7623;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $7622 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $7622;
                };
            })());
            return $7614;
        }));
        return $7612;
    };
    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);

    function Kind$api$io$show_term_normal$(_name$1) {
        var $7624 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7625 = _m$bind$2;
            return $7625;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $7626 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7627 = self.value;
                        var _defs$4 = $7627;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7629 = self.value;
                                var self = $7629;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $7631 = self.term;
                                        var _term$16 = $7631;
                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);
                                        var $7632 = Kind$Term$show$(_norm$17);
                                        var $7630 = $7632;
                                        break;
                                };
                                var $7628 = $7630;
                                break;
                            case 'Maybe.none':
                                var $7633 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $7628 = $7633;
                                break;
                        };
                        return $7628;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $7635 = ("\'" + (_x$4 + "\'"));
                            return $7635;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $7634 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $7634;
                };
            })());
            return $7626;
        }));
        return $7624;
    };
    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $7636 = self.value;
                        var $7637 = $7636;
                        return $7637;
                    case 'IO.ask':
                        var $7638 = self.then;
                        var $7639 = IO$purify$($7638(""));
                        return $7639;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Kind$api$check_code$(_code$1) {
        var self = Kind$Defs$read$("Main.kind", _code$1, Kind$Map$new);
        switch (self._) {
            case 'Either.left':
                var $7641 = self.value;
                var $7642 = $7641;
                var $7640 = $7642;
                break;
            case 'Either.right':
                var $7643 = self.value;
                var $7644 = IO$purify$((() => {
                    var _defs$3 = $7643;
                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);
                    var $7645 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $7646 = _m$bind$5;
                        return $7646;
                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $7647 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $7648 = _m$pure$7;
                            return $7648;
                        }))(Kind$Defs$report$(_defs$5, _nams$4));
                        return $7647;
                    }));
                    return $7645;
                })());
                var $7640 = $7644;
                break;
        };
        return $7640;
    };
    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);

    function Kind$Term$read$(_code$1) {
        var self = Kind$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.value':
                var $7650 = self.val;
                var $7651 = Maybe$some$($7650);
                var $7649 = $7651;
                break;
            case 'Parser.Reply.error':
                var $7652 = Maybe$none;
                var $7649 = $7652;
                break;
        };
        return $7649;
    };
    const Kind$Term$read = x0 => Kind$Term$read$(x0);
    const Kind$api$export = (() => {
        var _e$1 = Kind$api$io$term_to_core;
        var _e$2 = Kind$api$io$check_file;
        var _e$3 = Kind$api$io$check_files;
        var _e$4 = Kind$api$io$check_term;
        var _e$5 = Kind$api$io$show_term;
        var _e$6 = Kind$api$io$show_term_normal;
        var _e$7 = Kind$api$check_code;
        var _e$8 = Kind$Term$read;
        var $7653 = IO$monad$((_m$bind$9 => _m$pure$10 => {
            var $7654 = _m$pure$10;
            return $7654;
        }))(Unit$new);
        return $7653;
    })();
    return {
        '$main$': () => run(Kind$api$export),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'BitsMap': BitsMap,
        'Maybe.none': Maybe$none,
        'BitsMap.get': BitsMap$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'Word.zero': Word$zero,
        'Nat.to_word': Nat$to_word,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Kind.Name.to_bits': Kind$Name$to_bits,
        'Kind.Map.get': Kind$Map$get,
        'IO.get_file': IO$get_file,
        'Parser.Reply': Parser$Reply,
        'Parser.Reply.value': Parser$Reply$value,
        'Parser.is_eof': Parser$is_eof,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser': Parser,
        'Maybe.some': Maybe$some,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'List.cons': List$cons,
        'List': List,
        'List.nil': List$nil,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Unit.new': Unit$new,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'String.nil': String$nil,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.eof': Parser$eof,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Kind.Parser.spaces': Kind$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Kind.Parser.init': Kind$Parser$init,
        'Parser.many1': Parser$many1,
        'Kind.Name.is_letter': Kind$Name$is_letter,
        'Kind.Parser.letter': Kind$Parser$letter,
        'List.fold': List$fold,
        'Kind.Parser.name1': Kind$Parser$name1,
        'Kind.Parser.text': Kind$Parser$text,
        'Parser.until1': Parser$until1,
        'Pair': Pair,
        'Parser.maybe': Parser$maybe,
        'Kind.Parser.item': Kind$Parser$item,
        'Kind.Parser.name': Kind$Parser$name,
        'Kind.Term.all': Kind$Term$all,
        'Pair.new': Pair$new,
        'Kind.Parser.stop': Kind$Parser$stop,
        'Kind.Term.ori': Kind$Term$ori,
        'Kind.Parser.forall': Kind$Parser$forall,
        'Kind.Term.lam': Kind$Term$lam,
        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
        'Kind.Parser.lambda': Kind$Parser$lambda,
        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
        'Kind.Term.ref': Kind$Term$ref,
        'Kind.Term.app': Kind$Term$app,
        'Kind.Term.hol': Kind$Term$hol,
        'Kind.Term.let': Kind$Term$let,
        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
        'Kind.Parser.letforin': Kind$Parser$letforin,
        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
        'Kind.Parser.letwhile': Kind$Parser$letwhile,
        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
        'Kind.Parser.let': Kind$Parser$let,
        'Kind.Parser.let.omit': Kind$Parser$let$omit,
        'Kind.Parser.getwhile': Kind$Parser$getwhile,
        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
        'Kind.Parser.get': Kind$Parser$get,
        'Kind.Parser.get.omit': Kind$Parser$get$omit,
        'Kind.Term.def': Kind$Term$def,
        'Kind.Parser.def': Kind$Parser$def,
        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
        'Kind.Parser.if': Kind$Parser$if,
        'List.mapped': List$mapped,
        'Kind.Code.backslash': Kind$Code$backslash,
        'Kind.Code.escapes': Kind$Code$escapes,
        'Kind.Parser.char.single': Kind$Parser$char$single,
        'Kind.Term.chr': Kind$Term$chr,
        'Kind.Parser.char': Kind$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Kind.Parser.string.go': Kind$Parser$string$go,
        'Kind.Term.str': Kind$Term$str,
        'Kind.Parser.string': Kind$Parser$string,
        'Kind.Parser.pair': Kind$Parser$pair,
        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
        'Kind.Parser.some': Kind$Parser$some,
        'Kind.Parser.not': Kind$Parser$not,
        'Kind.Parser.left': Kind$Parser$left,
        'Kind.Parser.right': Kind$Parser$right,
        'Kind.Parser.apply': Kind$Parser$apply,
        'Kind.Parser.chain': Kind$Parser$chain,
        'Kind.Parser.mirror': Kind$Parser$mirror,
        'Kind.Name.read': Kind$Name$read,
        'Kind.Parser.list': Kind$Parser$list,
        'Kind.Parser.map': Kind$Parser$map,
        'Kind.Parser.log': Kind$Parser$log,
        'Kind.Parser.do.statements': Kind$Parser$do$statements,
        'Kind.Parser.do': Kind$Parser$do,
        'Parser.try': Parser$try,
        'Parser.fail': Parser$fail,
        'Parser.avoiding': Parser$avoiding,
        'Maybe.default': Maybe$default,
        'Kind.Term.nat': Kind$Term$nat,
        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
        'Kind.Term.unroll_str': Kind$Term$unroll_str,
        'Kind.Term.reduce': Kind$Term$reduce,
        'BitsMap.new': BitsMap$new,
        'Kind.Map.new': Kind$Map$new,
        'Kind.Term.extract_name': Kind$Term$extract_name,
        'Kind.Ann.new': Kind$Ann$new,
        'Kind.Parser.case.with': Kind$Parser$case$with,
        'Kind.Parser.case.case': Kind$Parser$case$case,
        'Debug.log': Debug$log,
        'Pair.snd': Pair$snd,
        'Kind.Map': Kind$Map,
        'BitsMap.tie': BitsMap$tie,
        'BitsMap.set': BitsMap$set,
        'Kind.Map.set': Kind$Map$set,
        'Kind.Parser.case.group': Kind$Parser$case$group,
        'Pair.fst': Pair$fst,
        'BitsMap.map': BitsMap$map,
        'Kind.Map.map': Kind$Map$map,
        'Kind.Term.cse': Kind$Term$cse,
        'Kind.Parser.case.build': Kind$Parser$case$build,
        'Kind.Parser.case': Kind$Parser$case,
        'Kind.Parser.open': Kind$Parser$open,
        'Kind.Parser.without': Kind$Parser$without,
        'Kind.Parser.switch.case': Kind$Parser$switch$case,
        'Kind.Parser.switch': Kind$Parser$switch,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.is_some': Maybe$is_some,
        'Kind.Term.gol': Kind$Term$gol,
        'Kind.Parser.goal': Kind$Parser$goal,
        'Kind.Parser.hole': Kind$Parser$hole,
        'List.any': List$any,
        'Kind.Parser.float.str_digit': Kind$Parser$float$str_digit,
        'String.from_list': String$from_list,
        'Kind.Parser.float.64': Kind$Parser$float$64,
        'Kind.Parser.float.32': Kind$Parser$float$32,
        'Either': Either,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'List.at': List$at,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Kind.Parser.int_pos': Kind$Parser$int_pos,
        'Kind.Parser.int_neg': Kind$Parser$int_neg,
        'Kind.Parser.int': Kind$Parser$int,
        'Kind.Parser.machine_integer.signed': Kind$Parser$machine_integer$signed,
        'Parser.hex_digit': Parser$hex_digit,
        'Parser.hex_nat': Parser$hex_nat,
        'Kind.Parser.nat': Kind$Parser$nat,
        'Kind.Parser.machine_integer.unsigned': Kind$Parser$machine_integer$unsigned,
        'Kind.Parser.u64': Kind$Parser$u64,
        'Kind.Parser.u32': Kind$Parser$u32,
        'Kind.Parser.u16': Kind$Parser$u16,
        'Kind.Parser.u8': Kind$Parser$u8,
        'String.eql': String$eql,
        'Kind.Term.typ': Kind$Term$typ,
        'Kind.Parser.reference': Kind$Parser$reference,
        'List.for': List$for,
        'Kind.Parser.application': Kind$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Kind.Parser.application.erased': Kind$Parser$application$erased,
        'Kind.Parser.list_set': Kind$Parser$list_set,
        'Kind.Parser.list_get': Kind$Parser$list_get,
        'Kind.Parser.map_set': Kind$Parser$map_set,
        'Kind.Parser.map_get': Kind$Parser$map_get,
        'Kind.Parser.arrow': Kind$Parser$arrow,
        'Kind.Parser.op': Kind$Parser$op,
        'Kind.Parser.add': Kind$Parser$add,
        'Kind.Parser.sub': Kind$Parser$sub,
        'Kind.Parser.mul': Kind$Parser$mul,
        'Kind.Parser.div': Kind$Parser$div,
        'Kind.Parser.mod': Kind$Parser$mod,
        'Kind.Parser.ltn': Kind$Parser$ltn,
        'Kind.Parser.lte': Kind$Parser$lte,
        'Kind.Parser.eql': Kind$Parser$eql,
        'Kind.Parser.gte': Kind$Parser$gte,
        'Kind.Parser.gtn': Kind$Parser$gtn,
        'Kind.Parser.and': Kind$Parser$and,
        'Kind.Parser.or': Kind$Parser$or,
        'Kind.Parser.default': Kind$Parser$default,
        'Kind.Parser.cons': Kind$Parser$cons,
        'Kind.Parser.concat': Kind$Parser$concat,
        'Kind.Parser.string_concat': Kind$Parser$string_concat,
        'Kind.Parser.sigma': Kind$Parser$sigma,
        'Kind.Parser.equality': Kind$Parser$equality,
        'Kind.Parser.inequality': Kind$Parser$inequality,
        'Kind.Parser.rewrite': Kind$Parser$rewrite,
        'Kind.Term.ann': Kind$Term$ann,
        'Kind.Parser.annotation': Kind$Parser$annotation,
        'Kind.Parser.application.hole': Kind$Parser$application$hole,
        'Kind.Parser.suffix': Kind$Parser$suffix,
        'Kind.Parser.term': Kind$Parser$term,
        'Kind.Parser.name_term': Kind$Parser$name_term,
        'Kind.Binder.new': Kind$Binder$new,
        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Kind.Parser.binder': Kind$Parser$binder,
        'List.length': List$length,
        'Kind.Parser.make_forall': Kind$Parser$make_forall,
        'List.at_last': List$at_last,
        'Kind.Term.var': Kind$Term$var,
        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
        'Kind.Name.eql': Kind$Name$eql,
        'Kind.Context.find.go': Kind$Context$find$go,
        'Kind.Context.find': Kind$Context$find,
        'Kind.Path.o': Kind$Path$o,
        'Kind.Path.i': Kind$Path$i,
        'Kind.Path.to_bits': Kind$Path$to_bits,
        'Kind.Term.bind': Kind$Term$bind,
        'Kind.Status.done': Kind$Status$done,
        'Kind.Status.init': Kind$Status$init,
        'Kind.Def.new': Kind$Def$new,
        'Kind.Map.def': Kind$Map$def,
        'Kind.Parser.file.def': Kind$Parser$file$def,
        'Kind.Constructor.new': Kind$Constructor$new,
        'Kind.Parser.constructor': Kind$Parser$constructor,
        'Kind.Datatype.new': Kind$Datatype$new,
        'Kind.Parser.datatype': Kind$Parser$datatype,
        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
        'Kind.Datatype.build_term': Kind$Datatype$build_term,
        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
        'Kind.Datatype.build_type': Kind$Datatype$build_type,
        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
        'Kind.Constructor.build_term': Kind$Constructor$build_term,
        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
        'Kind.Constructor.build_type': Kind$Constructor$build_type,
        'Kind.Parser.file.adt': Kind$Parser$file$adt,
        'Kind.Parser.file.end': Kind$Parser$file$end,
        'Kind.Parser.file': Kind$Parser$file,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Kind.Code.highlight.end': Kind$Code$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'Nat.pred': Nat$pred,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Bool.not': Bool$not,
        'Kind.Code.color': Kind$Code$color,
        'Nat.eql': Nat$eql,
        'List.take': List$take,
        'Kind.Code.highlight.go': Kind$Code$highlight$go,
        'Kind.Code.highlight': Kind$Code$highlight,
        'Kind.Defs.read': Kind$Defs$read,
        'Kind.Synth.load.go': Kind$Synth$load$go,
        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
        'Char.eql': Char$eql,
        'String.starts_with': String$starts_with,
        'String.drop': String$drop,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Kind.Synth.files_of': Kind$Synth$files_of,
        'Kind.Synth.load': Kind$Synth$load,
        'Kind.Status.wait': Kind$Status$wait,
        'Kind.Check': Kind$Check,
        'Kind.Check.result': Kind$Check$result,
        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
        'Kind.Error.waiting': Kind$Error$waiting,
        'Kind.Error.indirect': Kind$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Kind.MPath.o': Kind$MPath$o,
        'Kind.MPath.i': Kind$MPath$i,
        'Kind.Error.patch': Kind$Error$patch,
        'Kind.MPath.to_bits': Kind$MPath$to_bits,
        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
        'Kind.Error.show_goal': Kind$Error$show_goal,
        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,
        'Kind.Term.normalize': Kind$Term$normalize,
        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,
        'List.tail': List$tail,
        'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,
        'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,
        'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,
        'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Kind.Term.serialize.go': Kind$Term$serialize$go,
        'Kind.Term.serialize': Kind$Term$serialize,
        'Bits.eql': Bits$eql,
        'Kind.Term.identical': Kind$Term$identical,
        'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,
        'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,
        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
        'String.is_empty': String$is_empty,
        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
        'Kind.Error.cant_infer': Kind$Error$cant_infer,
        'BitsSet.has': BitsSet$has,
        'BitsSet.mut.has': BitsSet$mut$has,
        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
        'Bool.or': Bool$or,
        'Kind.Term.has_holes': Kind$Term$has_holes,
        'Kind.Term.equal.hole': Kind$Term$equal$hole,
        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
        'BitsSet.set': BitsSet$set,
        'BitsSet.mut.set': BitsSet$mut$set,
        'Bool.eql': Bool$eql,
        'Kind.Term.equal': Kind$Term$equal,
        'BitsSet.new': BitsSet$new,
        'BitsSet.mut.new': BitsSet$mut$new,
        'Kind.Term.check': Kind$Term$check,
        'Kind.Path.nil': Kind$Path$nil,
        'Kind.MPath.nil': Kind$MPath$nil,
        'List.is_empty': List$is_empty,
        'Kind.Term.patch_at': Kind$Term$patch_at,
        'Kind.Synth.fix': Kind$Synth$fix,
        'Kind.Status.fail': Kind$Status$fail,
        'Kind.Synth.one': Kind$Synth$one,
        'BitsMap.from_list': BitsMap$from_list,
        'Kind.Term.inline.names': Kind$Term$inline$names,
        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
        'Kind.Term.inline': Kind$Term$inline,
        'BitsMap.values.go': BitsMap$values$go,
        'BitsMap.values': BitsMap$values,
        'Kind.Core.var_name': Kind$Core$var_name,
        'Kind.Name.show': Kind$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Kind.Code.escape.char': Kind$Code$escape$char,
        'Kind.Code.escape.go': Kind$Code$escape$go,
        'Kind.Code.escape': Kind$Code$escape,
        'Kind.Core.show': Kind$Core$show,
        'Kind.Defs.core': Kind$Defs$core,
        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,
        'BitsMap.keys.go': BitsMap$keys$go,
        'BitsMap.keys': BitsMap$keys,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'Word.from_bits': Word$from_bits,
        'Kind.Name.from_bits': Kind$Name$from_bits,
        'Kind.Synth.many': Kind$Synth$many,
        'Kind.Synth.file': Kind$Synth$file,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
        'Kind.Term.show.app.done': Kind$Term$show$app$done,
        'Kind.Term.show.app': Kind$Term$show$app,
        'BitsMap.to_list.go': BitsMap$to_list$go,
        'BitsMap.to_list': BitsMap$to_list,
        'Kind.Term.show.go': Kind$Term$show$go,
        'Kind.Term.show': Kind$Term$show,
        'Kind.Defs.report.types': Kind$Defs$report$types,
        'List.filter': List$filter,
        'Kind.Error.is_undef': Kind$Error$is_undef,
        'Kind.Error.is_mistake': Kind$Error$is_mistake,
        'Kind.Error.is_goal': Kind$Error$is_goal,
        'Kind.Error.relevant': Kind$Error$relevant,
        'Map': Map,
        'String.to_bits': String$to_bits,
        'Map.from_list': Map$from_list,
        'Kind.Context.show': Kind$Context$show,
        'Kind.Term.expand_at': Kind$Term$expand_at,
        'Kind.Term.expand_ct': Kind$Term$expand_ct,
        'Kind.Term.expand': Kind$Term$expand,
        'Kind.Error.show': Kind$Error$show,
        'Kind.Error.origin': Kind$Error$origin,
        'Kind.Defs.report.errors': Kind$Defs$report$errors,
        'Kind.Defs.report': Kind$Defs$report,
        'Kind.api.io.check_file': Kind$api$io$check_file,
        'Kind.Synth.files.go': Kind$Synth$files$go,
        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,
        'Kind.Synth.files': Kind$Synth$files,
        'Kind.api.io.check_files': Kind$api$io$check_files,
        'Kind.api.io.check_term': Kind$api$io$check_term,
        'Kind.api.io.show_term': Kind$api$io$show_term,
        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,
        'IO.purify': IO$purify,
        'Kind.api.check_code': Kind$api$check_code,
        'Kind.Term.read': Kind$Term$read,
        'Kind.api.export': Kind$api$export,
    };
})();